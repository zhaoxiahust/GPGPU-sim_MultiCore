cscope 15 /home/kain/gpu/v3.x_paralle_cta_paralle_cluster_split_block               0003013138
	@cuobjdump_to_ptxplus/cuobjdumpInst.cc

29 
	~<s°ªam
>

30 
	~<io°ªam
>

31 
	~<ˇs£π
>

32 
	~<°rög
>

35 
	~"cuobjdumpIn°.h
"

37 
ouçut
(c⁄° * 
ãxt
);

38 
ouçut
(c⁄° 
°d
::
°rög
 
ãxt
);

41 
	gcuobjdumpIn°
::
	$cuobjdumpIn°
()

44 
m_œbñ
 = "";

45 
m_¥ediˇã
 = 
√w
 
	`°rögLi°
();

46 
m_ba£
 = "";

47 
m_ba£Modifõrs
 = 
√w
 
	`°rögLi°
();

48 
m_ty≥Modifõrs
 = 
√w
 
	`°rögLi°
();

49 
m_›î™ds
 = 
√w
 
	`°rögLi°
();

50 
m_¥ediˇãModifõrs
 = 
√w
 
	`°rögLi°
();

51 
	}
}

53 
	gcuobjdumpIn°
::
	$¥ötCuobjdumpIn°
()

71 
°d
::
cout
 << 
m_ba£
 << " ";

72 
m_ba£Modifõrs
->
	`¥ötSåögLi°
();

73 
°d
::
cout
 << " ";

74 
m_ty≥Modifõrs
->
	`¥ötSåögLi°
();

75 
°d
::
cout
 << " ";

76 
m_›î™ds
->
	`¥ötSåögLi°
();

77 
°d
::
cout
 << "\n";

78 
	}
}

81 
	gcuobjdumpIn°
::
	$¥ötHódîPtx
()

83 
	`ouçut
(
m_ba£
); output(" ");

85 
°rögLi°Põ˚
* 
cuºítPõ˚
;

87 
cuºítPõ˚
 = 
m_ba£Modifõrs
->
	`gëLi°Sèπ
();

88 
i
=0; (i<
m_ba£Modifõrs
->
	`gëSize
())&&(
cuºítPõ˚
!=
NULL
); i++)

90 
	`ouçut
(" "); ouçut(
cuºítPõ˚
->
°rögText
);

91 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

94 
cuºítPõ˚
 = 
m_›î™ds
->
	`gëLi°Sèπ
();

95 
i
=0; (i<
m_›î™ds
->
	`gëSize
())&&(
cuºítPõ˚
!=
NULL
); i++)

97 
	`ouçut
(" "); ouçut(
cuºítPõ˚
->
°rögText
);

98 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

100 
	}
}

103 c⁄° * 
	gcuobjdumpIn°
::
	$gëBa£
()

105  
m_ba£
;

106 
	}
}

108 
°rögLi°
* 
	gcuobjdumpIn°
::
	$gëTy≥Modifõrs
()

110  
m_ty≥Modifõrs
;

111 
	}
}

114 
boﬁ
 
	gcuobjdumpIn°
::
	$¥ötHódîIn°
()

116 if(
	`°rcmp
(
m_ba£
, ".version")==0)

118 
	`ouçut
(
m_ba£
); output(" ");

120 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_›î™ds
->
	`gëLi°Sèπ
();

121 
	`ouçut
(
cuºítPõ˚
->
°rögText
);

122 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

124 if(
cuºítPõ˚
!=
NULL
)

126 
	`ouçut
("."); ouçut(
cuºítPõ˚
->
°rögText
);

128 
	`ouçut
("+");

129 
	`ouçut
("\n");

131 if(
	`°rcmp
(
m_ba£
, ".target")==0)

133 
	`ouçut
(
m_ba£
); output(" ");

135 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_›î™ds
->
	`gëLi°Sèπ
();

136 
	`ouçut
(
cuºítPõ˚
->
°rögText
);

137 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

139 
cuºítPõ˚
!=
NULL
)

141 
	`ouçut
(", "); ouçut(
cuºítPõ˚
->
°rögText
);

142 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

144 
	`ouçut
("\n");

146 if(
	`°rcmp
(
m_ba£
, ".tex")==0)

148 
	`ouçut
(
m_ba£
); output(" ");

150 
°rögLi°Põ˚
* 
cuºítPõ˚
;

153 
cuºítPõ˚
 = 
m_ba£Modifõrs
->
	`gëLi°Sèπ
();

154 
	`ouçut
(
cuºítPõ˚
->
°rögText
); output(" ");

155 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

157 
cuºítPõ˚
!=
NULL
)

159 
	`ouçut
(" "); ouçut(
cuºítPõ˚
->
°rögText
);

160 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

163 
cuºítPõ˚
 = 
m_›î™ds
->
	`gëLi°Sèπ
();

164 
	`ouçut
(
cuºítPõ˚
->
°rögText
);

165 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

167 
cuºítPõ˚
!=
NULL
)

169 
	`ouçut
(" "); ouçut(
cuºítPõ˚
->
°rögText
);

170 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

172 
	`ouçut
(";\n");

176  
Ál£
;

178  
åue
;

179 
	}
}

181 
	gcuobjdumpIn°
::
	$£tBa£
(c⁄° * 
£tBa£VÆue
)

183 
m_ba£
 = 
£tBa£VÆue
;

184 
	}
}

186 
	gcuobjdumpIn°
::
	$addBa£Modifõr
(c⁄° * 
addBa£Mod
)

188 
°rögLi°Põ˚
* 
ãmpPõ˚
 = 
√w
 stringListPiece;

189 
ãmpPõ˚
->
°rögText
 = 
addBa£Mod
;

191 
m_ba£Modifõrs
->
	`add
(
ãmpPõ˚
);

192 
	}
}

194 
	gcuobjdumpIn°
::
	$addTy≥Modifõr
(c⁄° * 
addTy≥Mod
)

196 
°rögLi°Põ˚
* 
ãmpPõ˚
 = 
√w
 stringListPiece;

197 
ãmpPõ˚
->
°rögText
 = 
addTy≥Mod
;

199 
m_ty≥Modifõrs
->
	`add
(
ãmpPõ˚
);

200 
	}
}

202 
	gcuobjdumpIn°
::
	$addO≥ønd
(c⁄° * 
addOp
)

204 
°rögLi°Põ˚
* 
ãmpPõ˚
 = 
√w
 stringListPiece;

205 
ãmpPõ˚
->
°rögText
 = 
addOp
;

207 
m_›î™ds
->
	`add
(
ãmpPõ˚
);

208 
	}
}

210 
	gcuobjdumpIn°
::
	$£tPªdiˇã
(c⁄° * 
£tPªdiˇãVÆue
)

212 
°rögLi°Põ˚
* 
ãmpPõ˚
 = 
√w
 stringListPiece;

213 
ãmpPõ˚
->
°rögText
 = 
£tPªdiˇãVÆue
;

215 
m_¥ediˇã
->
	`add
(
ãmpPõ˚
);

216 
	}
}

218 
	gcuobjdumpIn°
::
	$addPªdiˇãModifõr
(c⁄° * 
addPªdiˇãMod
)

220 
°rögLi°Põ˚
* 
ãmpPõ˚
 = 
√w
 stringListPiece;

221 
ãmpPõ˚
->
°rögText
 = 
addPªdiˇãMod
;

223 
m_¥ediˇãModifõrs
->
	`add
(
ãmpPõ˚
);

224 
	}
}

226 
	gcuobjdumpIn°
::
	$£tLabñ
(c⁄° * 
£tLabñVÆue
)

228 
m_œbñ
 = 
£tLabñVÆue
;

229 
	}
}

231 
boﬁ
 
	gcuobjdumpIn°
::
checkCubojdumpLabñ
(
°d
::
li°
<°d::
°rög
> 
œbñLi°
, std::°rög 
œbñ
)

233 if(
œbñLi°
.
em±y
())

234  
Ál£
;

236 
	g°d
::
li°
<
°d
::
°rög
>::
ôî©‹
 
œbñIãøt‹
;

238  
	gœbñIãøt‹
=
œbñLi°
.
begö
();ÜabñIãøt‹!ˆabñLi°.
íd
();ÜabelIterator++ )

240 if(
	gœbñ
.
com∑ª
(*
œbñIãøt‹
) == 0)

241  
åue
;

244  
	gÁl£
;

247 
	gcuobjdumpIn°
::
¥ötCuobjdumpLabñ
(
°d
::
li°
<°d::
°rög
> 
œbñLi°
)

249 if((
°rcmp
(
m_œbñ
, "")!=0)&&(
checkCubojdumpLabñ
(
œbñLi°
, m_label))) {

250 
ouçut
(
m_œbñ
);

251 
ouçut
(": ");

255 
	gcuobjdumpIn°
::
	$¥ötCuobjdumpPªdiˇã
()

257 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_¥ediˇã
->
	`gëLi°Sèπ
();

258 if(
cuºítPõ˚
!=
NULL
)

260 
	`ouçut
("@$p");

261 
modSåög
[2];

262 
modSåög
[0]=
cuºítPõ˚
->
°rögText
[1];

263 
modSåög
[1]='\0';

264 
	`ouçut
(
modSåög
);

266 
°rögLi°Põ˚
* 
cuºítPõ˚2
 = 
m_¥ediˇãModifõrs
->
	`gëLi°Sèπ
();

267 
i
=0; (i<
m_¥ediˇãModifõrs
->
	`gëSize
())&&(
cuºítPõ˚2
!=
NULL
); i++)

269 c⁄° * 
modSåög2
 = 
cuºítPõ˚2
->
°rögText
;

270 * 
modSåög3
 = 
√w
 [
	`°æí
(
cuºítPõ˚2
->
°rögText
)+1];

272 
i
=0; i<
	`°æí
(
modSåög2
); i++)

274 if(
modSåög2
[
i
] >= 'A' && modString2[i] <= 'Z')

275 
modSåög3
[
i
] = 
modSåög2
[i] + 32;

277 
modSåög3
[
i
] = 
modSåög2
[i];

279 
modSåög3
[
	`°æí
(
modSåög2
)]='\0';

280 if–
	`°rcmp
(
modSåög3
, ".not_sign")==0)

282 
	`ouçut
(".nsf");

283 } if–
	`°rcmp
(
modSåög3
, ".sign")==0)

285 
	`ouçut
(".sf");

286 } if–
	`°rcmp
(
modSåög3
, ".carry")==0)

288 
	`ouçut
(".cf");

292 
	`ouçut
(
modSåög3
);

294 
cuºítPõ˚
 = 
cuºítPõ˚2
->
√xtSåög
;

296 
	`ouçut
(" ");

298 
	}
}

300 
	gcuobjdumpIn°
::
	$¥ötCuobjdumpTy≥Modifõrs
()

302 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_ty≥Modifõrs
->
	`gëLi°Sèπ
();

303 
i
=0; (i<
m_ty≥Modifõrs
->
	`gëSize
())&&(
cuºítPõ˚
!=
NULL
); i++)

305 c⁄° * 
modSåög
 = 
cuºítPõ˚
->
°rögText
;

306 if–
	`°rcmp
(
modSåög
, ".F16")==0 )

307 
	`ouçut
(".f16");

308 if–
	`°rcmp
(
modSåög
, ".F32")==0 )

309 
	`ouçut
(".f32");

310 if–
	`°rcmp
(
modSåög
, ".F64")==0 ){

311 if–
	`°rcmp
(
m_ba£
, "F2I") == 0||

312 
	`°rcmp
(
m_ba£
, "F2F") == 0)

313 
	`ouçut
(".f64");

315 
	`ouçut
(".ff64");

317 if–
	`°rcmp
(
modSåög
, ".S8")==0 )

318 
	`ouçut
(".s8");

319 if–
	`°rcmp
(
modSåög
, ".S16")==0 )

320 
	`ouçut
(".s16");

321 if–
	`°rcmp
(
modSåög
, ".S32")==0 )

322 
	`ouçut
(".s32");

323 if–
	`°rcmp
(
modSåög
, ".S64")==0 )

324 
	`ouçut
(".bb64");

325 if–
	`°rcmp
(
modSåög
, ".S128")==0 )

326 
	`ouçut
(".bb128");

327 if–
	`°rcmp
(
modSåög
, ".U8")==0 )

328 
	`ouçut
(".u8");

329 if–
	`°rcmp
(
modSåög
, ".U16")==0 )

330 
	`ouçut
(".u16");

331 if–
	`°rcmp
(
modSåög
, ".U32")==0 )

332 
	`ouçut
(".u32");

333 if–
	`°rcmp
(
modSåög
, ".U64")==0 )

334 
	`ouçut
(".bb64");

335 if–
	`°rcmp
(
modSåög
, ".HI")==0 )

336 
	`ouçut
(".hi");

339 
	`¥ötf
("Unknown Type: ");

340 
	`¥ötf
(
modSåög
);

341 
	`¥ötf
("\n");

342 
	`ouçut
("Unknow¿Ty≥: "); ouçut(
modSåög
);

343 
	`as£π
(0);

346 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

348 
	}
}

350 
	gcuobjdumpIn°
::
	$¥ötCuobjdumpBa£Modifõrs
()

352 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_ba£Modifõrs
->
	`gëLi°Sèπ
();

353 
i
=0; (i<
m_ba£Modifõrs
->
	`gëSize
())&&(
cuºítPõ˚
!=
NULL
); i++)

355 c⁄° * 
modSåög
 = 
cuºítPõ˚
->
°rögText
;

356 if–
	`°rcmp
(
modSåög
, "EQ")==0 )

357 
	`ouçut
(".eq");

358 if–
	`°rcmp
(
modSåög
, "EQU")==0 )

359 
	`ouçut
(".equ");

360 if–
	`°rcmp
(
modSåög
, "GE")==0 )

361 
	`ouçut
(".ge");

362 if–
	`°rcmp
(
modSåög
, "GEU")==0 )

363 
	`ouçut
(".geu");

364 if–
	`°rcmp
(
modSåög
, "GT")==0 )

365 
	`ouçut
(".gt");

366 if–
	`°rcmp
(
modSåög
, "GTU")==0 )

367 
	`ouçut
(".gtu");

368 if–
	`°rcmp
(
modSåög
, "LE")==0 )

369 
	`ouçut
(".le");

370 if–
	`°rcmp
(
modSåög
, "LEU")==0 )

371 
	`ouçut
(".leu");

372 if–
	`°rcmp
(
modSåög
, "LT")==0 )

373 
	`ouçut
(".lt");

374 if–
	`°rcmp
(
modSåög
, "LTU")==0 )

375 
	`ouçut
(".ltu");

376 if–
	`°rcmp
(
modSåög
, "NE")==0 )

377 
	`ouçut
(".ne");

378 if–
	`°rcmp
(
modSåög
, "NEU")==0 )

379 
	`ouçut
(".neu");

380 if–
	`°rcmp
(
modSåög
, ".abs")==0 )

382 if((
	`°rcmp
(
m_ba£
, "F2F")!=0) && (strcmp(m_base, "I2I")!=0))

384 
	`ouçut
(
modSåög
);

387 if–
	`°rcmp
(
modSåög
, "ex2")==0 ||

388 
	`°rcmp
(
modSåög
, ".exit")==0 ||

389 
	`°rcmp
(
modSåög
, "sin")==0 ||

390 
	`°rcmp
(
modSåög
, "cos")==0 ||

391 
	`°rcmp
(
modSåög
, ".rz")==0 ||

392 
	`°rcmp
(
modSåög
, ".rp")==0 ||

393 
	`°rcmp
(
modSåög
, ".rm")==0 ||

394 
	`°rcmp
(
modSåög
, ".any")==0 ||

395 
	`°rcmp
(
modSåög
, ".all")==0 )

396 
	`ouçut
(
modSåög
);

397 if–
	`°rcmp
(
modSåög
, ".bext")==0 )

401 if–
	`°rcmp
(
modSåög
, ".s")==0 )

405 if–
	`°rcmp
(
modSåög
, ".sfu")==0 )

409 if–
	`°rcmp
(
modSåög
, ".x")==0 )

412 
	`ouçut
(
modSåög
);

414 if–
	`°rcmp
(
modSåög
, ".e")==0 )

417 
	`ouçut
(
modSåög
);

419 if–
	`°rcmp
(
modSåög
, ".ir")==0 )

422 
	`ouçut
(
modSåög
);

424 if(
	`°rcmp
(
modSåög
, "IADD")==0 ||

425 
	`°rcmp
(
modSåög
, "IMIN")==0 ||

426 
	`°rcmp
(
modSåög
, "IMAX")==0

437 
	`ouçut
(".");

438 
°d
::
°rög
 
mod°r
 = 
modSåög
;

439 
mod°r
 = mod°r.
	`sub°r
(1);

440 
i
=0; i<
mod°r
.
	`Àngth
(); i++){

441 
mod°r
[
i
] = 
	`tﬁowî
(modstr[i]);

443 
	`ouçut
(
mod°r
.
	`c_°r
());

447 
	`¥ötf
("Unknown Base Mod: ");

448 
	`¥ötf
(
modSåög
);

449 
	`¥ötf
("\n");

450 
	`ouçut
("Unknown Base Mod: ");

451 
	`ouçut
(
modSåög
);

452 
	`as£π
(0);

455 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

457 
	}
}

462 
	gcuobjdumpIn°
::
¥ötCuobjdumpO≥øndlohi
(
°d
::
°rög
 
›
) {

463 i‡(
›
.
sub°r
(›.
Àngth
()-1) == "l") {

464 
ouçut
(
›
.
sub°r
(0, op.
Àngth
()-1).
c_°r
());

465 
ouçut
(".lo");

466 } i‡(
	g›
.
sub°r
(
›
.
Àngth
()-1) == "h"){

467 
ouçut
(
›
.
sub°r
(0, op.
Àngth
()-1).
c_°r
());

468 
ouçut
(".hi");

470 
ouçut
(
›
.
c_°r
());

474 
	gcuobjdumpIn°
::
¥ötCuobjdumpO≥ønd
(
°rögLi°Põ˚
* 
cuºítPõ˚
, 
°d
::
°rög
 
›î™dDñimôî
, c⁄° * 
ba£
)

477 
ouçut
(
›î™dDñimôî
.
c_°r
());

478 
ouçut
(" ");

481 
	g°d
::
°rög
 
cuºp
 = 
cuºítPõ˚
->
°rögText
;

482 
	g°d
::
°rög
 
mod
;

484 if(
	gcuºp
[0] == '-') {

485 
mod
 = 
cuºp
.
sub°r
(1);

487 if(
	gmod
.
sub°r
(0,2) == "0x") {

488 
immVÆue
;

489 
	g°d
::
°rög°ªam
 
hexSåögC⁄vît2
;

490 
	ghexSåögC⁄vît2
 << 
	g°d
::
hex
 << 
mod
;

491 
	ghexSåögC⁄vît2
 >> 
	gimmVÆue
;

493 if(
	gimmVÆue
){

494 
	gimmVÆue
 = ~
immVÆue
 + 1;

497 
	g°d
::
°rög°ªam
 
ouçuthex°ªam
;

498 
	gouçuthex°ªam
 << 
	g°d
::
hex
 << 
immVÆue
;

499 
	g°d
::
°rög
 
ouçuthex
;

500 
	gouçuthex
 = 
ouçuthex°ªam
.
°r
();

501 
ouçut
("0x");

502 
	gi
=8; i > 
	gouçuthex
.
Àngth
(); i--)

504 
ouçut
("0");

506 
ouçut
(
ouçuthex
.
c_°r
());

510 
ouçut
("-");

514 
	gmod
 = 
°d
::
°rög
(
cuºp
);

518 if(
	gmod
.
sub°r
(0,9)!= "constant1")

519 
i
=0; 
	gi
<
	gmod
.
Àngth
(); i++)

521 
	gmod
[
i
] = 
tﬁowî
(
mod
[i]);

525 if(
	gmod
[0]=='.')

527 
°d
::
°rög
 
ãmp
 = 
mod
.
sub°r
(2,2);

528 
ouçut
("$p");

529 
ouçut
(
mod
.
sub°r
(2,2).
c_°r
());

531 
	gmod
 = 
mod
.
sub°r
(4);

535 if(
	gmod
 == "g [0x1].u16") {

536 
ouçut
("%%ntid.x");

537 } if(
	gmod
 == "g [0x2].u16") {

538 
ouçut
("%%ntid.y");

539 } if(
	gmod
 == "g [0x3].u16") {

540 
ouçut
("%%ntid.z");

541 } if(
	gmod
 =="g [0x4].u16") {

542 
ouçut
("%%nctaid.x");

543 } if(
	gmod
 =="g [0x5].u16") {

544 
ouçut
("%%nctaid.y");

545 } if(
	gmod
 == "g [0x6].u16") {

546 
ouçut
("%%ctaid.x");

547 } if(
	gmod
 == "g [0x7].u16") {

548 
ouçut
("%%ctaid.y");

549 } if(
	gmod
 == "sr1") {

550 
ouçut
("%%clock");

551 } if(
	gmod
[0]=='r') {

552 if–(
°rcmp
(
m_ba£
, "DADD")==0) ||

553 (
°rcmp
(
m_ba£
, "DMUL")==0) ||

554 (
°rcmp
(
m_ba£
, "DFMA")==0) ||

555 –(
m_ty≥Modifõrs
->
gëSize
()==1) &&

556 (
°rcmp
((
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".S64")==0) &&

557 –(
°rcmp
(
m_ba£
, "G2R")==0) ||

558 (
°rcmp
(
m_ba£
, "R2G")==0) ||

559 (
°rcmp
(
m_ba£
, "GLD")==0) ||

560 (
°rcmp
(
m_ba£
, "GST")==0) ||

561 (
°rcmp
(
m_ba£
, "LST")==0) ))) {

562 
°d
::
°rög
 
modsub
 = 
mod
.
sub°r
(1);

563 
	gªgNumI¡
 = 
©oi
(
modsub
.
c_°r
());

564 
	g°d
::
°rög°ªam
 
ãmp
;

565 
	gãmp
 << "{$r" << (
	gªgNumI¡
) << ",$r"<< (regNumInt+1) << "}";

566 
ouçut
(
ãmp
.
°r
().
c_°r
());

567 } if–(
	gm_ty≥Modifõrs
->
gëSize
()==1) &&

568 (
°rcmp
((
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".S128")==0)) {

569 
°d
::
°rög
 
modsub
 = 
mod
.
sub°r
(1);

570 
	gªgNumI¡
 = 
©oi
(
modsub
.
c_°r
());

571 
	g°d
::
°rög°ªam
 
ãmp
;

572 
	gãmp
 << "{$r" << (
	gªgNumI¡
);

573 
	gãmp
 << ",$r" << (
	gªgNumI¡
+1);

574 
	gãmp
 << ",$r" << (
	gªgNumI¡
+2);

575 
	gãmp
 << ",$r" << (
	gªgNumI¡
+3) << "}";

576 
ouçut
(
ãmp
.
°r
().
c_°r
());

578 
ouçut
("$");

579 
¥ötCuobjdumpO≥øndlohi
(
mod
);

581 } if(
	gmod
[0] ='c' && 
mod
.
Àngth
() == 2) {

582 
ouçut
("$p");

583 
ouçut
(
mod
.
sub°r
(1,1).
c_°r
());

584 } if(
	gmod
[0]=='a') {

585 
ouçut
("$ofs");

586 
	gmod
 = 
mod
.
sub°r
(1);

587 
¥ötCuobjdumpO≥øndlohi
(
mod
);

588 } if(
	gmod
[0]=='o') {

589 
ouçut
("$o127");

590 } i‡–
	gmod
[0]=='g' ||

591 
mod
.
sub°r
(0,2) == "lo" ||

592 
mod
.
sub°r
(0,8) == "constant") {

594 
°d
::
°rög
 
modsub
;

595 
	g°d
::
°rög
 
modsub2
;

596 
	g°d
::
°rög
 
modsub3
;

597 
	gmodsub
 = 
mod
.
c_°r
();

598 
	gloˇlFœg
 = 0;

600 if(
	gmod
.
föd
("globÆ14"Ë!
°d
::
°rög
::
≈os
) {

602 if–
°rcmp
(
ba£
,"GRED")==0 ||

603 
°rcmp
(
ba£
, "GATOM")==0 ||

604 
°rcmp
(
ba£
, "GST")==0 ||

605 
°rcmp
(
ba£
, "GLD")==0)

606 
ouçut
("[");

608 
ouçut
("g[");

609 } if(
	gmod
[0]=='g') {

611 
ouçut
("s[");

612 } if(
	gmod
.
föd
("loˇl"Ë!
°d
::
°rög
::
≈os
) {

613 
modsub3
 = 
modsub
.
sub°r
(4, modsub.
Àngth
()-10);

614 
ouçut
(
modsub3
.
c_°r
());

615 
ouçut
("[");

616 
	gloˇlFœg
 = 1;

617 } if(
	gmod
.
sub°r
(0,9) == "constant1") {

618 
ouçut
(
modsub
.
sub°r
(0, modsub.
föd_fú°_of
("[]")+1).
c_°r
());

619 } if(
	gmod
.
sub°r
(0,9)=="constant0"){

620 
ouçut
("constant0[");

622 
¥ötf
("Unidítifõd modifõr: %s\n", 
mod
.
c_°r
());

623 
as£π
(0);

626 
	gmodsub
 = 
modsub
.
sub°r
(modsub.
föd_fú°_of
("[]")+1);

627 
	gmodsub
 = 
modsub
.
sub°r
(0, modsub.
Àngth
()-1);

629 
	g∂u£quÆFœg
 = 0;

630 if(
	gmodsub
.
föd
("+++"Ë!
°d
::
°rög
::
≈os
) {

631 
∂u£quÆFœg
 = 1;

634 if(
	gmodsub
.
föd
("+"Ë!
°d
::
°rög
::
≈os
)

637 
modsub2
 = 
modsub
.
sub°r
(modsub.
föd
("+")+1);

639 
ouçut
("$ofs");

640 
ouçut
(
modsub
.
sub°r
(1,1).
c_°r
());

642 if(
	g∂u£quÆFœg
 == 1) {

643 
ouçut
("+=");

645 
ouçut
("+");

649 if(
	gmodsub2
[0]=='r') {

650 
ouçut
("$");

651 
¥ötCuobjdumpO≥øndlohi
(
modsub2
);

653 
	gmodsub2
 = 
modsub2
.
sub°r
(2);

654 
	gaddrVÆue
;

655 
	g°d
::
°rög°ªam
 
hexSåögC⁄vît
;

656 
	ghexSåögC⁄vît
 << 
	g°d
::
hex
 << 
modsub2
;

657 
	ghexSåögC⁄vît
 >> 
	gaddrVÆue
;

658 
	gchunksize
 = 4;

659 i‡–
	gthis
->
	gm_ty≥Modifõrs
->
gëSize
()>0 &&

660 –
°rcmp
((
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".S16")==0 ||

661 
°rcmp
((
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".U16")==0 )Ë
chunksize
 = 2;

662 i‡–
	gthis
->
	gm_ty≥Modifõrs
->
gëSize
()>0 &&

663 –
°rcmp
((
m_ty≥Modifõrs
->
gëLi°End
()->
°rögText
), ".U8")==0 ||

664 
°rcmp
((
m_ty≥Modifõrs
->
gëLi°End
()->
°rögText
), ".S8")==0 )Ë
chunksize
 = 1;

665 
	gaddrVÆue
 = 
addrVÆue
*
chunksize
;

666 
	gouçutHex
[10];

667 
•rötf
(
ouçutHex
, "%x", 
addrVÆue
);

668 
	g°d
::
°rög°ªam
 
ouçuthex
;

669 
	gouçuthex
 << 
	g°d
::
hex
 << 
addrVÆue
;

670 
ouçut
("0x");

671 
	gi
=4; i > 
	gouçuthex
.
°r
().
Àngth
(); i--)

673 
ouçut
("0");

675 
ouçut
(
ouçuthex
.
°r
().
c_°r
());

678 if(
	gmodsub
[0]=='r') {

680 
ouçut
("$");

681 
¥ötCuobjdumpO≥øndlohi
(
modsub
);

684 
	gmod
 = 
mod
.
sub°r
(2);

686 
	gaddrVÆue
;

687 
	g°d
::
°rög°ªam
 
hexSåögC⁄vît
;

688 
	ghexSåögC⁄vît
 << 
	g°d
::
hex
 << 
modsub
;

689 
	ghexSåögC⁄vît
 >> 
	gaddrVÆue
;

691 if(
	gloˇlFœg
 == 0)

693 
chunksize
 = 4;

694 i‡–
	gthis
->
	gm_ty≥Modifõrs
->
gëSize
()>0 &&

695 (
°rcmp
((
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".S16")==0 ||

696 
°rcmp
((
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".U16")==0 )Ë
chunksize
 = 2;

697 
	gaddrVÆue
 = 
addrVÆue
*
chunksize
;

699 
	g°d
::
°rög°ªam
 
ouçuthex
;

700 
	gouçuthex
 << 
	g°d
::
hex
 << 
addrVÆue
;

701 
ouçut
("0x");

702 
	gi
=4; i > 
	gouçuthex
.
°r
().
Àngth
(); i--) {

703 
ouçut
("0");

705 
ouçut
(
ouçuthex
.
°r
().
c_°r
());

708 
ouçut
("]");

709 } if(
	gmod
.
sub°r
(0,2) == "0x") {

710 
ouçut
("0x");

711 
	g°d
::
°rög
 
ouçuthex
;

712 
	gouçuthex
 = 
mod
.
sub°r
(2);

714 
	gi
=8; i > 
	gouçuthex
.
Àngth
(); i--) {

715 
ouçut
("0");

717 
ouçut
(
ouçuthex
.
c_°r
());

718 } if(
	gmod
.
sub°r
(0,3) == "l0x") {

719 
ouçut
(
mod
.
c_°r
());

721 
ouçut
(
mod
.
c_°r
());

725 
	gcuobjdumpIn°
::
	$¥ötCuobjdumpO≥ønds
()

727 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_›î™ds
->
	`gëLi°Sèπ
();

728 
°d
::
°rög
 
dñimôî
 = "";

729 
i
=0; (i<
m_›î™ds
->
	`gëSize
())&&(
cuºítPõ˚
!=
NULL
); i++)

731 if((
	`°rcmp
(
m_ba£
, "LOP.PASS_B")==0 || såcmp(m_ba£, "LOP.S.PASS_B")==0Ë&& (
i
==1))

733 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

736 
	`¥ötCuobjdumpO≥ønd
(
cuºítPõ˚
, 
dñimôî
, 
m_ba£
);

737 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

738 
dñimôî
 = ",";

740 
	}
}

742 
	g°d
::
°rög
 
	$öt_deÁu…_mod
 (Ë{  ".u32" ;
	}
}

745 
	g°d
::
°rög
 
bªakèrgë
;

747 
	gcuobjdumpIn°
::
¥ötCuobjdumpPtxPlus
(
°d
::
li°
<°d::
°rög
> 
œbñLi°
, std::li°<°d::°rög> 
ãxLi°
)

749 
¥ötCuobjdumpLabñ
(
œbñLi°
);

751 if(
°rcmp
(
m_ba£
, "")==0)

754 if(
°rcmp
(
m_ba£
, ".entry")==0)

758 if(
°rcmp
(
m_ba£
, "BAR.ARV.WAIT b0, 0xfff")==0)

760 
¥ötCuobjdumpPªdiˇã
();

761 
ouçut
("bar.sync 0x00000000;");

763 if(
°rcmp
(
m_ba£
, "ADA")==0)

765 
¥ötCuobjdumpPªdiˇã
();

766 
ouçut
("add");

767 
¥ötCuobjdumpBa£Modifõrs
();

769 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

770 
ouçut
(
öt_deÁu…_mod
());

772 
¥ötCuobjdumpTy≥Modifõrs
();

774 
¥ötCuobjdumpO≥ønds
();

775 
ouçut
(";");

777 if(
°rcmp
(
m_ba£
, "BRA")==0)

779 
¥ötCuobjdumpPªdiˇã
();

780 
ouçut
("bra");

781 
¥ötCuobjdumpBa£Modifõrs
();

782 
¥ötCuobjdumpTy≥Modifõrs
();

783 
¥ötCuobjdumpO≥ønds
();

784 
ouçut
(";");

786 if(
°rcmp
(
m_ba£
, "CAL")==0)

788 
¥ötCuobjdumpPªdiˇã
();

789 
ouçut
("callp");

790 
¥ötCuobjdumpBa£Modifõrs
();

791 
¥ötCuobjdumpTy≥Modifõrs
();

792 
¥ötCuobjdumpO≥ønds
();

793 
ouçut
(";");

795 if(
°rcmp
(
m_ba£
, "COS")==0)

797 
¥ötCuobjdumpPªdiˇã
();

800 
ouçut
("cos");

801 
¥ötCuobjdumpBa£Modifõrs
();

802 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

803 
ouçut
(".f32");

805 
¥ötCuobjdumpTy≥Modifõrs
();

806 
¥ötCuobjdumpO≥ønds
();

807 
ouçut
(";");

809 if(
°rcmp
(
m_ba£
, "DADD")==0)

811 
¥ötCuobjdumpPªdiˇã
();

812 
ouçut
("add");

813 
¥ötCuobjdumpBa£Modifõrs
();

815 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

816 
ouçut
(".ff64");

818 
¥ötCuobjdumpTy≥Modifõrs
();

820 
¥ötCuobjdumpO≥ønds
();

821 
ouçut
(";");

823 if(
°rcmp
(
m_ba£
, "DMIN")==0)

825 
¥ötCuobjdumpPªdiˇã
();

826 
ouçut
("min");

827 
¥ötCuobjdumpBa£Modifõrs
();

829 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

830 
ouçut
(".f64");

832 
¥ötCuobjdumpTy≥Modifõrs
();

834 
¥ötCuobjdumpO≥ønds
();

835 
ouçut
(";");

837 if(
°rcmp
(
m_ba£
, "DMAX")==0)

839 
¥ötCuobjdumpPªdiˇã
();

840 
ouçut
("max");

841 
¥ötCuobjdumpBa£Modifõrs
();

843 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

844 
ouçut
(".f64");

846 
¥ötCuobjdumpTy≥Modifõrs
();

848 
¥ötCuobjdumpO≥ønds
();

849 
ouçut
(";");

869 if(
°rcmp
(
m_ba£
, "DMUL")==0)

871 
¥ötCuobjdumpPªdiˇã
();

872 
ouçut
("mul");

873 
¥ötCuobjdumpBa£Modifõrs
();

875 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

876 
ouçut
(".ff64");

878 
¥ötCuobjdumpTy≥Modifõrs
();

880 
¥ötCuobjdumpO≥ønds
();

881 
ouçut
(";");

883 if(
°rcmp
(
m_ba£
, "EX2")==0)

885 
¥ötCuobjdumpPªdiˇã
();

888 
ouçut
("ex2");

889 
¥ötCuobjdumpBa£Modifõrs
();

891 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

892 
ouçut
(".f32");

894 
¥ötCuobjdumpTy≥Modifõrs
();

896 
¥ötCuobjdumpO≥ønds
();

897 
ouçut
(";");

899 if(
°rcmp
(
m_ba£
, "F2F")==0)

901 
¥ötCuobjdumpPªdiˇã
();

903 
	gabsFœg
 = 0;

904 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ba£Modifõrs
->
gëLi°Sèπ
();

906 
	gcuºítPõ˚
 !
NULL
)

908 if(
°rcmp
(
cuºítPõ˚
->
°rögText
, ".abs")==0)

910 
ouçut
("abs");

911 
	gabsFœg
 = 1;

914 
	gcuºítPõ˚
 = 
cuºítPõ˚
->
√xtSåög
;

916 if(
	gabsFœg
 == 0)

918 
ouçut
("cvt");

921 
¥ötCuobjdumpBa£Modifõrs
();

923 if(
	gabsFœg
 == 0)

925 
¥ötCuobjdumpTy≥Modifõrs
();

929 
ouçut
(".f32");

932 
¥ötCuobjdumpO≥ønds
();

933 
ouçut
(";");

935 if(
°rcmp
(
m_ba£
, "F2I")==0)

937 
¥ötCuobjdumpPªdiˇã
();

938 
ouçut
("cvt");

939 
¥ötCuobjdumpBa£Modifõrs
();

940 
¥ötCuobjdumpTy≥Modifõrs
();

942 
¥ötCuobjdumpO≥ønds
();

943 
ouçut
(";");

945 if(
°rcmp
(
m_ba£
, "FADD")==0 || strcmp(m_base, "FADD32I")==0)

947 
¥ötCuobjdumpPªdiˇã
();

948 
ouçut
("add");

949 
¥ötCuobjdumpBa£Modifõrs
();

951 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

952 
ouçut
(".f32");

954 
¥ötCuobjdumpTy≥Modifõrs
();

956 
¥ötCuobjdumpO≥ønds
();

957 
ouçut
(";");

959 if(
°rcmp
(
m_ba£
, "FADD32")==0)

961 
¥ötCuobjdumpPªdiˇã
();

962 
ouçut
("add.half");

963 
¥ötCuobjdumpBa£Modifõrs
();

965 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

966 
ouçut
(".f32");

968 
¥ötCuobjdumpTy≥Modifõrs
();

970 
¥ötCuobjdumpO≥ønds
();

971 
ouçut
(";");

973 if(
°rcmp
(
m_ba£
, "FMAD")==0 || strcmp(m_base, "FMAD32I")==0)

975 
¥ötCuobjdumpPªdiˇã
();

976 
ouçut
("mad");

977 
¥ötCuobjdumpBa£Modifõrs
();

979 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

980 
ouçut
(".f32");

982 
¥ötCuobjdumpTy≥Modifõrs
();

984 
¥ötCuobjdumpO≥ønds
();

985 
ouçut
(";");

987 if(
°rcmp
(
m_ba£
, "FMUL")==0 || strcmp(m_base, "FMUL32I")==0)

989 
¥ötCuobjdumpPªdiˇã
();

990 
ouçut
("mul");

991 
¥ötCuobjdumpBa£Modifõrs
();

993 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

994 
ouçut
(".f32");

996 
¥ötCuobjdumpTy≥Modifõrs
();

998 
¥ötCuobjdumpO≥ønds
();

999 
ouçut
(";");

1001 if(
°rcmp
(
m_ba£
, "FMUL32")==0)

1003 
¥ötCuobjdumpPªdiˇã
();

1004 
ouçut
("mul.half");

1005 
¥ötCuobjdumpBa£Modifõrs
();

1007 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1008 
ouçut
(".f32");

1010 
¥ötCuobjdumpTy≥Modifõrs
();

1012 
¥ötCuobjdumpO≥ønds
();

1013 
ouçut
(";");

1015 if(
°rcmp
(
m_ba£
, "FSET")==0)

1017 
¥ötCuobjdumpPªdiˇã
();

1018 
ouçut
("set");

1019 
¥ötCuobjdumpBa£Modifõrs
();

1021 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1023 
ouçut
(".f32.f32");

1026 
¥ötCuobjdumpTy≥Modifõrs
();

1028 
¥ötCuobjdumpO≥ønds
();

1029 
ouçut
(";");

1031 if(
°rcmp
(
m_ba£
, "DSET")==0)

1033 
¥ötCuobjdumpPªdiˇã
();

1034 
ouçut
("set");

1035 
¥ötCuobjdumpBa£Modifõrs
();

1037 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1039 
ouçut
(".f64.f64");

1042 
¥ötCuobjdumpTy≥Modifõrs
();

1044 
¥ötCuobjdumpO≥ønds
();

1045 
ouçut
(";");

1047 if(
°rcmp
(
m_ba£
, "G2R")==0)

1049 
¥ötCuobjdumpPªdiˇã
();

1050 
ouçut
("mov");

1051 
¥ötCuobjdumpBa£Modifõrs
();

1053 if–
	gm_ty≥Modifõrs
->
gëSize
() == 2 ) {

1054 
°d
::
°rög
 
ty≥1
, 
ty≥2
, 
ty≥
;

1055 
	gty≥1Size
, 
	gty≥2Size
;

1056 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1057 
	gty≥1
 = 
cuºítPõ˚
->
°rögText
;

1058 
	gty≥2
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1060 
	gty≥1Size
 = 
©oi
(
ty≥1
.
sub°r
(2,Åy≥1.
size
()-2).
c_°r
());

1061 
	gty≥2Size
 = 
©oi
(
ty≥2
.
sub°r
(2,Åy≥2.
size
()-2).
c_°r
());

1062 
	gty≥
 = (
ty≥1Size
 < 
ty≥2Size
Ë? 
ty≥1
 : 
ty≥2
;

1064 if–
°rcmp
(
ty≥
.
c_°r
(), ".F16")==0 )

1065 
ouçut
(".f16");

1066 if–
°rcmp
(
ty≥
.
c_°r
(), ".F32")==0 )

1067 
ouçut
(".f32");

1068 if–
°rcmp
(
ty≥
.
c_°r
(), ".F64")==0 )

1069 
ouçut
(".ff64");

1070 if–
°rcmp
(
ty≥
.
c_°r
(), ".S8")==0 )

1071 
ouçut
(".s8");

1072 if–
°rcmp
(
ty≥
.
c_°r
(), ".S16")==0 )

1073 
ouçut
(".s16");

1074 if–
°rcmp
(
ty≥
.
c_°r
(), ".S32")==0 )

1075 
ouçut
(".s32");

1076 if–
°rcmp
(
ty≥
.
c_°r
(), ".S64")==0 )

1077 
ouçut
(".bb64");

1078 if–
°rcmp
(
ty≥
.
c_°r
(), ".S128")==0 )

1079 
ouçut
(".bb128");

1080 if–
°rcmp
(
ty≥
.
c_°r
(), ".U8")==0 )

1081 
ouçut
(".u8");

1082 if–
°rcmp
(
ty≥
.
c_°r
(), ".U16")==0 )

1083 
ouçut
(".u16");

1084 if–
°rcmp
(
ty≥
.
c_°r
(), ".U32")==0 )

1085 
ouçut
(".u32");

1086 if–
°rcmp
(
ty≥
.
c_°r
(), ".U64")==0 )

1087 
ouçut
(".bb64");

1089 
ouçut
(
ty≥
.
c_°r
());

1090 } if–
	gm_ty≥Modifõrs
->
gëSize
() == 1 ) {

1091 
¥ötCuobjdumpTy≥Modifõrs
();

1093 
ouçut
("Error: unsupportedÇumber ofÅype modifiers. ");

1095 
¥ötCuobjdumpO≥ønds
();

1096 
ouçut
(";");

1098 if(
°rcmp
(
m_ba£
, "GLD")==0)

1100 
¥ötCuobjdumpPªdiˇã
();

1102 
ouçut
("ld.global");

1103 
¥ötCuobjdumpBa£Modifõrs
();

1104 i‡(
°rcmp
(
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
, ".S128")==0) {

1105 
ouçut
(".v4.u32");

1106 } i‡(
°rcmp
(
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
, ".S64")==0) {

1107 
ouçut
(".v2.u32");

1109 
¥ötCuobjdumpTy≥Modifõrs
();

1111 
¥ötCuobjdumpO≥ønds
();

1112 
ouçut
(";");

1114 if(
°rcmp
(
m_ba£
, "GST")==0)

1116 
¥ötCuobjdumpPªdiˇã
();

1118 
ouçut
("st.global");

1119 
¥ötCuobjdumpBa£Modifõrs
();

1120 i‡(
°rcmp
(
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
, ".S128")==0) {

1121 
ouçut
(".v4.u32");

1122 } i‡(
°rcmp
(
m_ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
, ".S64")==0) {

1123 
ouçut
(".v2.u32");

1125 
¥ötCuobjdumpTy≥Modifõrs
();

1127 
¥ötCuobjdumpO≥ønds
();

1128 
ouçut
(";");

1130 if(
°rcmp
(
m_ba£
, "I2F")==0)

1132 
¥ötCuobjdumpPªdiˇã
();

1133 
ouçut
("cvt");

1134 
¥ötCuobjdumpBa£Modifõrs
();

1135 
¥ötCuobjdumpTy≥Modifõrs
();

1136 
¥ötCuobjdumpO≥ønds
();

1137 
ouçut
(";");

1139 if(
°rcmp
(
m_ba£
, "I2I")==0)

1141 
¥ötCuobjdumpPªdiˇã
();

1143 
	gabsFœg
 = 0;

1144 
	gbextFœg
 = 0;

1145 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ba£Modifõrs
->
gëLi°Sèπ
();

1147 
	gcuºítPõ˚
 !
NULL
)

1149 if(
°rcmp
(
cuºítPõ˚
->
°rögText
, ".abs")==0)

1151 
ouçut
("abs");

1152 
	gabsFœg
 = 1;

1155 if(
°rcmp
(
cuºítPõ˚
->
°rögText
, ".bext")==0)

1157 
bextFœg
 = 1;

1160 
	gcuºítPõ˚
 = 
cuºítPõ˚
->
√xtSåög
;

1162 if(
	gabsFœg
 == 0)

1164 
ouçut
("cvt");

1167 
¥ötCuobjdumpBa£Modifõrs
();

1169 
	gcuºítPõ˚
 = 
this
->
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1170 
	gmaxÀngth
=16;

1171 
	gcuºÀngth
 = 16;

1172 
boﬁ
 
	gissig√d
 = 
Ál£
;

1173 
	g°d
::
°rög
 
tmp°r
;

1174 
	gcuºítPõ˚
 !
NULL
)

1176 
tmp°r
 = 
cuºítPõ˚
->
°rögText
;

1177 if(
	gtmp°r
[1] == 'S')

1179 
issig√d
 = 
åue
;

1181 if(
	gtmp°r
.
sub°r
(2,2Ë="32"Ë{
cuºÀngth
=32;}

1182 i‡(
	gcuºÀngth
 > 
	gmaxÀngth
Ë{maxÀngth = 
cuºÀngth
;}

1183 
	gcuºítPõ˚
 = 
cuºítPõ˚
->
√xtSåög
;

1186 if(
	gabsFœg
 == 0)

1188 if(
bextFœg
 == 0)

1189 
¥ötCuobjdumpTy≥Modifõrs
();

1191 
ouçut
(".");

1192 i‡(
	gissig√d
Ë{
ouçut
("s");}

1193 {
ouçut
("u");}

1194 
	g°d
::
°rög°ªam
 
tmp
;

1195 
	gtmp
 << 
	gmaxÀngth
;

1196 
ouçut
(
tmp
.
°r
().
c_°r
());

1197 
ouçut
(".");

1198 i‡(
	gissig√d
Ë{
ouçut
("s");}

1199 {
ouçut
("u");}

1200 
ouçut
("8");

1206 
ouçut
(
öt_deÁu…_mod
());

1209 
¥ötCuobjdumpO≥ønds
();

1210 
ouçut
(";");

1212 if(
°r°r
(
m_ba£
, "IADD.CARRY")){

1213 
	g°d
::
°rög
 
¥ed
 = "C0";

1214 
	g¥ed
[1] = 
m_ba£
[10];

1215 
	gthis
->
addO≥ønd
(
¥ed
.
c_°r
());

1216 
¥ötCuobjdumpPªdiˇã
();

1217 
ouçut
("addp");

1218 
¥ötCuobjdumpBa£Modifõrs
();

1220 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1221 
ouçut
(
öt_deÁu…_mod
());

1223 
¥ötCuobjdumpTy≥Modifõrs
();

1225 
¥ötCuobjdumpO≥ønds
();

1226 
ouçut
(";");

1228 if(
°rcmp
(
m_ba£
, "IADD")==0)

1230 
¥ötCuobjdumpPªdiˇã
();

1231 
ouçut
("add");

1232 
¥ötCuobjdumpBa£Modifõrs
();

1234 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1235 
ouçut
(
öt_deÁu…_mod
());

1237 
¥ötCuobjdumpTy≥Modifõrs
();

1239 
¥ötCuobjdumpO≥ønds
();

1240 
ouçut
(";");

1242 if(
°rcmp
(
m_ba£
, "IADD32")==0 || strcmp(m_base, "IADD32I")==0 )

1244 
¥ötCuobjdumpPªdiˇã
();

1245 
ouçut
("add.half");

1246 
¥ötCuobjdumpBa£Modifõrs
();

1248 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1249 
ouçut
(".u32");

1251 
¥ötCuobjdumpTy≥Modifõrs
();

1252 
¥ötCuobjdumpO≥ønds
();

1253 
ouçut
(";");

1255 if(
°rcmp
(
m_ba£
, "IMAD32I")==0 || strcmp(m_base, "IMAD32")==0)

1257 
¥ötCuobjdumpPªdiˇã
();

1258 
ouçut
("mad.lo");

1259 
¥ötCuobjdumpBa£Modifõrs
();

1261 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1262 
ouçut
(
öt_deÁu…_mod
());

1264 
¥ötCuobjdumpTy≥Modifõrs
();

1266 
¥ötCuobjdumpO≥ønds
();

1267 
ouçut
(";");

1269 if(
°rcmp
(
m_ba£
, "IMAD")==0)

1271 
¥ötCuobjdumpPªdiˇã
();

1272 
ouçut
("mad.wide");

1273 
¥ötCuobjdumpBa£Modifõrs
();

1275 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1276 
ouçut
(
öt_deÁu…_mod
());

1278 
¥ötCuobjdumpTy≥Modifõrs
();

1280 
¥ötCuobjdumpO≥ønds
();

1281 
ouçut
(";");

1283 if(
°rcmp
(
m_ba£
, "ISAD")==0)

1285 
¥ötCuobjdumpPªdiˇã
();

1286 
ouçut
("sad");

1287 
¥ötCuobjdumpBa£Modifõrs
();

1289 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1290 
ouçut
(
öt_deÁu…_mod
());

1292 
¥ötCuobjdumpTy≥Modifõrs
();

1294 
¥ötCuobjdumpO≥ønds
();

1295 
ouçut
(";");

1298 if(
°rcmp
(
m_ba£
, "IMAD.U24")==0)

1300 
¥ötCuobjdumpPªdiˇã
();

1301 
ouçut
("mad24.lo");

1302 
¥ötCuobjdumpBa£Modifõrs
();

1304 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1305 
ouçut
(".u32");

1307 
¥ötCuobjdumpTy≥Modifõrs
();

1308 
¥ötCuobjdumpO≥ønds
();

1309 
ouçut
(";");

1311 if(
°rcmp
(
m_ba£
, "IMAD.S24")==0)

1313 
¥ötCuobjdumpPªdiˇã
();

1314 
ouçut
("mad24.lo");

1315 
¥ötCuobjdumpBa£Modifõrs
();

1317 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1318 
ouçut
(".s32");

1320 
¥ötCuobjdumpTy≥Modifõrs
();

1321 
¥ötCuobjdumpO≥ønds
();

1322 
ouçut
(";");

1324 if(
°rcmp
(
m_ba£
, "IMUL32I.U24.U24")==0 ||

1325 
°rcmp
(
m_ba£
, "IMUL32I.S24.S24")==0 ||

1326 
°rcmp
(
m_ba£
, "IMUL32.U24.U24")==0 ||

1327 
°rcmp
(
m_ba£
, "IMUL32.S24.S24")==0 ||

1328 
°rcmp
(
m_ba£
, "IMUL.U24.U24")==0 ||

1329 
°rcmp
(
m_ba£
, "IMUL.S24.S24")==0)

1331 
¥ötCuobjdumpPªdiˇã
();

1332 
ouçut
("mul24.lo");

1333 
¥ötCuobjdumpBa£Modifõrs
();

1335 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1337 
ouçut
(".u32");

1339 if(
	gm_ty≥Modifõrs
->
gëSize
() == 2)

1341 
°d
::
°rög
 
ty≥1
, 
ty≥2
, 
ty≥
;

1342 
	gty≥1Size
, 
	gty≥2Size
;

1343 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1344 
	gãmpSåög
[5];

1346 
	gty≥1
 = 
cuºítPõ˚
->
°rögText
;

1347 
	gty≥2
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1349 
	gty≥1Size
 = 
©oi
(
ty≥1
.
sub°r
(2,Åy≥1.
size
()-2).
c_°r
());

1350 
	gty≥2Size
 = 
©oi
(
ty≥2
.
sub°r
(2,Åy≥2.
size
()-2).
c_°r
());

1351 
	gty≥
 = (
ty≥1Size
 > 
ty≥2Size
Ë? 
ty≥1
 : 
ty≥2
;

1352 
°r˝y
(
ãmpSåög
, 
ty≥
.
c_°r
());

1355 if(
	gãmpSåög
[1] >'A' && 
ãmpSåög
[1] <= 'Z')

1356 
ãmpSåög
[1] += 32;

1357 
ouçut
(
ãmpSåög
);

1361 
¥ötCuobjdumpTy≥Modifõrs
();

1363 
¥ötCuobjdumpO≥ønds
();

1364 
ouçut
(";");

1366 if(
°rcmp
(
m_ba£
, "IMUL")==0 || strcmp(m_base, "IMUL32I")==0)

1368 
¥ötCuobjdumpPªdiˇã
();

1369 
ouçut
("mul.lo");

1370 
¥ötCuobjdumpBa£Modifõrs
();

1372 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1374 
ouçut
(
öt_deÁu…_mod
());

1376 if(
	gm_ty≥Modifõrs
->
gëSize
() == 2)

1378 
°d
::
°rög
 
ty≥1
, 
ty≥2
, 
ty≥
;

1379 
	gty≥1Size
, 
	gty≥2Size
;

1380 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1381 
	gãmpSåög
[5];

1383 
	gty≥1
 = 
cuºítPõ˚
->
°rögText
;

1384 
	gty≥2
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1386 
	gty≥1Size
 = 
©oi
(
ty≥1
.
sub°r
(2,Åy≥1.
size
()-2).
c_°r
());

1387 
	gty≥2Size
 = 
©oi
(
ty≥2
.
sub°r
(2,Åy≥2.
size
()-2).
c_°r
());

1388 
	gty≥
 = (
ty≥1Size
 > 
ty≥2Size
Ë? 
ty≥1
 : 
ty≥2
;

1389 
°r˝y
(
ãmpSåög
, 
ty≥
.
c_°r
());

1392 if(
	gãmpSåög
[1] >'A' && 
ãmpSåög
[1] <= 'Z')

1393 
ãmpSåög
[1] += 32;

1394 
ouçut
(
ãmpSåög
);

1398 
¥ötCuobjdumpTy≥Modifõrs
();

1400 
¥ötCuobjdumpO≥ønds
();

1401 
ouçut
(";");

1403 if(
°rcmp
(
m_ba£
, "IMUL32")==0)

1405 
¥ötCuobjdumpPªdiˇã
();

1406 
ouçut
("mul.half.lo");

1407 
¥ötCuobjdumpBa£Modifõrs
();

1409 if(
	gm_ty≥Modifõrs
->
gëSize
() == 2)

1411 
°d
::
°rög
 
ty≥1
, 
ty≥2
, 
ty≥
;

1412 
	gty≥1Size
, 
	gty≥2Size
;

1413 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1414 
	gãmpSåög
[5];

1416 
	gty≥1
 = 
cuºítPõ˚
->
°rögText
;

1417 
	gty≥2
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1419 
	gty≥1Size
 = 
©oi
(
ty≥1
.
sub°r
(2,Åy≥1.
size
()-2).
c_°r
());

1420 
	gty≥2Size
 = 
©oi
(
ty≥2
.
sub°r
(2,Åy≥2.
size
()-2).
c_°r
());

1421 
	gty≥
 = (
ty≥1Size
 > 
ty≥2Size
Ë? 
ty≥1
 : 
ty≥2
;

1422 
°r˝y
(
ãmpSåög
, 
ty≥
.
c_°r
());

1425 if(
	gãmpSåög
[1] >'A' && 
ãmpSåög
[1] <= 'Z')

1426 
ãmpSåög
[1] += 32;

1427 
ouçut
(
ãmpSåög
);

1431 
¥ötCuobjdumpTy≥Modifõrs
();

1433 
¥ötCuobjdumpO≥ønds
();

1434 
ouçut
(";");

1436 if(
°rcmp
(
m_ba£
, "IMUL32.S24.S24")==0)

1438 
¥ötCuobjdumpPªdiˇã
();

1439 
ouçut
("mul24.half.lo");

1440 
¥ötCuobjdumpBa£Modifõrs
();

1442 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1444 
ouçut
(".u32");

1446 if(
	gm_ty≥Modifõrs
->
gëSize
() == 2)

1448 
°d
::
°rög
 
ty≥1
, 
ty≥2
, 
ty≥
;

1449 
	gty≥1Size
, 
	gty≥2Size
;

1450 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1451 
	gãmpSåög
[5];

1453 
	gty≥1
 = 
cuºítPõ˚
->
°rögText
;

1454 
	gty≥2
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1456 
	gty≥1Size
 = 
©oi
(
ty≥1
.
sub°r
(2,Åy≥1.
size
()-2).
c_°r
());

1457 
	gty≥2Size
 = 
©oi
(
ty≥2
.
sub°r
(2,Åy≥2.
size
()-2).
c_°r
());

1458 
	gty≥
 = (
ty≥1Size
 > 
ty≥2Size
Ë? 
ty≥1
 : 
ty≥2
;

1459 
°r˝y
(
ãmpSåög
, 
ty≥
.
c_°r
());

1462 if(
	gãmpSåög
[1] >'A' && 
ãmpSåög
[1] <= 'Z')

1463 
ãmpSåög
[1] += 32;

1464 
ouçut
(
ãmpSåög
);

1468 
¥ötCuobjdumpTy≥Modifõrs
();

1470 
¥ötCuobjdumpO≥ønds
();

1471 
ouçut
(";");

1473 if(
°rcmp
(
m_ba£
, "ISET")==0)

1475 
¥ötCuobjdumpPªdiˇã
();

1476 
ouçut
("set");

1477 
¥ötCuobjdumpBa£Modifõrs
();

1479 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1480 
ouçut
(".u32.u32");

1481 if(
	gm_ty≥Modifõrs
->
gëSize
() == 1)

1483 
¥ötCuobjdumpTy≥Modifõrs
();ÖrintCuobjdumpTypeModifiers();

1486 
¥ötCuobjdumpTy≥Modifõrs
();

1487 
¥ötCuobjdumpO≥ønds
();

1488 
ouçut
(";");

1490 if(
°rcmp
(
m_ba£
, "LG2")==0)

1492 
¥ötCuobjdumpPªdiˇã
();

1493 
ouçut
("lg2");

1494 
¥ötCuobjdumpBa£Modifõrs
();

1496 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1497 
ouçut
(".f32");

1499 
¥ötCuobjdumpTy≥Modifõrs
();

1501 
¥ötCuobjdumpO≥ønds
();

1502 
ouçut
(";");

1504 if(
°rcmp
(
m_ba£
, "LST")==0)

1506 
¥ötCuobjdumpPªdiˇã
();

1507 
ouçut
("mov");

1508 
¥ötCuobjdumpBa£Modifõrs
();

1509 
¥ötCuobjdumpTy≥Modifõrs
();

1510 
¥ötCuobjdumpO≥ønds
();

1511 
ouçut
(";");

1513 if(
°rcmp
(
m_ba£
, "MOV")==0 || strcmp(m_base, "MVI")==0 || strcmp(m_base, "MVC")==0)

1515 
¥ötCuobjdumpPªdiˇã
();

1516 
ouçut
("mov");

1517 
¥ötCuobjdumpBa£Modifõrs
();

1519 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1520 
ouçut
(
öt_deÁu…_mod
());

1522 
¥ötCuobjdumpTy≥Modifõrs
();

1523 
¥ötCuobjdumpO≥ønds
();

1524 
ouçut
(";");

1526 if(
°rcmp
(
m_ba£
, "MOV32")==0)

1528 
¥ötCuobjdumpPªdiˇã
();

1529 
ouçut
("mov.half");

1530 
¥ötCuobjdumpBa£Modifõrs
();

1532 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1533 
ouçut
(".u32");

1535 
¥ötCuobjdumpTy≥Modifõrs
();

1536 
¥ötCuobjdumpO≥ønds
();

1537 
ouçut
(";");

1539 if(
°rcmp
(
m_ba£
, "NOP")==0 || strcmp(m_base, "SSY")==0)

1541 
¥ötCuobjdumpPªdiˇã
();

1542 
ouçut
("nop");

1543 
¥ötCuobjdumpBa£Modifõrs
();

1544 
ouçut
(";");

1546 if(
°rcmp
(
m_ba£
, "LLD")==0)

1548 
¥ötCuobjdumpPªdiˇã
();

1549 
ouçut
("mov");

1550 
¥ötCuobjdumpBa£Modifõrs
();

1551 
¥ötCuobjdumpTy≥Modifõrs
();

1552 
¥ötCuobjdumpO≥ønds
();

1553 
ouçut
(";");

1555 if(
°rcmp
(
m_ba£
, "LOP.AND")==0 || strcmp(m_base, "LOP.S.AND")==0)

1557 
¥ötCuobjdumpPªdiˇã
();

1558 
ouçut
("and");

1559 
¥ötCuobjdumpBa£Modifõrs
();

1561 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1562 
ouçut
(".b32");

1564 
¥ötCuobjdumpTy≥Modifõrs
();

1566 
¥ötCuobjdumpO≥ønds
();

1567 
ouçut
(";");

1569 if(
°rcmp
(
m_ba£
, "LOP.OR")==0 || strcmp(m_base, "LOP.S.OR")==0)

1571 
¥ötCuobjdumpPªdiˇã
();

1572 
ouçut
("or");

1573 
¥ötCuobjdumpBa£Modifõrs
();

1575 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1576 
ouçut
(".b32");

1578 
¥ötCuobjdumpTy≥Modifõrs
();

1580 
¥ötCuobjdumpO≥ønds
();

1581 
ouçut
(";");

1583 if(
°rcmp
(
m_ba£
, "LOP.PASS_B")==0 || strcmp(m_base, "LOP.S.PASS_B")==0)

1585 
¥ötCuobjdumpPªdiˇã
();

1586 
ouçut
("not");

1587 
¥ötCuobjdumpBa£Modifõrs
();

1589 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1590 
ouçut
(".b32");

1592 
¥ötCuobjdumpTy≥Modifõrs
();

1594 
¥ötCuobjdumpO≥ønds
();

1595 
ouçut
(";");

1597 if(
°rcmp
(
m_ba£
, "LOP.XOR")==0 || strcmp(m_base, "LOP.S.XOR")==0)

1599 
¥ötCuobjdumpPªdiˇã
();

1600 
ouçut
("xor");

1601 
¥ötCuobjdumpBa£Modifõrs
();

1603 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1604 
ouçut
(".b32");

1606 
¥ötCuobjdumpTy≥Modifõrs
();

1608 
¥ötCuobjdumpO≥ønds
();

1609 
ouçut
(";");

1611 if(
°rcmp
(
m_ba£
, "R2A")==0)

1613 
¥ötCuobjdumpPªdiˇã
();

1614 
ouçut
("shl");

1615 
¥ötCuobjdumpBa£Modifõrs
();

1617 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1618 
ouçut
(".b32");

1620 
¥ötCuobjdumpTy≥Modifõrs
();

1621 
¥ötCuobjdumpO≥ønds
();

1622 if(
	gm_›î™ds
->
gëSize
() == 2)

1623 
ouçut
(", 0x0");

1624 
ouçut
(";");

1626 if(
°rcmp
(
m_ba£
, "R2G.U16.U8")==0){

1630 
¥ötCuobjdumpPªdiˇã
();

1631 
ouçut
("mov.u8");

1632 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_›î™ds
->
gëLi°Sèπ
();

1633 
	g°d
::
°rög
 
dñimôî
 = "";

1634 
¥ötCuobjdumpO≥ønd
(
cuºítPõ˚
, 
dñimôî
, 
m_ba£
);

1635 
ouçut
(", ");

1636 
	g°d
::
°rög
 
cuº
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1637 
	gcuº
 = 
cuº
.
sub°r
(1);

1638 
	gªgnum
;

1639 
	g°d
::
i°rög°ªam
(
cuº
)>>
ªgnum
;

1640 
ouçut
("$r");

1641 
	g°d
::
°rög°ªam
 
föÆªgnum
;

1642 
	gföÆªgnum
 << (
	gªgnum
/2);

1643 
ouçut
(
föÆªgnum
.
°r
().
c_°r
());

1644 
ouçut
–
ªgnum
%2==0? ".lo": ".hi");

1645 
ouçut
(";");

1647 if(
°rcmp
(
m_ba£
, "R2G")==0)

1649 
¥ötCuobjdumpPªdiˇã
();

1650 
ouçut
("mov");

1651 
¥ötCuobjdumpBa£Modifõrs
();

1653 if–
	gm_ty≥Modifõrs
->
gëSize
() == 2 ) {

1654 
°d
::
°rög
 
ty≥1
, 
ty≥2
, 
ty≥
;

1655 
	gty≥1Size
, 
	gty≥2Size
;

1656 
°rögLi°Põ˚
* 
	gcuºítPõ˚
 = 
m_ty≥Modifõrs
->
gëLi°Sèπ
();

1657 
	gty≥1
 = 
cuºítPõ˚
->
°rögText
;

1658 
	gty≥2
 = 
cuºítPõ˚
->
√xtSåög
->
°rögText
;

1660 
	gty≥1Size
 = 
©oi
(
ty≥1
.
sub°r
(2,Åy≥1.
size
()-2).
c_°r
());

1661 
	gty≥2Size
 = 
©oi
(
ty≥2
.
sub°r
(2,Åy≥2.
size
()-2).
c_°r
());

1662 
	gty≥
 = (
ty≥1Size
 < 
ty≥2Size
Ë? 
ty≥1
 : 
ty≥2
;

1664 if–
°rcmp
(
ty≥
.
c_°r
(), ".F16")==0 )

1665 
ouçut
(".f16");

1666 if–
°rcmp
(
ty≥
.
c_°r
(), ".F32")==0 )

1667 
ouçut
(".f32");

1668 if–
°rcmp
(
ty≥
.
c_°r
(), ".F64")==0 )

1669 
ouçut
(".ff64");

1670 if–
°rcmp
(
ty≥
.
c_°r
(), ".S8")==0 )

1671 
ouçut
(".s8");

1672 if–
°rcmp
(
ty≥
.
c_°r
(), ".S16")==0 )

1673 
ouçut
(".s16");

1674 if–
°rcmp
(
ty≥
.
c_°r
(), ".S32")==0 )

1675 
ouçut
(".s32");

1676 if–
°rcmp
(
ty≥
.
c_°r
(), ".S64")==0 )

1677 
ouçut
(".bb64");

1678 if–
°rcmp
(
ty≥
.
c_°r
(), ".S128")==0 )

1679 
ouçut
(".bb128");

1680 if–
°rcmp
(
ty≥
.
c_°r
(), ".U8")==0 )

1681 
ouçut
(".u8");

1682 if–
°rcmp
(
ty≥
.
c_°r
(), ".U16")==0 )

1683 
ouçut
(".u16");

1684 if–
°rcmp
(
ty≥
.
c_°r
(), ".U32")==0 )

1685 
ouçut
(".u32");

1686 if–
°rcmp
(
ty≥
.
c_°r
(), ".U64")==0 )

1687 
ouçut
(".bb64");

1689 
ouçut
(
ty≥
.
c_°r
());

1690 } if–
	gm_ty≥Modifõrs
->
gëSize
() == 1 ) {

1691 
¥ötCuobjdumpTy≥Modifõrs
();

1693 
ouçut
("Error: unsupportedÇumber ofÅype modifiers. ");

1696 
¥ötCuobjdumpO≥ønds
();

1697 
ouçut
(";");

1699 if(
°rcmp
(
m_ba£
, "RCP")==0)

1701 
¥ötCuobjdumpPªdiˇã
();

1702 
ouçut
("rcp");

1703 
¥ötCuobjdumpBa£Modifõrs
();

1705 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1706 
ouçut
(".f32");

1708 
¥ötCuobjdumpTy≥Modifõrs
();

1710 
¥ötCuobjdumpO≥ønds
();

1711 
ouçut
(";");

1713 if(
°rcmp
(
m_ba£
, "RCP32")==0)

1715 
¥ötCuobjdumpPªdiˇã
();

1716 
ouçut
("rcp.half");

1717 
¥ötCuobjdumpBa£Modifõrs
();

1719 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1720 
ouçut
(".f32");

1722 
¥ötCuobjdumpTy≥Modifõrs
();

1723 
¥ötCuobjdumpO≥ønds
();

1724 
ouçut
(";");

1726 if(
°rcmp
(
m_ba£
, "RET")==0)

1728 
¥ötCuobjdumpPªdiˇã
();

1729 
ouçut
("retp;");

1731 if(
°rcmp
(
m_ba£
, "RRO")==0)

1733 
ouçut
("nop; //");

1734 
¥ötCuobjdumpPªdiˇã
();

1735 
¥ötCuobjdumpBa£Modifõrs
();

1737 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1738 
ouçut
(".f32");

1740 
¥ötCuobjdumpTy≥Modifõrs
();

1742 
¥ötCuobjdumpO≥ønds
();

1743 
ouçut
(";");

1745 if(
°rcmp
(
m_ba£
, "RSQ")==0)

1747 
¥ötCuobjdumpPªdiˇã
();

1748 
ouçut
("rsqrt");

1749 
¥ötCuobjdumpBa£Modifõrs
();

1751 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1752 
ouçut
(".f32");

1754 
¥ötCuobjdumpTy≥Modifõrs
();

1756 
¥ötCuobjdumpO≥ønds
();

1757 
ouçut
(";");

1759 if(
°rcmp
(
m_ba£
, "SHL")==0)

1761 
¥ötCuobjdumpPªdiˇã
();

1762 
ouçut
("shl");

1763 
¥ötCuobjdumpBa£Modifõrs
();

1765 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1766 
ouçut
(
öt_deÁu…_mod
());

1768 
¥ötCuobjdumpTy≥Modifõrs
();

1770 
¥ötCuobjdumpO≥ønds
();

1771 
ouçut
(";");

1773 if(
°rcmp
(
m_ba£
, "SHR")==0)

1775 
¥ötCuobjdumpPªdiˇã
();

1776 
ouçut
("shr");

1777 
¥ötCuobjdumpBa£Modifõrs
();

1779 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1780 
ouçut
(
öt_deÁu…_mod
());

1782 
¥ötCuobjdumpTy≥Modifõrs
();

1784 
¥ötCuobjdumpO≥ønds
();

1785 
ouçut
(";");

1787 if(
°rcmp
(
m_ba£
, "SIN")==0)

1789 
¥ötCuobjdumpPªdiˇã
();

1790 
ouçut
("sin");

1791 
¥ötCuobjdumpBa£Modifõrs
();

1793 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1794 
ouçut
(".f32");

1796 
¥ötCuobjdumpTy≥Modifõrs
();

1798 
¥ötCuobjdumpO≥ønds
();

1799 
ouçut
(";");

1801 if(
°rcmp
(
m_ba£
, "S2R")==0)

1803 
¥ötCuobjdumpPªdiˇã
();

1804 
ouçut
("cvt");

1805 
¥ötCuobjdumpBa£Modifõrs
();

1806 
ouçut
(".u32.u32");

1807 
¥ötCuobjdumpO≥ønds
();

1808 
ouçut
(";");

1810 if(
°rcmp
(
m_ba£
, "LD")==0)

1812 
¥ötCuobjdumpPªdiˇã
();

1813 
ouçut
("mov");

1814 
¥ötCuobjdumpBa£Modifõrs
();

1815 
¥ötCuobjdumpTy≥Modifõrs
();

1816 
¥ötCuobjdumpO≥ønds
();

1817 
ouçut
(";");

1819 if(
°rcmp
(
m_ba£
, "STS")==0)

1821 
¥ötCuobjdumpPªdiˇã
();

1822 
ouçut
("mov");

1823 
¥ötCuobjdumpBa£Modifõrs
();

1824 
¥ötCuobjdumpTy≥Modifõrs
();

1825 
¥ötCuobjdumpO≥ønds
();

1826 
ouçut
(";");

1828 if(
°rcmp
(
m_ba£
, "BAR")==0)

1830 
¥ötCuobjdumpPªdiˇã
();

1831 
ouçut
("bar.sync 0;");

1833 if(
°rcmp
(
m_ba£
, "LDS")==0)

1837 
¥ötCuobjdumpPªdiˇã
();

1838 
ouçut
("mov");

1839 
¥ötCuobjdumpBa£Modifõrs
();

1840 
¥ötCuobjdumpTy≥Modifõrs
();

1841 
¥ötCuobjdumpO≥ønds
();

1842 
ouçut
(";");

1844 if(
°rcmp
(
m_ba£
, "ST")==0)

1846 
¥ötCuobjdumpPªdiˇã
();

1847 
ouçut
("mov");

1848 
¥ötCuobjdumpBa£Modifõrs
();

1849 
¥ötCuobjdumpTy≥Modifõrs
();

1850 
¥ötCuobjdumpO≥ønds
();

1851 
ouçut
(";");

1852 } if(
°rcmp
(
m_ba£
, "IMIN")==0) {

1853 
¥ötCuobjdumpPªdiˇã
();

1854 
ouçut
("min");

1855 
¥ötCuobjdumpBa£Modifõrs
();

1856 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1857 
ouçut
(".s32");

1859 
¥ötCuobjdumpTy≥Modifõrs
();

1860 
¥ötCuobjdumpO≥ønds
();

1861 
ouçut
(";");

1862 } if(
°rcmp
(
m_ba£
, "IMAX")==0) {

1863 
¥ötCuobjdumpPªdiˇã
();

1864 
ouçut
("max");

1865 
¥ötCuobjdumpBa£Modifõrs
();

1866 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1867 
ouçut
(".s32");

1869 
¥ötCuobjdumpTy≥Modifõrs
();

1870 
¥ötCuobjdumpO≥ønds
();

1871 
ouçut
(";");

1872 } if(
°rcmp
(
m_ba£
, "FMIN")==0) {

1873 
¥ötCuobjdumpPªdiˇã
();

1874 
ouçut
("min");

1875 
¥ötCuobjdumpBa£Modifõrs
();

1876 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1877 
ouçut
(".f32");

1879 
¥ötCuobjdumpTy≥Modifõrs
();

1880 
¥ötCuobjdumpO≥ønds
();

1881 
ouçut
(";");

1883 if(
°rcmp
(
m_ba£
, "FMAX")==0) {

1884 
¥ötCuobjdumpPªdiˇã
();

1885 
ouçut
("max");

1886 
¥ötCuobjdumpBa£Modifõrs
();

1887 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1888 
ouçut
(".f32");

1890 
¥ötCuobjdumpTy≥Modifõrs
();

1891 
¥ötCuobjdumpO≥ønds
();

1892 
ouçut
(";");

1894 if(
°rcmp
(
m_ba£
, "A2R")==0) {

1895 
¥ötCuobjdumpPªdiˇã
();

1896 
ouçut
("mov");

1897 
¥ötCuobjdumpBa£Modifõrs
();

1898 if(
	gm_ty≥Modifõrs
->
gëSize
() == 0)

1899 
ouçut
(
öt_deÁu…_mod
());

1901 
¥ötCuobjdumpTy≥Modifõrs
();

1902 
¥ötCuobjdumpO≥ønds
();

1903 
ouçut
(";");

1905 if((
°rcmp
(
m_ba£
, "TEX")==0) ||

1906 (
°rcmp
(
m_ba£
, "TEX32")==0)) {

1907 
¥ötCuobjdumpPªdiˇã
();

1908 
ouçut
("tex.1d.v4.f32.s32 ");

1909 
°rögLi°Põ˚
 *
	gcuºPõ˚
;

1910 
°rögLi°Põ˚
 
	gªg
;

1911 
	g°d
::
°rög
 
addrReg
, 
	gãx_id
;

1912 
	gcuºPõ˚
 = 
m_›î™ds
->
gëLi°Sèπ
();

1913 
ouçut
("{");

1914 
¥ötCuobjdumpO≥ønd
(
cuºPõ˚
, "", "");

1915 
ouçut
(",_,_,_} , ");

1916 
	gªg
 = *
cuºPõ˚
;

1917 
	gcuºPõ˚
 = 
cuºPõ˚
->
√xtSåög
;

1918 
	gãx_id
 = 
cuºPõ˚
->
°rögText
;

1919 
	gãx_id_öt
;

1920 
	g°d
::
°rög°ªam
 
ss
;

1921 
	gss
 << 
	g°d
::
hex
 << 
ãx_id
;

1922 
	gss
 >> 
	gãx_id_öt
;

1923 
	g°d
::
li°
<
°d
::
°rög
>::
ôî©‹
 
ãxIãr
 = 
ãxLi°
.
begö
();

1924 
	gi
=0; i<
	gãx_id_öt
; i++) {

1925 
as£π
 (
ãxIãr
!=
ãxLi°
.
íd
());

1926 
	gãxIãr
++;

1928 
ouçut
((*
ãxIãr
).
c_°r
());

1929 
ouçut
(",{");

1930 
¥ötCuobjdumpO≥ønd
(&
ªg
, "", "");

1931 
ouçut
(",_,_,_};");

1933 if(
°rcmp
(
m_ba£
, "EXIT")==0) {

1934 
¥ötCuobjdumpPªdiˇã
();

1935 
ouçut
("exit");

1936 
ouçut
(";");

1938 if(
°rcmp
(
m_ba£
, "GRED")==0) {

1939 
¥ötCuobjdumpPªdiˇã
();

1941 
ouçut
("atom.global");

1942 
¥ötCuobjdumpBa£Modifõrs
();

1943 
¥ötCuobjdumpTy≥Modifõrs
();

1944 
ouçut
(" _, ");

1945 
¥ötCuobjdumpO≥ønds
();

1946 
ouçut
(";");

1947 } if(
°rcmp
(
m_ba£
, "GATOM")==0) {

1948 
¥ötCuobjdumpPªdiˇã
();

1949 
ouçut
("atom.global");

1950 
¥ötCuobjdumpBa£Modifõrs
();

1951 
¥ötCuobjdumpTy≥Modifõrs
();

1953 
¥ötCuobjdumpO≥ønds
();

1954 
ouçut
(";");

1955 }if(
°rcmp
(
m_ba£
, "PBK")==0) {

1958 
ouçut
("nop;");

1959 
	gbªakèrgë
 = 
m_›î™ds
->
gëLi°Sèπ
()->
°rögText
;

1960 } if(
°rcmp
(
m_ba£
, "BRK")==0) {

1961 
¥ötCuobjdumpPªdiˇã
();

1967 
ouçut
("bra ");

1968 
ouçut
(
bªakèrgë
.
c_°r
());

1969 
ouçut
(";");

1970 } if(
°rcmp
(
m_ba£
, "C2R")==0) {

1971 
¥ötCuobjdumpPªdiˇã
();

1972 
ouçut
("mov.u32");

1973 
¥ötCuobjdumpO≥ønds
();

1974 
ouçut
(";");

1975 } if(
°rcmp
(
m_ba£
, "R2C")==0) {

1976 
¥ötCuobjdumpPªdiˇã
();

1977 
ouçut
("mov.pred");

1978 
¥ötCuobjdumpO≥ønds
();

1979 
ouçut
(";");

1980 } if(
°rcmp
(
m_ba£
, "VOTE")==0) {

1981 
¥ötCuobjdumpPªdiˇã
();

1982 
ouçut
("vote");

1983 
¥ötCuobjdumpBa£Modifõrs
();

1984 
¥ötCuobjdumpTy≥Modifõrs
();

1985 
¥ötCuobjdumpO≥ønds
();

1986 
ouçut
(";");

1988 if(
°rcmp
(
m_ba£
, "DFMA")==0)

1990 
¥ötCuobjdumpPªdiˇã
();

1991 
ouçut
("fma.rz.ff64");

1992 
¥ötCuobjdumpBa£Modifõrs
();

1993 
¥ötCuobjdumpO≥ønds
();

1994 
ouçut
(";");

1998 
¥ötf
("Unknown Instruction: ");

1999 
¥ötf
(
m_ba£
);

2000 
¥ötf
("\n");

2001 
ouçut
("Unknown Instruction: ");

2002 
ouçut
(
m_ba£
);

2003 
as£π
(0);

	@cuobjdump_to_ptxplus/cuobjdumpInst.h

28 #i‚de‡
_CUOBJDUMPINST_H_


29 
	#_CUOBJDUMPINST_H_


	)

32 
	~<°rög.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<li°
>

39 
	~"°rögLi°.h
"

41 ˛as†
	ccuobjdumpIn°


43 
	m¥Ÿe˘ed
:

45 c⁄° * 
m_œbñ
;

46 
°rögLi°
* 
	mm_¥ediˇã
;

47 c⁄° * 
	mm_ba£
;

48 
°rögLi°
* 
	mm_ba£Modifõrs
;

49 
°rögLi°
* 
	mm_ty≥Modifõrs
;

50 
°rögLi°
* 
	mm_›î™ds
;

51 
°rögLi°
* 
	mm_¥ediˇãModifõrs
;

53 
	mpublic
:

55 
cuobjdumpIn°
();

58 c⁄° * 
gëBa£
();

59 
°rögLi°
* 
gëTy≥Modifõrs
();

62 
£tLabñ
(c⁄° * 
£tLabñVÆue
);

63 
£tPªdiˇã
(c⁄° * 
£tPªdiˇãVÆue
);

64 
addPªdiˇãModifõr
(c⁄° * 
addPªdiˇãMod
);

65 
£tBa£
(c⁄° * 
£tBa£VÆue
);

66 
addBa£Modifõr
(c⁄° * 
addBa£Mod
);

67 
addTy≥Modifõr
(c⁄° * 
addTy≥Mod
);

68 
addO≥ønd
(c⁄° * 
addOp
);

70 
boﬁ
 
checkCubojdumpLabñ
(
°d
::
li°
<°d::
°rög
> 
œbñLi°
, std::°rög 
œbñ
);

72 
¥ötCuobjdumpLabñ
(
°d
::
li°
<°d::
°rög
> 
œbñLi°
);

73 
¥ötCuobjdumpPªdiˇã
();

74 
¥ötCuobjdumpTy≥Modifõrs
();

75 
¥ötCuobjdumpBa£Modifõrs
();

76 
¥ötCuobjdumpO≥ønd
(
°rögLi°Põ˚
* 
cuºítPõ˚
, 
°d
::
°rög
 
›î™dDñimôî
, c⁄° * 
ba£
);

77 
¥ötCuobjdumpO≥øndlohi
(
°d
::
°rög
 
›
);

78 
¥ötCuobjdumpO≥ønds
();

80 
¥ötCuobjdumpPtxPlus
(
°d
::
li°
<°d::
°rög
> 
œbñLi°
, std::li°<°d::°rög> 
ãxLi°
);

83 
boﬁ
 
¥ötHódîIn°
();

84 
¥ötCuobjdumpIn°
();

85 
¥ötHódîPtx
();

	@cuobjdump_to_ptxplus/cuobjdumpInstList.cc

28 
	~<s°ªam
>

29 
	~<io°ªam
>

30 
	~<ˇs£π
>

31 
	~"cuobjdumpIn°Li°.h
"

33 
	#P_DEBUG
 1

	)

34 
	#DPRINTF
(...Ë\

	)

35 if(
	gP_DEBUG
) { \

36 
¥ötf
("(%s:%uË", 
__FILE__
, 
__LINE__
); \

37 
¥ötf
(
__VA_ARGS__
); \

38 
¥ötf
("\n"); \

39 
fÊush
(
°dout
); \

42 
ouçut
(c⁄° * 
ãxt
);

45 
	gcuobjdumpIn°Li°
::
	$cuobjdumpIn°Li°
()

48 
	}
}

53 
cuobjdumpIn°Li°
::
addTex
(
°d
::
°rög
 
ãx
)

55 
°d
::
°rög
 
‹igTex
 = 
ãx
;

56 
DPRINTF
("cuobjdumpIn°Li°::addTexÅex=%s", 
ãx
.
c_°r
());

58 if(
	gãx
.
sub°r
(0, 4) == "$tex") {

59 
ãx
 =Åex.
sub°r
(4,Åex.
size
()-4);

60 
	gãxNum
 = 
©oi
(
ãx
.
c_°r
());

61 if(
	gãxNum
 >
m_ªÆTexLi°
.
size
()) {

62 
ouçut
("ERROR:Åex doesÇotÉxist inÑealÅexÜist fromÖtx.\n.");

63 
as£π
(0);

66 
	g°d
::
li°
<
°d
::
°rög
>::
ôî©‹
 
ôex
 = 
m_ªÆTexLi°
.
begö
();

67 
	gi
=0; i<
	gãxNum
; i++Ë
	gôex
++;

68 
	g‹igTex
 = *
ôex
;

72 
	gm_ªÆTexLi°
.
push_back
(
ãx
);

81 
	gcuobjdumpIn°Li°
::
£tLa°E¡ryName
(
°d
::
°rög
 
íåyName
)

83 
m_íåyLi°
.
back
().
m_íåyName
 = 
íåyName
;

87 
	gcuobjdumpIn°Li°
::
	$addC⁄°Mem‹y
(
ödex
)

89 
c⁄°Mem‹y
 
√wC⁄°Mem
;

90 
√wC⁄°Mem
.
ödex
 = index;

91 
√wC⁄°Mem
.
íåyIndex
 = 0;

92 
m_c⁄°Mem‹yLi°
.
	`push_back
(
√wC⁄°Mem
);

93 
	}
}

96 
	gcuobjdumpIn°Li°
::
	$add
(
cuobjdumpIn°
* 
√wCuobjdumpIn°
)

98 if(
m_íåyLi°
.
	`size
() == 0) {

100 
	`addE¡ry
("");

104 
m_íåyLi°
.
	`back
().
m_ö°Li°
.
	`push_back
(*
√wCuobjdumpIn°
);

106  
m_íåyLi°
.
	`size
();

107 
	}
}

110 
	gcuobjdumpIn°Li°
::
addE¡ry
(
°d
::
°rög
 
íåyName
)

112 
cuobjdumpE¡ry
 
√wE¡ry
;

113 
	g√wE¡ry
.
	gm_œrge°RegIndex
 = -1;

114 
	g√wE¡ry
.
	gm_œrge°OfsRegIndex
 = -1;

115 
	g√wE¡ry
.
	gm_œrge°PªdIndex
 = -1;

116 
	g√wE¡ry
.
	gm_ªg124
 = 
Ál£
;

117 
	g√wE¡ry
.
	gm_‹eg127
 = 
Ál£
;

118 
	g√wE¡ry
.
	gm_lMemSize
 = -1;

120 
	g√wE¡ry
.
	gm_íåyName
 = 
íåyName
;

124 
	g√wE¡ry
.
	gm_›PîCy˛eHi°ogøm
.
ö£π
–
°d
::
∑ú
<°d::
°rög
,>("OP_1", 0) );

125 
	g√wE¡ry
.
	gm_›PîCy˛eHi°ogøm
.
ö£π
–
°d
::
∑ú
<°d::
°rög
,>("OP_2", 0) );

126 
	g√wE¡ry
.
	gm_›PîCy˛eHi°ogøm
.
ö£π
–
°d
::
∑ú
<°d::
°rög
,>("OP_8", 0) );

129 
	gm_íåyLi°
.
push_back
(
√wE¡ry
);

130  
	gm_íåyLi°
.
size
();

134 
	gcuobjdumpIn°Li°
::
	$¥ötHódîIn°Li°
()

137 
cuobjdumpE¡ry
 
e_fú°
 = 
m_íåyLi°
.
	`‰⁄t
();

139 
°d
::
li°
<
cuobjdumpIn°
>::
ôî©‹
 
cuºítIn°
;

140 
cuºítIn°
=
e_fú°
.
m_ö°Li°
.
	`begö
(); cuºítIn°!Û_fú°.m_ö°Li°.
	`íd
(); ++currentInst)

142 if(!(
cuºítIn°
->
	`¥ötHódîIn°
()))

147  
°d
::
li°
<°d::
°rög
>::
ôî©‹
 
ôî
 = 
m_ªÆTexLi°
.
	`begö
();

148 
ôî
 !
m_ªÆTexLi°
.
	`íd
();

149 
ôî
 ++) {

150 
	`ouçut
(".tex .u64 ");

151 
	`ouçut
((*
ôî
).
	`c_°r
());

152 
	`ouçut
(";\n");

154 
	}
}

156 
boﬁ
 
	gcuobjdumpIn°Li°
::
födE¡ry
(
°d
::
°rög
 
íåyName
, 
cuobjdumpE¡ry
& 
íåy
) {

157 
	g°d
::
li°
<
cuobjdumpE¡ry
>::
ôî©‹
 
e
;

159 
	g°d
::
°rög
 
íåyNameS
 = 
íåyName
;

161 
	ge
=
m_íåyLi°
.
begö
();É!=m_íåyLi°.
íd
(); ++e) {

162 if–
	ge
->
	gm_íåyName
 =
íåyNameS
) {

163 
íåy
 = *
e
;

164  
	gåue
;

168  
	gÁl£
;

172 
	g°d
::
li°
<
°d
::
°rög
> 
cuobjdumpIn°Li°
::
	$gëRólTexLi°
() {

173  
m_ªÆTexLi°
;

174 
	}
}

177 
	gcuobjdumpIn°Li°
::
£tRólTexLi°
(
°d
::
li°
<°d::
°rög
> 
ªÆTexLi°
) {

178 
m_ªÆTexLi°
 = 
ªÆTexLi°
;

182 
	gcuobjdumpIn°Li°
::
addC⁄°Mem‹yVÆue
(
°d
::
°rög
 
c⁄°Mem‹yVÆue
)

184 
m_c⁄°Mem‹yLi°
.
back
().
m_c⁄°Mem‹y
.
push_back
(
c⁄°Mem‹yVÆue
);

187 
	gcuobjdumpIn°Li°
::
addC⁄°Mem‹yVÆue2
(
°d
::
°rög
 
c⁄°Mem‹yVÆue
)

189 
m_c⁄°Mem‹yLi°2
.
back
().
m_c⁄°Mem‹y
.
push_back
(
c⁄°Mem‹yVÆue
);

193 
	gcuobjdumpIn°Li°
::
	$£tC⁄°Mem‹yTy≥
(c⁄° * 
ty≥
)

195 
m_c⁄°Mem‹yLi°
.
	`back
().
ty≥
 =Åype;

196 
	}
}

198 
	gcuobjdumpIn°Li°
::
	$£tC⁄°Mem‹yTy≥2
(c⁄° * 
ty≥
)

200 
m_c⁄°Mem‹yLi°2
.
	`back
().
ty≥
 =Åype;

201 
	}
}

204 
cuobjdumpIn°
 
	gcuobjdumpIn°Li°
::
	$gëLi°End
()

206  
m_íåyLi°
.
	`back
().
m_ö°Li°
.back();

207 
	}
}

210 
	gcuobjdumpIn°Li°
::
	$¥ötPªdNames
(
cuobjdumpE¡ry
 
íåy
)

212 if–
íåy
.
m_œrge°PªdIndex
 >= 0) {

213 
out
[30];

214 
	`•rötf
(
out
, "\t.ªg .¥ed $p<%d>;", 
íåy
.
m_œrge°PªdIndex
+1);

215 
	`ouçut
(
out
);

216 
	`ouçut
("\n");

219 
	}
}

222 
	gcuobjdumpIn°Li°
::
	$¥ötOutOfBoundRegi°îs
(
cuobjdumpE¡ry
 
íåy
)

224 if–
íåy
.
m_ªg124
 =
åue
 ) {

225 
	`ouçut
("\n");

226 
	`ouçut
("\t.reg .u32 $r124;\n");

227 
	`ouçut
("\tmov.u32 $r124, 0x00000000;\n");

229 if–
íåy
.
m_‹eg127
 =
åue
) {

230 
	`ouçut
("\n");

231 
	`ouçut
("\t.reg .u32 $o127;\n");

233 
	}
}

236 
	gcuobjdumpIn°Li°
::
	$¥ötRegNames
(
cuobjdumpE¡ry
 
íåy
)

238 if–
íåy
.
m_œrge°RegIndex
 >= 0) {

239 
out
[30];

240 
	`•rötf
(
out
, "\t.ªg .u32 $r<%d>;", 
íåy
.
m_œrge°RegIndex
+1);

241 
	`ouçut
(
out
);

242 
	`ouçut
("\n");

245 if–
íåy
.
m_œrge°OfsRegIndex
 >= 0) {

246 
out
[30];

247 
	`•rötf
(
out
, "\t.ªg .u32 $ofs<%d>;", 
íåy
.
m_œrge°OfsRegIndex
+1);

248 
	`ouçut
(
out
);

249 
	`ouçut
("\n");

251 
	}
}

254 
	gcuobjdumpIn°Li°
::
	$¥ötMem‹y
()

259 
°d
::
li°
<
c⁄°Mem‹y
>::
ôî©‹
 
i
=
m_c⁄°Mem‹yLi°
.
	`begö
(); i!=m_c⁄°Mem‹yLi°.
	`íd
(); ++i) {

260 
löe
[40];

263 if(
i
->
íåyIndex
 == 0)

264 
	`•rötf
(
löe
, ".c⁄° %†c⁄°™t0[%d] = {", 
i
->
ty≥
, ()i->
m_c⁄°Mem‹y
.
	`size
());

266 
	`•rötf
(
löe
, ".c⁄° %†˚%dc%d[%d] = {", 
i
->
ty≥
, i->
íåyIndex
, i->
ödex
, ()i->
m_c⁄°Mem‹y
.
	`size
());

268 
	`ouçut
(
löe
);

270 
°d
::
li°
<°d::
°rög
>::
ôî©‹
 
j
;

271 
l
=0;

272 
j
=
i
->
m_c⁄°Mem‹y
.
	`begö
(); j!=i->m_c⁄°Mem‹y.
	`íd
(); ++j) {

273 if(
j
!=
i
->
m_c⁄°Mem‹y
.
	`begö
())

274 
	`ouçut
(", ");

275 if–(
l
++ % 4Ë=0Ë
	`ouçut
("\n ");

276 
	`ouçut
(
j
->
	`c_°r
());

278 
	`ouçut
("\n};\n\n");

282 
°d
::
li°
<
c⁄°Mem‹y2
>::
ôî©‹
 
i
=
m_c⁄°Mem‹yLi°2
.
	`begö
(); i!=m_c⁄°Mem‹yLi°2.
	`íd
(); ++i) {

283 
löe
[1024];

286 
	`•rötf
(
löe
, ".c⁄° %†c⁄°™t1%s[%d] = {", 
i
->
ty≥
, i->
kî√l
, ()i->
m_c⁄°Mem‹y
.
	`size
());

288 
	`ouçut
(
löe
);

290 
°d
::
li°
<°d::
°rög
>::
ôî©‹
 
j
;

291 
l
=0;

292 
j
=
i
->
m_c⁄°Mem‹y
.
	`begö
(); j!=i->m_c⁄°Mem‹y.
	`íd
(); ++j) {

293 if(
j
!=
i
->
m_c⁄°Mem‹y
.
	`begö
())

294 
	`ouçut
(", ");

295 if–(
l
++ % 4Ë=0Ë
	`ouçut
("\n ");

296 
	`ouçut
(
j
->
	`c_°r
());

298 
	`ouçut
("\n};\n\n");

302 
°d
::
li°
<
cuobjdumpE¡ry
>::
ôî©‹
 
e
;

303 
eIndex
=1;

304 
e
=
m_íåyLi°
.
	`begö
();É!=m_íåyLi°.
	`íd
(); ++e) {

305 if(
e
->
m_lMemSize
 > 0) {

306 
°d
::
°rög°ªam
 
ssout
;

307 
ssout
 << ".loˇ».b8Ü" << 
eIndex
 << "[" << 
e
->
m_lMemSize
 << "];" << 
°d
::
ídl
;

308 
	`ouçut
(
ssout
.
	`°r
().
	`c_°r
());

310 
eIndex
++;

312 
	`ouçut
("\n");

315 
°d
::
li°
<
globÆMem‹y
>::
ôî©‹
 
g
;

316 
g
=
m_globÆMem‹yLi°
.
	`begö
(); g!=m_globÆMem‹yLi°.
	`íd
(); ++g) {

317 
°d
::
°rög°ªam
 
out
;

318 
out
 << ".globÆ .b8 " << 
g
->
«me
 << "[" << g->
byãs
 << "];" << 
°d
::
ídl
;

319 
	`ouçut
(
out
.
	`°r
().
	`c_°r
());

321 
	`ouçut
("\n");

324 
°d
::
li°
<
c⁄°Mem‹yPå
>::
ôî©‹
 
˝
;

325 
˝
=
m_c⁄°Mem‹yPåLi°
.
	`begö
(); cp!=m_c⁄°Mem‹yPåLi°.
	`íd
(); ++cp) {

326 
°d
::
°rög°ªam
 
out
;

327 
out
 << ".c⁄° .b8 " << 
˝
->
«me
 << "[" << cp->
byãs
 << "];" << 
°d
::
ídl
;

328 
out
 << ".c⁄°±∏" << 
˝
->
«me
 << ", " << cp->
de°ö©i⁄
 << ", " << cp->
off£t
 << ";" << 
°d
::
ídl
;

329 
	`ouçut
(
out
.
	`°r
().
	`c_°r
());

331 
	`ouçut
("\n");

333 
	}
}

337 
	gcuobjdumpIn°Li°
::
addCuobjdumpRegi°î
(
°d
::
°rög
 
ªg
, 
boﬁ
 
lo
)

339 
	gve˘‹Fœg
 = 0;

340 * 
	gªgSåög
;

341 
	gªgSåög
 = 
√w
 [
ªg
.
size
()+1];

343 
°rögLi°
* 
	gty≥Modifõrs
 = 
gëLi°End
().
gëTy≥Modifõrs
();

344 c⁄° * 
	gba£In°
 = 
gëLi°End
().
gëBa£
();

347 if((
°rcmp
(
ba£In°
, "DADD")==0) || (strcmp(baseInst, "DMUL")==0) || (strcmp(baseInst, "DFMA")==0) ||

348 ((
ty≥Modifõrs
->
gëSize
()==1) &&

349 (
°rcmp
((
ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".S64")==0) &&

350 ((
°rcmp
(
ba£In°
, "G2R")==0)||(strcmp(baseInst, "R2G")==0)||

351 (
°rcmp
(
ba£In°
, "GLD")==0)||(strcmp(baseInst, "GST")==0)||

352 (
°rcmp
(
ba£In°
, "LST")==0))))

354 
ve˘‹Fœg
 = 64;

356 if((
	gty≥Modifõrs
->
gëSize
()==1Ë&& (
°rcmp
((
ty≥Modifõrs
->
gëLi°Sèπ
()->
°rögText
), ".S128")==0))

358 
ve˘‹Fœg
 = 128;

362 
	g°d
::
°rög
 
∑r£dReg
 = 
∑r£CuobjdumpRegi°î
(
ªg
, 
lo
, 
ve˘‹Fœg
);

364 
°r˝y
(
ªgSåög
, 
∑r£dReg
.
c_°r
());

366 
gëLi°End
().
addO≥ønd
(
ªgSåög
);

371 
	gcuobjdumpIn°Li°
::
addCuobjdumpMem‹yO≥ønd
(
°d
::
°rög
 
mem
, 
memTy≥
) {

372 
	g°d
::
°rög
 
‹igMem
 = 
mem
;

373 
boﬁ
 
	g√g
 = 
Ál£
;

376 if(
	gmemTy≥
 == 0) {

379 if(
mem
.
sub°r
(0,1) == "-") {

381 
mem
 = mem.
sub°r
(1, mem.
size
()-1);

382 
	g√g
 = 
åue
;

385 if(
	gmem
.
sub°r
(0, 7) == "c [0xe]") {

387 
off£t
;

388 
ssˇnf
(
mem
.
sub°r
(9,mem.
size
()-10).
c_°r
(), "%x", &
off£t
);

390 
boﬁ
 
	gfound
 = 
Ál£
;

391 
	g°d
::
li°
<
globÆMem‹y
>::
ôî©‹
 
g
;

392 
	gg
=
m_globÆMem‹yLi°
.
begö
(); g!=m_globÆMem‹yLi°.
íd
(); ++g) {

393 if(
	gg
->
	goff£t
 =
off£t
) {

394 
mem
 = 
g
->
«me
;

395 
	gfound
 = 
åue
;

400 if(!
	gfound
) {

401 
¥ötf
("CouldÇŸ födá globÆ mem‹y wôhÅhi†off£àö: %s\n", 
mem
.
c_°r
());

402 
ouçut
("CouldÇot findá global memory withÅhis offset.\n");

403 
as£π
(0);

407 if(
	gmem
.
sub°r
(0, 7) == "c [0x0]"){

408 
mem
 = "c⁄°™t0" + mem.
sub°r
(7, mem.
Àngth
());

410 if(
	gmem
.
sub°r
(0, 5) == "c [0x"){

411 
°d
::
°rög
 
out
;

412 
	gout
 = "c⁄°™t1" + 
m_íåyLi°
.
back
().
m_íåyName
 + 
mem
.
sub°r
(8);

413 
	gmem
 = 
out
.
c_°r
();

416 
ouçut
("Unrecognized memoryÅype:");

417 
ouçut
(
mem
.
c_°r
());

418 
ouçut
("\n");

419 
as£π
(0);

422 i‡(
	g√g
) {

423 
	gmem
 = "-"+
mem
;

428 if(
	gmemTy≥
 == 3) {

429 
°d
::
°rög°ªam
 
out
;

430 
¥ötf
("TryögÅÿfödÜmem f‹: %s\n", 
m_íåyLi°
.
back
().
m_íåyName
.
c_°r
());

431 
¥ötf
("OrigöÆ mem‹y: %s\n", 
mem
.
c_°r
());

432 
as£π
(
kî√Œmemm≠
[
m_íåyLi°
.
back
().
m_íåyName
] !=0 );

433 
	gout
 << "l" << 
	gkî√Œmemm≠
[
m_íåyLi°
.
back
().
m_íåyName
];

434 
	gmem
 = 
out
.
°r
();

438 * 
	gmemName
 = 
√w
 [
°æí
(
mem
.
c_°r
())+1];

439 
°r˝y
(
memName
, 
mem
.
c_°r
());

440 
gëLi°End
().
addO≥ønd
(
memName
);

444 
	g°d
::
°rög
 
cuobjdumpIn°Li°
::
∑r£CuobjdumpRegi°î
(
°d
::°rög 
ªg
, 
boﬁ
 
lo
, 
ve˘‹Fœg
)

446 
	g°d
::
°rög
 
‹igReg
 = 
ªg
;

448 if(
	gm_íåyLi°
.
size
() == 0) {

449 
ouçut
("ERROR: AddingáÑegister beforeáddingánÉntry.\n");

450 
as£π
(0);

454 if(
	gªg
.
sub°r
(0,1) == "-")

455 
ªg
 =Ñeg.
sub°r
(1,Ñeg.
size
()-1);

458 if(
	glo
)

459 
	gªg
 = 
ªg
.
sub°r
(0,Ñeg.
size
()-1);

463 if(
	gªg
.
sub°r
(0, 1) == "R") {

464 
ªg
 =Ñeg.
sub°r
(1,Ñeg.
size
()-1);

465 
	gªgNum
 = 
©oi
(
ªg
.
c_°r
());

479 if(
	gve˘‹Fœg
==64)

480 
ªgNum
 += 1;

481 if(
	gve˘‹Fœg
==128)

482 
ªgNum
 += 3;

484 if–
	gm_íåyLi°
.
back
().
	gm_œrge°RegIndex
 < 
	gªgNum
 &&ÑegNum < 124 )

485 
	gm_íåyLi°
.
back
().
	gm_œrge°RegIndex
 = 
ªgNum
;

486 if–
	gªgNum
 == 124 )

487 
m_íåyLi°
.
back
().
m_ªg124
 = 
åue
;

488 } if(
	gªg
.
sub°r
(0, 1) == "A") {

489 
ªg
 =Ñeg.
sub°r
(1,Ñeg.
size
()-1);

490 
	gªgNum
 = 
©oi
(
ªg
.
c_°r
());

492 if–
	gm_íåyLi°
.
back
().
	gm_œrge°OfsRegIndex
 < 
	gªgNum
 &&ÑegNum < 124 )

493 
	gm_íåyLi°
.
back
().
	gm_œrge°OfsRegIndex
 = 
ªgNum
;

494 } if(
	gªg
 == "o [0x7f]") {

495 
m_íåyLi°
.
back
().
m_‹eg127
 = 
åue
;

496 } i‡(
	gªg
.
sub°r
(0,3) == "SR_") {

497 if(
ªg
.
sub°r
(3,3)=="Tid") {

498 
‹igReg
 = "%%tid";

499 if(
	gªg
.
sub°r
(7,1)=="X") {

500 
‹igReg
 += ".x";

504 
ouçut
("ERROR: unknownÑegisterÅype.\n");

505 
¥ötf
("\nERROR: unknownÑegisterÅype: ");

506 
¥ötf
(
ªg
.
c_°r
());

507 
¥ötf
("\n");

508 
as£π
(0);

510  
	g‹igReg
;

514 
	gcuobjdumpIn°Li°
::
addCuobjdumpDoubÀPªdReg
(
°d
::
°rög
 
¥ed
, std::°rög 
ªg
, 
boﬁ
 
lo
)

516 
	g°d
::
°rög
 
∑r£dPªd
 = 
∑r£CuobjdumpPªdiˇã
(
¥ed
);

517 
	g°d
::
°rög
 
∑r£dReg
 = 
∑r£CuobjdumpRegi°î
(
ªg
, 
lo
, 0);

519 
	g°d
::
°rög
 
doubÀPªdReg
;

521 
°rcmp
(
gëLi°End
().
gëBa£
(), "DSET")==0 ||

522 
°rcmp
(
gëLi°End
().
gëBa£
(), "FSET")==0 ||

523 
°rcmp
(
gëLi°End
().
gëBa£
(), "ISET")==0

525 
doubÀPªdReg
 = 
∑r£dPªd
 + "/" + 
∑r£dReg
;

527 
	gdoubÀPªdReg
 = 
∑r£dPªd
 + "|" + 
∑r£dReg
;

529 * 
	gdoubÀPªdRegName
 = 
√w
 [
°æí
(
doubÀPªdReg
.
c_°r
())];

530 
°r˝y
(
doubÀPªdRegName
, 
doubÀPªdReg
.
c_°r
());

531 
gëLi°End
().
addO≥ønd
(
doubÀPªdRegName
);

534 
	g°d
::
°rög
 
cuobjdumpIn°Li°
::
∑r£CuobjdumpPªdiˇã
(
°d
::°rög 
¥ed
)

536 
°d
::
°rög
 
‹igPªd
 = 
¥ed
;

539 if(
	gm_íåyLi°
.
size
() == 0) {

540 
ouçut
("ERROR: AddingáÖredicate beforeáddingánÉntry.\n");

541 
as£π
(0);

545 
	g¥ed
 = 
¥ed
.
sub°r
(2,Öªd.
size
()-2);

546 
	g¥edNum
 = 
©oi
(
¥ed
.
c_°r
());

547 if–
	gm_íåyLi°
.
back
().
	gm_œrge°PªdIndex
 < 
	g¥edNum
 )

548 
	gm_íåyLi°
.
back
().
	gm_œrge°PªdIndex
 = 
¥edNum
;

550  
	g‹igPªd
;

553 
	gcuobjdumpIn°Li°
::
addCubojdumpLabñ
(
°d
::
°rög
 
œbñ
)

556 if(!(
m_íåyLi°
.
back
().
m_œbñLi°
.
em±y
()))

558 
°d
::
li°
<°d::
°rög
>::
ôî©‹
 
œbñIãøt‹
;

560  
	gœbñIãøt‹
=
m_íåyLi°
.
back
().
m_œbñLi°
.
begö
();ÜabñIãøt‹!=m_íåyLi°.back().m_œbñLi°.
íd
();ÜabelIterator++ )

562 if(
	gœbñ
.
com∑ª
(*
œbñIãøt‹
) == 0)

567 
	gm_íåyLi°
.
back
().
	gm_œbñLi°
.
push_back
(
œbñ
);

570 
	gcuobjdumpIn°Li°
::
	$£tC⁄°Mem‹yM≠
(c⁄° * 
kî√ ame
, 
ödex
){

571 
°d
::
°rög
 
kî√l
 = 
kî√ ame
;

572 
kî√l
 = kî√l.
	`sub°r
(14, kî√l.
	`Àngth
()-1);

573 
kî√l
 = kî√l.
	`sub°r
(0, kî√l.
	`föd
("\t"));

574 
	`¥ötf
("Sëtög kî√lcmemm≠[%s]=%d\n", 
kî√l
.
	`c_°r
(), 
ödex
);

575 
kî√lcmemm≠
[
kî√l
] = 
ödex
;

576 
	}
}

578 
	gcuobjdumpIn°Li°
::
	$£tLoˇlMem‹yM≠
(c⁄° * 
kî√ ame
, 
ödex
){

579 
°d
::
°rög
 
kî√l
 = 
kî√ ame
;

580 
kî√l
 = kî√l.
	`sub°r
(10, kî√l.
	`Àngth
()-1);

581 
kî√l
 = kî√l.
	`sub°r
(0, kî√l.
	`föd
("\t"));

582 
	`¥ötf
("Sëtög kî√Œmemm≠[%s]=%d\n", 
kî√l
.
	`c_°r
(), 
ödex
);

583 
kî√Œmemm≠
[
kî√l
] = 
ödex
;

584 
	}
}

588 
	gcuobjdumpIn°Li°
::
	$ªvî£C⁄°Mem‹y
() {

589 
tŸÆ
 = 
kî√lcmemm≠
.
	`size
();

590  
°d
::
m≠
<°d::
°rög
,>::
ôî©‹
 
ôî
 = 
kî√lcmemm≠
.
	`begö
();

591 
ôî
 !
kî√lcmemm≠
.
	`íd
();

592 
ôî
++){

593 (*
ôî
).
£c⁄d
 = 
tŸÆ
 - (*iter).second;

595 
	}
}

599 
	gcuobjdumpIn°Li°
::
	$addE¡ryC⁄°Mem‹y
(
ödex
, 
íåyIndex
)

601 
c⁄°Mem‹y
 
√wC⁄°Mem
;

602 
√wC⁄°Mem
.
ödex
 = index;

603 
√wC⁄°Mem
.
íåyIndex
 =ÉntryIndex;

604 
m_c⁄°Mem‹yLi°
.
	`push_back
(
√wC⁄°Mem
);

605 
	}
}

607 
	gcuobjdumpIn°Li°
::
	$addE¡ryC⁄°Mem‹y2
(* 
kî√ ame
)

609 
°d
::
°rög
 
kî√l
 = 
kî√ ame
;

610 
kî√l
 = kî√l.
	`sub°r
(14, kî√l.
	`Àngth
()-1);

611 
kî√l
 = kî√l.
	`sub°r
(0, kî√l.
	`föd
("\t"));

612 
c⁄°Mem‹y2
 
√wC⁄°Mem2
;

613 
√wC⁄°Mem2
.
kî√l
 = 
	`°rdup
(kî√l.
	`c_°r
());

614 
m_c⁄°Mem‹yLi°2
.
	`push_back
(
√wC⁄°Mem2
);

615 
	}
}

617 
	gcuobjdumpIn°Li°
::
	$addE¡ryLoˇlMem‹y
(
vÆue
, 
íåyIndex
)

619 
loˇlMem‹y
 
√wLoˇlMem
;

620 
√wLoˇlMem
.
vÆue
 = value;

621 
√wLoˇlMem
.
íåyIndex
 =ÉntryIndex;

622 
m_loˇlMem‹yLi°
.
	`push_back
(
√wLoˇlMem
);

623 
	}
}

625 
	gcuobjdumpIn°Li°
::
	$£tKî√lCou¡
(
k
){

626 
m_kî√lCou¡
 = 
k
;

627 
	}
}

629 
	gcuobjdumpIn°Li°
::
	$¥ötCuobjdumpIn°Li°
()

632 
°d
::
li°
<
cuobjdumpE¡ry
>::
ôî©‹
 
e
;

633 
e
=
m_íåyLi°
.
	`begö
();É!=m_íåyLi°.
	`íd
(); ++e) {

638  
°d
::
li°
<
cuobjdumpIn°
>::
ôî©‹
 
cuºítIn°
=
e
->
m_ö°Li°
.
	`begö
();

639 
cuºítIn°
!=
e
->
m_ö°Li°
.
	`íd
();

640 ++
cuºítIn°
) {

642 
	`ouçut
("\t");

643 
cuºítIn°
->
	`¥ötCuobjdumpIn°
();

644 
	`ouçut
("\n");

647 
	}
}

649 
	gcuobjdumpIn°Li°
::
	$¥ötCuobjdumpLoˇlMem‹y
()

651  
°d
::
li°
<
loˇlMem‹y
>::
ôî©‹
 
i
=
m_loˇlMem‹yLi°
.
	`begö
();

652 
i
!=
m_loˇlMem‹yLi°
.
	`íd
();

653 ++
i
) {

654 
löe
[40];

657 
	`•rötf
(
löe
, ".loˇ».b8Ü%d[%d];\n", 
i
->
íåyIndex
, i->
vÆue
);

658 
	`ouçut
(
löe
);

661 
	}
}

663 
	gcuobjdumpIn°Li°
::
	$¥ötCuobjdumpPtxPlusLi°
(
cuobjdumpIn°Li°
* 
hódîInfo
)

665 
	`ouçut
("\n");

666 
	`¥ötMem‹y
();

667 
	`¥ötCuobjdumpLoˇlMem‹y
();

669 
°d
::
li°
<
cuobjdumpE¡ry
>::
ªvî£_ôî©‹
 
e
;

670 
e
=
m_íåyLi°
.
	`rbegö
();É!=m_íåyLi°.
	`ªnd
(); ++e) {

672 
	`ouçut
("\n");

676 
cuobjdumpE¡ry
 
hódîE¡ry
;

678 if–
hódîInfo
->
	`födE¡ry
(
e
->
m_íåyName
, 
hódîE¡ry
) ) {

680 
°d
::
li°
<
cuobjdumpIn°
>::
ôî©‹
 
hódîIn°Iãr
;

681 
hódîIn°Iãr
=
hódîE¡ry
.
m_ö°Li°
.
	`begö
();

682 
hódîIn°Iãr
!=
hódîE¡ry
.
m_ö°Li°
.
	`íd
();

683 ++
hódîIn°Iãr
) {

684 if(
hódîIn°Iãr
!=
hódîE¡ry
.
m_ö°Li°
.
	`begö
()) {

685 
	`ouçut
("\t");

687 
hódîIn°Iãr
->
	`¥ötHódîPtx
();

688 
	`ouçut
("\n");

690 
	`ouçut
("{\n");

694 if(
e
->
m_íåyName
 == "__cuda_dummy_entry__") {

695 
	`ouçut
(".entry ");

696 
	`ouçut
("__cuda_dummy_entry__");

697 
	`ouçut
("\n");

698 
	`ouçut
("{\n");

700 
	`ouçut
("Mismatch inÉntryÇames between cuobjdump outputánd originalÖtx file.\n");

701 
	`as£π
(0);

704 
	`as£π
–&*
e
 !
NULL
);

705 
	`¥ötRegNames
(*
e
);

706 
	`¥ötPªdNames
(*
e
);

707 
	`¥ötOutOfBoundRegi°îs
(*
e
);

708 
	`ouçut
("\n");

710 
°d
::
li°
<
cuobjdumpIn°
>::
ôî©‹
 
cuºítIn°
=
e
->
m_ö°Li°
.
	`begö
(); cuºítIn°!Û->m_ö°Li°.
	`íd
(); ++currentInst){

713 
	`ouçut
("\t");

715 
cuºítIn°
->
	`¥ötCuobjdumpPtxPlus
(
e
->
m_œbñLi°
, 
this
->
m_ªÆTexLi°
);

716 
	`ouçut
("\n");

718 
	`ouçut
("\n\tl_exit:Éxit;\n");

719 
	`ouçut
("}\n");

721 
	}
}

723 
	gcuobjdumpIn°Li°
::
	$addC⁄°Mem‹yPå
(c⁄° * 
off£t
, c⁄° * 
size
, c⁄° * 
«me
){

724 
c⁄°Mem‹yPå
 
±r
;

725 
±r
.
off£t
 = 
	`©oi
(offset);

726 
±r
.
byãs
 = 
	`©oi
(
size
);

727 
±r
.
«me
 =Çame;

728 
±r
.
de°ö©i⁄
 = "constant0";

729 
m_c⁄°Mem‹yPåLi°
.
	`push_back
(
±r
);

730 
	`¥ötf
("\«ddC⁄°Mem‹yPå: %s, size: %d, off£t: %d\n", 
±r
.
«me
.
	`c_°r
(),Öå.
byãs
,Öå.
off£t
);

731 
	}
}

	@cuobjdump_to_ptxplus/cuobjdumpInstList.h

28 #i‚de‡
_CUOBJDUMPINSTLIST_H_


29 
	#_CUOBJDUMPINSTLIST_H_


	)

32 
	~<li°
>

33 
	~<m≠
>

34 
	~<°rög
>

37 
	~"cuobjdumpIn°.h
"

40 
	sc⁄°Mem‹y


42 
	mödex
;

43 
	míåyIndex
;

44 c⁄° * 
	mty≥
;

45 
	m°d
::
li°
<
°d
::
°rög
> 
m_c⁄°Mem‹y
;

48 
	sc⁄°Mem‹y2


50 c⁄° * 
	mkî√l
;

51 c⁄° * 
	mty≥
;

52 
	m°d
::
li°
<
°d
::
°rög
> 
m_c⁄°Mem‹y
;

56 
	sc⁄°Mem‹yPå


58 
	mbyãs
;

59 
	m°d
::
°rög
 
«me
;

61 
	m°d
::
°rög
 
de°ö©i⁄
;

62 
	moff£t
;

66 
	sglobÆMem‹y


68 
	moff£t
;

69 
	mbyãs
;

70 
	m°d
::
°rög
 
«me
;

73 
	scuobjdumpE¡ry


76 
	m°d
::
°rög
 
m_íåyName
;

77 
	m°d
::
li°
<
cuobjdumpIn°
> 
m_ö°Li°
;

80 
	mm_œrge°RegIndex
;

81 
	mm_œrge°OfsRegIndex
;

82 
boﬁ
 
	mm_ªg124
;

83 
boﬁ
 
	mm_‹eg127
;

86 
	mm_œrge°PªdIndex
;

89 
	mm_lMemSize
;

92 
	m°d
::
li°
<
°d
::
°rög
> 
m_œbñLi°
;

95 
	m°d
::
m≠
<
°d
::
°rög
, > 
	mm_›PîCy˛eHi°ogøm
;

99 
	sloˇlMem‹y


101 
	mvÆue
;

102 
	míåyIndex
;

105 ˛as†
	ccuobjdumpIn°Li°


107 
	m¥Ÿe˘ed
:

108 
°d
::
li°
<
cuobjdumpE¡ry
> 
m_íåyLi°
;

109 
	m°d
::
li°
<
c⁄°Mem‹y
> 
m_c⁄°Mem‹yLi°
;

110 
	m°d
::
li°
<
c⁄°Mem‹y2
> 
m_c⁄°Mem‹yLi°2
;

111 
	m°d
::
li°
<
globÆMem‹y
> 
m_globÆMem‹yLi°
;

113 
	mm_kî√lCou¡
;

114 
	m°d
::
m≠
<
°d
::
°rög
,>
	mkî√lcmemm≠
;

115 
	m°d
::
m≠
<
°d
::
°rög
,>
	mkî√Œmemm≠
;

116 
	m°d
::
li°
<
loˇlMem‹y
> 
m_loˇlMem‹yLi°
;

117 
	m°d
::
li°
<
°d
::
°rög
> 
m_ªÆTexLi°
;

118 
	m°d
::
li°
<
c⁄°Mem‹yPå
> 
m_c⁄°Mem‹yPåLi°
;

121 
	m°d
::
°rög
 
∑r£CuobjdumpPªdiˇã
(
°d
::°rög 
¥ed
);

122 
¥ötMem‹y
();

124 
¥ötRegNames
(
cuobjdumpE¡ry
 
íåy
);

125 
¥ötOutOfBoundRegi°îs
(
cuobjdumpE¡ry
 
íåy
);

128 
¥ötPªdNames
(
cuobjdumpE¡ry
 
íåy
);

129 
	mpublic
:

131 
cuobjdumpIn°Li°
();

133 
cuobjdumpIn°
 
gëLi°End
();

136 
addE¡ry
(
°d
::
°rög
 
íåyName
);

137 
add
(
cuobjdumpIn°
* 
√wIn°
);

138 
addC⁄°Mem‹y
(
ödex
);

139 
addTex
(
°d
::
°rög
 
ãx
);

140 
boﬁ
 
födE¡ry
(
°d
::
°rög
 
íåyName
, 
cuobjdumpE¡ry
& 
íåy
);

142 
£tKî√lCou¡
(
k
);

143 
ªadC⁄°Mem‹yFromElfFûe
(
°d
::
°rög
 
ñf
);

144 
£tLa°E¡ryName
(
°d
::
°rög
 
íåyName
);

145 
addCuobjdumpRegi°î
(
°d
::
°rög
 
ªg
, 
boﬁ
 
lo
=
Ál£
);

146 
addCuobjdumpMem‹yO≥ønd
(
°d
::
°rög
 
mem
, 
memTy≥
);

147 
	m°d
::
°rög
 
∑r£CuobjdumpRegi°î
(
°d
::°rög 
ªg
, 
boﬁ
 
lo
, 
ve˘‹Fœg
);

148 
addCuobjdumpDoubÀPªdReg
(
°d
::
°rög
 
¥ed
, std::°rög 
ªg
, 
boﬁ
 
lo
=
Ál£
);

150 
addCubojdumpLabñ
(
°d
::
°rög
 
œbñ
);

152 
addE¡ryC⁄°Mem‹y
(
ödex
, 
íåyIndex
);

153 
addE¡ryC⁄°Mem‹y2
(* 
kî√l
);

154 
£tC⁄°Mem‹yTy≥
(c⁄° * 
ty≥
);

155 
£tC⁄°Mem‹yTy≥2
(c⁄° * 
ty≥
);

156 
addC⁄°Mem‹yVÆue
(
°d
::
°rög
 
c⁄°Mem‹yVÆue
);

157 
addC⁄°Mem‹yVÆue2
(
°d
::
°rög
 
c⁄°Mem‹yVÆue
);

158 
addC⁄°Mem‹yPå
(c⁄° * 
byãs
, c⁄° * 
off£t
, c⁄° * 
«me
);

159 
£tC⁄°Mem‹yM≠
(c⁄° * 
kî√ ame
, 
ödex
);

160 
£tLoˇlMem‹yM≠
(c⁄° * 
kî√ ame
, 
ödex
);

161 
ªvî£C⁄°Mem‹y
();

162 
addE¡ryLoˇlMem‹y
(
vÆue
, 
íåyIndex
);

163 
ªadOthîC⁄°Mem‹yFromBöFûe
(
°d
::
°rög
 
böSåög
);

164 
	m°d
::
li°
<
°d
::
°rög
> 
gëRólTexLi°
();

165 
£tRólTexLi°
(
°d
::
li°
<°d::
°rög
> 
ªÆTexLi°
);

166 
¥ötHódîIn°Li°
();

167 
¥ötCuobjdumpLoˇlMem‹y
();

168 
¥ötCuobjdumpIn°Li°
();

169 
¥ötCuobjdumpPtxPlusLi°
(
cuobjdumpIn°Li°
* 
hódîInfo
);

	@cuobjdump_to_ptxplus/cuobjdump_to_ptxplus.cc

28 
	~<io°ªam
>

29 
	~<°dio.h
>

30 
	~<f°ªam
>

31 
	~<ˇs£π
>

33 
	~"cuobjdumpIn°Li°.h
"

35 
usög
 
«me•a˚
 
	g°d
;

37 
cuobjdumpIn°Li°
 *
	gg_ö°Li°
 = 
√w
 cuobjdumpInstList();

38 
cuobjdumpIn°Li°
 *
	gg_hódîLi°
 = 
√w
 cuobjdumpInstList();

40 
ßss_∑r£
();

41 "C" 
FILE
 *
ßss_ö
;

43 
±x_∑r£
();

44 "C" 
FILE
 *
±x_ö
;

46 
ñf_∑r£
();

47 "C" 
FILE
 *
ñf_ö
;

49 
g_îr‹_dëe˘ed
;

51 
FILE
 *
	gbö_ö
;

52 
FILE
 *
	g±x∂us_out
;

54 
	$ouçut
(c⁄° * 
ãxt
)

56 
	`¥ötf
(
ãxt
);

57 
	`Ârötf
(
±x∂us_out
, 
ãxt
);

58 
	}
}

60 
ouçut
(c⁄° 
°d
::
°rög
 
ãxt
) {

61 
ouçut
(
ãxt
.
c_°r
());

64 
	g°d
::
°rög
 
	$fûeToSåög
(c⁄° * 
fûeName
) {

65 
if°ªam
 
	`fûeSåóm
(
fûeName
, 
ios
::
ö
);

66 
°rög
 
ãxt
, 
löe
;

67 
	`gëlöe
(
fûeSåóm
,
löe
)) {

68 
ãxt
 +(
löe
 + "\n");

70 
fûeSåóm
.
	`˛o£
();

71  
ãxt
;

72 
	}
}

74 
	g°d
::
°rög
 
exåa˘Fûíame
–c⁄° 
°d
::°rög& 
∑th
 )

76  
∑th
.
sub°r
–∑th.
föd_œ°_of
( '/' ) +1 );

79 
	$maö
(
¨gc
, * 
¨gv
[])

81 if(
¨gc
 != 5)

83 
cout
 << "Ußge: " << 
¨gv
[0] << "Ötxfile sassfileÉlffileÖtxplusfile(output)\n";

87 
°rög
 
±xfûe
 = 
¨gv
[1];

88 
°rög
 
ßssfûe
 = 
¨gv
[2];

89 
°rög
 
ñffûe
 = 
¨gv
[3];

90 
°rög
 
±x∂usfûe
 = 
¨gv
[4];

92 
ßss_ö
 = 
	`f›í
(
ßssfûe
.
	`c_°r
(), "r" );

93 
±x_ö
 = 
	`f›í
(
±xfûe
.
	`c_°r
(), "r" );

94 
ñf_ö
 = 
	`f›í
(
ñffûe
.
	`c_°r
(), "r");

95 
±x∂us_out
 = 
	`f›í
(
±x∂usfûe
.
	`c_°r
(), "w" );

98 
°d
::
°rög
 
ñf
 = 
	`fûeToSåög
(
ñffûe
.
	`c_°r
());

100 
	`¥ötf
("RUNNING cuobjdump_to_ptxplus ...\n");

103 
	`¥ötf
("P¨sög .ñ‡fûê%s\n", 
ñffûe
.
	`c_°r
());

104 
	`ñf_∑r£
();

105 
	`¥ötf
("FöishedÖ¨sög .ñ‡fûê%s\n", 
ñffûe
.
	`c_°r
());

108 
	`¥ötf
("P¨sög .±x fûê%s\n", 
±xfûe
.
	`c_°r
());

109 
	`±x_∑r£
();

110 i‡(
g_îr‹_dëe˘ed
){

111 
	`as£π
(0 && "ptxÖarsing failed");

113 
	`¥ötf
("FöishedÖ¨sög .±x fûê%s\n", 
±xfûe
.
	`c_°r
());

116 
g_ö°Li°
->
	`£tRólTexLi°
(
g_hódîLi°
->
	`gëRólTexLi°
());

122 
	`¥ötf
("P¨sög .ßs†fûê%s\n", 
ßssfûe
.
	`c_°r
());

123 
	`ßss_∑r£
();

124 
	`¥ötf
("FöishedÖ¨sög .ßs†fûê%s\n", 
ßssfûe
.
	`c_°r
());

127 
	`ouçut
("//HEADER\n");

128 
g_hódîLi°
->
	`¥ötHódîIn°Li°
();

129 
	`ouçut
("//END HEADER\n\n\n");

130 
	`ouçut
("//INSTRUCTIONS\n");

131 
g_ö°Li°
->
	`¥ötCuobjdumpPtxPlusLi°
(
g_hódîLi°
);

132 
	`ouçut
("//END INSTRUCTIONS\n");

134 
	`f˛o£
(
ßss_ö
);

135 
	`f˛o£
(
±x_ö
);

137 
	`f˛o£
(
±x∂us_out
);

139 
	`¥ötf
("DONE. \n");

142 
	}
}

	@cuobjdump_to_ptxplus/elf.l

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~"ñf_∑r£r.hh
"

35 
	#yylvÆ
 
ñf_lvÆ


	)

37 
ñf_îr‹
(const *);

40 %
›ti⁄
 
noyywøp


41 %
›ti⁄
 
yylöío


42 %
›ti⁄
 
nou≈ut


44 %
x
 
cmem


45 %
x
 
symèb


47 
whôe•a˚
 [ \
t
]

48 
√wlöe
 [\
n
]

49 
nŸ√wlöe
 [^\
n
]

50 
√wlöes
 {
√wlöe
}+

51 
idít
 [[:
Ænum
:]
_
\.]

52 
hexdigô
 [[:
digô
:]
abcdef
]

53 %% /* 
	$yyÀx
 */

55 <
cmem
,
INITIAL
>\.
nv
\.
c⁄°™t1
\.{
nŸ√wlöe
}*{
√wlöe
} {

56 
	`BEGIN
(
cmem
);

57 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

58  
C1BEGIN
;

61 <
cmem
,
INITIAL
>\.
nv
\.
loˇl
{
nŸ√wlöe
}*{
√wlöe
} {

62 
	`BEGIN
(
INITIAL
);

63 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

64  
LOCALMEM
;

67 <
cmem
,
INITIAL
>\.
nv
\.
c⁄°™t0
{
nŸ√wlöe
}*{
√wlöe
} {

68 
	`BEGIN
(
cmem
);

69  
C0BEGIN
;

73 \.
£˘i⁄
" "\.
symèb
\
tSYMTAB
{
√wlöe
} {

74 
	`BEGIN
(
symèb
);

75  
STBEGIN
;

78 \.
£˘i⁄
{
nŸ√wlöe
}*{
√wlöe
} {

82 <
cmem
,
INITIAL
>\.{
nŸ√wlöe
}*{
√wlöe
} {

83 
	`BEGIN
(
INITIAL
);

86 {
nŸ√wlöe
}*{
√wlöe
} {

90 <
cmem
>" "{
√wlöe
}? {

92  
SPACE2
;

95 <
cmem
>0x[0-9a-
fA
-
F
]{8} {

97 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

98  
CMEMVAL
;

101 <
symèb
>{
whôe•a˚
}*[[:
Æpha
:]]+{whôe•a˚}+[[:Æpha:]]+{whôe•a˚}+[[:Æpha:]]+{whôe•a˚}+[[:Æpha:]]+{whôe•a˚}+[[:Æpha:]]+{whôe•a˚}+[[:Æpha:]]+{whôe•a˚}+[[:Æpha:]]+{whôe•a˚}+{
√wlöe
} {

102  
STHEADER
;

105 <
symèb
>{
whôe•a˚
}+ {}

107 <
symèb
>{
√wlöe
} {}

109 <
symèb
>{
hexdigô
}+ {

110 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

111  
NUMBER
;

114 <
symèb
>{
idít
}+ {

115 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

116  
IDENTIFIER
;

119 <
symèb
>{
√wlöe
}{
whôe•a˚
}*{newline}{whitespace}* {

120 
	`BEGIN
(
INITIAL
);

123 <<
EOF
>>  0;

126 . 
	`ñf_îr‹
("InvalidÅoken");

128 
	}
%%

129 
	$ñf_îr‹
(c⁄° * 
mesßge
)

131 
	`¥ötf
(" ");

132 
	`¥ötf
(
mesßge
);

133 
	`¥ötf
("Çear \"");

134 
	`¥ötf
(
yyãxt
);

135 
	`¥ötf
("\"");

136 
	`¥ötf
(" onÜine ");

137 
löe
[5];

138 
	`•rötf
(
löe
, "%i", 
yylöío
);

139 
	`¥ötf
(
löe
);

140 
	`¥ötf
("\n");

141 
	`ab‹t
();

142 
	}
}

	@cuobjdump_to_ptxplus/elf.y

30 
	~<°dio.h
>

31 
	~"cuobjdumpIn°Li°.h
"

33 
yyÀx
();

34 
yyîr‹
(const *);

38 
cuobjdumpIn°Li°
 *
g_ö°Li°
;

39 
	gcmemcou¡
=1;

40 
	glmemcou¡
=1;

41 
boﬁ
 
	gœ°cmem
 = 
Ál£
;

44 * 
°rög_vÆue
;

46 %
tokí
 <
°rög_vÆue
> 
C1BEGIN
 
CMEMVAL
 
SPACE2
 
C0BEGIN
 
STBEGIN
 
STHEADER


47 %
tokí
 <
°rög_vÆue
> 
NUMBER
 
HEXNUMBER
 
IDENTIFIER
 
LOCALMEM


49 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

51 
ñffûe
 : 
symèb
 
¥ogøm


54 
symèb
 : 
STBEGIN
 
STHEADER
 
°c⁄ã¡


57 
°c⁄ã¡
 : stc⁄ã¡ 
°löe


58 | 
°löe
;

60 
°löe
 : 
NUMBER
 NUMBER NUMBER NUMBER NUMBER NUMBER 
IDENTIFIER
 {

61 i‡(
	`°rcmp
(
$4
, "11")==0) {

62 
g_ö°Li°
->
	`addC⁄°Mem‹yPå
(
$2
, 
$3
, 
$7
);

65 | 
NUMBER
 NUMBER NUMBER NUMBER NUMBER NUMBER {}

68 
¥ogøm
 :Örogøm 
cmem£˘i⁄


69 | 
¥ogøm
 
loˇlmem£˘i⁄


71 
g_ö°Li°
->
	`£tKî√lCou¡
(
cmemcou¡
-1);

75 
loˇlmem£˘i⁄
 : 
LOCALMEM
 {

76 
	`¥ötf
("Found LoˇlMem se˘i⁄Çumbî %d\n", 
lmemcou¡
);

77 
g_ö°Li°
->
	`addE¡ryLoˇlMem‹y
(0, 
lmemcou¡
);

78 
g_ö°Li°
->
	`£tLoˇlMem‹yM≠
(
$1
, 
lmemcou¡
);

79 
lmemcou¡
++;

82 
cmem£˘i⁄
 : 
C1BEGIN
 {

83 
	`¥ötf
("Found C⁄°Mem se˘i⁄Çumbî %d\n", 
cmemcou¡
);

85 
g_ö°Li°
->
	`addE¡ryC⁄°Mem‹y2
(
$1
);

86 
g_ö°Li°
->
	`£tC⁄°Mem‹yTy≥2
(".u32");

89 
cmemcou¡
++;

90 
œ°cmem
 = 
åue
;

91 } 
cmemvÆs


92 | 
C0BEGIN
 {

93 
	`¥ötf
("Found ConstMem c0 section\n");

94 
g_ö°Li°
->
	`addC⁄°Mem‹y
(0);

95 
g_ö°Li°
->
	`£tC⁄°Mem‹yTy≥
(".u32");

96 
œ°cmem
 = 
Ál£
;

97 } 
cmemvÆs
;

99 
cmemvÆs
 : cmemvÆ†
CMEMVAL
 
SPACE2
 {

101 
	`¥ötf
("addC⁄°Mem‹yVÆuê%s\n", 
$3
);

102 i‡(
œ°cmem
)

103 
g_ö°Li°
->
	`addC⁄°Mem‹yVÆue2
(
$3
);

105 
g_ö°Li°
->
	`addC⁄°Mem‹yVÆue
(
$3
);

108 
	}
%%

	@cuobjdump_to_ptxplus/elf_lexer.cc

5 
	#YY_INT_ALIGNED
 

	)

9 
	#yy_¸óã_buf„r
 
ñf__¸óã_buf„r


	)

10 
	#yy_dñëe_buf„r
 
ñf__dñëe_buf„r


	)

11 
	#yy_Êex_debug
 
ñf__Êex_debug


	)

12 
	#yy_öô_buf„r
 
ñf__öô_buf„r


	)

13 
	#yy_Êush_buf„r
 
ñf__Êush_buf„r


	)

14 
	#yy_lﬂd_buf„r_°©e
 
ñf__lﬂd_buf„r_°©e


	)

15 
	#yy_swôch_to_buf„r
 
ñf__swôch_to_buf„r


	)

16 
	#yyö
 
ñf_ö


	)

17 
	#yyÀng
 
ñf_Àng


	)

18 
	#yyÀx
 
ñf_Àx


	)

19 
	#yylöío
 
ñf_löío


	)

20 
	#yyout
 
ñf_out


	)

21 
	#yyª°¨t
 
ñf_ª°¨t


	)

22 
	#yyãxt
 
ñf_ãxt


	)

23 
	#yywøp
 
ñf_wøp


	)

24 
	#yyÆloc
 
ñf_Æloc


	)

25 
	#yyªÆloc
 
ñf_ªÆloc


	)

26 
	#yy‰ì
 
ñf_‰ì


	)

28 
	#FLEX_SCANNER


	)

29 
	#YY_FLEX_MAJOR_VERSION
 2

	)

30 
	#YY_FLEX_MINOR_VERSION
 5

	)

31 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

32 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

33 
	#FLEX_BETA


	)

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<°dlib.h
>

48 #i‚de‡
FLEXINT_H


49 
	#FLEXINT_H


	)

53 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

58 #i‚de‡
__STDC_LIMIT_MACROS


59 
	#__STDC_LIMIT_MACROS
 1

	)

62 
	~<öây≥s.h
>

63 
öt8_t
 
	tÊex_öt8_t
;

64 
uöt8_t
 
	tÊex_uöt8_t
;

65 
öt16_t
 
	tÊex_öt16_t
;

66 
uöt16_t
 
	tÊex_uöt16_t
;

67 
öt32_t
 
	tÊex_öt32_t
;

68 
uöt32_t
 
	tÊex_uöt32_t
;

70 sig√d 
	tÊex_öt8_t
;

71 
	tÊex_öt16_t
;

72 
	tÊex_öt32_t
;

73 
	tÊex_uöt8_t
;

74 
	tÊex_uöt16_t
;

75 
	tÊex_uöt32_t
;

79 #i‚de‡
INT8_MIN


80 
	#INT8_MIN
 (-128)

	)

82 #i‚de‡
INT16_MIN


83 
	#INT16_MIN
 (-32767-1)

	)

85 #i‚de‡
INT32_MIN


86 
	#INT32_MIN
 (-2147483647-1)

	)

88 #i‚de‡
INT8_MAX


89 
	#INT8_MAX
 (127)

	)

91 #i‚de‡
INT16_MAX


92 
	#INT16_MAX
 (32767)

	)

94 #i‚de‡
INT32_MAX


95 
	#INT32_MAX
 (2147483647)

	)

97 #i‚de‡
UINT8_MAX


98 
	#UINT8_MAX
 (255U)

	)

100 #i‚de‡
UINT16_MAX


101 
	#UINT16_MAX
 (65535U)

	)

103 #i‚de‡
UINT32_MAX


104 
	#UINT32_MAX
 (4294967295U)

	)

109 #ifde‡
__˝lu•lus


112 
	#YY_USE_CONST


	)

117 #i‡
deföed
 (
__STDC__
)

119 
	#YY_USE_CONST


	)

124 #ifde‡
YY_USE_CONST


125 
	#yyc⁄°
 c⁄°

	)

127 
	#yyc⁄°


	)

131 
	#YY_NULL
 0

	)

138 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

144 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

150 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

151 
	#YYSTATE
 
YY_START


	)

154 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

157 
	#YY_NEW_FILE
 
	`ñf_ª°¨t
(
ñf_ö
 )

	)

159 
	#YY_END_OF_BUFFER_CHAR
 0

	)

162 #i‚de‡
YY_BUF_SIZE


163 
	#YY_BUF_SIZE
 16384

	)

168 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

170 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


171 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

172 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

175 
ñf_Àng
;

177 
FILE
 *
ñf_ö
, *
ñf_out
;

179 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

180 
	#EOB_ACT_END_OF_FILE
 1

	)

181 
	#EOB_ACT_LAST_MATCH
 2

	)

190 
	#YY_LESS_LINENO
(
n
) \

192 
yyl
;\

193  
yyl
 = 
n
; yy»< 
ñf_Àng
; ++yyl )\

194 i‡–
ñf_ãxt
[
yyl
] == '\n' )\

195 --
ñf_löío
;\

196 }0)

	)

199 
	#yyÀss
(
n
) \

203 
yyÀss_ma¸o_¨g
 = (
n
); \

204 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

205 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

206 
YY_RESTORE_YY_MORE_OFFSET
 \

207 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

208 
YY_DO_BEFORE_ACTION
; \

210  0 )

	)

212 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

214 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


215 
	#YY_TYPEDEF_YY_SIZE_T


	)

216 
size_t
 
	tyy_size_t
;

219 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


220 
	#YY_STRUCT_YY_BUFFER_STATE


	)

221 
	syy_buf„r_°©e


223 
FILE
 *
	myy_öput_fûe
;

225 *
	myy_ch_buf
;

226 *
	myy_buf_pos
;

231 
yy_size_t
 
	myy_buf_size
;

236 
	myy_n_ch¨s
;

242 
	myy_is_our_buf„r
;

249 
	myy_is_öãø˘ive
;

255 
	myy_©_bﬁ
;

257 
	myy_bs_löío
;

258 
	myy_bs_cﬁumn
;

263 
	myy_fûl_buf„r
;

265 
	myy_buf„r_°©us
;

267 
	#YY_BUFFER_NEW
 0

	)

268 
	#YY_BUFFER_NORMAL
 1

	)

279 
	#YY_BUFFER_EOF_PENDING
 2

	)

285 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

286 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

287 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

295 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

296 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

297 : 
NULL
)

	)

302 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

305 
	gyy_hﬁd_ch¨
;

306 
	gyy_n_ch¨s
;

307 
	gñf_Àng
;

310 *
	gyy_c_buf_p
 = (*) 0;

311 
	gyy_öô
 = 0;

312 
	gyy_°¨t
 = 0;

317 
	gyy_did_buf„r_swôch_⁄_eof
;

319 
ñf_ª°¨t
 (
FILE
 *
öput_fûe
 );

320 
ñf__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

321 
YY_BUFFER_STATE
 
ñf__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

322 
ñf__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
ñf__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

324 
ñf_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

325 
ñf_p›_buf„r_°©e
 ();

327 
ñf_ísuª_buf„r_°ack
 ();

328 
ñf__lﬂd_buf„r_°©e
 ();

329 
ñf__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

331 
	#YY_FLUSH_BUFFER
 
	`ñf__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

333 
YY_BUFFER_STATE
 
ñf__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

334 
YY_BUFFER_STATE
 
ñf__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

335 
YY_BUFFER_STATE
 
ñf__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

337 *
ñf_Æloc
 (
yy_size_t
 );

338 *
ñf_ªÆloc
 (*,
yy_size_t
 );

339 
ñf_‰ì
 (* );

341 
	#yy_√w_buf„r
 
ñf__¸óã_buf„r


	)

343 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

345 i‡–! 
YY_CURRENT_BUFFER
 ){ \

346 
	`ñf_ísuª_buf„r_°ack
 (); \

347 
YY_CURRENT_BUFFER_LVALUE
 = \

348 
	`ñf__¸óã_buf„r
(
ñf_ö
,
YY_BUF_SIZE
 ); \

350 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

351 }

	)

353 
	#yy_£t_bﬁ
(
©_bﬁ
) \

355 i‡–! 
YY_CURRENT_BUFFER
 ){\

356 
	`ñf_ísuª_buf„r_°ack
 (); \

357 
YY_CURRENT_BUFFER_LVALUE
 = \

358 
	`ñf__¸óã_buf„r
(
ñf_ö
,
YY_BUF_SIZE
 ); \

360 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

361 }

	)

363 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

367 
	#ñf_wøp
(
n
Ë1

	)

368 
	#YY_SKIP_YYWRAP


	)

370 
	tYY_CHAR
;

372 
FILE
 *
	gñf_ö
 = (FILE *Ë0, *
	gñf_out
 = (FILE *) 0;

374 
	tyy_°©e_ty≥
;

376 
ñf_löío
;

378 
	gñf_löío
 = 1;

380 *
ñf_ãxt
;

381 
	#yyãxt_±r
 
ñf_ãxt


	)

383 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

384 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

385 
yy_gë_√xt_buf„r
 ();

386 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

391 
	#YY_DO_BEFORE_ACTION
 \

392 (
yyãxt_±r
Ë
yy_bp
; \

393 
ñf_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

394 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

395 *
yy_˝
 = '\0'; \

396 (
yy_c_buf_p
Ë
yy_˝
;

	)

398 
	#YY_NUM_RULES
 17

	)

399 
	#YY_END_OF_BUFFER
 18

	)

402 
	syy_å™s_öfo


404 
Êex_öt32_t
 
	myy_vîify
;

405 
Êex_öt32_t
 
	myy_nxt
;

407 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[137] =

426 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

458 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[33] =

466 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[166] =

488 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[166] =

510 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[410] =

559 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[410] =

609 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[18] =

613 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

614 *
	gyy_œ°_ac˚±ög_˝os
;

616 
ñf__Êex_debug
;

617 
	gñf__Êex_debug
 = 0;

622 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

623 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

624 
	#YY_MORE_ADJ
 0

	)

625 
	#YY_RESTORE_YY_MORE_OFFSET


	)

626 *
	gñf_ãxt
;

658 
	~<°dio.h
>

659 
	~<°rög.h
>

660 
	~"ñf_∑r£r.hh
"

662 
	#yylvÆ
 
ñf_lvÆ


	)

664 
ñf_îr‹
(const *);

669 
	#INITIAL
 0

	)

670 
	#cmem
 1

	)

671 
	#symèb
 2

	)

673 #i‚de‡
YY_NO_UNISTD_H


678 
	~<uni°d.h
>

681 #i‚de‡
YY_EXTRA_TYPE


682 
	#YY_EXTRA_TYPE
 *

	)

685 
yy_öô_globÆs
 ();

690 
ñf_Àx_de°roy
 ();

692 
ñf_gë_debug
 ();

694 
ñf_£t_debug
 (
debug_Êag
 );

696 
YY_EXTRA_TYPE
 
ñf_gë_exåa
 ();

698 
ñf_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

700 
FILE
 *
ñf_gë_ö
 ();

702 
ñf_£t_ö
 (
FILE
 * 
ö_°r
 );

704 
FILE
 *
ñf_gë_out
 ();

706 
ñf_£t_out
 (
FILE
 * 
out_°r
 );

708 
ñf_gë_Àng
 ();

710 *
ñf_gë_ãxt
 ();

712 
ñf_gë_löío
 ();

714 
ñf_£t_löío
 (
löe_numbî
 );

720 #i‚de‡
YY_SKIP_YYWRAP


721 #ifde‡
__˝lu•lus


722 "C" 
ñf_wøp
 ();

724 
ñf_wøp
 ();

728 #i‚de‡
yyãxt_±r


729 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

732 #ifde‡
YY_NEED_STRLEN


733 
yy_Êex_°æí
 (
yyc⁄°
 * );

736 #i‚de‡
YY_NO_INPUT


738 #ifde‡
__˝lu•lus


739 
yyöput
 ();

741 
öput
 ();

747 #i‚de‡
YY_READ_BUF_SIZE


748 
	#YY_READ_BUF_SIZE
 8192

	)

752 #i‚de‡
ECHO


756 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
ñf_ãxt
, 
ñf_Àng
, 1, 
ñf_out
 )Ë{} } 0)

	)

762 #i‚de‡
YY_INPUT


763 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

764 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

766 
c
 = '*'; \

767 
n
; \

768  
n
 = 0;Ç < 
max_size
 && \

769 (
c
 = 
	`gëc
–
ñf_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

770 
buf
[
n
] = (Ë
c
; \

771 i‡–
c
 == '\n' ) \

772 
buf
[
n
++] = (Ë
c
; \

773 i‡–
c
 =
EOF
 && 
	`„º‹
–
ñf_ö
 ) ) \

774 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

775 
ªsu…
 = 
n
; \

779 
î∫o
=0; \

780  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
ñf_ö
))==0 && 
	`„º‹
(elf_in)) \

782 if–
î∫o
 !
EINTR
) \

784 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

787 
î∫o
=0; \

788 
	`˛óªº
(
ñf_ö
); \

792 

	)

799 #i‚de‡
yyãrmö©e


800 
	#yyãrmö©e
(Ë 
YY_NULL


	)

804 #i‚de‡
YY_START_STACK_INCR


805 
	#YY_START_STACK_INCR
 25

	)

809 #i‚de‡
YY_FATAL_ERROR


810 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

818 #i‚de‡
YY_DECL


819 
	#YY_DECL_IS_OURS
 1

	)

821 
ñf_Àx
 ();

823 
	#YY_DECL
 
	`ñf_Àx
 ()

	)

829 #i‚de‡
YY_USER_ACTION


830 
	#YY_USER_ACTION


	)

834 #i‚de‡
YY_BREAK


835 
	#YY_BREAK
 ;

	)

838 
	#YY_RULE_SETUP
 \

839 
YY_USER_ACTION


	)

843 
	gYY_DECL


845 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

846 *
	gyy_˝
, *
	gyy_bp
;

847 
	gyy_a˘
;

854 i‡–!(
	gyy_öô
) )

856 (
	gyy_öô
) = 1;

858 #ifde‡
YY_USER_INIT


859 
	gYY_USER_INIT
;

862 i‡–! (
	gyy_°¨t
) )

863 (
	gyy_°¨t
) = 1;

865 i‡–! 
	gñf_ö
 )

866 
	gñf_ö
 = 
°dö
;

868 i‡–! 
	gñf_out
 )

869 
	gñf_out
 = 
°dout
;

871 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

872 
ñf_ísuª_buf„r_°ack
 ();

873 
	gYY_CURRENT_BUFFER_LVALUE
 =

874 
ñf__¸óã_buf„r
(
ñf_ö
,
YY_BUF_SIZE
 );

877 
ñf__lﬂd_buf„r_°©e
( );

882 
	gyy_˝
 = (
yy_c_buf_p
);

885 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

890 
	gyy_bp
 = 
yy_˝
;

892 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

893 
	gyy_m©ch
:

896 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

897 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

899 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

900 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

902  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

904 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

905 i‡–
	gyy_cuºít_°©e
 >= 137 )

906 
yy_c
 = 
yy_mëa
[() yy_c];

908 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

909 ++
	gyy_˝
;

911  
	gyy_cuºít_°©e
 != 136 );

912 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

913 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

915 
	gyy_föd_a˘i⁄
:

916 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

918 
	gYY_DO_BEFORE_ACTION
;

920 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

922 
yyl
;

923  
	gyyl
 = 0; yy»< 
	gñf_Àng
; ++yyl )

924 i‡–
	gñf_ãxt
[
yyl
] == '\n' )

926 
ñf_löío
++;

930 
	gdo_a˘i⁄
:

932  
yy_a˘
 )

936 *
yy_˝
 = (
yy_hﬁd_ch¨
);

937 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

938 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

939 
	gyy_föd_a˘i⁄
;

943 
YY_RULE_SETUP


946 
BEGIN
(
cmem
);

947 
	gyylvÆ
.
	g°rög_vÆue
 = 
°rdup
(
ñf_ãxt
);

948  
	gC1BEGIN
;

950 
YY_BREAK


953 
YY_RULE_SETUP


956 
BEGIN
(
INITIAL
);

957 
	gyylvÆ
.
	g°rög_vÆue
 = 
°rdup
(
ñf_ãxt
);

958  
	gLOCALMEM
;

960 
YY_BREAK


963 
YY_RULE_SETUP


966 
BEGIN
(
cmem
);

967  
	gC0BEGIN
;

969 
YY_BREAK


972 
YY_RULE_SETUP


975 
BEGIN
(
symèb
);

976  
	gSTBEGIN
;

978 
YY_BREAK


981 
YY_RULE_SETUP


986 
YY_BREAK


989 
YY_RULE_SETUP


992 
BEGIN
(
INITIAL
);

994 
YY_BREAK


997 
YY_RULE_SETUP


1002 
YY_BREAK


1005 
YY_RULE_SETUP


1009  
SPACE2
;

1011 
YY_BREAK


1013 
YY_RULE_SETUP


1017 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ñf_ãxt
);

1018  
	gCMEMVAL
;

1020 
YY_BREAK


1023 
YY_RULE_SETUP


1026  
STHEADER
;

1028 
YY_BREAK


1030 
YY_RULE_SETUP


1033 
YY_BREAK


1036 
YY_RULE_SETUP


1039 
YY_BREAK


1041 
YY_RULE_SETUP


1044 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ñf_ãxt
);

1045  
	gNUMBER
;

1047 
YY_BREAK


1049 
YY_RULE_SETUP


1052 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ñf_ãxt
);

1053  
	gIDENTIFIER
;

1055 
YY_BREAK


1058 
YY_RULE_SETUP


1061 
BEGIN
(
INITIAL
);

1063 
YY_BREAK


1065 
YY_STATE_EOF
(
INITIAL
):

1066 
YY_STATE_EOF
(
cmem
):

1067 
YY_STATE_EOF
(
symèb
):

1070 
YY_BREAK


1073 
YY_RULE_SETUP


1075 
ñf_îr‹
("InvalidÅoken");

1076 
YY_BREAK


1078 
YY_RULE_SETUP


1080 
ECHO
;

1081 
	gYY_BREAK


1084 
	gYY_END_OF_BUFFER
:

1087 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1090 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1091 
YY_RESTORE_YY_MORE_OFFSET


1093 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1104 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1105 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
ñf_ö
;

1106 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1116 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1118 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1120 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1122 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1133 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1135 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1137 i‡–
	gyy_√xt_°©e
 )

1140 
	gyy_˝
 = ++(
yy_c_buf_p
);

1141 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1142 
	gyy_m©ch
;

1147 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1148 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1149 
	gyy_föd_a˘i⁄
;

1153  
yy_gë_√xt_buf„r
( ) )

1155 
	gEOB_ACT_END_OF_FILE
:

1157 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1159 i‡–
ñf_wøp
( ) )

1170 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1172 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1173 
	gdo_a˘i⁄
;

1178 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1179 
	gYY_NEW_FILE
;

1184 
	gEOB_ACT_CONTINUE_SCAN
:

1185 (
yy_c_buf_p
) =

1186 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1188 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1190 
	gyy_˝
 = (
yy_c_buf_p
);

1191 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1192 
	gyy_m©ch
;

1194 
	gEOB_ACT_LAST_MATCH
:

1195 (
yy_c_buf_p
) =

1196 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1198 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1200 
	gyy_˝
 = (
yy_c_buf_p
);

1201 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1202 
	gyy_föd_a˘i⁄
;

1208 
YY_FATAL_ERROR
(

1221 
	$yy_gë_√xt_buf„r
 ()

1223 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1224 *
sour˚
 = (
yyãxt_±r
);

1225 
numbî_to_move
, 
i
;

1226 
ªt_vÆ
;

1228 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1229 
	`YY_FATAL_ERROR
(

1232 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1234 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1239  
EOB_ACT_END_OF_FILE
;

1247  
EOB_ACT_LAST_MATCH
;

1254 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

1256  
i
 = 0; i < 
numbî_to_move
; ++i )

1257 *(
de°
++Ë*(
sour˚
++);

1259 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1263 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1267 
num_to_ªad
 =

1268 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1270  
num_to_ªad
 <= 0 )

1274 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

1276 
yy_c_buf_p_off£t
 =

1277 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1279 i‡–
b
->
yy_is_our_buf„r
 )

1281 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1283 i‡–
√w_size
 <= 0 )

1284 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1286 
b
->
yy_buf_size
 *= 2;

1288 
b
->
yy_ch_buf
 = (*)

1290 
	`ñf_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

1294 
b
->
yy_ch_buf
 = 0;

1296 i‡–! 
b
->
yy_ch_buf
 )

1297 
	`YY_FATAL_ERROR
(

1300 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1302 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1303 
numbî_to_move
 - 1;

1307 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1308 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1311 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1312 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

1314 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1317 i‡–(
yy_n_ch¨s
) == 0 )

1319 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1321 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1322 
	`ñf_ª°¨t
(
ñf_ö
 );

1327 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1328 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1329 
YY_BUFFER_EOF_PENDING
;

1334 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1336 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1338 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1339 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`ñf_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

1340 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1341 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1344 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1345 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1346 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1348 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1350  
ªt_vÆ
;

1351 
	}
}

1355 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1357 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1358 *
yy_˝
;

1360 
yy_cuºít_°©e
 = (
yy_°¨t
);

1362  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1364 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1365 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1367 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1368 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1370  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1372 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1373 i‡–
yy_cuºít_°©e
 >= 137 )

1374 
yy_c
 = 
yy_mëa
[() yy_c];

1376 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1379  
yy_cuºít_°©e
;

1380 
	}
}

1387 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1389 
yy_is_jam
;

1390 *
yy_˝
 = (
yy_c_buf_p
);

1392 
YY_CHAR
 
yy_c
 = 1;

1393 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1395 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1396 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1398  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1400 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1401 i‡–
yy_cuºít_°©e
 >= 137 )

1402 
yy_c
 = 
yy_mëa
[() yy_c];

1404 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1405 
yy_is_jam
 = (
yy_cuºít_°©e
 == 136);

1407  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1408 
	}
}

1410 #i‚de‡
YY_NO_INPUT


1411 #ifde‡
__˝lu•lus


1412 
	$yyöput
 ()

1414 
	$öput
 ()

1418 
c
;

1420 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1422 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1428 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1430 *(
yy_c_buf_p
) = '\0';

1434 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

1435 ++(
yy_c_buf_p
);

1437  
	`yy_gë_√xt_buf„r
( ) )

1439 
EOB_ACT_LAST_MATCH
:

1451 
	`ñf_ª°¨t
(
ñf_ö
 );

1455 
EOB_ACT_END_OF_FILE
:

1457 i‡–
	`ñf_wøp
( ) )

1458  
EOF
;

1460 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1461 
YY_NEW_FILE
;

1462 #ifde‡
__˝lu•lus


1463  
	`yyöput
();

1465  
	`öput
();

1469 
EOB_ACT_CONTINUE_SCAN
:

1470 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1476 
c
 = *(*Ë(
yy_c_buf_p
);

1477 *(
yy_c_buf_p
) = '\0';

1478 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1480 i‡–
c
 == '\n' )

1482 
ñf_löío
++;

1485  
c
;

1486 
	}
}

1494 
	$ñf_ª°¨t
 (
FILE
 * 
öput_fûe
 )

1497 i‡–! 
YY_CURRENT_BUFFER
 ){

1498 
	`ñf_ísuª_buf„r_°ack
 ();

1499 
YY_CURRENT_BUFFER_LVALUE
 =

1500 
	`ñf__¸óã_buf„r
(
ñf_ö
,
YY_BUF_SIZE
 );

1503 
	`ñf__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

1504 
	`ñf__lﬂd_buf„r_°©e
( );

1505 
	}
}

1511 
	$ñf__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1519 
	`ñf_ísuª_buf„r_°ack
 ();

1520 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1523 i‡–
YY_CURRENT_BUFFER
 )

1526 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1527 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1528 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1531 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1532 
	`ñf__lﬂd_buf„r_°©e
( );

1539 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1540 
	}
}

1542 
	$ñf__lﬂd_buf„r_°©e
 ()

1544 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1545 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1546 
ñf_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1547 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1548 
	}
}

1556 
YY_BUFFER_STATE
 
	$ñf__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1558 
YY_BUFFER_STATE
 
b
;

1560 
b
 = (
YY_BUFFER_STATE
Ë
	`ñf_Æloc
(–
yy_buf„r_°©e
 ) );

1561 i‡–! 
b
 )

1562 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉlf__create_buffer()" );

1564 
b
->
yy_buf_size
 = 
size
;

1569 
b
->
yy_ch_buf
 = (*Ë
	`ñf_Æloc
(b->
yy_buf_size
 + 2 );

1570 i‡–! 
b
->
yy_ch_buf
 )

1571 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉlf__create_buffer()" );

1573 
b
->
yy_is_our_buf„r
 = 1;

1575 
	`ñf__öô_buf„r
(
b
,
fûe
 );

1577  
b
;

1578 
	}
}

1584 
	$ñf__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1587 i‡–! 
b
 )

1590 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1591 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1593 i‡–
b
->
yy_is_our_buf„r
 )

1594 
	`ñf_‰ì
((*Ë
b
->
yy_ch_buf
 );

1596 
	`ñf_‰ì
((*Ë
b
 );

1597 
	}
}

1599 #i‚de‡
__˝lu•lus


1600 
ißây
 ();

1607 
	$ñf__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1610 
€ºno
 = 
î∫o
;

1612 
	`ñf__Êush_buf„r
(
b
 );

1614 
b
->
yy_öput_fûe
 = 
fûe
;

1615 
b
->
yy_fûl_buf„r
 = 1;

1621 i‡(
b
 !
YY_CURRENT_BUFFER
){

1622 
b
->
yy_bs_löío
 = 1;

1623 
b
->
yy_bs_cﬁumn
 = 0;

1626 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1628 
î∫o
 = 
€ºno
;

1629 
	}
}

1635 
	$ñf__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1637 i‡–! 
b
 )

1640 
b
->
yy_n_ch¨s
 = 0;

1646 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1647 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1649 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1651 
b
->
yy_©_bﬁ
 = 1;

1652 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1654 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1655 
	`ñf__lﬂd_buf„r_°©e
( );

1656 
	}
}

1664 
	$ñf_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1666 i‡(
√w_buf„r
 =
NULL
)

1669 
	`ñf_ísuª_buf„r_°ack
();

1672 i‡–
YY_CURRENT_BUFFER
 )

1675 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1676 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1677 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1681 i‡(
YY_CURRENT_BUFFER
)

1682 (
yy_buf„r_°ack_t›
)++;

1683 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1686 
	`ñf__lﬂd_buf„r_°©e
( );

1687 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1688 
	}
}

1694 
	$ñf_p›_buf„r_°©e
 ()

1696 i‡(!
YY_CURRENT_BUFFER
)

1699 
	`ñf__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1700 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1701 i‡((
yy_buf„r_°ack_t›
) > 0)

1702 --(
yy_buf„r_°ack_t›
);

1704 i‡(
YY_CURRENT_BUFFER
) {

1705 
	`ñf__lﬂd_buf„r_°©e
( );

1706 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1708 
	}
}

1713 
	$ñf_ísuª_buf„r_°ack
 ()

1715 
num_to_Æloc
;

1717 i‡(!(
yy_buf„r_°ack
)) {

1723 
num_to_Æloc
 = 1;

1724 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
ñf_Æloc


1725 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1727 i‡–! (
yy_buf„r_°ack
) )

1728 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉlf_ensure_buffer_stack()" );

1730 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1732 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1733 (
yy_buf„r_°ack_t›
) = 0;

1737 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1740 
grow_size
 = 8 ;

1742 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1743 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
ñf_ªÆloc


1744 ((
yy_buf„r_°ack
),

1745 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1747 i‡–! (
yy_buf„r_°ack
) )

1748 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉlf_ensure_buffer_stack()" );

1751 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1752 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1754 
	}
}

1762 
YY_BUFFER_STATE
 
	$ñf__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1764 
YY_BUFFER_STATE
 
b
;

1766 i‡–
size
 < 2 ||

1767 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1768 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1772 
b
 = (
YY_BUFFER_STATE
Ë
	`ñf_Æloc
(–
yy_buf„r_°©e
 ) );

1773 i‡–! 
b
 )

1774 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉlf__scan_buffer()" );

1776 
b
->
yy_buf_size
 = 
size
 - 2;

1777 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1778 
b
->
yy_is_our_buf„r
 = 0;

1779 
b
->
yy_öput_fûe
 = 0;

1780 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1781 
b
->
yy_is_öãø˘ive
 = 0;

1782 
b
->
yy_©_bﬁ
 = 1;

1783 
b
->
yy_fûl_buf„r
 = 0;

1784 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1786 
	`ñf__swôch_to_buf„r
(
b
 );

1788  
b
;

1789 
	}
}

1799 
YY_BUFFER_STATE
 
	$ñf__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

1802  
	`ñf__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

1803 
	}
}

1812 
YY_BUFFER_STATE
 
	$ñf__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

1814 
YY_BUFFER_STATE
 
b
;

1815 *
buf
;

1816 
yy_size_t
 
n
;

1817 
i
;

1820 
n
 = 
_yybyãs_Àn
 + 2;

1821 
buf
 = (*Ë
	`ñf_Æloc
(
n
 );

1822 i‡–! 
buf
 )

1823 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉlf__scan_bytes()" );

1825  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1826 
buf
[
i
] = 
yybyãs
[i];

1828 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1830 
b
 = 
	`ñf__sˇn_buf„r
(
buf
,
n
 );

1831 i‡–! 
b
 )

1832 
	`YY_FATAL_ERROR
( "bad buffer inÉlf__scan_bytes()" );

1837 
b
->
yy_is_our_buf„r
 = 1;

1839  
b
;

1840 
	}
}

1842 #i‚de‡
YY_EXIT_FAILURE


1843 
	#YY_EXIT_FAILURE
 2

	)

1846 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

1848 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1849 
	`exô
–
YY_EXIT_FAILURE
 );

1850 
	}
}

1854 #unde‡
yyÀss


1855 
	#yyÀss
(
n
) \

1859 
yyÀss_ma¸o_¨g
 = (
n
); \

1860 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1861 
ñf_ãxt
[
ñf_Àng
] = (
yy_hﬁd_ch¨
); \

1862 (
yy_c_buf_p
Ë
ñf_ãxt
 + 
yyÀss_ma¸o_¨g
; \

1863 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1864 *(
yy_c_buf_p
) = '\0'; \

1865 
ñf_Àng
 = 
yyÀss_ma¸o_¨g
; \

1867  0 )

	)

1874 
	$ñf_gë_löío
 ()

1877  
ñf_löío
;

1878 
	}
}

1883 
FILE
 *
	$ñf_gë_ö
 ()

1885  
ñf_ö
;

1886 
	}
}

1891 
FILE
 *
	$ñf_gë_out
 ()

1893  
ñf_out
;

1894 
	}
}

1899 
	$ñf_gë_Àng
 ()

1901  
ñf_Àng
;

1902 
	}
}

1908 *
	$ñf_gë_ãxt
 ()

1910  
ñf_ãxt
;

1911 
	}
}

1917 
	$ñf_£t_löío
 (
löe_numbî
 )

1920 
ñf_löío
 = 
löe_numbî
;

1921 
	}
}

1929 
	$ñf_£t_ö
 (
FILE
 * 
ö_°r
 )

1931 
ñf_ö
 = 
ö_°r
 ;

1932 
	}
}

1934 
	$ñf_£t_out
 (
FILE
 * 
out_°r
 )

1936 
ñf_out
 = 
out_°r
 ;

1937 
	}
}

1939 
	$ñf_gë_debug
 ()

1941  
ñf__Êex_debug
;

1942 
	}
}

1944 
	$ñf_£t_debug
 (
bdebug
 )

1946 
ñf__Êex_debug
 = 
bdebug
 ;

1947 
	}
}

1949 
	$yy_öô_globÆs
 ()

1956 
ñf_löío
 = 1;

1958 (
yy_buf„r_°ack
) = 0;

1959 (
yy_buf„r_°ack_t›
) = 0;

1960 (
yy_buf„r_°ack_max
) = 0;

1961 (
yy_c_buf_p
) = (*) 0;

1962 (
yy_öô
) = 0;

1963 (
yy_°¨t
) = 0;

1966 #ifde‡
YY_STDINIT


1967 
ñf_ö
 = 
°dö
;

1968 
ñf_out
 = 
°dout
;

1970 
ñf_ö
 = (
FILE
 *) 0;

1971 
ñf_out
 = (
FILE
 *) 0;

1978 
	}
}

1981 
	$ñf_Àx_de°roy
 ()

1985 
YY_CURRENT_BUFFER
){

1986 
	`ñf__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1987 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1988 
	`ñf_p›_buf„r_°©e
();

1992 
	`ñf_‰ì
((
yy_buf„r_°ack
) );

1993 (
yy_buf„r_°ack
Ë
NULL
;

1997 
	`yy_öô_globÆs
( );

2000 
	}
}

2006 #i‚de‡
yyãxt_±r


2007 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

2009 
i
;

2010  
i
 = 0; i < 
n
; ++i )

2011 
s1
[
i
] = 
s2
[i];

2012 
	}
}

2015 #ifde‡
YY_NEED_STRLEN


2016 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

2018 
n
;

2019  
n
 = 0; 
s
[n]; ++n )

2022  
n
;

2023 
	}
}

2026 *
	$ñf_Æloc
 (
yy_size_t
 
size
 )

2028  (*Ë
	`mÆloc
–
size
 );

2029 
	}
}

2031 *
	$ñf_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

2040  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2041 
	}
}

2043 
	$ñf_‰ì
 (* 
±r
 )

2045 
	`‰ì
–(*Ë
±r
 );

2046 
	}
}

2048 
	#YYTABLES_NAME
 "yyèbÀs"

	)

2053 
	$ñf_îr‹
(c⁄° * 
mesßge
)

2055 
	`¥ötf
(" ");

2056 
	`¥ötf
(
mesßge
);

2057 
	`¥ötf
("Çear \"");

2058 
	`¥ötf
(
ñf_ãxt
);

2059 
	`¥ötf
("\"");

2060 
	`¥ötf
(" onÜine ");

2061 
löe
[5];

2062 
	`•rötf
(
löe
, "%i", 
ñf_löío
);

2063 
	`¥ötf
(
löe
);

2064 
	`¥ötf
("\n");

2065 
	`ab‹t
();

2066 
	}
}

	@cuobjdump_to_ptxplus/elf_parser.cc

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
ñf_∑r£


	)

68 
	#yyÀx
 
ñf_Àx


	)

69 
	#yyîr‹
 
ñf_îr‹


	)

70 
	#yylvÆ
 
ñf_lvÆ


	)

71 
	#yych¨
 
ñf_ch¨


	)

72 
	#yydebug
 
ñf_debug


	)

73 
	#yy√ºs
 
ñf_√ºs


	)

81 
	~<°dio.h
>

82 
	~"cuobjdumpIn°Li°.h
"

84 
yyÀx
();

85 
yyîr‹
(const *);

89 
cuobjdumpIn°Li°
 *
g_ö°Li°
;

90 
	gcmemcou¡
=1;

91 
	glmemcou¡
=1;

92 
boﬁ
 
	gœ°cmem
 = 
Ál£
;

99 #i‚de‡
YYDEBUG


100 
	#YYDEBUG
 1

	)

104 #ifde‡
YYERROR_VERBOSE


105 #unde‡
YYERROR_VERBOSE


106 
	#YYERROR_VERBOSE
 1

	)

108 
	#YYERROR_VERBOSE
 0

	)

112 #i‚de‡
YYTOKEN_TABLE


113 
	#YYTOKEN_TABLE
 0

	)

118 #i‚de‡
YYTOKENTYPE


119 
	#YYTOKENTYPE


	)

122 
	eyytokíty≥
 {

123 
	mC1BEGIN
 = 258,

124 
	mCMEMVAL
 = 259,

125 
	mSPACE2
 = 260,

126 
	mC0BEGIN
 = 261,

127 
	mSTBEGIN
 = 262,

128 
	mSTHEADER
 = 263,

129 
	mNUMBER
 = 264,

130 
	mHEXNUMBER
 = 265,

131 
	mIDENTIFIER
 = 266,

132 
	mLOCALMEM
 = 267

138 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


139 
	uYYSTYPE


145 * 
	m°rög_vÆue
;

151 } 
	tYYSTYPE
;

152 
	#YYSTYPE_IS_TRIVIAL
 1

	)

153 
	#yy°y≥
 
YYSTYPE


	)

154 
	#YYSTYPE_IS_DECLARED
 1

	)

168 #ifde‡
YYTYPE_UINT8


169 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

171 
	tyyty≥_uöt8
;

174 #ifde‡
YYTYPE_INT8


175 
YYTYPE_INT8
 
	tyyty≥_öt8
;

176 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

177 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

178 sig√d 
	tyyty≥_öt8
;

180 
	tyyty≥_öt8
;

183 #ifde‡
YYTYPE_UINT16


184 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

186 
	tyyty≥_uöt16
;

189 #ifde‡
YYTYPE_INT16


190 
YYTYPE_INT16
 
	tyyty≥_öt16
;

192 
	tyyty≥_öt16
;

195 #i‚de‡
YYSIZE_T


196 #ifde‡
__SIZE_TYPE__


197 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

198 #ñi‡
deföed
 
size_t


199 
	#YYSIZE_T
 
size_t


	)

200 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

201 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

202 
	~<°ddef.h
>

203 
	#YYSIZE_T
 
size_t


	)

205 
	#YYSIZE_T
 

	)

209 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

211 #i‚de‡
YY_


212 #i‡
YYENABLE_NLS


213 #i‡
ENABLE_NLS


214 
	~<liböé.h
>

215 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

218 #i‚de‡
YY_


219 
	#YY_
(
msgid
Ë
	)
msgid

224 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


225 
	#YYUSE
(
e
Ë((Ë”))

	)

227 
	#YYUSE
(
e
Ë

	)

231 #i‚de‡
löt


232 
	#YYID
(
n
Ë“)

	)

234 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

235 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

237 
	$YYID
 (
yyi
)

240 
	$YYID
 (
yyi
)

241 
yyi
;

244  
yyi
;

245 
	}
}

248 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


252 #ifde‡
YYSTACK_USE_ALLOCA


253 #i‡
YYSTACK_USE_ALLOCA


254 #ifde‡
__GNUC__


255 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

256 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


257 
	~<Æloˇ.h
>

258 #ñi‡
deföed
 
_AIX


259 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

260 #ñi‡
deföed
 
_MSC_VER


261 
	~<mÆloc.h
>

262 
	#Æloˇ
 
_Æloˇ


	)

264 
	#YYSTACK_ALLOC
 
Æloˇ


	)

265 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

266 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

267 
	~<°dlib.h
>

268 #i‚de‡
_STDLIB_H


269 
	#_STDLIB_H
 1

	)

276 #ifde‡
YYSTACK_ALLOC


278 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

279 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


284 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

287 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

288 
	#YYSTACK_FREE
 
YYFREE


	)

289 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


290 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

292 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

293 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

294 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

295 
	~<°dlib.h
>

296 #i‚de‡
_STDLIB_H


297 
	#_STDLIB_H
 1

	)

300 #i‚de‡
YYMALLOC


301 
	#YYMALLOC
 
mÆloc


	)

302 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

303 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

304 *
mÆloc
 (
YYSIZE_T
);

307 #i‚de‡
YYFREE


308 
	#YYFREE
 
‰ì


	)

309 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

310 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

311 
‰ì
 (*);

318 #i‡(! 
deföed
 
yyovîÊow
 \

319 && (! 
deföed
 
	g__˝lu•lus
 \

320 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

323 
	uyyÆloc


325 
yyty≥_öt16
 
	myyss_Æloc
;

326 
YYSTYPE
 
	myyvs_Æloc
;

330 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

334 
	#YYSTACK_BYTES
(
N
) \

335 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

336 + 
YYSTACK_GAP_MAXIMUM
)

	)

340 #i‚de‡
YYCOPY


341 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

342 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

343 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

345 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

348 
YYSIZE_T
 
yyi
; \

349 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

350 (
To
)[
yyi
] = (
From
)[yyi]; \

352 
	`YYID
 (0))

	)

361 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

364 
YYSIZE_T
 
yy√wbyãs
; \

365 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

366 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

367 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

368 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

370 
	`YYID
 (0))

	)

375 
	#YYFINAL
 5

	)

377 
	#YYLAST
 24

	)

380 
	#YYNTOKENS
 13

	)

382 
	#YYNNTS
 11

	)

384 
	#YYNRULES
 17

	)

386 
	#YYNSTATES
 28

	)

389 
	#YYUNDEFTOK
 2

	)

390 
	#YYMAXUTOK
 267

	)

392 
	#YYTRANSLATE
(
YYX
) \

393 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

396 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

427 #i‡
YYDEBUG


430 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

437 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

448 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

455 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


458 c⁄° *c⁄° 
	gyyäame
[] =

467 #ifde‡
YYPRINT


470 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

478 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

485 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

494 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

502 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

510 
	#YYPACT_NINF
 -7

	)

511 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

519 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

529 
	#YYTABLE_NINF
 -1

	)

530 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

537 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

546 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

553 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

554 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

555 
	#YYEMPTY
 (-2)

	)

556 
	#YYEOF
 0

	)

558 
	#YYACCEPT
 
yyac˚±œb


	)

559 
	#YYABORT
 
yyab‹éab


	)

560 
	#YYERROR
 
yyîr‹œb


	)

567 
	#YYFAIL
 
yyîæab


	)

569 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

571 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

573 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

575 
yych¨
 = (
Tokí
); \

576 
yylvÆ
 = (
VÆue
); \

577 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

578 
	`YYPOPSTACK
 (1); \

579 
yybackup
; \

583 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

584 
YYERROR
; \

586 
	`YYID
 (0))

	)

589 
	#YYTERROR
 1

	)

590 
	#YYERRCODE
 256

	)

597 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

598 #i‚de‡
YYLLOC_DEFAULT


599 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

601 i‡(
	`YYID
 (
N
)) \

603 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

604 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

605 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

606 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

610 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

611 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

612 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

613 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

615 
	`YYID
 (0))

	)

623 #i‚de‡
YY_LOCATION_PRINT


624 #i‡
YYLTYPE_IS_TRIVIAL


625 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

626 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

627 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

628 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

630 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

637 #ifde‡
YYLEX_PARAM


638 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

640 
	#YYLEX
 
	`yyÀx
 ()

	)

644 #i‡
YYDEBUG


646 #i‚de‡
YYFPRINTF


647 
	~<°dio.h
>

648 
	#YYFPRINTF
 
Ârötf


	)

651 
	#YYDPRINTF
(
Args
) \

653 i‡(
yydebug
) \

654 
YYFPRINTF
 
Args
; \

655 } 
	`YYID
 (0))

	)

657 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

659 i‡(
yydebug
) \

661 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

662 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

663 
Ty≥
, 
VÆue
); \

664 
	`YYFPRINTF
 (
°dîr
, "\n"); \

666 } 
	`YYID
 (0))

	)

674 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

675 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

677 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

680 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

681 
FILE
 *
yyouçut
;

682 
yyty≥
;

683 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

686 i‡(!
yyvÆuï
)

688 #ifde‡
YYPRINT


689 i‡(
yyty≥
 < 
YYNTOKENS
)

690 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

692 
	`YYUSE
 (
yyouçut
);

694 
yyty≥
)

699 
	}
}

706 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

707 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

709 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

712 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

713 
FILE
 *
yyouçut
;

714 
yyty≥
;

715 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

718 i‡(
yyty≥
 < 
YYNTOKENS
)

719 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

721 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

723 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

724 
	`YYFPRINTF
 (
yyouçut
, ")");

725 
	}
}

732 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

733 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

735 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

738 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

739 
yyty≥_öt16
 *
yybŸtom
;

740 
yyty≥_öt16
 *
yyt›
;

743 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

744 ; 
yybŸtom
 <
yyt›
; yybottom++)

746 
yybŸ
 = *
yybŸtom
;

747 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

749 
	`YYFPRINTF
 (
°dîr
, "\n");

750 
	}
}

752 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

754 i‡(
yydebug
) \

755 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

756 } 
	`YYID
 (0))

	)

763 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

764 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

766 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

769 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

770 
YYSTYPE
 *
yyv•
;

771 
yyruÀ
;

774 
yyƒhs
 = 
yyr2
[
yyruÀ
];

775 
yyi
;

776 
yy o
 = 
yyæöe
[
yyruÀ
];

777 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

778 
yyruÀ
 - 1, 
yy o
);

780 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

782 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

783 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

784 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

786 
	`YYFPRINTF
 (
°dîr
, "\n");

788 
	}
}

790 
	#YY_REDUCE_PRINT
(
RuÀ
) \

792 i‡(
yydebug
) \

793 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

794 } 
	`YYID
 (0))

	)

798 
	gyydebug
;

800 
	#YYDPRINTF
(
Args
)

	)

801 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

802 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

803 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

808 #i‚def 
YYINITDEPTH


809 
	#YYINITDEPTH
 200

	)

819 #i‚de‡
YYMAXDEPTH


820 
	#YYMAXDEPTH
 10000

	)

825 #i‡
YYERROR_VERBOSE


827 #i‚de‡
yy°æí


828 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


829 
	#yy°æí
 
°æí


	)

832 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

833 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

834 
YYSIZE_T


835 
	$yy°æí
 (c⁄° *
yy°r
)

837 
YYSIZE_T


838 
	$yy°æí
 (
yy°r
)

839 c⁄° *
yy°r
;

842 
YYSIZE_T
 
yyÀn
;

843 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

845  
yyÀn
;

846 
	}
}

850 #i‚de‡
yy°p˝y


851 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


852 
	#yy°p˝y
 
°p˝y


	)

856 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

857 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

859 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

862 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

863 *
yyde°
;

864 c⁄° *
yy§c
;

867 *
yyd
 = 
yyde°
;

868 c⁄° *
yys
 = 
yy§c
;

870 (*
yyd
++ = *
yys
++) != '\0')

873  
yyd
 - 1;

874 
	}
}

878 #i‚de‡
yyäamîr


886 
YYSIZE_T


887 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

889 i‡(*
yy°r
 == '"')

891 
YYSIZE_T
 
yyn
 = 0;

892 c⁄° *
yyp
 = 
yy°r
;

895 *++
yyp
)

899 
do_nŸ_°rù_quŸes
;

902 i‡(*++
yyp
 != '\\')

903 
do_nŸ_°rù_quŸes
;

906 i‡(
yyªs
)

907 
yyªs
[
yyn
] = *
yyp
;

908 
yyn
++;

912 i‡(
yyªs
)

913 
yyªs
[
yyn
] = '\0';

914  
yyn
;

916 
do_nŸ_°rù_quŸes
: ;

919 i‡(! 
yyªs
)

920  
	`yy°æí
 (
yy°r
);

922  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

923 
	}
}

933 
YYSIZE_T


934 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

936 
yyn
 = 
yy∑˘
[
yy°©e
];

938 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

942 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

943 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

944 
YYSIZE_T
 
yysize
 = 
yysize0
;

945 
YYSIZE_T
 
yysize1
;

946 
yysize_ovîÊow
 = 0;

947 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

948 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

949 
yyx
;

954 
	`YY_
("syntaxÉrror, unexpected %s");

955 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

956 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

957 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

958 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

960 *
yyfmt
;

961 c⁄° *
yyf
;

962 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

963 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

964 c⁄° 
yy‹
[] = " or %s";

965 
yyf‹m©
[ 
yyu√x≥˘ed


966 +  
yyex≥˘ög
 - 1

967 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

968 * ( 
yy‹
 - 1))];

969 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

973 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

976 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

977 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

978 
yycou¡
 = 1;

980 
yy¨g
[0] = 
yyäame
[
yyty≥
];

981 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

983 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

984 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

986 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

988 
yycou¡
 = 1;

989 
yysize
 = 
yysize0
;

990 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

993 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

994 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

995 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

996 
yysize
 = 
yysize1
;

997 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

998 
yy¥efix
 = 
yy‹
;

1001 
yyf
 = 
	`YY_
(
yyf‹m©
);

1002 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1003 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1004 
yysize
 = 
yysize1
;

1006 i‡(
yysize_ovîÊow
)

1007  
YYSIZE_MAXIMUM
;

1009 i‡(
yyªsu…
)

1014 *
yyp
 = 
yyªsu…
;

1015 
yyi
 = 0;

1016 (*
yyp
 = *
yyf
) != '\0')

1018 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1020 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1021 
yyf
 += 2;

1025 
yyp
++;

1026 
yyf
++;

1030  
yysize
;

1032 
	}
}

1041 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1042 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1044 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1047 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1048 c⁄° *
yymsg
;

1049 
yyty≥
;

1050 
YYSTYPE
 *
yyvÆuï
;

1053 
	`YYUSE
 (
yyvÆuï
);

1055 i‡(!
yymsg
)

1056 
yymsg
 = "Deleting";

1057 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1059 
yyty≥
)

1065 
	}
}

1068 #ifde‡
YYPARSE_PARAM


1069 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1070 
yy∑r£
 (*
YYPARSE_PARAM
);

1072 
yy∑r£
 ();

1075 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1076 
yy∑r£
 ();

1078 
yy∑r£
 ();

1084 
	gyych¨
;

1087 
YYSTYPE
 
	gyylvÆ
;

1090 
	gyy√ºs
;

1098 #ifde‡
YYPARSE_PARAM


1099 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1100 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1102 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1105 
	$yy∑r£
 (
YYPARSE_PARAM
)

1106 *
YYPARSE_PARAM
;

1109 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1110 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1112 
	$yy∑r£
 ()

1115 
	$yy∑r£
 ()

1122 
yy°©e
;

1124 
yyîr°©us
;

1134 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1135 
yyty≥_öt16
 *
yyss
;

1136 
yyty≥_öt16
 *
yys•
;

1139 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1140 
YYSTYPE
 *
yyvs
;

1141 
YYSTYPE
 *
yyv•
;

1143 
YYSIZE_T
 
yy°acksize
;

1145 
yyn
;

1146 
yyªsu…
;

1148 
yytokí
;

1151 
YYSTYPE
 
yyvÆ
;

1153 #i‡
YYERROR_VERBOSE


1155 
yymsgbuf
[128];

1156 *
yymsg
 = 
yymsgbuf
;

1157 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1160 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1164 
yyÀn
 = 0;

1166 
yytokí
 = 0;

1167 
yyss
 = 
yysß
;

1168 
yyvs
 = 
yyvß
;

1169 
yy°acksize
 = 
YYINITDEPTH
;

1171 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1173 
yy°©e
 = 0;

1174 
yyîr°©us
 = 0;

1175 
yy√ºs
 = 0;

1176 
yych¨
 = 
YYEMPTY
;

1182 
yys•
 = 
yyss
;

1183 
yyv•
 = 
yyvs
;

1185 
yy£t°©e
;

1190 
yy√w°©e
:

1193 
yys•
++;

1195 
yy£t°©e
:

1196 *
yys•
 = 
yy°©e
;

1198 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1201 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1203 #ifde‡
yyovîÊow


1208 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1209 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1215 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1216 &
yyss1
, 
yysize
 *  (*
yys•
),

1217 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1218 &
yy°acksize
);

1220 
yyss
 = 
yyss1
;

1221 
yyvs
 = 
yyvs1
;

1224 #i‚de‡
YYSTACK_RELOCATE


1225 
yyexhau°edœb
;

1228 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1229 
yyexhau°edœb
;

1230 
yy°acksize
 *= 2;

1231 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1232 
yy°acksize
 = 
YYMAXDEPTH
;

1235 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1236 
yyÆloc
 *
yy±r
 =

1237 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1238 i‡(! 
yy±r
)

1239 
yyexhau°edœb
;

1240 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1241 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1242 #unde‡
YYSTACK_RELOCATE


1243 i‡(
yyss1
 !
yysß
)

1244 
	`YYSTACK_FREE
 (
yyss1
);

1249 
yys•
 = 
yyss
 + 
yysize
 - 1;

1250 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1252 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1253 (Ë
yy°acksize
));

1255 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1256 
YYABORT
;

1259 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1261 i‡(
yy°©e
 =
YYFINAL
)

1262 
YYACCEPT
;

1264 
yybackup
;

1269 
yybackup
:

1275 
yyn
 = 
yy∑˘
[
yy°©e
];

1276 i‡(
yyn
 =
YYPACT_NINF
)

1277 
yydeÁu…
;

1282 i‡(
yych¨
 =
YYEMPTY
)

1284 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1285 
yych¨
 = 
YYLEX
;

1288 i‡(
yych¨
 <
YYEOF
)

1290 
yych¨
 = 
yytokí
 = 
YYEOF
;

1291 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1295 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1296 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1301 
yyn
 +
yytokí
;

1302 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1303 
yydeÁu…
;

1304 
yyn
 = 
yyèbÀ
[yyn];

1305 i‡(
yyn
 <= 0)

1307 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1308 
yyîæab
;

1309 
yyn
 = -yyn;

1310 
yyªdu˚
;

1315 i‡(
yyîr°©us
)

1316 
yyîr°©us
--;

1319 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1322 
yych¨
 = 
YYEMPTY
;

1324 
yy°©e
 = 
yyn
;

1325 *++
yyv•
 = 
yylvÆ
;

1327 
yy√w°©e
;

1333 
yydeÁu…
:

1334 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1335 i‡(
yyn
 == 0)

1336 
yyîæab
;

1337 
yyªdu˚
;

1343 
yyªdu˚
:

1345 
yyÀn
 = 
yyr2
[
yyn
];

1355 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1358 
	`YY_REDUCE_PRINT
 (
yyn
);

1359 
yyn
)

1366 i‡(
	`°rcmp
((
yyv•
[(4Ë- (7)].
°rög_vÆue
), "11")==0) {

1367 
g_ö°Li°
->
	`addC⁄°Mem‹yPå
((
yyv•
[(2Ë- (7)].
°rög_vÆue
), (yyvsp[(3) - (7)].string_value), (yyvsp[(7) - (7)].string_value));

1384 
g_ö°Li°
->
	`£tKî√lCou¡
(
cmemcou¡
-1);

1394 
	`¥ötf
("Found LoˇlMem se˘i⁄Çumbî %d\n", 
lmemcou¡
);

1395 
g_ö°Li°
->
	`addE¡ryLoˇlMem‹y
(0, 
lmemcou¡
);

1396 
g_ö°Li°
->
	`£tLoˇlMem‹yM≠
((
yyv•
[(1Ë- (1)].
°rög_vÆue
), 
lmemcou¡
);

1397 
lmemcou¡
++;

1406 
	`¥ötf
("Found C⁄°Mem se˘i⁄Çumbî %d\n", 
cmemcou¡
);

1408 
g_ö°Li°
->
	`addE¡ryC⁄°Mem‹y2
((
yyv•
[(1Ë- (1)].
°rög_vÆue
));

1409 
g_ö°Li°
->
	`£tC⁄°Mem‹yTy≥2
(".u32");

1412 
cmemcou¡
++;

1413 
œ°cmem
 = 
åue
;

1422 
	`¥ötf
("Found ConstMem c0 section\n");

1423 
g_ö°Li°
->
	`addC⁄°Mem‹y
(0);

1424 
g_ö°Li°
->
	`£tC⁄°Mem‹yTy≥
(".u32");

1425 
œ°cmem
 = 
Ál£
;

1435 
	`¥ötf
("addC⁄°Mem‹yVÆuê%s\n", (
yyv•
[(3Ë- (3)].
°rög_vÆue
));

1436 i‡(
œ°cmem
)

1437 
g_ö°Li°
->
	`addC⁄°Mem‹yVÆue2
((
yyv•
[(3Ë- (3)].
°rög_vÆue
));

1439 
g_ö°Li°
->
	`addC⁄°Mem‹yVÆue
((
yyv•
[(3Ë- (3)].
°rög_vÆue
));

1449 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1451 
	`YYPOPSTACK
 (
yyÀn
);

1452 
yyÀn
 = 0;

1453 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1455 *++
yyv•
 = 
yyvÆ
;

1461 
yyn
 = 
yyr1
[yyn];

1463 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1464 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1465 
yy°©e
 = 
yyèbÀ
[yystate];

1467 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1469 
yy√w°©e
;

1475 
yyîæab
:

1477 i‡(!
yyîr°©us
)

1479 ++
yy√ºs
;

1480 #i‡! 
YYERROR_VERBOSE


1481 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1484 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1485 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1487 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1488 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1489 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1490 i‡(
yymsg
 !
yymsgbuf
)

1491 
	`YYSTACK_FREE
 (
yymsg
);

1492 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1493 i‡(
yymsg
)

1494 
yymsg_Æloc
 = 
yyÆloc
;

1497 
yymsg
 = 
yymsgbuf
;

1498 
yymsg_Æloc
 =  
yymsgbuf
;

1502 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1504 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1505 
	`yyîr‹
 (
yymsg
);

1509 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1510 i‡(
yysize
 != 0)

1511 
yyexhau°edœb
;

1519 i‡(
yyîr°©us
 == 3)

1524 i‡(
yych¨
 <
YYEOF
)

1527 i‡(
yych¨
 =
YYEOF
)

1528 
YYABORT
;

1532 
	`yyde°ru˘
 ("Error: discarding",

1533 
yytokí
, &
yylvÆ
);

1534 
yych¨
 = 
YYEMPTY
;

1540 
yyîæab1
;

1546 
yyîr‹œb
:

1552 
yyîr‹œb
;

1556 
	`YYPOPSTACK
 (
yyÀn
);

1557 
yyÀn
 = 0;

1558 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1559 
yy°©e
 = *
yys•
;

1560 
yyîæab1
;

1566 
yyîæab1
:

1567 
yyîr°©us
 = 3;

1571 
yyn
 = 
yy∑˘
[
yy°©e
];

1572 i‡(
yyn
 !
YYPACT_NINF
)

1574 
yyn
 +
YYTERROR
;

1575 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1577 
yyn
 = 
yyèbÀ
[yyn];

1578 i‡(0 < 
yyn
)

1584 i‡(
yys•
 =
yyss
)

1585 
YYABORT
;

1588 
	`yyde°ru˘
 ("Error:Öopping",

1589 
yy°os
[
yy°©e
], 
yyv•
);

1590 
	`YYPOPSTACK
 (1);

1591 
yy°©e
 = *
yys•
;

1592 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1595 *++
yyv•
 = 
yylvÆ
;

1599 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1601 
yy°©e
 = 
yyn
;

1602 
yy√w°©e
;

1608 
yyac˚±œb
:

1609 
yyªsu…
 = 0;

1610 
yyªtu∫
;

1615 
yyab‹éab
:

1616 
yyªsu…
 = 1;

1617 
yyªtu∫
;

1619 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1623 
yyexhau°edœb
:

1624 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1625 
yyªsu…
 = 2;

1629 
yyªtu∫
:

1630 i‡(
yych¨
 !
YYEMPTY
)

1631 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1632 
yytokí
, &
yylvÆ
);

1635 
	`YYPOPSTACK
 (
yyÀn
);

1636 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1637 
yys•
 !
yyss
)

1639 
	`yyde°ru˘
 ("Cleanup:Öopping",

1640 
yy°os
[*
yys•
], 
yyv•
);

1641 
	`YYPOPSTACK
 (1);

1643 #i‚de‡
yyovîÊow


1644 i‡(
yyss
 !
yysß
)

1645 
	`YYSTACK_FREE
 (
yyss
);

1647 #i‡
YYERROR_VERBOSE


1648 i‡(
yymsg
 !
yymsgbuf
)

1649 
	`YYSTACK_FREE
 (
yymsg
);

1652  
	`YYID
 (
yyªsu…
);

1653 
	}
}

	@cuobjdump_to_ptxplus/elf_parser.hh

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mC1BEGIN
 = 258,

43 
	mCMEMVAL
 = 259,

44 
	mSPACE2
 = 260,

45 
	mC0BEGIN
 = 261,

46 
	mSTBEGIN
 = 262,

47 
	mSTHEADER
 = 263,

48 
	mNUMBER
 = 264,

49 
	mHEXNUMBER
 = 265,

50 
	mIDENTIFIER
 = 266,

51 
	mLOCALMEM
 = 267

57 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


58 
	uYYSTYPE


64 * 
	m°rög_vÆue
;

70 } 
	tYYSTYPE
;

71 
	#YYSTYPE_IS_TRIVIAL
 1

	)

72 
	#yy°y≥
 
YYSTYPE


	)

73 
	#YYSTYPE_IS_DECLARED
 1

	)

76 
YYSTYPE
 
ñf_lvÆ
;

	@cuobjdump_to_ptxplus/header.l

30 %
›ti⁄
 
noyywøp


31 %
›ti⁄
 
yylöío


32 %
›ti⁄
 
¥efix
="header_"

33 %
›ti⁄
 
nou≈ut


35 
	~<io°ªam
>

36 
	~"hódî_∑r£r.hh
"

37 
	~<°rög.h
>

40 
	#YY_NEVER_INTERACTIVE
 1

	)

42 
hódî_îr‹
(const *);

43 
ouçut
(c⁄° * 
ãxt
);

48 
Æpha
 [
a
-
zA
-
Z
]

49 
numîic
 [0-9]

50 
hexÆpha
 [
A
-
Fa
-
f
]

51 
Æph™um
 ({
Æpha
}|{
numîic
})

52 
hexdigô
 ({
numîic
}|{
hexÆpha
})

53 
whôe•a˚
 [ \
t
]

54 
√wlöe
 [\
n
]

55 
™ych¨buäewlöe
 [^\
n
]

56 
™ych¨
 ({
√wlöe
}|{
™ych¨buäewlöe
})

57 
™ych¨buåightbø˚
 [^"}"]

59 
idítifõr
 ({
Æpha
}({
Æph™um
}|["_$"])*)|([
_$
%]({alphanum}|["_$"])+)

60 
hexlôîÆ
 0[
xX
]{
hexdigô
}+
U
?

61 
o˘lôîÆ
 0[0-7]+
U
?

62 
bölôîÆ
 0[
bB
][01]+
U
?

63 
de˛ôîÆ
 ([1-9][0-9]*
U
?)|0U?

65 %% /* 
	$yyÀx
 */

69 \.
vîsi⁄
  
DOTVERSION
;

70 \.
èrgë
  
DOTTARGET
;

71 \.
íåy
  
DOTENTRY
;

74 \.
∑øm
  
DOTPARAM
;

77 \.
u64
  
DOTU64
;

78 \.
u32
  
DOTU32
;

79 \.
u16
  
DOTU16
;

80 \.
b32
  
DOTB32
;

81 \.
f32
  
DOTF32
;

85 {
idítifõr
} 
hódî_lvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IDENTIFER
;

86 {
de˛ôîÆ
} 
hódî_lvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DECLITERAL
;

89 \– 
LEFTPAREN
;

90 \Ë 
RIGHTPAREN
;

93 {
√wlöe
}+

100 {
whôe•a˚
}+

102 "//"{
™ych¨buäewlöe
}*{
√wlöe
}

105 \.
fûe
{
™ych¨buäewlöe
}*{
√wlöe
}

106 \.{
™ych¨buäewlöe
}*{
√wlöe
}

109 \{{
™ych¨buåightbø˚
}*\}

112 <<
EOF
>>  0;

115 . 
	`hódî_îr‹
("InvalidÅoken");

117 
	}
%%

119 
	$hódî_îr‹
(c⁄° * 
mesßge
)

121 
	`ouçut
(" "); ouçut(
mesßge
); ouçut("Çó∏\""); ouçut(
hódî_ãxt
); output("\"");

122 
	`ouçut
(" onÜine ");

123 
löe
[5]; 
	`•rötf
÷öe, "%i", 
hódî_löío
); 
	`ouçut
(line);

124 
	`ouçut
("\n");

125 
	}
}

	@cuobjdump_to_ptxplus/header.y

30 
	~<io°ªam
>

31 
	~"cuobjdumpIn°Li°.h
"

33 
yyÀx
();

34 
yyîr‹
(const *);

36 
cuobjdumpIn°Li°
 *
g_hódîLi°
;

37 
ouçut
(c⁄° * 
ãxt
);

42 
doubÀ_vÆue
;

43 
Êﬂt_vÆue
;

44 
öt_vÆue
;

45 * 
°rög_vÆue
;

46 * 
±r_vÆue
;

49 %
tokí
 
DOTVERSION


50 %
tokí
 
DOTTARGET


51 %
tokí
 
DOTENTRY


53 %
tokí
 
DOTPARAM


55 %
tokí
 
DOTU64


56 %
tokí
 
DOTU32


57 %
tokí
 
DOTU16


58 %
tokí
 
DOTB32


59 %
tokí
 
DOTF32


61 %
tokí
 <
°rög_vÆue
> 
IDENTIFER


64 %
tokí
 <
°rög_vÆue
> 
DECLITERAL


66 %
tokí
 
LEFTPAREN


67 %
tokí
 
RIGHTPAREN


70 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

73 
¥ogøm
 : 
°©emítLi°
 { 
	`ouçut
("NoÖarsingÉrrors\n"); }

76 
°©emítLi°
 : sèãmítLi° 
°©emít
 { 
	`ouçut
("\n"); }

77 | 
°©emít
 { 
	`ouçut
("\n"); }

80 
°©emít
 : 
compûîDúe˘ive
 
lôîÆ
Üiteral {}

81 | 
compûîDúe˘ive
 
idítifõrLi°
 {}

82 | 
compûîDúe˘ive
 
idítifõrLi°
 
LEFTPAREN
 
∑ømëîLi°
 
RIGHTPAREN
 {}

85 
compûîDúe˘ive
 : 
DOTVERSION
 { 
	`ouçut
(".vîsi⁄"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".vîsi⁄"); 
g_hódîLi°
->
	`add
(instEntry);}

86 | 
DOTTARGET
 { 
	`ouçut
(".èrgë"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".èrgë"); 
g_hódîLi°
->
	`add
(instEntry);}

87 | 
DOTENTRY
 { 
	`ouçut
(".íåy"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".íåy"); 
g_hódîLi°
->
	`add
(instEntry);}

90 
idítifõrLi°
 : idítifõrLi° 
IDENTIFER
 { 
	`ouçut
(" "); ouçut(
$2
); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
($2); }

91 | 
IDENTIFER
 { 
	`ouçut
(" "); ouçut(
$1
); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
($1); }

94 
∑ømëîLi°
 :Ö¨amëîLi° 
∑ømëî


95 | 
∑ømëî


98 
∑ømëî
 : 
°©eS∑˚
 
›Ty≥s
 
IDENTIFER
 { 
	`ouçut
(" "); ouçut(
$3
); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
($3);}

101 
°©eS∑˚
 : 
DOTPARAM
 { 
	`ouçut
("\n.∑øm"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".∑øm"); 
g_hódîLi°
->
	`add
(instEntry); }

104 
›Ty≥s
 : 
DOTU64
 { 
	`ouçut
(".u64"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".u64");}

105 | 
DOTU32
 { 
	`ouçut
(".u32"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".u32");}

106 | 
DOTU16
 { 
	`ouçut
(".u16"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".u16");}

107 | 
DOTB32
 { 
	`ouçut
(".b32"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".b32");}

108 | 
DOTF32
 { 
	`ouçut
(".f32"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".f32");}

111 
lôîÆ
 : 
DECLITERAL
 { 
	`ouçut
(" "); ouçut(
$1
); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
($1); }

114 
	}
%%

	@cuobjdump_to_ptxplus/header_lexer.cc

5 
	#YY_INT_ALIGNED
 

	)

9 
	#yy_¸óã_buf„r
 
hódî__¸óã_buf„r


	)

10 
	#yy_dñëe_buf„r
 
hódî__dñëe_buf„r


	)

11 
	#yy_Êex_debug
 
hódî__Êex_debug


	)

12 
	#yy_öô_buf„r
 
hódî__öô_buf„r


	)

13 
	#yy_Êush_buf„r
 
hódî__Êush_buf„r


	)

14 
	#yy_lﬂd_buf„r_°©e
 
hódî__lﬂd_buf„r_°©e


	)

15 
	#yy_swôch_to_buf„r
 
hódî__swôch_to_buf„r


	)

16 
	#yyö
 
hódî_ö


	)

17 
	#yyÀng
 
hódî_Àng


	)

18 
	#yyÀx
 
hódî_Àx


	)

19 
	#yylöío
 
hódî_löío


	)

20 
	#yyout
 
hódî_out


	)

21 
	#yyª°¨t
 
hódî_ª°¨t


	)

22 
	#yyãxt
 
hódî_ãxt


	)

23 
	#yywøp
 
hódî_wøp


	)

24 
	#yyÆloc
 
hódî_Æloc


	)

25 
	#yyªÆloc
 
hódî_ªÆloc


	)

26 
	#yy‰ì
 
hódî_‰ì


	)

28 
	#FLEX_SCANNER


	)

29 
	#YY_FLEX_MAJOR_VERSION
 2

	)

30 
	#YY_FLEX_MINOR_VERSION
 5

	)

31 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

32 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

33 
	#FLEX_BETA


	)

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<°dlib.h
>

48 #i‚de‡
FLEXINT_H


49 
	#FLEXINT_H


	)

53 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

58 #i‚de‡
__STDC_LIMIT_MACROS


59 
	#__STDC_LIMIT_MACROS
 1

	)

62 
	~<öây≥s.h
>

63 
öt8_t
 
	tÊex_öt8_t
;

64 
uöt8_t
 
	tÊex_uöt8_t
;

65 
öt16_t
 
	tÊex_öt16_t
;

66 
uöt16_t
 
	tÊex_uöt16_t
;

67 
öt32_t
 
	tÊex_öt32_t
;

68 
uöt32_t
 
	tÊex_uöt32_t
;

70 sig√d 
	tÊex_öt8_t
;

71 
	tÊex_öt16_t
;

72 
	tÊex_öt32_t
;

73 
	tÊex_uöt8_t
;

74 
	tÊex_uöt16_t
;

75 
	tÊex_uöt32_t
;

79 #i‚de‡
INT8_MIN


80 
	#INT8_MIN
 (-128)

	)

82 #i‚de‡
INT16_MIN


83 
	#INT16_MIN
 (-32767-1)

	)

85 #i‚de‡
INT32_MIN


86 
	#INT32_MIN
 (-2147483647-1)

	)

88 #i‚de‡
INT8_MAX


89 
	#INT8_MAX
 (127)

	)

91 #i‚de‡
INT16_MAX


92 
	#INT16_MAX
 (32767)

	)

94 #i‚de‡
INT32_MAX


95 
	#INT32_MAX
 (2147483647)

	)

97 #i‚de‡
UINT8_MAX


98 
	#UINT8_MAX
 (255U)

	)

100 #i‚de‡
UINT16_MAX


101 
	#UINT16_MAX
 (65535U)

	)

103 #i‚de‡
UINT32_MAX


104 
	#UINT32_MAX
 (4294967295U)

	)

109 #ifde‡
__˝lu•lus


112 
	#YY_USE_CONST


	)

117 #i‡
deföed
 (
__STDC__
)

119 
	#YY_USE_CONST


	)

124 #ifde‡
YY_USE_CONST


125 
	#yyc⁄°
 c⁄°

	)

127 
	#yyc⁄°


	)

131 
	#YY_NULL
 0

	)

138 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

144 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

150 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

151 
	#YYSTATE
 
YY_START


	)

154 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

157 
	#YY_NEW_FILE
 
	`hódî_ª°¨t
(
hódî_ö
 )

	)

159 
	#YY_END_OF_BUFFER_CHAR
 0

	)

162 #i‚de‡
YY_BUF_SIZE


163 
	#YY_BUF_SIZE
 16384

	)

168 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

170 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


171 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

172 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

175 
hódî_Àng
;

177 
FILE
 *
hódî_ö
, *
hódî_out
;

179 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

180 
	#EOB_ACT_END_OF_FILE
 1

	)

181 
	#EOB_ACT_LAST_MATCH
 2

	)

190 
	#YY_LESS_LINENO
(
n
) \

192 
yyl
;\

193  
yyl
 = 
n
; yy»< 
hódî_Àng
; ++yyl )\

194 i‡–
hódî_ãxt
[
yyl
] == '\n' )\

195 --
hódî_löío
;\

196 }0)

	)

199 
	#yyÀss
(
n
) \

203 
yyÀss_ma¸o_¨g
 = (
n
); \

204 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

205 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

206 
YY_RESTORE_YY_MORE_OFFSET
 \

207 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

208 
YY_DO_BEFORE_ACTION
; \

210  0 )

	)

212 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

214 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


215 
	#YY_TYPEDEF_YY_SIZE_T


	)

216 
size_t
 
	tyy_size_t
;

219 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


220 
	#YY_STRUCT_YY_BUFFER_STATE


	)

221 
	syy_buf„r_°©e


223 
FILE
 *
	myy_öput_fûe
;

225 *
	myy_ch_buf
;

226 *
	myy_buf_pos
;

231 
yy_size_t
 
	myy_buf_size
;

236 
	myy_n_ch¨s
;

242 
	myy_is_our_buf„r
;

249 
	myy_is_öãø˘ive
;

255 
	myy_©_bﬁ
;

257 
	myy_bs_löío
;

258 
	myy_bs_cﬁumn
;

263 
	myy_fûl_buf„r
;

265 
	myy_buf„r_°©us
;

267 
	#YY_BUFFER_NEW
 0

	)

268 
	#YY_BUFFER_NORMAL
 1

	)

279 
	#YY_BUFFER_EOF_PENDING
 2

	)

285 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

286 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

287 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

295 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

296 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

297 : 
NULL
)

	)

302 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

305 
	gyy_hﬁd_ch¨
;

306 
	gyy_n_ch¨s
;

307 
	ghódî_Àng
;

310 *
	gyy_c_buf_p
 = (*) 0;

311 
	gyy_öô
 = 0;

312 
	gyy_°¨t
 = 0;

317 
	gyy_did_buf„r_swôch_⁄_eof
;

319 
hódî_ª°¨t
 (
FILE
 *
öput_fûe
 );

320 
hódî__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

321 
YY_BUFFER_STATE
 
hódî__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

322 
hódî__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
hódî__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

324 
hódî_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

325 
hódî_p›_buf„r_°©e
 ();

327 
hódî_ísuª_buf„r_°ack
 ();

328 
hódî__lﬂd_buf„r_°©e
 ();

329 
hódî__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

331 
	#YY_FLUSH_BUFFER
 
	`hódî__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

333 
YY_BUFFER_STATE
 
hódî__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

334 
YY_BUFFER_STATE
 
hódî__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

335 
YY_BUFFER_STATE
 
hódî__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

337 *
hódî_Æloc
 (
yy_size_t
 );

338 *
hódî_ªÆloc
 (*,
yy_size_t
 );

339 
hódî_‰ì
 (* );

341 
	#yy_√w_buf„r
 
hódî__¸óã_buf„r


	)

343 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

345 i‡–! 
YY_CURRENT_BUFFER
 ){ \

346 
	`hódî_ísuª_buf„r_°ack
 (); \

347 
YY_CURRENT_BUFFER_LVALUE
 = \

348 
	`hódî__¸óã_buf„r
(
hódî_ö
,
YY_BUF_SIZE
 ); \

350 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

351 }

	)

353 
	#yy_£t_bﬁ
(
©_bﬁ
) \

355 i‡–! 
YY_CURRENT_BUFFER
 ){\

356 
	`hódî_ísuª_buf„r_°ack
 (); \

357 
YY_CURRENT_BUFFER_LVALUE
 = \

358 
	`hódî__¸óã_buf„r
(
hódî_ö
,
YY_BUF_SIZE
 ); \

360 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

361 }

	)

363 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

367 
	#hódî_wøp
(
n
Ë1

	)

368 
	#YY_SKIP_YYWRAP


	)

370 
	tYY_CHAR
;

372 
FILE
 *
	ghódî_ö
 = (FILE *Ë0, *
	ghódî_out
 = (FILE *) 0;

374 
	tyy_°©e_ty≥
;

376 
hódî_löío
;

378 
	ghódî_löío
 = 1;

380 *
hódî_ãxt
;

381 
	#yyãxt_±r
 
hódî_ãxt


	)

383 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

384 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

385 
yy_gë_√xt_buf„r
 ();

386 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

391 
	#YY_DO_BEFORE_ACTION
 \

392 (
yyãxt_±r
Ë
yy_bp
; \

393 
hódî_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

394 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

395 *
yy_˝
 = '\0'; \

396 (
yy_c_buf_p
Ë
yy_˝
;

	)

398 
	#YY_NUM_RULES
 23

	)

399 
	#YY_END_OF_BUFFER
 24

	)

402 
	syy_å™s_öfo


404 
Êex_öt32_t
 
	myy_vîify
;

405 
Êex_öt32_t
 
	myy_nxt
;

407 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[78] =

419 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

451 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[41] =

459 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[85] =

472 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[85] =

485 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[165] =

507 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[165] =

530 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[24] =

535 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

536 *
	gyy_œ°_ac˚±ög_˝os
;

538 
hódî__Êex_debug
;

539 
	ghódî__Êex_debug
 = 0;

544 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

545 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

546 
	#YY_MORE_ADJ
 0

	)

547 
	#YY_RESTORE_YY_MORE_OFFSET


	)

548 *
	ghódî_ãxt
;

579 
	~<io°ªam
>

580 
	~"hódî_∑r£r.hh
"

581 
	~<°rög.h
>

584 
	#YY_NEVER_INTERACTIVE
 1

	)

586 
hódî_îr‹
(const *);

587 
ouçut
(c⁄° * 
ãxt
);

591 
	#INITIAL
 0

	)

593 #i‚de‡
YY_NO_UNISTD_H


598 
	~<uni°d.h
>

601 #i‚de‡
YY_EXTRA_TYPE


602 
	#YY_EXTRA_TYPE
 *

	)

605 
yy_öô_globÆs
 ();

610 
hódî_Àx_de°roy
 ();

612 
hódî_gë_debug
 ();

614 
hódî_£t_debug
 (
debug_Êag
 );

616 
YY_EXTRA_TYPE
 
hódî_gë_exåa
 ();

618 
hódî_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

620 
FILE
 *
hódî_gë_ö
 ();

622 
hódî_£t_ö
 (
FILE
 * 
ö_°r
 );

624 
FILE
 *
hódî_gë_out
 ();

626 
hódî_£t_out
 (
FILE
 * 
out_°r
 );

628 
hódî_gë_Àng
 ();

630 *
hódî_gë_ãxt
 ();

632 
hódî_gë_löío
 ();

634 
hódî_£t_löío
 (
löe_numbî
 );

640 #i‚de‡
YY_SKIP_YYWRAP


641 #ifde‡
__˝lu•lus


642 "C" 
hódî_wøp
 ();

644 
hódî_wøp
 ();

648 #i‚de‡
yyãxt_±r


649 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

652 #ifde‡
YY_NEED_STRLEN


653 
yy_Êex_°æí
 (
yyc⁄°
 * );

656 #i‚de‡
YY_NO_INPUT


658 #ifde‡
__˝lu•lus


659 
yyöput
 ();

661 
öput
 ();

667 #i‚de‡
YY_READ_BUF_SIZE


668 
	#YY_READ_BUF_SIZE
 8192

	)

672 #i‚de‡
ECHO


676 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
hódî_ãxt
, 
hódî_Àng
, 1, 
hódî_out
 )Ë{} } 0)

	)

682 #i‚de‡
YY_INPUT


683 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

684 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

686 
c
 = '*'; \

687 
n
; \

688  
n
 = 0;Ç < 
max_size
 && \

689 (
c
 = 
	`gëc
–
hódî_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

690 
buf
[
n
] = (Ë
c
; \

691 i‡–
c
 == '\n' ) \

692 
buf
[
n
++] = (Ë
c
; \

693 i‡–
c
 =
EOF
 && 
	`„º‹
–
hódî_ö
 ) ) \

694 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

695 
ªsu…
 = 
n
; \

699 
î∫o
=0; \

700  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
hódî_ö
))==0 && 
	`„º‹
(header_in)) \

702 if–
î∫o
 !
EINTR
) \

704 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

707 
î∫o
=0; \

708 
	`˛óªº
(
hódî_ö
); \

712 

	)

719 #i‚de‡
yyãrmö©e


720 
	#yyãrmö©e
(Ë 
YY_NULL


	)

724 #i‚de‡
YY_START_STACK_INCR


725 
	#YY_START_STACK_INCR
 25

	)

729 #i‚de‡
YY_FATAL_ERROR


730 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

738 #i‚de‡
YY_DECL


739 
	#YY_DECL_IS_OURS
 1

	)

741 
hódî_Àx
 ();

743 
	#YY_DECL
 
	`hódî_Àx
 ()

	)

749 #i‚de‡
YY_USER_ACTION


750 
	#YY_USER_ACTION


	)

754 #i‚de‡
YY_BREAK


755 
	#YY_BREAK
 ;

	)

758 
	#YY_RULE_SETUP
 \

759 
YY_USER_ACTION


	)

763 
	gYY_DECL


765 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

766 *
	gyy_˝
, *
	gyy_bp
;

767 
	gyy_a˘
;

776 i‡–!(
	gyy_öô
) )

778 (
	gyy_öô
) = 1;

780 #ifde‡
YY_USER_INIT


781 
	gYY_USER_INIT
;

784 i‡–! (
	gyy_°¨t
) )

785 (
	gyy_°¨t
) = 1;

787 i‡–! 
	ghódî_ö
 )

788 
	ghódî_ö
 = 
°dö
;

790 i‡–! 
	ghódî_out
 )

791 
	ghódî_out
 = 
°dout
;

793 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

794 
hódî_ísuª_buf„r_°ack
 ();

795 
	gYY_CURRENT_BUFFER_LVALUE
 =

796 
hódî__¸óã_buf„r
(
hódî_ö
,
YY_BUF_SIZE
 );

799 
hódî__lﬂd_buf„r_°©e
( );

804 
	gyy_˝
 = (
yy_c_buf_p
);

807 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

812 
	gyy_bp
 = 
yy_˝
;

814 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

815 
	gyy_m©ch
:

818 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

819 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

821 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

822 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

824  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

826 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

827 i‡–
	gyy_cuºít_°©e
 >= 78 )

828 
yy_c
 = 
yy_mëa
[() yy_c];

830 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

831 ++
	gyy_˝
;

833  
	gyy_cuºít_°©e
 != 77 );

834 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

835 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

837 
	gyy_föd_a˘i⁄
:

838 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

840 
	gYY_DO_BEFORE_ACTION
;

842 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

844 
yyl
;

845  
	gyyl
 = 0; yy»< 
	ghódî_Àng
; ++yyl )

846 i‡–
	ghódî_ãxt
[
yyl
] == '\n' )

848 
hódî_löío
++;

852 
	gdo_a˘i⁄
:

854  
yy_a˘
 )

858 *
yy_˝
 = (
yy_hﬁd_ch¨
);

859 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

860 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

861 
	gyy_föd_a˘i⁄
;

864 
YY_RULE_SETUP


866  
DOTVERSION
;

867 
YY_BREAK


869 
YY_RULE_SETUP


871  
DOTTARGET
;

872 
YY_BREAK


874 
YY_RULE_SETUP


876  
DOTENTRY
;

877 
YY_BREAK


880 
YY_RULE_SETUP


882  
DOTPARAM
;

883 
YY_BREAK


886 
YY_RULE_SETUP


888  
DOTU64
;

889 
YY_BREAK


891 
YY_RULE_SETUP


893  
DOTU32
;

894 
YY_BREAK


896 
YY_RULE_SETUP


898  
DOTU16
;

899 
YY_BREAK


901 
YY_RULE_SETUP


903  
DOTB32
;

904 
YY_BREAK


906 
YY_RULE_SETUP


908  
DOTF32
;

909 
YY_BREAK


912 
YY_RULE_SETUP


914 
hódî_lvÆ
.
°rög_vÆue
 = 
°rdup
(
hódî_ãxt
);  
	gIDENTIFER
;

915 
YY_BREAK


917 
YY_RULE_SETUP


919 
hódî_lvÆ
.
°rög_vÆue
 = 
°rdup
(
hódî_ãxt
);  
	gDECLITERAL
;

920 
YY_BREAK


923 
YY_RULE_SETUP


925  
LEFTPAREN
;

926 
YY_BREAK


928 
YY_RULE_SETUP


930  
RIGHTPAREN
;

931 
YY_BREAK


935 
YY_RULE_SETUP


938 
YY_BREAK


941 
YY_RULE_SETUP


944 
YY_BREAK


946 
YY_RULE_SETUP


949 
YY_BREAK


952 
YY_RULE_SETUP


955 
YY_BREAK


959 
YY_RULE_SETUP


962 
YY_BREAK


966 
YY_RULE_SETUP


969 
YY_BREAK


972 
YY_RULE_SETUP


975 
YY_BREAK


979 
YY_RULE_SETUP


982 
YY_BREAK


984 
YY_STATE_EOF
(
INITIAL
):

987 
YY_BREAK


990 
YY_RULE_SETUP


992 
hódî_îr‹
("InvalidÅoken");

993 
YY_BREAK


995 
YY_RULE_SETUP


997 
ECHO
;

998 
	gYY_BREAK


1001 
	gYY_END_OF_BUFFER
:

1004 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1007 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1008 
YY_RESTORE_YY_MORE_OFFSET


1010 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1021 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1022 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
hódî_ö
;

1023 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1033 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1035 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1037 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1039 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1050 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1052 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1054 i‡–
	gyy_√xt_°©e
 )

1057 
	gyy_˝
 = ++(
yy_c_buf_p
);

1058 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1059 
	gyy_m©ch
;

1064 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1065 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1066 
	gyy_föd_a˘i⁄
;

1070  
yy_gë_√xt_buf„r
( ) )

1072 
	gEOB_ACT_END_OF_FILE
:

1074 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1076 i‡–
hódî_wøp
( ) )

1087 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1089 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1090 
	gdo_a˘i⁄
;

1095 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1096 
	gYY_NEW_FILE
;

1101 
	gEOB_ACT_CONTINUE_SCAN
:

1102 (
yy_c_buf_p
) =

1103 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1105 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1107 
	gyy_˝
 = (
yy_c_buf_p
);

1108 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1109 
	gyy_m©ch
;

1111 
	gEOB_ACT_LAST_MATCH
:

1112 (
yy_c_buf_p
) =

1113 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1115 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1117 
	gyy_˝
 = (
yy_c_buf_p
);

1118 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1119 
	gyy_föd_a˘i⁄
;

1125 
YY_FATAL_ERROR
(

1138 
	$yy_gë_√xt_buf„r
 ()

1140 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1141 *
sour˚
 = (
yyãxt_±r
);

1142 
numbî_to_move
, 
i
;

1143 
ªt_vÆ
;

1145 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1146 
	`YY_FATAL_ERROR
(

1149 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1151 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1156  
EOB_ACT_END_OF_FILE
;

1164  
EOB_ACT_LAST_MATCH
;

1171 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

1173  
i
 = 0; i < 
numbî_to_move
; ++i )

1174 *(
de°
++Ë*(
sour˚
++);

1176 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1180 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1184 
num_to_ªad
 =

1185 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1187  
num_to_ªad
 <= 0 )

1191 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

1193 
yy_c_buf_p_off£t
 =

1194 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1196 i‡–
b
->
yy_is_our_buf„r
 )

1198 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1200 i‡–
√w_size
 <= 0 )

1201 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1203 
b
->
yy_buf_size
 *= 2;

1205 
b
->
yy_ch_buf
 = (*)

1207 
	`hódî_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

1211 
b
->
yy_ch_buf
 = 0;

1213 i‡–! 
b
->
yy_ch_buf
 )

1214 
	`YY_FATAL_ERROR
(

1217 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1219 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1220 
numbî_to_move
 - 1;

1224 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1225 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1228 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1229 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

1231 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1234 i‡–(
yy_n_ch¨s
) == 0 )

1236 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1238 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1239 
	`hódî_ª°¨t
(
hódî_ö
 );

1244 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1245 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1246 
YY_BUFFER_EOF_PENDING
;

1251 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1253 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1255 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1256 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`hódî_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

1257 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1258 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1261 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1262 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1263 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1265 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1267  
ªt_vÆ
;

1268 
	}
}

1272 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1274 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1275 *
yy_˝
;

1277 
yy_cuºít_°©e
 = (
yy_°¨t
);

1279  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1281 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1282 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1284 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1285 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1287  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1289 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1290 i‡–
yy_cuºít_°©e
 >= 78 )

1291 
yy_c
 = 
yy_mëa
[() yy_c];

1293 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1296  
yy_cuºít_°©e
;

1297 
	}
}

1304 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1306 
yy_is_jam
;

1307 *
yy_˝
 = (
yy_c_buf_p
);

1309 
YY_CHAR
 
yy_c
 = 1;

1310 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1312 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1313 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1315  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1317 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1318 i‡–
yy_cuºít_°©e
 >= 78 )

1319 
yy_c
 = 
yy_mëa
[() yy_c];

1321 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1322 
yy_is_jam
 = (
yy_cuºít_°©e
 == 77);

1324  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1325 
	}
}

1327 #i‚de‡
YY_NO_INPUT


1328 #ifde‡
__˝lu•lus


1329 
	$yyöput
 ()

1331 
	$öput
 ()

1335 
c
;

1337 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1339 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1345 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1347 *(
yy_c_buf_p
) = '\0';

1351 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

1352 ++(
yy_c_buf_p
);

1354  
	`yy_gë_√xt_buf„r
( ) )

1356 
EOB_ACT_LAST_MATCH
:

1368 
	`hódî_ª°¨t
(
hódî_ö
 );

1372 
EOB_ACT_END_OF_FILE
:

1374 i‡–
	`hódî_wøp
( ) )

1375  
EOF
;

1377 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1378 
YY_NEW_FILE
;

1379 #ifde‡
__˝lu•lus


1380  
	`yyöput
();

1382  
	`öput
();

1386 
EOB_ACT_CONTINUE_SCAN
:

1387 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1393 
c
 = *(*Ë(
yy_c_buf_p
);

1394 *(
yy_c_buf_p
) = '\0';

1395 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1397 i‡–
c
 == '\n' )

1399 
hódî_löío
++;

1402  
c
;

1403 
	}
}

1411 
	$hódî_ª°¨t
 (
FILE
 * 
öput_fûe
 )

1414 i‡–! 
YY_CURRENT_BUFFER
 ){

1415 
	`hódî_ísuª_buf„r_°ack
 ();

1416 
YY_CURRENT_BUFFER_LVALUE
 =

1417 
	`hódî__¸óã_buf„r
(
hódî_ö
,
YY_BUF_SIZE
 );

1420 
	`hódî__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

1421 
	`hódî__lﬂd_buf„r_°©e
( );

1422 
	}
}

1428 
	$hódî__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1436 
	`hódî_ísuª_buf„r_°ack
 ();

1437 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1440 i‡–
YY_CURRENT_BUFFER
 )

1443 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1444 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1445 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1448 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1449 
	`hódî__lﬂd_buf„r_°©e
( );

1456 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1457 
	}
}

1459 
	$hódî__lﬂd_buf„r_°©e
 ()

1461 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1462 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1463 
hódî_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1464 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1465 
	}
}

1473 
YY_BUFFER_STATE
 
	$hódî__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1475 
YY_BUFFER_STATE
 
b
;

1477 
b
 = (
YY_BUFFER_STATE
Ë
	`hódî_Æloc
(–
yy_buf„r_°©e
 ) );

1478 i‡–! 
b
 )

1479 
	`YY_FATAL_ERROR
( "out of dynamic memory in header__create_buffer()" );

1481 
b
->
yy_buf_size
 = 
size
;

1486 
b
->
yy_ch_buf
 = (*Ë
	`hódî_Æloc
(b->
yy_buf_size
 + 2 );

1487 i‡–! 
b
->
yy_ch_buf
 )

1488 
	`YY_FATAL_ERROR
( "out of dynamic memory in header__create_buffer()" );

1490 
b
->
yy_is_our_buf„r
 = 1;

1492 
	`hódî__öô_buf„r
(
b
,
fûe
 );

1494  
b
;

1495 
	}
}

1501 
	$hódî__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1504 i‡–! 
b
 )

1507 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1508 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1510 i‡–
b
->
yy_is_our_buf„r
 )

1511 
	`hódî_‰ì
((*Ë
b
->
yy_ch_buf
 );

1513 
	`hódî_‰ì
((*Ë
b
 );

1514 
	}
}

1516 #i‚de‡
__˝lu•lus


1517 
ißây
 ();

1524 
	$hódî__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1527 
€ºno
 = 
î∫o
;

1529 
	`hódî__Êush_buf„r
(
b
 );

1531 
b
->
yy_öput_fûe
 = 
fûe
;

1532 
b
->
yy_fûl_buf„r
 = 1;

1538 i‡(
b
 !
YY_CURRENT_BUFFER
){

1539 
b
->
yy_bs_löío
 = 1;

1540 
b
->
yy_bs_cﬁumn
 = 0;

1543 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1545 
î∫o
 = 
€ºno
;

1546 
	}
}

1552 
	$hódî__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1554 i‡–! 
b
 )

1557 
b
->
yy_n_ch¨s
 = 0;

1563 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1564 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1566 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1568 
b
->
yy_©_bﬁ
 = 1;

1569 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1571 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1572 
	`hódî__lﬂd_buf„r_°©e
( );

1573 
	}
}

1581 
	$hódî_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1583 i‡(
√w_buf„r
 =
NULL
)

1586 
	`hódî_ísuª_buf„r_°ack
();

1589 i‡–
YY_CURRENT_BUFFER
 )

1592 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1593 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1594 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1598 i‡(
YY_CURRENT_BUFFER
)

1599 (
yy_buf„r_°ack_t›
)++;

1600 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1603 
	`hódî__lﬂd_buf„r_°©e
( );

1604 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1605 
	}
}

1611 
	$hódî_p›_buf„r_°©e
 ()

1613 i‡(!
YY_CURRENT_BUFFER
)

1616 
	`hódî__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1617 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1618 i‡((
yy_buf„r_°ack_t›
) > 0)

1619 --(
yy_buf„r_°ack_t›
);

1621 i‡(
YY_CURRENT_BUFFER
) {

1622 
	`hódî__lﬂd_buf„r_°©e
( );

1623 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1625 
	}
}

1630 
	$hódî_ísuª_buf„r_°ack
 ()

1632 
num_to_Æloc
;

1634 i‡(!(
yy_buf„r_°ack
)) {

1640 
num_to_Æloc
 = 1;

1641 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
hódî_Æloc


1642 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1644 i‡–! (
yy_buf„r_°ack
) )

1645 
	`YY_FATAL_ERROR
( "out of dynamic memory in header_ensure_buffer_stack()" );

1647 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1649 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1650 (
yy_buf„r_°ack_t›
) = 0;

1654 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1657 
grow_size
 = 8 ;

1659 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1660 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
hódî_ªÆloc


1661 ((
yy_buf„r_°ack
),

1662 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1664 i‡–! (
yy_buf„r_°ack
) )

1665 
	`YY_FATAL_ERROR
( "out of dynamic memory in header_ensure_buffer_stack()" );

1668 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1669 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1671 
	}
}

1679 
YY_BUFFER_STATE
 
	$hódî__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1681 
YY_BUFFER_STATE
 
b
;

1683 i‡–
size
 < 2 ||

1684 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1685 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1689 
b
 = (
YY_BUFFER_STATE
Ë
	`hódî_Æloc
(–
yy_buf„r_°©e
 ) );

1690 i‡–! 
b
 )

1691 
	`YY_FATAL_ERROR
( "out of dynamic memory in header__scan_buffer()" );

1693 
b
->
yy_buf_size
 = 
size
 - 2;

1694 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1695 
b
->
yy_is_our_buf„r
 = 0;

1696 
b
->
yy_öput_fûe
 = 0;

1697 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1698 
b
->
yy_is_öãø˘ive
 = 0;

1699 
b
->
yy_©_bﬁ
 = 1;

1700 
b
->
yy_fûl_buf„r
 = 0;

1701 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1703 
	`hódî__swôch_to_buf„r
(
b
 );

1705  
b
;

1706 
	}
}

1716 
YY_BUFFER_STATE
 
	$hódî__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

1719  
	`hódî__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

1720 
	}
}

1729 
YY_BUFFER_STATE
 
	$hódî__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

1731 
YY_BUFFER_STATE
 
b
;

1732 *
buf
;

1733 
yy_size_t
 
n
;

1734 
i
;

1737 
n
 = 
_yybyãs_Àn
 + 2;

1738 
buf
 = (*Ë
	`hódî_Æloc
(
n
 );

1739 i‡–! 
buf
 )

1740 
	`YY_FATAL_ERROR
( "out of dynamic memory in header__scan_bytes()" );

1742  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1743 
buf
[
i
] = 
yybyãs
[i];

1745 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1747 
b
 = 
	`hódî__sˇn_buf„r
(
buf
,
n
 );

1748 i‡–! 
b
 )

1749 
	`YY_FATAL_ERROR
( "bad buffer in header__scan_bytes()" );

1754 
b
->
yy_is_our_buf„r
 = 1;

1756  
b
;

1757 
	}
}

1759 #i‚de‡
YY_EXIT_FAILURE


1760 
	#YY_EXIT_FAILURE
 2

	)

1763 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

1765 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1766 
	`exô
–
YY_EXIT_FAILURE
 );

1767 
	}
}

1771 #unde‡
yyÀss


1772 
	#yyÀss
(
n
) \

1776 
yyÀss_ma¸o_¨g
 = (
n
); \

1777 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1778 
hódî_ãxt
[
hódî_Àng
] = (
yy_hﬁd_ch¨
); \

1779 (
yy_c_buf_p
Ë
hódî_ãxt
 + 
yyÀss_ma¸o_¨g
; \

1780 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1781 *(
yy_c_buf_p
) = '\0'; \

1782 
hódî_Àng
 = 
yyÀss_ma¸o_¨g
; \

1784  0 )

	)

1791 
	$hódî_gë_löío
 ()

1794  
hódî_löío
;

1795 
	}
}

1800 
FILE
 *
	$hódî_gë_ö
 ()

1802  
hódî_ö
;

1803 
	}
}

1808 
FILE
 *
	$hódî_gë_out
 ()

1810  
hódî_out
;

1811 
	}
}

1816 
	$hódî_gë_Àng
 ()

1818  
hódî_Àng
;

1819 
	}
}

1825 *
	$hódî_gë_ãxt
 ()

1827  
hódî_ãxt
;

1828 
	}
}

1834 
	$hódî_£t_löío
 (
löe_numbî
 )

1837 
hódî_löío
 = 
löe_numbî
;

1838 
	}
}

1846 
	$hódî_£t_ö
 (
FILE
 * 
ö_°r
 )

1848 
hódî_ö
 = 
ö_°r
 ;

1849 
	}
}

1851 
	$hódî_£t_out
 (
FILE
 * 
out_°r
 )

1853 
hódî_out
 = 
out_°r
 ;

1854 
	}
}

1856 
	$hódî_gë_debug
 ()

1858  
hódî__Êex_debug
;

1859 
	}
}

1861 
	$hódî_£t_debug
 (
bdebug
 )

1863 
hódî__Êex_debug
 = 
bdebug
 ;

1864 
	}
}

1866 
	$yy_öô_globÆs
 ()

1873 
hódî_löío
 = 1;

1875 (
yy_buf„r_°ack
) = 0;

1876 (
yy_buf„r_°ack_t›
) = 0;

1877 (
yy_buf„r_°ack_max
) = 0;

1878 (
yy_c_buf_p
) = (*) 0;

1879 (
yy_öô
) = 0;

1880 (
yy_°¨t
) = 0;

1883 #ifde‡
YY_STDINIT


1884 
hódî_ö
 = 
°dö
;

1885 
hódî_out
 = 
°dout
;

1887 
hódî_ö
 = (
FILE
 *) 0;

1888 
hódî_out
 = (
FILE
 *) 0;

1895 
	}
}

1898 
	$hódî_Àx_de°roy
 ()

1902 
YY_CURRENT_BUFFER
){

1903 
	`hódî__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1904 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1905 
	`hódî_p›_buf„r_°©e
();

1909 
	`hódî_‰ì
((
yy_buf„r_°ack
) );

1910 (
yy_buf„r_°ack
Ë
NULL
;

1914 
	`yy_öô_globÆs
( );

1917 
	}
}

1923 #i‚de‡
yyãxt_±r


1924 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

1926 
i
;

1927  
i
 = 0; i < 
n
; ++i )

1928 
s1
[
i
] = 
s2
[i];

1929 
	}
}

1932 #ifde‡
YY_NEED_STRLEN


1933 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

1935 
n
;

1936  
n
 = 0; 
s
[n]; ++n )

1939  
n
;

1940 
	}
}

1943 *
	$hódî_Æloc
 (
yy_size_t
 
size
 )

1945  (*Ë
	`mÆloc
–
size
 );

1946 
	}
}

1948 *
	$hódî_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

1957  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

1958 
	}
}

1960 
	$hódî_‰ì
 (* 
±r
 )

1962 
	`‰ì
–(*Ë
±r
 );

1963 
	}
}

1965 
	#YYTABLES_NAME
 "yyèbÀs"

	)

1971 
	$hódî_îr‹
(c⁄° * 
mesßge
)

1973 
	`ouçut
(" "); ouçut(
mesßge
); ouçut("Çó∏\""); ouçut(
hódî_ãxt
); output("\"");

1974 
	`ouçut
(" onÜine ");

1975 
löe
[5]; 
	`•rötf
÷öe, "%i", 
hódî_löío
); 
	`ouçut
(line);

1976 
	`ouçut
("\n");

1977 
	}
}

	@cuobjdump_to_ptxplus/header_parser.cc

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
hódî_∑r£


	)

68 
	#yyÀx
 
hódî_Àx


	)

69 
	#yyîr‹
 
hódî_îr‹


	)

70 
	#yylvÆ
 
hódî_lvÆ


	)

71 
	#yych¨
 
hódî_ch¨


	)

72 
	#yydebug
 
hódî_debug


	)

73 
	#yy√ºs
 
hódî_√ºs


	)

81 
	~<io°ªam
>

82 
	~"cuobjdumpIn°Li°.h
"

84 
yyÀx
();

85 
yyîr‹
(const *);

87 
cuobjdumpIn°Li°
 *
g_hódîLi°
;

88 
ouçut
(c⁄° * 
ãxt
);

95 #i‚de‡
YYDEBUG


96 
	#YYDEBUG
 1

	)

100 #ifde‡
YYERROR_VERBOSE


101 #unde‡
YYERROR_VERBOSE


102 
	#YYERROR_VERBOSE
 1

	)

104 
	#YYERROR_VERBOSE
 0

	)

108 #i‚de‡
YYTOKEN_TABLE


109 
	#YYTOKEN_TABLE
 0

	)

114 #i‚de‡
YYTOKENTYPE


115 
	#YYTOKENTYPE


	)

118 
	eyytokíty≥
 {

119 
	mDOTVERSION
 = 258,

120 
	mDOTTARGET
 = 259,

121 
	mDOTENTRY
 = 260,

122 
	mDOTPARAM
 = 261,

123 
	mDOTU64
 = 262,

124 
	mDOTU32
 = 263,

125 
	mDOTU16
 = 264,

126 
	mDOTB32
 = 265,

127 
	mDOTF32
 = 266,

128 
	mIDENTIFER
 = 267,

129 
	mDECLITERAL
 = 268,

130 
	mLEFTPAREN
 = 269,

131 
	mRIGHTPAREN
 = 270

137 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


138 
	uYYSTYPE


144 
	mdoubÀ_vÆue
;

145 
	mÊﬂt_vÆue
;

146 
	möt_vÆue
;

147 * 
	m°rög_vÆue
;

148 * 
	m±r_vÆue
;

154 } 
	tYYSTYPE
;

155 
	#YYSTYPE_IS_TRIVIAL
 1

	)

156 
	#yy°y≥
 
YYSTYPE


	)

157 
	#YYSTYPE_IS_DECLARED
 1

	)

171 #ifde‡
YYTYPE_UINT8


172 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

174 
	tyyty≥_uöt8
;

177 #ifde‡
YYTYPE_INT8


178 
YYTYPE_INT8
 
	tyyty≥_öt8
;

179 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

180 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

181 sig√d 
	tyyty≥_öt8
;

183 
	tyyty≥_öt8
;

186 #ifde‡
YYTYPE_UINT16


187 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

189 
	tyyty≥_uöt16
;

192 #ifde‡
YYTYPE_INT16


193 
YYTYPE_INT16
 
	tyyty≥_öt16
;

195 
	tyyty≥_öt16
;

198 #i‚de‡
YYSIZE_T


199 #ifde‡
__SIZE_TYPE__


200 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

201 #ñi‡
deföed
 
size_t


202 
	#YYSIZE_T
 
size_t


	)

203 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

204 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

205 
	~<°ddef.h
>

206 
	#YYSIZE_T
 
size_t


	)

208 
	#YYSIZE_T
 

	)

212 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

214 #i‚de‡
YY_


215 #i‡
YYENABLE_NLS


216 #i‡
ENABLE_NLS


217 
	~<liböé.h
>

218 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

221 #i‚de‡
YY_


222 
	#YY_
(
msgid
Ë
	)
msgid

227 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


228 
	#YYUSE
(
e
Ë((Ë”))

	)

230 
	#YYUSE
(
e
Ë

	)

234 #i‚de‡
löt


235 
	#YYID
(
n
Ë“)

	)

237 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

238 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

240 
	$YYID
 (
yyi
)

243 
	$YYID
 (
yyi
)

244 
yyi
;

247  
yyi
;

248 
	}
}

251 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


255 #ifde‡
YYSTACK_USE_ALLOCA


256 #i‡
YYSTACK_USE_ALLOCA


257 #ifde‡
__GNUC__


258 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

259 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


260 
	~<Æloˇ.h
>

261 #ñi‡
deföed
 
_AIX


262 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

263 #ñi‡
deföed
 
_MSC_VER


264 
	~<mÆloc.h
>

265 
	#Æloˇ
 
_Æloˇ


	)

267 
	#YYSTACK_ALLOC
 
Æloˇ


	)

268 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

269 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

270 
	~<°dlib.h
>

271 #i‚de‡
_STDLIB_H


272 
	#_STDLIB_H
 1

	)

279 #ifde‡
YYSTACK_ALLOC


281 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

282 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


287 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

290 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

291 
	#YYSTACK_FREE
 
YYFREE


	)

292 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


293 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

295 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

296 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

297 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

298 
	~<°dlib.h
>

299 #i‚de‡
_STDLIB_H


300 
	#_STDLIB_H
 1

	)

303 #i‚de‡
YYMALLOC


304 
	#YYMALLOC
 
mÆloc


	)

305 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

306 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

307 *
mÆloc
 (
YYSIZE_T
);

310 #i‚de‡
YYFREE


311 
	#YYFREE
 
‰ì


	)

312 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

313 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

314 
‰ì
 (*);

321 #i‡(! 
deföed
 
yyovîÊow
 \

322 && (! 
deföed
 
	g__˝lu•lus
 \

323 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

326 
	uyyÆloc


328 
yyty≥_öt16
 
	myyss_Æloc
;

329 
YYSTYPE
 
	myyvs_Æloc
;

333 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

337 
	#YYSTACK_BYTES
(
N
) \

338 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

339 + 
YYSTACK_GAP_MAXIMUM
)

	)

343 #i‚de‡
YYCOPY


344 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

345 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

346 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

348 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

351 
YYSIZE_T
 
yyi
; \

352 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

353 (
To
)[
yyi
] = (
From
)[yyi]; \

355 
	`YYID
 (0))

	)

364 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

367 
YYSIZE_T
 
yy√wbyãs
; \

368 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

369 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

370 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

371 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

373 
	`YYID
 (0))

	)

378 
	#YYFINAL
 8

	)

380 
	#YYLAST
 22

	)

383 
	#YYNTOKENS
 16

	)

385 
	#YYNNTS
 11

	)

387 
	#YYNRULES
 22

	)

389 
	#YYNSTATES
 30

	)

392 
	#YYUNDEFTOK
 2

	)

393 
	#YYMAXUTOK
 270

	)

395 
	#YYTRANSLATE
(
YYX
) \

396 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

399 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

431 #i‡
YYDEBUG


434 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

442 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

453 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

461 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


464 c⁄° *c⁄° 
	gyyäame
[] =

475 #ifde‡
YYPRINT


478 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

486 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

494 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

504 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

512 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

520 
	#YYPACT_NINF
 -13

	)

521 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

529 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

539 
	#YYTABLE_NINF
 -1

	)

540 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

547 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

556 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

563 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

564 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

565 
	#YYEMPTY
 (-2)

	)

566 
	#YYEOF
 0

	)

568 
	#YYACCEPT
 
yyac˚±œb


	)

569 
	#YYABORT
 
yyab‹éab


	)

570 
	#YYERROR
 
yyîr‹œb


	)

577 
	#YYFAIL
 
yyîæab


	)

579 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

581 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

583 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

585 
yych¨
 = (
Tokí
); \

586 
yylvÆ
 = (
VÆue
); \

587 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

588 
	`YYPOPSTACK
 (1); \

589 
yybackup
; \

593 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

594 
YYERROR
; \

596 
	`YYID
 (0))

	)

599 
	#YYTERROR
 1

	)

600 
	#YYERRCODE
 256

	)

607 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

608 #i‚de‡
YYLLOC_DEFAULT


609 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

611 i‡(
	`YYID
 (
N
)) \

613 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

614 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

615 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

616 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

620 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

621 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

622 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

623 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

625 
	`YYID
 (0))

	)

633 #i‚de‡
YY_LOCATION_PRINT


634 #i‡
YYLTYPE_IS_TRIVIAL


635 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

636 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

637 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

638 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

640 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

647 #ifde‡
YYLEX_PARAM


648 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

650 
	#YYLEX
 
	`yyÀx
 ()

	)

654 #i‡
YYDEBUG


656 #i‚de‡
YYFPRINTF


657 
	~<°dio.h
>

658 
	#YYFPRINTF
 
Ârötf


	)

661 
	#YYDPRINTF
(
Args
) \

663 i‡(
yydebug
) \

664 
YYFPRINTF
 
Args
; \

665 } 
	`YYID
 (0))

	)

667 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

669 i‡(
yydebug
) \

671 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

672 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

673 
Ty≥
, 
VÆue
); \

674 
	`YYFPRINTF
 (
°dîr
, "\n"); \

676 } 
	`YYID
 (0))

	)

684 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

685 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

687 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

690 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

691 
FILE
 *
yyouçut
;

692 
yyty≥
;

693 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

696 i‡(!
yyvÆuï
)

698 #ifde‡
YYPRINT


699 i‡(
yyty≥
 < 
YYNTOKENS
)

700 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

702 
	`YYUSE
 (
yyouçut
);

704 
yyty≥
)

709 
	}
}

716 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

717 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

719 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

722 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

723 
FILE
 *
yyouçut
;

724 
yyty≥
;

725 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

728 i‡(
yyty≥
 < 
YYNTOKENS
)

729 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

731 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

733 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

734 
	`YYFPRINTF
 (
yyouçut
, ")");

735 
	}
}

742 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

743 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

745 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

748 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

749 
yyty≥_öt16
 *
yybŸtom
;

750 
yyty≥_öt16
 *
yyt›
;

753 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

754 ; 
yybŸtom
 <
yyt›
; yybottom++)

756 
yybŸ
 = *
yybŸtom
;

757 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

759 
	`YYFPRINTF
 (
°dîr
, "\n");

760 
	}
}

762 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

764 i‡(
yydebug
) \

765 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

766 } 
	`YYID
 (0))

	)

773 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

774 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

776 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

779 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

780 
YYSTYPE
 *
yyv•
;

781 
yyruÀ
;

784 
yyƒhs
 = 
yyr2
[
yyruÀ
];

785 
yyi
;

786 
yy o
 = 
yyæöe
[
yyruÀ
];

787 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

788 
yyruÀ
 - 1, 
yy o
);

790 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

792 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

793 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

794 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

796 
	`YYFPRINTF
 (
°dîr
, "\n");

798 
	}
}

800 
	#YY_REDUCE_PRINT
(
RuÀ
) \

802 i‡(
yydebug
) \

803 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

804 } 
	`YYID
 (0))

	)

808 
	gyydebug
;

810 
	#YYDPRINTF
(
Args
)

	)

811 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

812 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

813 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

818 #i‚def 
YYINITDEPTH


819 
	#YYINITDEPTH
 200

	)

829 #i‚de‡
YYMAXDEPTH


830 
	#YYMAXDEPTH
 10000

	)

835 #i‡
YYERROR_VERBOSE


837 #i‚de‡
yy°æí


838 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


839 
	#yy°æí
 
°æí


	)

842 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

843 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

844 
YYSIZE_T


845 
	$yy°æí
 (c⁄° *
yy°r
)

847 
YYSIZE_T


848 
	$yy°æí
 (
yy°r
)

849 c⁄° *
yy°r
;

852 
YYSIZE_T
 
yyÀn
;

853 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

855  
yyÀn
;

856 
	}
}

860 #i‚de‡
yy°p˝y


861 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


862 
	#yy°p˝y
 
°p˝y


	)

866 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

867 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

869 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

872 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

873 *
yyde°
;

874 c⁄° *
yy§c
;

877 *
yyd
 = 
yyde°
;

878 c⁄° *
yys
 = 
yy§c
;

880 (*
yyd
++ = *
yys
++) != '\0')

883  
yyd
 - 1;

884 
	}
}

888 #i‚de‡
yyäamîr


896 
YYSIZE_T


897 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

899 i‡(*
yy°r
 == '"')

901 
YYSIZE_T
 
yyn
 = 0;

902 c⁄° *
yyp
 = 
yy°r
;

905 *++
yyp
)

909 
do_nŸ_°rù_quŸes
;

912 i‡(*++
yyp
 != '\\')

913 
do_nŸ_°rù_quŸes
;

916 i‡(
yyªs
)

917 
yyªs
[
yyn
] = *
yyp
;

918 
yyn
++;

922 i‡(
yyªs
)

923 
yyªs
[
yyn
] = '\0';

924  
yyn
;

926 
do_nŸ_°rù_quŸes
: ;

929 i‡(! 
yyªs
)

930  
	`yy°æí
 (
yy°r
);

932  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

933 
	}
}

943 
YYSIZE_T


944 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

946 
yyn
 = 
yy∑˘
[
yy°©e
];

948 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

952 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

953 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

954 
YYSIZE_T
 
yysize
 = 
yysize0
;

955 
YYSIZE_T
 
yysize1
;

956 
yysize_ovîÊow
 = 0;

957 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

958 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

959 
yyx
;

964 
	`YY_
("syntaxÉrror, unexpected %s");

965 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

966 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

967 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

968 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

970 *
yyfmt
;

971 c⁄° *
yyf
;

972 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

973 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

974 c⁄° 
yy‹
[] = " or %s";

975 
yyf‹m©
[ 
yyu√x≥˘ed


976 +  
yyex≥˘ög
 - 1

977 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

978 * ( 
yy‹
 - 1))];

979 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

983 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

986 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

987 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

988 
yycou¡
 = 1;

990 
yy¨g
[0] = 
yyäame
[
yyty≥
];

991 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

993 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

994 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

996 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

998 
yycou¡
 = 1;

999 
yysize
 = 
yysize0
;

1000 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1003 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1004 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1005 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1006 
yysize
 = 
yysize1
;

1007 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1008 
yy¥efix
 = 
yy‹
;

1011 
yyf
 = 
	`YY_
(
yyf‹m©
);

1012 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1013 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1014 
yysize
 = 
yysize1
;

1016 i‡(
yysize_ovîÊow
)

1017  
YYSIZE_MAXIMUM
;

1019 i‡(
yyªsu…
)

1024 *
yyp
 = 
yyªsu…
;

1025 
yyi
 = 0;

1026 (*
yyp
 = *
yyf
) != '\0')

1028 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1030 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1031 
yyf
 += 2;

1035 
yyp
++;

1036 
yyf
++;

1040  
yysize
;

1042 
	}
}

1051 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1052 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1054 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1057 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1058 c⁄° *
yymsg
;

1059 
yyty≥
;

1060 
YYSTYPE
 *
yyvÆuï
;

1063 
	`YYUSE
 (
yyvÆuï
);

1065 i‡(!
yymsg
)

1066 
yymsg
 = "Deleting";

1067 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1069 
yyty≥
)

1075 
	}
}

1078 #ifde‡
YYPARSE_PARAM


1079 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1080 
yy∑r£
 (*
YYPARSE_PARAM
);

1082 
yy∑r£
 ();

1085 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1086 
yy∑r£
 ();

1088 
yy∑r£
 ();

1094 
	gyych¨
;

1097 
YYSTYPE
 
	gyylvÆ
;

1100 
	gyy√ºs
;

1108 #ifde‡
YYPARSE_PARAM


1109 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1110 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1112 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1115 
	$yy∑r£
 (
YYPARSE_PARAM
)

1116 *
YYPARSE_PARAM
;

1119 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1120 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1122 
	$yy∑r£
 ()

1125 
	$yy∑r£
 ()

1132 
yy°©e
;

1134 
yyîr°©us
;

1144 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1145 
yyty≥_öt16
 *
yyss
;

1146 
yyty≥_öt16
 *
yys•
;

1149 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1150 
YYSTYPE
 *
yyvs
;

1151 
YYSTYPE
 *
yyv•
;

1153 
YYSIZE_T
 
yy°acksize
;

1155 
yyn
;

1156 
yyªsu…
;

1158 
yytokí
;

1161 
YYSTYPE
 
yyvÆ
;

1163 #i‡
YYERROR_VERBOSE


1165 
yymsgbuf
[128];

1166 *
yymsg
 = 
yymsgbuf
;

1167 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1170 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1174 
yyÀn
 = 0;

1176 
yytokí
 = 0;

1177 
yyss
 = 
yysß
;

1178 
yyvs
 = 
yyvß
;

1179 
yy°acksize
 = 
YYINITDEPTH
;

1181 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1183 
yy°©e
 = 0;

1184 
yyîr°©us
 = 0;

1185 
yy√ºs
 = 0;

1186 
yych¨
 = 
YYEMPTY
;

1192 
yys•
 = 
yyss
;

1193 
yyv•
 = 
yyvs
;

1195 
yy£t°©e
;

1200 
yy√w°©e
:

1203 
yys•
++;

1205 
yy£t°©e
:

1206 *
yys•
 = 
yy°©e
;

1208 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1211 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1213 #ifde‡
yyovîÊow


1218 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1219 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1225 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1226 &
yyss1
, 
yysize
 *  (*
yys•
),

1227 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1228 &
yy°acksize
);

1230 
yyss
 = 
yyss1
;

1231 
yyvs
 = 
yyvs1
;

1234 #i‚de‡
YYSTACK_RELOCATE


1235 
yyexhau°edœb
;

1238 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1239 
yyexhau°edœb
;

1240 
yy°acksize
 *= 2;

1241 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1242 
yy°acksize
 = 
YYMAXDEPTH
;

1245 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1246 
yyÆloc
 *
yy±r
 =

1247 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1248 i‡(! 
yy±r
)

1249 
yyexhau°edœb
;

1250 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1251 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1252 #unde‡
YYSTACK_RELOCATE


1253 i‡(
yyss1
 !
yysß
)

1254 
	`YYSTACK_FREE
 (
yyss1
);

1259 
yys•
 = 
yyss
 + 
yysize
 - 1;

1260 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1262 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1263 (Ë
yy°acksize
));

1265 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1266 
YYABORT
;

1269 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1271 i‡(
yy°©e
 =
YYFINAL
)

1272 
YYACCEPT
;

1274 
yybackup
;

1279 
yybackup
:

1285 
yyn
 = 
yy∑˘
[
yy°©e
];

1286 i‡(
yyn
 =
YYPACT_NINF
)

1287 
yydeÁu…
;

1292 i‡(
yych¨
 =
YYEMPTY
)

1294 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1295 
yych¨
 = 
YYLEX
;

1298 i‡(
yych¨
 <
YYEOF
)

1300 
yych¨
 = 
yytokí
 = 
YYEOF
;

1301 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1305 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1306 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1311 
yyn
 +
yytokí
;

1312 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1313 
yydeÁu…
;

1314 
yyn
 = 
yyèbÀ
[yyn];

1315 i‡(
yyn
 <= 0)

1317 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1318 
yyîæab
;

1319 
yyn
 = -yyn;

1320 
yyªdu˚
;

1325 i‡(
yyîr°©us
)

1326 
yyîr°©us
--;

1329 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1332 
yych¨
 = 
YYEMPTY
;

1334 
yy°©e
 = 
yyn
;

1335 *++
yyv•
 = 
yylvÆ
;

1337 
yy√w°©e
;

1343 
yydeÁu…
:

1344 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1345 i‡(
yyn
 == 0)

1346 
yyîæab
;

1347 
yyªdu˚
;

1353 
yyªdu˚
:

1355 
yyÀn
 = 
yyr2
[
yyn
];

1365 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1368 
	`YY_REDUCE_PRINT
 (
yyn
);

1369 
yyn
)

1375 { 
	`ouçut
("NoÖarsingÉrrors\n"); ;}

1382 { 
	`ouçut
("\n"); ;}

1389 { 
	`ouçut
("\n"); ;}

1417 { 
	`ouçut
(".vîsi⁄"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".vîsi⁄"); 
g_hódîLi°
->
	`add
(instEntry);;}

1424 { 
	`ouçut
(".èrgë"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".èrgë"); 
g_hódîLi°
->
	`add
(instEntry);;}

1431 { 
	`ouçut
(".íåy"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".íåy"); 
g_hódîLi°
->
	`add
(instEntry);;}

1438 { 
	`ouçut
(" "); ouçut((
yyv•
[(2Ë- (2)].
°rög_vÆue
)); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
((yyvsp[(2) - (2)].string_value)); ;}

1445 { 
	`ouçut
(" "); ouçut((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
((yyvsp[(1) - (1)].string_value)); ;}

1452 { 
	`ouçut
(" "); ouçut((
yyv•
[(3Ë- (3)].
°rög_vÆue
)); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
((yyvsp[(3) - (3)].string_value));;}

1459 { 
	`ouçut
("\n.∑øm"); 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); in°E¡ry->
	`£tBa£
(".∑øm"); 
g_hódîLi°
->
	`add
(instEntry); ;}

1466 { 
	`ouçut
(".u64"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".u64");;}

1473 { 
	`ouçut
(".u32"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".u32");;}

1480 { 
	`ouçut
(".u16"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".u16");;}

1487 { 
	`ouçut
(".b32"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".b32");;}

1494 { 
	`ouçut
(".f32"); 
g_hódîLi°
->
	`gëLi°End
().
	`addTy≥Modifõr
(".f32");;}

1501 { 
	`ouçut
(" "); ouçut((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
((yyvsp[(1) - (1)].string_value)); ;}

1510 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1512 
	`YYPOPSTACK
 (
yyÀn
);

1513 
yyÀn
 = 0;

1514 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1516 *++
yyv•
 = 
yyvÆ
;

1522 
yyn
 = 
yyr1
[yyn];

1524 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1525 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1526 
yy°©e
 = 
yyèbÀ
[yystate];

1528 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1530 
yy√w°©e
;

1536 
yyîæab
:

1538 i‡(!
yyîr°©us
)

1540 ++
yy√ºs
;

1541 #i‡! 
YYERROR_VERBOSE


1542 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1545 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1546 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1548 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1549 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1550 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1551 i‡(
yymsg
 !
yymsgbuf
)

1552 
	`YYSTACK_FREE
 (
yymsg
);

1553 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1554 i‡(
yymsg
)

1555 
yymsg_Æloc
 = 
yyÆloc
;

1558 
yymsg
 = 
yymsgbuf
;

1559 
yymsg_Æloc
 =  
yymsgbuf
;

1563 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1565 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1566 
	`yyîr‹
 (
yymsg
);

1570 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1571 i‡(
yysize
 != 0)

1572 
yyexhau°edœb
;

1580 i‡(
yyîr°©us
 == 3)

1585 i‡(
yych¨
 <
YYEOF
)

1588 i‡(
yych¨
 =
YYEOF
)

1589 
YYABORT
;

1593 
	`yyde°ru˘
 ("Error: discarding",

1594 
yytokí
, &
yylvÆ
);

1595 
yych¨
 = 
YYEMPTY
;

1601 
yyîæab1
;

1607 
yyîr‹œb
:

1613 
yyîr‹œb
;

1617 
	`YYPOPSTACK
 (
yyÀn
);

1618 
yyÀn
 = 0;

1619 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1620 
yy°©e
 = *
yys•
;

1621 
yyîæab1
;

1627 
yyîæab1
:

1628 
yyîr°©us
 = 3;

1632 
yyn
 = 
yy∑˘
[
yy°©e
];

1633 i‡(
yyn
 !
YYPACT_NINF
)

1635 
yyn
 +
YYTERROR
;

1636 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1638 
yyn
 = 
yyèbÀ
[yyn];

1639 i‡(0 < 
yyn
)

1645 i‡(
yys•
 =
yyss
)

1646 
YYABORT
;

1649 
	`yyde°ru˘
 ("Error:Öopping",

1650 
yy°os
[
yy°©e
], 
yyv•
);

1651 
	`YYPOPSTACK
 (1);

1652 
yy°©e
 = *
yys•
;

1653 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1656 *++
yyv•
 = 
yylvÆ
;

1660 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1662 
yy°©e
 = 
yyn
;

1663 
yy√w°©e
;

1669 
yyac˚±œb
:

1670 
yyªsu…
 = 0;

1671 
yyªtu∫
;

1676 
yyab‹éab
:

1677 
yyªsu…
 = 1;

1678 
yyªtu∫
;

1680 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1684 
yyexhau°edœb
:

1685 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1686 
yyªsu…
 = 2;

1690 
yyªtu∫
:

1691 i‡(
yych¨
 !
YYEMPTY
)

1692 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1693 
yytokí
, &
yylvÆ
);

1696 
	`YYPOPSTACK
 (
yyÀn
);

1697 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1698 
yys•
 !
yyss
)

1700 
	`yyde°ru˘
 ("Cleanup:Öopping",

1701 
yy°os
[*
yys•
], 
yyv•
);

1702 
	`YYPOPSTACK
 (1);

1704 #i‚de‡
yyovîÊow


1705 i‡(
yyss
 !
yysß
)

1706 
	`YYSTACK_FREE
 (
yyss
);

1708 #i‡
YYERROR_VERBOSE


1709 i‡(
yymsg
 !
yymsgbuf
)

1710 
	`YYSTACK_FREE
 (
yymsg
);

1713  
	`YYID
 (
yyªsu…
);

1714 
	}
}

	@cuobjdump_to_ptxplus/header_parser.hh

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mDOTVERSION
 = 258,

43 
	mDOTTARGET
 = 259,

44 
	mDOTENTRY
 = 260,

45 
	mDOTPARAM
 = 261,

46 
	mDOTU64
 = 262,

47 
	mDOTU32
 = 263,

48 
	mDOTU16
 = 264,

49 
	mDOTB32
 = 265,

50 
	mDOTF32
 = 266,

51 
	mIDENTIFER
 = 267,

52 
	mDECLITERAL
 = 268,

53 
	mLEFTPAREN
 = 269,

54 
	mRIGHTPAREN
 = 270

60 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


61 
	uYYSTYPE


67 
	mdoubÀ_vÆue
;

68 
	mÊﬂt_vÆue
;

69 
	möt_vÆue
;

70 * 
	m°rög_vÆue
;

71 * 
	m±r_vÆue
;

77 } 
	tYYSTYPE
;

78 
	#YYSTYPE_IS_TRIVIAL
 1

	)

79 
	#yy°y≥
 
YYSTYPE


	)

80 
	#YYSTYPE_IS_DECLARED
 1

	)

83 
YYSTYPE
 
hódî_lvÆ
;

	@cuobjdump_to_ptxplus/lex.ptx_.c

4 
	#YY_INT_ALIGNED
 

	)

8 
	#yy_¸óã_buf„r
 
±x__¸óã_buf„r


	)

9 
	#yy_dñëe_buf„r
 
±x__dñëe_buf„r


	)

10 
	#yy_Êex_debug
 
±x__Êex_debug


	)

11 
	#yy_öô_buf„r
 
±x__öô_buf„r


	)

12 
	#yy_Êush_buf„r
 
±x__Êush_buf„r


	)

13 
	#yy_lﬂd_buf„r_°©e
 
±x__lﬂd_buf„r_°©e


	)

14 
	#yy_swôch_to_buf„r
 
±x__swôch_to_buf„r


	)

15 
	#yyö
 
±x_ö


	)

16 
	#yyÀng
 
±x_Àng


	)

17 
	#yyÀx
 
±x_Àx


	)

18 
	#yylöío
 
±x_löío


	)

19 
	#yyout
 
±x_out


	)

20 
	#yyª°¨t
 
±x_ª°¨t


	)

21 
	#yyãxt
 
±x_ãxt


	)

22 
	#yywøp
 
±x_wøp


	)

23 
	#yyÆloc
 
±x_Æloc


	)

24 
	#yyªÆloc
 
±x_ªÆloc


	)

25 
	#yy‰ì
 
±x_‰ì


	)

27 
	#FLEX_SCANNER


	)

28 
	#YY_FLEX_MAJOR_VERSION
 2

	)

29 
	#YY_FLEX_MINOR_VERSION
 5

	)

30 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

31 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

32 
	#FLEX_BETA


	)

38 
	~<°dio.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<°dlib.h
>

47 #i‚de‡
FLEXINT_H


48 
	#FLEXINT_H


	)

52 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

57 #i‚de‡
__STDC_LIMIT_MACROS


58 
	#__STDC_LIMIT_MACROS
 1

	)

61 
	~<öây≥s.h
>

62 
öt8_t
 
	tÊex_öt8_t
;

63 
uöt8_t
 
	tÊex_uöt8_t
;

64 
öt16_t
 
	tÊex_öt16_t
;

65 
uöt16_t
 
	tÊex_uöt16_t
;

66 
öt32_t
 
	tÊex_öt32_t
;

67 
uöt32_t
 
	tÊex_uöt32_t
;

69 sig√d 
	tÊex_öt8_t
;

70 
	tÊex_öt16_t
;

71 
	tÊex_öt32_t
;

72 
	tÊex_uöt8_t
;

73 
	tÊex_uöt16_t
;

74 
	tÊex_uöt32_t
;

78 #i‚de‡
INT8_MIN


79 
	#INT8_MIN
 (-128)

	)

81 #i‚de‡
INT16_MIN


82 
	#INT16_MIN
 (-32767-1)

	)

84 #i‚de‡
INT32_MIN


85 
	#INT32_MIN
 (-2147483647-1)

	)

87 #i‚de‡
INT8_MAX


88 
	#INT8_MAX
 (127)

	)

90 #i‚de‡
INT16_MAX


91 
	#INT16_MAX
 (32767)

	)

93 #i‚de‡
INT32_MAX


94 
	#INT32_MAX
 (2147483647)

	)

96 #i‚de‡
UINT8_MAX


97 
	#UINT8_MAX
 (255U)

	)

99 #i‚de‡
UINT16_MAX


100 
	#UINT16_MAX
 (65535U)

	)

102 #i‚de‡
UINT32_MAX


103 
	#UINT32_MAX
 (4294967295U)

	)

108 #ifde‡
__˝lu•lus


111 
	#YY_USE_CONST


	)

116 #i‡
deföed
 (
__STDC__
)

118 
	#YY_USE_CONST


	)

123 #ifde‡
YY_USE_CONST


124 
	#yyc⁄°
 c⁄°

	)

126 
	#yyc⁄°


	)

130 
	#YY_NULL
 0

	)

137 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

143 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

149 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

150 
	#YYSTATE
 
YY_START


	)

153 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

156 
	#YY_NEW_FILE
 
	`±x_ª°¨t
(
±x_ö
 )

	)

158 
	#YY_END_OF_BUFFER_CHAR
 0

	)

161 #i‚de‡
YY_BUF_SIZE


162 
	#YY_BUF_SIZE
 16384

	)

167 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

169 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


170 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

171 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

174 
±x_Àng
;

176 
FILE
 *
±x_ö
, *
±x_out
;

178 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

179 
	#EOB_ACT_END_OF_FILE
 1

	)

180 
	#EOB_ACT_LAST_MATCH
 2

	)

189 
	#YY_LESS_LINENO
(
n
) \

191 
yyl
;\

192  
yyl
 = 
n
; yy»< 
±x_Àng
; ++yyl )\

193 i‡–
±x_ãxt
[
yyl
] == '\n' )\

194 --
±x_löío
;\

195 }0)

	)

198 
	#yyÀss
(
n
) \

202 
yyÀss_ma¸o_¨g
 = (
n
); \

203 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

204 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

205 
YY_RESTORE_YY_MORE_OFFSET
 \

206 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

207 
YY_DO_BEFORE_ACTION
; \

209  0 )

	)

211 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

213 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


214 
	#YY_TYPEDEF_YY_SIZE_T


	)

215 
size_t
 
	tyy_size_t
;

218 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


219 
	#YY_STRUCT_YY_BUFFER_STATE


	)

220 
	syy_buf„r_°©e


222 
FILE
 *
	myy_öput_fûe
;

224 *
	myy_ch_buf
;

225 *
	myy_buf_pos
;

230 
yy_size_t
 
	myy_buf_size
;

235 
	myy_n_ch¨s
;

241 
	myy_is_our_buf„r
;

248 
	myy_is_öãø˘ive
;

254 
	myy_©_bﬁ
;

256 
	myy_bs_löío
;

257 
	myy_bs_cﬁumn
;

262 
	myy_fûl_buf„r
;

264 
	myy_buf„r_°©us
;

266 
	#YY_BUFFER_NEW
 0

	)

267 
	#YY_BUFFER_NORMAL
 1

	)

278 
	#YY_BUFFER_EOF_PENDING
 2

	)

284 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

285 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

286 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

294 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

295 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

296 : 
NULL
)

	)

301 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

304 
	gyy_hﬁd_ch¨
;

305 
	gyy_n_ch¨s
;

306 
	g±x_Àng
;

309 *
	gyy_c_buf_p
 = (*) 0;

310 
	gyy_öô
 = 0;

311 
	gyy_°¨t
 = 0;

316 
	gyy_did_buf„r_swôch_⁄_eof
;

318 
±x_ª°¨t
 (
FILE
 *
öput_fûe
 );

319 
±x__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

320 
YY_BUFFER_STATE
 
±x__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

321 
±x__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

322 
±x__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
±x_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

324 
±x_p›_buf„r_°©e
 ();

326 
±x_ísuª_buf„r_°ack
 ();

327 
±x__lﬂd_buf„r_°©e
 ();

328 
±x__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

330 
	#YY_FLUSH_BUFFER
 
	`±x__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

332 
YY_BUFFER_STATE
 
±x__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

333 
YY_BUFFER_STATE
 
±x__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

334 
YY_BUFFER_STATE
 
±x__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

336 *
±x_Æloc
 (
yy_size_t
 );

337 *
±x_ªÆloc
 (*,
yy_size_t
 );

338 
±x_‰ì
 (* );

340 
	#yy_√w_buf„r
 
±x__¸óã_buf„r


	)

342 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

344 i‡–! 
YY_CURRENT_BUFFER
 ){ \

345 
	`±x_ísuª_buf„r_°ack
 (); \

346 
YY_CURRENT_BUFFER_LVALUE
 = \

347 
	`±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 ); \

349 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

350 }

	)

352 
	#yy_£t_bﬁ
(
©_bﬁ
) \

354 i‡–! 
YY_CURRENT_BUFFER
 ){\

355 
	`±x_ísuª_buf„r_°ack
 (); \

356 
YY_CURRENT_BUFFER_LVALUE
 = \

357 
	`±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 ); \

359 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

360 }

	)

362 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

366 
	#±x_wøp
(
n
Ë1

	)

367 
	#YY_SKIP_YYWRAP


	)

369 
	tYY_CHAR
;

371 
FILE
 *
	g±x_ö
 = (FILE *Ë0, *
	g±x_out
 = (FILE *) 0;

373 
	tyy_°©e_ty≥
;

375 
±x_löío
;

377 
	g±x_löío
 = 1;

379 *
±x_ãxt
;

380 
	#yyãxt_±r
 
±x_ãxt


	)

382 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

383 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

384 
yy_gë_√xt_buf„r
 ();

385 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

390 
	#YY_DO_BEFORE_ACTION
 \

391 (
yyãxt_±r
Ë
yy_bp
; \

392 
±x_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

393 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

394 *
yy_˝
 = '\0'; \

395 (
yy_c_buf_p
Ë
yy_˝
;

	)

397 
	#YY_NUM_RULES
 283

	)

398 
	#YY_END_OF_BUFFER
 284

	)

401 
	syy_å™s_öfo


403 
Êex_öt32_t
 
	myy_vîify
;

404 
Êex_öt32_t
 
	myy_nxt
;

406 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[1267] =

549 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

581 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[76] =

593 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[1312] =

742 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[1312] =

891 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[1711] =

1083 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[1711] =

1276 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[284] =

1294 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

1295 *
	gyy_œ°_ac˚±ög_˝os
;

1297 
±x__Êex_debug
;

1298 
	g±x__Êex_debug
 = 0;

1303 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1304 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1305 
	#YY_MORE_ADJ
 0

	)

1306 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1307 *
	g±x_ãxt
;

1338 
	~"›codes.h
"

1339 
	~"±x.èb.h
"

1340 
	~<°rög.h
>

1342 
	glöebuf
[1024];

1343 
	gcﬁ
 = 0;

1344 
	#TC
 
cﬁ
+=
	`°æí
(
±x_ãxt
);

	)

1345 
	#CHECK_UNSIGNED
 \

	)

1346 if–
	g±x_ãxt
[
°æí
(
±x_ãxt
)-1]=='U' ) { \

1347 
¥ötf
("GPGPU-Sim: ERROR ** U modifierÇot implemented\n"); \

1348 
ab‹t
(); \

1350 
±x_îr‹
–c⁄° *
s
 );

1356 
	#INITIAL
 0

	)

1357 
	#IN_STRING
 1

	)

1358 
	#IN_COMMENT
 2

	)

1359 
	#NOT_OPCODE
 3

	)

1361 #i‚de‡
YY_NO_UNISTD_H


1366 
	~<uni°d.h
>

1369 #i‚de‡
YY_EXTRA_TYPE


1370 
	#YY_EXTRA_TYPE
 *

	)

1373 
yy_öô_globÆs
 ();

1378 
±x_Àx_de°roy
 ();

1380 
±x_gë_debug
 ();

1382 
±x_£t_debug
 (
debug_Êag
 );

1384 
YY_EXTRA_TYPE
 
±x_gë_exåa
 ();

1386 
±x_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

1388 
FILE
 *
±x_gë_ö
 ();

1390 
±x_£t_ö
 (
FILE
 * 
ö_°r
 );

1392 
FILE
 *
±x_gë_out
 ();

1394 
±x_£t_out
 (
FILE
 * 
out_°r
 );

1396 
±x_gë_Àng
 ();

1398 *
±x_gë_ãxt
 ();

1400 
±x_gë_löío
 ();

1402 
±x_£t_löío
 (
löe_numbî
 );

1408 #i‚de‡
YY_SKIP_YYWRAP


1409 #ifde‡
__˝lu•lus


1410 "C" 
±x_wøp
 ();

1412 
±x_wøp
 ();

1416 #i‚de‡
yyãxt_±r


1417 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

1420 #ifde‡
YY_NEED_STRLEN


1421 
yy_Êex_°æí
 (
yyc⁄°
 * );

1424 #i‚de‡
YY_NO_INPUT


1426 #ifde‡
__˝lu•lus


1427 
yyöput
 ();

1429 
öput
 ();

1435 #i‚de‡
YY_READ_BUF_SIZE


1436 
	#YY_READ_BUF_SIZE
 8192

	)

1440 #i‚de‡
ECHO


1444 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
±x_ãxt
, 
±x_Àng
, 1, 
±x_out
 )Ë{} } 0)

	)

1450 #i‚de‡
YY_INPUT


1451 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

1452 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

1454 
c
 = '*'; \

1455 
n
; \

1456  
n
 = 0;Ç < 
max_size
 && \

1457 (
c
 = 
	`gëc
–
±x_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

1458 
buf
[
n
] = (Ë
c
; \

1459 i‡–
c
 == '\n' ) \

1460 
buf
[
n
++] = (Ë
c
; \

1461 i‡–
c
 =
EOF
 && 
	`„º‹
–
±x_ö
 ) ) \

1462 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1463 
ªsu…
 = 
n
; \

1467 
î∫o
=0; \

1468  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
±x_ö
))==0 && 
	`„º‹
(ptx_in)) \

1470 if–
î∫o
 !
EINTR
) \

1472 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1475 
î∫o
=0; \

1476 
	`˛óªº
(
±x_ö
); \

1480 

	)

1487 #i‚de‡
yyãrmö©e


1488 
	#yyãrmö©e
(Ë 
YY_NULL


	)

1492 #i‚de‡
YY_START_STACK_INCR


1493 
	#YY_START_STACK_INCR
 25

	)

1497 #i‚de‡
YY_FATAL_ERROR


1498 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

1506 #i‚de‡
YY_DECL


1507 
	#YY_DECL_IS_OURS
 1

	)

1509 
±x_Àx
 ();

1511 
	#YY_DECL
 
	`±x_Àx
 ()

	)

1517 #i‚de‡
YY_USER_ACTION


1518 
	#YY_USER_ACTION


	)

1522 #i‚de‡
YY_BREAK


1523 
	#YY_BREAK
 ;

	)

1526 
	#YY_RULE_SETUP
 \

1527 
YY_USER_ACTION


	)

1531 
	gYY_DECL


1533 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1534 *
	gyy_˝
, *
	gyy_bp
;

1535 
	gyy_a˘
;

1542 i‡–!(
	gyy_öô
) )

1544 (
	gyy_öô
) = 1;

1546 #ifde‡
YY_USER_INIT


1547 
	gYY_USER_INIT
;

1550 i‡–! (
	gyy_°¨t
) )

1551 (
	gyy_°¨t
) = 1;

1553 i‡–! 
	g±x_ö
 )

1554 
	g±x_ö
 = 
°dö
;

1556 i‡–! 
	g±x_out
 )

1557 
	g±x_out
 = 
°dout
;

1559 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1560 
±x_ísuª_buf„r_°ack
 ();

1561 
	gYY_CURRENT_BUFFER_LVALUE
 =

1562 
±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 );

1565 
±x__lﬂd_buf„r_°©e
( );

1570 
	gyy_˝
 = (
yy_c_buf_p
);

1573 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1578 
	gyy_bp
 = 
yy_˝
;

1580 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

1581 
	gyy_m©ch
:

1584 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1585 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1587 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1588 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1590  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1592 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1593 i‡–
	gyy_cuºít_°©e
 >= 1267 )

1594 
yy_c
 = 
yy_mëa
[() yy_c];

1596 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1597 ++
	gyy_˝
;

1599  
	gyy_cuºít_°©e
 != 1266 );

1600 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1601 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1603 
	gyy_föd_a˘i⁄
:

1604 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1606 
	gYY_DO_BEFORE_ACTION
;

1608 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

1610 
yyl
;

1611  
	gyyl
 = 0; yy»< 
	g±x_Àng
; ++yyl )

1612 i‡–
	g±x_ãxt
[
yyl
] == '\n' )

1614 
±x_löío
++;

1618 
	gdo_a˘i⁄
:

1620  
yy_a˘
 )

1624 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1625 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1626 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1627 
	gyy_föd_a˘i⁄
;

1630 
YY_RULE_SETUP


1632 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ABS_OP
;  
	gOPCODE
;

1633 
YY_BREAK


1635 
YY_RULE_SETUP


1637 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ADD_OP
;  
	gOPCODE
;

1638 
YY_BREAK


1640 
YY_RULE_SETUP


1642 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ADDP_OP
;  
	gOPCODE
;

1643 
YY_BREAK


1645 
YY_RULE_SETUP


1647 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ADDC_OP
;  
	gOPCODE
;

1648 
YY_BREAK


1650 
YY_RULE_SETUP


1652 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
AND_OP
;  
	gOPCODE
;

1653 
YY_BREAK


1655 
YY_RULE_SETUP


1657 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ANDN_OP
;  
	gOPCODE
;

1658 
YY_BREAK


1660 
YY_RULE_SETUP


1662 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ATOM_OP
;  
	gOPCODE
;

1663 
YY_BREAK


1665 
YY_RULE_SETUP


1667 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BAR_OP
;  
	gOPCODE
;

1668 
YY_BREAK


1670 
YY_RULE_SETUP


1672 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BFE_OP
;  
	gOPCODE
;

1673 
YY_BREAK


1675 
YY_RULE_SETUP


1677 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BFI_OP
;  
	gOPCODE
;

1678 
YY_BREAK


1680 
YY_RULE_SETUP


1682 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BFIND_OP
;  
	gOPCODE
;

1683 
YY_BREAK


1685 
YY_RULE_SETUP


1687 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BRA_OP
;  
	gOPCODE
;

1688 
YY_BREAK


1690 
YY_RULE_SETUP


1692 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BREV_OP
;  
	gOPCODE
;

1693 
YY_BREAK


1695 
YY_RULE_SETUP


1697 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BRKPT_OP
;  
	gOPCODE
;

1698 
YY_BREAK


1700 
YY_RULE_SETUP


1702 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CALL_OP
;  
	gOPCODE
;

1703 
YY_BREAK


1705 
YY_RULE_SETUP


1707 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CALLP_OP
;  
	gOPCODE
;

1708 
YY_BREAK


1710 
YY_RULE_SETUP


1712 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CLZ_OP
;  
	gOPCODE
;

1713 
YY_BREAK


1715 
YY_RULE_SETUP


1717 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CNOT_OP
;  
	gOPCODE
;

1718 
YY_BREAK


1720 
YY_RULE_SETUP


1722 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
COS_OP
;  
	gOPCODE
;

1723 
YY_BREAK


1725 
YY_RULE_SETUP


1727 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CVT_OP
;  
	gOPCODE
;

1728 
YY_BREAK


1730 
YY_RULE_SETUP


1732 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CVTA_OP
;  
	gOPCODE
;

1733 
YY_BREAK


1735 
YY_RULE_SETUP


1737 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
DIV_OP
;  
	gOPCODE
;

1738 
YY_BREAK


1740 
YY_RULE_SETUP


1742 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
EX2_OP
;  
	gOPCODE
;

1743 
YY_BREAK


1745 
YY_RULE_SETUP


1747 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
EXIT_OP
;  
	gOPCODE
;

1748 
YY_BREAK


1750 
YY_RULE_SETUP


1752 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
FMA_OP
;  
	gOPCODE
;

1753 
YY_BREAK


1755 
YY_RULE_SETUP


1757 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ISSPACEP_OP
;  
	gOPCODE
;

1758 
YY_BREAK


1760 
YY_RULE_SETUP


1762 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LD_OP
;  
	gOPCODE
;

1763 
YY_BREAK


1765 
YY_RULE_SETUP


1767 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LD_OP
;  
	gOPCODE
;

1768 
YY_BREAK


1770 
YY_RULE_SETUP


1772 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LDU_OP
;  
	gOPCODE
;

1773 
YY_BREAK


1775 
YY_RULE_SETUP


1777 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LG2_OP
;  
	gOPCODE
;

1778 
YY_BREAK


1780 
YY_RULE_SETUP


1782 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MAD24_OP
;  
	gOPCODE
;

1783 
YY_BREAK


1785 
YY_RULE_SETUP


1787 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MAD_OP
;  
	gOPCODE
;

1788 
YY_BREAK


1790 
YY_RULE_SETUP


1792 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MAX_OP
;  
	gOPCODE
;

1793 
YY_BREAK


1795 
YY_RULE_SETUP


1797 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MEMBAR_OP
;  
	gOPCODE
;

1798 
YY_BREAK


1800 
YY_RULE_SETUP


1802 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MIN_OP
;  
	gOPCODE
;

1803 
YY_BREAK


1805 
YY_RULE_SETUP


1807 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MOV_OP
;  
	gOPCODE
;

1808 
YY_BREAK


1810 
YY_RULE_SETUP


1812 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MUL24_OP
;  
	gOPCODE
;

1813 
YY_BREAK


1815 
YY_RULE_SETUP


1817 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MUL_OP
;  
	gOPCODE
;

1818 
YY_BREAK


1820 
YY_RULE_SETUP


1822 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NEG_OP
;  
	gOPCODE
;

1823 
YY_BREAK


1825 
YY_RULE_SETUP


1827 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NANDN_OP
;  
	gOPCODE
;

1828 
YY_BREAK


1830 
YY_RULE_SETUP


1832 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NORN_OP
;  
	gOPCODE
;

1833 
YY_BREAK


1835 
YY_RULE_SETUP


1837 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NOT_OP
;  
	gOPCODE
;

1838 
YY_BREAK


1840 
YY_RULE_SETUP


1842 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
OR_OP
;  
	gOPCODE
;

1843 
YY_BREAK


1845 
YY_RULE_SETUP


1847 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ORN_OP
;  
	gOPCODE
;

1848 
YY_BREAK


1850 
YY_RULE_SETUP


1852 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PMEVENT_OP
;  
	gOPCODE
;

1853 
YY_BREAK


1855 
YY_RULE_SETUP


1857 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
POPC_OP
;  
	gOPCODE
;

1858 
YY_BREAK


1860 
YY_RULE_SETUP


1862 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PREFETCH_OP
;  
	gOPCODE
;

1863 
YY_BREAK


1865 
YY_RULE_SETUP


1867 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PREFETCHU_OP
;  
	gOPCODE
;

1868 
YY_BREAK


1870 
YY_RULE_SETUP


1872 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PRMT_OP
;  
	gOPCODE
;

1873 
YY_BREAK


1875 
YY_RULE_SETUP


1877 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RCP_OP
;  
	gOPCODE
;

1878 
YY_BREAK


1880 
YY_RULE_SETUP


1882 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RED_OP
;  
	gOPCODE
;

1883 
YY_BREAK


1885 
YY_RULE_SETUP


1887 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
REM_OP
;  
	gOPCODE
;

1888 
YY_BREAK


1890 
YY_RULE_SETUP


1892 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RET_OP
;  
	gOPCODE
;

1893 
YY_BREAK


1895 
YY_RULE_SETUP


1897 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RETP_OP
;  
	gOPCODE
;

1898 
YY_BREAK


1900 
YY_RULE_SETUP


1902 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RSQRT_OP
;  
	gOPCODE
;

1903 
YY_BREAK


1905 
YY_RULE_SETUP


1907 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SAD_OP
;  
	gOPCODE
;

1908 
YY_BREAK


1910 
YY_RULE_SETUP


1912 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SELP_OP
;  
	gOPCODE
;

1913 
YY_BREAK


1915 
YY_RULE_SETUP


1917 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SETP_OP
;  
	gOPCODE
;

1918 
YY_BREAK


1920 
YY_RULE_SETUP


1922 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SET_OP
;  
	gOPCODE
;

1923 
YY_BREAK


1925 
YY_RULE_SETUP


1927 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SHL_OP
;  
	gOPCODE
;

1928 
YY_BREAK


1930 
YY_RULE_SETUP


1932 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SHR_OP
;  
	gOPCODE
;

1933 
YY_BREAK


1935 
YY_RULE_SETUP


1937 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SIN_OP
;  
	gOPCODE
;

1938 
YY_BREAK


1940 
YY_RULE_SETUP


1942 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SLCT_OP
;  
	gOPCODE
;

1943 
YY_BREAK


1945 
YY_RULE_SETUP


1947 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SQRT_OP
;  
	gOPCODE
;

1948 
YY_BREAK


1950 
YY_RULE_SETUP


1952 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ST_OP
;  
	gOPCODE
;

1953 
YY_BREAK


1955 
YY_RULE_SETUP


1957 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ST_OP
;  
	gOPCODE
;

1958 
YY_BREAK


1960 
YY_RULE_SETUP


1962 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUB_OP
;  
	gOPCODE
;

1963 
YY_BREAK


1965 
YY_RULE_SETUP


1967 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUBC_OP
;  
	gOPCODE
;

1968 
YY_BREAK


1970 
YY_RULE_SETUP


1972 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SULD_OP
;  
	gOPCODE
;

1973 
YY_BREAK


1975 
YY_RULE_SETUP


1977 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SURED_OP
;  
	gOPCODE
;

1978 
YY_BREAK


1980 
YY_RULE_SETUP


1982 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUST_OP
;  
	gOPCODE
;

1983 
YY_BREAK


1985 
YY_RULE_SETUP


1987 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUQ_OP
;  
	gOPCODE
;

1988 
YY_BREAK


1990 
YY_RULE_SETUP


1992 
TC
; 
BEGIN
(
NOT_OPCODE
); 
	g±x_lvÆ
.
	göt_vÆue
 = 
TEX_OP
;  
	gOPCODE
;

1993 
YY_BREAK


1995 
YY_RULE_SETUP


1997 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
TEX_OP
;  
	gOPCODE
;

1998 
YY_BREAK


2000 
YY_RULE_SETUP


2002 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
TRAP_OP
;  
	gOPCODE
;

2003 
YY_BREAK


2005 
YY_RULE_SETUP


2007 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VABSDIFF_OP
;  
	gOPCODE
;

2008 
YY_BREAK


2010 
YY_RULE_SETUP


2012 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VADD_OP
;  
	gOPCODE
;

2013 
YY_BREAK


2015 
YY_RULE_SETUP


2017 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VMAD_OP
;  
	gOPCODE
;

2018 
YY_BREAK


2020 
YY_RULE_SETUP


2022 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VMAX_OP
;  
	gOPCODE
;

2023 
YY_BREAK


2025 
YY_RULE_SETUP


2027 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VMIN_OP
;  
	gOPCODE
;

2028 
YY_BREAK


2030 
YY_RULE_SETUP


2032 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSET_OP
;  
	gOPCODE
;

2033 
YY_BREAK


2035 
YY_RULE_SETUP


2037 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSHL_OP
;  
	gOPCODE
;

2038 
YY_BREAK


2040 
YY_RULE_SETUP


2042 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSHR_OP
;  
	gOPCODE
;

2043 
YY_BREAK


2045 
YY_RULE_SETUP


2047 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSUB_OP
;  
	gOPCODE
;

2048 
YY_BREAK


2050 
YY_RULE_SETUP


2052 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VOTE_OP
;  
	gOPCODE
;

2053 
YY_BREAK


2055 
YY_RULE_SETUP


2057 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
XOR_OP
;  
	gOPCODE
;

2058 
YY_BREAK


2060 
YY_RULE_SETUP


2062 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NOP_OP
;  
	gOPCODE
;

2063 
YY_BREAK


2065 
YY_RULE_SETUP


2067 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BREAK_OP
;  
	gOPCODE
;

2068 
YY_BREAK


2070 
YY_RULE_SETUP


2072 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BREAKADDR_OP
;  
	gOPCODE
;

2073 
YY_BREAK


2076 
YY_RULE_SETUP


2078 
TC
;  
	gALIGN_DIRECTIVE
;

2079 
YY_BREAK


2081 
YY_RULE_SETUP


2083 
TC
;  
	gBRANCHTARGETS_DIRECTIVE
;

2084 
YY_BREAK


2086 
YY_RULE_SETUP


2088 
TC
;  
	gBYTE_DIRECTIVE
;

2089 
YY_BREAK


2091 
YY_RULE_SETUP


2093 
TC
;  
	gCALLPROTOTYPE_DIRECTIVE
;

2094 
YY_BREAK


2096 
YY_RULE_SETUP


2098 
TC
;  
	gCALLTARGETS_DIRECTIVE
;

2099 
YY_BREAK


2101 
YY_RULE_SETUP


2103 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
©oi
(
±x_ãxt
+7);  
	gCONST_DIRECTIVE
;

2104 
YY_BREAK


2106 
YY_RULE_SETUP


2108 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 0;  
	gCONST_DIRECTIVE
;

2109 
YY_BREAK


2111 
YY_RULE_SETUP


2113 
TC
;  
	gENTRY_DIRECTIVE
;

2114 
YY_BREAK


2116 
YY_RULE_SETUP


2118 
TC
;  
	gEXTERN_DIRECTIVE
;

2119 
YY_BREAK


2121 
YY_RULE_SETUP


2123 
TC
; 
BEGIN
(
INITIAL
);  
	gFILE_DIRECTIVE
;

2124 
YY_BREAK


2126 
YY_RULE_SETUP


2128 
TC
; 
BEGIN
(
NOT_OPCODE
);  
	gFUNC_DIRECTIVE
;

2129 
YY_BREAK


2131 
YY_RULE_SETUP


2133 
TC
;  
	gGLOBAL_DIRECTIVE
;

2134 
YY_BREAK


2136 
YY_RULE_SETUP


2138 
TC
;  
	gLOCAL_DIRECTIVE
;

2139 
YY_BREAK


2141 
YY_RULE_SETUP


2143 
TC
;  
	gLOC_DIRECTIVE
;

2144 
YY_BREAK


2146 
YY_RULE_SETUP


2148 
TC
;  
	gMAXNCTAPERSM_DIRECTIVE
;

2149 
YY_BREAK


2151 
YY_RULE_SETUP


2153 
TC
;  
	gMAXNNREG_DIRECTIVE
;

2154 
YY_BREAK


2156 
YY_RULE_SETUP


2158 
TC
;  
	gMAXNTID_DIRECTIVE
;

2159 
YY_BREAK


2161 
YY_RULE_SETUP


2163 
TC
;  
	gMINNCTAPERSM_DIRECTIVE
;

2164 
YY_BREAK


2166 
YY_RULE_SETUP


2168 
TC
;  
	gPARAM_DIRECTIVE
;

2169 
YY_BREAK


2171 
YY_RULE_SETUP


2173 
TC
;  
	gPRAGMA_DIRECTIVE
;

2174 
YY_BREAK


2176 
YY_RULE_SETUP


2178 
TC
;  
	gREG_DIRECTIVE
;

2179 
YY_BREAK


2181 
YY_RULE_SETUP


2183 
TC
;  
	gREQNTID_DIRECTIVE
;

2184 
YY_BREAK


2186 
YY_RULE_SETUP


2188 
TC
;  
	gSECTION_DIRECTIVE
;

2189 
YY_BREAK


2191 
YY_RULE_SETUP


2193 
TC
;  
	gSHARED_DIRECTIVE
;

2194 
YY_BREAK


2196 
YY_RULE_SETUP


2198 
TC
;  
	gSREG_DIRECTIVE
;

2199 
YY_BREAK


2201 
YY_RULE_SETUP


2203 
TC
;  
	gSTRUCT_DIRECTIVE
;

2204 
YY_BREAK


2206 
YY_RULE_SETUP


2208 
TC
;  
	gSURF_DIRECTIVE
;

2209 
YY_BREAK


2211 
YY_RULE_SETUP


2213 
TC
;  
	gTARGET_DIRECTIVE
;

2214 
YY_BREAK


2216 
YY_RULE_SETUP


2218 
TC
; 
BEGIN
(
NOT_OPCODE
);  
	gTEX_DIRECTIVE
;

2219 
YY_BREAK


2221 
YY_RULE_SETUP


2223 
TC
;  
	gUNION_DIRECTIVE
;

2224 
YY_BREAK


2226 
YY_RULE_SETUP


2228 
TC
;  
	gVERSION_DIRECTIVE
;

2229 
YY_BREAK


2231 
YY_RULE_SETUP


2233 
TC
;  
	gVISIBLE_DIRECTIVE
;

2234 
YY_BREAK


2236 
YY_RULE_SETUP


2238 
TC
;  
	gADDRESS_SIZE_DIRECTIVE
;

2239 
YY_BREAK


2241 
YY_RULE_SETUP


2243 
TC
;  
	gCONSTPTR_DIRECTIVE
;

2244 
YY_BREAK


2246 
YY_RULE_SETUP


2248 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CLOCK_REG
;  
	gSPECIAL_REGISTER
;

2249 
YY_BREAK


2251 
YY_RULE_SETUP


2253 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
HALFCLOCK_ID
;  
	gSPECIAL_REGISTER
;

2254 
YY_BREAK


2256 
YY_RULE_SETUP


2258 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CLOCK64_REG
;  
	gSPECIAL_REGISTER
;

2259 
YY_BREAK


2261 
YY_RULE_SETUP


2263 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CTAID_REG
;  
	gSPECIAL_REGISTER
;

2264 
YY_BREAK


2266 
YY_RULE_SETUP


2268 
TC
; 
ssˇnf
(
±x_ãxt
+7,"%u",&
±x_lvÆ
.
öt_vÆue
); 
	g±x_lvÆ
.
	göt_vÆue
<<=16;Ötx_lvÆ.öt_vÆuê+
ENVREG_REG
;  
	gSPECIAL_REGISTER
;

2269 
YY_BREAK


2271 
YY_RULE_SETUP


2273 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
GRIDID_REG
;  
	gSPECIAL_REGISTER
;

2274 
YY_BREAK


2276 
YY_RULE_SETUP


2278 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEID_REG
;  
	gSPECIAL_REGISTER
;

2279 
YY_BREAK


2281 
YY_RULE_SETUP


2283 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_EQ_REG
;  
	gSPECIAL_REGISTER
;

2284 
YY_BREAK


2286 
YY_RULE_SETUP


2288 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_LE_REG
;  
	gSPECIAL_REGISTER
;

2289 
YY_BREAK


2291 
YY_RULE_SETUP


2293 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_LT_REG
;  
	gSPECIAL_REGISTER
;

2294 
YY_BREAK


2296 
YY_RULE_SETUP


2298 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_GE_REG
;  
	gSPECIAL_REGISTER
;

2299 
YY_BREAK


2301 
YY_RULE_SETUP


2303 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_GT_REG
;  
	gSPECIAL_REGISTER
;

2304 
YY_BREAK


2306 
YY_RULE_SETUP


2308 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NCTAID_REG
;  
	gSPECIAL_REGISTER
;

2309 
YY_BREAK


2311 
YY_RULE_SETUP


2313 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NTID_REG
;  
	gSPECIAL_REGISTER
;

2314 
YY_BREAK


2316 
YY_RULE_SETUP


2318 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NSMID_REG
;  
	gSPECIAL_REGISTER
;

2319 
YY_BREAK


2321 
YY_RULE_SETUP


2323 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NWARPID_REG
;  
	gSPECIAL_REGISTER
;

2324 
YY_BREAK


2326 
YY_RULE_SETUP


2328 
TC
; 
ssˇnf
(
±x_ãxt
+3,"%u",&
±x_lvÆ
.
öt_vÆue
); 
	g±x_lvÆ
.
	göt_vÆue
<<=16;Ötx_lvÆ.öt_vÆuê+
PM_REG
;  
	gSPECIAL_REGISTER
;

2329 
YY_BREAK


2331 
YY_RULE_SETUP


2333 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SMID_REG
;  
	gSPECIAL_REGISTER
;

2334 
YY_BREAK


2336 
YY_RULE_SETUP


2338 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
TID_REG
;  
	gSPECIAL_REGISTER
;

2339 
YY_BREAK


2341 
YY_RULE_SETUP


2343 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
WARPID_REG
;  
	gSPECIAL_REGISTER
;

2344 
YY_BREAK


2346 
YY_RULE_SETUP


2348 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
WARPSZ_REG
;  
	gSPECIAL_REGISTER
;

2349 
YY_BREAK


2351 
YY_RULE_SETUP


2353 
TC
; 
	g±x_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±x_ãxt
);  
	gIDENTIFIER
;

2354 
YY_BREAK


2356 
YY_RULE_SETUP


2358 
TC
; 
	g±x_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±x_ãxt
);  
	gIDENTIFIER
;

2359 
YY_BREAK


2361 
YY_RULE_SETUP


2363 
TC
; 
ssˇnf
(
±x_ãxt
,"%lf", &
±x_lvÆ
.
doubÀ_vÆue
);  
	gDOUBLE_OPERAND
;

2364 
YY_BREAK


2366 
YY_RULE_SETUP


2368 
TC
; 
	gCHECK_UNSIGNED
; 
ssˇnf
(
±x_ãxt
,"%x", &
±x_lvÆ
.
öt_vÆue
);  
	gINT_OPERAND
;

2369 
YY_BREAK


2371 
YY_RULE_SETUP


2373 
TC
; 
¥ötf
("GPGPU-Sim: ERROR **Ö¨sög o˘ÆÇŸ (yëËim∂emíãd\n"); 
ab‹t
();  
	gINT_OPERAND
;

2374 
YY_BREAK


2376 
YY_RULE_SETUP


2378 
TC
; 
¥ötf
("GPGPU-Sim: ERROR **Ö¨sög bö¨yÇŸ (yëËim∂emíãd\n"); 
ab‹t
();  
	gINT_OPERAND
;

2379 
YY_BREAK


2381 
YY_RULE_SETUP


2383 
TC
; 
	gCHECK_UNSIGNED
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
©oi
(
±x_ãxt
);  
	gINT_OPERAND
;

2384 
YY_BREAK


2386 
YY_RULE_SETUP


2388 
TC
; 
ssˇnf
(
±x_ãxt
+2,"%x", (*)(*)&
±x_lvÆ
.
Êﬂt_vÆue
);  
	gFLOAT_OPERAND
;

2389 
YY_BREAK


2391 
YY_RULE_SETUP


2393 
TC
; 
ssˇnf
(
±x_ãxt
+2,"%Lx", (*)(*)&
±x_lvÆ
.
doubÀ_vÆue
);  
	gDOUBLE_OPERAND
;

2394 
YY_BREAK


2396 
YY_RULE_SETUP


2398 
TC
;  
	gS8_TYPE
;

2399 
YY_BREAK


2401 
YY_RULE_SETUP


2403 
TC
;  
	gS16_TYPE
;

2404 
YY_BREAK


2406 
YY_RULE_SETUP


2408 
TC
;  
	gS32_TYPE
;

2409 
YY_BREAK


2411 
YY_RULE_SETUP


2413 
TC
;  
	gS64_TYPE
;

2414 
YY_BREAK


2416 
YY_RULE_SETUP


2418 
TC
;  
	gU8_TYPE
;

2419 
YY_BREAK


2421 
YY_RULE_SETUP


2423 
TC
;  
	gU16_TYPE
;

2424 
YY_BREAK


2426 
YY_RULE_SETUP


2428 
TC
;  
	gU32_TYPE
;

2429 
YY_BREAK


2431 
YY_RULE_SETUP


2433 
TC
;  
	gU64_TYPE
;

2434 
YY_BREAK


2436 
YY_RULE_SETUP


2438 
TC
;  
	gF16_TYPE
;

2439 
YY_BREAK


2441 
YY_RULE_SETUP


2443 
TC
;  
	gF32_TYPE
;

2444 
YY_BREAK


2446 
YY_RULE_SETUP


2448 
TC
;  
	gF64_TYPE
;

2449 
YY_BREAK


2451 
YY_RULE_SETUP


2453 
TC
;  
	gFF64_TYPE
;

2454 
YY_BREAK


2456 
YY_RULE_SETUP


2458 
TC
;  
	gB8_TYPE
;

2459 
YY_BREAK


2461 
YY_RULE_SETUP


2463 
TC
;  
	gB16_TYPE
;

2464 
YY_BREAK


2466 
YY_RULE_SETUP


2468 
TC
;  
	gB32_TYPE
;

2469 
YY_BREAK


2471 
YY_RULE_SETUP


2473 
TC
;  
	gB64_TYPE
;

2474 
YY_BREAK


2476 
YY_RULE_SETUP


2478 
TC
;  
	gBB64_TYPE
;

2479 
YY_BREAK


2481 
YY_RULE_SETUP


2483 
TC
;  
	gBB128_TYPE
;

2484 
YY_BREAK


2486 
YY_RULE_SETUP


2488 
TC
;  
	gPRED_TYPE
;

2489 
YY_BREAK


2491 
YY_RULE_SETUP


2493 
TC
; 
BEGIN
(
NOT_OPCODE
);  
	gTEXREF_TYPE
;

2494 
YY_BREAK


2496 
YY_RULE_SETUP


2498 
TC
;  
	gSAMPLERREF_TYPE
;

2499 
YY_BREAK


2501 
YY_RULE_SETUP


2503 
TC
;  
	gSURFREF_TYPE
;

2504 
YY_BREAK


2506 
YY_RULE_SETUP


2508 
TC
;  
	gV2_TYPE
;

2509 
YY_BREAK


2511 
YY_RULE_SETUP


2513 
TC
;  
	gV3_TYPE
;

2514 
YY_BREAK


2516 
YY_RULE_SETUP


2518 
TC
;  
	gV4_TYPE
;

2519 
YY_BREAK


2521 
YY_RULE_SETUP


2523 
TC
;  
	gHALF_OPTION
;

2524 
YY_BREAK


2526 
YY_RULE_SETUP


2528 
TC
;  
	gEQU_OPTION
;

2529 
YY_BREAK


2531 
YY_RULE_SETUP


2533 
TC
;  
	gNEU_OPTION
;

2534 
YY_BREAK


2536 
YY_RULE_SETUP


2538 
TC
;  
	gLTU_OPTION
;

2539 
YY_BREAK


2541 
YY_RULE_SETUP


2543 
TC
;  
	gLEU_OPTION
;

2544 
YY_BREAK


2546 
YY_RULE_SETUP


2548 
TC
;  
	gGTU_OPTION
;

2549 
YY_BREAK


2551 
YY_RULE_SETUP


2553 
TC
;  
	gGEU_OPTION
;

2554 
YY_BREAK


2556 
YY_RULE_SETUP


2558 
TC
;  
	gNUM_OPTION
;

2559 
YY_BREAK


2561 
YY_RULE_SETUP


2563 
TC
;  
	gNAN_OPTION
;

2564 
YY_BREAK


2566 
YY_RULE_SETUP


2568 
TC
;  
	gSAT_OPTION
;

2569 
YY_BREAK


2571 
YY_RULE_SETUP


2573 
TC
;  
	gEQ_OPTION
;

2574 
YY_BREAK


2576 
YY_RULE_SETUP


2578 
TC
;  
	gNE_OPTION
;

2579 
YY_BREAK


2581 
YY_RULE_SETUP


2583 
TC
;  
	gLT_OPTION
;

2584 
YY_BREAK


2586 
YY_RULE_SETUP


2588 
TC
;  
	gLE_OPTION
;

2589 
YY_BREAK


2591 
YY_RULE_SETUP


2593 
TC
;  
	gGT_OPTION
;

2594 
YY_BREAK


2596 
YY_RULE_SETUP


2598 
TC
;  
	gGE_OPTION
;

2599 
YY_BREAK


2601 
YY_RULE_SETUP


2603 
TC
;  
	gCF_OPTION
;

2604 
YY_BREAK


2606 
YY_RULE_SETUP


2608 
TC
;  
	gSF_OPTION
;

2609 
YY_BREAK


2611 
YY_RULE_SETUP


2613 
TC
;  
	gNSF_OPTION
;

2614 
YY_BREAK


2616 
YY_RULE_SETUP


2618 
TC
;  
	gLO_OPTION
;

2619 
YY_BREAK


2621 
YY_RULE_SETUP


2623 
TC
;  
	gLS_OPTION
;

2624 
YY_BREAK


2626 
YY_RULE_SETUP


2628 
TC
;  
	gHI_OPTION
;

2629 
YY_BREAK


2631 
YY_RULE_SETUP


2633 
TC
;  
	gHS_OPTION
;

2634 
YY_BREAK


2636 
YY_RULE_SETUP


2638 
TC
;  
	gRNI_OPTION
;

2639 
YY_BREAK


2641 
YY_RULE_SETUP


2643 
TC
;  
	gRZI_OPTION
;

2644 
YY_BREAK


2646 
YY_RULE_SETUP


2648 
TC
;  
	gRMI_OPTION
;

2649 
YY_BREAK


2651 
YY_RULE_SETUP


2653 
TC
;  
	gRPI_OPTION
;

2654 
YY_BREAK


2656 
YY_RULE_SETUP


2658 
TC
;  
	gRN_OPTION
;

2659 
YY_BREAK


2661 
YY_RULE_SETUP


2663 
TC
;  
	gRZ_OPTION
;

2664 
YY_BREAK


2666 
YY_RULE_SETUP


2668 
TC
;  
	gRM_OPTION
;

2669 
YY_BREAK


2671 
YY_RULE_SETUP


2673 
TC
;  
	gRP_OPTION
;

2674 
YY_BREAK


2676 
YY_RULE_SETUP


2678 
TC
;  
	gFTZ_OPTION
;

2679 
YY_BREAK


2681 
YY_RULE_SETUP


2683 
TC
;  
	gNEG_OPTION
;

2684 
YY_BREAK


2686 
YY_RULE_SETUP


2688 
TC
;  
	gWIDE_OPTION
;

2689 
YY_BREAK


2691 
YY_RULE_SETUP


2693 
TC
;  
	gUNI_OPTION
;

2694 
YY_BREAK


2696 
YY_RULE_SETUP


2698 
TC
;  
	gAPPROX_OPTION
;

2699 
YY_BREAK


2701 
YY_RULE_SETUP


2703 
TC
;  
	gFULL_OPTION
;

2704 
YY_BREAK


2706 
YY_RULE_SETUP


2708 
TC
;  
	gANY_OPTION
;

2709 
YY_BREAK


2711 
YY_RULE_SETUP


2713 
TC
;  
	gALL_OPTION
;

2714 
YY_BREAK


2716 
YY_RULE_SETUP


2718 
TC
;  
	gGLOBAL_OPTION
;

2719 
YY_BREAK


2721 
YY_RULE_SETUP


2723 
TC
;  
	gCTA_OPTION
;

2724 
YY_BREAK


2726 
YY_RULE_SETUP


2728 
TC
;  
	gSYS_OPTION
;

2729 
YY_BREAK


2731 
YY_RULE_SETUP


2733 
TC
;  
	gEXIT_OPTION
;

2734 
YY_BREAK


2736 
YY_RULE_SETUP


2738 
TC
;  
	gABS_OPTION
;

2739 
YY_BREAK


2741 
YY_RULE_SETUP


2743 
TC
;  
	gTO_OPTION
;

2744 
YY_BREAK


2746 
YY_RULE_SETUP


2748 
TC
;  
	gCA_OPTION
;

2749 
YY_BREAK


2751 
YY_RULE_SETUP


2753 
TC
;  
	gCG_OPTION
;

2754 
YY_BREAK


2756 
YY_RULE_SETUP


2758 
TC
;  
	gCS_OPTION
;

2759 
YY_BREAK


2761 
YY_RULE_SETUP


2763 
TC
;  
	gLU_OPTION
;

2764 
YY_BREAK


2766 
YY_RULE_SETUP


2768 
TC
;  
	gCV_OPTION
;

2769 
YY_BREAK


2771 
YY_RULE_SETUP


2773 
TC
;  
	gWB_OPTION
;

2774 
YY_BREAK


2776 
YY_RULE_SETUP


2778 
TC
;  
	gWT_OPTION
;

2779 
YY_BREAK


2781 
YY_RULE_SETUP


2783 
TC
;  
	gATOMIC_AND
;

2784 
YY_BREAK


2786 
YY_RULE_SETUP


2788 
TC
;  
	gATOMIC_OR
;

2789 
YY_BREAK


2791 
YY_RULE_SETUP


2793 
TC
;  
	gATOMIC_XOR
;

2794 
YY_BREAK


2796 
YY_RULE_SETUP


2798 
TC
;  
	gATOMIC_CAS
;

2799 
YY_BREAK


2801 
YY_RULE_SETUP


2803 
TC
;  
	gATOMIC_EXCH
;

2804 
YY_BREAK


2806 
YY_RULE_SETUP


2808 
TC
;  
	gATOMIC_ADD
;

2809 
YY_BREAK


2811 
YY_RULE_SETUP


2813 
TC
;  
	gATOMIC_INC
;

2814 
YY_BREAK


2816 
YY_RULE_SETUP


2818 
TC
;  
	gATOMIC_DEC
;

2819 
YY_BREAK


2821 
YY_RULE_SETUP


2823 
TC
;  
	gATOMIC_MIN
;

2824 
YY_BREAK


2826 
YY_RULE_SETUP


2828 
TC
;  
	gATOMIC_MAX
;

2829 
YY_BREAK


2831 
YY_RULE_SETUP


2833 
TC
;  
	gGEOM_MODIFIER_1D
;

2834 
YY_BREAK


2836 
YY_RULE_SETUP


2838 
TC
;  
	gGEOM_MODIFIER_2D
;

2839 
YY_BREAK


2841 
YY_RULE_SETUP


2843 
TC
;  
	gGEOM_MODIFIER_3D
;

2844 
YY_BREAK


2846 
YY_RULE_SETUP


2848 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 0;  
	gDIMENSION_MODIFIER
;

2849 
YY_BREAK


2851 
YY_RULE_SETUP


2853 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 1;  
	gDIMENSION_MODIFIER
;

2854 
YY_BREAK


2856 
YY_RULE_SETUP


2858 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 2;  
	gDIMENSION_MODIFIER
;

2859 
YY_BREAK


2861 
YY_RULE_SETUP


2863 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 0;  
	gDIMENSION_MODIFIER
;

2864 
YY_BREAK


2866 
YY_RULE_SETUP


2868 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 1;  
	gDIMENSION_MODIFIER
;

2869 
YY_BREAK


2871 
YY_RULE_SETUP


2873 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 2;  
	gDIMENSION_MODIFIER
;

2874 
YY_BREAK


2876 
YY_RULE_SETUP


2878 
TC
;  
	gMINUS
;

2879 
YY_BREAK


2881 
YY_RULE_SETUP


2883 
TC
;  
	gPLUS
;

2884 
YY_BREAK


2886 
YY_RULE_SETUP


2888 
TC
;  
	gCOMMA
;

2889 
YY_BREAK


2891 
YY_RULE_SETUP


2893 
TC
;  
	gPRED
;

2894 
YY_BREAK


2896 
YY_RULE_SETUP


2898 
TC
;  
	gPIPE
;

2899 
YY_BREAK


2901 
YY_RULE_SETUP


2903 
TC
;  
	gLEFT_SQUARE_BRACKET
;

2904 
YY_BREAK


2906 
YY_RULE_SETUP


2908 
TC
;  
	gRIGHT_SQUARE_BRACKET
;

2909 
YY_BREAK


2911 
YY_RULE_SETUP


2913 
TC
;  
	gLEFT_ANGLE_BRACKET
;

2914 
YY_BREAK


2916 
YY_RULE_SETUP


2918 
TC
;  
	gRIGHT_ANGLE_BRACKET
;

2919 
YY_BREAK


2921 
YY_RULE_SETUP


2923 
TC
;  
	gLEFT_PAREN
;

2924 
YY_BREAK


2926 
YY_RULE_SETUP


2928 
TC
;  
	gRIGHT_PAREN
;

2929 
YY_BREAK


2931 
YY_RULE_SETUP


2933 
TC
; 
BEGIN
(
INITIAL
);  
	gCOLON
;

2934 
YY_BREAK


2936 
YY_RULE_SETUP


2938 
TC
; 
BEGIN
(
INITIAL
);  
	gSEMI_COLON
;

2939 
YY_BREAK


2941 
YY_RULE_SETUP


2943 
TC
;  
	gEXCLAMATION
;

2944 
YY_BREAK


2946 
YY_RULE_SETUP


2948 
TC
;  
	gEQUALS
;

2949 
YY_BREAK


2951 
YY_RULE_SETUP


2953 
TC
;  
	gLEFT_BRACE
;

2954 
YY_BREAK


2956 
YY_RULE_SETUP


2958 
TC
;  
	gRIGHT_BRACE
;

2959 
YY_BREAK


2961 
YY_RULE_SETUP


2963 
TC
;  
	gPERIOD
;

2964 
YY_BREAK


2966 
YY_RULE_SETUP


2968 
TC
;  
	gBACKSLASH
;

2969 
YY_BREAK


2971 
YY_RULE_SETUP


2973 
TC
;

2974 
YY_BREAK


2977 
YY_RULE_SETUP


2979 
cﬁ
=0; 
°∫˝y
(
löebuf
, 
±x_ãxt
 + 1, 1024); 
yyÀss
( 1 );

2980 
YY_BREAK


2982 
YY_RULE_SETUP


2984 
TC
;

2985 
YY_BREAK


2987 
YY_RULE_SETUP


2989 
TC
;

2990 
YY_BREAK


2994 
YY_RULE_SETUP


2996 
BEGIN
(
IN_COMMENT
);

2997 
YY_BREAK


3001 
YY_RULE_SETUP


3003 
BEGIN
(
INITIAL
);

3004 
YY_BREAK


3006 
YY_RULE_SETUP


3009 
YY_BREAK


3011 
YY_RULE_SETUP


3014 
YY_BREAK


3017 
YY_RULE_SETUP


3019 
TC
;

3020 
YY_BREAK


3024 
YY_RULE_SETUP


3026 
BEGIN
(
IN_STRING
);

3027 
YY_BREAK


3031 
YY_RULE_SETUP


3033 
TC
; 
BEGIN
(
INITIAL
);  
	gSTRING
;

3034 
YY_BREAK


3037 
YY_RULE_SETUP


3039 
TC
; 
	g±x_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±x_ãxt
);

3040 
YY_BREAK


3044 
YY_RULE_SETUP


3047 
YY_BREAK


3049 
YY_RULE_SETUP


3051 
TC
; 
±x_îr‹
((c⁄° *)
NULL
);

3052 
YY_BREAK


3054 
YY_RULE_SETUP


3056 
ECHO
;

3057 
	gYY_BREAK


3059 
YY_STATE_EOF
(
INITIAL
):

3060 
YY_STATE_EOF
(
IN_STRING
):

3061 
YY_STATE_EOF
(
IN_COMMENT
):

3062 
YY_STATE_EOF
(
NOT_OPCODE
):

3063 
yyãrmö©e
();

3065 
	gYY_END_OF_BUFFER
:

3068 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

3071 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

3072 
YY_RESTORE_YY_MORE_OFFSET


3074 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

3085 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

3086 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
±x_ö
;

3087 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

3097 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

3099 
yy_°©e_ty≥
 
yy_√xt_°©e
;

3101 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

3103 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

3114 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

3116 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3118 i‡–
	gyy_√xt_°©e
 )

3121 
	gyy_˝
 = ++(
yy_c_buf_p
);

3122 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

3123 
	gyy_m©ch
;

3128 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

3129 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

3130 
	gyy_föd_a˘i⁄
;

3134  
yy_gë_√xt_buf„r
( ) )

3136 
	gEOB_ACT_END_OF_FILE
:

3138 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

3140 i‡–
±x_wøp
( ) )

3151 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3153 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

3154 
	gdo_a˘i⁄
;

3159 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

3160 
	gYY_NEW_FILE
;

3165 
	gEOB_ACT_CONTINUE_SCAN
:

3166 (
yy_c_buf_p
) =

3167 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

3169 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

3171 
	gyy_˝
 = (
yy_c_buf_p
);

3172 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3173 
	gyy_m©ch
;

3175 
	gEOB_ACT_LAST_MATCH
:

3176 (
yy_c_buf_p
) =

3177 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

3179 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

3181 
	gyy_˝
 = (
yy_c_buf_p
);

3182 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3183 
	gyy_föd_a˘i⁄
;

3189 
YY_FATAL_ERROR
(

3202 
	$yy_gë_√xt_buf„r
 ()

3204 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

3205 *
sour˚
 = (
yyãxt_±r
);

3206 
numbî_to_move
, 
i
;

3207 
ªt_vÆ
;

3209 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

3210 
	`YY_FATAL_ERROR
(

3213 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

3215 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

3220  
EOB_ACT_END_OF_FILE
;

3228  
EOB_ACT_LAST_MATCH
;

3235 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

3237  
i
 = 0; i < 
numbî_to_move
; ++i )

3238 *(
de°
++Ë*(
sour˚
++);

3240 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

3244 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

3248 
num_to_ªad
 =

3249 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

3251  
num_to_ªad
 <= 0 )

3255 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

3257 
yy_c_buf_p_off£t
 =

3258 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

3260 i‡–
b
->
yy_is_our_buf„r
 )

3262 
√w_size
 = 
b
->
yy_buf_size
 * 2;

3264 i‡–
√w_size
 <= 0 )

3265 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

3267 
b
->
yy_buf_size
 *= 2;

3269 
b
->
yy_ch_buf
 = (*)

3271 
	`±x_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

3275 
b
->
yy_ch_buf
 = 0;

3277 i‡–! 
b
->
yy_ch_buf
 )

3278 
	`YY_FATAL_ERROR
(

3281 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

3283 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

3284 
numbî_to_move
 - 1;

3288 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

3289 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

3292 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

3293 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

3295 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3298 i‡–(
yy_n_ch¨s
) == 0 )

3300 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

3302 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

3303 
	`±x_ª°¨t
(
±x_ö
 );

3308 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

3309 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

3310 
YY_BUFFER_EOF_PENDING
;

3315 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

3317 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

3319 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

3320 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`±x_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

3321 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

3322 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

3325 (
yy_n_ch¨s
Ë+
numbî_to_move
;

3326 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

3327 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

3329 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

3331  
ªt_vÆ
;

3332 
	}
}

3336 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

3338 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

3339 *
yy_˝
;

3341 
yy_cuºít_°©e
 = (
yy_°¨t
);

3343  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

3345 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

3346 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

3348 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

3349 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

3351  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

3353 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

3354 i‡–
yy_cuºít_°©e
 >= 1267 )

3355 
yy_c
 = 
yy_mëa
[() yy_c];

3357 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

3360  
yy_cuºít_°©e
;

3361 
	}
}

3368 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

3370 
yy_is_jam
;

3371 *
yy_˝
 = (
yy_c_buf_p
);

3373 
YY_CHAR
 
yy_c
 = 1;

3374 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

3376 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

3377 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

3379  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

3381 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

3382 i‡–
yy_cuºít_°©e
 >= 1267 )

3383 
yy_c
 = 
yy_mëa
[() yy_c];

3385 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

3386 
yy_is_jam
 = (
yy_cuºít_°©e
 == 1266);

3388  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

3389 
	}
}

3391 #i‚de‡
YY_NO_INPUT


3392 #ifde‡
__˝lu•lus


3393 
	$yyöput
 ()

3395 
	$öput
 ()

3399 
c
;

3401 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3403 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

3409 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

3411 *(
yy_c_buf_p
) = '\0';

3415 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

3416 ++(
yy_c_buf_p
);

3418  
	`yy_gë_√xt_buf„r
( ) )

3420 
EOB_ACT_LAST_MATCH
:

3432 
	`±x_ª°¨t
(
±x_ö
 );

3436 
EOB_ACT_END_OF_FILE
:

3438 i‡–
	`±x_wøp
( ) )

3439  
EOF
;

3441 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

3442 
YY_NEW_FILE
;

3443 #ifde‡
__˝lu•lus


3444  
	`yyöput
();

3446  
	`öput
();

3450 
EOB_ACT_CONTINUE_SCAN
:

3451 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

3457 
c
 = *(*Ë(
yy_c_buf_p
);

3458 *(
yy_c_buf_p
) = '\0';

3459 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

3461 i‡–
c
 == '\n' )

3463 
±x_löío
++;

3466  
c
;

3467 
	}
}

3475 
	$±x_ª°¨t
 (
FILE
 * 
öput_fûe
 )

3478 i‡–! 
YY_CURRENT_BUFFER
 ){

3479 
	`±x_ísuª_buf„r_°ack
 ();

3480 
YY_CURRENT_BUFFER_LVALUE
 =

3481 
	`±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 );

3484 
	`±x__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

3485 
	`±x__lﬂd_buf„r_°©e
( );

3486 
	}
}

3492 
	$±x__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3500 
	`±x_ísuª_buf„r_°ack
 ();

3501 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

3504 i‡–
YY_CURRENT_BUFFER
 )

3507 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3508 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3509 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3512 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3513 
	`±x__lﬂd_buf„r_°©e
( );

3520 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3521 
	}
}

3523 
	$±x__lﬂd_buf„r_°©e
 ()

3525 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

3526 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

3527 
±x_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

3528 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

3529 
	}
}

3537 
YY_BUFFER_STATE
 
	$±x__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

3539 
YY_BUFFER_STATE
 
b
;

3541 
b
 = (
YY_BUFFER_STATE
Ë
	`±x_Æloc
(–
yy_buf„r_°©e
 ) );

3542 i‡–! 
b
 )

3543 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__create_buffer()" );

3545 
b
->
yy_buf_size
 = 
size
;

3550 
b
->
yy_ch_buf
 = (*Ë
	`±x_Æloc
(b->
yy_buf_size
 + 2 );

3551 i‡–! 
b
->
yy_ch_buf
 )

3552 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__create_buffer()" );

3554 
b
->
yy_is_our_buf„r
 = 1;

3556 
	`±x__öô_buf„r
(
b
,
fûe
 );

3558  
b
;

3559 
	}
}

3565 
	$±x__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3568 i‡–! 
b
 )

3571 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3572 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

3574 i‡–
b
->
yy_is_our_buf„r
 )

3575 
	`±x_‰ì
((*Ë
b
->
yy_ch_buf
 );

3577 
	`±x_‰ì
((*Ë
b
 );

3578 
	}
}

3580 #i‚de‡
__˝lu•lus


3581 
ißây
 ();

3588 
	$±x__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

3591 
€ºno
 = 
î∫o
;

3593 
	`±x__Êush_buf„r
(
b
 );

3595 
b
->
yy_öput_fûe
 = 
fûe
;

3596 
b
->
yy_fûl_buf„r
 = 1;

3602 i‡(
b
 !
YY_CURRENT_BUFFER
){

3603 
b
->
yy_bs_löío
 = 1;

3604 
b
->
yy_bs_cﬁumn
 = 0;

3607 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

3609 
î∫o
 = 
€ºno
;

3610 
	}
}

3616 
	$±x__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3618 i‡–! 
b
 )

3621 
b
->
yy_n_ch¨s
 = 0;

3627 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

3628 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

3630 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

3632 
b
->
yy_©_bﬁ
 = 1;

3633 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3635 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3636 
	`±x__lﬂd_buf„r_°©e
( );

3637 
	}
}

3645 
	$±x_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3647 i‡(
√w_buf„r
 =
NULL
)

3650 
	`±x_ísuª_buf„r_°ack
();

3653 i‡–
YY_CURRENT_BUFFER
 )

3656 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3657 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3658 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3662 i‡(
YY_CURRENT_BUFFER
)

3663 (
yy_buf„r_°ack_t›
)++;

3664 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3667 
	`±x__lﬂd_buf„r_°©e
( );

3668 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3669 
	}
}

3675 
	$±x_p›_buf„r_°©e
 ()

3677 i‡(!
YY_CURRENT_BUFFER
)

3680 
	`±x__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3681 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3682 i‡((
yy_buf„r_°ack_t›
) > 0)

3683 --(
yy_buf„r_°ack_t›
);

3685 i‡(
YY_CURRENT_BUFFER
) {

3686 
	`±x__lﬂd_buf„r_°©e
( );

3687 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3689 
	}
}

3694 
	$±x_ísuª_buf„r_°ack
 ()

3696 
num_to_Æloc
;

3698 i‡(!(
yy_buf„r_°ack
)) {

3704 
num_to_Æloc
 = 1;

3705 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
±x_Æloc


3706 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3708 i‡–! (
yy_buf„r_°ack
) )

3709 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx_ensure_buffer_stack()" );

3711 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

3713 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3714 (
yy_buf„r_°ack_t›
) = 0;

3718 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

3721 
grow_size
 = 8 ;

3723 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

3724 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
±x_ªÆloc


3725 ((
yy_buf„r_°ack
),

3726 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3728 i‡–! (
yy_buf„r_°ack
) )

3729 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx_ensure_buffer_stack()" );

3732 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

3733 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3735 
	}
}

3743 
YY_BUFFER_STATE
 
	$±x__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

3745 
YY_BUFFER_STATE
 
b
;

3747 i‡–
size
 < 2 ||

3748 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

3749 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

3753 
b
 = (
YY_BUFFER_STATE
Ë
	`±x_Æloc
(–
yy_buf„r_°©e
 ) );

3754 i‡–! 
b
 )

3755 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__scan_buffer()" );

3757 
b
->
yy_buf_size
 = 
size
 - 2;

3758 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

3759 
b
->
yy_is_our_buf„r
 = 0;

3760 
b
->
yy_öput_fûe
 = 0;

3761 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

3762 
b
->
yy_is_öãø˘ive
 = 0;

3763 
b
->
yy_©_bﬁ
 = 1;

3764 
b
->
yy_fûl_buf„r
 = 0;

3765 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3767 
	`±x__swôch_to_buf„r
(
b
 );

3769  
b
;

3770 
	}
}

3780 
YY_BUFFER_STATE
 
	$±x__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

3783  
	`±x__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

3784 
	}
}

3793 
YY_BUFFER_STATE
 
	$±x__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

3795 
YY_BUFFER_STATE
 
b
;

3796 *
buf
;

3797 
yy_size_t
 
n
;

3798 
i
;

3801 
n
 = 
_yybyãs_Àn
 + 2;

3802 
buf
 = (*Ë
	`±x_Æloc
(
n
 );

3803 i‡–! 
buf
 )

3804 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__scan_bytes()" );

3806  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

3807 
buf
[
i
] = 
yybyãs
[i];

3809 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

3811 
b
 = 
	`±x__sˇn_buf„r
(
buf
,
n
 );

3812 i‡–! 
b
 )

3813 
	`YY_FATAL_ERROR
( "bad buffer inÖtx__scan_bytes()" );

3818 
b
->
yy_is_our_buf„r
 = 1;

3820  
b
;

3821 
	}
}

3823 #i‚de‡
YY_EXIT_FAILURE


3824 
	#YY_EXIT_FAILURE
 2

	)

3827 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

3829 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

3830 
	`exô
–
YY_EXIT_FAILURE
 );

3831 
	}
}

3835 #unde‡
yyÀss


3836 
	#yyÀss
(
n
) \

3840 
yyÀss_ma¸o_¨g
 = (
n
); \

3841 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

3842 
±x_ãxt
[
±x_Àng
] = (
yy_hﬁd_ch¨
); \

3843 (
yy_c_buf_p
Ë
±x_ãxt
 + 
yyÀss_ma¸o_¨g
; \

3844 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

3845 *(
yy_c_buf_p
) = '\0'; \

3846 
±x_Àng
 = 
yyÀss_ma¸o_¨g
; \

3848  0 )

	)

3855 
	$±x_gë_löío
 ()

3858  
±x_löío
;

3859 
	}
}

3864 
FILE
 *
	$±x_gë_ö
 ()

3866  
±x_ö
;

3867 
	}
}

3872 
FILE
 *
	$±x_gë_out
 ()

3874  
±x_out
;

3875 
	}
}

3880 
	$±x_gë_Àng
 ()

3882  
±x_Àng
;

3883 
	}
}

3889 *
	$±x_gë_ãxt
 ()

3891  
±x_ãxt
;

3892 
	}
}

3898 
	$±x_£t_löío
 (
löe_numbî
 )

3901 
±x_löío
 = 
löe_numbî
;

3902 
	}
}

3910 
	$±x_£t_ö
 (
FILE
 * 
ö_°r
 )

3912 
±x_ö
 = 
ö_°r
 ;

3913 
	}
}

3915 
	$±x_£t_out
 (
FILE
 * 
out_°r
 )

3917 
±x_out
 = 
out_°r
 ;

3918 
	}
}

3920 
	$±x_gë_debug
 ()

3922  
±x__Êex_debug
;

3923 
	}
}

3925 
	$±x_£t_debug
 (
bdebug
 )

3927 
±x__Êex_debug
 = 
bdebug
 ;

3928 
	}
}

3930 
	$yy_öô_globÆs
 ()

3937 
±x_löío
 = 1;

3939 (
yy_buf„r_°ack
) = 0;

3940 (
yy_buf„r_°ack_t›
) = 0;

3941 (
yy_buf„r_°ack_max
) = 0;

3942 (
yy_c_buf_p
) = (*) 0;

3943 (
yy_öô
) = 0;

3944 (
yy_°¨t
) = 0;

3947 #ifde‡
YY_STDINIT


3948 
±x_ö
 = 
°dö
;

3949 
±x_out
 = 
°dout
;

3951 
±x_ö
 = (
FILE
 *) 0;

3952 
±x_out
 = (
FILE
 *) 0;

3959 
	}
}

3962 
	$±x_Àx_de°roy
 ()

3966 
YY_CURRENT_BUFFER
){

3967 
	`±x__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3968 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3969 
	`±x_p›_buf„r_°©e
();

3973 
	`±x_‰ì
((
yy_buf„r_°ack
) );

3974 (
yy_buf„r_°ack
Ë
NULL
;

3978 
	`yy_öô_globÆs
( );

3981 
	}
}

3987 #i‚de‡
yyãxt_±r


3988 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

3990 
i
;

3991  
i
 = 0; i < 
n
; ++i )

3992 
s1
[
i
] = 
s2
[i];

3993 
	}
}

3996 #ifde‡
YY_NEED_STRLEN


3997 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

3999 
n
;

4000  
n
 = 0; 
s
[n]; ++n )

4003  
n
;

4004 
	}
}

4007 *
	$±x_Æloc
 (
yy_size_t
 
size
 )

4009  (*Ë
	`mÆloc
–
size
 );

4010 
	}
}

4012 *
	$±x_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

4021  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

4022 
	}
}

4024 
	$±x_‰ì
 (* 
±r
 )

4026 
	`‰ì
–(*Ë
±r
 );

4027 
	}
}

4029 
	#YYTABLES_NAME
 "yyèbÀs"

	)

4035 
g_îr‹_dëe˘ed
;

4036 c⁄° *
g_fûíame
;

4038 
	$±x_îr‹
–c⁄° *
s
 )

4040 
i
;

4041 
g_îr‹_dëe˘ed
 = 1;

4042 
	`fÊush
(
°dout
);

4043 if–
s
 !
NULL
 )

4044 
	`¥ötf
("%s:%u: Sy¡axÉº‹:\n\n", 
g_fûíame
, 
±x_löío
 );

4045 
	`¥ötf
(" %s\n", 
löebuf
 );

4046 
	`¥ötf
(" ");

4047  
i
=0; i < 
cﬁ
-1; i++ ) {

4048 if–
löebuf
[
i
] ='\t' ) 
	`¥ötf
("\t");

4049 
	`¥ötf
(" ");

4052 
	`¥ötf
("^\n\n");

4053 
	`fÊush
(
°dout
);

4056 
	}
}

	@cuobjdump_to_ptxplus/ptx.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
±x_∑r£


	)

68 
	#yyÀx
 
±x_Àx


	)

69 
	#yyîr‹
 
±x_îr‹


	)

70 
	#yylvÆ
 
±x_lvÆ


	)

71 
	#yych¨
 
±x_ch¨


	)

72 
	#yydebug
 
±x_debug


	)

73 
	#yy√ºs
 
±x_√ºs


	)

83 #i‚de‡
YYDEBUG


84 
	#YYDEBUG
 1

	)

88 #ifde‡
YYERROR_VERBOSE


89 #unde‡
YYERROR_VERBOSE


90 
	#YYERROR_VERBOSE
 1

	)

92 
	#YYERROR_VERBOSE
 0

	)

96 #i‚de‡
YYTOKEN_TABLE


97 
	#YYTOKEN_TABLE
 0

	)

102 #i‚de‡
YYTOKENTYPE


103 
	#YYTOKENTYPE


	)

106 
	eyytokíty≥
 {

107 
	mSTRING
 = 258,

108 
	mOPCODE
 = 259,

109 
	mALIGN_DIRECTIVE
 = 260,

110 
	mBRANCHTARGETS_DIRECTIVE
 = 261,

111 
	mBYTE_DIRECTIVE
 = 262,

112 
	mCALLPROTOTYPE_DIRECTIVE
 = 263,

113 
	mCALLTARGETS_DIRECTIVE
 = 264,

114 
	mCONST_DIRECTIVE
 = 265,

115 
	mCONSTPTR_DIRECTIVE
 = 266,

116 
	mENTRY_DIRECTIVE
 = 267,

117 
	mEXTERN_DIRECTIVE
 = 268,

118 
	mFILE_DIRECTIVE
 = 269,

119 
	mFUNC_DIRECTIVE
 = 270,

120 
	mGLOBAL_DIRECTIVE
 = 271,

121 
	mLOCAL_DIRECTIVE
 = 272,

122 
	mLOC_DIRECTIVE
 = 273,

123 
	mMAXNCTAPERSM_DIRECTIVE
 = 274,

124 
	mMAXNNREG_DIRECTIVE
 = 275,

125 
	mMAXNTID_DIRECTIVE
 = 276,

126 
	mMINNCTAPERSM_DIRECTIVE
 = 277,

127 
	mPARAM_DIRECTIVE
 = 278,

128 
	mPRAGMA_DIRECTIVE
 = 279,

129 
	mREG_DIRECTIVE
 = 280,

130 
	mREQNTID_DIRECTIVE
 = 281,

131 
	mSECTION_DIRECTIVE
 = 282,

132 
	mSHARED_DIRECTIVE
 = 283,

133 
	mSREG_DIRECTIVE
 = 284,

134 
	mSTRUCT_DIRECTIVE
 = 285,

135 
	mSURF_DIRECTIVE
 = 286,

136 
	mTARGET_DIRECTIVE
 = 287,

137 
	mTEX_DIRECTIVE
 = 288,

138 
	mUNION_DIRECTIVE
 = 289,

139 
	mVERSION_DIRECTIVE
 = 290,

140 
	mADDRESS_SIZE_DIRECTIVE
 = 291,

141 
	mVISIBLE_DIRECTIVE
 = 292,

142 
	mIDENTIFIER
 = 293,

143 
	mINT_OPERAND
 = 294,

144 
	mFLOAT_OPERAND
 = 295,

145 
	mDOUBLE_OPERAND
 = 296,

146 
	mS8_TYPE
 = 297,

147 
	mS16_TYPE
 = 298,

148 
	mS32_TYPE
 = 299,

149 
	mS64_TYPE
 = 300,

150 
	mU8_TYPE
 = 301,

151 
	mU16_TYPE
 = 302,

152 
	mU32_TYPE
 = 303,

153 
	mU64_TYPE
 = 304,

154 
	mF16_TYPE
 = 305,

155 
	mF32_TYPE
 = 306,

156 
	mF64_TYPE
 = 307,

157 
	mFF64_TYPE
 = 308,

158 
	mB8_TYPE
 = 309,

159 
	mB16_TYPE
 = 310,

160 
	mB32_TYPE
 = 311,

161 
	mB64_TYPE
 = 312,

162 
	mBB64_TYPE
 = 313,

163 
	mBB128_TYPE
 = 314,

164 
	mPRED_TYPE
 = 315,

165 
	mTEXREF_TYPE
 = 316,

166 
	mSAMPLERREF_TYPE
 = 317,

167 
	mSURFREF_TYPE
 = 318,

168 
	mV2_TYPE
 = 319,

169 
	mV3_TYPE
 = 320,

170 
	mV4_TYPE
 = 321,

171 
	mCOMMA
 = 322,

172 
	mPRED
 = 323,

173 
	mHALF_OPTION
 = 324,

174 
	mEQ_OPTION
 = 325,

175 
	mNE_OPTION
 = 326,

176 
	mLT_OPTION
 = 327,

177 
	mLE_OPTION
 = 328,

178 
	mGT_OPTION
 = 329,

179 
	mGE_OPTION
 = 330,

180 
	mLO_OPTION
 = 331,

181 
	mLS_OPTION
 = 332,

182 
	mHI_OPTION
 = 333,

183 
	mHS_OPTION
 = 334,

184 
	mEQU_OPTION
 = 335,

185 
	mNEU_OPTION
 = 336,

186 
	mLTU_OPTION
 = 337,

187 
	mLEU_OPTION
 = 338,

188 
	mGTU_OPTION
 = 339,

189 
	mGEU_OPTION
 = 340,

190 
	mNUM_OPTION
 = 341,

191 
	mNAN_OPTION
 = 342,

192 
	mCF_OPTION
 = 343,

193 
	mSF_OPTION
 = 344,

194 
	mNSF_OPTION
 = 345,

195 
	mLEFT_SQUARE_BRACKET
 = 346,

196 
	mRIGHT_SQUARE_BRACKET
 = 347,

197 
	mWIDE_OPTION
 = 348,

198 
	mSPECIAL_REGISTER
 = 349,

199 
	mMINUS
 = 350,

200 
	mPLUS
 = 351,

201 
	mCOLON
 = 352,

202 
	mSEMI_COLON
 = 353,

203 
	mEXCLAMATION
 = 354,

204 
	mPIPE
 = 355,

205 
	mRIGHT_BRACE
 = 356,

206 
	mLEFT_BRACE
 = 357,

207 
	mEQUALS
 = 358,

208 
	mPERIOD
 = 359,

209 
	mBACKSLASH
 = 360,

210 
	mDIMENSION_MODIFIER
 = 361,

211 
	mRN_OPTION
 = 362,

212 
	mRZ_OPTION
 = 363,

213 
	mRM_OPTION
 = 364,

214 
	mRP_OPTION
 = 365,

215 
	mRNI_OPTION
 = 366,

216 
	mRZI_OPTION
 = 367,

217 
	mRMI_OPTION
 = 368,

218 
	mRPI_OPTION
 = 369,

219 
	mUNI_OPTION
 = 370,

220 
	mGEOM_MODIFIER_1D
 = 371,

221 
	mGEOM_MODIFIER_2D
 = 372,

222 
	mGEOM_MODIFIER_3D
 = 373,

223 
	mSAT_OPTION
 = 374,

224 
	mFTZ_OPTION
 = 375,

225 
	mNEG_OPTION
 = 376,

226 
	mATOMIC_AND
 = 377,

227 
	mATOMIC_OR
 = 378,

228 
	mATOMIC_XOR
 = 379,

229 
	mATOMIC_CAS
 = 380,

230 
	mATOMIC_EXCH
 = 381,

231 
	mATOMIC_ADD
 = 382,

232 
	mATOMIC_INC
 = 383,

233 
	mATOMIC_DEC
 = 384,

234 
	mATOMIC_MIN
 = 385,

235 
	mATOMIC_MAX
 = 386,

236 
	mLEFT_ANGLE_BRACKET
 = 387,

237 
	mRIGHT_ANGLE_BRACKET
 = 388,

238 
	mLEFT_PAREN
 = 389,

239 
	mRIGHT_PAREN
 = 390,

240 
	mAPPROX_OPTION
 = 391,

241 
	mFULL_OPTION
 = 392,

242 
	mANY_OPTION
 = 393,

243 
	mALL_OPTION
 = 394,

244 
	mGLOBAL_OPTION
 = 395,

245 
	mCTA_OPTION
 = 396,

246 
	mSYS_OPTION
 = 397,

247 
	mEXIT_OPTION
 = 398,

248 
	mABS_OPTION
 = 399,

249 
	mTO_OPTION
 = 400,

250 
	mCA_OPTION
 = 401,

251 
	mCG_OPTION
 = 402,

252 
	mCS_OPTION
 = 403,

253 
	mLU_OPTION
 = 404,

254 
	mCV_OPTION
 = 405,

255 
	mWB_OPTION
 = 406,

256 
	mWT_OPTION
 = 407

262 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


263 
	uYYSTYPE


269 
	mdoubÀ_vÆue
;

270 
	mÊﬂt_vÆue
;

271 
	möt_vÆue
;

272 * 
	m°rög_vÆue
;

273 * 
	m±r_vÆue
;

279 } 
	tYYSTYPE
;

280 
	#YYSTYPE_IS_TRIVIAL
 1

	)

281 
	#yy°y≥
 
YYSTYPE


	)

282 
	#YYSTYPE_IS_DECLARED
 1

	)

291 
	~"±x_∑r£r.h
"

292 
	~<°dlib.h
>

293 
	~<°rög.h
>

294 
	~<m©h.h
>

295 
sy¡ax_nŸ_im∂emíãd
();

296 
g_func_de˛
;

297 
±x_Àx
();

298 
±x_îr‹
(const *);

308 #ifde‡
YYTYPE_UINT8


309 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

311 
	tyyty≥_uöt8
;

314 #ifde‡
YYTYPE_INT8


315 
YYTYPE_INT8
 
	tyyty≥_öt8
;

316 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

317 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

318 sig√d 
	tyyty≥_öt8
;

320 
	tyyty≥_öt8
;

323 #ifde‡
YYTYPE_UINT16


324 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

326 
	tyyty≥_uöt16
;

329 #ifde‡
YYTYPE_INT16


330 
YYTYPE_INT16
 
	tyyty≥_öt16
;

332 
	tyyty≥_öt16
;

335 #i‚de‡
YYSIZE_T


336 #ifde‡
__SIZE_TYPE__


337 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

338 #ñi‡
deföed
 
size_t


339 
	#YYSIZE_T
 
size_t


	)

340 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

341 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

342 
	~<°ddef.h
>

343 
	#YYSIZE_T
 
size_t


	)

345 
	#YYSIZE_T
 

	)

349 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

351 #i‚de‡
YY_


352 #i‡
YYENABLE_NLS


353 #i‡
ENABLE_NLS


354 
	~<liböé.h
>

355 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

358 #i‚de‡
YY_


359 
	#YY_
(
msgid
Ë
	)
msgid

364 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


365 
	#YYUSE
(
e
Ë((Ë”))

	)

367 
	#YYUSE
(
e
Ë

	)

371 #i‚de‡
löt


372 
	#YYID
(
n
Ë“)

	)

374 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

375 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

377 
	$YYID
 (
yyi
)

380 
	$YYID
 (
yyi
)

381 
yyi
;

384  
yyi
;

385 
	}
}

388 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


392 #ifde‡
YYSTACK_USE_ALLOCA


393 #i‡
YYSTACK_USE_ALLOCA


394 #ifde‡
__GNUC__


395 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

396 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


397 
	~<Æloˇ.h
>

398 #ñi‡
deföed
 
_AIX


399 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

400 #ñi‡
deföed
 
_MSC_VER


401 
	~<mÆloc.h
>

402 
	#Æloˇ
 
_Æloˇ


	)

404 
	#YYSTACK_ALLOC
 
Æloˇ


	)

405 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

406 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

407 
	~<°dlib.h
>

408 #i‚de‡
_STDLIB_H


409 
	#_STDLIB_H
 1

	)

416 #ifde‡
YYSTACK_ALLOC


418 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

419 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


424 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

427 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

428 
	#YYSTACK_FREE
 
YYFREE


	)

429 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


430 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

432 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

433 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

434 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

435 
	~<°dlib.h
>

436 #i‚de‡
_STDLIB_H


437 
	#_STDLIB_H
 1

	)

440 #i‚de‡
YYMALLOC


441 
	#YYMALLOC
 
mÆloc


	)

442 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

443 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

444 *
mÆloc
 (
YYSIZE_T
);

447 #i‚de‡
YYFREE


448 
	#YYFREE
 
‰ì


	)

449 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

450 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

451 
‰ì
 (*);

458 #i‡(! 
deföed
 
yyovîÊow
 \

459 && (! 
deföed
 
	g__˝lu•lus
 \

460 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

463 
	uyyÆloc


465 
yyty≥_öt16
 
	myyss_Æloc
;

466 
YYSTYPE
 
	myyvs_Æloc
;

470 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

474 
	#YYSTACK_BYTES
(
N
) \

475 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

476 + 
YYSTACK_GAP_MAXIMUM
)

	)

480 #i‚de‡
YYCOPY


481 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

482 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

483 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

485 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

488 
YYSIZE_T
 
yyi
; \

489 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

490 (
To
)[
yyi
] = (
From
)[yyi]; \

492 
	`YYID
 (0))

	)

501 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

504 
YYSIZE_T
 
yy√wbyãs
; \

505 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

506 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

507 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

508 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

510 
	`YYID
 (0))

	)

515 
	#YYFINAL
 2

	)

517 
	#YYLAST
 582

	)

520 
	#YYNTOKENS
 153

	)

522 
	#YYNNTS
 60

	)

524 
	#YYNRULES
 252

	)

526 
	#YYNSTATES
 351

	)

529 
	#YYUNDEFTOK
 2

	)

530 
	#YYMAXUTOK
 407

	)

532 
	#YYTRANSLATE
(
YYX
) \

533 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

536 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

581 #i‡
YYDEBUG


584 c⁄° 
yyty≥_uöt16
 
	gyy¥hs
[] =

615 c⁄° 
yyty≥_öt16
 
	gyyrhs
[] =

693 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

724 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


727 c⁄° *c⁄° 
	gyyäame
[] =

780 #ifde‡
YYPRINT


783 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

805 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

836 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

869 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

910 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

922 
	#YYPACT_NINF
 -242

	)

923 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

964 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

978 
	#YYTABLE_NINF
 -122

	)

979 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1042 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1107 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1147 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1148 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1149 
	#YYEMPTY
 (-2)

	)

1150 
	#YYEOF
 0

	)

1152 
	#YYACCEPT
 
yyac˚±œb


	)

1153 
	#YYABORT
 
yyab‹éab


	)

1154 
	#YYERROR
 
yyîr‹œb


	)

1161 
	#YYFAIL
 
yyîæab


	)

1163 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1165 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1167 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1169 
yych¨
 = (
Tokí
); \

1170 
yylvÆ
 = (
VÆue
); \

1171 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

1172 
	`YYPOPSTACK
 (1); \

1173 
yybackup
; \

1177 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1178 
YYERROR
; \

1180 
	`YYID
 (0))

	)

1183 
	#YYTERROR
 1

	)

1184 
	#YYERRCODE
 256

	)

1191 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

1192 #i‚de‡
YYLLOC_DEFAULT


1193 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

1195 i‡(
	`YYID
 (
N
)) \

1197 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

1198 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

1199 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

1200 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

1204 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

1205 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

1206 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

1207 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

1209 
	`YYID
 (0))

	)

1217 #i‚de‡
YY_LOCATION_PRINT


1218 #i‡
YYLTYPE_IS_TRIVIAL


1219 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

1220 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

1221 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

1222 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

1224 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1231 #ifde‡
YYLEX_PARAM


1232 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

1234 
	#YYLEX
 
	`yyÀx
 ()

	)

1238 #i‡
YYDEBUG


1240 #i‚de‡
YYFPRINTF


1241 
	~<°dio.h
>

1242 
	#YYFPRINTF
 
Ârötf


	)

1245 
	#YYDPRINTF
(
Args
) \

1247 i‡(
yydebug
) \

1248 
YYFPRINTF
 
Args
; \

1249 } 
	`YYID
 (0))

	)

1251 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1253 i‡(
yydebug
) \

1255 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1256 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1257 
Ty≥
, 
VÆue
); \

1258 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1260 } 
	`YYID
 (0))

	)

1268 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1269 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1271 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1274 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1275 
FILE
 *
yyouçut
;

1276 
yyty≥
;

1277 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1280 i‡(!
yyvÆuï
)

1282 #ifde‡
YYPRINT


1283 i‡(
yyty≥
 < 
YYNTOKENS
)

1284 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1286 
	`YYUSE
 (
yyouçut
);

1288 
yyty≥
)

1293 
	}
}

1300 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1301 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1303 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1306 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1307 
FILE
 *
yyouçut
;

1308 
yyty≥
;

1309 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1312 i‡(
yyty≥
 < 
YYNTOKENS
)

1313 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

1315 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

1317 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1318 
	`YYFPRINTF
 (
yyouçut
, ")");

1319 
	}
}

1326 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1327 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1329 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1332 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

1333 
yyty≥_öt16
 *
yybŸtom
;

1334 
yyty≥_öt16
 *
yyt›
;

1337 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1338 ; 
yybŸtom
 <
yyt›
; yybottom++)

1340 
yybŸ
 = *
yybŸtom
;

1341 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1343 
	`YYFPRINTF
 (
°dîr
, "\n");

1344 
	}
}

1346 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1348 i‡(
yydebug
) \

1349 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1350 } 
	`YYID
 (0))

	)

1357 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1358 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1360 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1363 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

1364 
YYSTYPE
 *
yyv•
;

1365 
yyruÀ
;

1368 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1369 
yyi
;

1370 
yy o
 = 
yyæöe
[
yyruÀ
];

1371 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1372 
yyruÀ
 - 1, 
yy o
);

1374 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1376 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1377 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

1378 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1380 
	`YYFPRINTF
 (
°dîr
, "\n");

1382 
	}
}

1384 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1386 i‡(
yydebug
) \

1387 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

1388 } 
	`YYID
 (0))

	)

1392 
	gyydebug
;

1394 
	#YYDPRINTF
(
Args
)

	)

1395 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1396 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1397 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1402 #i‚def 
YYINITDEPTH


1403 
	#YYINITDEPTH
 200

	)

1413 #i‚de‡
YYMAXDEPTH


1414 
	#YYMAXDEPTH
 10000

	)

1419 #i‡
YYERROR_VERBOSE


1421 #i‚de‡
yy°æí


1422 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1423 
	#yy°æí
 
°æí


	)

1426 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1427 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1428 
YYSIZE_T


1429 
	$yy°æí
 (c⁄° *
yy°r
)

1431 
YYSIZE_T


1432 
	$yy°æí
 (
yy°r
)

1433 c⁄° *
yy°r
;

1436 
YYSIZE_T
 
yyÀn
;

1437 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1439  
yyÀn
;

1440 
	}
}

1444 #i‚de‡
yy°p˝y


1445 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1446 
	#yy°p˝y
 
°p˝y


	)

1450 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1451 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1453 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1456 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1457 *
yyde°
;

1458 c⁄° *
yy§c
;

1461 *
yyd
 = 
yyde°
;

1462 c⁄° *
yys
 = 
yy§c
;

1464 (*
yyd
++ = *
yys
++) != '\0')

1467  
yyd
 - 1;

1468 
	}
}

1472 #i‚de‡
yyäamîr


1480 
YYSIZE_T


1481 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1483 i‡(*
yy°r
 == '"')

1485 
YYSIZE_T
 
yyn
 = 0;

1486 c⁄° *
yyp
 = 
yy°r
;

1489 *++
yyp
)

1493 
do_nŸ_°rù_quŸes
;

1496 i‡(*++
yyp
 != '\\')

1497 
do_nŸ_°rù_quŸes
;

1500 i‡(
yyªs
)

1501 
yyªs
[
yyn
] = *
yyp
;

1502 
yyn
++;

1506 i‡(
yyªs
)

1507 
yyªs
[
yyn
] = '\0';

1508  
yyn
;

1510 
do_nŸ_°rù_quŸes
: ;

1513 i‡(! 
yyªs
)

1514  
	`yy°æí
 (
yy°r
);

1516  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1517 
	}
}

1527 
YYSIZE_T


1528 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

1530 
yyn
 = 
yy∑˘
[
yy°©e
];

1532 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

1536 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1537 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

1538 
YYSIZE_T
 
yysize
 = 
yysize0
;

1539 
YYSIZE_T
 
yysize1
;

1540 
yysize_ovîÊow
 = 0;

1541 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1542 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1543 
yyx
;

1548 
	`YY_
("syntaxÉrror, unexpected %s");

1549 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

1550 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

1551 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

1552 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

1554 *
yyfmt
;

1555 c⁄° *
yyf
;

1556 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

1557 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

1558 c⁄° 
yy‹
[] = " or %s";

1559 
yyf‹m©
[ 
yyu√x≥˘ed


1560 +  
yyex≥˘ög
 - 1

1561 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1562 * ( 
yy‹
 - 1))];

1563 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1567 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1570 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1571 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1572 
yycou¡
 = 1;

1574 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1575 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1577 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1578 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1580 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1582 
yycou¡
 = 1;

1583 
yysize
 = 
yysize0
;

1584 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1587 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1588 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1589 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1590 
yysize
 = 
yysize1
;

1591 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1592 
yy¥efix
 = 
yy‹
;

1595 
yyf
 = 
	`YY_
(
yyf‹m©
);

1596 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1597 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1598 
yysize
 = 
yysize1
;

1600 i‡(
yysize_ovîÊow
)

1601  
YYSIZE_MAXIMUM
;

1603 i‡(
yyªsu…
)

1608 *
yyp
 = 
yyªsu…
;

1609 
yyi
 = 0;

1610 (*
yyp
 = *
yyf
) != '\0')

1612 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1614 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1615 
yyf
 += 2;

1619 
yyp
++;

1620 
yyf
++;

1624  
yysize
;

1626 
	}
}

1635 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1636 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1638 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1641 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1642 c⁄° *
yymsg
;

1643 
yyty≥
;

1644 
YYSTYPE
 *
yyvÆuï
;

1647 
	`YYUSE
 (
yyvÆuï
);

1649 i‡(!
yymsg
)

1650 
yymsg
 = "Deleting";

1651 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1653 
yyty≥
)

1659 
	}
}

1662 #ifde‡
YYPARSE_PARAM


1663 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1664 
yy∑r£
 (*
YYPARSE_PARAM
);

1666 
yy∑r£
 ();

1669 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1670 
yy∑r£
 ();

1672 
yy∑r£
 ();

1678 
	gyych¨
;

1681 
YYSTYPE
 
	gyylvÆ
;

1684 
	gyy√ºs
;

1692 #ifde‡
YYPARSE_PARAM


1693 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1694 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1696 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1699 
	$yy∑r£
 (
YYPARSE_PARAM
)

1700 *
YYPARSE_PARAM
;

1703 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1704 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1706 
	$yy∑r£
 ()

1709 
	$yy∑r£
 ()

1716 
yy°©e
;

1718 
yyîr°©us
;

1728 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1729 
yyty≥_öt16
 *
yyss
;

1730 
yyty≥_öt16
 *
yys•
;

1733 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1734 
YYSTYPE
 *
yyvs
;

1735 
YYSTYPE
 *
yyv•
;

1737 
YYSIZE_T
 
yy°acksize
;

1739 
yyn
;

1740 
yyªsu…
;

1742 
yytokí
;

1745 
YYSTYPE
 
yyvÆ
;

1747 #i‡
YYERROR_VERBOSE


1749 
yymsgbuf
[128];

1750 *
yymsg
 = 
yymsgbuf
;

1751 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1754 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1758 
yyÀn
 = 0;

1760 
yytokí
 = 0;

1761 
yyss
 = 
yysß
;

1762 
yyvs
 = 
yyvß
;

1763 
yy°acksize
 = 
YYINITDEPTH
;

1765 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1767 
yy°©e
 = 0;

1768 
yyîr°©us
 = 0;

1769 
yy√ºs
 = 0;

1770 
yych¨
 = 
YYEMPTY
;

1776 
yys•
 = 
yyss
;

1777 
yyv•
 = 
yyvs
;

1779 
yy£t°©e
;

1784 
yy√w°©e
:

1787 
yys•
++;

1789 
yy£t°©e
:

1790 *
yys•
 = 
yy°©e
;

1792 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1795 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1797 #ifde‡
yyovîÊow


1802 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1803 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1809 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1810 &
yyss1
, 
yysize
 *  (*
yys•
),

1811 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1812 &
yy°acksize
);

1814 
yyss
 = 
yyss1
;

1815 
yyvs
 = 
yyvs1
;

1818 #i‚de‡
YYSTACK_RELOCATE


1819 
yyexhau°edœb
;

1822 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1823 
yyexhau°edœb
;

1824 
yy°acksize
 *= 2;

1825 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1826 
yy°acksize
 = 
YYMAXDEPTH
;

1829 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1830 
yyÆloc
 *
yy±r
 =

1831 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1832 i‡(! 
yy±r
)

1833 
yyexhau°edœb
;

1834 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1835 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1836 #unde‡
YYSTACK_RELOCATE


1837 i‡(
yyss1
 !
yysß
)

1838 
	`YYSTACK_FREE
 (
yyss1
);

1843 
yys•
 = 
yyss
 + 
yysize
 - 1;

1844 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1846 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1847 (Ë
yy°acksize
));

1849 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1850 
YYABORT
;

1853 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1855 i‡(
yy°©e
 =
YYFINAL
)

1856 
YYACCEPT
;

1858 
yybackup
;

1863 
yybackup
:

1869 
yyn
 = 
yy∑˘
[
yy°©e
];

1870 i‡(
yyn
 =
YYPACT_NINF
)

1871 
yydeÁu…
;

1876 i‡(
yych¨
 =
YYEMPTY
)

1878 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1879 
yych¨
 = 
YYLEX
;

1882 i‡(
yych¨
 <
YYEOF
)

1884 
yych¨
 = 
yytokí
 = 
YYEOF
;

1885 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1889 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1890 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1895 
yyn
 +
yytokí
;

1896 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1897 
yydeÁu…
;

1898 
yyn
 = 
yyèbÀ
[yyn];

1899 i‡(
yyn
 <= 0)

1901 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1902 
yyîæab
;

1903 
yyn
 = -yyn;

1904 
yyªdu˚
;

1909 i‡(
yyîr°©us
)

1910 
yyîr°©us
--;

1913 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1916 
yych¨
 = 
YYEMPTY
;

1918 
yy°©e
 = 
yyn
;

1919 *++
yyv•
 = 
yylvÆ
;

1921 
yy√w°©e
;

1927 
yydeÁu…
:

1928 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1929 i‡(
yyn
 == 0)

1930 
yyîæab
;

1931 
yyªdu˚
;

1937 
yyªdu˚
:

1939 
yyÀn
 = 
yyr2
[
yyn
];

1949 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1952 
	`YY_REDUCE_PRINT
 (
yyn
);

1953 
yyn
)

1959 { 
	`£t_symèb
((
yyv•
[(1Ë- (1)].
±r_vÆue
)); 
	`func_hódî
(".skip"); ;}

1966 { 
	`íd_fun˘i⁄
(); ;}

1973 { 
	`£t_symèb
((
yyv•
[(1Ë- (1)].
±r_vÆue
)); ;}

1980 { 
	`func_hódî
(".skip"); ;}

1987 { 
	`íd_fun˘i⁄
(); ;}

1994 {
	`func_hódî_öfo_öt
(".max¡id", (
yyv•
[(2Ë- (6)].
öt_vÆue
));

1995 
	`func_hódî_öfo_öt
(",", (
yyv•
[(4Ë- (6)].
öt_vÆue
));

1996 
	`func_hódî_öfo_öt
(",", (
yyv•
[(6Ë- (6)].
öt_vÆue
)); ;}

2003 { 
	`°¨t_fun˘i⁄
((
yyv•
[(1Ë- (2)].
öt_vÆue
)); 
	`func_hódî_öfo
("(");;}

2010 {
	`func_hódî_öfo
(")");;}

2017 { (
yyvÆ
.
±r_vÆue
Ë
	`ª£t_symèb
(); ;}

2024 { 
	`°¨t_fun˘i⁄
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2031 { (
yyvÆ
.
±r_vÆue
Ë
	`ª£t_symèb
(); ;}

2038 { 
	`°¨t_fun˘i⁄
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); 
	`add_fun˘i⁄_«me
(""); 
g_func_de˛
=0; (
yyvÆ
.
±r_vÆue
Ë
	`ª£t_symèb
(); ;}

2045 { 
	`add_fun˘i⁄_«me
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); ;}

2052 {
	`func_hódî_öfo
("(");;}

2059 { 
g_func_de˛
=0; 
	`func_hódî_öfo
(")"); ;}

2066 { 
	`add_fun˘i⁄_«me
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_func_de˛
=0; ;}

2073 { (
yyvÆ
.
öt_vÆue
Ë1; 
g_func_de˛
=1; 
	`func_hódî
(".entry"); ;}

2080 { (
yyvÆ
.
öt_vÆue
Ë0; 
g_func_de˛
=1; 
	`func_hódî
(".func"); ;}

2087 { (
yyvÆ
.
öt_vÆue
Ë0; 
g_func_de˛
=1; 
	`func_hódî
(".func"); ;}

2094 { (
yyvÆ
.
öt_vÆue
Ë2; 
g_func_de˛
=1; 
	`func_hódî
(".func"); ;}

2101 { 
	`add_dúe˘ive
(); ;}

2108 {
	`func_hódî_öfo
(",");;}

2115 { 
	`add_dúe˘ive
(); ;}

2122 { 
	`add_•a˚_•ec
(
∑øm_•a˚_un˛assifõd
,0); ;}

2129 { 
	`add_fun˘i⁄_¨g
(); ;}

2136 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); ;}

2143 { 
	`add_fun˘i⁄_¨g
(); ;}

2150 { 
	`add_dúe˘ive
(); ;}

2157 { 
	`add_ö°ru˘i⁄
(); ;}

2164 { 
	`add_dúe˘ive
(); ;}

2171 { 
	`add_ö°ru˘i⁄
(); ;}

2178 { 
	`add_vîsi⁄_öfo
((
yyv•
[(2Ë- (2)].
doubÀ_vÆue
), 0); ;}

2185 { 
	`add_vîsi⁄_öfo
((
yyv•
[(2Ë- (3)].
doubÀ_vÆue
),1); ;}

2199 { 
	`èrgë_hódî2
((
yyv•
[(2Ë- (4)].
°rög_vÆue
),(yyvsp[(4) - (4)].string_value)); ;}

2206 { 
	`èrgë_hódî3
((
yyv•
[(2Ë- (6)].
°rög_vÆue
),(yyvsp[(4) - (6)].string_value),(yyvsp[(6) - (6)].string_value)); ;}

2213 { 
	`èrgë_hódî
((
yyv•
[(2Ë- (2)].
°rög_vÆue
)); ;}

2220 { 
	`add_fûe
((
yyv•
[(2Ë- (3)].
öt_vÆue
),(yyv•[(3Ë- (3)].
°rög_vÆue
)); ;}

2227 { 
	`add_¥agma
((
yyv•
[(2Ë- (3)].
°rög_vÆue
)); ;}

2234 { 
	`add_v¨übÀs
(); ;}

2241 { 
	`add_v¨übÀs
(); ;}

2248 { 
	`add_v¨übÀs
(); ;}

2255 { 
	`add_c⁄°±r
((
yyv•
[(2Ë- (6)].
°rög_vÆue
), (yyv•[(4Ë- (6)].°rög_vÆue), (yyv•[(6Ë- (6)].
öt_vÆue
)); ;}

2262 { 
	`£t_v¨übÀ_ty≥
(); ;}

2269 { 
	`add_idítifõr
((
yyv•
[(1Ë- (1)].
°rög_vÆue
),0,
NON_ARRAY_IDENTIFIER
); 
	`func_hódî_öfo
((yyvsp[(1) - (1)].string_value));;}

2276 { 
	`func_hódî_öfo
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); 
	`func_hódî_öfo_öt
("<", (yyv•[(3Ë- (4)].
öt_vÆue
)); func_header_info(">");

2277 
i
,
lba£
,
l
;

2278 *
id
 = 
NULL
;

2279 
lba£
 = 
	`°æí
((
yyv•
[(1Ë- (4)].
°rög_vÆue
));

2280  
i
=0; i < (
yyv•
[(3Ë- (4)].
öt_vÆue
); i++ ) {

2281 
l
 = 
lba£
 + ()
	`log10
(
i
+1)+10;

2282 
id
 = (*Ë
	`mÆloc
(
l
);

2283 
	`¢¥ötf
(
id
,
l
,"%s%u",(
yyv•
[(1Ë- (4)].
°rög_vÆue
),
i
);

2284 
	`add_idítifõr
(
id
,0,
NON_ARRAY_IDENTIFIER
);

2286 
	`‰ì
((
yyv•
[(1Ë- (4)].
°rög_vÆue
));

2294 { 
	`add_idítifõr
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),0,
ARRAY_IDENTIFIER_NO_DIM
); 
	`func_hódî_öfo
((yyvsp[(1) - (3)].string_value)); func_header_info("["); func_header_info("]");;}

2301 { 
	`add_idítifõr
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].
öt_vÆue
),
ARRAY_IDENTIFIER
); 
	`func_hódî_öfo
((yyv•[(1Ë- (4)].°rög_vÆue)); 
	`func_hódî_öfo_öt
("[",(yyvsp[(3) - (4)].int_value)); func_header_info("]");;}

2308 { 
	`add_exã∫_•ec
(); ;}

2315 { 
	`add_Æignmít_•ec
((
yyv•
[(2Ë- (2)].
öt_vÆue
)); ;}

2322 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); ;}

2329 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); ;}

2336 { 
	`add_•a˚_•ec
(
c⁄°_•a˚
,(
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2343 { 
	`add_•a˚_•ec
(
globÆ_•a˚
,0); ;}

2350 { 
	`add_•a˚_•ec
(
loˇl_•a˚
,0); ;}

2357 { 
	`add_•a˚_•ec
(
∑øm_•a˚_un˛assifõd
,0); ;}

2364 { 
	`add_•a˚_•ec
(
sh¨ed_•a˚
,0); ;}

2371 { 
	`add_•a˚_•ec
(
surf_•a˚
,0); ;}

2378 { 
	`add_•a˚_•ec
(
ãx_•a˚
,0); ;}

2385 { 
	`add_›ti⁄
(
V2_TYPE
); 
	`func_hódî_öfo
(".v2");;}

2392 { 
	`add_›ti⁄
(
V3_TYPE
); 
	`func_hódî_öfo
(".v3");;}

2399 { 
	`add_›ti⁄
(
V4_TYPE
); 
	`func_hódî_öfo
(".v4");;}

2406 { 
	`add_sˇœr_ty≥_•ec
–
S8_TYPE
 ); ;}

2413 { 
	`add_sˇœr_ty≥_•ec
–
S16_TYPE
 ); ;}

2420 { 
	`add_sˇœr_ty≥_•ec
–
S32_TYPE
 ); ;}

2427 { 
	`add_sˇœr_ty≥_•ec
–
S64_TYPE
 ); ;}

2434 { 
	`add_sˇœr_ty≥_•ec
–
U8_TYPE
 ); ;}

2441 { 
	`add_sˇœr_ty≥_•ec
–
U16_TYPE
 ); ;}

2448 { 
	`add_sˇœr_ty≥_•ec
–
U32_TYPE
 ); ;}

2455 { 
	`add_sˇœr_ty≥_•ec
–
U64_TYPE
 ); ;}

2462 { 
	`add_sˇœr_ty≥_•ec
–
F16_TYPE
 ); ;}

2469 { 
	`add_sˇœr_ty≥_•ec
–
F32_TYPE
 ); ;}

2476 { 
	`add_sˇœr_ty≥_•ec
–
F64_TYPE
 ); ;}

2483 { 
	`add_sˇœr_ty≥_•ec
–
FF64_TYPE
 ); ;}

2490 { 
	`add_sˇœr_ty≥_•ec
–
B8_TYPE
 ); ;}

2497 { 
	`add_sˇœr_ty≥_•ec
–
B16_TYPE
 ); ;}

2504 { 
	`add_sˇœr_ty≥_•ec
–
B32_TYPE
 ); ;}

2511 { 
	`add_sˇœr_ty≥_•ec
–
B64_TYPE
 ); ;}

2518 { 
	`add_sˇœr_ty≥_•ec
–
BB64_TYPE
 ); ;}

2525 { 
	`add_sˇœr_ty≥_•ec
–
BB128_TYPE
 ); ;}

2532 { 
	`add_sˇœr_ty≥_•ec
–
PRED_TYPE
 ); ;}

2539 { 
	`add_sˇœr_ty≥_•ec
–
TEXREF_TYPE
 ); ;}

2546 { 
	`add_sˇœr_ty≥_•ec
–
SAMPLERREF_TYPE
 ); ;}

2553 { 
	`add_sˇœr_ty≥_•ec
–
SURFREF_TYPE
 ); ;}

2560 { 
	`add_¨øy_öôülizî
(); ;}

2567 { 
	`sy¡ax_nŸ_im∂emíãd
(); ;}

2574 { 
	`add_œbñ
((
yyv•
[(1Ë- (2)].
°rög_vÆue
)); ;}

2581 { 
	`£t_ªtu∫
(); ;}

2588 { 
	`add_›code
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2595 { 
	`add_›code
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2602 { 
	`add_¥ed
((
yyv•
[(2Ë- (2)].
°rög_vÆue
),0, -1); ;}

2609 { 
	`add_¥ed
((
yyv•
[(3Ë- (3)].
°rög_vÆue
),1, -1); ;}

2616 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,2); ;}

2623 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,3); ;}

2630 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,5); ;}

2637 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,6); ;}

2644 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,10); ;}

2651 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,12); ;}

2658 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,13); ;}

2665 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,17); ;}

2672 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,19); ;}

2679 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,28); ;}

2686 { 
	`add_›ti⁄
(
UNI_OPTION
); ;}

2693 { 
	`add_›ti⁄
(
WIDE_OPTION
); ;}

2700 { 
	`add_›ti⁄
(
ANY_OPTION
); ;}

2707 { 
	`add_›ti⁄
(
ALL_OPTION
); ;}

2714 { 
	`add_›ti⁄
(
GLOBAL_OPTION
); ;}

2721 { 
	`add_›ti⁄
(
CTA_OPTION
); ;}

2728 { 
	`add_›ti⁄
(
SYS_OPTION
); ;}

2735 { 
	`add_›ti⁄
(
GEOM_MODIFIER_1D
); ;}

2742 { 
	`add_›ti⁄
(
GEOM_MODIFIER_2D
); ;}

2749 { 
	`add_›ti⁄
(
GEOM_MODIFIER_3D
); ;}

2756 { 
	`add_›ti⁄
(
SAT_OPTION
); ;}

2763 { 
	`add_›ti⁄
(
FTZ_OPTION
); ;}

2770 { 
	`add_›ti⁄
(
NEG_OPTION
); ;}

2777 { 
	`add_›ti⁄
(
APPROX_OPTION
); ;}

2784 { 
	`add_›ti⁄
(
FULL_OPTION
); ;}

2791 { 
	`add_›ti⁄
(
EXIT_OPTION
); ;}

2798 { 
	`add_›ti⁄
(
ABS_OPTION
); ;}

2805 { 
	`add_›ti⁄
(
TO_OPTION
); ;}

2812 { 
	`add_›ti⁄
(
HALF_OPTION
); ;}

2819 { 
	`add_›ti⁄
(
CA_OPTION
); ;}

2826 { 
	`add_›ti⁄
(
CG_OPTION
); ;}

2833 { 
	`add_›ti⁄
(
CS_OPTION
); ;}

2840 { 
	`add_›ti⁄
(
LU_OPTION
); ;}

2847 { 
	`add_›ti⁄
(
CV_OPTION
); ;}

2854 { 
	`add_›ti⁄
(
WB_OPTION
); ;}

2861 { 
	`add_›ti⁄
(
WT_OPTION
); ;}

2868 { 
	`add_›ti⁄
(
ATOMIC_AND
); ;}

2875 { 
	`add_›ti⁄
(
ATOMIC_OR
); ;}

2882 { 
	`add_›ti⁄
(
ATOMIC_XOR
); ;}

2889 { 
	`add_›ti⁄
(
ATOMIC_CAS
); ;}

2896 { 
	`add_›ti⁄
(
ATOMIC_EXCH
); ;}

2903 { 
	`add_›ti⁄
(
ATOMIC_ADD
); ;}

2910 { 
	`add_›ti⁄
(
ATOMIC_INC
); ;}

2917 { 
	`add_›ti⁄
(
ATOMIC_DEC
); ;}

2924 { 
	`add_›ti⁄
(
ATOMIC_MIN
); ;}

2931 { 
	`add_›ti⁄
(
ATOMIC_MAX
); ;}

2938 { 
	`add_›ti⁄
(
RN_OPTION
); ;}

2945 { 
	`add_›ti⁄
(
RZ_OPTION
); ;}

2952 { 
	`add_›ti⁄
(
RM_OPTION
); ;}

2959 { 
	`add_›ti⁄
(
RP_OPTION
); ;}

2966 { 
	`add_›ti⁄
(
RNI_OPTION
); ;}

2973 { 
	`add_›ti⁄
(
RZI_OPTION
); ;}

2980 { 
	`add_›ti⁄
(
RMI_OPTION
); ;}

2987 { 
	`add_›ti⁄
(
RPI_OPTION
); ;}

2994 { 
	`add_›ti⁄
(
EQ_OPTION
); ;}

3001 { 
	`add_›ti⁄
(
NE_OPTION
); ;}

3008 { 
	`add_›ti⁄
(
LT_OPTION
); ;}

3015 { 
	`add_›ti⁄
(
LE_OPTION
); ;}

3022 { 
	`add_›ti⁄
(
GT_OPTION
); ;}

3029 { 
	`add_›ti⁄
(
GE_OPTION
); ;}

3036 { 
	`add_›ti⁄
(
LO_OPTION
); ;}

3043 { 
	`add_›ti⁄
(
LS_OPTION
); ;}

3050 { 
	`add_›ti⁄
(
HI_OPTION
); ;}

3057 { 
	`add_›ti⁄
(
HS_OPTION
); ;}

3064 { 
	`add_›ti⁄
(
EQU_OPTION
); ;}

3071 { 
	`add_›ti⁄
(
NEU_OPTION
); ;}

3078 { 
	`add_›ti⁄
(
LTU_OPTION
); ;}

3085 { 
	`add_›ti⁄
(
LEU_OPTION
); ;}

3092 { 
	`add_›ti⁄
(
GTU_OPTION
); ;}

3099 { 
	`add_›ti⁄
(
GEU_OPTION
); ;}

3106 { 
	`add_›ti⁄
(
NUM_OPTION
); ;}

3113 { 
	`add_›ti⁄
(
NAN_OPTION
); ;}

3120 { 
	`add_sˇœr_›î™d
–(
yyv•
[(1Ë- (1)].
°rög_vÆue
) ); ;}

3127 { 
	`add_√g_¥ed_›î™d
–(
yyv•
[(2Ë- (2)].
°rög_vÆue
) ); ;}

3134 { 
	`add_sˇœr_›î™d
–(
yyv•
[(2Ë- (2)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_√g
(); ;}

3141 { 
	`ch™ge_›î™d_√g
(); ;}

3148 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].
öt_vÆue
)); ;}

3155 { 
	`add_sˇœr_›î™d
–(
yyv•
[(1Ë- (2)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(1);;}

3162 { 
	`add_sˇœr_›î™d
–(
yyv•
[(2Ë- (3)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(1); 
	`ch™ge_›î™d_√g
();;}

3169 { 
	`add_sˇœr_›î™d
–(
yyv•
[(1Ë- (2)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(2);;}

3176 { 
	`add_sˇœr_›î™d
–(
yyv•
[(2Ë- (3)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(2); 
	`ch™ge_›î™d_√g
();;}

3183 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1);;}

3190 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1); 
	`ch™ge_›î™d_lohi
(1);;}

3197 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1); 
	`ch™ge_›î™d_lohi
(2);;}

3204 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3);;}

3211 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3); 
	`ch™ge_›î™d_lohi
(1);;}

3218 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3); 
	`ch™ge_›î™d_lohi
(2);;}

3225 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(2Ë- (5)].
°rög_vÆue
),(yyvsp[(4) - (5)].string_value)); ;}

3232 { 
	`add_3ve˘‹_›î™d
((
yyv•
[(2Ë- (7)].
°rög_vÆue
),(yyvsp[(4) - (7)].string_value),(yyvsp[(6) - (7)].string_value)); ;}

3239 { 
	`add_4ve˘‹_›î™d
((
yyv•
[(2Ë- (9)].
°rög_vÆue
),(yyvsp[(4) - (9)].string_value),(yyvsp[(6) - (9)].string_value),(yyvsp[(8) - (9)].string_value)); ;}

3246 { 
	`add_sˇœr_›î™d
((
yyv•
[(2Ë- (3)].
°rög_vÆue
)); ;}

3253 { 
	`add_buûtö_›î™d
((
yyv•
[(1Ë- (2)].
öt_vÆue
),(yyvsp[(2) - (2)].int_value)); ;}

3260 { 
	`add_buûtö_›î™d
((
yyv•
[(1Ë- (1)].
öt_vÆue
),-1); ;}

3267 { 
	`add_mem‹y_›î™d
(); ;}

3274 { 
	`add_mem‹y_›î™d
(); 
	`ch™ge_mem‹y_addr_•a˚
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); ;}

3281 { 
	`ch™ge_mem‹y_addr_•a˚
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); ;}

3288 { 
	`ch™ge_mem‹y_addr_•a˚
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); 
	`add_mem‹y_›î™d
();;}

3295 { 
	`ch™ge_›î™d_√g
(); ;}

3302 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); ;}

3309 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); 
	`ch™ge_›î™d_lohi
(1); ;}

3316 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); 
	`ch™ge_›î™d_lohi
(2); ;}

3323 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(4Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); ;}

3330 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (5)].
°rög_vÆue
),(yyv•[(4Ë- (5)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); 
	`ch™ge_›î™d_lohi
(1); ;}

3337 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (5)].
°rög_vÆue
),(yyv•[(4Ë- (5)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); 
	`ch™ge_›î™d_lohi
(2); ;}

3344 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(4Ë- (4)].
öt_vÆue
)); 
	`ch™ge_doubÀ_›î™d_ty≥
(3); ;}

3351 { 
	`add_lôîÆ_öt
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

3358 { 
	`add_lôîÆ_Êﬂt
((
yyv•
[(1Ë- (1)].
Êﬂt_vÆue
)); ;}

3365 { 
	`add_lôîÆ_doubÀ
((
yyv•
[(1Ë- (1)].
doubÀ_vÆue
)); ;}

3372 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (1)].
°rög_vÆue
),0); ;}

3379 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (2)].
°rög_vÆue
),0); 
	`ch™ge_›î™d_lohi
(1);;}

3386 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (2)].
°rög_vÆue
),0); 
	`ch™ge_›î™d_lohi
(2); ;}

3393 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].
öt_vÆue
)); ;}

3402 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

3404 
	`YYPOPSTACK
 (
yyÀn
);

3405 
yyÀn
 = 0;

3406 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3408 *++
yyv•
 = 
yyvÆ
;

3414 
yyn
 = 
yyr1
[yyn];

3416 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

3417 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

3418 
yy°©e
 = 
yyèbÀ
[yystate];

3420 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

3422 
yy√w°©e
;

3428 
yyîæab
:

3430 i‡(!
yyîr°©us
)

3432 ++
yy√ºs
;

3433 #i‡! 
YYERROR_VERBOSE


3434 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

3437 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

3438 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

3440 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

3441 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

3442 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

3443 i‡(
yymsg
 !
yymsgbuf
)

3444 
	`YYSTACK_FREE
 (
yymsg
);

3445 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

3446 i‡(
yymsg
)

3447 
yymsg_Æloc
 = 
yyÆloc
;

3450 
yymsg
 = 
yymsgbuf
;

3451 
yymsg_Æloc
 =  
yymsgbuf
;

3455 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

3457 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

3458 
	`yyîr‹
 (
yymsg
);

3462 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

3463 i‡(
yysize
 != 0)

3464 
yyexhau°edœb
;

3472 i‡(
yyîr°©us
 == 3)

3477 i‡(
yych¨
 <
YYEOF
)

3480 i‡(
yych¨
 =
YYEOF
)

3481 
YYABORT
;

3485 
	`yyde°ru˘
 ("Error: discarding",

3486 
yytokí
, &
yylvÆ
);

3487 
yych¨
 = 
YYEMPTY
;

3493 
yyîæab1
;

3499 
yyîr‹œb
:

3505 
yyîr‹œb
;

3509 
	`YYPOPSTACK
 (
yyÀn
);

3510 
yyÀn
 = 0;

3511 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3512 
yy°©e
 = *
yys•
;

3513 
yyîæab1
;

3519 
yyîæab1
:

3520 
yyîr°©us
 = 3;

3524 
yyn
 = 
yy∑˘
[
yy°©e
];

3525 i‡(
yyn
 !
YYPACT_NINF
)

3527 
yyn
 +
YYTERROR
;

3528 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

3530 
yyn
 = 
yyèbÀ
[yyn];

3531 i‡(0 < 
yyn
)

3537 i‡(
yys•
 =
yyss
)

3538 
YYABORT
;

3541 
	`yyde°ru˘
 ("Error:Öopping",

3542 
yy°os
[
yy°©e
], 
yyv•
);

3543 
	`YYPOPSTACK
 (1);

3544 
yy°©e
 = *
yys•
;

3545 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3548 *++
yyv•
 = 
yylvÆ
;

3552 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

3554 
yy°©e
 = 
yyn
;

3555 
yy√w°©e
;

3561 
yyac˚±œb
:

3562 
yyªsu…
 = 0;

3563 
yyªtu∫
;

3568 
yyab‹éab
:

3569 
yyªsu…
 = 1;

3570 
yyªtu∫
;

3572 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


3576 
yyexhau°edœb
:

3577 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

3578 
yyªsu…
 = 2;

3582 
yyªtu∫
:

3583 i‡(
yych¨
 !
YYEMPTY
)

3584 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

3585 
yytokí
, &
yylvÆ
);

3588 
	`YYPOPSTACK
 (
yyÀn
);

3589 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3590 
yys•
 !
yyss
)

3592 
	`yyde°ru˘
 ("Cleanup:Öopping",

3593 
yy°os
[*
yys•
], 
yyv•
);

3594 
	`YYPOPSTACK
 (1);

3596 #i‚de‡
yyovîÊow


3597 i‡(
yyss
 !
yysß
)

3598 
	`YYSTACK_FREE
 (
yyss
);

3600 #i‡
YYERROR_VERBOSE


3601 i‡(
yymsg
 !
yymsgbuf
)

3602 
	`YYSTACK_FREE
 (
yymsg
);

3605  
	`YYID
 (
yyªsu…
);

3606 
	}
}

3614 
±x_löío
;

3615 c⁄° *
g_fûíame
;

3617 
	$sy¡ax_nŸ_im∂emíãd
()

3619 
	`¥ötf
("P¨£Éº‹ (%s:%u):Åhi†sy¡ax i†nŸ (yëËim∂emíãd:\n",
g_fûíame
,
±x_löío
);

3620 
	`±x_îr‹
(
NULL
);

3621 
	`ab‹t
();

3622 
	}
}

	@cuobjdump_to_ptxplus/ptx.tab.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mSTRING
 = 258,

43 
	mOPCODE
 = 259,

44 
	mALIGN_DIRECTIVE
 = 260,

45 
	mBRANCHTARGETS_DIRECTIVE
 = 261,

46 
	mBYTE_DIRECTIVE
 = 262,

47 
	mCALLPROTOTYPE_DIRECTIVE
 = 263,

48 
	mCALLTARGETS_DIRECTIVE
 = 264,

49 
	mCONST_DIRECTIVE
 = 265,

50 
	mCONSTPTR_DIRECTIVE
 = 266,

51 
	mENTRY_DIRECTIVE
 = 267,

52 
	mEXTERN_DIRECTIVE
 = 268,

53 
	mFILE_DIRECTIVE
 = 269,

54 
	mFUNC_DIRECTIVE
 = 270,

55 
	mGLOBAL_DIRECTIVE
 = 271,

56 
	mLOCAL_DIRECTIVE
 = 272,

57 
	mLOC_DIRECTIVE
 = 273,

58 
	mMAXNCTAPERSM_DIRECTIVE
 = 274,

59 
	mMAXNNREG_DIRECTIVE
 = 275,

60 
	mMAXNTID_DIRECTIVE
 = 276,

61 
	mMINNCTAPERSM_DIRECTIVE
 = 277,

62 
	mPARAM_DIRECTIVE
 = 278,

63 
	mPRAGMA_DIRECTIVE
 = 279,

64 
	mREG_DIRECTIVE
 = 280,

65 
	mREQNTID_DIRECTIVE
 = 281,

66 
	mSECTION_DIRECTIVE
 = 282,

67 
	mSHARED_DIRECTIVE
 = 283,

68 
	mSREG_DIRECTIVE
 = 284,

69 
	mSTRUCT_DIRECTIVE
 = 285,

70 
	mSURF_DIRECTIVE
 = 286,

71 
	mTARGET_DIRECTIVE
 = 287,

72 
	mTEX_DIRECTIVE
 = 288,

73 
	mUNION_DIRECTIVE
 = 289,

74 
	mVERSION_DIRECTIVE
 = 290,

75 
	mADDRESS_SIZE_DIRECTIVE
 = 291,

76 
	mVISIBLE_DIRECTIVE
 = 292,

77 
	mIDENTIFIER
 = 293,

78 
	mINT_OPERAND
 = 294,

79 
	mFLOAT_OPERAND
 = 295,

80 
	mDOUBLE_OPERAND
 = 296,

81 
	mS8_TYPE
 = 297,

82 
	mS16_TYPE
 = 298,

83 
	mS32_TYPE
 = 299,

84 
	mS64_TYPE
 = 300,

85 
	mU8_TYPE
 = 301,

86 
	mU16_TYPE
 = 302,

87 
	mU32_TYPE
 = 303,

88 
	mU64_TYPE
 = 304,

89 
	mF16_TYPE
 = 305,

90 
	mF32_TYPE
 = 306,

91 
	mF64_TYPE
 = 307,

92 
	mFF64_TYPE
 = 308,

93 
	mB8_TYPE
 = 309,

94 
	mB16_TYPE
 = 310,

95 
	mB32_TYPE
 = 311,

96 
	mB64_TYPE
 = 312,

97 
	mBB64_TYPE
 = 313,

98 
	mBB128_TYPE
 = 314,

99 
	mPRED_TYPE
 = 315,

100 
	mTEXREF_TYPE
 = 316,

101 
	mSAMPLERREF_TYPE
 = 317,

102 
	mSURFREF_TYPE
 = 318,

103 
	mV2_TYPE
 = 319,

104 
	mV3_TYPE
 = 320,

105 
	mV4_TYPE
 = 321,

106 
	mCOMMA
 = 322,

107 
	mPRED
 = 323,

108 
	mHALF_OPTION
 = 324,

109 
	mEQ_OPTION
 = 325,

110 
	mNE_OPTION
 = 326,

111 
	mLT_OPTION
 = 327,

112 
	mLE_OPTION
 = 328,

113 
	mGT_OPTION
 = 329,

114 
	mGE_OPTION
 = 330,

115 
	mLO_OPTION
 = 331,

116 
	mLS_OPTION
 = 332,

117 
	mHI_OPTION
 = 333,

118 
	mHS_OPTION
 = 334,

119 
	mEQU_OPTION
 = 335,

120 
	mNEU_OPTION
 = 336,

121 
	mLTU_OPTION
 = 337,

122 
	mLEU_OPTION
 = 338,

123 
	mGTU_OPTION
 = 339,

124 
	mGEU_OPTION
 = 340,

125 
	mNUM_OPTION
 = 341,

126 
	mNAN_OPTION
 = 342,

127 
	mCF_OPTION
 = 343,

128 
	mSF_OPTION
 = 344,

129 
	mNSF_OPTION
 = 345,

130 
	mLEFT_SQUARE_BRACKET
 = 346,

131 
	mRIGHT_SQUARE_BRACKET
 = 347,

132 
	mWIDE_OPTION
 = 348,

133 
	mSPECIAL_REGISTER
 = 349,

134 
	mMINUS
 = 350,

135 
	mPLUS
 = 351,

136 
	mCOLON
 = 352,

137 
	mSEMI_COLON
 = 353,

138 
	mEXCLAMATION
 = 354,

139 
	mPIPE
 = 355,

140 
	mRIGHT_BRACE
 = 356,

141 
	mLEFT_BRACE
 = 357,

142 
	mEQUALS
 = 358,

143 
	mPERIOD
 = 359,

144 
	mBACKSLASH
 = 360,

145 
	mDIMENSION_MODIFIER
 = 361,

146 
	mRN_OPTION
 = 362,

147 
	mRZ_OPTION
 = 363,

148 
	mRM_OPTION
 = 364,

149 
	mRP_OPTION
 = 365,

150 
	mRNI_OPTION
 = 366,

151 
	mRZI_OPTION
 = 367,

152 
	mRMI_OPTION
 = 368,

153 
	mRPI_OPTION
 = 369,

154 
	mUNI_OPTION
 = 370,

155 
	mGEOM_MODIFIER_1D
 = 371,

156 
	mGEOM_MODIFIER_2D
 = 372,

157 
	mGEOM_MODIFIER_3D
 = 373,

158 
	mSAT_OPTION
 = 374,

159 
	mFTZ_OPTION
 = 375,

160 
	mNEG_OPTION
 = 376,

161 
	mATOMIC_AND
 = 377,

162 
	mATOMIC_OR
 = 378,

163 
	mATOMIC_XOR
 = 379,

164 
	mATOMIC_CAS
 = 380,

165 
	mATOMIC_EXCH
 = 381,

166 
	mATOMIC_ADD
 = 382,

167 
	mATOMIC_INC
 = 383,

168 
	mATOMIC_DEC
 = 384,

169 
	mATOMIC_MIN
 = 385,

170 
	mATOMIC_MAX
 = 386,

171 
	mLEFT_ANGLE_BRACKET
 = 387,

172 
	mRIGHT_ANGLE_BRACKET
 = 388,

173 
	mLEFT_PAREN
 = 389,

174 
	mRIGHT_PAREN
 = 390,

175 
	mAPPROX_OPTION
 = 391,

176 
	mFULL_OPTION
 = 392,

177 
	mANY_OPTION
 = 393,

178 
	mALL_OPTION
 = 394,

179 
	mGLOBAL_OPTION
 = 395,

180 
	mCTA_OPTION
 = 396,

181 
	mSYS_OPTION
 = 397,

182 
	mEXIT_OPTION
 = 398,

183 
	mABS_OPTION
 = 399,

184 
	mTO_OPTION
 = 400,

185 
	mCA_OPTION
 = 401,

186 
	mCG_OPTION
 = 402,

187 
	mCS_OPTION
 = 403,

188 
	mLU_OPTION
 = 404,

189 
	mCV_OPTION
 = 405,

190 
	mWB_OPTION
 = 406,

191 
	mWT_OPTION
 = 407

197 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


198 
	uYYSTYPE


204 
	mdoubÀ_vÆue
;

205 
	mÊﬂt_vÆue
;

206 
	möt_vÆue
;

207 * 
	m°rög_vÆue
;

208 * 
	m±r_vÆue
;

214 } 
	tYYSTYPE
;

215 
	#YYSTYPE_IS_TRIVIAL
 1

	)

216 
	#yy°y≥
 
YYSTYPE


	)

217 
	#YYSTYPE_IS_DECLARED
 1

	)

220 
YYSTYPE
 
±x_lvÆ
;

	@cuobjdump_to_ptxplus/ptx_parser.h

28 #i‚de‡
_PTX_PARSER_H_


29 
	#_PTX_PARSER_H_


	)

31 
	~<c°dlib
>

32 
	~<c°rög
>

33 
	~<°rög
>

34 
	~<li°
>

35 
	~<m≠
>

36 
	~<ve˘‹
>

37 
	~<as£π.h
>

38 
	~<io°ªam
>

39 
	~<s°ªam
>

40 
	~<°rög.h
>

41 
	~<°dio.h
>

42 
	~"cuobjdumpIn°Li°.h
"

44 
	#NON_ARRAY_IDENTIFIER
 1

	)

45 
	#ARRAY_IDENTIFIER_NO_DIM
 2

	)

46 
	#ARRAY_IDENTIFIER
 3

	)

47 
	#P_DEBUG
 1

	)

48 
	#DPRINTF
(...) \

49 if(
P_DEBUG
) { \

50 
	`¥ötf
("(%s:%s:%uË", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

51 
	`¥ötf
(
__VA_ARGS__
); \

52 
	`¥ötf
("\n"); \

53 
	`fÊush
(
°dout
); \

54 }

	)

57 
	e_mem‹y_•a˚_t
 {

58 
	mundeföed_•a˚
=0,

59 
	mªg_•a˚
,

60 
	mloˇl_•a˚
,

61 
	msh¨ed_•a˚
,

62 
	m∑øm_•a˚_un˛assifõd
,

63 
	m∑øm_•a˚_kî√l
,

64 
	m∑øm_•a˚_loˇl
,

65 
	mc⁄°_•a˚
,

66 
	mãx_•a˚
,

67 
	msurf_•a˚
,

68 
	mglobÆ_•a˚
,

69 
	mgíîic_•a˚


72 
	gg_îr‹_dëe˘ed
;

73 c⁄° *
	gg_fûíame
 = "";

74 
	gg_func_de˛
;

76 
	$£t_symèb
–* 
a
 ) {
	`DPRINTF
(" ");
	}
}

77 
	$íd_fun˘i⁄
(Ë{
	`DPRINTF
(" ");
	}
}

78 
	$add_dúe˘ive
(Ë{
	`DPRINTF
(" ");
	}
}

79 
	$add_fun˘i⁄_¨g
(Ë{
	`DPRINTF
(" ");
	}
}

80 
	$add_ö°ru˘i⁄
(Ë{
	`DPRINTF
(" ");
	}
}

81 
	$add_fûe
–
a
, c⁄° *
b
 ) {
	`DPRINTF
(" ");
	}
}

82 
	$add_v¨übÀs
(Ë{
	`DPRINTF
(" ");
	}
}

83 
	$£t_v¨übÀ_ty≥
(Ë{
	`DPRINTF
(" ");
	}
}

84 
	$add_›ti⁄
(
a
 ) {
	`DPRINTF
(" ");
	}
}

85 
	$add_¨øy_öôülizî
(Ë{
	`DPRINTF
(" ");
	}
}

86 
	$add_œbñ
–c⁄° *
a
 ) {
	`DPRINTF
(" ");
	}
}

87 
	$£t_ªtu∫
(Ë{
	`DPRINTF
(" ");
	}
}

88 
	$add_›code
–
a
 ) {
	`DPRINTF
(" ");
	}
}

89 
	$add_¥ed
–c⁄° *
a
, 
b
, 
c
 ) {
	`DPRINTF
(" ");
	}
}

90 
	$add_sˇœr_›î™d
–c⁄° *
a
 ) {
	`DPRINTF
("%s",á);
	}
}

91 
	$add_√g_¥ed_›î™d
–c⁄° *
a
 ) {
	`DPRINTF
(" ");
	}
}

92 
	$add_addªss_›î™d
–c⁄° *
a
, 
b
 ) {
	`DPRINTF
("%s",á);
	}
}

93 
	$ch™ge_›î™d_lohi
–
a
 ) {
	`DPRINTF
(" ");
	}
}

94 
	$ch™ge_doubÀ_›î™d_ty≥
–
a
 ) {
	`DPRINTF
(" ");
	}
}

95 
	$ch™ge_›î™d_√g
–Ë{
	`DPRINTF
(" ");
	}
}

96 
	$add_doubÀ_›î™d
–c⁄° *
a
, c⁄° *
b
 ) {
	`DPRINTF
(" ");
	}
}

97 
	$add_2ve˘‹_›î™d
–c⁄° *
a
, c⁄° *
b
 ) {
	`DPRINTF
(" ");
	}
}

98 
	$add_3ve˘‹_›î™d
–c⁄° *
a
, c⁄° *
b
, c⁄° *
c
 ) {
	`DPRINTF
(" ");
	}
}

99 
	$add_4ve˘‹_›î™d
–c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
 ) {
	`DPRINTF
(" ");
	}
}

100 
	$add_buûtö_›î™d
–
a
, 
b
 ) {
	`DPRINTF
(" ");
	}
}

101 
	$add_mem‹y_›î™d
(Ë{
	`DPRINTF
(" ");
	}
}

102 
	$ch™ge_mem‹y_addr_•a˚
–c⁄° *
a
 ) {
	`DPRINTF
(" ");
	}
}

103 
	$add_lôîÆ_öt
–
a
 ) {
	`DPRINTF
(" ");
	}
}

104 
	$add_lôîÆ_Êﬂt
–
a
 ) {
	`DPRINTF
(" ");
	}
}

105 
	$add_lôîÆ_doubÀ
–
a
 ) {
	`DPRINTF
(" ");
	}
}

106 
	$add_exã∫_•ec
(Ë{
	`DPRINTF
(" ");
	}
}

107 
	$add_Æignmít_•ec
–Ë{
	`DPRINTF
(" ");
	}
}

108 
	$add_¥agma
–c⁄° *
a
 ) {
	`DPRINTF
(" ");
	}
}

109 
	$add_c⁄°±r
(c⁄° * 
idítifõr1
, c⁄° * 
idítifõr2
, 
off£t
Ë{
	`DPRINTF
(" ");
	}
}

113 
cuobjdumpIn°Li°
 *
g_hódîLi°
;

116 
boﬁ
 
	göE¡ryDúe˘ive
 = 
Ál£
;

118 
boﬁ
 
	göP¨amDúe˘ive
 = 
Ál£
;

120 
boﬁ
 
	göC⁄°Dúe˘ive
 = 
Ál£
;

123 
boﬁ
 
	göTexDúe˘ive
 = 
Ál£
;

126 
	$add_idítifõr
–c⁄° *
a
, 
b
, 
c
 ) {

127 
	`DPRINTF
("«me=%s", 
a
);

128 if(
öC⁄°Dúe˘ive
){

131 
	}
}

133 
	$add_fun˘i⁄_«me
–c⁄° *
hódîI≈ut
 )

135 
	`DPRINTF
("«me=%s", 
hódîI≈ut
);

136 * 
hódîInfo
 = (*Ë
hódîI≈ut
;

137 c⁄° * 
com∑ªSåög
 = 
g_hódîLi°
->
	`gëLi°End
().
	`gëBa£
();

139 if((
	`°rcmp
(
com∑ªSåög
, ".entry")==0)||(strcmp(compareString, ".func")==0))

141 
g_hódîLi°
->
	`£tLa°E¡ryName
(
hódîInfo
);

142 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
hódîInfo
);

144 
	}
}

147 
	$add_•a˚_•ec
–
_mem‹y_•a˚_t
 
•ec
, 
vÆue
 )

149 
	`DPRINTF
("•ec=%u", 
•ec
);

150 
cuobjdumpIn°
 *
ö°E¡ry
;

152 
•ec
)

154 
∑øm_•a˚_un˛assifõd
:

155 if(
öE¡ryDúe˘ive
 && 
öP¨amDúe˘ive
) {

156 
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

157 
ö°E¡ry
->
	`£tBa£
(".param");

158 
g_hódîLi°
->
	`add
(
ö°E¡ry
);

161 
ãx_•a˚
:

162 
öTexDúe˘ive
 = 
åue
;

169 
c⁄°_•a˚
:

170 if(!
öE¡ryDúe˘ive
) {

183 
	}
}

185 
	$add_sˇœr_ty≥_•ec
–
hódîI≈ut
 )

187 
	`DPRINTF
(" ");

190 if–(
öE¡ryDúe˘ive
 && 
öP¨amDúe˘ive
Ë|| 
öTexDúe˘ive
 || 
öC⁄°Dúe˘ive
)

192 
hódîI≈ut
)

194 
S8_TYPE
:

195 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".s8");

197 
S16_TYPE
:

198 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".s16");

200 
S32_TYPE
:

201 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".s32");

203 
S64_TYPE
:

204 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".s64");

206 
U8_TYPE
:

207 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".u8");

209 
U16_TYPE
:

210 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".u16");

212 
U32_TYPE
:

213 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".u32");

215 
U64_TYPE
:

216 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".u64");

218 
F16_TYPE
:

219 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".f16");

221 
F32_TYPE
:

222 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".f32");

224 
F64_TYPE
:

225 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".f64");

227 
B8_TYPE
:

228 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".b8");

230 
B16_TYPE
:

231 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".b16");

233 
B32_TYPE
:

234 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".b32");

236 
B64_TYPE
:

237 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".b64");

239 
PRED_TYPE
:

240 
g_hódîLi°
->
	`gëLi°End
().
	`addBa£Modifõr
(".pred");

243 
°d
::
cout
 << "UnknownÅype spec" << "\n";

247 
	}
}

250 
	$add_vîsi⁄_öfo
–
vîsi⁄Numbî
, 
ext
)

252 
	`DPRINTF
(" ");

253 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

254 
ö°E¡ry
->
	`£tBa£
(".version");

255 
g_hódîLi°
->
	`add
(
ö°E¡ry
);

259 
°d
::
o°rög°ªam
 
°rs
;

260 
°rs
 << 
vîsi⁄Numbî
;

261 *
vîsi⁄Numbî2
 = 
	`°rdup
(
°rs
.
	`°r
().
	`c_°r
());

263 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
vîsi⁄Numbî2
);

265 
	}
}

267 
	$èrgë_hódî
(* 
fú°T¨gë
)

269 
	`DPRINTF
("%s", 
fú°T¨gë
);

270 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

271 
ö°E¡ry
->
	`£tBa£
(".target");

272 
g_hódîLi°
->
	`add
(
ö°E¡ry
);

274 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
fú°T¨gë
);

275 
	}
}

277 
	$èrgë_hódî2
(* 
fú°T¨gë
, * 
£c⁄dT¨gë
)

279 
	`DPRINTF
("%s, %s", 
fú°T¨gë
, 
£c⁄dT¨gë
);

280 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

281 
ö°E¡ry
->
	`£tBa£
(".target");

282 
g_hódîLi°
->
	`add
(
ö°E¡ry
);

284 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
fú°T¨gë
);

286 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
£c⁄dT¨gë
);

287 
	}
}

289 
	$èrgë_hódî3
(* 
fú°T¨gë
, * 
£c⁄dT¨gë
, * 
thúdT¨gë
)

291 
	`DPRINTF
("%s, %s, %s", 
fú°T¨gë
, 
£c⁄dT¨gë
, 
thúdT¨gë
);

292 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

293 
ö°E¡ry
->
	`£tBa£
(".target");

294 
g_hódîLi°
->
	`add
(
ö°E¡ry
);

296 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
fú°T¨gë
);

298 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
£c⁄dT¨gë
);

300 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
thúdT¨gë
);

301 
	}
}

303 
	$°¨t_fun˘i⁄
–
a
 )

305 
	`DPRINTF
(" ");

306 
öE¡ryDúe˘ive
 = 
åue
;

307 
	}
}

309 * 
	$ª£t_symèb
()

311 
	`DPRINTF
(" ");

312 
öE¡ryDúe˘ive
 = 
Ál£
;

313  (*Ë
NULL
;

314 
	}
}

316 
	$func_hódî
(c⁄° * 
hódîBa£
)

318 
	`DPRINTF
("%s", 
hódîBa£
);

320 if((
	`°rcmp
(
hódîBa£
, ".entry")==0)||(strcmp(headerBase, ".func")==0)) {

321 
öE¡ryDúe˘ive
 = 
åue
;

322 
g_hódîLi°
->
	`addE¡ry
("");

323 
cuobjdumpIn°
 *
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

324 
ö°E¡ry
->
	`£tBa£
(
hódîBa£
);

325 
g_hódîLi°
->
	`add
(
ö°E¡ry
);

328 
	}
}

330 
	$func_hódî_öfo
(c⁄° * 
hódîInfo
)

332 
	`DPRINTF
("%s", 
hódîInfo
);

335 if(
öE¡ryDúe˘ive
 && !
öTexDúe˘ive
) {

336 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
hódîInfo
);

338 if(
	`°rcmp
(
hódîInfo
,"(")==0)

339 
öP¨amDúe˘ive
 = 
åue
;

342 if(
	`°rcmp
(
hódîInfo
,")")==0) {

343 
öP¨amDúe˘ive
 = 
Ál£
;

345 } if(
öTexDúe˘ive
) {

346 
g_hódîLi°
->
	`addTex
(
hódîInfo
);

347 
öTexDúe˘ive
 = 
Ál£
;

348 } if(
öC⁄°Dúe˘ive
){

351 
	`¥ötf
("Unkow¿hódî info: #%s#\n", 
hódîInfo
);

354 
	}
}

356 
	$func_hódî_öfo_öt
(c⁄° * 
s
, 
i
)

358 
	`DPRINTF
("%†%d", 
s
, 
i
);

359 if(
öE¡ryDúe˘ive
 && !
öTexDúe˘ive
) {

360 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
s
);

361 *
buff
 = (*Ë
	`mÆloc
(30*());

362 
	`•rötf
(
buff
, "%d", 
i
);

363 
	`as£π
 (
i
>=0);

364 
g_hódîLi°
->
	`gëLi°End
().
	`addO≥ønd
(
buff
);

366 
	}
}

	@cuobjdump_to_ptxplus/sass.l

30 
	~<°dio.h
>

31 
	~"ßss_∑r£r.hh
"

32 
	~<°rög.h
>

36 
	#YY_NEVER_INTERACTIVE
 1

	)

38 
	#yylvÆ
 
ßss_lvÆ


	)

40 
ßss_îr‹
(const *);

42 %
›ti⁄
 
noyywøp


43 %
›ti⁄
 
yylöío


44 %
›ti⁄
 
nou≈ut


47 
Æpha
 [
a
-
zA
-
Z
]

48 
numîic
 [0-9]

49 
hexÆpha
 [
A
-
Fa
-
f
]

50 
Æph™um
 ({
Æpha
}|{
numîic
})

51 
hexdigô
 ({
numîic
}|{
hexÆpha
})

52 
whôe•a˚
 [ \
t
]

53 
√wlöe
 [\
n
]

54 
™ych¨buäewlöe
 [^\
n
]

55 
™ych¨
 ({
√wlöe
}|{
™ych¨buäewlöe
})

56 
pùe
 \|

58 
idítifõr
 ({
Æpha
}({
Æph™um
}|["_$"])*)|([
_$
%]({alphanum}|["_$"])+)

59 
hexlôîÆ
 0[
xX
]{
hexdigô
}+
U
?

60 
o˘lôîÆ
 0[0-7]+
U
?

61 
bölôîÆ
 0[
bB
][01]+
U
?

62 
de˛ôîÆ
 ([1-9][0-9]*
U
?)|0U?

63 
ÊéôîÆ
 [0-9]+\.[0-9]+

65 %% /* 
	$yyÀx
 */

76 "[" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
OSQBRACKET
;

77 "]" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
CSQBRACKET
;

80 "BAR.ARV.WAIT b0, 0xfff" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
BAR
;

81 
ADA
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  ADA;

82 
BRA
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  BRA;

83 
CAL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  CAL;

84 
COS
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  COS;

85 
DADD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  DADD;

86 
DMIN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  DMIN;

87 
DMAX
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  DMAX;

88 
DFMA
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  DFMA;

89 
DMUL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  DMUL;

90 
EX2
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  EX2;

91 
F2F
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  F2F;

92 
F2I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  F2I;

93 
FADD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FADD;

94 
FADD32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FADD32;

95 
FADD32I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FADD32I;

96 
FMAD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMAD;

97 
FMAD32I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMAD32I;

98 
FMUL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMUL;

99 
FMUL32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMUL32;

100 
FMUL32I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMUL32I;

101 
FSET
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FSET;

102 
DSET
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  DSET;

103 
G2R
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  G2R;

104 
GLD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GLD;

105 
GST
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GST;

106 
I2F
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  I2F;

107 
I2I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  I2I;

108 
S2R
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  S2R;

109 
STS
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  STS;

110 
LD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SASS_LD
;

111 
ST
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SASS_ST
;

112 
IADD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IADD;

113 
IADD
\.
CARRY
{
numîic
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IADDCARRY
;

114 
IADD32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IADD32;

115 
IADD32I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IADD32I;

116 
IMAD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMAD;

117 
ISAD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  ISAD;

118 
IMAD
\.
U24
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMAD24
;

119 
IMAD
\.
S24
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMAD24
;

120 
IMAD32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMAD32;

121 
IMAD32I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMAD32I;

122 
IMUL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMUL;

123 
IMUL
\.
U24
\.U24 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMUL24
;

124 
IMUL
\.
S24
\.S24 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMULS24
;

125 
IMUL32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMUL32;

126 
IMUL32
\.
S24
\.S24 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMUL32S24
;

127 
IMUL32
\.
U24
\.U24 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMUL32U24
;

128 
IMUL32I
\.
S24
\.S24 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMUL32IS24
;

129 
IMUL32I
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMUL32I;

130 
IMUL32I
\.
U24
\.U24 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IMUL32I24
;

131 
ISET
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  ISET;

132 
LG2
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LG2;

133 
LLD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LLD;

134 
LOP
\.
AND
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  AND;

135 
LOP
\.
OR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  OR;

136 
LOP
\.
PASS_B
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
NOT
;

137 
LOP
\.
XOR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  XOR;

138 
LOP
\.
S
\.
AND
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ANDS
;

139 
LOP
\.
S
\.
OR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ORS
;

140 
LOP
\.
S
\.
PASS_B
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
NOTS
;

141 
LOP
\.
S
\.
XOR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
XORS
;

142 
LST
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LST;

143 
MOV
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  MOV;

144 
MOV32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  MOV32;

145 
MVC
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  MVC;

146 
MVI
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  MVI;

147 
NOP
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  NOP;

148 
R2A
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  R2A;

149 
R2G
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  R2G;

150 
R2G
.
U16
.
U8
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
R2GU16U8
;

151 
RCP
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  RCP;

152 
RCP32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  RCP32;

153 
RET
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  RET;

154 
RRO
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  RRO;

155 
RSQ
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  RSQ;

156 
SIN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  SIN;

157 
SHL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  SHL;

158 
SHR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  SHR;

159 
SSY
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  SSY;

160 
BAR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  BAR;

161 
LDS
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LDS;

162 
IMIN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMIN;

163 
IMAX
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  IMAX;

164 
FMAX
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMAX;

165 
FMIN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  FMIN;

166 
C2R
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  C2R;

167 
R2C
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  R2C;

168 
A2R
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  A2R;

169 
TEX
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  TEX;

170 
TEX32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  TEX32;

171 
EXIT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  EXIT;

172 
GRED
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GRED;

173 
GATOM
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GATOM;

174 
PBK
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  PBK;

175 
BRK
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  BRK;

176 
VOTE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  VOTE;

179 
EQ
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  EQ;

180 
EQU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  EQU;

181 
GE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GE;

182 
GEU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GEU;

183 
GT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GT;

184 
GTU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  GTU;

185 
LE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LE;

186 
LEU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LEU;

187 
LT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LT;

188 
LTU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  LTU;

189 
NE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  NE;

190 
NEU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  NEU;

191 \.
BEXT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTBEXT
;

192 \.
S
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTS
;

193 \.
SFU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTSFU
;

194 \.
TRUNC
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTTRUNC
;

195 \.
CEIL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTCEIL
;

196 \.
FLOOR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTFLOOR
;

197 \.
IR
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

198 \.
UN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTUN
;

199 \.
NODEP
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTNODEP
;

200 \.
SAT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

201 \.
ANY
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTANY
;

202 \.
ALL
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTALL
;

203 \.
MAD
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

208 \.
EQ
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTEQ
;

209 \.
EQU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTEQU
;

210 \.
GE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTGE
;

211 \.
GEU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTGEU
;

212 \.
GT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTGT
;

213 \.
GTU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTGTU
;

214 \.
LE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTLE
;

215 \.
LEU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTLEU
;

216 \.
LT
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTLT
;

217 \.
LTU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTLTU
;

218 \.
NE
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTNE
;

219 \.
NEU
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTNEU
;

220 \.
NOT_SIGN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTNSF
;

221 \.
SIGN
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTSF
;

222 \.
CARRY
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTCARRY
;

223 \.
CARRY
{
numîic
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

224 \.
CC
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTCC
;

225 \.
X
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTX
;

226 \.
E
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTE
;

227 \.
RED
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTRED
;

228 \.
POPC
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTPOPC
;

231 \.
F16
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTF16
;

232 \.
F32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTF32
;

233 \.
F64
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTF64
;

234 \.
S8
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTS8
;

235 \.
S16
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTS16
;

236 \.
S32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTS32
;

237 \.
S64
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTS64
;

238 \.
S128
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTS128
;

239 \.
U8
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTU8
;

240 \.
U16
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTU16
;

241 \.
U32
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTU32
;

242 \.
U24
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTU24
;

243 \.
U64
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTU64
;

244 \.
HI
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTHI
;

245 \.
NOINC
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOTNOINC
;

250 [\-]?
R
{
numîic
}+ 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
REGISTER
;

251 [\-]?
R
{
numîic
}+
L
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
REGISTERLO
;

252 [\-]?
R
{
numîic
}+
H
 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
REGISTERHI
;

253 
A
{
numîic
}+ 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
OFFSETREGISTER
;

254 \.
C
{
numîic
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
PREDREGISTER
;

255 "ÿ["{
hexlôîÆ
}\] 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
PREDREGISTER2
;

256 
C
{
numîic
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
PREDREGISTER3
;

257 "SR_"[^\.; \
t
]+ 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SREGISTER
;

266 "F©böÖtx code:" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
PTXHEADER
;

267 "F©böÉl‡code:" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ELFHEADER
;

269 "¨ch = " 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOARCHVERSION
;

270 "codêvîsi⁄ = " 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOCODEVERSION_HEADER
;

271 \[{
numîic
},{numîic}\] 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOCODEVERSION
;

272 "¥odu˚∏" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOPRODUCER
;

273 "ho° = " 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOHOST
;

274 {
numîic
}{numîic}"bô" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOCOMPILESIZE
;

275 "compûe_sizê" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOCOMPILESIZE_HEADER
;

276 "idítifõ∏" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INFOIDENTIFIER
;

277 "codêf‹ " 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
VERSIONHEADER
;

278 "Fun˘i⁄ : " 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
FUNCTIONHEADER
;

279 "/*"{
hexlôîÆ
}{
whôe•a˚
}*"*/" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
INSTHEX
;

280 "." 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DOT
;

283 [\-]?"|g| ["{
hexlôîÆ
}"]"".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ABSSMEMLOCATION
;

284 [\-]?"|g| [R"{
numîic
}+\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ABSSMEMLOCATION
;

285 [\-]?"|g| [A"{
numîic
}+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ABSSMEMLOCATION
;

286 [\-]?"|g| [A"{
numîic
}+\+\+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ABSSMEMLOCATION
;

288 [\-]?"g ["{
hexlôîÆ
}"]"".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SMEMLOCATION
;

289 [\-]?"g [R"{
numîic
}+\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SMEMLOCATION
;

290 [\-]?"g [A"{
numîic
}+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SMEMLOCATION
;

291 [\-]?"g [A"{
numîic
}+\+\+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SMEMLOCATION
;

293 [\-]?"globÆ14 ["{
hexlôîÆ
}"]"".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
GMEMLOCATION
;

294 [\-]?"globÆ14 [R"{
numîic
}+\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
GMEMLOCATION
;

295 [\-]?"globÆ14 [A"{
numîic
}+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
GMEMLOCATION
;

296 [\-]?"globÆ14 [A"{
numîic
}+\+\+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
GMEMLOCATION
;

298 [\-]?"¯["{
hexlôîÆ
}"] ["{hexlôîÆ}"]"".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
CMEMLOCATION
;

299 [\-]?"¯["{
hexlôîÆ
}"] [R"{
numîic
}+\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
CMEMLOCATION
;

300 [\-]?"¯["{
hexlôîÆ
}"] [A"{
numîic
}+\+{hexlôîÆ}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
CMEMLOCATION
;

301 [\-]?"¯["{
hexlôîÆ
}"] [A"{
numîic
}+\+\+\+{hexlôîÆ}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
CMEMLOCATION
;

303 [\-]?"loˇ»["{
hexlôîÆ
}"]"".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LMEMLOCATION
;

304 [\-]?"loˇ»[R"{
numîic
}+\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LMEMLOCATION
;

305 [\-]?"loˇ»[A"{
numîic
}+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LMEMLOCATION
;

306 [\-]?"loˇ»[A"{
numîic
}+\+\+\+{
hexlôîÆ
}\]".U16"? 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LMEMLOCATION
;

310 {
idítifõr
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IDENTIFIER
;

311 [\-]?{
hexlôîÆ
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
HEXLITERAL
;

314 "/*" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LABELSTART
;

315 "*/" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LABELEND
;

316 {
hexdigô
}{hexdigô}{hexdigô}{hexdigô} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LABEL
;

321 \–
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
LEFTBRACKET
;

322 \Ë
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
RIGHTBRACKET
;

332 "|" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
PIPE
;

333 "~" 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
TILDE
;

336 {
√wlöe
}+  
NEWLINE
;

339 ;  
SEMICOLON
;

342 {
whôe•a˚
}+

344 "//"{
™ych¨buäewlöe
}*

351 <<
EOF
>>  0;

354 . 
	`ßss_îr‹
("InvalidÅoken");

356 
	}
%%

358 
	$ßss_îr‹
(c⁄° * 
mesßge
)

360 
	`¥ötf
(" ");Örötf(
mesßge
);Örötf("Çó∏\"");Örötf(
yyãxt
);Örintf("\"");

361 
	`¥ötf
(" onÜine ");

362 
löe
[5]; 
	`•rötf
÷öe, "%i", 
yylöío
); 
	`¥ötf
(line);

363 
	`¥ötf
("\n");

364 
	`exô
(1);

365 
	}
}

	@cuobjdump_to_ptxplus/sass.y

29 
	~<°dio.h
>

30 
	~"cuobjdumpIn°Li°.h
"

32 
yyÀx
();

33 
yyîr‹
(const *);

35 
cuobjdumpIn°Li°
 *
g_ö°Li°
;

37 
cuobjdumpIn°
 *
	gö°E¡ry
;

42 
doubÀ_vÆue
;

43 
Êﬂt_vÆue
;

44 
öt_vÆue
;

45 * 
°rög_vÆue
;

46 * 
±r_vÆue
;

49 %
tokí
 <
°rög_vÆue
> 
BAR


50 %
tokí
 <
°rög_vÆue
> 
ADA
 
AND
 
ANDS
 
BRA
 
CAL
 
COS
 
DADD
 
DMIN
 
DMAX
 
DFMA
 
DMUL
 
EX2
 
F2F
 
F2I
 
FADD


51 %
tokí
 <
°rög_vÆue
> 
FADD32
 
FADD32I
 
FMAD
 
FMAD32I
 
FMUL
 
FMUL32
 
FMUL32I
 
FSET
 
DSET
 
G2R


52 %
tokí
 <
°rög_vÆue
> 
GLD
 
GST
 
I2F
 
I2I
 
IADD
 
IADD32
 
IADD32I
 
IMAD
 
ISAD
 
IMAD24
 
IMAD32I
 
IMAD32
 
IADDCARRY


53 %
tokí
 <
°rög_vÆue
> 
IMUL
 
IMUL24
 
IMULS24
 
IMUL32
 
IMUL32S24
 
IMUL32U24
 
IMUL32I
 
IMUL32I24
 
IMUL32IS24


54 %
tokí
 <
°rög_vÆue
> 
ISET
 
LG2
 
LLD
 
LST
 
MOV
 
MOV32
 
MVC
 
MVI
 
NOP
 
NOT
 
NOTS
 
OR
 
ORS


55 %
tokí
 <
°rög_vÆue
> 
R2A
 
R2G
 
R2GU16U8
 
RCP
 
RCP32
 
RET
 
RRO
 
RSQ
 
SIN
 
SHL
 
SHR
 
SSY
 
XOR
 
XORS


56 %
tokí
 <
°rög_vÆue
> 
S2R
 
SASS_LD
 
STS
 
LDS
 
SASS_ST
 
IMIN
 
IMAX
 
A2R
 
FMAX
 
FMIN
 
TEX
 
TEX32
 
C2R
 
EXIT


57 %
tokí
 <
°rög_vÆue
> 
GRED
 
PBK
 
BRK
 
R2C
 
GATOM
 
VOTE


59 %
tokí
 <
°rög_vÆue
> 
EQ
 
EQU
 
GE
 
GEU
 
GT
 
GTU
 
LE
 
LEU
 
LT
 
LTU
 
NE
 
NEU


60 %
tokí
 <
°rög_vÆue
> 
DOTBEXT
 
DOTS
 
DOTSFU


61 %
tokí
 <
°rög_vÆue
> 
DOTTRUNC
 
DOTCEIL
 
DOTFLOOR
 
DOTIR
 
DOTUN
 
DOTNODEP
 
DOTSAT
 
DOTANY
 
DOTALL


62 %
tokí
 <
°rög_vÆue
> 
DOTF16
 
DOTF32
 
DOTF64
 
DOTS8
 
DOTS16
 
DOTS32
 
DOTS64
 
DOTS128
 
DOTU8
 
DOTU16
 
DOTU32
 
DOTU24
 
DOTU64


63 %
tokí
 <
°rög_vÆue
> 
DOTHI
 
DOTNOINC


64 %
tokí
 <
°rög_vÆue
> 
DOTEQ
 
DOTEQU
 
DOTGE
 
DOTGEU
 
DOTGT
 
DOTGTU
 
DOTLE
 
DOTLEU
 
DOTLT
 
DOTLTU
 
DOTNE
 
DOTNEU
 
DOTNSF
 
DOTSF
 
DOTCARRY


65 %
tokí
 <
°rög_vÆue
> 
DOTCC
 
DOTX
 
DOTE
 
DOTRED
 
DOTPOPC


66 %
tokí
 <
°rög_vÆue
> 
REGISTER
 
REGISTERLO
 
REGISTERHI
 
OFFSETREGISTER


67 %
tokí
 <
°rög_vÆue
> 
PREDREGISTER
 
PREDREGISTER2
 
PREDREGISTER3
 
SREGISTER


68 %
tokí
 <
°rög_vÆue
> 
VERSIONHEADER
 
FUNCTIONHEADER


69 %
tokí
 <
°rög_vÆue
> 
SMEMLOCATION
 
ABSSMEMLOCATION
 
GMEMLOCATION
 
CMEMLOCATION
 
LMEMLOCATION


70 %
tokí
 <
°rög_vÆue
> 
IDENTIFIER


71 %
tokí
 <
°rög_vÆue
> 
HEXLITERAL


72 %
tokí
 <
°rög_vÆue
> 
LEFTBRACKET
 
RIGHTBRACKET


73 %
tokí
 <
°rög_vÆue
> 
PIPE
 
TILDE


74 %
tokí
 <
°rög_vÆue
> 
NEWLINE
 
SEMICOLON


75 %
tokí
 <
°rög_vÆue
> 
LABEL
 
LABELSTART
 
LABELEND


76 %
tokí
 <
°rög_vÆue
> 
PTXHEADER
 
ELFHEADER


77 %
tokí
 <
°rög_vÆue
> 
INFOARCHVERSION


78 %
tokí
 <
°rög_vÆue
> 
INFOCODEVERSION_HEADER
 
INFOCODEVERSION


79 %
tokí
 <
°rög_vÆue
> 
INFOPRODUCER


80 %
tokí
 <
°rög_vÆue
> 
INFOHOST


81 %
tokí
 <
°rög_vÆue
> 
INFOCOMPILESIZE_HEADER
 
INFOCOMPILESIZE


82 %
tokí
 <
°rög_vÆue
> 
INFOIDENTIFIER
 
DOT


83 %
tokí
 <
°rög_vÆue
> 
INSTHEX


84 %
tokí
 <
°rög_vÆue
> 
OSQBRACKET
 
CSQBRACKET


86 %
ty≥
<
°rög_vÆue
> 
sim∂eIn°ru˘i⁄s


87 %
ty≥
<
°rög_vÆue
> 
¥ediˇãModifõr


88 %
ty≥
<
°rög_vÆue
> 
›Ty≥s


90 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

93 
¥ogøm
 :Örogøm 
ßssCode


94 | 
ßssCode
;

96 
ßssCode
 : 
VERSIONHEADER
 
IDENTIFIER
 
NEWLINE
 
fun˘i⁄Li°
 { 
	`¥ötf
(
$1
);Örötf(
$2
);Örintf(" NoÖarsingÉrrors\n\n"); }

97 | 
NEWLINE
 
VERSIONHEADER
 
IDENTIFIER
 NEWLINE 
fun˘i⁄Li°
 { 
	`¥ötf
(
$2
);Örötf(
$3
);Örintf(" NoÖarsingÉrrors\n\n"); }

98 | 
VERSIONHEADER
 
IDENTIFIER
 
NEWLINE
;

100 
fun˘i⁄Li°
 : fun˘i⁄Li° 
fun˘i⁄


101 | 
fun˘i⁄


104 
fun˘i⁄
 : 
FUNCTIONHEADER
 
IDENTIFIER
 {

105 
	`¥ötf
(
$1
);

106 
	`¥ötf
(
$2
);

107 
	`¥ötf
("\n");

108 
g_ö°Li°
->
	`addE¡ry
(
$2
);

109 
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

110 
ö°E¡ry
->
	`£tBa£
(".entry");

111 
g_ö°Li°
->
	`add
(
ö°E¡ry
);

112 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
$2
);} 
°©emítLi°
 
NEWLINE


116 
°©emítLi°
 : sèãmítLi° 
°©emít
 
NEWLINE
 { 
	`¥ötf
("\n"); }

117 | 
°©emítLi°
 
°©emít
 
SEMICOLON
 
NEWLINE
 { 
	`¥ötf
(";\n"); }

118 | 
°©emít
 
NEWLINE
 { 
	`¥ötf
("\n"); }

119 | 
°©emít
 
SEMICOLON
 
NEWLINE
 { 
	`¥ötf
(";\n"); }

120 | 
NEWLINE
 {}

123 
°©emít
 : { 
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); } 
ö°ru˘i⁄Labñ
 
ö°ru˘i⁄Hex
 
as£mblyIn°ru˘i⁄


126 
ö°ru˘i⁄Hex
 : 
INSTHEX


129 
ö°ru˘i⁄Labñ
 : 
LABELSTART
 
LABEL
 
LABELEND
 { * 
ãmpI≈ut
 = 
$2
;

130 * 
ãmpLabñ
 = 
√w
 [12];

131 
ãmpLabñ
[0] = 'l';

132 
ãmpLabñ
[1] = '0';

133 
ãmpLabñ
[2] = 'x';

134 
i
=0; i<(8-
	`°æí
(
ãmpI≈ut
)); i++)

136 
ãmpLabñ
[3+
i
] = '0';

138 
i
=(11-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

140 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

142 
ãmpLabñ
[11] = '\0';

143 
ö°E¡ry
->
	`£tLabñ
(
ãmpLabñ
); }

146 
as£mblyIn°ru˘i⁄
 : 
ba£In°ru˘i⁄
 
modifõrLi°
 
›î™dLi°
 { }

152 
ba£In°ru˘i⁄
 : 
sim∂eIn°ru˘i⁄s
 { 
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(instEntry);}

153 | 
bønchIn°ru˘i⁄s


154 | 
GRED
 
DOT
 
sim∂eIn°ru˘i⁄s
 { 
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(ö°E¡ry); g_ö°Li°->
	`gëLi°End
().
	`addBa£Modifõr
(
$3
);}

155 | 
GATOM
 
DOT
 
sim∂eIn°ru˘i⁄s
 { 
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(ö°E¡ry); g_ö°Li°->
	`gëLi°End
().
	`addBa£Modifõr
(
$3
);}

156 | 
pbkIn°ru˘i⁄


159 
sim∂eIn°ru˘i⁄s
 : 
ADA
 | 
AND
 | 
ANDS
 | 
COS
 | 
DADD
 | 
DMIN
 | 
DMAX
 | 
DFMA
 | 
DMUL
 | 
EX2
 | 
F2F


160 | 
F2I
 | 
FADD
 | 
FADD32
 | 
FADD32I
 | 
FMAD
 | 
FMAD32I
 | 
FMUL


161 | 
FMUL32
 | 
FMUL32I
 | 
FSET
 | 
DSET
 | 
G2R
 | 
GLD
 | 
GST
 | 
I2F
 | 
I2I


162 | 
IADD
 | 
IADD32
 | 
IADD32I
 | 
IMAD
 | 
ISAD
 | 
IMAD24
 | 
IMAD32I
 | 
IMAD32
 | 
IMUL


163 | 
IMUL24
 | 
IMULS24
 | 
IMUL32
 | 
IMUL32S24
 | 
IMUL32I
 | 
IMUL32I24
 | 
IMUL32IS24


164 | 
IMUL32U24


165 | 
ISET
 | 
LG2
 | 
LLD
 | 
LST
 | 
MOV
 | 
MOV32
 | 
MVC
 | 
MVI
 | 
NOP


166 | 
NOT
 | 
NOTS
 | 
OR
 | 
ORS
 | 
R2A
 | 
R2G
 | 
R2GU16U8
 | 
RCP
 | 
RCP32
 | 
RET
 | 
RRO


167 | 
RSQ
 | 
SHL
 | 
SHR
 | 
SIN
 | 
SSY
 | 
XOR
 | 
XORS
 | 
S2R
 | 
SASS_LD
 | 
STS


168 | 
LDS
 | 
SASS_ST
 | 
EXIT
 | 
BAR
 | 
IMIN
 | 
IMAX
 | 
A2R
 | 
FMAX
 | 
FMIN


169 | 
TEX
 | 
TEX32
 | 
C2R
 | 
BRK
 | 
R2C
 | 
IADDCARRY
 | 
VOTE


172 
pbkIn°ru˘i⁄
 : 
PBK
 {

173 
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(instEntry);

174 } 
HEXLITERAL
 {

175 * 
ãmpI≈ut
 = 
$3
;

176 * 
ãmpLabñ
 = 
√w
 [12];

177 
ãmpLabñ
[0] = 'l';

178 
ãmpLabñ
[1] = '0';

179 
ãmpLabñ
[2] = 'x';

180 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

182 
ãmpLabñ
[3+
i
] = '0';

184 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

186 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

188 
ãmpLabñ
[11] = '\0';

189 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

190 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);

194 
bønchIn°ru˘i⁄s
 : 
BRA
 {
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(ö°E¡ry);} 
ö°ru˘i⁄Pªdiˇã
 
HEXLITERAL


195 { 
	`¥ötf
(
$4
);

196 * 
ãmpI≈ut
 = 
$4
;

197 * 
ãmpLabñ
 = 
√w
 [12];

198 
ãmpLabñ
[0] = 'l';

199 
ãmpLabñ
[1] = '0';

200 
ãmpLabñ
[2] = 'x';

201 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

203 
ãmpLabñ
[3+
i
] = '0';

205 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

207 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

209 
ãmpLabñ
[11] = '\0';

210 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

211 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);}

212 | 
BRA
 {
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(ö°E¡ry);} 
HEXLITERAL


213 { 
	`¥ötf
(
$3
);

214 * 
ãmpI≈ut
 = 
$3
;

215 * 
ãmpLabñ
 = 
√w
 [12];

216 
ãmpLabñ
[0] = 'l';

217 
ãmpLabñ
[1] = '0';

218 
ãmpLabñ
[2] = 'x';

219 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

221 
ãmpLabñ
[3+
i
] = '0';

223 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

225 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

227 
ãmpLabñ
[11] = '\0';

228 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

229 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);}

230 | 
CAL
 {
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(ö°E¡ry);} 
HEXLITERAL


231 { 
	`¥ötf
(
$3
);

232 * 
ãmpI≈ut
 = 
$3
;

233 * 
ãmpLabñ
 = 
√w
 [12];

234 
ãmpLabñ
[0] = 'l';

235 
ãmpLabñ
[1] = '0';

236 
ãmpLabñ
[2] = 'x';

237 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

239 
ãmpLabñ
[3+
i
] = '0';

241 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

243 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

245 
ãmpLabñ
[11] = '\0';

246 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

247 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);}

249 | 
CAL
 {
	`¥ötf
(
$1
); 
ö°E¡ry
->
	`£tBa£
($1); 
g_ö°Li°
->
	`add
(ö°E¡ry);} 
DOTNOINC
 
HEXLITERAL


250 { 
	`¥ötf
(
$4
);

251 * 
ãmpI≈ut
 = 
$4
;

252 * 
ãmpLabñ
 = 
√w
 [12];

253 
ãmpLabñ
[0] = 'l';

254 
ãmpLabñ
[1] = '0';

255 
ãmpLabñ
[2] = 'x';

256 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

258 
ãmpLabñ
[3+
i
] = '0';

260 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

262 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

264 
ãmpLabñ
[11] = '\0';

265 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

266 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);}

270 
modifõrLi°
 : 
modifõr
 modifierList

275 
modifõr
 : 
›Ty≥s
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addTy≥Modifõr
($1);}

276 | 
DOTBEXT
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".bext"); }

277 | 
DOTS
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".s"); }

278 | 
DOTSFU
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".sfu"); }

279 | 
DOTTRUNC
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".rz"); }

280 | 
DOTCEIL
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".rp"); }

281 | 
DOTFLOOR
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".rm"); }

282 | 
DOTX
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".x"); }

283 | 
DOTE
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".e"); }

284 | 
DOTRED
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".red"); }

285 | 
DOTPOPC
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".popc"); }

286 | 
DOTIR
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".ir"); }

287 | 
DOTUN
 { }

288 | 
DOTNODEP
 { }

289 | 
DOTANY
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".any"); }

290 | 
DOTALL
 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".all"); }

293 
›Ty≥s
 : 
DOTF16


294 | 
DOTF32


295 | 
DOTF64


296 | 
DOTS8


297 | 
DOTS16


298 | 
DOTS32


299 | 
DOTS64


300 | 
DOTS128


301 | 
DOTU8


302 | 
DOTU16


303 | 
DOTU32


304 | 
DOTU24


305 | 
DOTU64


306 | 
DOTHI


309 
›î™dLi°
 : o≥øndLi° { 
	`¥ötf
(" "); } 
›î™d
 {}

314 
›î™d
 : 
ªgi°îloˇti⁄


315 | 
PIPE
 
ªgi°îloˇti⁄
 PIPE { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".abs"); }

316 | 
TILDE
 
ªgi°îloˇti⁄


317 | 
LEFTBRACKET
 
ö°ru˘i⁄Pªdiˇã
 
RIGHTBRACKET


318 | 
mem‹yloˇti⁄
 
›Ty≥s
 { 
	`¥ötf
(
$2
); 
g_ö°Li°
->
	`gëLi°End
().
	`addTy≥Modifõr
($2);}

319 | 
mem‹yloˇti⁄


320 | 
immedüãVÆue


321 | 
exåaModifõr


322 | 
›î™dPªdiˇã


323 | 
¥eO≥ønd


327 
ªgi°îloˇti⁄
 : 
REGISTER
 
ªgMod
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
($1);}

328 | 
OSQBRACKET
 
REGISTER
 
CSQBRACKET
 { 
	`¥ötf
(
$1
);Örötf(
$2
);Örötf(
$3
); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
($2);}

329 | 
REGISTERLO
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
($1,
åue
);}

330 | 
REGISTERHI
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
($1,
åue
);}

331 | 
SREGISTER
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
($1,
Ál£
);}

332 | 
OFFSETREGISTER
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
($1);}

333 | 
PREDREGISTER
 
PREDREGISTER2
 { 
	`¥ötf
(
$1
);Örötf(" ");Örötf(
$2
); 
g_ö°Li°
->
	`addCuobjdumpDoubÀPªdReg
($1, $2);}

334 | 
PREDREGISTER
 
REGISTER
 { 
	`¥ötf
(
$1
);Örötf(" ");Örötf(
$2
); 
g_ö°Li°
->
	`addCuobjdumpDoubÀPªdReg
($1, $2);}

338 
ªgMod
 : 
DOTCC


343 
mem‹yloˇti⁄
 : 
SMEMLOCATION
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
($1,1);}

344 | 
ABSSMEMLOCATION
 {

345 
	`¥ötf
(
$1
);

346 * 
öput
 = 
$1
;

347 * 
ãmp
 = 
√w
 [99];

348 
ãmp
[0] = 
öput
[1];

349 
i
=1;

350 
i
 < 
	`°æí
(
öput
)-2) {

351 
ãmp
[
i
] = 
öput
[i+2];

352 
i
++;

354 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
(
ãmp
,1);

355 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".abs");

357 | 
GMEMLOCATION
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
($1,2);}

358 | 
CMEMLOCATION
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
($1,0);}

359 | 
LMEMLOCATION
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
($1,3);}

362 
immedüãVÆue
 : 
IDENTIFIER
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
($1);}

363 | 
HEXLITERAL
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
($1);}

366 
exåaModifõr
 : 
EQ
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

367 | 
EQU
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

368 | 
GE
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

369 | 
GEU
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

370 | 
GT
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

371 | 
GTU
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

372 | 
LE
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

373 | 
LEU
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

374 | 
LT
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

375 | 
LTU
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

376 | 
NE
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

377 | 
NEU
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
($1);}

380 
ö°ru˘i⁄Pªdiˇã
 : 
PREDREGISTER3
 
¥ediˇãModifõr
 {
	`¥ötf
(
$1
);Örötf(
$2
);

381 
g_ö°Li°
->
	`gëLi°End
().
	`£tPªdiˇã
(
$1
);

382 
g_ö°Li°
->
	`gëLi°End
().
	`addPªdiˇãModifõr
(
$2
);}

383 | 
PREDREGISTER3
 {
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`£tPªdiˇã
($1);}

386 
›î™dPªdiˇã
 : 
PREDREGISTER3
 
¥ediˇãModifõr
 {

387 
	`¥ötf
(
$1
);

388 
	`¥ötf
(
$2
);

390 
g_ö°Li°
->
	`gëLi°End
().
	`£tPªdiˇã
(
$1
);

391 
g_ö°Li°
->
	`gëLi°End
().
	`addPªdiˇãModifõr
(
$2
);

394 | 
PREDREGISTER3
 {

395 
	`¥ötf
("HELLO: ");

396 
	`¥ötf
(
$1
);

397 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
$1
);

402 
¥eO≥ønd
 : 
EX2
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
("ex2");}

403 | 
SIN
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
("sin");}

404 | 
COS
 { 
	`¥ötf
(
$1
); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
("cos");}

407 
¥ediˇãModifõr
 : 
DOTEQ
 { }

408 | 
DOTEQU
 { }

409 | 
DOTGE
 { }

410 | 
DOTGEU
 { }

411 | 
DOTGT
 { }

412 | 
DOTGTU
 { }

413 | 
DOTLE
 { }

414 | 
DOTLEU
 { }

415 | 
DOTLT
 { }

416 | 
DOTLTU
 { }

417 | 
DOTNE
 { }

418 | 
DOTNEU
 { }

419 | 
DOTNSF
 { }

420 | 
DOTSF
 { }

421 | 
DOTCARRY
 { }

424 
	}
%%

	@cuobjdump_to_ptxplus/sass_lexer.cc

5 
	#YY_INT_ALIGNED
 

	)

9 
	#yy_¸óã_buf„r
 
ßss__¸óã_buf„r


	)

10 
	#yy_dñëe_buf„r
 
ßss__dñëe_buf„r


	)

11 
	#yy_Êex_debug
 
ßss__Êex_debug


	)

12 
	#yy_öô_buf„r
 
ßss__öô_buf„r


	)

13 
	#yy_Êush_buf„r
 
ßss__Êush_buf„r


	)

14 
	#yy_lﬂd_buf„r_°©e
 
ßss__lﬂd_buf„r_°©e


	)

15 
	#yy_swôch_to_buf„r
 
ßss__swôch_to_buf„r


	)

16 
	#yyö
 
ßss_ö


	)

17 
	#yyÀng
 
ßss_Àng


	)

18 
	#yyÀx
 
ßss_Àx


	)

19 
	#yylöío
 
ßss_löío


	)

20 
	#yyout
 
ßss_out


	)

21 
	#yyª°¨t
 
ßss_ª°¨t


	)

22 
	#yyãxt
 
ßss_ãxt


	)

23 
	#yywøp
 
ßss_wøp


	)

24 
	#yyÆloc
 
ßss_Æloc


	)

25 
	#yyªÆloc
 
ßss_ªÆloc


	)

26 
	#yy‰ì
 
ßss_‰ì


	)

28 
	#FLEX_SCANNER


	)

29 
	#YY_FLEX_MAJOR_VERSION
 2

	)

30 
	#YY_FLEX_MINOR_VERSION
 5

	)

31 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

32 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

33 
	#FLEX_BETA


	)

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<°dlib.h
>

48 #i‚de‡
FLEXINT_H


49 
	#FLEXINT_H


	)

53 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

58 #i‚de‡
__STDC_LIMIT_MACROS


59 
	#__STDC_LIMIT_MACROS
 1

	)

62 
	~<öây≥s.h
>

63 
öt8_t
 
	tÊex_öt8_t
;

64 
uöt8_t
 
	tÊex_uöt8_t
;

65 
öt16_t
 
	tÊex_öt16_t
;

66 
uöt16_t
 
	tÊex_uöt16_t
;

67 
öt32_t
 
	tÊex_öt32_t
;

68 
uöt32_t
 
	tÊex_uöt32_t
;

70 sig√d 
	tÊex_öt8_t
;

71 
	tÊex_öt16_t
;

72 
	tÊex_öt32_t
;

73 
	tÊex_uöt8_t
;

74 
	tÊex_uöt16_t
;

75 
	tÊex_uöt32_t
;

79 #i‚de‡
INT8_MIN


80 
	#INT8_MIN
 (-128)

	)

82 #i‚de‡
INT16_MIN


83 
	#INT16_MIN
 (-32767-1)

	)

85 #i‚de‡
INT32_MIN


86 
	#INT32_MIN
 (-2147483647-1)

	)

88 #i‚de‡
INT8_MAX


89 
	#INT8_MAX
 (127)

	)

91 #i‚de‡
INT16_MAX


92 
	#INT16_MAX
 (32767)

	)

94 #i‚de‡
INT32_MAX


95 
	#INT32_MAX
 (2147483647)

	)

97 #i‚de‡
UINT8_MAX


98 
	#UINT8_MAX
 (255U)

	)

100 #i‚de‡
UINT16_MAX


101 
	#UINT16_MAX
 (65535U)

	)

103 #i‚de‡
UINT32_MAX


104 
	#UINT32_MAX
 (4294967295U)

	)

109 #ifde‡
__˝lu•lus


112 
	#YY_USE_CONST


	)

117 #i‡
deföed
 (
__STDC__
)

119 
	#YY_USE_CONST


	)

124 #ifde‡
YY_USE_CONST


125 
	#yyc⁄°
 c⁄°

	)

127 
	#yyc⁄°


	)

131 
	#YY_NULL
 0

	)

138 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

144 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

150 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

151 
	#YYSTATE
 
YY_START


	)

154 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

157 
	#YY_NEW_FILE
 
	`ßss_ª°¨t
(
ßss_ö
 )

	)

159 
	#YY_END_OF_BUFFER_CHAR
 0

	)

162 #i‚de‡
YY_BUF_SIZE


163 
	#YY_BUF_SIZE
 16384

	)

168 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

170 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


171 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

172 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

175 
ßss_Àng
;

177 
FILE
 *
ßss_ö
, *
ßss_out
;

179 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

180 
	#EOB_ACT_END_OF_FILE
 1

	)

181 
	#EOB_ACT_LAST_MATCH
 2

	)

190 
	#YY_LESS_LINENO
(
n
) \

192 
yyl
;\

193  
yyl
 = 
n
; yy»< 
ßss_Àng
; ++yyl )\

194 i‡–
ßss_ãxt
[
yyl
] == '\n' )\

195 --
ßss_löío
;\

196 }0)

	)

199 
	#yyÀss
(
n
) \

203 
yyÀss_ma¸o_¨g
 = (
n
); \

204 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

205 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

206 
YY_RESTORE_YY_MORE_OFFSET
 \

207 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

208 
YY_DO_BEFORE_ACTION
; \

210  0 )

	)

212 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

214 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


215 
	#YY_TYPEDEF_YY_SIZE_T


	)

216 
size_t
 
	tyy_size_t
;

219 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


220 
	#YY_STRUCT_YY_BUFFER_STATE


	)

221 
	syy_buf„r_°©e


223 
FILE
 *
	myy_öput_fûe
;

225 *
	myy_ch_buf
;

226 *
	myy_buf_pos
;

231 
yy_size_t
 
	myy_buf_size
;

236 
	myy_n_ch¨s
;

242 
	myy_is_our_buf„r
;

249 
	myy_is_öãø˘ive
;

255 
	myy_©_bﬁ
;

257 
	myy_bs_löío
;

258 
	myy_bs_cﬁumn
;

263 
	myy_fûl_buf„r
;

265 
	myy_buf„r_°©us
;

267 
	#YY_BUFFER_NEW
 0

	)

268 
	#YY_BUFFER_NORMAL
 1

	)

279 
	#YY_BUFFER_EOF_PENDING
 2

	)

285 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

286 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

287 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

295 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

296 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

297 : 
NULL
)

	)

302 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

305 
	gyy_hﬁd_ch¨
;

306 
	gyy_n_ch¨s
;

307 
	gßss_Àng
;

310 *
	gyy_c_buf_p
 = (*) 0;

311 
	gyy_öô
 = 0;

312 
	gyy_°¨t
 = 0;

317 
	gyy_did_buf„r_swôch_⁄_eof
;

319 
ßss_ª°¨t
 (
FILE
 *
öput_fûe
 );

320 
ßss__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

321 
YY_BUFFER_STATE
 
ßss__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

322 
ßss__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
ßss__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

324 
ßss_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

325 
ßss_p›_buf„r_°©e
 ();

327 
ßss_ísuª_buf„r_°ack
 ();

328 
ßss__lﬂd_buf„r_°©e
 ();

329 
ßss__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

331 
	#YY_FLUSH_BUFFER
 
	`ßss__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

333 
YY_BUFFER_STATE
 
ßss__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

334 
YY_BUFFER_STATE
 
ßss__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

335 
YY_BUFFER_STATE
 
ßss__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

337 *
ßss_Æloc
 (
yy_size_t
 );

338 *
ßss_ªÆloc
 (*,
yy_size_t
 );

339 
ßss_‰ì
 (* );

341 
	#yy_√w_buf„r
 
ßss__¸óã_buf„r


	)

343 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

345 i‡–! 
YY_CURRENT_BUFFER
 ){ \

346 
	`ßss_ísuª_buf„r_°ack
 (); \

347 
YY_CURRENT_BUFFER_LVALUE
 = \

348 
	`ßss__¸óã_buf„r
(
ßss_ö
,
YY_BUF_SIZE
 ); \

350 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

351 }

	)

353 
	#yy_£t_bﬁ
(
©_bﬁ
) \

355 i‡–! 
YY_CURRENT_BUFFER
 ){\

356 
	`ßss_ísuª_buf„r_°ack
 (); \

357 
YY_CURRENT_BUFFER_LVALUE
 = \

358 
	`ßss__¸óã_buf„r
(
ßss_ö
,
YY_BUF_SIZE
 ); \

360 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

361 }

	)

363 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

367 
	#ßss_wøp
(
n
Ë1

	)

368 
	#YY_SKIP_YYWRAP


	)

370 
	tYY_CHAR
;

372 
FILE
 *
	gßss_ö
 = (FILE *Ë0, *
	gßss_out
 = (FILE *) 0;

374 
	tyy_°©e_ty≥
;

376 
ßss_löío
;

378 
	gßss_löío
 = 1;

380 *
ßss_ãxt
;

381 
	#yyãxt_±r
 
ßss_ãxt


	)

383 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

384 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

385 
yy_gë_√xt_buf„r
 ();

386 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

391 
	#YY_DO_BEFORE_ACTION
 \

392 (
yyãxt_±r
Ë
yy_bp
; \

393 
ßss_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

394 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

395 *
yy_˝
 = '\0'; \

396 (
yy_c_buf_p
Ë
yy_˝
;

	)

398 
	#YY_NUM_RULES
 221

	)

399 
	#YY_END_OF_BUFFER
 222

	)

402 
	syy_å™s_öfo


404 
Êex_öt32_t
 
	myy_vîify
;

405 
Êex_öt32_t
 
	myy_nxt
;

407 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[868] =

506 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

538 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[78] =

550 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[897] =

653 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[897] =

756 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[1588] =

934 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[1588] =

1113 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[222] =

1128 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

1129 *
	gyy_œ°_ac˚±ög_˝os
;

1131 
ßss__Êex_debug
;

1132 
	gßss__Êex_debug
 = 0;

1137 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1138 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1139 
	#YY_MORE_ADJ
 0

	)

1140 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1141 *
	gßss_ãxt
;

1172 
	~<°dio.h
>

1173 
	~"ßss_∑r£r.hh
"

1174 
	~<°rög.h
>

1178 
	#YY_NEVER_INTERACTIVE
 1

	)

1180 
	#yylvÆ
 
ßss_lvÆ


	)

1182 
ßss_îr‹
(const *);

1186 
	#INITIAL
 0

	)

1188 #i‚de‡
YY_NO_UNISTD_H


1193 
	~<uni°d.h
>

1196 #i‚de‡
YY_EXTRA_TYPE


1197 
	#YY_EXTRA_TYPE
 *

	)

1200 
yy_öô_globÆs
 ();

1205 
ßss_Àx_de°roy
 ();

1207 
ßss_gë_debug
 ();

1209 
ßss_£t_debug
 (
debug_Êag
 );

1211 
YY_EXTRA_TYPE
 
ßss_gë_exåa
 ();

1213 
ßss_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

1215 
FILE
 *
ßss_gë_ö
 ();

1217 
ßss_£t_ö
 (
FILE
 * 
ö_°r
 );

1219 
FILE
 *
ßss_gë_out
 ();

1221 
ßss_£t_out
 (
FILE
 * 
out_°r
 );

1223 
ßss_gë_Àng
 ();

1225 *
ßss_gë_ãxt
 ();

1227 
ßss_gë_löío
 ();

1229 
ßss_£t_löío
 (
löe_numbî
 );

1235 #i‚de‡
YY_SKIP_YYWRAP


1236 #ifde‡
__˝lu•lus


1237 "C" 
ßss_wøp
 ();

1239 
ßss_wøp
 ();

1243 #i‚de‡
yyãxt_±r


1244 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

1247 #ifde‡
YY_NEED_STRLEN


1248 
yy_Êex_°æí
 (
yyc⁄°
 * );

1251 #i‚de‡
YY_NO_INPUT


1253 #ifde‡
__˝lu•lus


1254 
yyöput
 ();

1256 
öput
 ();

1262 #i‚de‡
YY_READ_BUF_SIZE


1263 
	#YY_READ_BUF_SIZE
 8192

	)

1267 #i‚de‡
ECHO


1271 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
ßss_ãxt
, 
ßss_Àng
, 1, 
ßss_out
 )Ë{} } 0)

	)

1277 #i‚de‡
YY_INPUT


1278 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

1279 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

1281 
c
 = '*'; \

1282 
n
; \

1283  
n
 = 0;Ç < 
max_size
 && \

1284 (
c
 = 
	`gëc
–
ßss_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

1285 
buf
[
n
] = (Ë
c
; \

1286 i‡–
c
 == '\n' ) \

1287 
buf
[
n
++] = (Ë
c
; \

1288 i‡–
c
 =
EOF
 && 
	`„º‹
–
ßss_ö
 ) ) \

1289 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1290 
ªsu…
 = 
n
; \

1294 
î∫o
=0; \

1295  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
ßss_ö
))==0 && 
	`„º‹
(sass_in)) \

1297 if–
î∫o
 !
EINTR
) \

1299 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1302 
î∫o
=0; \

1303 
	`˛óªº
(
ßss_ö
); \

1307 

	)

1314 #i‚de‡
yyãrmö©e


1315 
	#yyãrmö©e
(Ë 
YY_NULL


	)

1319 #i‚de‡
YY_START_STACK_INCR


1320 
	#YY_START_STACK_INCR
 25

	)

1324 #i‚de‡
YY_FATAL_ERROR


1325 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

1333 #i‚de‡
YY_DECL


1334 
	#YY_DECL_IS_OURS
 1

	)

1336 
ßss_Àx
 ();

1338 
	#YY_DECL
 
	`ßss_Àx
 ()

	)

1344 #i‚de‡
YY_USER_ACTION


1345 
	#YY_USER_ACTION


	)

1349 #i‚de‡
YY_BREAK


1350 
	#YY_BREAK
 ;

	)

1353 
	#YY_RULE_SETUP
 \

1354 
YY_USER_ACTION


	)

1358 
	gYY_DECL


1360 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1361 *
	gyy_˝
, *
	gyy_bp
;

1362 
	gyy_a˘
;

1378 i‡–!(
	gyy_öô
) )

1380 (
	gyy_öô
) = 1;

1382 #ifde‡
YY_USER_INIT


1383 
	gYY_USER_INIT
;

1386 i‡–! (
	gyy_°¨t
) )

1387 (
	gyy_°¨t
) = 1;

1389 i‡–! 
	gßss_ö
 )

1390 
	gßss_ö
 = 
°dö
;

1392 i‡–! 
	gßss_out
 )

1393 
	gßss_out
 = 
°dout
;

1395 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1396 
ßss_ísuª_buf„r_°ack
 ();

1397 
	gYY_CURRENT_BUFFER_LVALUE
 =

1398 
ßss__¸óã_buf„r
(
ßss_ö
,
YY_BUF_SIZE
 );

1401 
ßss__lﬂd_buf„r_°©e
( );

1406 
	gyy_˝
 = (
yy_c_buf_p
);

1409 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1414 
	gyy_bp
 = 
yy_˝
;

1416 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

1417 
	gyy_m©ch
:

1420 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1421 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1423 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1424 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1426  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1428 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1429 i‡–
	gyy_cuºít_°©e
 >= 868 )

1430 
yy_c
 = 
yy_mëa
[() yy_c];

1432 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1433 ++
	gyy_˝
;

1435  
	gyy_cuºít_°©e
 != 867 );

1436 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1437 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1439 
	gyy_föd_a˘i⁄
:

1440 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1442 
	gYY_DO_BEFORE_ACTION
;

1444 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

1446 
yyl
;

1447  
	gyyl
 = 0; yy»< 
	gßss_Àng
; ++yyl )

1448 i‡–
	gßss_ãxt
[
yyl
] == '\n' )

1450 
ßss_löío
++;

1454 
	gdo_a˘i⁄
:

1456  
yy_a˘
 )

1460 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1461 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1462 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1463 
	gyy_föd_a˘i⁄
;

1466 
YY_RULE_SETUP


1468 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gOSQBRACKET
;

1469 
YY_BREAK


1471 
YY_RULE_SETUP


1473 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCSQBRACKET
;

1474 
YY_BREAK


1477 
YY_RULE_SETUP


1479 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gBAR
;

1480 
YY_BREAK


1482 
YY_RULE_SETUP


1484 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gADA
;

1485 
YY_BREAK


1487 
YY_RULE_SETUP


1489 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gBRA
;

1490 
YY_BREAK


1492 
YY_RULE_SETUP


1494 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCAL
;

1495 
YY_BREAK


1497 
YY_RULE_SETUP


1499 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCOS
;

1500 
YY_BREAK


1502 
YY_RULE_SETUP


1504 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDADD
;

1505 
YY_BREAK


1507 
YY_RULE_SETUP


1509 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDMIN
;

1510 
YY_BREAK


1512 
YY_RULE_SETUP


1514 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDMAX
;

1515 
YY_BREAK


1517 
YY_RULE_SETUP


1519 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDFMA
;

1520 
YY_BREAK


1522 
YY_RULE_SETUP


1524 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDMUL
;

1525 
YY_BREAK


1527 
YY_RULE_SETUP


1529 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gEX2
;

1530 
YY_BREAK


1532 
YY_RULE_SETUP


1534 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gF2F
;

1535 
YY_BREAK


1537 
YY_RULE_SETUP


1539 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gF2I
;

1540 
YY_BREAK


1542 
YY_RULE_SETUP


1544 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFADD
;

1545 
YY_BREAK


1547 
YY_RULE_SETUP


1549 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFADD32
;

1550 
YY_BREAK


1552 
YY_RULE_SETUP


1554 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFADD32I
;

1555 
YY_BREAK


1557 
YY_RULE_SETUP


1559 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMAD
;

1560 
YY_BREAK


1562 
YY_RULE_SETUP


1564 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMAD32I
;

1565 
YY_BREAK


1567 
YY_RULE_SETUP


1569 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMUL
;

1570 
YY_BREAK


1572 
YY_RULE_SETUP


1574 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMUL32
;

1575 
YY_BREAK


1577 
YY_RULE_SETUP


1579 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMUL32I
;

1580 
YY_BREAK


1582 
YY_RULE_SETUP


1584 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFSET
;

1585 
YY_BREAK


1587 
YY_RULE_SETUP


1589 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDSET
;

1590 
YY_BREAK


1592 
YY_RULE_SETUP


1594 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gG2R
;

1595 
YY_BREAK


1597 
YY_RULE_SETUP


1599 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGLD
;

1600 
YY_BREAK


1602 
YY_RULE_SETUP


1604 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGST
;

1605 
YY_BREAK


1607 
YY_RULE_SETUP


1609 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gI2F
;

1610 
YY_BREAK


1612 
YY_RULE_SETUP


1614 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gI2I
;

1615 
YY_BREAK


1617 
YY_RULE_SETUP


1619 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gS2R
;

1620 
YY_BREAK


1622 
YY_RULE_SETUP


1624 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSTS
;

1625 
YY_BREAK


1627 
YY_RULE_SETUP


1629 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSASS_LD
;

1630 
YY_BREAK


1632 
YY_RULE_SETUP


1634 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSASS_ST
;

1635 
YY_BREAK


1637 
YY_RULE_SETUP


1639 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIADD
;

1640 
YY_BREAK


1642 
YY_RULE_SETUP


1644 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIADDCARRY
;

1645 
YY_BREAK


1647 
YY_RULE_SETUP


1649 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIADD32
;

1650 
YY_BREAK


1652 
YY_RULE_SETUP


1654 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIADD32I
;

1655 
YY_BREAK


1657 
YY_RULE_SETUP


1659 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMAD
;

1660 
YY_BREAK


1662 
YY_RULE_SETUP


1664 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gISAD
;

1665 
YY_BREAK


1667 
YY_RULE_SETUP


1669 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMAD24
;

1670 
YY_BREAK


1672 
YY_RULE_SETUP


1674 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMAD24
;

1675 
YY_BREAK


1677 
YY_RULE_SETUP


1679 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMAD32
;

1680 
YY_BREAK


1682 
YY_RULE_SETUP


1684 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMAD32I
;

1685 
YY_BREAK


1687 
YY_RULE_SETUP


1689 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL
;

1690 
YY_BREAK


1692 
YY_RULE_SETUP


1694 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL24
;

1695 
YY_BREAK


1697 
YY_RULE_SETUP


1699 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMULS24
;

1700 
YY_BREAK


1702 
YY_RULE_SETUP


1704 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL32
;

1705 
YY_BREAK


1707 
YY_RULE_SETUP


1709 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL32S24
;

1710 
YY_BREAK


1712 
YY_RULE_SETUP


1714 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL32U24
;

1715 
YY_BREAK


1717 
YY_RULE_SETUP


1719 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL32IS24
;

1720 
YY_BREAK


1722 
YY_RULE_SETUP


1724 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL32I
;

1725 
YY_BREAK


1727 
YY_RULE_SETUP


1729 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMUL32I24
;

1730 
YY_BREAK


1732 
YY_RULE_SETUP


1734 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gISET
;

1735 
YY_BREAK


1737 
YY_RULE_SETUP


1739 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLG2
;

1740 
YY_BREAK


1742 
YY_RULE_SETUP


1744 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLLD
;

1745 
YY_BREAK


1747 
YY_RULE_SETUP


1749 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gAND
;

1750 
YY_BREAK


1752 
YY_RULE_SETUP


1754 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gOR
;

1755 
YY_BREAK


1757 
YY_RULE_SETUP


1759 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gNOT
;

1760 
YY_BREAK


1762 
YY_RULE_SETUP


1764 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gXOR
;

1765 
YY_BREAK


1767 
YY_RULE_SETUP


1769 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gANDS
;

1770 
YY_BREAK


1772 
YY_RULE_SETUP


1774 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gORS
;

1775 
YY_BREAK


1777 
YY_RULE_SETUP


1779 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gNOTS
;

1780 
YY_BREAK


1782 
YY_RULE_SETUP


1784 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gXORS
;

1785 
YY_BREAK


1787 
YY_RULE_SETUP


1789 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLST
;

1790 
YY_BREAK


1792 
YY_RULE_SETUP


1794 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gMOV
;

1795 
YY_BREAK


1797 
YY_RULE_SETUP


1799 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gMOV32
;

1800 
YY_BREAK


1802 
YY_RULE_SETUP


1804 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gMVC
;

1805 
YY_BREAK


1807 
YY_RULE_SETUP


1809 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gMVI
;

1810 
YY_BREAK


1812 
YY_RULE_SETUP


1814 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gNOP
;

1815 
YY_BREAK


1817 
YY_RULE_SETUP


1819 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gR2A
;

1820 
YY_BREAK


1822 
YY_RULE_SETUP


1824 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gR2G
;

1825 
YY_BREAK


1827 
YY_RULE_SETUP


1829 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gR2GU16U8
;

1830 
YY_BREAK


1832 
YY_RULE_SETUP


1834 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gRCP
;

1835 
YY_BREAK


1837 
YY_RULE_SETUP


1839 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gRCP32
;

1840 
YY_BREAK


1842 
YY_RULE_SETUP


1844 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gRET
;

1845 
YY_BREAK


1847 
YY_RULE_SETUP


1849 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gRRO
;

1850 
YY_BREAK


1852 
YY_RULE_SETUP


1854 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gRSQ
;

1855 
YY_BREAK


1857 
YY_RULE_SETUP


1859 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSIN
;

1860 
YY_BREAK


1862 
YY_RULE_SETUP


1864 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSHL
;

1865 
YY_BREAK


1867 
YY_RULE_SETUP


1869 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSHR
;

1870 
YY_BREAK


1872 
YY_RULE_SETUP


1874 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSSY
;

1875 
YY_BREAK


1877 
YY_RULE_SETUP


1879 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gBAR
;

1880 
YY_BREAK


1882 
YY_RULE_SETUP


1884 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLDS
;

1885 
YY_BREAK


1887 
YY_RULE_SETUP


1889 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMIN
;

1890 
YY_BREAK


1892 
YY_RULE_SETUP


1894 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIMAX
;

1895 
YY_BREAK


1897 
YY_RULE_SETUP


1899 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMAX
;

1900 
YY_BREAK


1902 
YY_RULE_SETUP


1904 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFMIN
;

1905 
YY_BREAK


1907 
YY_RULE_SETUP


1909 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gC2R
;

1910 
YY_BREAK


1912 
YY_RULE_SETUP


1914 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gR2C
;

1915 
YY_BREAK


1917 
YY_RULE_SETUP


1919 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gA2R
;

1920 
YY_BREAK


1922 
YY_RULE_SETUP


1924 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gTEX
;

1925 
YY_BREAK


1927 
YY_RULE_SETUP


1929 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gTEX32
;

1930 
YY_BREAK


1932 
YY_RULE_SETUP


1934 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gEXIT
;

1935 
YY_BREAK


1937 
YY_RULE_SETUP


1939 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGRED
;

1940 
YY_BREAK


1942 
YY_RULE_SETUP


1944 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGATOM
;

1945 
YY_BREAK


1947 
YY_RULE_SETUP


1949 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gPBK
;

1950 
YY_BREAK


1952 
YY_RULE_SETUP


1954 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gBRK
;

1955 
YY_BREAK


1957 
YY_RULE_SETUP


1959 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gVOTE
;

1960 
YY_BREAK


1963 
YY_RULE_SETUP


1965 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gEQ
;

1966 
YY_BREAK


1968 
YY_RULE_SETUP


1970 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gEQU
;

1971 
YY_BREAK


1973 
YY_RULE_SETUP


1975 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGE
;

1976 
YY_BREAK


1978 
YY_RULE_SETUP


1980 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGEU
;

1981 
YY_BREAK


1983 
YY_RULE_SETUP


1985 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGT
;

1986 
YY_BREAK


1988 
YY_RULE_SETUP


1990 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGTU
;

1991 
YY_BREAK


1993 
YY_RULE_SETUP


1995 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLE
;

1996 
YY_BREAK


1998 
YY_RULE_SETUP


2000 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLEU
;

2001 
YY_BREAK


2003 
YY_RULE_SETUP


2005 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLT
;

2006 
YY_BREAK


2008 
YY_RULE_SETUP


2010 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLTU
;

2011 
YY_BREAK


2013 
YY_RULE_SETUP


2015 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gNE
;

2016 
YY_BREAK


2018 
YY_RULE_SETUP


2020 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gNEU
;

2021 
YY_BREAK


2023 
YY_RULE_SETUP


2025 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTBEXT
;

2026 
YY_BREAK


2028 
YY_RULE_SETUP


2030 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTS
;

2031 
YY_BREAK


2033 
YY_RULE_SETUP


2035 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTSFU
;

2036 
YY_BREAK


2038 
YY_RULE_SETUP


2040 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTTRUNC
;

2041 
YY_BREAK


2043 
YY_RULE_SETUP


2045 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTCEIL
;

2046 
YY_BREAK


2048 
YY_RULE_SETUP


2050 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTFLOOR
;

2051 
YY_BREAK


2053 
YY_RULE_SETUP


2055 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);

2056 
YY_BREAK


2058 
YY_RULE_SETUP


2060 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTUN
;

2061 
YY_BREAK


2063 
YY_RULE_SETUP


2065 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTNODEP
;

2066 
YY_BREAK


2068 
YY_RULE_SETUP


2070 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);

2071 
YY_BREAK


2073 
YY_RULE_SETUP


2075 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTANY
;

2076 
YY_BREAK


2078 
YY_RULE_SETUP


2080 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTALL
;

2081 
YY_BREAK


2083 
YY_RULE_SETUP


2085 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);

2086 
YY_BREAK


2089 
YY_RULE_SETUP


2091 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTEQ
;

2092 
YY_BREAK


2094 
YY_RULE_SETUP


2096 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTEQU
;

2097 
YY_BREAK


2099 
YY_RULE_SETUP


2101 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTGE
;

2102 
YY_BREAK


2104 
YY_RULE_SETUP


2106 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTGEU
;

2107 
YY_BREAK


2109 
YY_RULE_SETUP


2111 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTGT
;

2112 
YY_BREAK


2114 
YY_RULE_SETUP


2116 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTGTU
;

2117 
YY_BREAK


2119 
YY_RULE_SETUP


2121 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTLE
;

2122 
YY_BREAK


2124 
YY_RULE_SETUP


2126 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTLEU
;

2127 
YY_BREAK


2129 
YY_RULE_SETUP


2131 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTLT
;

2132 
YY_BREAK


2134 
YY_RULE_SETUP


2136 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTLTU
;

2137 
YY_BREAK


2139 
YY_RULE_SETUP


2141 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTNE
;

2142 
YY_BREAK


2144 
YY_RULE_SETUP


2146 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTNEU
;

2147 
YY_BREAK


2149 
YY_RULE_SETUP


2151 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTNSF
;

2152 
YY_BREAK


2154 
YY_RULE_SETUP


2156 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTSF
;

2157 
YY_BREAK


2159 
YY_RULE_SETUP


2161 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTCARRY
;

2162 
YY_BREAK


2164 
YY_RULE_SETUP


2166 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);

2167 
YY_BREAK


2169 
YY_RULE_SETUP


2171 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTCC
;

2172 
YY_BREAK


2174 
YY_RULE_SETUP


2176 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTX
;

2177 
YY_BREAK


2179 
YY_RULE_SETUP


2181 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTE
;

2182 
YY_BREAK


2184 
YY_RULE_SETUP


2186 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTRED
;

2187 
YY_BREAK


2189 
YY_RULE_SETUP


2191 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTPOPC
;

2192 
YY_BREAK


2195 
YY_RULE_SETUP


2197 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTF16
;

2198 
YY_BREAK


2200 
YY_RULE_SETUP


2202 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTF32
;

2203 
YY_BREAK


2205 
YY_RULE_SETUP


2207 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTF64
;

2208 
YY_BREAK


2210 
YY_RULE_SETUP


2212 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTS8
;

2213 
YY_BREAK


2215 
YY_RULE_SETUP


2217 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTS16
;

2218 
YY_BREAK


2220 
YY_RULE_SETUP


2222 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTS32
;

2223 
YY_BREAK


2225 
YY_RULE_SETUP


2227 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTS64
;

2228 
YY_BREAK


2230 
YY_RULE_SETUP


2232 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTS128
;

2233 
YY_BREAK


2235 
YY_RULE_SETUP


2237 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTU8
;

2238 
YY_BREAK


2240 
YY_RULE_SETUP


2242 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTU16
;

2243 
YY_BREAK


2245 
YY_RULE_SETUP


2247 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTU32
;

2248 
YY_BREAK


2250 
YY_RULE_SETUP


2252 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTU24
;

2253 
YY_BREAK


2255 
YY_RULE_SETUP


2257 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTU64
;

2258 
YY_BREAK


2260 
YY_RULE_SETUP


2262 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTHI
;

2263 
YY_BREAK


2265 
YY_RULE_SETUP


2267 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOTNOINC
;

2268 
YY_BREAK


2272 
YY_RULE_SETUP


2274 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gREGISTER
;

2275 
YY_BREAK


2277 
YY_RULE_SETUP


2279 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gREGISTERLO
;

2280 
YY_BREAK


2282 
YY_RULE_SETUP


2284 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gREGISTERHI
;

2285 
YY_BREAK


2287 
YY_RULE_SETUP


2289 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gOFFSETREGISTER
;

2290 
YY_BREAK


2292 
YY_RULE_SETUP


2294 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gPREDREGISTER
;

2295 
YY_BREAK


2297 
YY_RULE_SETUP


2299 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gPREDREGISTER2
;

2300 
YY_BREAK


2302 
YY_RULE_SETUP


2304 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gPREDREGISTER3
;

2305 
YY_BREAK


2308 
YY_RULE_SETUP


2310 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSREGISTER
;

2311 
YY_BREAK


2317 
YY_RULE_SETUP


2319 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gPTXHEADER
;

2320 
YY_BREAK


2322 
YY_RULE_SETUP


2324 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gELFHEADER
;

2325 
YY_BREAK


2327 
YY_RULE_SETUP


2330 
YY_BREAK


2332 
YY_RULE_SETUP


2334 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOARCHVERSION
;

2335 
YY_BREAK


2337 
YY_RULE_SETUP


2339 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOCODEVERSION_HEADER
;

2340 
YY_BREAK


2342 
YY_RULE_SETUP


2344 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOCODEVERSION
;

2345 
YY_BREAK


2347 
YY_RULE_SETUP


2349 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOPRODUCER
;

2350 
YY_BREAK


2352 
YY_RULE_SETUP


2354 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOHOST
;

2355 
YY_BREAK


2357 
YY_RULE_SETUP


2359 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOCOMPILESIZE
;

2360 
YY_BREAK


2362 
YY_RULE_SETUP


2364 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOCOMPILESIZE_HEADER
;

2365 
YY_BREAK


2367 
YY_RULE_SETUP


2369 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINFOIDENTIFIER
;

2370 
YY_BREAK


2372 
YY_RULE_SETUP


2374 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gVERSIONHEADER
;

2375 
YY_BREAK


2377 
YY_RULE_SETUP


2379 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gFUNCTIONHEADER
;

2380 
YY_BREAK


2382 
YY_RULE_SETUP


2384 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gINSTHEX
;

2385 
YY_BREAK


2387 
YY_RULE_SETUP


2389 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gDOT
;

2390 
YY_BREAK


2393 
YY_RULE_SETUP


2395 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gABSSMEMLOCATION
;

2396 
YY_BREAK


2398 
YY_RULE_SETUP


2400 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gABSSMEMLOCATION
;

2401 
YY_BREAK


2403 
YY_RULE_SETUP


2405 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gABSSMEMLOCATION
;

2406 
YY_BREAK


2408 
YY_RULE_SETUP


2410 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gABSSMEMLOCATION
;

2411 
YY_BREAK


2413 
YY_RULE_SETUP


2415 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSMEMLOCATION
;

2416 
YY_BREAK


2418 
YY_RULE_SETUP


2420 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSMEMLOCATION
;

2421 
YY_BREAK


2423 
YY_RULE_SETUP


2425 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSMEMLOCATION
;

2426 
YY_BREAK


2428 
YY_RULE_SETUP


2430 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gSMEMLOCATION
;

2431 
YY_BREAK


2433 
YY_RULE_SETUP


2435 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGMEMLOCATION
;

2436 
YY_BREAK


2438 
YY_RULE_SETUP


2440 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGMEMLOCATION
;

2441 
YY_BREAK


2443 
YY_RULE_SETUP


2445 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGMEMLOCATION
;

2446 
YY_BREAK


2448 
YY_RULE_SETUP


2450 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gGMEMLOCATION
;

2451 
YY_BREAK


2453 
YY_RULE_SETUP


2455 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCMEMLOCATION
;

2456 
YY_BREAK


2458 
YY_RULE_SETUP


2460 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCMEMLOCATION
;

2461 
YY_BREAK


2463 
YY_RULE_SETUP


2465 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCMEMLOCATION
;

2466 
YY_BREAK


2468 
YY_RULE_SETUP


2470 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gCMEMLOCATION
;

2471 
YY_BREAK


2473 
YY_RULE_SETUP


2475 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLMEMLOCATION
;

2476 
YY_BREAK


2478 
YY_RULE_SETUP


2480 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLMEMLOCATION
;

2481 
YY_BREAK


2483 
YY_RULE_SETUP


2485 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLMEMLOCATION
;

2486 
YY_BREAK


2488 
YY_RULE_SETUP


2490 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLMEMLOCATION
;

2491 
YY_BREAK


2494 
YY_RULE_SETUP


2496 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gIDENTIFIER
;

2497 
YY_BREAK


2499 
YY_RULE_SETUP


2501 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gHEXLITERAL
;

2502 
YY_BREAK


2505 
YY_RULE_SETUP


2507 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLABELSTART
;

2508 
YY_BREAK


2510 
YY_RULE_SETUP


2512 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLABELEND
;

2513 
YY_BREAK


2515 
YY_RULE_SETUP


2517 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLABEL
;

2518 
YY_BREAK


2522 
YY_RULE_SETUP


2524 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gLEFTBRACKET
;

2525 
YY_BREAK


2527 
YY_RULE_SETUP


2529 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gRIGHTBRACKET
;

2530 
YY_BREAK


2534 
YY_RULE_SETUP


2537 
YY_BREAK


2541 
YY_RULE_SETUP


2543 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gPIPE
;

2544 
YY_BREAK


2546 
YY_RULE_SETUP


2548 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
ßss_ãxt
);  
	gTILDE
;

2549 
YY_BREAK


2553 
YY_RULE_SETUP


2555  
NEWLINE
;

2556 
YY_BREAK


2559 
YY_RULE_SETUP


2561  
SEMICOLON
;

2562 
YY_BREAK


2565 
YY_RULE_SETUP


2568 
YY_BREAK


2571 
YY_RULE_SETUP


2574 
YY_BREAK


2577 
YY_RULE_SETUP


2580 
YY_BREAK


2582 
YY_RULE_SETUP


2585 
YY_BREAK


2587 
YY_STATE_EOF
(
INITIAL
):

2590 
YY_BREAK


2593 
YY_RULE_SETUP


2595 
ßss_îr‹
("InvalidÅoken");

2596 
YY_BREAK


2598 
YY_RULE_SETUP


2600 
ECHO
;

2601 
	gYY_BREAK


2604 
	gYY_END_OF_BUFFER
:

2607 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

2610 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

2611 
YY_RESTORE_YY_MORE_OFFSET


2613 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

2624 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

2625 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
ßss_ö
;

2626 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

2636 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

2638 
yy_°©e_ty≥
 
yy_√xt_°©e
;

2640 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

2642 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2653 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

2655 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2657 i‡–
	gyy_√xt_°©e
 )

2660 
	gyy_˝
 = ++(
yy_c_buf_p
);

2661 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

2662 
	gyy_m©ch
;

2667 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

2668 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

2669 
	gyy_föd_a˘i⁄
;

2673  
yy_gë_√xt_buf„r
( ) )

2675 
	gEOB_ACT_END_OF_FILE
:

2677 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

2679 i‡–
ßss_wøp
( ) )

2690 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2692 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

2693 
	gdo_a˘i⁄
;

2698 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

2699 
	gYY_NEW_FILE
;

2704 
	gEOB_ACT_CONTINUE_SCAN
:

2705 (
yy_c_buf_p
) =

2706 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

2708 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2710 
	gyy_˝
 = (
yy_c_buf_p
);

2711 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2712 
	gyy_m©ch
;

2714 
	gEOB_ACT_LAST_MATCH
:

2715 (
yy_c_buf_p
) =

2716 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

2718 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2720 
	gyy_˝
 = (
yy_c_buf_p
);

2721 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2722 
	gyy_föd_a˘i⁄
;

2728 
YY_FATAL_ERROR
(

2741 
	$yy_gë_√xt_buf„r
 ()

2743 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

2744 *
sour˚
 = (
yyãxt_±r
);

2745 
numbî_to_move
, 
i
;

2746 
ªt_vÆ
;

2748 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

2749 
	`YY_FATAL_ERROR
(

2752 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

2754 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

2759  
EOB_ACT_END_OF_FILE
;

2767  
EOB_ACT_LAST_MATCH
;

2774 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

2776  
i
 = 0; i < 
numbî_to_move
; ++i )

2777 *(
de°
++Ë*(
sour˚
++);

2779 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

2783 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

2787 
num_to_ªad
 =

2788 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

2790  
num_to_ªad
 <= 0 )

2794 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

2796 
yy_c_buf_p_off£t
 =

2797 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

2799 i‡–
b
->
yy_is_our_buf„r
 )

2801 
√w_size
 = 
b
->
yy_buf_size
 * 2;

2803 i‡–
√w_size
 <= 0 )

2804 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

2806 
b
->
yy_buf_size
 *= 2;

2808 
b
->
yy_ch_buf
 = (*)

2810 
	`ßss_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

2814 
b
->
yy_ch_buf
 = 0;

2816 i‡–! 
b
->
yy_ch_buf
 )

2817 
	`YY_FATAL_ERROR
(

2820 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

2822 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

2823 
numbî_to_move
 - 1;

2827 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

2828 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

2831 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

2832 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

2834 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

2837 i‡–(
yy_n_ch¨s
) == 0 )

2839 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

2841 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

2842 
	`ßss_ª°¨t
(
ßss_ö
 );

2847 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

2848 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

2849 
YY_BUFFER_EOF_PENDING
;

2854 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

2856 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

2858 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

2859 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`ßss_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

2860 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

2861 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

2864 (
yy_n_ch¨s
Ë+
numbî_to_move
;

2865 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

2866 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

2868 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

2870  
ªt_vÆ
;

2871 
	}
}

2875 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

2877 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

2878 *
yy_˝
;

2880 
yy_cuºít_°©e
 = (
yy_°¨t
);

2882  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

2884 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

2885 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2887 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

2888 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

2890  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2892 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2893 i‡–
yy_cuºít_°©e
 >= 868 )

2894 
yy_c
 = 
yy_mëa
[() yy_c];

2896 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2899  
yy_cuºít_°©e
;

2900 
	}
}

2907 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

2909 
yy_is_jam
;

2910 *
yy_˝
 = (
yy_c_buf_p
);

2912 
YY_CHAR
 
yy_c
 = 1;

2913 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2915 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

2916 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

2918  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2920 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2921 i‡–
yy_cuºít_°©e
 >= 868 )

2922 
yy_c
 = 
yy_mëa
[() yy_c];

2924 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2925 
yy_is_jam
 = (
yy_cuºít_°©e
 == 867);

2927  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

2928 
	}
}

2930 #i‚de‡
YY_NO_INPUT


2931 #ifde‡
__˝lu•lus


2932 
	$yyöput
 ()

2934 
	$öput
 ()

2938 
c
;

2940 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

2942 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

2948 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

2950 *(
yy_c_buf_p
) = '\0';

2954 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

2955 ++(
yy_c_buf_p
);

2957  
	`yy_gë_√xt_buf„r
( ) )

2959 
EOB_ACT_LAST_MATCH
:

2971 
	`ßss_ª°¨t
(
ßss_ö
 );

2975 
EOB_ACT_END_OF_FILE
:

2977 i‡–
	`ßss_wøp
( ) )

2978  
EOF
;

2980 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

2981 
YY_NEW_FILE
;

2982 #ifde‡
__˝lu•lus


2983  
	`yyöput
();

2985  
	`öput
();

2989 
EOB_ACT_CONTINUE_SCAN
:

2990 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

2996 
c
 = *(*Ë(
yy_c_buf_p
);

2997 *(
yy_c_buf_p
) = '\0';

2998 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

3000 i‡–
c
 == '\n' )

3002 
ßss_löío
++;

3005  
c
;

3006 
	}
}

3014 
	$ßss_ª°¨t
 (
FILE
 * 
öput_fûe
 )

3017 i‡–! 
YY_CURRENT_BUFFER
 ){

3018 
	`ßss_ísuª_buf„r_°ack
 ();

3019 
YY_CURRENT_BUFFER_LVALUE
 =

3020 
	`ßss__¸óã_buf„r
(
ßss_ö
,
YY_BUF_SIZE
 );

3023 
	`ßss__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

3024 
	`ßss__lﬂd_buf„r_°©e
( );

3025 
	}
}

3031 
	$ßss__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3039 
	`ßss_ísuª_buf„r_°ack
 ();

3040 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

3043 i‡–
YY_CURRENT_BUFFER
 )

3046 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3047 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3048 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3051 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3052 
	`ßss__lﬂd_buf„r_°©e
( );

3059 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3060 
	}
}

3062 
	$ßss__lﬂd_buf„r_°©e
 ()

3064 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

3065 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

3066 
ßss_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

3067 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

3068 
	}
}

3076 
YY_BUFFER_STATE
 
	$ßss__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

3078 
YY_BUFFER_STATE
 
b
;

3080 
b
 = (
YY_BUFFER_STATE
Ë
	`ßss_Æloc
(–
yy_buf„r_°©e
 ) );

3081 i‡–! 
b
 )

3082 
	`YY_FATAL_ERROR
( "out of dynamic memory in sass__create_buffer()" );

3084 
b
->
yy_buf_size
 = 
size
;

3089 
b
->
yy_ch_buf
 = (*Ë
	`ßss_Æloc
(b->
yy_buf_size
 + 2 );

3090 i‡–! 
b
->
yy_ch_buf
 )

3091 
	`YY_FATAL_ERROR
( "out of dynamic memory in sass__create_buffer()" );

3093 
b
->
yy_is_our_buf„r
 = 1;

3095 
	`ßss__öô_buf„r
(
b
,
fûe
 );

3097  
b
;

3098 
	}
}

3104 
	$ßss__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3107 i‡–! 
b
 )

3110 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3111 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

3113 i‡–
b
->
yy_is_our_buf„r
 )

3114 
	`ßss_‰ì
((*Ë
b
->
yy_ch_buf
 );

3116 
	`ßss_‰ì
((*Ë
b
 );

3117 
	}
}

3119 #i‚de‡
__˝lu•lus


3120 
ißây
 ();

3127 
	$ßss__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

3130 
€ºno
 = 
î∫o
;

3132 
	`ßss__Êush_buf„r
(
b
 );

3134 
b
->
yy_öput_fûe
 = 
fûe
;

3135 
b
->
yy_fûl_buf„r
 = 1;

3141 i‡(
b
 !
YY_CURRENT_BUFFER
){

3142 
b
->
yy_bs_löío
 = 1;

3143 
b
->
yy_bs_cﬁumn
 = 0;

3146 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

3148 
î∫o
 = 
€ºno
;

3149 
	}
}

3155 
	$ßss__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3157 i‡–! 
b
 )

3160 
b
->
yy_n_ch¨s
 = 0;

3166 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

3167 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

3169 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

3171 
b
->
yy_©_bﬁ
 = 1;

3172 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3174 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3175 
	`ßss__lﬂd_buf„r_°©e
( );

3176 
	}
}

3184 
	$ßss_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3186 i‡(
√w_buf„r
 =
NULL
)

3189 
	`ßss_ísuª_buf„r_°ack
();

3192 i‡–
YY_CURRENT_BUFFER
 )

3195 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3196 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3197 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3201 i‡(
YY_CURRENT_BUFFER
)

3202 (
yy_buf„r_°ack_t›
)++;

3203 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3206 
	`ßss__lﬂd_buf„r_°©e
( );

3207 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3208 
	}
}

3214 
	$ßss_p›_buf„r_°©e
 ()

3216 i‡(!
YY_CURRENT_BUFFER
)

3219 
	`ßss__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3220 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3221 i‡((
yy_buf„r_°ack_t›
) > 0)

3222 --(
yy_buf„r_°ack_t›
);

3224 i‡(
YY_CURRENT_BUFFER
) {

3225 
	`ßss__lﬂd_buf„r_°©e
( );

3226 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3228 
	}
}

3233 
	$ßss_ísuª_buf„r_°ack
 ()

3235 
num_to_Æloc
;

3237 i‡(!(
yy_buf„r_°ack
)) {

3243 
num_to_Æloc
 = 1;

3244 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
ßss_Æloc


3245 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3247 i‡–! (
yy_buf„r_°ack
) )

3248 
	`YY_FATAL_ERROR
( "out of dynamic memory in sass_ensure_buffer_stack()" );

3250 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

3252 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3253 (
yy_buf„r_°ack_t›
) = 0;

3257 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

3260 
grow_size
 = 8 ;

3262 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

3263 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
ßss_ªÆloc


3264 ((
yy_buf„r_°ack
),

3265 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3267 i‡–! (
yy_buf„r_°ack
) )

3268 
	`YY_FATAL_ERROR
( "out of dynamic memory in sass_ensure_buffer_stack()" );

3271 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

3272 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3274 
	}
}

3282 
YY_BUFFER_STATE
 
	$ßss__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

3284 
YY_BUFFER_STATE
 
b
;

3286 i‡–
size
 < 2 ||

3287 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

3288 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

3292 
b
 = (
YY_BUFFER_STATE
Ë
	`ßss_Æloc
(–
yy_buf„r_°©e
 ) );

3293 i‡–! 
b
 )

3294 
	`YY_FATAL_ERROR
( "out of dynamic memory in sass__scan_buffer()" );

3296 
b
->
yy_buf_size
 = 
size
 - 2;

3297 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

3298 
b
->
yy_is_our_buf„r
 = 0;

3299 
b
->
yy_öput_fûe
 = 0;

3300 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

3301 
b
->
yy_is_öãø˘ive
 = 0;

3302 
b
->
yy_©_bﬁ
 = 1;

3303 
b
->
yy_fûl_buf„r
 = 0;

3304 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3306 
	`ßss__swôch_to_buf„r
(
b
 );

3308  
b
;

3309 
	}
}

3319 
YY_BUFFER_STATE
 
	$ßss__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

3322  
	`ßss__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

3323 
	}
}

3332 
YY_BUFFER_STATE
 
	$ßss__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

3334 
YY_BUFFER_STATE
 
b
;

3335 *
buf
;

3336 
yy_size_t
 
n
;

3337 
i
;

3340 
n
 = 
_yybyãs_Àn
 + 2;

3341 
buf
 = (*Ë
	`ßss_Æloc
(
n
 );

3342 i‡–! 
buf
 )

3343 
	`YY_FATAL_ERROR
( "out of dynamic memory in sass__scan_bytes()" );

3345  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

3346 
buf
[
i
] = 
yybyãs
[i];

3348 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

3350 
b
 = 
	`ßss__sˇn_buf„r
(
buf
,
n
 );

3351 i‡–! 
b
 )

3352 
	`YY_FATAL_ERROR
( "bad buffer in sass__scan_bytes()" );

3357 
b
->
yy_is_our_buf„r
 = 1;

3359  
b
;

3360 
	}
}

3362 #i‚de‡
YY_EXIT_FAILURE


3363 
	#YY_EXIT_FAILURE
 2

	)

3366 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

3368 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

3369 
	`exô
–
YY_EXIT_FAILURE
 );

3370 
	}
}

3374 #unde‡
yyÀss


3375 
	#yyÀss
(
n
) \

3379 
yyÀss_ma¸o_¨g
 = (
n
); \

3380 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

3381 
ßss_ãxt
[
ßss_Àng
] = (
yy_hﬁd_ch¨
); \

3382 (
yy_c_buf_p
Ë
ßss_ãxt
 + 
yyÀss_ma¸o_¨g
; \

3383 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

3384 *(
yy_c_buf_p
) = '\0'; \

3385 
ßss_Àng
 = 
yyÀss_ma¸o_¨g
; \

3387  0 )

	)

3394 
	$ßss_gë_löío
 ()

3397  
ßss_löío
;

3398 
	}
}

3403 
FILE
 *
	$ßss_gë_ö
 ()

3405  
ßss_ö
;

3406 
	}
}

3411 
FILE
 *
	$ßss_gë_out
 ()

3413  
ßss_out
;

3414 
	}
}

3419 
	$ßss_gë_Àng
 ()

3421  
ßss_Àng
;

3422 
	}
}

3428 *
	$ßss_gë_ãxt
 ()

3430  
ßss_ãxt
;

3431 
	}
}

3437 
	$ßss_£t_löío
 (
löe_numbî
 )

3440 
ßss_löío
 = 
löe_numbî
;

3441 
	}
}

3449 
	$ßss_£t_ö
 (
FILE
 * 
ö_°r
 )

3451 
ßss_ö
 = 
ö_°r
 ;

3452 
	}
}

3454 
	$ßss_£t_out
 (
FILE
 * 
out_°r
 )

3456 
ßss_out
 = 
out_°r
 ;

3457 
	}
}

3459 
	$ßss_gë_debug
 ()

3461  
ßss__Êex_debug
;

3462 
	}
}

3464 
	$ßss_£t_debug
 (
bdebug
 )

3466 
ßss__Êex_debug
 = 
bdebug
 ;

3467 
	}
}

3469 
	$yy_öô_globÆs
 ()

3476 
ßss_löío
 = 1;

3478 (
yy_buf„r_°ack
) = 0;

3479 (
yy_buf„r_°ack_t›
) = 0;

3480 (
yy_buf„r_°ack_max
) = 0;

3481 (
yy_c_buf_p
) = (*) 0;

3482 (
yy_öô
) = 0;

3483 (
yy_°¨t
) = 0;

3486 #ifde‡
YY_STDINIT


3487 
ßss_ö
 = 
°dö
;

3488 
ßss_out
 = 
°dout
;

3490 
ßss_ö
 = (
FILE
 *) 0;

3491 
ßss_out
 = (
FILE
 *) 0;

3498 
	}
}

3501 
	$ßss_Àx_de°roy
 ()

3505 
YY_CURRENT_BUFFER
){

3506 
	`ßss__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3507 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3508 
	`ßss_p›_buf„r_°©e
();

3512 
	`ßss_‰ì
((
yy_buf„r_°ack
) );

3513 (
yy_buf„r_°ack
Ë
NULL
;

3517 
	`yy_öô_globÆs
( );

3520 
	}
}

3526 #i‚de‡
yyãxt_±r


3527 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

3529 
i
;

3530  
i
 = 0; i < 
n
; ++i )

3531 
s1
[
i
] = 
s2
[i];

3532 
	}
}

3535 #ifde‡
YY_NEED_STRLEN


3536 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

3538 
n
;

3539  
n
 = 0; 
s
[n]; ++n )

3542  
n
;

3543 
	}
}

3546 *
	$ßss_Æloc
 (
yy_size_t
 
size
 )

3548  (*Ë
	`mÆloc
–
size
 );

3549 
	}
}

3551 *
	$ßss_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

3560  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

3561 
	}
}

3563 
	$ßss_‰ì
 (* 
±r
 )

3565 
	`‰ì
–(*Ë
±r
 );

3566 
	}
}

3568 
	#YYTABLES_NAME
 "yyèbÀs"

	)

3574 
	$ßss_îr‹
(c⁄° * 
mesßge
)

3576 
	`¥ötf
(" ");Örötf(
mesßge
);Örötf("Çó∏\"");Örötf(
ßss_ãxt
);Örintf("\"");

3577 
	`¥ötf
(" onÜine ");

3578 
löe
[5]; 
	`•rötf
÷öe, "%i", 
ßss_löío
); 
	`¥ötf
(line);

3579 
	`¥ötf
("\n");

3580 
	`exô
(1);

3581 
	}
}

	@cuobjdump_to_ptxplus/sass_parser.cc

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
ßss_∑r£


	)

68 
	#yyÀx
 
ßss_Àx


	)

69 
	#yyîr‹
 
ßss_îr‹


	)

70 
	#yylvÆ
 
ßss_lvÆ


	)

71 
	#yych¨
 
ßss_ch¨


	)

72 
	#yydebug
 
ßss_debug


	)

73 
	#yy√ºs
 
ßss_√ºs


	)

81 
	~<°dio.h
>

82 
	~"cuobjdumpIn°Li°.h
"

84 
yyÀx
();

85 
yyîr‹
(const *);

87 
cuobjdumpIn°Li°
 *
g_ö°Li°
;

89 
cuobjdumpIn°
 *
	gö°E¡ry
;

96 #i‚de‡
YYDEBUG


97 
	#YYDEBUG
 1

	)

101 #ifde‡
YYERROR_VERBOSE


102 #unde‡
YYERROR_VERBOSE


103 
	#YYERROR_VERBOSE
 1

	)

105 
	#YYERROR_VERBOSE
 0

	)

109 #i‚de‡
YYTOKEN_TABLE


110 
	#YYTOKEN_TABLE
 0

	)

115 #i‚de‡
YYTOKENTYPE


116 
	#YYTOKENTYPE


	)

119 
	eyytokíty≥
 {

120 
	mBAR
 = 258,

121 
	mADA
 = 259,

122 
	mAND
 = 260,

123 
	mANDS
 = 261,

124 
	mBRA
 = 262,

125 
	mCAL
 = 263,

126 
	mCOS
 = 264,

127 
	mDADD
 = 265,

128 
	mDMIN
 = 266,

129 
	mDMAX
 = 267,

130 
	mDFMA
 = 268,

131 
	mDMUL
 = 269,

132 
	mEX2
 = 270,

133 
	mF2F
 = 271,

134 
	mF2I
 = 272,

135 
	mFADD
 = 273,

136 
	mFADD32
 = 274,

137 
	mFADD32I
 = 275,

138 
	mFMAD
 = 276,

139 
	mFMAD32I
 = 277,

140 
	mFMUL
 = 278,

141 
	mFMUL32
 = 279,

142 
	mFMUL32I
 = 280,

143 
	mFSET
 = 281,

144 
	mDSET
 = 282,

145 
	mG2R
 = 283,

146 
	mGLD
 = 284,

147 
	mGST
 = 285,

148 
	mI2F
 = 286,

149 
	mI2I
 = 287,

150 
	mIADD
 = 288,

151 
	mIADD32
 = 289,

152 
	mIADD32I
 = 290,

153 
	mIMAD
 = 291,

154 
	mISAD
 = 292,

155 
	mIMAD24
 = 293,

156 
	mIMAD32I
 = 294,

157 
	mIMAD32
 = 295,

158 
	mIADDCARRY
 = 296,

159 
	mIMUL
 = 297,

160 
	mIMUL24
 = 298,

161 
	mIMULS24
 = 299,

162 
	mIMUL32
 = 300,

163 
	mIMUL32S24
 = 301,

164 
	mIMUL32U24
 = 302,

165 
	mIMUL32I
 = 303,

166 
	mIMUL32I24
 = 304,

167 
	mIMUL32IS24
 = 305,

168 
	mISET
 = 306,

169 
	mLG2
 = 307,

170 
	mLLD
 = 308,

171 
	mLST
 = 309,

172 
	mMOV
 = 310,

173 
	mMOV32
 = 311,

174 
	mMVC
 = 312,

175 
	mMVI
 = 313,

176 
	mNOP
 = 314,

177 
	mNOT
 = 315,

178 
	mNOTS
 = 316,

179 
	mOR
 = 317,

180 
	mORS
 = 318,

181 
	mR2A
 = 319,

182 
	mR2G
 = 320,

183 
	mR2GU16U8
 = 321,

184 
	mRCP
 = 322,

185 
	mRCP32
 = 323,

186 
	mRET
 = 324,

187 
	mRRO
 = 325,

188 
	mRSQ
 = 326,

189 
	mSIN
 = 327,

190 
	mSHL
 = 328,

191 
	mSHR
 = 329,

192 
	mSSY
 = 330,

193 
	mXOR
 = 331,

194 
	mXORS
 = 332,

195 
	mS2R
 = 333,

196 
	mSASS_LD
 = 334,

197 
	mSTS
 = 335,

198 
	mLDS
 = 336,

199 
	mSASS_ST
 = 337,

200 
	mIMIN
 = 338,

201 
	mIMAX
 = 339,

202 
	mA2R
 = 340,

203 
	mFMAX
 = 341,

204 
	mFMIN
 = 342,

205 
	mTEX
 = 343,

206 
	mTEX32
 = 344,

207 
	mC2R
 = 345,

208 
	mEXIT
 = 346,

209 
	mGRED
 = 347,

210 
	mPBK
 = 348,

211 
	mBRK
 = 349,

212 
	mR2C
 = 350,

213 
	mGATOM
 = 351,

214 
	mVOTE
 = 352,

215 
	mEQ
 = 353,

216 
	mEQU
 = 354,

217 
	mGE
 = 355,

218 
	mGEU
 = 356,

219 
	mGT
 = 357,

220 
	mGTU
 = 358,

221 
	mLE
 = 359,

222 
	mLEU
 = 360,

223 
	mLT
 = 361,

224 
	mLTU
 = 362,

225 
	mNE
 = 363,

226 
	mNEU
 = 364,

227 
	mDOTBEXT
 = 365,

228 
	mDOTS
 = 366,

229 
	mDOTSFU
 = 367,

230 
	mDOTTRUNC
 = 368,

231 
	mDOTCEIL
 = 369,

232 
	mDOTFLOOR
 = 370,

233 
	mDOTIR
 = 371,

234 
	mDOTUN
 = 372,

235 
	mDOTNODEP
 = 373,

236 
	mDOTSAT
 = 374,

237 
	mDOTANY
 = 375,

238 
	mDOTALL
 = 376,

239 
	mDOTF16
 = 377,

240 
	mDOTF32
 = 378,

241 
	mDOTF64
 = 379,

242 
	mDOTS8
 = 380,

243 
	mDOTS16
 = 381,

244 
	mDOTS32
 = 382,

245 
	mDOTS64
 = 383,

246 
	mDOTS128
 = 384,

247 
	mDOTU8
 = 385,

248 
	mDOTU16
 = 386,

249 
	mDOTU32
 = 387,

250 
	mDOTU24
 = 388,

251 
	mDOTU64
 = 389,

252 
	mDOTHI
 = 390,

253 
	mDOTNOINC
 = 391,

254 
	mDOTEQ
 = 392,

255 
	mDOTEQU
 = 393,

256 
	mDOTGE
 = 394,

257 
	mDOTGEU
 = 395,

258 
	mDOTGT
 = 396,

259 
	mDOTGTU
 = 397,

260 
	mDOTLE
 = 398,

261 
	mDOTLEU
 = 399,

262 
	mDOTLT
 = 400,

263 
	mDOTLTU
 = 401,

264 
	mDOTNE
 = 402,

265 
	mDOTNEU
 = 403,

266 
	mDOTNSF
 = 404,

267 
	mDOTSF
 = 405,

268 
	mDOTCARRY
 = 406,

269 
	mDOTCC
 = 407,

270 
	mDOTX
 = 408,

271 
	mDOTE
 = 409,

272 
	mDOTRED
 = 410,

273 
	mDOTPOPC
 = 411,

274 
	mREGISTER
 = 412,

275 
	mREGISTERLO
 = 413,

276 
	mREGISTERHI
 = 414,

277 
	mOFFSETREGISTER
 = 415,

278 
	mPREDREGISTER
 = 416,

279 
	mPREDREGISTER2
 = 417,

280 
	mPREDREGISTER3
 = 418,

281 
	mSREGISTER
 = 419,

282 
	mVERSIONHEADER
 = 420,

283 
	mFUNCTIONHEADER
 = 421,

284 
	mSMEMLOCATION
 = 422,

285 
	mABSSMEMLOCATION
 = 423,

286 
	mGMEMLOCATION
 = 424,

287 
	mCMEMLOCATION
 = 425,

288 
	mLMEMLOCATION
 = 426,

289 
	mIDENTIFIER
 = 427,

290 
	mHEXLITERAL
 = 428,

291 
	mLEFTBRACKET
 = 429,

292 
	mRIGHTBRACKET
 = 430,

293 
	mPIPE
 = 431,

294 
	mTILDE
 = 432,

295 
	mNEWLINE
 = 433,

296 
	mSEMICOLON
 = 434,

297 
	mLABEL
 = 435,

298 
	mLABELSTART
 = 436,

299 
	mLABELEND
 = 437,

300 
	mPTXHEADER
 = 438,

301 
	mELFHEADER
 = 439,

302 
	mINFOARCHVERSION
 = 440,

303 
	mINFOCODEVERSION_HEADER
 = 441,

304 
	mINFOCODEVERSION
 = 442,

305 
	mINFOPRODUCER
 = 443,

306 
	mINFOHOST
 = 444,

307 
	mINFOCOMPILESIZE_HEADER
 = 445,

308 
	mINFOCOMPILESIZE
 = 446,

309 
	mINFOIDENTIFIER
 = 447,

310 
	mDOT
 = 448,

311 
	mINSTHEX
 = 449,

312 
	mOSQBRACKET
 = 450,

313 
	mCSQBRACKET
 = 451

319 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


320 
	uYYSTYPE


326 
	mdoubÀ_vÆue
;

327 
	mÊﬂt_vÆue
;

328 
	möt_vÆue
;

329 * 
	m°rög_vÆue
;

330 * 
	m±r_vÆue
;

336 } 
	tYYSTYPE
;

337 
	#YYSTYPE_IS_TRIVIAL
 1

	)

338 
	#yy°y≥
 
YYSTYPE


	)

339 
	#YYSTYPE_IS_DECLARED
 1

	)

353 #ifde‡
YYTYPE_UINT8


354 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

356 
	tyyty≥_uöt8
;

359 #ifde‡
YYTYPE_INT8


360 
YYTYPE_INT8
 
	tyyty≥_öt8
;

361 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

362 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

363 sig√d 
	tyyty≥_öt8
;

365 
	tyyty≥_öt8
;

368 #ifde‡
YYTYPE_UINT16


369 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

371 
	tyyty≥_uöt16
;

374 #ifde‡
YYTYPE_INT16


375 
YYTYPE_INT16
 
	tyyty≥_öt16
;

377 
	tyyty≥_öt16
;

380 #i‚de‡
YYSIZE_T


381 #ifde‡
__SIZE_TYPE__


382 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

383 #ñi‡
deföed
 
size_t


384 
	#YYSIZE_T
 
size_t


	)

385 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

386 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

387 
	~<°ddef.h
>

388 
	#YYSIZE_T
 
size_t


	)

390 
	#YYSIZE_T
 

	)

394 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

396 #i‚de‡
YY_


397 #i‡
YYENABLE_NLS


398 #i‡
ENABLE_NLS


399 
	~<liböé.h
>

400 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

403 #i‚de‡
YY_


404 
	#YY_
(
msgid
Ë
	)
msgid

409 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


410 
	#YYUSE
(
e
Ë((Ë”))

	)

412 
	#YYUSE
(
e
Ë

	)

416 #i‚de‡
löt


417 
	#YYID
(
n
Ë“)

	)

419 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

420 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

422 
	$YYID
 (
yyi
)

425 
	$YYID
 (
yyi
)

426 
yyi
;

429  
yyi
;

430 
	}
}

433 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


437 #ifde‡
YYSTACK_USE_ALLOCA


438 #i‡
YYSTACK_USE_ALLOCA


439 #ifde‡
__GNUC__


440 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

441 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


442 
	~<Æloˇ.h
>

443 #ñi‡
deföed
 
_AIX


444 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

445 #ñi‡
deföed
 
_MSC_VER


446 
	~<mÆloc.h
>

447 
	#Æloˇ
 
_Æloˇ


	)

449 
	#YYSTACK_ALLOC
 
Æloˇ


	)

450 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

451 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

452 
	~<°dlib.h
>

453 #i‚de‡
_STDLIB_H


454 
	#_STDLIB_H
 1

	)

461 #ifde‡
YYSTACK_ALLOC


463 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

464 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


469 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

472 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

473 
	#YYSTACK_FREE
 
YYFREE


	)

474 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


475 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

477 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

478 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

479 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

480 
	~<°dlib.h
>

481 #i‚de‡
_STDLIB_H


482 
	#_STDLIB_H
 1

	)

485 #i‚de‡
YYMALLOC


486 
	#YYMALLOC
 
mÆloc


	)

487 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

488 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

489 *
mÆloc
 (
YYSIZE_T
);

492 #i‚de‡
YYFREE


493 
	#YYFREE
 
‰ì


	)

494 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

495 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

496 
‰ì
 (*);

503 #i‡(! 
deföed
 
yyovîÊow
 \

504 && (! 
deföed
 
	g__˝lu•lus
 \

505 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

508 
	uyyÆloc


510 
yyty≥_öt16
 
	myyss_Æloc
;

511 
YYSTYPE
 
	myyvs_Æloc
;

515 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

519 
	#YYSTACK_BYTES
(
N
) \

520 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

521 + 
YYSTACK_GAP_MAXIMUM
)

	)

525 #i‚de‡
YYCOPY


526 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

527 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

528 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

530 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

533 
YYSIZE_T
 
yyi
; \

534 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

535 (
To
)[
yyi
] = (
From
)[yyi]; \

537 
	`YYID
 (0))

	)

546 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

549 
YYSIZE_T
 
yy√wbyãs
; \

550 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

551 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

552 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

553 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

555 
	`YYID
 (0))

	)

560 
	#YYFINAL
 7

	)

562 
	#YYLAST
 376

	)

565 
	#YYNTOKENS
 197

	)

567 
	#YYNNTS
 36

	)

569 
	#YYNRULES
 221

	)

571 
	#YYNSTATES
 258

	)

574 
	#YYUNDEFTOK
 2

	)

575 
	#YYMAXUTOK
 451

	)

577 
	#YYTRANSLATE
(
YYX
) \

578 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

581 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

631 #i‡
YYDEBUG


634 c⁄° 
yyty≥_uöt16
 
	gyy¥hs
[] =

662 c⁄° 
yyty≥_öt16
 
	gyyrhs
[] =

717 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

745 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


748 c⁄° *c⁄° 
	gyyäame
[] =

790 #ifde‡
YYPRINT


793 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

819 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

847 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

877 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

908 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

918 
	#YYPACT_NINF
 -182

	)

919 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

950 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

962 
	#YYTABLE_NINF
 -125

	)

963 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1005 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1049 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1079 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1080 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1081 
	#YYEMPTY
 (-2)

	)

1082 
	#YYEOF
 0

	)

1084 
	#YYACCEPT
 
yyac˚±œb


	)

1085 
	#YYABORT
 
yyab‹éab


	)

1086 
	#YYERROR
 
yyîr‹œb


	)

1093 
	#YYFAIL
 
yyîæab


	)

1095 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1097 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1099 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1101 
yych¨
 = (
Tokí
); \

1102 
yylvÆ
 = (
VÆue
); \

1103 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

1104 
	`YYPOPSTACK
 (1); \

1105 
yybackup
; \

1109 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1110 
YYERROR
; \

1112 
	`YYID
 (0))

	)

1115 
	#YYTERROR
 1

	)

1116 
	#YYERRCODE
 256

	)

1123 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

1124 #i‚de‡
YYLLOC_DEFAULT


1125 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

1127 i‡(
	`YYID
 (
N
)) \

1129 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

1130 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

1131 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

1132 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

1136 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

1137 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

1138 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

1139 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

1141 
	`YYID
 (0))

	)

1149 #i‚de‡
YY_LOCATION_PRINT


1150 #i‡
YYLTYPE_IS_TRIVIAL


1151 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

1152 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

1153 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

1154 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

1156 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1163 #ifde‡
YYLEX_PARAM


1164 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

1166 
	#YYLEX
 
	`yyÀx
 ()

	)

1170 #i‡
YYDEBUG


1172 #i‚de‡
YYFPRINTF


1173 
	~<°dio.h
>

1174 
	#YYFPRINTF
 
Ârötf


	)

1177 
	#YYDPRINTF
(
Args
) \

1179 i‡(
yydebug
) \

1180 
YYFPRINTF
 
Args
; \

1181 } 
	`YYID
 (0))

	)

1183 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1185 i‡(
yydebug
) \

1187 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1188 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1189 
Ty≥
, 
VÆue
); \

1190 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1192 } 
	`YYID
 (0))

	)

1200 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1201 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1203 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1206 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1207 
FILE
 *
yyouçut
;

1208 
yyty≥
;

1209 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1212 i‡(!
yyvÆuï
)

1214 #ifde‡
YYPRINT


1215 i‡(
yyty≥
 < 
YYNTOKENS
)

1216 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1218 
	`YYUSE
 (
yyouçut
);

1220 
yyty≥
)

1225 
	}
}

1232 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1233 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1235 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1238 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1239 
FILE
 *
yyouçut
;

1240 
yyty≥
;

1241 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1244 i‡(
yyty≥
 < 
YYNTOKENS
)

1245 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

1247 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

1249 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1250 
	`YYFPRINTF
 (
yyouçut
, ")");

1251 
	}
}

1258 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1259 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1261 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1264 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

1265 
yyty≥_öt16
 *
yybŸtom
;

1266 
yyty≥_öt16
 *
yyt›
;

1269 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1270 ; 
yybŸtom
 <
yyt›
; yybottom++)

1272 
yybŸ
 = *
yybŸtom
;

1273 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1275 
	`YYFPRINTF
 (
°dîr
, "\n");

1276 
	}
}

1278 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1280 i‡(
yydebug
) \

1281 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1282 } 
	`YYID
 (0))

	)

1289 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1290 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1292 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1295 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

1296 
YYSTYPE
 *
yyv•
;

1297 
yyruÀ
;

1300 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1301 
yyi
;

1302 
yy o
 = 
yyæöe
[
yyruÀ
];

1303 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1304 
yyruÀ
 - 1, 
yy o
);

1306 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1308 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1309 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

1310 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1312 
	`YYFPRINTF
 (
°dîr
, "\n");

1314 
	}
}

1316 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1318 i‡(
yydebug
) \

1319 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

1320 } 
	`YYID
 (0))

	)

1324 
	gyydebug
;

1326 
	#YYDPRINTF
(
Args
)

	)

1327 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1328 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1329 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1334 #i‚def 
YYINITDEPTH


1335 
	#YYINITDEPTH
 200

	)

1345 #i‚de‡
YYMAXDEPTH


1346 
	#YYMAXDEPTH
 10000

	)

1351 #i‡
YYERROR_VERBOSE


1353 #i‚de‡
yy°æí


1354 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1355 
	#yy°æí
 
°æí


	)

1358 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1359 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1360 
YYSIZE_T


1361 
	$yy°æí
 (c⁄° *
yy°r
)

1363 
YYSIZE_T


1364 
	$yy°æí
 (
yy°r
)

1365 c⁄° *
yy°r
;

1368 
YYSIZE_T
 
yyÀn
;

1369 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1371  
yyÀn
;

1372 
	}
}

1376 #i‚de‡
yy°p˝y


1377 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1378 
	#yy°p˝y
 
°p˝y


	)

1382 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1383 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1385 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1388 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1389 *
yyde°
;

1390 c⁄° *
yy§c
;

1393 *
yyd
 = 
yyde°
;

1394 c⁄° *
yys
 = 
yy§c
;

1396 (*
yyd
++ = *
yys
++) != '\0')

1399  
yyd
 - 1;

1400 
	}
}

1404 #i‚de‡
yyäamîr


1412 
YYSIZE_T


1413 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1415 i‡(*
yy°r
 == '"')

1417 
YYSIZE_T
 
yyn
 = 0;

1418 c⁄° *
yyp
 = 
yy°r
;

1421 *++
yyp
)

1425 
do_nŸ_°rù_quŸes
;

1428 i‡(*++
yyp
 != '\\')

1429 
do_nŸ_°rù_quŸes
;

1432 i‡(
yyªs
)

1433 
yyªs
[
yyn
] = *
yyp
;

1434 
yyn
++;

1438 i‡(
yyªs
)

1439 
yyªs
[
yyn
] = '\0';

1440  
yyn
;

1442 
do_nŸ_°rù_quŸes
: ;

1445 i‡(! 
yyªs
)

1446  
	`yy°æí
 (
yy°r
);

1448  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1449 
	}
}

1459 
YYSIZE_T


1460 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

1462 
yyn
 = 
yy∑˘
[
yy°©e
];

1464 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

1468 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1469 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

1470 
YYSIZE_T
 
yysize
 = 
yysize0
;

1471 
YYSIZE_T
 
yysize1
;

1472 
yysize_ovîÊow
 = 0;

1473 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1474 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1475 
yyx
;

1480 
	`YY_
("syntaxÉrror, unexpected %s");

1481 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

1482 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

1483 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

1484 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

1486 *
yyfmt
;

1487 c⁄° *
yyf
;

1488 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

1489 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

1490 c⁄° 
yy‹
[] = " or %s";

1491 
yyf‹m©
[ 
yyu√x≥˘ed


1492 +  
yyex≥˘ög
 - 1

1493 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1494 * ( 
yy‹
 - 1))];

1495 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1499 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1502 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1503 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1504 
yycou¡
 = 1;

1506 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1507 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1509 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1510 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1512 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1514 
yycou¡
 = 1;

1515 
yysize
 = 
yysize0
;

1516 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1519 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1520 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1521 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1522 
yysize
 = 
yysize1
;

1523 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1524 
yy¥efix
 = 
yy‹
;

1527 
yyf
 = 
	`YY_
(
yyf‹m©
);

1528 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1529 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1530 
yysize
 = 
yysize1
;

1532 i‡(
yysize_ovîÊow
)

1533  
YYSIZE_MAXIMUM
;

1535 i‡(
yyªsu…
)

1540 *
yyp
 = 
yyªsu…
;

1541 
yyi
 = 0;

1542 (*
yyp
 = *
yyf
) != '\0')

1544 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1546 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1547 
yyf
 += 2;

1551 
yyp
++;

1552 
yyf
++;

1556  
yysize
;

1558 
	}
}

1567 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1568 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1570 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1573 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1574 c⁄° *
yymsg
;

1575 
yyty≥
;

1576 
YYSTYPE
 *
yyvÆuï
;

1579 
	`YYUSE
 (
yyvÆuï
);

1581 i‡(!
yymsg
)

1582 
yymsg
 = "Deleting";

1583 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1585 
yyty≥
)

1591 
	}
}

1594 #ifde‡
YYPARSE_PARAM


1595 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1596 
yy∑r£
 (*
YYPARSE_PARAM
);

1598 
yy∑r£
 ();

1601 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1602 
yy∑r£
 ();

1604 
yy∑r£
 ();

1610 
	gyych¨
;

1613 
YYSTYPE
 
	gyylvÆ
;

1616 
	gyy√ºs
;

1624 #ifde‡
YYPARSE_PARAM


1625 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1626 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1628 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1631 
	$yy∑r£
 (
YYPARSE_PARAM
)

1632 *
YYPARSE_PARAM
;

1635 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1636 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1638 
	$yy∑r£
 ()

1641 
	$yy∑r£
 ()

1648 
yy°©e
;

1650 
yyîr°©us
;

1660 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1661 
yyty≥_öt16
 *
yyss
;

1662 
yyty≥_öt16
 *
yys•
;

1665 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1666 
YYSTYPE
 *
yyvs
;

1667 
YYSTYPE
 *
yyv•
;

1669 
YYSIZE_T
 
yy°acksize
;

1671 
yyn
;

1672 
yyªsu…
;

1674 
yytokí
;

1677 
YYSTYPE
 
yyvÆ
;

1679 #i‡
YYERROR_VERBOSE


1681 
yymsgbuf
[128];

1682 *
yymsg
 = 
yymsgbuf
;

1683 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1686 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1690 
yyÀn
 = 0;

1692 
yytokí
 = 0;

1693 
yyss
 = 
yysß
;

1694 
yyvs
 = 
yyvß
;

1695 
yy°acksize
 = 
YYINITDEPTH
;

1697 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1699 
yy°©e
 = 0;

1700 
yyîr°©us
 = 0;

1701 
yy√ºs
 = 0;

1702 
yych¨
 = 
YYEMPTY
;

1708 
yys•
 = 
yyss
;

1709 
yyv•
 = 
yyvs
;

1711 
yy£t°©e
;

1716 
yy√w°©e
:

1719 
yys•
++;

1721 
yy£t°©e
:

1722 *
yys•
 = 
yy°©e
;

1724 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1727 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1729 #ifde‡
yyovîÊow


1734 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1735 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1741 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1742 &
yyss1
, 
yysize
 *  (*
yys•
),

1743 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1744 &
yy°acksize
);

1746 
yyss
 = 
yyss1
;

1747 
yyvs
 = 
yyvs1
;

1750 #i‚de‡
YYSTACK_RELOCATE


1751 
yyexhau°edœb
;

1754 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1755 
yyexhau°edœb
;

1756 
yy°acksize
 *= 2;

1757 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1758 
yy°acksize
 = 
YYMAXDEPTH
;

1761 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1762 
yyÆloc
 *
yy±r
 =

1763 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1764 i‡(! 
yy±r
)

1765 
yyexhau°edœb
;

1766 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1767 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1768 #unde‡
YYSTACK_RELOCATE


1769 i‡(
yyss1
 !
yysß
)

1770 
	`YYSTACK_FREE
 (
yyss1
);

1775 
yys•
 = 
yyss
 + 
yysize
 - 1;

1776 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1778 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1779 (Ë
yy°acksize
));

1781 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1782 
YYABORT
;

1785 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1787 i‡(
yy°©e
 =
YYFINAL
)

1788 
YYACCEPT
;

1790 
yybackup
;

1795 
yybackup
:

1801 
yyn
 = 
yy∑˘
[
yy°©e
];

1802 i‡(
yyn
 =
YYPACT_NINF
)

1803 
yydeÁu…
;

1808 i‡(
yych¨
 =
YYEMPTY
)

1810 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1811 
yych¨
 = 
YYLEX
;

1814 i‡(
yych¨
 <
YYEOF
)

1816 
yych¨
 = 
yytokí
 = 
YYEOF
;

1817 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1821 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1822 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1827 
yyn
 +
yytokí
;

1828 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1829 
yydeÁu…
;

1830 
yyn
 = 
yyèbÀ
[yyn];

1831 i‡(
yyn
 <= 0)

1833 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1834 
yyîæab
;

1835 
yyn
 = -yyn;

1836 
yyªdu˚
;

1841 i‡(
yyîr°©us
)

1842 
yyîr°©us
--;

1845 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1848 
yych¨
 = 
YYEMPTY
;

1850 
yy°©e
 = 
yyn
;

1851 *++
yyv•
 = 
yylvÆ
;

1853 
yy√w°©e
;

1859 
yydeÁu…
:

1860 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1861 i‡(
yyn
 == 0)

1862 
yyîæab
;

1863 
yyªdu˚
;

1869 
yyªdu˚
:

1871 
yyÀn
 = 
yyr2
[
yyn
];

1881 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1884 
	`YY_REDUCE_PRINT
 (
yyn
);

1885 
yyn
)

1891 { 
	`¥ötf
((
yyv•
[(1Ë- (4)].
°rög_vÆue
));Örintf((yyvsp[(2) - (4)].string_value));Örintf(" NoÖarsingÉrrors\n\n"); ;}

1898 { 
	`¥ötf
((
yyv•
[(2Ë- (5)].
°rög_vÆue
));Örintf((yyvsp[(3) - (5)].string_value));Örintf(" NoÖarsingÉrrors\n\n"); ;}

1906 
	`¥ötf
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));

1907 
	`¥ötf
((
yyv•
[(2Ë- (2)].
°rög_vÆue
));

1908 
	`¥ötf
("\n");

1909 
g_ö°Li°
->
	`addE¡ry
((
yyv•
[(2Ë- (2)].
°rög_vÆue
));

1910 
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
();

1911 
ö°E¡ry
->
	`£tBa£
(".entry");

1912 
g_ö°Li°
->
	`add
(
ö°E¡ry
);

1913 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
((
yyv•
[(2Ë- (2)].
°rög_vÆue
));;}

1920 { 
	`¥ötf
("\n"); ;}

1927 { 
	`¥ötf
(";\n"); ;}

1934 { 
	`¥ötf
("\n"); ;}

1941 { 
	`¥ötf
(";\n"); ;}

1955 { 
ö°E¡ry
 = 
√w
 
	`cuobjdumpIn°
(); ;}

1962 { * 
ãmpI≈ut
 = (
yyv•
[(2Ë- (3)].
°rög_vÆue
);

1963 * 
ãmpLabñ
 = 
√w
 [12];

1964 
ãmpLabñ
[0] = 'l';

1965 
ãmpLabñ
[1] = '0';

1966 
ãmpLabñ
[2] = 'x';

1967 
i
=0; i<(8-
	`°æí
(
ãmpI≈ut
)); i++)

1969 
ãmpLabñ
[3+
i
] = '0';

1971 
i
=(11-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

1973 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

1975 
ãmpLabñ
[11] = '\0';

1976 
ö°E¡ry
->
	`£tLabñ
(
ãmpLabñ
); ;}

1990 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (1)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(instEntry);;}

1997 { 
	`¥ötf
((
yyv•
[(1Ë- (3)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (3)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(ö°E¡ry); g_ö°Li°->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(3) - (3)].string_value));;}

2004 { 
	`¥ötf
((
yyv•
[(1Ë- (3)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (3)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(ö°E¡ry); g_ö°Li°->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(3) - (3)].string_value));;}

2012 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (1)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(instEntry);

2021 * 
ãmpI≈ut
 = (
yyv•
[(3Ë- (3)].
°rög_vÆue
);

2022 * 
ãmpLabñ
 = 
√w
 [12];

2023 
ãmpLabñ
[0] = 'l';

2024 
ãmpLabñ
[1] = '0';

2025 
ãmpLabñ
[2] = 'x';

2026 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

2028 
ãmpLabñ
[3+
i
] = '0';

2030 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

2032 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

2034 
ãmpLabñ
[11] = '\0';

2035 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

2036 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);

2044 {
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (1)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(instEntry);;}

2051 { 
	`¥ötf
((
yyv•
[(4Ë- (4)].
°rög_vÆue
));

2052 * 
ãmpI≈ut
 = (
yyv•
[(4Ë- (4)].
°rög_vÆue
);

2053 * 
ãmpLabñ
 = 
√w
 [12];

2054 
ãmpLabñ
[0] = 'l';

2055 
ãmpLabñ
[1] = '0';

2056 
ãmpLabñ
[2] = 'x';

2057 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

2059 
ãmpLabñ
[3+
i
] = '0';

2061 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

2063 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

2065 
ãmpLabñ
[11] = '\0';

2066 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

2067 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);;}

2074 {
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (1)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(instEntry);;}

2081 { 
	`¥ötf
((
yyv•
[(3Ë- (3)].
°rög_vÆue
));

2082 * 
ãmpI≈ut
 = (
yyv•
[(3Ë- (3)].
°rög_vÆue
);

2083 * 
ãmpLabñ
 = 
√w
 [12];

2084 
ãmpLabñ
[0] = 'l';

2085 
ãmpLabñ
[1] = '0';

2086 
ãmpLabñ
[2] = 'x';

2087 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

2089 
ãmpLabñ
[3+
i
] = '0';

2091 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

2093 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

2095 
ãmpLabñ
[11] = '\0';

2096 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

2097 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);;}

2104 {
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (1)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(instEntry);;}

2111 { 
	`¥ötf
((
yyv•
[(3Ë- (3)].
°rög_vÆue
));

2112 * 
ãmpI≈ut
 = (
yyv•
[(3Ë- (3)].
°rög_vÆue
);

2113 * 
ãmpLabñ
 = 
√w
 [12];

2114 
ãmpLabñ
[0] = 'l';

2115 
ãmpLabñ
[1] = '0';

2116 
ãmpLabñ
[2] = 'x';

2117 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

2119 
ãmpLabñ
[3+
i
] = '0';

2121 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

2123 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

2125 
ãmpLabñ
[11] = '\0';

2126 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

2127 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);;}

2134 {
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
ö°E¡ry
->
	`£tBa£
((yyv•[(1Ë- (1)].°rög_vÆue)); 
g_ö°Li°
->
	`add
(instEntry);;}

2141 { 
	`¥ötf
((
yyv•
[(4Ë- (4)].
°rög_vÆue
));

2142 * 
ãmpI≈ut
 = (
yyv•
[(4Ë- (4)].
°rög_vÆue
);

2143 * 
ãmpLabñ
 = 
√w
 [12];

2144 
ãmpLabñ
[0] = 'l';

2145 
ãmpLabñ
[1] = '0';

2146 
ãmpLabñ
[2] = 'x';

2147 
i
=0; i<(10-
	`°æí
(
ãmpI≈ut
)); i++)

2149 
ãmpLabñ
[3+
i
] = '0';

2151 
i
=(13-
	`°æí
(
ãmpI≈ut
)); i<11; i++)

2153 
ãmpLabñ
[
i
] = 
ãmpI≈ut
[i-(11-
	`°æí
(tempInput))];

2155 
ãmpLabñ
[11] = '\0';

2156 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
(
ãmpLabñ
);

2157 
g_ö°Li°
->
	`addCubojdumpLabñ
(
ãmpLabñ
);;}

2164 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addTy≥Modifõr
((yyvsp[(1) - (1)].string_value));;}

2171 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".bext"); ;}

2178 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".s"); ;}

2185 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".sfu"); ;}

2192 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".rz"); ;}

2199 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".rp"); ;}

2206 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".rm"); ;}

2213 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".x"); ;}

2220 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".e"); ;}

2227 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".red"); ;}

2234 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".popc"); ;}

2241 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".ir"); ;}

2262 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".any"); ;}

2269 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".all"); ;}

2276 { 
	`¥ötf
(" "); ;}

2290 { 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".abs"); ;}

2297 { 
	`¥ötf
((
yyv•
[(2Ë- (2)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addTy≥Modifõr
((yyvsp[(2) - (2)].string_value));;}

2304 { 
	`¥ötf
((
yyv•
[(1Ë- (2)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
((yyvsp[(1) - (2)].string_value));;}

2311 { 
	`¥ötf
((
yyv•
[(1Ë- (3)].
°rög_vÆue
));Örötf((yyv•[(2Ë- (3)].°rög_vÆue));Örötf((yyv•[(3Ë- (3)].°rög_vÆue)); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
((yyvsp[(2) - (3)].string_value));;}

2318 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
((yyv•[(1Ë- (1)].°rög_vÆue),
åue
);;}

2325 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
((yyv•[(1Ë- (1)].°rög_vÆue),
åue
);;}

2332 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
((yyv•[(1Ë- (1)].°rög_vÆue),
Ál£
);;}

2339 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpRegi°î
((yyvsp[(1) - (1)].string_value));;}

2346 { 
	`¥ötf
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));Örötf(" ");Örötf((yyv•[(2Ë- (2)].°rög_vÆue)); 
g_ö°Li°
->
	`addCuobjdumpDoubÀPªdReg
((yyvsp[(1) - (2)].string_value), (yyvsp[(2) - (2)].string_value));;}

2353 { 
	`¥ötf
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));Örötf(" ");Örötf((yyv•[(2Ë- (2)].°rög_vÆue)); 
g_ö°Li°
->
	`addCuobjdumpDoubÀPªdReg
((yyvsp[(1) - (2)].string_value), (yyvsp[(2) - (2)].string_value));;}

2360 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
((yyvsp[(1) - (1)].string_value),1);;}

2368 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
));

2369 * 
öput
 = (
yyv•
[(1Ë- (1)].
°rög_vÆue
);

2370 * 
ãmp
 = 
√w
 [99];

2371 
ãmp
[0] = 
öput
[1];

2372 
i
=1;

2373 
i
 < 
	`°æí
(
öput
)-2) {

2374 
ãmp
[
i
] = 
öput
[i+2];

2375 
i
++;

2377 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
(
ãmp
,1);

2378 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
(".abs");

2386 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
((yyvsp[(1) - (1)].string_value),2);;}

2393 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
((yyvsp[(1) - (1)].string_value),0);;}

2400 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`addCuobjdumpMem‹yO≥ønd
((yyvsp[(1) - (1)].string_value),3);;}

2407 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
((yyvsp[(1) - (1)].string_value));;}

2414 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
((yyvsp[(1) - (1)].string_value));;}

2421 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2428 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2435 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2442 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2449 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2456 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2463 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2470 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2477 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2484 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2491 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2498 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
((yyvsp[(1) - (1)].string_value));;}

2505 {
	`¥ötf
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));Örintf((yyvsp[(2) - (2)].string_value));

2506 
g_ö°Li°
->
	`gëLi°End
().
	`£tPªdiˇã
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));

2507 
g_ö°Li°
->
	`gëLi°End
().
	`addPªdiˇãModifõr
((
yyv•
[(2Ë- (2)].
°rög_vÆue
));;}

2514 {
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`£tPªdiˇã
((yyvsp[(1) - (1)].string_value));;}

2522 
	`¥ötf
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));

2523 
	`¥ötf
((
yyv•
[(2Ë- (2)].
°rög_vÆue
));

2525 
g_ö°Li°
->
	`gëLi°End
().
	`£tPªdiˇã
((
yyv•
[(1Ë- (2)].
°rög_vÆue
));

2526 
g_ö°Li°
->
	`gëLi°End
().
	`addPªdiˇãModifõr
((
yyv•
[(2Ë- (2)].
°rög_vÆue
));

2536 
	`¥ötf
("HELLO: ");

2537 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
));

2538 
g_ö°Li°
->
	`gëLi°End
().
	`addO≥ønd
((
yyv•
[(1Ë- (1)].
°rög_vÆue
));

2546 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
("ex2");;}

2553 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
("sin");;}

2560 { 
	`¥ötf
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_ö°Li°
->
	`gëLi°End
().
	`addBa£Modifõr
("cos");;}

2674 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

2676 
	`YYPOPSTACK
 (
yyÀn
);

2677 
yyÀn
 = 0;

2678 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2680 *++
yyv•
 = 
yyvÆ
;

2686 
yyn
 = 
yyr1
[yyn];

2688 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

2689 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

2690 
yy°©e
 = 
yyèbÀ
[yystate];

2692 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

2694 
yy√w°©e
;

2700 
yyîæab
:

2702 i‡(!
yyîr°©us
)

2704 ++
yy√ºs
;

2705 #i‡! 
YYERROR_VERBOSE


2706 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

2709 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

2710 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

2712 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

2713 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

2714 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

2715 i‡(
yymsg
 !
yymsgbuf
)

2716 
	`YYSTACK_FREE
 (
yymsg
);

2717 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

2718 i‡(
yymsg
)

2719 
yymsg_Æloc
 = 
yyÆloc
;

2722 
yymsg
 = 
yymsgbuf
;

2723 
yymsg_Æloc
 =  
yymsgbuf
;

2727 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

2729 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

2730 
	`yyîr‹
 (
yymsg
);

2734 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

2735 i‡(
yysize
 != 0)

2736 
yyexhau°edœb
;

2744 i‡(
yyîr°©us
 == 3)

2749 i‡(
yych¨
 <
YYEOF
)

2752 i‡(
yych¨
 =
YYEOF
)

2753 
YYABORT
;

2757 
	`yyde°ru˘
 ("Error: discarding",

2758 
yytokí
, &
yylvÆ
);

2759 
yych¨
 = 
YYEMPTY
;

2765 
yyîæab1
;

2771 
yyîr‹œb
:

2777 
yyîr‹œb
;

2781 
	`YYPOPSTACK
 (
yyÀn
);

2782 
yyÀn
 = 0;

2783 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2784 
yy°©e
 = *
yys•
;

2785 
yyîæab1
;

2791 
yyîæab1
:

2792 
yyîr°©us
 = 3;

2796 
yyn
 = 
yy∑˘
[
yy°©e
];

2797 i‡(
yyn
 !
YYPACT_NINF
)

2799 
yyn
 +
YYTERROR
;

2800 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

2802 
yyn
 = 
yyèbÀ
[yyn];

2803 i‡(0 < 
yyn
)

2809 i‡(
yys•
 =
yyss
)

2810 
YYABORT
;

2813 
	`yyde°ru˘
 ("Error:Öopping",

2814 
yy°os
[
yy°©e
], 
yyv•
);

2815 
	`YYPOPSTACK
 (1);

2816 
yy°©e
 = *
yys•
;

2817 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2820 *++
yyv•
 = 
yylvÆ
;

2824 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

2826 
yy°©e
 = 
yyn
;

2827 
yy√w°©e
;

2833 
yyac˚±œb
:

2834 
yyªsu…
 = 0;

2835 
yyªtu∫
;

2840 
yyab‹éab
:

2841 
yyªsu…
 = 1;

2842 
yyªtu∫
;

2844 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


2848 
yyexhau°edœb
:

2849 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

2850 
yyªsu…
 = 2;

2854 
yyªtu∫
:

2855 i‡(
yych¨
 !
YYEMPTY
)

2856 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

2857 
yytokí
, &
yylvÆ
);

2860 
	`YYPOPSTACK
 (
yyÀn
);

2861 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2862 
yys•
 !
yyss
)

2864 
	`yyde°ru˘
 ("Cleanup:Öopping",

2865 
yy°os
[*
yys•
], 
yyv•
);

2866 
	`YYPOPSTACK
 (1);

2868 #i‚de‡
yyovîÊow


2869 i‡(
yyss
 !
yysß
)

2870 
	`YYSTACK_FREE
 (
yyss
);

2872 #i‡
YYERROR_VERBOSE


2873 i‡(
yymsg
 !
yymsgbuf
)

2874 
	`YYSTACK_FREE
 (
yymsg
);

2877  
	`YYID
 (
yyªsu…
);

2878 
	}
}

	@cuobjdump_to_ptxplus/sass_parser.hh

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mBAR
 = 258,

43 
	mADA
 = 259,

44 
	mAND
 = 260,

45 
	mANDS
 = 261,

46 
	mBRA
 = 262,

47 
	mCAL
 = 263,

48 
	mCOS
 = 264,

49 
	mDADD
 = 265,

50 
	mDMIN
 = 266,

51 
	mDMAX
 = 267,

52 
	mDFMA
 = 268,

53 
	mDMUL
 = 269,

54 
	mEX2
 = 270,

55 
	mF2F
 = 271,

56 
	mF2I
 = 272,

57 
	mFADD
 = 273,

58 
	mFADD32
 = 274,

59 
	mFADD32I
 = 275,

60 
	mFMAD
 = 276,

61 
	mFMAD32I
 = 277,

62 
	mFMUL
 = 278,

63 
	mFMUL32
 = 279,

64 
	mFMUL32I
 = 280,

65 
	mFSET
 = 281,

66 
	mDSET
 = 282,

67 
	mG2R
 = 283,

68 
	mGLD
 = 284,

69 
	mGST
 = 285,

70 
	mI2F
 = 286,

71 
	mI2I
 = 287,

72 
	mIADD
 = 288,

73 
	mIADD32
 = 289,

74 
	mIADD32I
 = 290,

75 
	mIMAD
 = 291,

76 
	mISAD
 = 292,

77 
	mIMAD24
 = 293,

78 
	mIMAD32I
 = 294,

79 
	mIMAD32
 = 295,

80 
	mIADDCARRY
 = 296,

81 
	mIMUL
 = 297,

82 
	mIMUL24
 = 298,

83 
	mIMULS24
 = 299,

84 
	mIMUL32
 = 300,

85 
	mIMUL32S24
 = 301,

86 
	mIMUL32U24
 = 302,

87 
	mIMUL32I
 = 303,

88 
	mIMUL32I24
 = 304,

89 
	mIMUL32IS24
 = 305,

90 
	mISET
 = 306,

91 
	mLG2
 = 307,

92 
	mLLD
 = 308,

93 
	mLST
 = 309,

94 
	mMOV
 = 310,

95 
	mMOV32
 = 311,

96 
	mMVC
 = 312,

97 
	mMVI
 = 313,

98 
	mNOP
 = 314,

99 
	mNOT
 = 315,

100 
	mNOTS
 = 316,

101 
	mOR
 = 317,

102 
	mORS
 = 318,

103 
	mR2A
 = 319,

104 
	mR2G
 = 320,

105 
	mR2GU16U8
 = 321,

106 
	mRCP
 = 322,

107 
	mRCP32
 = 323,

108 
	mRET
 = 324,

109 
	mRRO
 = 325,

110 
	mRSQ
 = 326,

111 
	mSIN
 = 327,

112 
	mSHL
 = 328,

113 
	mSHR
 = 329,

114 
	mSSY
 = 330,

115 
	mXOR
 = 331,

116 
	mXORS
 = 332,

117 
	mS2R
 = 333,

118 
	mSASS_LD
 = 334,

119 
	mSTS
 = 335,

120 
	mLDS
 = 336,

121 
	mSASS_ST
 = 337,

122 
	mIMIN
 = 338,

123 
	mIMAX
 = 339,

124 
	mA2R
 = 340,

125 
	mFMAX
 = 341,

126 
	mFMIN
 = 342,

127 
	mTEX
 = 343,

128 
	mTEX32
 = 344,

129 
	mC2R
 = 345,

130 
	mEXIT
 = 346,

131 
	mGRED
 = 347,

132 
	mPBK
 = 348,

133 
	mBRK
 = 349,

134 
	mR2C
 = 350,

135 
	mGATOM
 = 351,

136 
	mVOTE
 = 352,

137 
	mEQ
 = 353,

138 
	mEQU
 = 354,

139 
	mGE
 = 355,

140 
	mGEU
 = 356,

141 
	mGT
 = 357,

142 
	mGTU
 = 358,

143 
	mLE
 = 359,

144 
	mLEU
 = 360,

145 
	mLT
 = 361,

146 
	mLTU
 = 362,

147 
	mNE
 = 363,

148 
	mNEU
 = 364,

149 
	mDOTBEXT
 = 365,

150 
	mDOTS
 = 366,

151 
	mDOTSFU
 = 367,

152 
	mDOTTRUNC
 = 368,

153 
	mDOTCEIL
 = 369,

154 
	mDOTFLOOR
 = 370,

155 
	mDOTIR
 = 371,

156 
	mDOTUN
 = 372,

157 
	mDOTNODEP
 = 373,

158 
	mDOTSAT
 = 374,

159 
	mDOTANY
 = 375,

160 
	mDOTALL
 = 376,

161 
	mDOTF16
 = 377,

162 
	mDOTF32
 = 378,

163 
	mDOTF64
 = 379,

164 
	mDOTS8
 = 380,

165 
	mDOTS16
 = 381,

166 
	mDOTS32
 = 382,

167 
	mDOTS64
 = 383,

168 
	mDOTS128
 = 384,

169 
	mDOTU8
 = 385,

170 
	mDOTU16
 = 386,

171 
	mDOTU32
 = 387,

172 
	mDOTU24
 = 388,

173 
	mDOTU64
 = 389,

174 
	mDOTHI
 = 390,

175 
	mDOTNOINC
 = 391,

176 
	mDOTEQ
 = 392,

177 
	mDOTEQU
 = 393,

178 
	mDOTGE
 = 394,

179 
	mDOTGEU
 = 395,

180 
	mDOTGT
 = 396,

181 
	mDOTGTU
 = 397,

182 
	mDOTLE
 = 398,

183 
	mDOTLEU
 = 399,

184 
	mDOTLT
 = 400,

185 
	mDOTLTU
 = 401,

186 
	mDOTNE
 = 402,

187 
	mDOTNEU
 = 403,

188 
	mDOTNSF
 = 404,

189 
	mDOTSF
 = 405,

190 
	mDOTCARRY
 = 406,

191 
	mDOTCC
 = 407,

192 
	mDOTX
 = 408,

193 
	mDOTE
 = 409,

194 
	mDOTRED
 = 410,

195 
	mDOTPOPC
 = 411,

196 
	mREGISTER
 = 412,

197 
	mREGISTERLO
 = 413,

198 
	mREGISTERHI
 = 414,

199 
	mOFFSETREGISTER
 = 415,

200 
	mPREDREGISTER
 = 416,

201 
	mPREDREGISTER2
 = 417,

202 
	mPREDREGISTER3
 = 418,

203 
	mSREGISTER
 = 419,

204 
	mVERSIONHEADER
 = 420,

205 
	mFUNCTIONHEADER
 = 421,

206 
	mSMEMLOCATION
 = 422,

207 
	mABSSMEMLOCATION
 = 423,

208 
	mGMEMLOCATION
 = 424,

209 
	mCMEMLOCATION
 = 425,

210 
	mLMEMLOCATION
 = 426,

211 
	mIDENTIFIER
 = 427,

212 
	mHEXLITERAL
 = 428,

213 
	mLEFTBRACKET
 = 429,

214 
	mRIGHTBRACKET
 = 430,

215 
	mPIPE
 = 431,

216 
	mTILDE
 = 432,

217 
	mNEWLINE
 = 433,

218 
	mSEMICOLON
 = 434,

219 
	mLABEL
 = 435,

220 
	mLABELSTART
 = 436,

221 
	mLABELEND
 = 437,

222 
	mPTXHEADER
 = 438,

223 
	mELFHEADER
 = 439,

224 
	mINFOARCHVERSION
 = 440,

225 
	mINFOCODEVERSION_HEADER
 = 441,

226 
	mINFOCODEVERSION
 = 442,

227 
	mINFOPRODUCER
 = 443,

228 
	mINFOHOST
 = 444,

229 
	mINFOCOMPILESIZE_HEADER
 = 445,

230 
	mINFOCOMPILESIZE
 = 446,

231 
	mINFOIDENTIFIER
 = 447,

232 
	mDOT
 = 448,

233 
	mINSTHEX
 = 449,

234 
	mOSQBRACKET
 = 450,

235 
	mCSQBRACKET
 = 451

241 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


242 
	uYYSTYPE


248 
	mdoubÀ_vÆue
;

249 
	mÊﬂt_vÆue
;

250 
	möt_vÆue
;

251 * 
	m°rög_vÆue
;

252 * 
	m±r_vÆue
;

258 } 
	tYYSTYPE
;

259 
	#YYSTYPE_IS_TRIVIAL
 1

	)

260 
	#yy°y≥
 
YYSTYPE


	)

261 
	#YYSTYPE_IS_DECLARED
 1

	)

264 
YYSTYPE
 
ßss_lvÆ
;

	@cuobjdump_to_ptxplus/stringList.cc

29 
	~"°rögLi°.h
"

30 
	~<°dio.h
>

31 
	~<io°ªam
>

34 
	g°rögLi°
::
	$°rögLi°
()

37 
m_size
 = 0;

38 
m_li°Sèπ
 = 
NULL
;

39 
m_li°End
 = 
NULL
;

40 
	}
}

43 
	g°rögLi°
::
	$gëSize
()

45  
m_size
;

46 
	}
}

49 
°rögLi°Põ˚
* 
	g°rögLi°
::
	$gëLi°Sèπ
()

51  
m_li°Sèπ
;

52 
	}
}

55 
°rögLi°Põ˚
* 
	g°rögLi°
::
	$gëLi°End
()

57  
m_li°End
;

58 
	}
}

63 
	g°rögLi°
::
	$add
(
°rögLi°Põ˚
* 
√wSåög
)

66 if(
m_li°Sèπ
==
NULL
)

67 
m_li°Sèπ
=
√wSåög
;

69 
m_li°End
->
√xtSåög
 = 
√wSåög
;

71 
m_li°End
 = 
√wSåög
;

72 
m_li°End
->
√xtSåög
 = 
NULL
;

74  
m_size
++;

75 
	}
}

77 
boﬁ
 
	g°rögLi°
::
	$ªmove
(
ödex
)

79 if(
ödex
 >
m_size
 )  
Ál£
;

81 
°rögLi°Põ˚
* 
m_ªmove
;

82 
°rögLi°Põ˚
* 
cuºítPõ˚
;

84 if(
m_size
 == 1) {

85 
m_ªmove
 = 
m_li°Sèπ
;

86 
m_li°Sèπ
 = 
NULL
;

87 
m_li°End
 = 
NULL
;

90 if(
ödex
 == 0) {

91 
m_ªmove
 = 
m_li°Sèπ
;

92 
m_li°Sèπ
 = 
m_ªmove
->
√xtSåög
;

93 } if(
ödex
 =
m_size
 - 1) {

94 
m_ªmove
 = 
m_li°End
;

95 
cuºítPõ˚
 = 
m_li°Sèπ
;

96 
i
=1; i<
m_size
-1; i++)

98 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

100 
cuºítPõ˚
->
√xtSåög
 = 
NULL
;

101 
m_li°End
 = 
cuºítPõ˚
;

103 
cuºítPõ˚
 = 
m_li°Sèπ
;

104 
i
=1; i<=
ödex
-1; i++)

106 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

108 
m_ªmove
 = 
cuºítPõ˚
->
√xtSåög
;

109 
cuºítPõ˚
->
√xtSåög
 = 
m_ªmove
->nextString;

113 
dñëe
 
m_ªmove
;

114 
m_size
 -= 1;

115  
åue
;

116 
	}
}

119 
	g°rögLi°
::
	$¥ötSåögLi°
()

121 
°rögLi°Põ˚
* 
cuºítPõ˚
 = 
m_li°Sèπ
;

123 
i
=0; (i<
m_size
)&&(
cuºítPõ˚
!=
NULL
); i++)

125 
°d
::
cout
 << 
cuºítPõ˚
->
°rögText
 << " ";

126 
cuºítPõ˚
 = cuºítPõ˚->
√xtSåög
;

128 
	}
}

	@cuobjdump_to_ptxplus/stringList.h

28 #i‚de‡
_STRINGLIST_H_


29 
	#_STRINGLIST_H_


	)

30 
	s°rögLi°Põ˚


32 c⁄° * 
	m°rögText
;

34 
°rögLi°Põ˚
* 
	m√xtSåög
;

38 ˛as†
	c°rögLi°


41 
	m¥iv©e
:

43 
m_size
;

46 
°rögLi°Põ˚
* 
	mm_li°Sèπ
;

47 
°rögLi°Põ˚
* 
	mm_li°End
;

48 
	mpublic
:

50 
°rögLi°
();

53 
gëSize
();

54 
°rögLi°Põ˚
* 
gëLi°Sèπ
();

55 
°rögLi°Põ˚
* 
gëLi°End
();

58 
add
(
°rögLi°Põ˚
* 
√wSåög
);

59 
boﬁ
 
ªmove
(
ödex
);

62 
¥ötSåögLi°
();

	@libcuda/cuda_runtime_api.cc

104 
	~<°dlib.h
>

105 
	~<°dio.h
>

106 
	~<°rög.h
>

107 
	~<as£π.h
>

108 
	~<time.h
>

109 
	~<°d¨g.h
>

110 
	~<io°ªam
>

111 #ifde‡
OPENGL_SUPPORT


112 
	#GL_GLEXT_PROTOTYPES


	)

113 #ifde‡
__APPLE__


114 
	~<GLUT/glut.h
>

116 
	~<GL/gl.h
>

120 
	#__CUDA_RUNTIME_API_H__


	)

122 
	~"ho°_deföes.h
"

123 
	~"buûtö_ty≥s.h
"

124 
	~"drivî_ty≥s.h
"

125 
	~"__cudaF©F‹m©.h
"

126 
	~"../§c/gpgpu-sim/gpu-sim.h
"

127 
	~"../§c/cuda-sim/±x_lﬂdî.h
"

128 
	~"../§c/cuda-sim/cuda-sim.h
"

129 
	~"../§c/cuda-sim/±x_ú.h
"

130 
	~"../§c/cuda-sim/±x_∑r£r.h
"

131 
	~"../§c/gpgpusim_íåypoöt.h
"

132 
	~"../§c/°ªam_m™agî.h
"

134 
	~<±hªad.h
>

135 
	~<£m≠h‹e.h
>

137 
synchr⁄ize
();

138 
exô_simuœti⁄
();

140 
lﬂd_°©ic_globÆs
–
symbﬁ_èbÀ
 *
symèb
, 
mö_gaddr
, 
max_gaddr
, 
gpgpu_t
 *
gpu
 );

141 
lﬂd_c⁄°™ts
–
symbﬁ_èbÀ
 *
symèb
, 
addr_t
 
mö_gaddr
, 
gpgpu_t
 *
gpu
 );

143 
kî√l_öfo_t
 *
gpgpu_cuda_±x_sim_öô_grid
–c⁄° *
kî√l_key
,

144 
gpgpu_±x_sim_¨g_li°_t
 
¨gs
,

145 
dim3
 
gridDim
,

146 
dim3
 
blockDim
,

147 
CU˘x_°
* 
c⁄ãxt
 );

150 
	scudaAºay


152 *
	mdevPå
;

153 
	mdevPå32
;

154 
cudaCh™√lF‹m©Desc
 
	mdesc
;

155 
	mwidth
;

156 
	mheight
;

157 
	msize
;

158 
	mdimísi⁄s
;

161 #i‡!
deföed
(
__dv
)

162 #i‡
deföed
(
__˝lu•lus
)

163 
	#__dv
(
v
Ë\

	)

164 
v


166 
	#__dv
(
v
)

	)

170 
cudaEº‹_t
 
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

172 
°ªam_m™agî
 *
g_°ªam_m™agî
;

174 
	$ªgi°î_±x_fun˘i⁄
–c⁄° *
«me
, 
fun˘i⁄_öfo
 *
im∂
 )

177 
	}
}

179 #i‡
deföed
 
__APPLE__


180 
	#__my_func__
 
__PRETTY_FUNCTION__


	)

182 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

183 
	#__my_func__
 
__PRETTY_FUNCTION__


	)

185 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

186 
	#__my_func__
 
__func__


	)

188 
	#__my_func__
 ((
__c⁄°
 *Ë0)

	)

193 
	s_cuda_devi˚_id
 {

194 
_cuda_devi˚_id
(
gpgpu_sim
* 
gpu
Ë{
	mm_id
 = 0; 
	mm_√xt
 = 
NULL
; 
	mm_gpgpu
=gpu;}

195 
_cuda_devi˚_id
 *
√xt
(Ë{  
	mm_√xt
; }

196 
num_shadî
(Ëc⁄° {  
	mm_gpgpu
->
gë_c⁄fig
().num_shader(); }

197 
num_devi˚s
() const {

198 if–
	mm_√xt
 =
NULL
 )  1;

199  1 + 
	mm_√xt
->
num_devi˚s
();

201 
_cuda_devi˚_id
 *
gë_devi˚
–
n
 )

203 
as£π
–
n
 < ()
num_devi˚s
() );

204 
_cuda_devi˚_id
 *
	mp
=
this
;

205 
	mi
=0; i<
	mn
; i++)

206 
	mp
 = 
p
->
m_√xt
;

207  
	mp
;

209 c⁄° 
cudaDevi˚Pr›
 *
gë_¥›
() const

211  
	mm_gpgpu
->
gë_¥›
();

213 
gë_id
(Ëc⁄° {  
	mm_id
; }

215 
gpgpu_sim
 *
gë_gpgpu
(Ë{  
	mm_gpgpu
; }

216 
	m¥iv©e
:

217 
m_id
;

218 
˛ass
 
gpgpu_sim
 *
	mm_gpgpu
;

219 
_cuda_devi˚_id
 *
	mm_√xt
;

222 
	sCU˘x_°
 {

223 
CU˘x_°
–
_cuda_devi˚_id
 *
gpu
 ) { 
	mm_gpu
 = gpu; }

225 
_cuda_devi˚_id
 *
gë_devi˚
(Ë{  
	mm_gpu
; }

227 
add_bö¨y
–
symbﬁ_èbÀ
 *
symèb
, 
Át_cubö_h™dÀ
 )

229 
	mm_code
[
Át_cubö_h™dÀ
] = 
symèb
;

230 
	mm_œ°_Át_cubö_h™dÀ
 = 
Át_cubö_h™dÀ
;

233 
add_±xöfo
–c⁄° *
devi˚Fun
, c⁄° 
gpgpu_±x_sim_kî√l_öfo
 &
öfo
 )

235 
symbﬁ
 *
	ms
 = 
m_code
[
m_œ°_Át_cubö_h™dÀ
]->
lookup
(
devi˚Fun
);

236 
as£π
–
s
 !
NULL
 );

237 
fun˘i⁄_öfo
 *
	mf
 = 
s
->
gë_pc
();

238 
as£π
–
f
 !
NULL
 );

239 
	mf
->
£t_kî√l_öfo
(
öfo
);

242 
ªgi°î_fun˘i⁄
–
Át_cubö_h™dÀ
, c⁄° *
ho°Fun
, c⁄° *
devi˚Fun
 )

244 if–
	mm_code
.
föd
(
Át_cubö_h™dÀ
Ë!
m_code
.
íd
() ) {

245 
symbﬁ
 *
s
 = 
m_code
[
Át_cubö_h™dÀ
]->
lookup
(
devi˚Fun
);

246 
as£π
–
s
 !
NULL
 );

247 
fun˘i⁄_öfo
 *
	mf
 = 
s
->
gë_pc
();

248 
as£π
–
f
 !
NULL
 );

249 
	mm_kî√l_lookup
[
ho°Fun
] = 
f
;

251 
	mm_kî√l_lookup
[
ho°Fun
] = 
NULL
;

255 
fun˘i⁄_öfo
 *
gë_kî√l
(c⁄° *
ho°Fun
)

257 
	m°d
::
m≠
<c⁄° *,
	mfun˘i⁄_öfo
*>::
ôî©‹
 
i
=
m_kî√l_lookup
.
föd
(
ho°Fun
);

258 
as£π
–
i
 !
m_kî√l_lookup
.
íd
() );

259  
	mi
->
	m£c⁄d
;

262 
	m¥iv©e
:

263 
_cuda_devi˚_id
 *
m_gpu
;

264 
	m°d
::
m≠
<,
	msymbﬁ_èbÀ
*> 
	mm_code
;

265 
	mm_œ°_Át_cubö_h™dÀ
;

266 
	m°d
::
m≠
<c⁄° *,
	mfun˘i⁄_öfo
*> 
	mm_kî√l_lookup
;

269 ˛as†
	ckî√l_c⁄fig
 {

270 
	mpublic
:

271 
	$kî√l_c⁄fig
–
dim3
 
GridDim
, dim3 
BlockDim
, 
size_t
 
sh¨edMem
, 
CU°ªam_°
 *
°ªam
 )

273 
m_GridDim
=
GridDim
;

274 
m_BlockDim
=
BlockDim
;

275 
m_sh¨edMem
=
sh¨edMem
;

276 
m_°ªam
 = 
°ªam
;

278 
	$£t_¨g
–c⁄° *
¨g
, 
size_t
 
size
, size_à
off£t
 )

280 
m_¨gs
.
	`push_‰⁄t
–
	`gpgpu_±x_sim_¨g
(
¨g
,
size
,
off£t
) );

281 
	}
}

282 
dim3
 
	$grid_dim
(Ëc⁄° {  
m_GridDim
; 
	}
}

283 
dim3
 
	$block_dim
(Ëc⁄° {  
m_BlockDim
; 
	}
}

284 
gpgpu_±x_sim_¨g_li°_t
 
	$gë_¨gs
(Ë{  
m_¨gs
; 
	}
}

285 
CU°ªam_°
 *
	$gë_°ªam
(Ë{  
m_°ªam
; 
	}
}

287 
	g¥iv©e
:

288 
dim3
 
m_GridDim
;

289 
dim3
 
	gm_BlockDim
;

290 
size_t
 
	gm_sh¨edMem
;

291 
CU°ªam_°
 *
	gm_°ªam
;

292 
gpgpu_±x_sim_¨g_li°_t
 
	gm_¨gs
;

294 ˛as†
	cKAIN_w¨p_ö°


296 
	mpublic
:

297 
w¨p_ö°_t
 *
ö°
;

298 
simt_mask_t
 *
	mthªad_d⁄e
;

299 
addr_ve˘‹_t
 *
	m√xt_pc
;

300 
	mªc⁄vîgí˚_pc
;

301 
	$KAIN_w¨p_ö°
()

303 
ö°
 = 
√w
 
	`w¨p_ö°_t
(1);

304 
thªad_d⁄e

√w
 
simt_mask_t
;

305 
√xt_pc
 = 
√w
 
addr_ve˘‹_t
;

306 
√xt_pc
->
	`ªsize
(32);

308 ~
	$KAIN_w¨p_ö°
()

310 
	`¥ötf
("before inst\n");

311 
dñëe
 
ö°
;

312 
	`¥ötf
("beforeÅhread_done\n");

313 
dñëe
 
thªad_d⁄e
;

314 
	`¥ötf
("beforeÇetx_pc\n");

315 
dñëe
 
√xt_pc
;

316 
	`¥ötf
("afterÇetx_pc\n");

317 
	}
}

321 
	gMem‹y_C
;

322 
˛ass
 
KAIN_w¨p_ö°
 **
	gMem‹y
;

328 
	sKAIN_SM_run_CTA_°r


330 
kî√l_öfo_t
 *
	mkî√l
;

331 
	mID
;

333 
KAIN_SM_run_CTA_°r
 *
thªad_tmp
;

334 
˛ass
 
_cuda_devi˚_id
 *
	$GPGPUSim_Inô
()

336 
_cuda_devi˚_id
 *
the_devi˚
 = 
NULL
;

337 if–!
the_devi˚
 ) {

338 
gpgpu_sim
 *
the_gpu
 = 
	`gpgpu_±x_sim_öô_≥rf
();

340 
cudaDevi˚Pr›
 *
¥›
 = (cudaDevi˚Pr› *Ë
	`ˇŒoc
((cudaDeviceProp),1);

341 
	`¢¥ötf
(
¥›
->
«me
,256,"GPGPU-Sim_v%s", 
g_gpgpusim_vîsi⁄_°rög
 );

342 
¥›
->
maj‹
 = 2;

343 
¥›
->
mö‹
 = 0;

344 
¥›
->
tŸÆGlobÆMem
 = 0x40000000 ;

345 
¥›
->
memPôch
 = 0;

346 
¥›
->
maxThªadsPîBlock
 = 512;

347 
¥›
->
maxThªadsDim
[0] = 512;

348 
¥›
->
maxThªadsDim
[1] = 512;

349 
¥›
->
maxThªadsDim
[2] = 512;

350 
¥›
->
maxGridSize
[0] = 0x40000000;

351 
¥›
->
maxGridSize
[1] = 0x40000000;

352 
¥›
->
maxGridSize
[2] = 0x40000000;

353 
¥›
->
tŸÆC⁄°Mem
 = 0x40000000;

354 
¥›
->
ãxtuªAlignmít
 = 0;

355 
¥›
->
sh¨edMemPîBlock
 = 
the_gpu
->
	`sh¨ed_mem_size
();

356 
¥›
->
ªgsPîBlock
 = 
the_gpu
->
	`num_ªgi°îs_≥r_c‹e
();

357 
¥›
->
w¨pSize
 = 
the_gpu
->
	`wΩ_size
();

358 
¥›
->
˛ockR©e
 = 
the_gpu
->
	`shadî_˛ock
();

359 #i‡(
CUDART_VERSION
 >= 2010)

360 
¥›
->
mu…iPro˚ss‹Cou¡
 = 
the_gpu
->
	`gë_c⁄fig
().
	`num_shadî
();

362 
the_gpu
->
	`£t_¥›
(
¥›
);

363 
the_devi˚
 = 
√w
 
	`_cuda_devi˚_id
(
the_gpu
);

382 
thªad_tmp
=(
KAIN_SM_run_CTA_°r
 *)
	`mÆloc
((KAIN_SM_run_CTA_°r)*
Thªad_Num
);

383 
Mem‹y
 = (
√w
 
KAIN_w¨p_ö°
 *[9999999]);

414 
	`°¨t_sim_thªad
(1);

415  
the_devi˚
;

416 
	}
}

418 
CU˘x_°
* 
	$GPGPUSim_C⁄ãxt
()

420 
CU˘x_°
 *
the_c⁄ãxt
 = 
NULL
;

421 if–
the_c⁄ãxt
 =
NULL
 ) {

422 
_cuda_devi˚_id
 *
the_gpu
 = 
	`GPGPUSim_Inô
();

423 
the_c⁄ãxt
 = 
√w
 
	`CU˘x_°
(
the_gpu
);

425  
the_c⁄ãxt
;

426 
	}
}

428 "C" 
	$±xöfo_addöfo
()

430 if–!
	`°rcmp
("__cuda_dummy_íåy__",
	`gë_±xöfo_k«me
()) ) {

432 
	`˛ór_±xöfo
();

435 
CU˘x_°
 *
c⁄ãxt
 = 
	`GPGPUSim_C⁄ãxt
();

436 
	`¥öt_±xöfo
();

437 
c⁄ãxt
->
	`add_±xöfo
–
	`gë_±xöfo_k«me
(), 
	`gë_±xöfo_köfo
() );

438 
	`˛ór_±xöfo
();

439 
	}
}

441 
	$cuda_nŸ_im∂emíãd
–c⁄° * 
func
, 
löe
 )

443 
	`fÊush
(
°dout
);

444 
	`fÊush
(
°dîr
);

445 
	`¥ötf
("\n\nGPGPU-Sim PTX: ExecutionÉrror: CUDA API function \"%s()\" hasÇot been implemented yet.\n"

447 
func
,
__FILE__
, 
löe
 );

448 
	`fÊush
(
°dout
);

449 
	`ab‹t
();

450 
	}
}

453 
	#gpgpusim_±x_îr‹
(
msg
, ...Ë
	`gpgpusim_±x_îr‹_im∂
(
__func__
, 
__FILE__
,
__LINE__
, msg, ##
__VA_ARGS__
)

	)

454 
	#gpgpusim_±x_as£π
(
c⁄d
,
msg
, ...Ë
	`gpgpusim_±x_as£π_im∂
((c⁄d),
__func__
, 
__FILE__
,
__LINE__
, msg, ##
__VA_ARGS__
)

	)

456 
	$gpgpusim_±x_îr‹_im∂
–c⁄° *
func
, c⁄° *
fûe
, 
löe
, c⁄° *
msg
, ... )

458 
va_li°
 
≠
;

459 
buf
[1024];

460 
	`va_°¨t
(
≠
,
msg
);

461 
	`v¢¥ötf
(
buf
,1024,
msg
,
≠
);

462 
	`va_íd
(
≠
);

464 
	`¥ötf
("GPGPU-Sim CUDA API: %s\n", 
buf
);

465 
	`¥ötf
(" [%s:%u : %s]\n", 
fûe
, 
löe
, 
func
 );

466 
	`ab‹t
();

467 
	}
}

469 
	$gpgpusim_±x_as£π_im∂
–
ã°_vÆue
, c⁄° *
func
, c⁄° *
fûe
, 
löe
, c⁄° *
msg
, ... )

471 
va_li°
 
≠
;

472 
buf
[1024];

473 
	`va_°¨t
(
≠
,
msg
);

474 
	`v¢¥ötf
(
buf
,1024,
msg
,
≠
);

475 
	`va_íd
(
≠
);

477 i‡–
ã°_vÆue
 == 0 )

478 
	`gpgpusim_±x_îr‹_im∂
(
func
, 
fûe
, 
löe
, 
msg
);

479 
	}
}

482 
°d
::
	tm≠
<,
	tCUevít_°
*> 
	tevít_åackî_t
;

484 
	gCUevít_°
::
m_√xt_evít_uid
;

485 
evít_åackî_t
 
	gg_timî_evíts
;

486 
	gg_a˘ive_devi˚
 = 0;

487 
	g°d
::
li°
<
kî√l_c⁄fig
> 
g_cuda_œunch_°ack
;

503 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMÆloc
(**
devPå
, 
size_t
 
size
)

505 
CU˘x_°
* 
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

506 *
devPå
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
()->
gpu_mÆloc
(
size
);

507 if(
g_debug_executi⁄
 >= 3)

508 
¥ötf
("GPGPU-Sim PTX: cudaMÆlocög %zu byã†°¨tögáà0x%Œx..\n",
size
, (Ë*
devPå
);

509 i‡–*
devPå
 ) {

510  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

512  
g_œ°_cudaEº‹
 = 
cudaEº‹Mem‹yAŒoˇti⁄
;

516 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMÆlocHo°
(**
±r
, 
size_t
 
size
)

518 
GPGPUSim_C⁄ãxt
();

519 *
±r
 = 
mÆloc
(
size
);

520 i‡–*
±r
 ) {

521  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

523  
g_œ°_cudaEº‹
 = 
cudaEº‹Mem‹yAŒoˇti⁄
;

526 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMÆlocPôch
(**
devPå
, 
size_t
 *
pôch
, size_à
width
, size_à
height
)

528 
mÆloc_width_öbyãs
 = 
width
;

529 
¥ötf
("GPGPU-Sim PTX: cudaMÆlocPôch (width = %d)\n", 
mÆloc_width_öbyãs
);

530 
CU˘x_°
* 
˘x
 = 
GPGPUSim_C⁄ãxt
();

531 *
devPå
 = 
˘x
->
gë_devi˚
()->
gë_gpgpu
()->
gpu_mÆloc
(
mÆloc_width_öbyãs
*
height
);

532 
pôch
[0] = 
mÆloc_width_öbyãs
;

533 i‡–*
devPå
 ) {

534  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

536  
g_œ°_cudaEº‹
 = 
cudaEº‹Mem‹yAŒoˇti⁄
;

540 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMÆlocAºay
(
cudaAºay
 **
¨øy
, c⁄° 
cudaCh™√lF‹m©Desc
 *
desc
, 
size_t
 
width
, size_à
height
 
__dv
(1))

542 
size
 = 
width
 * 
height
 * ((
desc
->
x
 + desc->
y
 + desc->
z
 + desc->
w
)/8);

543 
CU˘x_°
* 
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

544 (*
¨øy
Ë(
cudaAºay
*Ë
mÆloc
((cudaArray));

545 (*
¨øy
)->
desc
 = *desc;

546 (*
¨øy
)->
width
 = width;

547 (*
¨øy
)->
height
 = height;

548 (*
¨øy
)->
size
 = size;

549 (*
¨øy
)->
dimísi⁄s
 = 2;

550 ((*
¨øy
)->
devPå32
)(Ë()
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
()->
gpu_mÆloˇºay
(
size
);

551 
¥ötf
("GPGPU-Sim PTX: cudaMÆlocAºay: devPå32 = %d\n", ((*
¨øy
)->
devPå32
));

552 ((*
¨øy
)->
devPå
Ë(*Ë(Ë((*¨øy)->
devPå32
);

553 i‡–((*
¨øy
)->
devPå
) ) {

554  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

556  
g_œ°_cudaEº‹
 = 
cudaEº‹Mem‹yAŒoˇti⁄
;

560 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaFªe
(*
devPå
)

563  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

565 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaFªeHo°
(*
±r
)

567 
‰ì
 (
±r
);

568  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

571 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaFªeAºay
(
cudaAºay
 *
¨øy
)

574  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

584 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
cou¡
, 
cudaMem˝yKöd
 
köd
)

588 if(
g_debug_executi⁄
 >= 3)

589 
¥ötf
("GPGPU-Sim PTX: cudaMem˝y(): devPå = %p\n", 
d°
);

590 if–
köd
 =
cudaMem˝yHo°ToDevi˚
 )

591 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
(
§c
,(
size_t
)
d°
,
cou¡
,0) );

592 if–
köd
 =
cudaMem˝yDevi˚ToHo°
 )

593 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
((
size_t
)
§c
,
d°
,
cou¡
,0) );

594 if–
köd
 =
cudaMem˝yDevi˚ToDevi˚
 )

595 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
((
size_t
)
§c
,(size_t)
d°
,
cou¡
,0) );

597 
¥ötf
("GPGPU-Sim PTX: cudaMemcpy - ERROR : unsupported cudaMemcpyKind\n");

598 
ab‹t
();

600  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

603 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yToAºay
(
cudaAºay
 *
d°
, 
size_t
 
wOff£t
, size_à
hOff£t
, c⁄° *
§c
, size_à
cou¡
, 
cudaMem˝yKöd
 
köd
)

605 
CU˘x_°
 *
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

606 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
();

607 
size_t
 
size
 = 
cou¡
;

608 
¥ötf
("GPGPU-Sim PTX: cudaMemcpyToArray\n");

609 if–
köd
 =
cudaMem˝yHo°ToDevi˚
 )

610 
gpu
->
mem˝y_to_gpu
–(
size_t
)(
d°
->
devPå
), 
§c
, 
size
);

611 if–
köd
 =
cudaMem˝yDevi˚ToHo°
 )

612 
gpu
->
mem˝y_‰om_gpu
–
d°
->
devPå
, (
size_t
)
§c
, 
size
);

613 if–
köd
 =
cudaMem˝yDevi˚ToDevi˚
 )

614 
gpu
->
mem˝y_gpu_to_gpu
–(
size_t
)(
d°
->
devPå
), (size_t)
§c
, 
size
);

616 
¥ötf
("GPGPU-Sim PTX: cudaMemcpyToArray - ERROR : unsupported cudaMemcpyKind\n");

617 
ab‹t
();

619 
d°
->
devPå32
 = (Ë(
size_t
)(d°->
devPå
);

620  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

624 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yFromAºay
(*
d°
, c⁄° 
cudaAºay
 *
§c
, 
size_t
 
wOff£t
, size_à
hOff£t
, size_à
cou¡
, 
cudaMem˝yKöd
 
köd
)

626 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

627  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

631 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yAºayToAºay
(
cudaAºay
 *
d°
, 
size_t
 
wOff£tD°
, size_à
hOff£tD°
, c⁄° cudaAºay *
§c
, size_à
wOff£tSrc
, size_à
hOff£tSrc
, size_à
cou¡
, 
cudaMem˝yKöd
 
köd
 
__dv
(
cudaMem˝yDevi˚ToDevi˚
))

633 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

634  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

638 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2D
(*
d°
, 
size_t
 
dpôch
, c⁄° *
§c
, size_à
•ôch
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
)

640 
CU˘x_°
 *
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

641 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
();

642 
cudaAºay
 *
cuAºay_±r
;

643 
size_t
 
size
 = 
•ôch
*
height
;

644 
cuAºay_±r
 = (
cudaAºay
*)
d°
;

645 
gpgpusim_±x_as£π
–(
dpôch
==
•ôch
), "different srcánd dstÖitchÇot supported yet" );

646 if–
köd
 =
cudaMem˝yHo°ToDevi˚
 )

647 
gpu
->
mem˝y_to_gpu
–(
size_t
)
d°
, 
§c
, 
size
 );

648 if–
köd
 =
cudaMem˝yDevi˚ToHo°
 )

649 
gpu
->
mem˝y_‰om_gpu
–
d°
, (
size_t
)
§c
, 
size
 );

650 if–
köd
 =
cudaMem˝yDevi˚ToDevi˚
 )

651 
gpu
->
mem˝y_gpu_to_gpu
–(
size_t
)
d°
, (size_t)
§c
, 
size
);

653 
¥ötf
("GPGPU-Sim PTX: cudaMemcpy2D - ERROR : unsupported cudaMemcpyKind\n");

654 
ab‹t
();

656  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

660 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2DToAºay
(
cudaAºay
 *
d°
, 
size_t
 
wOff£t
, size_à
hOff£t
, c⁄° *
§c
, size_à
•ôch
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
)

662 
CU˘x_°
 *
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

663 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
();

664 
size_t
 
size
 = 
•ôch
*
height
;

665 
size_t
 
ch™√l_size
 = 
d°
->
desc
.
w
+d°->desc.
x
+d°->desc.
y
+d°->desc.
z
;

666 
gpgpusim_±x_as£π
–((
ch™√l_size
%8) == 0), "none byte multiple destination channel sizeÇot supported (sz=%u)", channel_size );

667 
ñem_size
 = 
ch™√l_size
/8;

668 
gpgpusim_±x_as£π
–(
d°
->
dimísi⁄s
==2), "copyÅoÇone 2DárrayÇot supported" );

669 
gpgpusim_±x_as£π
–(
wOff£t
==0), "non-zero wOffsetÇot yet supported" );

670 
gpgpusim_±x_as£π
–(
hOff£t
==0), "non-zero hOffsetÇot yet supported" );

671 
gpgpusim_±x_as£π
–(
d°
->
height
 == ()height), "partial copyÇot supported" );

672 
gpgpusim_±x_as£π
–(
ñem_size
*
d°
->
width
 == width), "partial copyÇot supported" );

673 
gpgpusim_±x_as£π
–(
•ôch
 =
width
), "spitch != widthÇot supported" );

674 if–
köd
 =
cudaMem˝yHo°ToDevi˚
 )

675 
gpu
->
mem˝y_to_gpu
–(
size_t
)(
d°
->
devPå
), 
§c
, 
size
);

676 if–
köd
 =
cudaMem˝yDevi˚ToHo°
 )

677 
gpu
->
mem˝y_‰om_gpu
–
d°
->
devPå
, (
size_t
)
§c
, 
size
);

678 if–
köd
 =
cudaMem˝yDevi˚ToDevi˚
 )

679 
gpu
->
mem˝y_gpu_to_gpu
–(
size_t
)
d°
->
devPå
, (size_t)
§c
, 
size
);

681 
¥ötf
("GPGPU-Sim PTX: cudaMemcpy2D - ERROR : unsupported cudaMemcpyKind\n");

682 
ab‹t
();

684 
d°
->
devPå32
 = (Ë(
size_t
)(d°->
devPå
);

685  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

689 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2DFromAºay
(*
d°
, 
size_t
 
dpôch
, c⁄° 
cudaAºay
 *
§c
, size_à
wOff£t
, size_à
hOff£t
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
)

691 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

692  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

696 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2DAºayToAºay
(
cudaAºay
 *
d°
, 
size_t
 
wOff£tD°
, size_à
hOff£tD°
, c⁄° cudaAºay *
§c
, size_à
wOff£tSrc
, size_à
hOff£tSrc
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
 
__dv
(
cudaMem˝yDevi˚ToDevi˚
))

698 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

699  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

703 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yToSymbﬁ
(c⁄° *
symbﬁ
, c⁄° *
§c
, 
size_t
 
cou¡
, size_à
off£t
 
__dv
(0), 
cudaMem˝yKöd
 
köd
 __dv(
cudaMem˝yHo°ToDevi˚
))

706 
as£π
(
köd
 =
cudaMem˝yHo°ToDevi˚
);

707 
¥ötf
("GPGPU-Sim PTX: cudaMem˝yToSymbﬁ: symbﬁ = %p\n", 
symbﬁ
);

709 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
(
§c
,
symbﬁ
,
cou¡
,
off£t
,0) );

711  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

715 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yFromSymbﬁ
(*
d°
, c⁄° *
symbﬁ
, 
size_t
 
cou¡
, size_à
off£t
 
__dv
(0), 
cudaMem˝yKöd
 
köd
 __dv(
cudaMem˝yDevi˚ToHo°
))

718 
as£π
(
köd
 =
cudaMem˝yDevi˚ToHo°
);

719 
¥ötf
("GPGPU-Sim PTX: cudaMem˝yFromSymbﬁ: symbﬁ = %p\n", 
symbﬁ
);

720 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
(
symbﬁ
,
d°
,
cou¡
,
off£t
,0) );

722  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

733 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yAsync
(*
d°
, c⁄° *
§c
, 
size_t
 
cou¡
, 
cudaMem˝yKöd
 
köd
, 
cudaSåóm_t
 
°ªam
)

735 
CU°ªam_°
 *
s
 = (CU°ªam_° *)
°ªam
;

736  
köd
 ) {

737 
cudaMem˝yHo°ToDevi˚
: 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
(
§c
,(
size_t
)
d°
,
cou¡
,
s
) ); ;

738 
cudaMem˝yDevi˚ToHo°
: 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
((
size_t
)
§c
,
d°
,
cou¡
,
s
) ); ;

739 
cudaMem˝yDevi˚ToDevi˚
: 
g_°ªam_m™agî
->
push
–
°ªam_›î©i⁄
((
size_t
)
§c
,(size_t)
d°
,
cou¡
,
s
) ); ;

741 
ab‹t
();

743  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

747 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yToAºayAsync
(
cudaAºay
 *
d°
, 
size_t
 
wOff£t
, size_à
hOff£t
, c⁄° *
§c
, size_à
cou¡
, 
cudaMem˝yKöd
 
köd
, 
cudaSåóm_t
 
°ªam
)

749 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

750  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

754 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝yFromAºayAsync
(*
d°
, c⁄° 
cudaAºay
 *
§c
, 
size_t
 
wOff£t
, size_à
hOff£t
, size_à
cou¡
, 
cudaMem˝yKöd
 
köd
, 
cudaSåóm_t
 
°ªam
)

756 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

757  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

761 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2DAsync
(*
d°
, 
size_t
 
dpôch
, c⁄° *
§c
, size_à
•ôch
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
, 
cudaSåóm_t
 
°ªam
)

763 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

764  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

768 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2DToAºayAsync
(
cudaAºay
 *
d°
, 
size_t
 
wOff£t
, size_à
hOff£t
, c⁄° *
§c
, size_à
•ôch
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
, 
cudaSåóm_t
 
°ªam
)

770 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

771  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

775 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem˝y2DFromAºayAsync
(*
d°
, 
size_t
 
dpôch
, c⁄° 
cudaAºay
 *
§c
, size_à
wOff£t
, size_à
hOff£t
, size_à
width
, size_à
height
, 
cudaMem˝yKöd
 
köd
, 
cudaSåóm_t
 
°ªam
)

777 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

778  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

789 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem£t
(*
mem
, 
c
, 
size_t
 
cou¡
)

791 
CU˘x_°
 *
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

792 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
();

793 
gpu
->
gpu_mem£t
((
size_t
)
mem
, 
c
, 
cou¡
);

794  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

797 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaMem£t2D
(*
mem
, 
size_t
 
pôch
, 
c
, size_à
width
, size_à
height
)

799 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

800  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

811 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëSymbﬁAddªss
(**
devPå
, c⁄° *
symbﬁ
)

813 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

814  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

818 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëSymbﬁSize
(
size_t
 *
size
, c⁄° *
symbﬁ
)

820 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

821  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

831 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëDevi˚Cou¡
(*
cou¡
)

833 
_cuda_devi˚_id
 *
dev
 = 
GPGPUSim_Inô
();

834 *
cou¡
 = 
dev
->
num_devi˚s
();

835  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

838 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëDevi˚Pr›îtõs
(
cudaDevi˚Pr›
 *
¥›
, 
devi˚
)

840 
_cuda_devi˚_id
 *
dev
 = 
GPGPUSim_Inô
();

841 i‡(
devi˚
 <
dev
->
num_devi˚s
() ) {

842 *
¥›
*
dev
->
gë_¥›
();

843  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

845  
g_œ°_cudaEº‹
 = 
cudaEº‹InvÆidDevi˚
;

849 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaChoo£Devi˚
(*
devi˚
, c⁄° 
cudaDevi˚Pr›
 *
¥›
)

851 
_cuda_devi˚_id
 *
dev
 = 
GPGPUSim_Inô
();

852 *
devi˚
 = 
dev
->
gë_id
();

853  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

856 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaSëDevi˚
(
devi˚
)

859 i‡–
devi˚
 <
GPGPUSim_Inô
()->
num_devi˚s
() ) {

860 
g_a˘ive_devi˚
 = 
devi˚
;

861  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

863  
g_œ°_cudaEº‹
 = 
cudaEº‹InvÆidDevi˚
;

867 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëDevi˚
(*
devi˚
)

869 *
devi˚
 = 
g_a˘ive_devi˚
;

870  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

879 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaBödTextuª
(
size_t
 *
off£t
,

880 c⁄° 
ãxtuªRe„ªn˚
 *
ãxªf
,

881 c⁄° *
devPå
,

882 c⁄° 
cudaCh™√lF‹m©Desc
 *
desc
,

883 
size_t
 
size
 
__dv
(
UINT_MAX
))

885 
CU˘x_°
 *
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

886 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
();

887 
¥ötf
("GPGPU-Sim PTX: i¿cudaBödTextuª: sizeof(°ru˘ÅextuªRe„ªn˚Ë%zu\n", (
ãxtuªRe„ªn˚
));

888 
cudaAºay
 *
¨øy
;

889 
¨øy
 = (
cudaAºay
*Ë
mÆloc
((cudaArray));

890 
¨øy
->
desc
 = *desc;

891 
¨øy
->
size
 = size;

892 
¨øy
->
width
 = 
size
;

893 
¨øy
->
height
 = 1;

894 
¨øy
->
dimísi⁄s
 = 1;

895 
¨øy
->
devPå
 = (*)devPtr;

896 
¨øy
->
devPå32
 = ()()
devPå
;

897 
off£t
 = 0;

898 
¥ötf
("GPGPU-Sim PTX: sizê%zu\n", 
size
);

899 
¥ötf
("GPGPU-Sim PTX:Åexª‡%p,áºay = %p\n", 
ãxªf
, 
¨øy
);

900 
¥ötf
("GPGPU-Sim PTX: devPå32 = %x\n", 
¨øy
->
devPå32
);

901 
¥ötf
("GPGPU-Sim PTX: Namêc‹ª•⁄dögÅÿãxtuªRe„ªn˚: %s\n", 
gpu
->
gpgpu_±x_sim_födName‰omTextuª
(
ãxªf
));

902 
¥ötf
("GPGPU-Sim PTX: Ch™√lF‹m©Desc: x=%d, y=%d, z=%d, w=%d\n", 
desc
->
x
, desc->
y
, desc->
z
, desc->
w
);

903 
¥ötf
("GPGPU-Sim PTX: Textuª N‹mÆized? = %d\n", 
ãxªf
->
n‹mÆized
);

904 
gpu
->
gpgpu_±x_sim_bödTextuªToAºay
(
ãxªf
, 
¨øy
);

905 
devPå
 = (*)()
¨øy
->
devPå32
;

906 
¥ötf
("GPGPU-Sim PTX: devPå = %p\n", 
devPå
);

907  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

911 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaBödTextuªToAºay
(c⁄° 
ãxtuªRe„ªn˚
 *
ãxªf
, c⁄° 
cudaAºay
 *
¨øy
, c⁄° 
cudaCh™√lF‹m©Desc
 *
desc
)

913 
CU˘x_°
 *
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

914 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
();

915 
¥ötf
("GPGPU-Sim PTX: i¿cudaBödTextuªToAºay: %∞%p\n", 
ãxªf
, 
¨øy
);

916 
¥ötf
("GPGPU-Sim PTX: devPå32 = %x\n", 
¨øy
->
devPå32
);

917 
¥ötf
("GPGPU-Sim PTX: Namêc‹ª•⁄dögÅÿãxtuªRe„ªn˚: %s\n", 
gpu
->
gpgpu_±x_sim_födName‰omTextuª
(
ãxªf
));

918 
¥ötf
("GPGPU-Sim PTX: Textuª N‹mÆized? = %d\n", 
ãxªf
->
n‹mÆized
);

919 
gpu
->
gpgpu_±x_sim_bödTextuªToAºay
(
ãxªf
, 
¨øy
);

920  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

923 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaUnbödTextuª
(c⁄° 
ãxtuªRe„ªn˚
 *
ãxªf
)

925  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

928 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëTextuªAlignmítOff£t
(
size_t
 *
off£t
, c⁄° 
ãxtuªRe„ªn˚
 *
ãxªf
)

930 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

931  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

934 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëTextuªRe„ªn˚
(c⁄° 
ãxtuªRe„ªn˚
 **
ãxªf
, c⁄° *
symbﬁ
)

936 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

937  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

940 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëCh™√lDesc
(
cudaCh™√lF‹m©Desc
 *
desc
, c⁄° 
cudaAºay
 *
¨øy
)

942 *
desc
 = 
¨øy
->desc;

943  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

947 
__ho°__
 
cudaCh™√lF‹m©Desc
 
CUDARTAPI
 
cudaCª©eCh™√lDesc
(
x
, 
y
, 
z
, 
w
, 
cudaCh™√lF‹m©Köd
 
f
)

949 
cudaCh™√lF‹m©Desc
 
dummy
;

950 
dummy
.
x
 = x;

951 
dummy
.
y
 = y;

952 
dummy
.
z
 = z;

953 
dummy
.
w
 = w;

954 
dummy
.
f
 = f;

955  
dummy
;

958 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaGëLa°Eº‹
()

960  
g_œ°_cudaEº‹
;

963 
__ho°__
 c⁄° * 
CUDARTAPI
 
cudaGëEº‹Såög
(
cudaEº‹_t
 
îr‹
)

965 if–
g_œ°_cudaEº‹
 =
cudaSuc˚ss
 )

967 
buf
[1024];

968 
¢¥ötf
(
buf
,1024,"<<GPGPU-Sim PTX:Åhîêwa†™Éº‹ (codê%d)>>", 
g_œ°_cudaEº‹
);

969  
°rdup
(
buf
);

972 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaC⁄figuªCÆl
(
dim3
 
gridDim
, dim3 
blockDim
, 
size_t
 
sh¨edMem
, 
cudaSåóm_t
 
°ªam
)

974 
CU°ªam_°
 *
s
 = (CU°ªam_° *)
°ªam
;

975 
g_cuda_œunch_°ack
.
push_back
–
kî√l_c⁄fig
(
gridDim
,
blockDim
,
sh¨edMem
,
s
) );

976  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

979 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaSëupArgumít
(c⁄° *
¨g
, 
size_t
 
size
, size_à
off£t
)

981 
gpgpusim_±x_as£π
–!
g_cuda_œunch_°ack
.
em±y
(), "emptyÜaunch stack" );

982 
kî√l_c⁄fig
 &
c⁄fig
 = 
g_cuda_œunch_°ack
.
back
();

983 
c⁄fig
.
£t_¨g
(
¨g
,
size
,
off£t
);

985 
gpgpu_±x_sim_¨g
 *
∑øm
 = (gpgpu_±x_sim_¨g*Ë
ˇŒoc
(1,(gpgpu_ptx_sim_arg));

986 
∑øm
->
m_°¨t
 = 
¨g
;

987 
∑øm
->
m_nbyãs
 = 
size
;

988 
∑øm
->
m_off£t
 = 
off£t
;

990  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

992 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaLaunch
–c⁄° *
ho°Fun
 )

994 
CU˘x_°
* 
c⁄ãxt
 = 
GPGPUSim_C⁄ãxt
();

995 *
mode
 = 
gëív
("PTX_SIM_MODE_FUNC");

996 if–
mode
 )

997 
ssˇnf
(
mode
,"%u", &
g_±x_sim_mode
);

998 
gpgpusim_±x_as£π
–!
g_cuda_œunch_°ack
.
em±y
(), "emptyÜaunch stack" );

999 
kî√l_c⁄fig
 
c⁄fig
 = 
g_cuda_œunch_°ack
.
back
();

1000 
CU°ªam_°
 *
°ªam
 = 
c⁄fig
.
gë_°ªam
();

1001 
¥ötf
("\nGPGPU-Sim PTX: cudaLaunch f‹ 0x%∞(mode=%sË⁄ såóm %u\n", 
ho°Fun
,

1002 
g_±x_sim_mode
?"fun˘i⁄Æ simuœti⁄":"≥rf‹m™˚ simuœti⁄", 
°ªam
?°ªam->
gë_uid
():0 );

1003 
kî√l_öfo_t
 *
grid
 = 
gpgpu_cuda_±x_sim_öô_grid
(
ho°Fun
,
c⁄fig
.
gë_¨gs
(),c⁄fig.
grid_dim
(),c⁄fig.
block_dim
(),
c⁄ãxt
);

1004 
°d
::
°rög
 
k«me
 = 
grid
->
«me
();

1005 
dim3
 
gridDim
 = 
c⁄fig
.
grid_dim
();

1006 
dim3
 
blockDim
 = 
c⁄fig
.
block_dim
();

1007 
¥ötf
("GPGPU-Sim PTX:Öushing kernel \'%s\'Åo stream %u, gridDim= (%u,%u,%u) blockDim = (%u,%u,%u) \n",

1008 
k«me
.
c_°r
(), 
°ªam
?°ªam->
gë_uid
():0, 
gridDim
.
x
,gridDim.
y
,gridDim.
z
,
blockDim
.x,blockDim.y,blockDim.z );

1013 
°ªam_›î©i⁄
 
›
(
grid
,
g_±x_sim_mode
,
°ªam
);

1014 
g_°ªam_m™agî
->
push
(
›
);

1015 
g_cuda_œunch_°ack
.
p›_back
();

1016  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1025 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaSåómCª©e
(
cudaSåóm_t
 *
°ªam
)

1027 
¥ötf
("GPGPU-Sim PTX: cudaStreamCreate\n");

1028 #i‡(
CUDART_VERSION
 >= 3000)

1029 *
°ªam
 = 
√w
 
CU°ªam_°
();

1030 
g_°ªam_m™agî
->
add_°ªam
(*
°ªam
);

1032 *
°ªam
 = 0;

1033 
¥ötf
("GPGPU-Sim PTX: WARNING: Asynchr⁄ou†kî√»executi⁄ÇŸ suµ‹ãd (%s)\n", 
__my_func__
);

1035  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1038 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaSåómDe°roy
(
cudaSåóm_t
 
°ªam
)

1040 #i‡(
CUDART_VERSION
 >= 3000)

1041 
g_°ªam_m™agî
->
de°roy_°ªam
(
°ªam
);

1043  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1046 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaSåómSynchr⁄ize
(
cudaSåóm_t
 
°ªam
)

1048 #i‡(
CUDART_VERSION
 >= 3000)

1049 if–
°ªam
 =
NULL
 )

1050  
g_œ°_cudaEº‹
 = 
cudaEº‹InvÆidResour˚H™dÀ
;

1051 
°ªam
->
synchr⁄ize
();

1053 
¥ötf
("GPGPU-Sim PTX: WARNING: Asynchr⁄ou†kî√»executi⁄ÇŸ suµ‹ãd (%s)\n", 
__my_func__
);

1055  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1058 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaSåómQuîy
(
cudaSåóm_t
 
°ªam
)

1060 #i‡(
CUDART_VERSION
 >= 3000)

1061 if–
°ªam
 =
NULL
 )

1062  
g_œ°_cudaEº‹
 = 
cudaEº‹InvÆidResour˚H™dÀ
;

1063  
g_œ°_cudaEº‹
 = 
°ªam
->
em±y
()?
cudaSuc˚ss
:
cudaEº‹NŸRódy
;

1065 
¥ötf
("GPGPU-Sim PTX: WARNING: Asynchr⁄ou†kî√»executi⁄ÇŸ suµ‹ãd (%s)\n", 
__my_func__
);

1066  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1076 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaEvítCª©e
(
cudaEvít_t
 *
evít
)

1078 
CUevít_°
 *
e
 = 
√w
 CUevít_°(
Ál£
);

1079 
g_timî_evíts
[
e
->
gë_uid
()] =É;

1080 #i‡
CUDART_VERSION
 >= 3000

1081 *
evít
 = 
e
;

1083 *
evít
 = 
e
->
gë_uid
();

1085  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1088 
CUevít_°
 *
gë_evít
(
cudaEvít_t
 
evít
)

1090 
evít_uid
;

1091 #i‡
CUDART_VERSION
 >= 3000

1092 
evít_uid
 = 
evít
->
gë_uid
();

1094 
evít_uid
 = 
evít
;

1096 
evít_åackî_t
::
ôî©‹
 
e
 = 
g_timî_evíts
.
föd
(
evít_uid
);

1097 if–
e
 =
g_timî_evíts
.
íd
() )

1098  
NULL
;

1099  
e
->
£c⁄d
;

1102 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaEvítRec‹d
(
cudaEvít_t
 
evít
, 
cudaSåóm_t
 
°ªam
)

1104 
CUevít_°
 *
e
 = 
gë_evít
(
evít
);

1105 if–!
e
 )  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1106 
CU°ªam_°
 *
s
 = (CU°ªam_° *)
°ªam
;

1107 
°ªam_›î©i⁄
 
›
(
e
,
s
);

1108 
g_°ªam_m™agî
->
push
(
›
);

1109  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1112 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaEvítQuîy
(
cudaEvít_t
 
evít
)

1114 
CUevít_°
 *
e
 = 
gë_evít
(
evít
);

1115 if–
e
 =
NULL
 ) {

1116  
g_œ°_cudaEº‹
 = 
cudaEº‹InvÆidVÆue
;

1117 } if–
e
->
d⁄e
() ) {

1118  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1120  
g_œ°_cudaEº‹
 = 
cudaEº‹NŸRódy
;

1124 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaEvítSynchr⁄ize
(
cudaEvít_t
 
evít
)

1126 
¥ötf
("GPGPU-Sim API: cudaEventSynchronize ** waiting forÉvent\n");

1127 
fÊush
(
°dout
);

1128 
CUevít_°
 *
e
 = (CUevít_°*Ë
evít
;

1129  !
e
->
d⁄e
() )

1131 
¥ötf
("GPGPU-Sim API: cudaEventSynchronize **Évent detected\n");

1132 
fÊush
(
°dout
);

1133  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1136 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaEvítDe°roy
(
cudaEvít_t
 
evít
)

1138 
CUevít_°
 *
e
 = 
gë_evít
(
evít
);

1139 
evít_uid
 = 
e
->
gë_uid
();

1140 
evít_åackî_t
::
ôî©‹
 
≥
 = 
g_timî_evíts
.
föd
(
evít_uid
);

1141 if–
≥
 =
g_timî_evíts
.
íd
() )

1142  
g_œ°_cudaEº‹
 = 
cudaEº‹InvÆidVÆue
;

1143 
g_timî_evíts
.
îa£
(
≥
);

1144  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1148 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaEvítEœp£dTime
(*
ms
, 
cudaEvít_t
 
°¨t
, cudaEvít_à
íd
)

1150 
time_t
 
ñ≠£d_time
;

1151 
CUevít_°
 *
s
 = 
gë_evít
(
°¨t
);

1152 
CUevít_°
 *
e
 = 
gë_evít
(
íd
);

1153 if–
s
==
NULL
 || 
e
==NULL )

1154  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1155 
ñ≠£d_time
 = 
e
->
˛ock
(Ë- 
s
->clock();

1156 *
ms
 = 1000*
ñ≠£d_time
;

1157  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1168 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaThªadExô
()

1170 
exô_simuœti⁄
();

1171  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1174 
__ho°__
 
cudaEº‹_t
 
CUDARTAPI
 
cudaThªadSynchr⁄ize
()

1177 
synchr⁄ize
();

1178  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1181 
CUDARTAPI
 
__cudaSynchr⁄izeThªads
(**, *)

1183  
cudaThªadExô
();

1198 
	ecuobjdumpSe˘i⁄Ty≥
 {

1199 
PTXSECTION
=0,

1200 
ELFSECTION


1204 ˛as†
	ccuobjdumpSe˘i⁄
 {

1205 
public
:

1207 
cuobjdumpSe˘i⁄
() {

1208 
¨ch
 = 0;

1209 
idítifõr
 = "";

1211 
vútuÆ
 ~
cuobjdumpSe˘i⁄
() {}

1212 
gëArch
(Ë{ 
¨ch
;}

1213 
£tArch
(
a
Ë{
¨ch
 =á;}

1214 
°d
::
°rög
 
gëIdítifõr
(Ë{ 
idítifõr
;}

1215 
£tIdítifõr
(
°d
::
°rög
 
i
Ë{
idítifõr
 = i;}

1216 
vútuÆ
 
¥öt
(){
°d
::
cout
 << "cuobjdum∞Se˘i⁄: unknow¿ty≥" << std::
ídl
;}

1217 
¥iv©e
:

1218 
¨ch
;

1219 
°d
::
°rög
 
idítifõr
;

1222 ˛as†
	ccuobjdumpELFSe˘i⁄
 : 
public
 
cuobjdumpSe˘i⁄


1224 
public
:

1225 
cuobjdumpELFSe˘i⁄
() {}

1226 
vútuÆ
 ~
cuobjdumpELFSe˘i⁄
() {

1227 
ñffûíame
 = "";

1228 
ßssfûíame
 = "";

1230 
°d
::
°rög
 
gëELFfûíame
(Ë{ 
ñffûíame
;}

1231 
£tELFfûíame
(
°d
::
°rög
 
f
Ë{
ñffûíame
 = f;}

1232 
°d
::
°rög
 
gëSASSfûíame
(Ë{ 
ßssfûíame
;}

1233 
£tSASSfûíame
(
°d
::
°rög
 
f
Ë{
ßssfûíame
 = f;}

1234 
vútuÆ
 
¥öt
() {

1235 
°d
::
cout
 << "ELF Se˘i⁄:" << std::
ídl
;

1236 
°d
::
cout
 << "¨ch: sm_" << 
gëArch
(Ë<< std::
ídl
;

1237 
°d
::
cout
 << "idítifõr: " << 
gëIdítifõr
(Ë<< std::
ídl
;

1238 
°d
::
cout
 << "ñ‡fûíame: " << 
gëELFfûíame
(Ë<< std::
ídl
;

1239 
°d
::
cout
 << "ßs†fûíame: " << 
gëSASSfûíame
(Ë<< std::
ídl
;

1240 
°d
::
cout
 << std::
ídl
;

1242 
¥iv©e
:

1243 
°d
::
°rög
 
ñffûíame
;

1244 
°d
::
°rög
 
ßssfûíame
;

1247 ˛as†
	ccuobjdumpPTXSe˘i⁄
 : 
public
 
cuobjdumpSe˘i⁄


1249 
public
:

1250 
cuobjdumpPTXSe˘i⁄
(){

1251 
±xfûíame
 = "";

1253 
°d
::
°rög
 
gëPTXfûíame
(Ë{ 
±xfûíame
;}

1254 
£tPTXfûíame
(
°d
::
°rög
 
f
Ë{
±xfûíame
 = f;}

1255 
vútuÆ
 
¥öt
() {

1256 
°d
::
cout
 << "ELF Se˘i⁄:" << std::
ídl
;

1257 
°d
::
cout
 << "¨ch: sm_" << 
gëArch
(Ë<< std::
ídl
;

1258 
°d
::
cout
 << "idítifõr: " << 
gëIdítifõr
(Ë<< std::
ídl
;

1259 
°d
::
cout
 << "±x fûíame: " << 
gëPTXfûíame
(Ë<< std::
ídl
;

1260 
°d
::
cout
 << std::
ídl
;

1262 
¥iv©e
:

1263 
°d
::
°rög
 
±xfûíame
;

1266 
°d
::
li°
<
cuobjdumpSe˘i⁄
*> 
cuobjdumpSe˘i⁄Li°
;

1269 
	$addCuobjdumpSe˘i⁄
(
£˘i⁄ty≥
){

1270 i‡(
£˘i⁄ty≥
)

1271 
cuobjdumpSe˘i⁄Li°
.
	`push_‰⁄t
(
√w
 
	`cuobjdumpELFSe˘i⁄
());

1273 
cuobjdumpSe˘i⁄Li°
.
	`push_‰⁄t
(
√w
 
	`cuobjdumpPTXSe˘i⁄
());

1274 
	`¥ötf
("## AddögÇew se˘i⁄ %s\n", 
£˘i⁄ty≥
==
PTXSECTION
?"PTX":"ELF");

1275 
	}
}

1277 
	$£tCuobjdum∑rch
(c⁄° * 
¨ch
){

1278 
¨chnum
;

1279 
	`ssˇnf
(
¨ch
, "sm_%u", &
¨chnum
);

1280 
	`as£π
 (
¨chnum
 && "cannot have sm_0");

1281 
	`¥ötf
("Addögárch: %s\n", 
¨ch
);

1282 
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
()->
	`£tArch
(
¨chnum
);

1283 
	}
}

1285 
	$£tCuobjdumpidítifõr
(c⁄° * 
idítifõr
){

1286 
	`¥ötf
("Addög idítifõr: %s\n", 
idítifõr
);

1287 
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
()->
	`£tIdítifõr
(
idítifõr
);

1288 
	}
}

1290 
	$£tCuobjdumµtxfûíame
(c⁄° * 
fûíame
){

1291 
	`¥ötf
("AddögÖtx fûíame: %s\n", 
fûíame
);

1292 
cuobjdumpSe˘i⁄
* 
x
 = 
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
();

1293 i‡(
dy«mic_ˇ°
<
cuobjdumpPTXSe˘i⁄
*>(
x
Ë=
NULL
){

1294 
	`as£π
 (0 && "You shouldn't beÅryingÅoáddáÖtxfilenameÅoánÉlf section");

1296 (
dy«mic_ˇ°
<
cuobjdumpPTXSe˘i⁄
*>(
x
))->
	`£tPTXfûíame
(
fûíame
);

1297 
	}
}

1299 
	$£tCuobjdum≥lffûíame
(c⁄° * 
fûíame
){

1300 i‡(
dy«mic_ˇ°
<
cuobjdumpELFSe˘i⁄
*>(
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
()Ë=
NULL
){

1301 
	`as£π
 (0 && "You shouldn't beÅryingÅoáddáÉlffilenameÅoánÖtx section");

1303 (
dy«mic_ˇ°
<
cuobjdumpELFSe˘i⁄
*>(
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
()))->
	`£tELFfûíame
(
fûíame
);

1304 
	}
}

1306 
	$£tCuobjdumpßssfûíame
(c⁄° * 
fûíame
){

1307 i‡(
dy«mic_ˇ°
<
cuobjdumpELFSe˘i⁄
*>(
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
()Ë=
NULL
){

1308 
	`as£π
 (0 && "You shouldn't beÅryingÅoáddá sassfilenameÅoánÖtx section");

1310 (
dy«mic_ˇ°
<
cuobjdumpELFSe˘i⁄
*>(
cuobjdumpSe˘i⁄Li°
.
	`‰⁄t
()))->
	`£tSASSfûíame
(
fûíame
);

1311 
	}
}

1312 "C" 
cuobjdump_∑r£
();

1313 "C" 
FILE
 *
cuobjdump_ö
;

1320 
	$exåa˘_code_usög_cuobjdump
(){

1321 
comm™d
[1000];

1323 
‚ame
[1024];

1324 
	`¢¥ötf
(
‚ame
,1024,"_cuobjdump_complete_output_XXXXXX");

1325 
fd
=
	`mk°emp
(
‚ame
);

1326 
	`˛o£
(
fd
);

1329 
	`¢¥ötf
(
comm™d
,1000,"$CUDA_INSTALL_PATH/bö/cuobjdum∞-±x -ñ‡-ßs†/¥oc/%d/exê> %s",
	`gëpid
(),
‚ame
);

1330 
	`¥ötf
("Ru¬ög cuobjdum∞usög \"%s\"\n", 
comm™d
);

1331 
ªsu…
 = 
	`sy°em
(
comm™d
);

1332 if(
ªsu…
Ë{
	`¥ötf
("ERROR: FaûedÅÿexecuã: %s\n", 
comm™d
); 
	`exô
(1);}

1334 
	`¥ötf
("P¨sög fûê%s\n", 
‚ame
);

1335 
cuobjdump_ö
 = 
	`f›í
(
‚ame
, "r");

1337 
	`cuobjdump_∑r£
();

1338 
	`f˛o£
(
cuobjdump_ö
);

1339 
	`¥ötf
("DoneÖarsing!!!\n");

1340 
	}
}

1343 * 
ªadfûe
 (c⁄° 
°d
::
°rög
 
fûíame
){

1344 
as£π
 (
fûíame
 != "");

1345 
FILE
* 
	gÂ
 = 
f›í
(
fûíame
.
c_°r
(),"r");

1346 i‡(!
	gÂ
) {

1347 
	g°d
::
cout
 << "ERROR: CouldÇŸ o≥¿fûê%†f‹Ñódög\n" << 
fûíame
 << 
°d
::
ídl
;

1348 
as£π
 (0);

1351 
	gfûesize
= 0;

1352 
f£ek
 (
Â
 , 0 , 
SEEK_END
);

1354 
	gfûesize
 = 
·ñl
 (
Â
);

1355 
f£ek
 (
Â
, 0, 
SEEK_SET
);

1357 * 
	gªt
 = (*)
mÆloc
((
fûesize
 +1)* ());

1358 
‰ód
(
ªt
,1,
fûesize
,
Â
);

1359 
	gªt
[
fûesize
]='\0';

1360 
f˛o£
(
Â
);

1361  
	gªt
;

1366 
	g°d
::
li°
<
cuobjdumpSe˘i⁄
*> 
¥u√Se˘i⁄Li°
(
°d
::li°<cuobjdumpSe˘i⁄*> 
cuobjdumpSe˘i⁄Li°
, 
CU˘x_°
 *
c⁄ãxt
) {

1367 
	gf‹˚d_max_ˇ∑bûôy
 = 
c⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
()->
gë_c⁄fig
().
gë_f‹˚d_max_ˇ∑bûôy
();

1368 i‡(
	gc⁄ãxt
->
gë_devi˚
()->
gë_gpgpu
()->
gë_c⁄fig
().
c⁄vît_to_±x∂us
()){

1369 i‡–(
	gf‹˚d_max_ˇ∑bûôy
 == 0) ||

1370 (
f‹˚d_max_ˇ∑bûôy
 >= 20)){

1371 
¥ötf
("GPGPU-Sim: WARNING: Capability >= 20áreÇot supported in PTXPlus\n\tSetting forced_max_capabilityÅo 19\n");

1372 
	gf‹˚d_max_ˇ∑bûôy
 = 19;

1376 
	g°d
::
li°
<
cuobjdumpSe˘i⁄
*> 
¥u√dLi°
;

1377 
	g°d
::
m≠
<
°d
::
°rög
, > 
	gcuobjdumpSe˘i⁄M≠
;

1378  
	g°d
::
li°
<
cuobjdumpSe˘i⁄
*>::
ôî©‹
 
ôî
 = 
cuobjdumpSe˘i⁄Li°
.
begö
();

1379 
	gôî
 !
cuobjdumpSe˘i⁄Li°
.
íd
();

1380 
	gôî
++){

1381 
	gˇ∑bûôy
 = (*
ôî
)->
gëArch
();

1382 if(
	gdy«mic_ˇ°
<
	gcuobjdumpPTXSe˘i⁄
*>(*
	gôî
Ë!
NULL
 &&

1383 (
ˇ∑bûôy
 <
f‹˚d_max_ˇ∑bûôy
 ||

1384 
f‹˚d_max_ˇ∑bûôy
==0)) {

1385 if(
cuobjdumpSe˘i⁄M≠
[(*
ôî
)->
gëIdítifõr
()] < 
ˇ∑bûôy
) cuobjdumpSectionMap[(*iter)->getIdentifier()] = capability;

1389  
	g°d
::
li°
<
cuobjdumpSe˘i⁄
*>::
ôî©‹
 
ôî
 = 
cuobjdumpSe˘i⁄Li°
.
begö
();

1390 
	gôî
 !
cuobjdumpSe˘i⁄Li°
.
íd
();

1391 
	gôî
++){

1392 
	gˇ∑bûôy
 = (*
ôî
)->
gëArch
();

1393 if(
	gˇ∑bûôy
 =
cuobjdumpSe˘i⁄M≠
[(*
ôî
)->
gëIdítifõr
()]){

1394 
¥u√dLi°
.
push_back
(*
ôî
);

1396 
dñëe
 *
	gôî
;

1399  
	g¥u√dLi°
;

1408 
cuobjdumpELFSe˘i⁄
* 
födñf£˘i⁄
(
°d
::
li°
<
cuobjdumpSe˘i⁄
*> 
£˘i⁄li°
, c⁄° std::
°rög
 
idítifõr
){

1410 
°d
::
li°
<
cuobjdumpSe˘i⁄
*>::
ôî©‹
 
ôî
;

1411  
	gôî
 = 
£˘i⁄li°
.
begö
();

1412 
	gôî
 !
£˘i⁄li°
.
íd
();

1413 
	gôî
++

1415 
cuobjdumpELFSe˘i⁄
* 
	gñf£˘i⁄
;

1416 if((
	gñf£˘i⁄
=
dy«mic_ˇ°
<
cuobjdumpELFSe˘i⁄
*>(*
ôî
)Ë!
NULL
){

1417 if(
ñf£˘i⁄
->
gëIdítifõr
(Ë=
idítifõr
)

1418  
ñf£˘i⁄
;

1421 
as£π
(0 && "CouldÇot findÅheÑequired ELF section");

1422  
	gNULL
;

1427 
¥ötSe˘i⁄Li°
(
°d
::
li°
<
cuobjdumpSe˘i⁄
*> 
¶
) {

1428 
°d
::
li°
<
cuobjdumpSe˘i⁄
*>::
ôî©‹
 
ôî
;

1429  
	gôî
 = 
¶
.
begö
();

1430 
	gôî
 !
¶
.
íd
();

1431 
	gôî
++

1433 (*
	gôî
)->
¥öt
();

1437 
	$u£Cuobjdump
() {

1439 
CU˘x_°
 *
c⁄ãxt
 = 
	`GPGPUSim_C⁄ãxt
();

1440 
sour˚_num
=1;

1441 
	`exåa˘_code_usög_cuobjdump
();

1442 
cuobjdumpSe˘i⁄Li°
 = 
	`¥u√Se˘i⁄Li°
(cuobjdumpSe˘i⁄Li°, 
c⁄ãxt
);

1443 
tŸÆ_±x_fûes
 = 
cuobjdumpSe˘i⁄Li°
.
	`size
()/2;

1445  
°d
::
li°
<
cuobjdumpSe˘i⁄
*>::
ôî©‹
 
ôî2
 = 
cuobjdumpSe˘i⁄Li°
.
	`begö
();

1446 
ôî2
 !
cuobjdumpSe˘i⁄Li°
.
	`íd
();

1447 
ôî2
++

1449 i‡(
dy«mic_ˇ°
<
cuobjdumpPTXSe˘i⁄
*>(*
ôî2
Ë!
NULL
)

1451 
cuobjdumpPTXSe˘i⁄
 *
ôî
 = 
dy«mic_ˇ°
<cuobjdumpPTXSe˘i⁄*>(*
ôî2
);

1452 
symbﬁ_èbÀ
 *
symèb
;

1453 *
±xcode
 = 
	`ªadfûe
(
ôî
->
	`gëPTXfûíame
());

1454 if(
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
()->
	`gë_c⁄fig
().
	`c⁄vît_to_±x∂us
() ) {

1455 
cuobjdumpELFSe˘i⁄
* 
ñf£˘i⁄
 = 
	`födñf£˘i⁄
(
cuobjdumpSe˘i⁄Li°
, 
ôî
->
	`gëIdítifõr
());

1456 
	`as£π
 (
ñf£˘i⁄
!
NULL
);

1457 *
±x∂us_°r
 = 
	`gpgpu_±x_sim_c⁄vît_±x_™d_ßss_to_±x∂us
(

1458 
ôî
->
	`gëPTXfûíame
(),

1459 
ñf£˘i⁄
->
	`gëELFfûíame
(),

1460 
ñf£˘i⁄
->
	`gëSASSfûíame
());

1461 
symèb
=
	`gpgpu_±x_sim_lﬂd_±x_‰om_°rög
(
±x∂us_°r
,
sour˚_num
);

1462 
	`¥ötf
("Addög %†wôh cubö h™dÀ %u\n", 
ôî
->
	`gëPTXfûíame
().
	`c_°r
(), 
sour˚_num
);

1463 
c⁄ãxt
->
	`add_bö¨y
(
symèb
, 
sour˚_num
);

1464 
	`gpgpu_±xöfo_lﬂd_‰om_°rög
–
±xcode
,
tŸÆ_±x_fûes
-
sour˚_num
);

1465 
dñëe
[] 
±x∂us_°r
;

1467 
symèb
=
	`gpgpu_±x_sim_lﬂd_±x_‰om_°rög
(
±xcode
, 
sour˚_num
);

1468 
	`¥ötf
("Addög %†wôh cubö h™dÀ %u\n", 
ôî
->
	`gëPTXfûíame
().
	`c_°r
(), 
sour˚_num
);

1469 
c⁄ãxt
->
	`add_bö¨y
(
symèb
,
sour˚_num
);

1470 
	`gpgpu_±xöfo_lﬂd_‰om_°rög
–
±xcode
, 
tŸÆ_±x_fûes
-
sour˚_num
);

1472 
sour˚_num
++;

1474 
	`lﬂd_°©ic_globÆs
(
symèb
,
STATIC_ALLOC_LIMIT
,0xFFFFFFFF,
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
());

1475 
	`lﬂd_c⁄°™ts
(
symèb
,
STATIC_ALLOC_LIMIT
,
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
());

1478 if(!
	`kìp_öãrmedüã_fûes
()){

1479 
rm_comm™dlöe
[1024];

1481 
	`¢¥ötf
(
rm_comm™dlöe
,1024,"rm -f _cuobjdump_*");

1483 
	`¥ötf
("GPGPU-Sim PTX:ÑemovögÅemp‹¨y fûe†usög \"%s\"\n", 
rm_comm™dlöe
);

1484 
rm_ªsu…
 = 
	`sy°em
(
rm_comm™dlöe
);

1485 if–
rm_ªsu…
 != 0 ) {

1486 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** whûêªmovögÅemp‹¨y fûe†%d\n", 
rm_ªsu…
);

1487 
	`exô
(1);

1491 
	}
}

1493 ** 
CUDARTAPI
 
	$__cudaRegi°îF©Bö¨y
–*
ÁtCubö
 )

1495 #i‡(
CUDART_VERSION
 < 2010)

1496 
	`¥ötf
("GPGPU-Sim PTX: ERROR **Åhis version of GPGPU-SimÑequires CUDA 2.1 or higher\n");

1497 
	`exô
(1);

1499 
CU˘x_°
 *
c⁄ãxt
 = 
	`GPGPUSim_C⁄ãxt
();

1500 
√xt_Át_bö_h™dÀ
 = 1;

1501 if(
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
()->
	`gë_c⁄fig
().
	`u£_cuobjdump
()) {

1502 
Át_cubö_h™dÀ
 = 
√xt_Át_bö_h™dÀ
;

1503 
√xt_Át_bö_h™dÀ
++;

1504 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegi°îF©Bö¨y, f©_cubö_h™dÀ = %u\n", 
Át_cubö_h™dÀ
);

1509 
	`as£π
(
Át_cubö_h™dÀ
 >= 1);

1510 if(
Át_cubö_h™dÀ
 == 1)

1511 
	`u£Cuobjdump
();

1513  (**)
Át_cubö_h™dÀ
;

1515 
sour˚_num
=1;

1516 
Át_cubö_h™dÀ
 = 
√xt_Át_bö_h™dÀ
++;

1517 
__cudaF©CudaBö¨y
 *
öfo
 = (__cudaF©CudaBö¨y *)
ÁtCubö
;

1518 
	`as£π
–
öfo
->
vîsi⁄
 >= 3 );

1519 
num_±x_vîsi⁄s
=0;

1520 
max_ˇ∑bûôy
=0;

1521 
£À˘ed_ˇ∑bûôy
=0;

1522 
boﬁ
 
found
=
Ál£
;

1523 
f‹˚d_max_ˇ∑bûôy
 = 
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
()->
	`gë_c⁄fig
().
	`gë_f‹˚d_max_ˇ∑bûôy
();

1524 i‡(!
öfo
->
±x
){

1525 
	`¥ötf
("ERROR: Cannot findÖtx code in cubin file\n"

1527 
	`exô
(1);

1529  
öfo
->
±x
[
num_±x_vîsi⁄s
].
gpuProfûeName
 !
NULL
 ) {

1530 
ˇ∑bûôy
=0;

1531 
	`ssˇnf
(
öfo
->
±x
[
num_±x_vîsi⁄s
].
gpuProfûeName
,"compuã_%u",&
ˇ∑bûôy
);

1532 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegi°îF©Bö¨y found PTX vîsi⁄†f‹ '%s', ", 
öfo
->
idít
);

1533 
	`¥ötf
("ˇ∑bûôy = %s\n", 
öfo
->
±x
[
num_±x_vîsi⁄s
].
gpuProfûeName
 );

1534 if–
f‹˚d_max_ˇ∑bûôy
 ) {

1535 if–
ˇ∑bûôy
 > 
max_ˇ∑bûôy
 && c≠abûôy <
f‹˚d_max_ˇ∑bûôy
 ) {

1536 
found
 = 
åue
;

1537 
max_ˇ∑bûôy
=
ˇ∑bûôy
;

1538 
£À˘ed_ˇ∑bûôy
 = 
num_±x_vîsi⁄s
;

1541 if–
ˇ∑bûôy
 > 
max_ˇ∑bûôy
 ) {

1542 
found
 = 
åue
;

1543 
max_ˇ∑bûôy
=
ˇ∑bûôy
;

1544 
£À˘ed_ˇ∑bûôy
 = 
num_±x_vîsi⁄s
;

1547 
num_±x_vîsi⁄s
++;

1549 if–
found
 ) {

1550 
	`¥ötf
("GPGPU-Sim PTX: Loading PTX for %s, capability = %s\n",

1551 
öfo
->
idít
, info->
±x
[
£À˘ed_ˇ∑bûôy
].
gpuProfûeName
 );

1552 
symbﬁ_èbÀ
 *
symèb
;

1553 c⁄° *
±x
 = 
öfo
->±x[
£À˘ed_ˇ∑bûôy
].ptx;

1554 if(
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
()->
	`gë_c⁄fig
().
	`c⁄vît_to_±x∂us
() ) {

1555 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** PTXPlus is only supportedÅhrough cuobjdump\n"

1557 
	`exô
(1);

1559 
symèb
=
	`gpgpu_±x_sim_lﬂd_±x_‰om_°rög
(
±x
,
sour˚_num
);

1560 
c⁄ãxt
->
	`add_bö¨y
(
symèb
,
Át_cubö_h™dÀ
);

1561 
	`gpgpu_±xöfo_lﬂd_‰om_°rög
–
±x
, 
sour˚_num
 );

1563 
sour˚_num
++;

1564 
	`lﬂd_°©ic_globÆs
(
symèb
,
STATIC_ALLOC_LIMIT
,0xFFFFFFFF,
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
());

1565 
	`lﬂd_c⁄°™ts
(
symèb
,
STATIC_ALLOC_LIMIT
,
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
());

1567 
	`¥ötf
("GPGPU-Sim PTX: warning -- didÇot findánáppropriate PTX in cubin\n");

1569  (**)
Át_cubö_h™dÀ
;

1571 
	}
}

1573 
	$__cudaUƒegi°îF©Bö¨y
(**
ÁtCuböH™dÀ
)

1576 
	}
}

1578 
cudaEº‹_t
 
	$cudaDevi˚Re£t
 ( ) {

1580  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1581 
	}
}

1582 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaDevi˚Synchr⁄ize
(){

1584  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1585 
	}
}

1588 
CUDARTAPI
 
	$__cudaRegi°îFun˘i⁄
(

1589 **
ÁtCuböH™dÀ
,

1590 c⁄° *
ho°Fun
,

1591 *
devi˚Fun
,

1592 c⁄° *
devi˚Name
,

1593 
thªad_limô
,

1594 
uöt3
 *
tid
,

1595 
uöt3
 *
bid
,

1596 
dim3
 *
bDim
,

1597 
dim3
 *
gDim


1600 
CU˘x_°
 *
c⁄ãxt
 = 
	`GPGPUSim_C⁄ãxt
();

1601 
Át_cubö_h™dÀ
 = ()()
ÁtCuböH™dÀ
;

1602 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegisterFunction %s : hostFun 0x%p, fat_cubin_handle = %u\n",

1603 
devi˚Fun
, 
ho°Fun
, 
Át_cubö_h™dÀ
);

1604 
c⁄ãxt
->
	`ªgi°î_fun˘i⁄
–
Át_cubö_h™dÀ
, 
ho°Fun
, 
devi˚Fun
 );

1605 
	}
}

1607 
	$__cudaRegi°îV¨
(

1608 **
ÁtCuböH™dÀ
,

1609 *
ho°V¨
,

1610 *
devi˚Addªss
,

1611 c⁄° *
devi˚Name
,

1612 
ext
,

1613 
size
,

1614 
c⁄°™t
,

1615 
globÆ
 )

1617 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegi°îV¨: ho°V¨ = %p; devi˚Addªs†%s; devi˚Namê%s\n", 
ho°V¨
, 
devi˚Addªss
, 
devi˚Name
);

1618 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegi°îV¨: Regi°îög c⁄° mem‹y s∑˚ o‡%d byãs\n", 
size
);

1619 
	`fÊush
(
°dout
);

1620 i‡–
c⁄°™t
 && !
globÆ
 && !
ext
 ) {

1621 
	`gpgpu_±x_sim_ªgi°î_c⁄°_v¨übÀ
(
ho°V¨
,
devi˚Name
,
size
);

1622 } i‡–!
c⁄°™t
 && !
globÆ
 && !
ext
 ) {

1623 
	`gpgpu_±x_sim_ªgi°î_globÆ_v¨übÀ
(
ho°V¨
,
devi˚Name
,
size
);

1624 } 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1625 
	}
}

1628 
	$__cudaRegi°îSh¨ed
(

1629 **
ÁtCuböH™dÀ
,

1630 **
devi˚På


1634 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegisterShared\n" );

1635 
	}
}

1637 
CUDARTAPI
 
	$__cudaRegi°îSh¨edV¨
(

1638 **
ÁtCuböH™dÀ
,

1639 **
devi˚På
,

1640 
size_t
 
size
,

1641 
size_t
 
Æignmít
,

1642 
°‹age


1646 
	`¥ötf
("GPGPU-Sim PTX: __cudaRegisterSharedVar\n" );

1647 
	}
}

1649 
	$__cudaRegi°îTextuª
(

1650 **
ÁtCuböH™dÀ
,

1651 c⁄° 
ãxtuªRe„ªn˚
 *
ho°V¨
,

1652 c⁄° **
devi˚Addªss
,

1653 c⁄° *
devi˚Name
,

1654 
dim
,

1655 
n‹m
,

1656 
ext


1659 
CU˘x_°
 *
c⁄ãxt
 = 
	`GPGPUSim_C⁄ãxt
();

1660 
gpgpu_t
 *
gpu
 = 
c⁄ãxt
->
	`gë_devi˚
()->
	`gë_gpgpu
();

1661 
	`¥ötf
("GPGPU-Sim PTX: in __cudaRegisterTexture:\n");

1662 
gpu
->
	`gpgpu_±x_sim_bödNameToTextuª
(
devi˚Name
, 
ho°V¨
);

1663 
	`¥ötf
("GPGPU-Sim PTX: i¡ dim = %d\n", 
dim
);

1664 
	`¥ötf
("GPGPU-Sim PTX: i¡Ç‹m = %d\n", 
n‹m
);

1665 
	`¥ötf
("GPGPU-Sim PTX: i¡Éxà%d\n", 
ext
);

1666 
	`¥ötf
("GPGPU-Sim PTX: Executi⁄ w¨nög: NŸ föished im∂emítög \"%s\"\n", 
__my_func__
 );

1667 
	}
}

1669 #i‚de‡
OPENGL_SUPPORT


1670 
	tGLuöt
;

1673 
cudaEº‹_t
 
	$cudaGLRegi°îBuf„rObje˘
(
GLuöt
 
buf„rObj
)

1675 
	`¥ötf
("GPGPU-Sim PTX: Executi⁄ w¨nög: ign‹ög cÆ»tÿ\"%s\"\n", 
__my_func__
 );

1676  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1677 
	}
}

1679 
	sglbm≠_íåy
 {

1680 
GLuöt
 
	gm_buf„rObj
;

1681 *
	gm_devPå
;

1682 
size_t
 
	gm_size
;

1683 
glbm≠_íåy
 *
	gm_√xt
;

1685 
glbm≠_íåy
 
	tglbm≠_íåy_t
;

1687 
glbm≠_íåy_t
* 
	gg_glbm≠
 = 
NULL
;

1689 
cudaEº‹_t
 
	$cudaGLM≠Buf„rObje˘
(** 
devPå
, 
GLuöt
 
buf„rObj
)

1691 #ifde‡
OPENGL_SUPPORT


1692 
GLöt
 
buf„r_size
=0;

1693 
CU˘x_°
* 
˘x
 = 
	`GPGPUSim_C⁄ãxt
();

1695 
glbm≠_íåy_t
 *
p
 = 
g_glbm≠
;

1696  
p
 &&Ö->
m_buf„rObj
 !
buf„rObj
 )

1697 
p
 =Ö->
m_√xt
;

1698 i‡–
p
 =
NULL
 ) {

1699 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
,
buf„rObj
);

1700 
	`glGëBuf„rP¨amëîiv
(
GL_ARRAY_BUFFER
,
GL_BUFFER_SIZE
,&
buf„r_size
);

1701 
	`as£π
–
buf„r_size
 != 0 );

1702 *
devPå
 = 
˘x
->
	`gë_devi˚
()->
	`gë_gpgpu
()->
	`gpu_mÆloc
(
buf„r_size
);

1705 
glbm≠_íåy_t
 *
n
 = (glbm≠_íåy_à*Ë
	`ˇŒoc
(1,(glbmap_entry_t));

1706 
n
->
m_√xt
 = 
g_glbm≠
;

1707 
g_glbm≠
 = 
n
;

1710 
n
->
m_buf„rObj
 = 
buf„rObj
;

1711 
n
->
m_devPå
 = *
devPå
;

1712 
n
->
m_size
 = 
buf„r_size
;

1714 
p
 = 
n
;

1716 
buf„r_size
 = 
p
->
m_size
;

1717 *
devPå
 = 
p
->
m_devPå
;

1720 i‡–*
devPå
 ) {

1721 *
d©a
 = (*Ë
	`ˇŒoc
(
p
->
m_size
,1);

1722 
	`glGëBuf„rSubD©a
(
GL_ARRAY_BUFFER
,0,
buf„r_size
,
d©a
);

1723 
	`mem˝y_to_gpu
–(
size_t
Ë*
devPå
, 
d©a
, 
buf„r_size
 );

1724 
	`‰ì
(
d©a
);

1725 
	`¥ötf
("GPGPU-Sim PTX: cudaGLM≠Buf„rObje˘ %zu byã†°¨tögáà0x%Œx..\n", (
size_t
)
buf„r_size
,

1726 (Ë*
devPå
);

1727  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1729  
g_œ°_cudaEº‹
 = 
cudaEº‹Mem‹yAŒoˇti⁄
;

1732  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1734 
	`fÊush
(
°dout
);

1735 
	`fÊush
(
°dîr
);

1736 
	`¥ötf
("GPGPU-Sim PTX: GPGPU-Sim support for OpenGL integration disabled --Éxiting\n");

1737 
	`fÊush
(
°dout
);

1738 
	`exô
(50);

1740 
	}
}

1742 
cudaEº‹_t
 
	$cudaGLUnm≠Buf„rObje˘
(
GLuöt
 
buf„rObj
)

1744 #ifde‡
OPENGL_SUPPORT


1745 
glbm≠_íåy_t
 *
p
 = 
g_glbm≠
;

1746  
p
 &&Ö->
m_buf„rObj
 !
buf„rObj
 )

1747 
p
 =Ö->
m_√xt
;

1748 i‡–
p
 =
NULL
 )

1749  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1751 *
d©a
 = (*Ë
	`ˇŒoc
(
p
->
m_size
,1);

1752 
	`mem˝y_‰om_gpu
–
d©a
,(
size_t
)
p
->
m_devPå
,p->
m_size
 );

1753 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
,0,
p
->
m_size
,
d©a
);

1754 
	`‰ì
(
d©a
);

1756  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1758 
	`fÊush
(
°dout
);

1759 
	`fÊush
(
°dîr
);

1760 
	`¥ötf
("GPGPU-Sim PTX: support for OpenGL integration disabled --Éxiting\n");

1761 
	`fÊush
(
°dout
);

1762 
	`exô
(50);

1764 
	}
}

1766 
cudaEº‹_t
 
	$cudaGLUƒegi°îBuf„rObje˘
(
GLuöt
 
buf„rObj
)

1768 
	`¥ötf
("GPGPU-Sim PTX: Executi⁄ w¨nög: ign‹ög cÆ»tÿ\"%s\"\n", 
__my_func__
 );

1769  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1770 
	}
}

1772 #i‡(
CUDART_VERSION
 >= 2010)

1774 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaHo°AŒoc
(**
pHo°
, 
size_t
 
byãs
, 
Êags
)

1776 *
pHo°
 = 
	`mÆloc
(
byãs
);

1777 if–*
pHo°
 )

1778  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1780  
g_œ°_cudaEº‹
 = 
cudaEº‹Mem‹yAŒoˇti⁄
;

1781 
	}
}

1783 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaHo°GëDevi˚Poöãr
(**
pDevi˚
, *
pHo°
, 
Êags
)

1785 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1786  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1787 
	}
}

1789 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaSëVÆidDevi˚s
(*
devi˚_¨r
, 
Àn
)

1791 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1792  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1793 
	}
}

1795 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaSëDevi˚Fœgs
–
Êags
 )

1797 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1798  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1799 
	}
}

1801 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaFuncGëAâribuãs
(
cudaFuncAâribuãs
 *
©å
, c⁄° *
ho°Fun
 )

1803 
CU˘x_°
 *
c⁄ãxt
 = 
	`GPGPUSim_C⁄ãxt
();

1804 
fun˘i⁄_öfo
 *
íåy
 = 
c⁄ãxt
->
	`gë_kî√l
(
ho°Fun
);

1805 if–
íåy
 ) {

1806 c⁄° 
gpgpu_±x_sim_kî√l_öfo
 *
köfo
 = 
íåy
->
	`gë_kî√l_öfo
();

1807 
©å
->
sh¨edSizeByãs
 = 
köfo
->
smem
;

1808 
©å
->
c⁄°SizeByãs
 = 
köfo
->
cmem
;

1809 
©å
->
loˇlSizeByãs
 = 
köfo
->
lmem
;

1810 
©å
->
numRegs
 = 
köfo
->
ªgs
;

1811 
©å
->
maxThªadsPîBlock
 = 0;

1812 #i‡
CUDART_VERSION
 >= 3000

1813 
©å
->
±xVîsi⁄
 = 
köfo
->
±x_vîsi⁄
;

1814 
©å
->
bö¨yVîsi⁄
 = 
köfo
->
sm_èrgë
;

1817  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1818 
	}
}

1820 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaEvítCª©eWôhFœgs
(
cudaEvít_t
 *
evít
, 
Êags
)

1822 
CUevít_°
 *
e
 = 
√w
 
	`CUevít_°
(
Êags
==
cudaEvítBlockögSync
);

1823 
g_timî_evíts
[
e
->
	`gë_uid
()] =É;

1824 #i‡
CUDART_VERSION
 >= 3000

1825 *
evít
 = 
e
;

1827 *
evít
 = 
e
->
	`gë_uid
();

1829  
g_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1830 
	}
}

1832 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaDrivîGëVîsi⁄
(*
drivîVîsi⁄
)

1834 *
drivîVîsi⁄
 = 
CUDART_VERSION
;

1835  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1836 
	}
}

1838 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaRu¡imeGëVîsi⁄
(*
ru¡imeVîsi⁄
)

1840 *
ru¡imeVîsi⁄
 = 
CUDART_VERSION
;

1841  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1842 
	}
}

1846 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaGLSëGLDevi˚
(
devi˚
)

1848 
	`¥ötf
("GPGPU-Sim PTX: Executi⁄ w¨nög: ign‹ög cÆ»tÿ\"%s\"\n", 
__my_func__
 );

1849  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1850 
	}
}

1852 * 
	tHGPUNV
;

1854 
cudaEº‹_t
 
CUDARTAPI
 
	$cudaWGLGëDevi˚
(*
devi˚
, 
HGPUNV
 
hGpu
)

1856 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1857  
g_œ°_cudaEº‹
 = 
cudaEº‹Unknown
;

1858 
	}
}

1860 
CUDARTAPI
 
	$__cudaMuãxO≥øti⁄
(
lock
)

1862 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1863 
	}
}

1865 
CUDARTAPI
 
	$__cudaTextuªFëch
(c⁄° *
ãx
, *
ödex
, 
öãgî
, *
vÆ
)

1867 
	`cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1868 
	}
}

1872 
«me•a˚
 
	gcuda_m©h
 {

1874 
CUDARTAPI
 
__cudaMuãxO≥øti⁄
(
lock
)

1876 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1879 
CUDARTAPI
 
__cudaTextuªFëch
(c⁄° *
ãx
, *
ödex
, 
öãgî
, *
vÆ
)

1881 
cuda_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1884 
CUDARTAPI
 
__cudaSynchr⁄izeThªads
(**, *)

1887  
	gg_œ°_cudaEº‹
 = 
cudaSuc˚ss
;

1894 "C" 
±x_∑r£
();

1895 "C" 
±x__sˇn_°rög
(const *);

1896 "C" 
FILE
 *
±x_ö
;

1898 "C" 
±xöfo_∑r£
();

1899 "C" 
±xöfo_debug
;

1900 "C" 
FILE
 *
±xöfo_ö
;

1904 
	$lﬂd_°©ic_globÆs
–
symbﬁ_èbÀ
 *
symèb
, 
mö_gaddr
, 
max_gaddr
, 
gpgpu_t
 *
gpu
 )

1906 
	`¥ötf
( "GPGPU-Sim PTX:Üoading globals withÉxplicit initializers... \n" );

1907 
	`fÊush
(
°dout
);

1908 
ng_byãs
=0;

1909 
symbﬁ_èbÀ
::
ôî©‹
 
g
=
symèb
->
	`globÆ_ôî©‹_begö
();

1911  ; 
g
!=
symèb
->
	`globÆ_ôî©‹_íd
(); g++) {

1912 
symbﬁ
 *
globÆ
 = *
g
;

1913 i‡–
globÆ
->
	`has_öôülizî
() ) {

1914 
	`¥ötf
–"GPGPU-Sim PTX: inôülizög '%s' ... ", 
globÆ
->
	`«me
().
	`c_°r
() );

1915 
addr
=
globÆ
->
	`gë_addªss
();

1916 c⁄° 
ty≥_öfo
 *
ty≥
 = 
globÆ
->
	`ty≥
();

1917 
ty≥_öfo_key
 
ti
=
ty≥
->
	`gë_key
();

1918 
size_t
 
size
;

1919 
t
;

1920 
ti
.
	`ty≥_decode
(
size
,
t
);

1921 
nbyãs
 = 
size
/8;

1922 
off£t
=0;

1923 
°d
::
li°
<
›î™d_öfo
> 
öô_li°
 = 
globÆ
->
	`gë_öôülizî
();

1924  
°d
::
li°
<
›î™d_öfo
>::
ôî©‹
 
i
=
öô_li°
.
	`begö
(); i!=öô_li°.
	`íd
(); i++ ) {

1925 
›î™d_öfo
 
›
 = *
i
;

1926 
±x_ªg_t
 
vÆue
 = 
›
.
	`gë_lôîÆ_vÆue
();

1927 
	`as£π
–(
addr
+
off£t
+
nbyãs
Ë< 
mö_gaddr
 );

1928 
gpu
->
	`gë_globÆ_mem‹y
()->
	`wrôe
(
addr
+
off£t
,
nbyãs
,&
vÆue
,
NULL
,NULL);

1929 
off£t
+=
nbyãs
;

1930 
ng_byãs
+=
nbyãs
;

1932 
	`¥ötf
(" wrŸê%u byãs\n", 
off£t
 );

1935 
	`¥ötf
–"GPGPU-Sim PTX: föishedÜﬂdög globÆ†(%u byã†tŸÆ).\n", 
ng_byãs
 );

1936 
	`fÊush
(
°dout
);

1937  
ng_byãs
;

1938 
	}
}

1940 
	$lﬂd_c⁄°™ts
–
symbﬁ_èbÀ
 *
symèb
, 
addr_t
 
mö_gaddr
, 
gpgpu_t
 *
gpu
 )

1942 
	`¥ötf
( "GPGPU-Sim PTX:Üoading constants withÉxplicit initializers... " );

1943 
	`fÊush
(
°dout
);

1944 
nc_byãs
 = 0;

1945 
symbﬁ_èbÀ
::
ôî©‹
 
g
=
symèb
->
	`c⁄°_ôî©‹_begö
();

1947  ; 
g
!=
symèb
->
	`c⁄°_ôî©‹_íd
(); g++) {

1948 
symbﬁ
 *
c⁄°™t
 = *
g
;

1949 i‡–
c⁄°™t
->
	`is_c⁄°
(Ë&& c⁄°™t->
	`has_öôülizî
() ) {

1952 
basic_ty≥
;

1953 
size_t
 
num_bôs
;

1954 
c⁄°™t
->
	`ty≥
()->
	`gë_key
().
	`ty≥_decode
(
num_bôs
,
basic_ty≥
);

1956 
°d
::
li°
<
›î™d_öfo
> 
öô_li°
 = 
c⁄°™t
->
	`gë_öôülizî
();

1957 
nbyãs_wrôãn
 = 0;

1958  
°d
::
li°
<
›î™d_öfo
>::
ôî©‹
 
i
=
öô_li°
.
	`begö
(); i!=öô_li°.
	`íd
(); i++ ) {

1959 
›î™d_öfo
 
›
 = *
i
;

1960 
±x_ªg_t
 
vÆue
 = 
›
.
	`gë_lôîÆ_vÆue
();

1961 
nbyãs
 = 
num_bôs
/8;

1962  
›
.
	`gë_ty≥
() ) {

1963 
öt_t
: 
	`as£π
(
nbyãs
 >= 1); ;

1964 
Êﬂt_›_t
: 
	`as£π
(
nbyãs
 == 4); ;

1965 
doubÀ_›_t
: 
	`as£π
(
nbyãs
 >= 4); ;

1967 
	`ab‹t
();

1969 
addr
=
c⁄°™t
->
	`gë_addªss
(Ë+ 
nbyãs_wrôãn
;

1970 
	`as£π
–
addr
+
nbyãs
 < 
mö_gaddr
 );

1972 
gpu
->
	`gë_globÆ_mem‹y
()->
	`wrôe
(
addr
,
nbyãs
,&
vÆue
,
NULL
,NULL);

1973 
nc_byãs
+=
nbyãs
;

1974 
nbyãs_wrôãn
 +
nbyãs
;

1978 
	`¥ötf
( " done.\n");

1979 
	`fÊush
(
°dout
);

1980  
nc_byãs
;

1981 
	}
}

1983 
kî√l_öfo_t
 *
	$gpgpu_cuda_±x_sim_öô_grid
–c⁄° *
ho°Fun
,

1984 
gpgpu_±x_sim_¨g_li°_t
 
¨gs
,

1985 
dim3
 
gridDim
,

1986 
dim3
 
blockDim
,

1987 
CU˘x_°
* 
c⁄ãxt
 )

1989 
fun˘i⁄_öfo
 *
íåy
 = 
c⁄ãxt
->
	`gë_kî√l
(
ho°Fun
);

1990 
kî√l_öfo_t
 *
ªsu…
 = 
√w
 
	`kî√l_öfo_t
(
gridDim
,
blockDim
,
íåy
);

1991 if–
íåy
 =
NULL
 ) {

1992 
	`¥ötf
("GPGPU-Sim PTX: ERRORÜaunchög kî√»--ÇÿPTX im∂emíèti⁄ found f‹ %p\n", 
ho°Fun
);

1993 
	`ab‹t
();

1995 
¨gcou¡
=
¨gs
.
	`size
();

1996 
¨gn
=1;

1997  
gpgpu_±x_sim_¨g_li°_t
::
ôî©‹
 
a
 = 
¨gs
.
	`begö
();á !¨gs.
	`íd
();á++ ) {

1998 
íåy
->
	`add_∑øm_d©a
(
¨gcou¡
-
¨gn
,&(*
a
));

1999 
¨gn
++;

2002 
íåy
->
	`föÆize
(
ªsu…
->
	`gë_∑øm_mem‹y
());

2003 
g_±x_kî√l_cou¡
++;

2004 
	`fÊush
(
°dout
);

2006  
ªsu…
;

2007 
	}
}

	@libcuda/cuobjdump.l

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~"cuobjdump_∑r£r.h
"

35 
	#YY_NEVER_INTERACTIVE
 1

	)

36 
	#YY_NO_INPUT


	)

37 
	#YY_NO_TOP_STATE


	)

39 
	#YYDEBUG
 1

	)

41 
	#yylvÆ
 
cuobjdump_lvÆ


	)

43 
cuobjdump_îr‹
(const *);

46 %
›ti⁄
 
°ack


47 %
›ti⁄
 
noyywøp


48 %
›ti⁄
 
yylöío


49 %
›ti⁄
 
nou≈ut


52 %
s
 
±xcode


53 %
s
 
ßsscode


54 %
s
 
ñfcode


55 %
s
 
hódî


56 %
s
 
ídhódî


58 
Æpha
 [
a
-
zA
-
Z
]

59 
numîic
 [0-9]

60 
whôe•a˚
 [ \
t
]

61 
√wlöe
 [\
n
]

62 
nŸ√wlöe
 [^\
n
]

63 
√wlöes
 {
√wlöe
}+

64 %% /* 
	$yyÀx
 */

67 "±xasO±i⁄s"{
nŸ√wlöe
}*{
√wlöe
}

68 [1-9]{
numîic
}* 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
DECIMAL
;

71 "F©böÖtx code:"{
√wlöe
} {

72 
	`yy_push_°©e
(
±xcode
);

73 
	`yy_push_°©e
(
hódî
);

74 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

75  
PTXHEADER
;

77 "F©böÉl‡code:"{
√wlöe
} {

78 
	`yy_push_°©e
(
ñfcode
);

79 
	`yy_push_°©e
(
hódî
);

80 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

81  
ELFHEADER
;

84 <
±xcode
>{
nŸ√wlöe
}*{
√wlöe
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
PTXLINE
;

87 <
ñfcode
>{
whôe•a˚
}*"codêf‹ sm_"{
numîic
}+{
√wlöe
} {

88 
	`BEGIN
(
ßsscode
);

89 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);

90  
SASSLINE
;

92 <
ñfcode
>{
nŸ√wlöe
}*{
√wlöe
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
ELFLINE
;

95 <
ßsscode
>{
nŸ√wlöe
}*{
√wlöe
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
SASSLINE
;

98 <
hódî
>[[:
Ænum
:]
_
]+ 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IDENTIFIER
;

99 <
hódî
>"================"  
H_SEPARATOR
;

100 <
hódî
>"¨ch = "  
H_ARCH
;

101 <
hódî
>"codêvîsi⁄ = "  
H_CODEVERSION
;

102 <
hódî
>\[{
numîic
},{numîic}\]  
CODEVERSION
;

103 <
hódî
>"¥odu˚∏"  
H_PRODUCER
;

104 <
hódî
>"ho° = "  
H_HOST
;

105 <
hódî
>"compûe_sizê"  
H_COMPILESIZE
;

106 <
hódî
>"idítifõ∏" 
	`BEGIN
(
ídhódî
);  
H_IDENTIFIER
;

107 <
hódî
>"ha†debug info"{
√wlöe
}

110 <
ídhódî
>[[:
Ænum
:]
_
\.]+{
√wlöe
} 
yylvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
); 
	`yy_p›_°©e
();  
FILENAME
;

113 {
√wlöe
}  
NEWLINE
;

116 <<
EOF
>>  0;

119 . 
	`cuobjdump_îr‹
("InvalidÅoken");

121 
	}
%%

122 
	$cuobjdump_îr‹
(c⁄° * 
mesßge
)

124 
	`¥ötf
(" ");Örötf(
mesßge
);Örötf("Çó∏\"");Örötf(
yyãxt
);Örintf("\"");

125 
	`¥ötf
(" onÜine ");

126 
löe
[5]; 
	`•rötf
÷öe, "%i", 
yylöío
); 
	`¥ötf
(line);

127 
	`¥ötf
("\n");

128 
	}
}

	@libcuda/cuobjdump.y

30 
	~<°dio.h
>

32 
yyÀx
();

33 
yyîr‹
(const *);

34 
addCuobjdumpSe˘i⁄
(
£˘i⁄ty≥
);

35 
£tCuobjdum∑rch
(c⁄° * 
¨ch
);

36 
£tCuobjdumpidítifõr
(c⁄° * 
idítifõr
);

37 
£tCuobjdumµtxfûíame
(c⁄° * 
fûíame
);

38 
£tCuobjdum≥lffûíame
(c⁄° * 
fûíame
);

39 
£tCuobjdumpßssfûíame
(c⁄° * 
fûíame
);

40 
	gñf£rül
 = 1;

41 
	g±x£rül
 = 1;

42 
FILE
 *
	g±xfûe
;

43 
FILE
 *
	gñffûe
;

44 
FILE
 *
	gßssfûe
;

45 
	gfûíame
 [1024];

48 * 
°rög_vÆue
;

50 %
tokí
 <
°rög_vÆue
> 
H_SEPARATOR
 
H_ARCH
 
H_CODEVERSION
 
H_PRODUCER
 
H_HOST
 
H_COMPILESIZE
 
H_IDENTIFIER


51 %
tokí
 <
°rög_vÆue
> 
CODEVERSION


52 %
tokí
 <
°rög_vÆue
> 
STRING


53 %
tokí
 <
°rög_vÆue
> 
FILENAME


54 %
tokí
 <
°rög_vÆue
> 
DECIMAL


55 %
tokí
 <
°rög_vÆue
> 
PTXHEADER
 
ELFHEADER


56 %
tokí
 <
°rög_vÆue
> 
PTXLINE


57 %
tokí
 <
°rög_vÆue
> 
ELFLINE


58 %
tokí
 <
°rög_vÆue
> 
SASSLINE


59 %
tokí
 <
°rög_vÆue
> 
IDENTIFIER


60 %
tokí
 <
°rög_vÆue
> 
NEWLINE


62 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

64 
¥ogøm
 : 
em±ylöes
 
£˘i⁄


65 | 
¥ogøm
 
£˘i⁄
;

67 
em±ylöes
 :Ém±ylöe†
NEWLINE


70 
£˘i⁄
 : 
PTXHEADER
 {

71 
	`addCuobjdumpSe˘i⁄
(0);

72 
	`¢¥ötf
(
fûíame
, 1024, "_cuobjdump_%d.±x", 
±x£rül
++);

73 
±xfûe
 = 
	`f›í
(
fûíame
, "w");

74 
	`£tCuobjdumµtxfûíame
(
fûíame
);

75 } 
hódîöfo
 
±xcode
 {

76 
	`f˛o£
(
±xfûe
);

78 | 
ELFHEADER
 {

79 
	`addCuobjdumpSe˘i⁄
(1);

80 
	`¢¥ötf
(
fûíame
, 1024, "_cuobjdump_%d.ñf", 
ñf£rül
);

81 
ñffûe
 = 
	`f›í
(
fûíame
, "w");

82 
	`£tCuobjdum≥lffûíame
(
fûíame
);

83 } 
hódîöfo
 
ñfcode
 {

84 
	`f˛o£
(
ñffûe
);

85 
	`¢¥ötf
(
fûíame
, 1024, "_cuobjdump_%d.ßss", 
ñf£rül
++);

86 
ßssfûe
 = 
	`f›í
(
fûíame
, "w");

87 
	`£tCuobjdumpßssfûíame
(
fûíame
);

88 } 
ßsscode
 {

89 
	`f˛o£
(
ßssfûe
);

92 
hódîöfo
 : 
H_SEPARATOR
 
NEWLINE


93 
H_ARCH
 
IDENTIFIER
 
NEWLINE


94 
H_CODEVERSION
 
CODEVERSION
 
NEWLINE


95 
H_PRODUCER
 
IDENTIFIER
 
NEWLINE


96 
H_HOST
 
IDENTIFIER
 
NEWLINE


97 
H_COMPILESIZE
 
IDENTIFIER
 
NEWLINE


98 
H_IDENTIFIER
 
FILENAME
 {
	`£tCuobjdum∑rch
(
$4
); 
	`£tCuobjdumpidítifõr
(
$19
);};

100 
±xcode
 :Ötxcodê
PTXLINE
 {
	`Ârötf
(
±xfûe
, "%s", 
$2
);}

103 
ñfcode
 :Élfcodê
ELFLINE
 {
	`Ârötf
(
ñffûe
, "%s", 
$2
);}

106 
ßsscode
 : sasscodê
SASSLINE
 {
	`Ârötf
(
ßssfûe
, "%s", 
$2
)}

110 
	}
%%

	@libcuda/cuobjdump_lexer.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#yy_¸óã_buf„r
 
cuobjdump__¸óã_buf„r


	)

10 
	#yy_dñëe_buf„r
 
cuobjdump__dñëe_buf„r


	)

11 
	#yy_Êex_debug
 
cuobjdump__Êex_debug


	)

12 
	#yy_öô_buf„r
 
cuobjdump__öô_buf„r


	)

13 
	#yy_Êush_buf„r
 
cuobjdump__Êush_buf„r


	)

14 
	#yy_lﬂd_buf„r_°©e
 
cuobjdump__lﬂd_buf„r_°©e


	)

15 
	#yy_swôch_to_buf„r
 
cuobjdump__swôch_to_buf„r


	)

16 
	#yyö
 
cuobjdump_ö


	)

17 
	#yyÀng
 
cuobjdump_Àng


	)

18 
	#yyÀx
 
cuobjdump_Àx


	)

19 
	#yylöío
 
cuobjdump_löío


	)

20 
	#yyout
 
cuobjdump_out


	)

21 
	#yyª°¨t
 
cuobjdump_ª°¨t


	)

22 
	#yyãxt
 
cuobjdump_ãxt


	)

23 
	#yywøp
 
cuobjdump_wøp


	)

24 
	#yyÆloc
 
cuobjdump_Æloc


	)

25 
	#yyªÆloc
 
cuobjdump_ªÆloc


	)

26 
	#yy‰ì
 
cuobjdump_‰ì


	)

28 
	#FLEX_SCANNER


	)

29 
	#YY_FLEX_MAJOR_VERSION
 2

	)

30 
	#YY_FLEX_MINOR_VERSION
 5

	)

31 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

32 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

33 
	#FLEX_BETA


	)

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<°dlib.h
>

48 #i‚de‡
FLEXINT_H


49 
	#FLEXINT_H


	)

53 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

58 #i‚de‡
__STDC_LIMIT_MACROS


59 
	#__STDC_LIMIT_MACROS
 1

	)

62 
	~<öây≥s.h
>

63 
öt8_t
 
	tÊex_öt8_t
;

64 
uöt8_t
 
	tÊex_uöt8_t
;

65 
öt16_t
 
	tÊex_öt16_t
;

66 
uöt16_t
 
	tÊex_uöt16_t
;

67 
öt32_t
 
	tÊex_öt32_t
;

68 
uöt32_t
 
	tÊex_uöt32_t
;

70 sig√d 
	tÊex_öt8_t
;

71 
	tÊex_öt16_t
;

72 
	tÊex_öt32_t
;

73 
	tÊex_uöt8_t
;

74 
	tÊex_uöt16_t
;

75 
	tÊex_uöt32_t
;

79 #i‚de‡
INT8_MIN


80 
	#INT8_MIN
 (-128)

	)

82 #i‚de‡
INT16_MIN


83 
	#INT16_MIN
 (-32767-1)

	)

85 #i‚de‡
INT32_MIN


86 
	#INT32_MIN
 (-2147483647-1)

	)

88 #i‚de‡
INT8_MAX


89 
	#INT8_MAX
 (127)

	)

91 #i‚de‡
INT16_MAX


92 
	#INT16_MAX
 (32767)

	)

94 #i‚de‡
INT32_MAX


95 
	#INT32_MAX
 (2147483647)

	)

97 #i‚de‡
UINT8_MAX


98 
	#UINT8_MAX
 (255U)

	)

100 #i‚de‡
UINT16_MAX


101 
	#UINT16_MAX
 (65535U)

	)

103 #i‚de‡
UINT32_MAX


104 
	#UINT32_MAX
 (4294967295U)

	)

109 #ifde‡
__˝lu•lus


112 
	#YY_USE_CONST


	)

117 #i‡
deföed
 (
__STDC__
)

119 
	#YY_USE_CONST


	)

124 #ifde‡
YY_USE_CONST


125 
	#yyc⁄°
 c⁄°

	)

127 
	#yyc⁄°


	)

131 
	#YY_NULL
 0

	)

138 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

144 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

150 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

151 
	#YYSTATE
 
YY_START


	)

154 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

157 
	#YY_NEW_FILE
 
	`cuobjdump_ª°¨t
(
cuobjdump_ö
 )

	)

159 
	#YY_END_OF_BUFFER_CHAR
 0

	)

162 #i‚de‡
YY_BUF_SIZE


163 
	#YY_BUF_SIZE
 16384

	)

168 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

170 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


171 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

172 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

175 
cuobjdump_Àng
;

177 
FILE
 *
cuobjdump_ö
, *
cuobjdump_out
;

179 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

180 
	#EOB_ACT_END_OF_FILE
 1

	)

181 
	#EOB_ACT_LAST_MATCH
 2

	)

190 
	#YY_LESS_LINENO
(
n
) \

192 
yyl
;\

193  
yyl
 = 
n
; yy»< 
cuobjdump_Àng
; ++yyl )\

194 i‡–
cuobjdump_ãxt
[
yyl
] == '\n' )\

195 --
cuobjdump_löío
;\

196 }0)

	)

199 
	#yyÀss
(
n
) \

203 
yyÀss_ma¸o_¨g
 = (
n
); \

204 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

205 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

206 
YY_RESTORE_YY_MORE_OFFSET
 \

207 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

208 
YY_DO_BEFORE_ACTION
; \

210  0 )

	)

212 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

214 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


215 
	#YY_TYPEDEF_YY_SIZE_T


	)

216 
size_t
 
	tyy_size_t
;

219 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


220 
	#YY_STRUCT_YY_BUFFER_STATE


	)

221 
	syy_buf„r_°©e


223 
FILE
 *
	myy_öput_fûe
;

225 *
	myy_ch_buf
;

226 *
	myy_buf_pos
;

231 
yy_size_t
 
	myy_buf_size
;

236 
	myy_n_ch¨s
;

242 
	myy_is_our_buf„r
;

249 
	myy_is_öãø˘ive
;

255 
	myy_©_bﬁ
;

257 
	myy_bs_löío
;

258 
	myy_bs_cﬁumn
;

263 
	myy_fûl_buf„r
;

265 
	myy_buf„r_°©us
;

267 
	#YY_BUFFER_NEW
 0

	)

268 
	#YY_BUFFER_NORMAL
 1

	)

279 
	#YY_BUFFER_EOF_PENDING
 2

	)

285 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

286 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

287 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

295 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

296 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

297 : 
NULL
)

	)

302 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

305 
	gyy_hﬁd_ch¨
;

306 
	gyy_n_ch¨s
;

307 
	gcuobjdump_Àng
;

310 *
	gyy_c_buf_p
 = (*) 0;

311 
	gyy_öô
 = 0;

312 
	gyy_°¨t
 = 0;

317 
	gyy_did_buf„r_swôch_⁄_eof
;

319 
cuobjdump_ª°¨t
 (
FILE
 *
öput_fûe
 );

320 
cuobjdump__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

321 
YY_BUFFER_STATE
 
cuobjdump__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

322 
cuobjdump__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
cuobjdump__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

324 
cuobjdump_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

325 
cuobjdump_p›_buf„r_°©e
 ();

327 
cuobjdump_ísuª_buf„r_°ack
 ();

328 
cuobjdump__lﬂd_buf„r_°©e
 ();

329 
cuobjdump__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

331 
	#YY_FLUSH_BUFFER
 
	`cuobjdump__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

333 
YY_BUFFER_STATE
 
cuobjdump__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

334 
YY_BUFFER_STATE
 
cuobjdump__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

335 
YY_BUFFER_STATE
 
cuobjdump__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

337 *
cuobjdump_Æloc
 (
yy_size_t
 );

338 *
cuobjdump_ªÆloc
 (*,
yy_size_t
 );

339 
cuobjdump_‰ì
 (* );

341 
	#yy_√w_buf„r
 
cuobjdump__¸óã_buf„r


	)

343 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

345 i‡–! 
YY_CURRENT_BUFFER
 ){ \

346 
	`cuobjdump_ísuª_buf„r_°ack
 (); \

347 
YY_CURRENT_BUFFER_LVALUE
 = \

348 
	`cuobjdump__¸óã_buf„r
(
cuobjdump_ö
,
YY_BUF_SIZE
 ); \

350 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

351 }

	)

353 
	#yy_£t_bﬁ
(
©_bﬁ
) \

355 i‡–! 
YY_CURRENT_BUFFER
 ){\

356 
	`cuobjdump_ísuª_buf„r_°ack
 (); \

357 
YY_CURRENT_BUFFER_LVALUE
 = \

358 
	`cuobjdump__¸óã_buf„r
(
cuobjdump_ö
,
YY_BUF_SIZE
 ); \

360 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

361 }

	)

363 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

367 
	#cuobjdump_wøp
(
n
Ë1

	)

368 
	#YY_SKIP_YYWRAP


	)

370 
	tYY_CHAR
;

372 
FILE
 *
	gcuobjdump_ö
 = (FILE *Ë0, *
	gcuobjdump_out
 = (FILE *) 0;

374 
	tyy_°©e_ty≥
;

376 
cuobjdump_löío
;

378 
	gcuobjdump_löío
 = 1;

380 *
cuobjdump_ãxt
;

381 
	#yyãxt_±r
 
cuobjdump_ãxt


	)

383 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

384 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

385 
yy_gë_√xt_buf„r
 ();

386 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

391 
	#YY_DO_BEFORE_ACTION
 \

392 (
yyãxt_±r
Ë
yy_bp
; \

393 
cuobjdump_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

394 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

395 *
yy_˝
 = '\0'; \

396 (
yy_c_buf_p
Ë
yy_˝
;

	)

398 
	#YY_NUM_RULES
 22

	)

399 
	#YY_END_OF_BUFFER
 23

	)

402 
	syy_å™s_öfo


404 
Êex_öt32_t
 
	myy_vîify
;

405 
Êex_öt32_t
 
	myy_nxt
;

407 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[366] =

451 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

483 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[38] =

491 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[382] =

537 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[382] =

583 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[707] =

665 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[707] =

748 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[23] =

753 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

754 *
	gyy_œ°_ac˚±ög_˝os
;

756 
cuobjdump__Êex_debug
;

757 
	gcuobjdump__Êex_debug
 = 0;

762 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

763 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

764 
	#YY_MORE_ADJ
 0

	)

765 
	#YY_RESTORE_YY_MORE_OFFSET


	)

766 *
	gcuobjdump_ãxt
;

798 
	~<°dio.h
>

799 
	~<°rög.h
>

800 
	~"cuobjdump_∑r£r.h
"

802 
	#YY_NEVER_INTERACTIVE
 1

	)

803 
	#YY_NO_INPUT


	)

804 
	#YY_NO_TOP_STATE


	)

806 
	#YYDEBUG
 1

	)

808 
	#yylvÆ
 
cuobjdump_lvÆ


	)

810 
cuobjdump_îr‹
(const *);

818 
	#INITIAL
 0

	)

819 
	#±xcode
 1

	)

820 
	#ßsscode
 2

	)

821 
	#ñfcode
 3

	)

822 
	#hódî
 4

	)

823 
	#ídhódî
 5

	)

825 #i‚de‡
YY_NO_UNISTD_H


830 
	~<uni°d.h
>

833 #i‚de‡
YY_EXTRA_TYPE


834 
	#YY_EXTRA_TYPE
 *

	)

837 
yy_öô_globÆs
 ();

842 
cuobjdump_Àx_de°roy
 ();

844 
cuobjdump_gë_debug
 ();

846 
cuobjdump_£t_debug
 (
debug_Êag
 );

848 
YY_EXTRA_TYPE
 
cuobjdump_gë_exåa
 ();

850 
cuobjdump_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

852 
FILE
 *
cuobjdump_gë_ö
 ();

854 
cuobjdump_£t_ö
 (
FILE
 * 
ö_°r
 );

856 
FILE
 *
cuobjdump_gë_out
 ();

858 
cuobjdump_£t_out
 (
FILE
 * 
out_°r
 );

860 
cuobjdump_gë_Àng
 ();

862 *
cuobjdump_gë_ãxt
 ();

864 
cuobjdump_gë_löío
 ();

866 
cuobjdump_£t_löío
 (
löe_numbî
 );

872 #i‚de‡
YY_SKIP_YYWRAP


873 #ifde‡
__˝lu•lus


874 "C" 
cuobjdump_wøp
 ();

876 
cuobjdump_wøp
 ();

880 #i‚de‡
yyãxt_±r


881 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

884 #ifde‡
YY_NEED_STRLEN


885 
yy_Êex_°æí
 (
yyc⁄°
 * );

888 #i‚de‡
YY_NO_INPUT


890 #ifde‡
__˝lu•lus


891 
yyöput
 ();

893 
öput
 ();

898 
	gyy_°¨t_°ack_±r
 = 0;

899 
	gyy_°¨t_°ack_dïth
 = 0;

900 *
	gyy_°¨t_°ack
 = 
NULL
;

902 
yy_push_°©e
 (
√w_°©e
 );

904 
yy_p›_°©e
 ();

906 
yy_t›_°©e
 ();

909 #i‚de‡
YY_READ_BUF_SIZE


910 
	#YY_READ_BUF_SIZE
 8192

	)

914 #i‚de‡
ECHO


918 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
cuobjdump_ãxt
, 
cuobjdump_Àng
, 1, 
cuobjdump_out
 )Ë{} } 0)

	)

924 #i‚de‡
YY_INPUT


925 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

926 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

928 
c
 = '*'; \

929 
n
; \

930  
n
 = 0;Ç < 
max_size
 && \

931 (
c
 = 
	`gëc
–
cuobjdump_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

932 
buf
[
n
] = (Ë
c
; \

933 i‡–
c
 == '\n' ) \

934 
buf
[
n
++] = (Ë
c
; \

935 i‡–
c
 =
EOF
 && 
	`„º‹
–
cuobjdump_ö
 ) ) \

936 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

937 
ªsu…
 = 
n
; \

941 
î∫o
=0; \

942  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
cuobjdump_ö
))==0 && 
	`„º‹
(cuobjdump_in)) \

944 if–
î∫o
 !
EINTR
) \

946 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

949 
î∫o
=0; \

950 
	`˛óªº
(
cuobjdump_ö
); \

954 

	)

961 #i‚de‡
yyãrmö©e


962 
	#yyãrmö©e
(Ë 
YY_NULL


	)

966 #i‚de‡
YY_START_STACK_INCR


967 
	#YY_START_STACK_INCR
 25

	)

971 #i‚de‡
YY_FATAL_ERROR


972 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

980 #i‚de‡
YY_DECL


981 
	#YY_DECL_IS_OURS
 1

	)

983 
cuobjdump_Àx
 ();

985 
	#YY_DECL
 
	`cuobjdump_Àx
 ()

	)

991 #i‚de‡
YY_USER_ACTION


992 
	#YY_USER_ACTION


	)

996 #i‚de‡
YY_BREAK


997 
	#YY_BREAK
 ;

	)

1000 
	#YY_RULE_SETUP
 \

1001 
YY_USER_ACTION


	)

1005 
	gYY_DECL


1007 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1008 *
	gyy_˝
, *
	gyy_bp
;

1009 
	gyy_a˘
;

1017 i‡–!(
	gyy_öô
) )

1019 (
	gyy_öô
) = 1;

1021 #ifde‡
YY_USER_INIT


1022 
	gYY_USER_INIT
;

1025 i‡–! (
	gyy_°¨t
) )

1026 (
	gyy_°¨t
) = 1;

1028 i‡–! 
	gcuobjdump_ö
 )

1029 
	gcuobjdump_ö
 = 
°dö
;

1031 i‡–! 
	gcuobjdump_out
 )

1032 
	gcuobjdump_out
 = 
°dout
;

1034 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1035 
cuobjdump_ísuª_buf„r_°ack
 ();

1036 
	gYY_CURRENT_BUFFER_LVALUE
 =

1037 
cuobjdump__¸óã_buf„r
(
cuobjdump_ö
,
YY_BUF_SIZE
 );

1040 
cuobjdump__lﬂd_buf„r_°©e
( );

1045 
	gyy_˝
 = (
yy_c_buf_p
);

1048 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1053 
	gyy_bp
 = 
yy_˝
;

1055 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

1056 
	gyy_m©ch
:

1059 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1060 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1062 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1063 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1065  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1067 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1068 i‡–
	gyy_cuºít_°©e
 >= 366 )

1069 
yy_c
 = 
yy_mëa
[() yy_c];

1071 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1072 ++
	gyy_˝
;

1074  
	gyy_cuºít_°©e
 != 365 );

1075 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1076 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1078 
	gyy_föd_a˘i⁄
:

1079 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1081 
	gYY_DO_BEFORE_ACTION
;

1083 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

1085 
yyl
;

1086  
	gyyl
 = 0; yy»< 
	gcuobjdump_Àng
; ++yyl )

1087 i‡–
	gcuobjdump_ãxt
[
yyl
] == '\n' )

1089 
cuobjdump_löío
++;

1093 
	gdo_a˘i⁄
:

1095  
yy_a˘
 )

1099 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1100 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1101 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1102 
	gyy_föd_a˘i⁄
;

1106 
YY_RULE_SETUP


1109 
YY_BREAK


1111 
YY_RULE_SETUP


1113 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);  
	gDECIMAL
;

1114 
YY_BREAK


1117 
YY_RULE_SETUP


1120 
yy_push_°©e
(
±xcode
);

1121 
yy_push_°©e
(
hódî
);

1122 
	gyylvÆ
.
	g°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);

1123  
	gPTXHEADER
;

1125 
YY_BREAK


1128 
YY_RULE_SETUP


1131 
yy_push_°©e
(
ñfcode
);

1132 
yy_push_°©e
(
hódî
);

1133 
	gyylvÆ
.
	g°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);

1134  
	gELFHEADER
;

1136 
YY_BREAK


1140 
YY_RULE_SETUP


1142 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);  
	gPTXLINE
;

1143 
YY_BREAK


1147 
YY_RULE_SETUP


1150 
BEGIN
(
ßsscode
);

1151 
	gyylvÆ
.
	g°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);

1152  
	gSASSLINE
;

1154 
YY_BREAK


1157 
YY_RULE_SETUP


1159 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);  
	gELFLINE
;

1160 
YY_BREAK


1164 
YY_RULE_SETUP


1166 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);  
	gSASSLINE
;

1167 
YY_BREAK


1170 
YY_RULE_SETUP


1172 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
);  
	gIDENTIFIER
;

1173 
YY_BREAK


1175 
YY_RULE_SETUP


1177  
H_SEPARATOR
;

1178 
YY_BREAK


1180 
YY_RULE_SETUP


1182  
H_ARCH
;

1183 
YY_BREAK


1185 
YY_RULE_SETUP


1187  
H_CODEVERSION
;

1188 
YY_BREAK


1190 
YY_RULE_SETUP


1192  
CODEVERSION
;

1193 
YY_BREAK


1195 
YY_RULE_SETUP


1197  
H_PRODUCER
;

1198 
YY_BREAK


1200 
YY_RULE_SETUP


1202  
H_HOST
;

1203 
YY_BREAK


1205 
YY_RULE_SETUP


1207  
H_COMPILESIZE
;

1208 
YY_BREAK


1210 
YY_RULE_SETUP


1212 
BEGIN
(
ídhódî
);  
	gH_IDENTIFIER
;

1213 
YY_BREAK


1216 
YY_RULE_SETUP


1219 
YY_BREAK


1223 
YY_RULE_SETUP


1225 
yylvÆ
.
°rög_vÆue
 = 
°rdup
(
cuobjdump_ãxt
); 
yy_p›_°©e
();  
	gFILENAME
;

1226 
YY_BREAK


1229 
YY_RULE_SETUP


1231  
NEWLINE
;

1232 
YY_BREAK


1234 
YY_STATE_EOF
(
INITIAL
):

1235 
YY_STATE_EOF
(
±xcode
):

1236 
YY_STATE_EOF
(
ßsscode
):

1237 
YY_STATE_EOF
(
ñfcode
):

1238 
YY_STATE_EOF
(
hódî
):

1239 
YY_STATE_EOF
(
ídhódî
):

1242 
YY_BREAK


1245 
YY_RULE_SETUP


1247 
cuobjdump_îr‹
("InvalidÅoken");

1248 
YY_BREAK


1250 
YY_RULE_SETUP


1252 
ECHO
;

1253 
	gYY_BREAK


1256 
	gYY_END_OF_BUFFER
:

1259 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1262 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1263 
YY_RESTORE_YY_MORE_OFFSET


1265 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1276 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1277 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
cuobjdump_ö
;

1278 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1288 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1290 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1292 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1294 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1305 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1307 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1309 i‡–
	gyy_√xt_°©e
 )

1312 
	gyy_˝
 = ++(
yy_c_buf_p
);

1313 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1314 
	gyy_m©ch
;

1319 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1320 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1321 
	gyy_föd_a˘i⁄
;

1325  
yy_gë_√xt_buf„r
( ) )

1327 
	gEOB_ACT_END_OF_FILE
:

1329 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1331 i‡–
cuobjdump_wøp
( ) )

1342 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1344 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1345 
	gdo_a˘i⁄
;

1350 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1351 
	gYY_NEW_FILE
;

1356 
	gEOB_ACT_CONTINUE_SCAN
:

1357 (
yy_c_buf_p
) =

1358 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1360 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1362 
	gyy_˝
 = (
yy_c_buf_p
);

1363 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1364 
	gyy_m©ch
;

1366 
	gEOB_ACT_LAST_MATCH
:

1367 (
yy_c_buf_p
) =

1368 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1370 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1372 
	gyy_˝
 = (
yy_c_buf_p
);

1373 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1374 
	gyy_föd_a˘i⁄
;

1380 
YY_FATAL_ERROR
(

1393 
	$yy_gë_√xt_buf„r
 ()

1395 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1396 *
sour˚
 = (
yyãxt_±r
);

1397 
numbî_to_move
, 
i
;

1398 
ªt_vÆ
;

1400 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1401 
	`YY_FATAL_ERROR
(

1404 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1406 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1411  
EOB_ACT_END_OF_FILE
;

1419  
EOB_ACT_LAST_MATCH
;

1426 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

1428  
i
 = 0; i < 
numbî_to_move
; ++i )

1429 *(
de°
++Ë*(
sour˚
++);

1431 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1435 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1439 
num_to_ªad
 =

1440 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1442  
num_to_ªad
 <= 0 )

1446 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

1448 
yy_c_buf_p_off£t
 =

1449 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1451 i‡–
b
->
yy_is_our_buf„r
 )

1453 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1455 i‡–
√w_size
 <= 0 )

1456 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1458 
b
->
yy_buf_size
 *= 2;

1460 
b
->
yy_ch_buf
 = (*)

1462 
	`cuobjdump_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

1466 
b
->
yy_ch_buf
 = 0;

1468 i‡–! 
b
->
yy_ch_buf
 )

1469 
	`YY_FATAL_ERROR
(

1472 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1474 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1475 
numbî_to_move
 - 1;

1479 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1480 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1483 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1484 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

1486 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1489 i‡–(
yy_n_ch¨s
) == 0 )

1491 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1493 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1494 
	`cuobjdump_ª°¨t
(
cuobjdump_ö
 );

1499 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1500 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1501 
YY_BUFFER_EOF_PENDING
;

1506 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1508 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1510 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1511 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`cuobjdump_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

1512 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1513 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1516 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1517 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1518 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1520 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1522  
ªt_vÆ
;

1523 
	}
}

1527 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1529 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1530 *
yy_˝
;

1532 
yy_cuºít_°©e
 = (
yy_°¨t
);

1534  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1536 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1537 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1539 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1540 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1542  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1544 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1545 i‡–
yy_cuºít_°©e
 >= 366 )

1546 
yy_c
 = 
yy_mëa
[() yy_c];

1548 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1551  
yy_cuºít_°©e
;

1552 
	}
}

1559 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1561 
yy_is_jam
;

1562 *
yy_˝
 = (
yy_c_buf_p
);

1564 
YY_CHAR
 
yy_c
 = 1;

1565 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1567 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1568 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1570  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1572 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1573 i‡–
yy_cuºít_°©e
 >= 366 )

1574 
yy_c
 = 
yy_mëa
[() yy_c];

1576 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1577 
yy_is_jam
 = (
yy_cuºít_°©e
 == 365);

1579  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1580 
	}
}

1582 #i‚de‡
YY_NO_INPUT


1583 #ifde‡
__˝lu•lus


1584 
	$yyöput
 ()

1586 
	$öput
 ()

1590 
c
;

1592 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1594 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1600 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1602 *(
yy_c_buf_p
) = '\0';

1606 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

1607 ++(
yy_c_buf_p
);

1609  
	`yy_gë_√xt_buf„r
( ) )

1611 
EOB_ACT_LAST_MATCH
:

1623 
	`cuobjdump_ª°¨t
(
cuobjdump_ö
 );

1627 
EOB_ACT_END_OF_FILE
:

1629 i‡–
	`cuobjdump_wøp
( ) )

1630  
EOF
;

1632 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1633 
YY_NEW_FILE
;

1634 #ifde‡
__˝lu•lus


1635  
	`yyöput
();

1637  
	`öput
();

1641 
EOB_ACT_CONTINUE_SCAN
:

1642 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1648 
c
 = *(*Ë(
yy_c_buf_p
);

1649 *(
yy_c_buf_p
) = '\0';

1650 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1652 i‡–
c
 == '\n' )

1654 
cuobjdump_löío
++;

1657  
c
;

1658 
	}
}

1666 
	$cuobjdump_ª°¨t
 (
FILE
 * 
öput_fûe
 )

1669 i‡–! 
YY_CURRENT_BUFFER
 ){

1670 
	`cuobjdump_ísuª_buf„r_°ack
 ();

1671 
YY_CURRENT_BUFFER_LVALUE
 =

1672 
	`cuobjdump__¸óã_buf„r
(
cuobjdump_ö
,
YY_BUF_SIZE
 );

1675 
	`cuobjdump__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

1676 
	`cuobjdump__lﬂd_buf„r_°©e
( );

1677 
	}
}

1683 
	$cuobjdump__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1691 
	`cuobjdump_ísuª_buf„r_°ack
 ();

1692 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1695 i‡–
YY_CURRENT_BUFFER
 )

1698 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1699 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1700 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1703 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1704 
	`cuobjdump__lﬂd_buf„r_°©e
( );

1711 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1712 
	}
}

1714 
	$cuobjdump__lﬂd_buf„r_°©e
 ()

1716 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1717 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1718 
cuobjdump_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1719 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1720 
	}
}

1728 
YY_BUFFER_STATE
 
	$cuobjdump__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1730 
YY_BUFFER_STATE
 
b
;

1732 
b
 = (
YY_BUFFER_STATE
Ë
	`cuobjdump_Æloc
(–
yy_buf„r_°©e
 ) );

1733 i‡–! 
b
 )

1734 
	`YY_FATAL_ERROR
( "out of dynamic memory in cuobjdump__create_buffer()" );

1736 
b
->
yy_buf_size
 = 
size
;

1741 
b
->
yy_ch_buf
 = (*Ë
	`cuobjdump_Æloc
(b->
yy_buf_size
 + 2 );

1742 i‡–! 
b
->
yy_ch_buf
 )

1743 
	`YY_FATAL_ERROR
( "out of dynamic memory in cuobjdump__create_buffer()" );

1745 
b
->
yy_is_our_buf„r
 = 1;

1747 
	`cuobjdump__öô_buf„r
(
b
,
fûe
 );

1749  
b
;

1750 
	}
}

1756 
	$cuobjdump__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1759 i‡–! 
b
 )

1762 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1763 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1765 i‡–
b
->
yy_is_our_buf„r
 )

1766 
	`cuobjdump_‰ì
((*Ë
b
->
yy_ch_buf
 );

1768 
	`cuobjdump_‰ì
((*Ë
b
 );

1769 
	}
}

1771 #i‚de‡
__˝lu•lus


1772 
ißây
 ();

1779 
	$cuobjdump__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1782 
€ºno
 = 
î∫o
;

1784 
	`cuobjdump__Êush_buf„r
(
b
 );

1786 
b
->
yy_öput_fûe
 = 
fûe
;

1787 
b
->
yy_fûl_buf„r
 = 1;

1793 i‡(
b
 !
YY_CURRENT_BUFFER
){

1794 
b
->
yy_bs_löío
 = 1;

1795 
b
->
yy_bs_cﬁumn
 = 0;

1798 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1800 
î∫o
 = 
€ºno
;

1801 
	}
}

1807 
	$cuobjdump__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1809 i‡–! 
b
 )

1812 
b
->
yy_n_ch¨s
 = 0;

1818 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1819 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1821 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1823 
b
->
yy_©_bﬁ
 = 1;

1824 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1826 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1827 
	`cuobjdump__lﬂd_buf„r_°©e
( );

1828 
	}
}

1836 
	$cuobjdump_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1838 i‡(
√w_buf„r
 =
NULL
)

1841 
	`cuobjdump_ísuª_buf„r_°ack
();

1844 i‡–
YY_CURRENT_BUFFER
 )

1847 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1848 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1849 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1853 i‡(
YY_CURRENT_BUFFER
)

1854 (
yy_buf„r_°ack_t›
)++;

1855 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1858 
	`cuobjdump__lﬂd_buf„r_°©e
( );

1859 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1860 
	}
}

1866 
	$cuobjdump_p›_buf„r_°©e
 ()

1868 i‡(!
YY_CURRENT_BUFFER
)

1871 
	`cuobjdump__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1872 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1873 i‡((
yy_buf„r_°ack_t›
) > 0)

1874 --(
yy_buf„r_°ack_t›
);

1876 i‡(
YY_CURRENT_BUFFER
) {

1877 
	`cuobjdump__lﬂd_buf„r_°©e
( );

1878 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1880 
	}
}

1885 
	$cuobjdump_ísuª_buf„r_°ack
 ()

1887 
num_to_Æloc
;

1889 i‡(!(
yy_buf„r_°ack
)) {

1895 
num_to_Æloc
 = 1;

1896 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
cuobjdump_Æloc


1897 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1899 i‡–! (
yy_buf„r_°ack
) )

1900 
	`YY_FATAL_ERROR
( "out of dynamic memory in cuobjdump_ensure_buffer_stack()" );

1902 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1904 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1905 (
yy_buf„r_°ack_t›
) = 0;

1909 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1912 
grow_size
 = 8 ;

1914 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1915 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
cuobjdump_ªÆloc


1916 ((
yy_buf„r_°ack
),

1917 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1919 i‡–! (
yy_buf„r_°ack
) )

1920 
	`YY_FATAL_ERROR
( "out of dynamic memory in cuobjdump_ensure_buffer_stack()" );

1923 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1924 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1926 
	}
}

1934 
YY_BUFFER_STATE
 
	$cuobjdump__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1936 
YY_BUFFER_STATE
 
b
;

1938 i‡–
size
 < 2 ||

1939 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1940 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1944 
b
 = (
YY_BUFFER_STATE
Ë
	`cuobjdump_Æloc
(–
yy_buf„r_°©e
 ) );

1945 i‡–! 
b
 )

1946 
	`YY_FATAL_ERROR
( "out of dynamic memory in cuobjdump__scan_buffer()" );

1948 
b
->
yy_buf_size
 = 
size
 - 2;

1949 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1950 
b
->
yy_is_our_buf„r
 = 0;

1951 
b
->
yy_öput_fûe
 = 0;

1952 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1953 
b
->
yy_is_öãø˘ive
 = 0;

1954 
b
->
yy_©_bﬁ
 = 1;

1955 
b
->
yy_fûl_buf„r
 = 0;

1956 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1958 
	`cuobjdump__swôch_to_buf„r
(
b
 );

1960  
b
;

1961 
	}
}

1971 
YY_BUFFER_STATE
 
	$cuobjdump__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

1974  
	`cuobjdump__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

1975 
	}
}

1984 
YY_BUFFER_STATE
 
	$cuobjdump__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

1986 
YY_BUFFER_STATE
 
b
;

1987 *
buf
;

1988 
yy_size_t
 
n
;

1989 
i
;

1992 
n
 = 
_yybyãs_Àn
 + 2;

1993 
buf
 = (*Ë
	`cuobjdump_Æloc
(
n
 );

1994 i‡–! 
buf
 )

1995 
	`YY_FATAL_ERROR
( "out of dynamic memory in cuobjdump__scan_bytes()" );

1997  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1998 
buf
[
i
] = 
yybyãs
[i];

2000 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

2002 
b
 = 
	`cuobjdump__sˇn_buf„r
(
buf
,
n
 );

2003 i‡–! 
b
 )

2004 
	`YY_FATAL_ERROR
( "bad buffer in cuobjdump__scan_bytes()" );

2009 
b
->
yy_is_our_buf„r
 = 1;

2011  
b
;

2012 
	}
}

2014 
	$yy_push_°©e
 (
√w_°©e
 )

2016 i‡–(
yy_°¨t_°ack_±r
Ë>(
yy_°¨t_°ack_dïth
) )

2018 
yy_size_t
 
√w_size
;

2020 (
yy_°¨t_°ack_dïth
Ë+
YY_START_STACK_INCR
;

2021 
√w_size
 = (
yy_°¨t_°ack_dïth
) * ( );

2023 i‡–! (
yy_°¨t_°ack
) )

2024 (
yy_°¨t_°ack
Ë(*Ë
	`cuobjdump_Æloc
(
√w_size
 );

2027 (
yy_°¨t_°ack
Ë(*Ë
	`cuobjdump_ªÆloc
((*Ë(yy_°¨t_°ack),
√w_size
 );

2029 i‡–! (
yy_°¨t_°ack
) )

2030 
	`YY_FATAL_ERROR
( "out of memoryÉxpanding start-condition stack" );

2033 (
yy_°¨t_°ack
)[(
yy_°¨t_°ack_±r
)++] = 
YY_START
;

2035 
	`BEGIN
(
√w_°©e
);

2036 
	}
}

2038 
	$yy_p›_°©e
 ()

2040 i‡–--(
yy_°¨t_°ack_±r
) < 0 )

2041 
	`YY_FATAL_ERROR
( "start-condition stack underflow" );

2043 
	`BEGIN
((
yy_°¨t_°ack
)[(
yy_°¨t_°ack_±r
)]);

2044 
	}
}

2046 
	$yy_t›_°©e
 ()

2048  (
yy_°¨t_°ack
)[(
yy_°¨t_°ack_±r
) - 1];

2049 
	}
}

2051 #i‚de‡
YY_EXIT_FAILURE


2052 
	#YY_EXIT_FAILURE
 2

	)

2055 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

2057 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

2058 
	`exô
–
YY_EXIT_FAILURE
 );

2059 
	}
}

2063 #unde‡
yyÀss


2064 
	#yyÀss
(
n
) \

2068 
yyÀss_ma¸o_¨g
 = (
n
); \

2069 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

2070 
cuobjdump_ãxt
[
cuobjdump_Àng
] = (
yy_hﬁd_ch¨
); \

2071 (
yy_c_buf_p
Ë
cuobjdump_ãxt
 + 
yyÀss_ma¸o_¨g
; \

2072 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

2073 *(
yy_c_buf_p
) = '\0'; \

2074 
cuobjdump_Àng
 = 
yyÀss_ma¸o_¨g
; \

2076  0 )

	)

2083 
	$cuobjdump_gë_löío
 ()

2086  
cuobjdump_löío
;

2087 
	}
}

2092 
FILE
 *
	$cuobjdump_gë_ö
 ()

2094  
cuobjdump_ö
;

2095 
	}
}

2100 
FILE
 *
	$cuobjdump_gë_out
 ()

2102  
cuobjdump_out
;

2103 
	}
}

2108 
	$cuobjdump_gë_Àng
 ()

2110  
cuobjdump_Àng
;

2111 
	}
}

2117 *
	$cuobjdump_gë_ãxt
 ()

2119  
cuobjdump_ãxt
;

2120 
	}
}

2126 
	$cuobjdump_£t_löío
 (
löe_numbî
 )

2129 
cuobjdump_löío
 = 
löe_numbî
;

2130 
	}
}

2138 
	$cuobjdump_£t_ö
 (
FILE
 * 
ö_°r
 )

2140 
cuobjdump_ö
 = 
ö_°r
 ;

2141 
	}
}

2143 
	$cuobjdump_£t_out
 (
FILE
 * 
out_°r
 )

2145 
cuobjdump_out
 = 
out_°r
 ;

2146 
	}
}

2148 
	$cuobjdump_gë_debug
 ()

2150  
cuobjdump__Êex_debug
;

2151 
	}
}

2153 
	$cuobjdump_£t_debug
 (
bdebug
 )

2155 
cuobjdump__Êex_debug
 = 
bdebug
 ;

2156 
	}
}

2158 
	$yy_öô_globÆs
 ()

2165 
cuobjdump_löío
 = 1;

2167 (
yy_buf„r_°ack
) = 0;

2168 (
yy_buf„r_°ack_t›
) = 0;

2169 (
yy_buf„r_°ack_max
) = 0;

2170 (
yy_c_buf_p
) = (*) 0;

2171 (
yy_öô
) = 0;

2172 (
yy_°¨t
) = 0;

2174 (
yy_°¨t_°ack_±r
) = 0;

2175 (
yy_°¨t_°ack_dïth
) = 0;

2176 (
yy_°¨t_°ack
Ë
NULL
;

2179 #ifde‡
YY_STDINIT


2180 
cuobjdump_ö
 = 
°dö
;

2181 
cuobjdump_out
 = 
°dout
;

2183 
cuobjdump_ö
 = (
FILE
 *) 0;

2184 
cuobjdump_out
 = (
FILE
 *) 0;

2191 
	}
}

2194 
	$cuobjdump_Àx_de°roy
 ()

2198 
YY_CURRENT_BUFFER
){

2199 
	`cuobjdump__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

2200 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2201 
	`cuobjdump_p›_buf„r_°©e
();

2205 
	`cuobjdump_‰ì
((
yy_buf„r_°ack
) );

2206 (
yy_buf„r_°ack
Ë
NULL
;

2209 
	`cuobjdump_‰ì
((
yy_°¨t_°ack
) );

2210 (
yy_°¨t_°ack
Ë
NULL
;

2214 
	`yy_öô_globÆs
( );

2217 
	}
}

2223 #i‚de‡
yyãxt_±r


2224 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

2226 
i
;

2227  
i
 = 0; i < 
n
; ++i )

2228 
s1
[
i
] = 
s2
[i];

2229 
	}
}

2232 #ifde‡
YY_NEED_STRLEN


2233 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

2235 
n
;

2236  
n
 = 0; 
s
[n]; ++n )

2239  
n
;

2240 
	}
}

2243 *
	$cuobjdump_Æloc
 (
yy_size_t
 
size
 )

2245  (*Ë
	`mÆloc
–
size
 );

2246 
	}
}

2248 *
	$cuobjdump_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

2257  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2258 
	}
}

2260 
	$cuobjdump_‰ì
 (* 
±r
 )

2262 
	`‰ì
–(*Ë
±r
 );

2263 
	}
}

2265 
	#YYTABLES_NAME
 "yyèbÀs"

	)

2270 
	$cuobjdump_îr‹
(c⁄° * 
mesßge
)

2272 
	`¥ötf
(" ");Örötf(
mesßge
);Örötf("Çó∏\"");Örötf(
cuobjdump_ãxt
);Örintf("\"");

2273 
	`¥ötf
(" onÜine ");

2274 
löe
[5]; 
	`•rötf
÷öe, "%i", 
cuobjdump_löío
); 
	`¥ötf
(line);

2275 
	`¥ötf
("\n");

2276 
	}
}

	@libcuda/cuobjdump_parser.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
cuobjdump_∑r£


	)

68 
	#yyÀx
 
cuobjdump_Àx


	)

69 
	#yyîr‹
 
cuobjdump_îr‹


	)

70 
	#yylvÆ
 
cuobjdump_lvÆ


	)

71 
	#yych¨
 
cuobjdump_ch¨


	)

72 
	#yydebug
 
cuobjdump_debug


	)

73 
	#yy√ºs
 
cuobjdump_√ºs


	)

81 
	~<°dio.h
>

83 
yyÀx
();

84 
yyîr‹
(const *);

85 
addCuobjdumpSe˘i⁄
(
£˘i⁄ty≥
);

86 
£tCuobjdum∑rch
(c⁄° * 
¨ch
);

87 
£tCuobjdumpidítifõr
(c⁄° * 
idítifõr
);

88 
£tCuobjdumµtxfûíame
(c⁄° * 
fûíame
);

89 
£tCuobjdum≥lffûíame
(c⁄° * 
fûíame
);

90 
£tCuobjdumpßssfûíame
(c⁄° * 
fûíame
);

91 
	gñf£rül
 = 1;

92 
	g±x£rül
 = 1;

93 
FILE
 *
	g±xfûe
;

94 
FILE
 *
	gñffûe
;

95 
FILE
 *
	gßssfûe
;

96 
	gfûíame
 [1024];

103 #i‚de‡
YYDEBUG


104 
	#YYDEBUG
 1

	)

108 #ifde‡
YYERROR_VERBOSE


109 #unde‡
YYERROR_VERBOSE


110 
	#YYERROR_VERBOSE
 1

	)

112 
	#YYERROR_VERBOSE
 0

	)

116 #i‚de‡
YYTOKEN_TABLE


117 
	#YYTOKEN_TABLE
 0

	)

122 #i‚de‡
YYTOKENTYPE


123 
	#YYTOKENTYPE


	)

126 
	eyytokíty≥
 {

127 
	mH_SEPARATOR
 = 258,

128 
	mH_ARCH
 = 259,

129 
	mH_CODEVERSION
 = 260,

130 
	mH_PRODUCER
 = 261,

131 
	mH_HOST
 = 262,

132 
	mH_COMPILESIZE
 = 263,

133 
	mH_IDENTIFIER
 = 264,

134 
	mCODEVERSION
 = 265,

135 
	mSTRING
 = 266,

136 
	mFILENAME
 = 267,

137 
	mDECIMAL
 = 268,

138 
	mPTXHEADER
 = 269,

139 
	mELFHEADER
 = 270,

140 
	mPTXLINE
 = 271,

141 
	mELFLINE
 = 272,

142 
	mSASSLINE
 = 273,

143 
	mIDENTIFIER
 = 274,

144 
	mNEWLINE
 = 275

150 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


151 
	uYYSTYPE


157 * 
	m°rög_vÆue
;

163 } 
	tYYSTYPE
;

164 
	#YYSTYPE_IS_TRIVIAL
 1

	)

165 
	#yy°y≥
 
YYSTYPE


	)

166 
	#YYSTYPE_IS_DECLARED
 1

	)

180 #ifde‡
YYTYPE_UINT8


181 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

183 
	tyyty≥_uöt8
;

186 #ifde‡
YYTYPE_INT8


187 
YYTYPE_INT8
 
	tyyty≥_öt8
;

188 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

189 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

190 sig√d 
	tyyty≥_öt8
;

192 
	tyyty≥_öt8
;

195 #ifde‡
YYTYPE_UINT16


196 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

198 
	tyyty≥_uöt16
;

201 #ifde‡
YYTYPE_INT16


202 
YYTYPE_INT16
 
	tyyty≥_öt16
;

204 
	tyyty≥_öt16
;

207 #i‚de‡
YYSIZE_T


208 #ifde‡
__SIZE_TYPE__


209 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

210 #ñi‡
deföed
 
size_t


211 
	#YYSIZE_T
 
size_t


	)

212 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

213 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

214 
	~<°ddef.h
>

215 
	#YYSIZE_T
 
size_t


	)

217 
	#YYSIZE_T
 

	)

221 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

223 #i‚de‡
YY_


224 #i‡
YYENABLE_NLS


225 #i‡
ENABLE_NLS


226 
	~<liböé.h
>

227 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

230 #i‚de‡
YY_


231 
	#YY_
(
msgid
Ë
	)
msgid

236 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


237 
	#YYUSE
(
e
Ë((Ë”))

	)

239 
	#YYUSE
(
e
Ë

	)

243 #i‚de‡
löt


244 
	#YYID
(
n
Ë“)

	)

246 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

247 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

249 
	$YYID
 (
yyi
)

252 
	$YYID
 (
yyi
)

253 
yyi
;

256  
yyi
;

257 
	}
}

260 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


264 #ifde‡
YYSTACK_USE_ALLOCA


265 #i‡
YYSTACK_USE_ALLOCA


266 #ifde‡
__GNUC__


267 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

268 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


269 
	~<Æloˇ.h
>

270 #ñi‡
deföed
 
_AIX


271 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

272 #ñi‡
deföed
 
_MSC_VER


273 
	~<mÆloc.h
>

274 
	#Æloˇ
 
_Æloˇ


	)

276 
	#YYSTACK_ALLOC
 
Æloˇ


	)

277 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

278 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

279 
	~<°dlib.h
>

280 #i‚de‡
_STDLIB_H


281 
	#_STDLIB_H
 1

	)

288 #ifde‡
YYSTACK_ALLOC


290 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

291 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


296 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

299 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

300 
	#YYSTACK_FREE
 
YYFREE


	)

301 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


302 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

304 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

305 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

306 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

307 
	~<°dlib.h
>

308 #i‚de‡
_STDLIB_H


309 
	#_STDLIB_H
 1

	)

312 #i‚de‡
YYMALLOC


313 
	#YYMALLOC
 
mÆloc


	)

314 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

315 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

316 *
mÆloc
 (
YYSIZE_T
);

319 #i‚de‡
YYFREE


320 
	#YYFREE
 
‰ì


	)

321 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

322 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

323 
‰ì
 (*);

330 #i‡(! 
deföed
 
yyovîÊow
 \

331 && (! 
deföed
 
	g__˝lu•lus
 \

332 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

335 
	uyyÆloc


337 
yyty≥_öt16
 
	myyss_Æloc
;

338 
YYSTYPE
 
	myyvs_Æloc
;

342 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

346 
	#YYSTACK_BYTES
(
N
) \

347 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

348 + 
YYSTACK_GAP_MAXIMUM
)

	)

352 #i‚de‡
YYCOPY


353 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

354 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

355 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

357 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

360 
YYSIZE_T
 
yyi
; \

361 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

362 (
To
)[
yyi
] = (
From
)[yyi]; \

364 
	`YYID
 (0))

	)

373 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

376 
YYSIZE_T
 
yy√wbyãs
; \

377 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

378 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

379 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

380 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

382 
	`YYID
 (0))

	)

387 
	#YYFINAL
 3

	)

389 
	#YYLAST
 30

	)

392 
	#YYNTOKENS
 21

	)

394 
	#YYNNTS
 11

	)

396 
	#YYNRULES
 17

	)

398 
	#YYNSTATES
 39

	)

401 
	#YYUNDEFTOK
 2

	)

402 
	#YYMAXUTOK
 275

	)

404 
	#YYTRANSLATE
(
YYX
) \

405 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

408 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

440 #i‡
YYDEBUG


443 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

450 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

461 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

468 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


471 c⁄° *c⁄° 
	gyyäame
[] =

482 #ifde‡
YYPRINT


485 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

494 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

501 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

510 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

519 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

527 
	#YYPACT_NINF
 -18

	)

528 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

537 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

547 
	#YYTABLE_NINF
 -1

	)

548 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

556 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

566 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

574 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

575 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

576 
	#YYEMPTY
 (-2)

	)

577 
	#YYEOF
 0

	)

579 
	#YYACCEPT
 
yyac˚±œb


	)

580 
	#YYABORT
 
yyab‹éab


	)

581 
	#YYERROR
 
yyîr‹œb


	)

588 
	#YYFAIL
 
yyîæab


	)

590 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

592 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

594 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

596 
yych¨
 = (
Tokí
); \

597 
yylvÆ
 = (
VÆue
); \

598 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

599 
	`YYPOPSTACK
 (1); \

600 
yybackup
; \

604 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

605 
YYERROR
; \

607 
	`YYID
 (0))

	)

610 
	#YYTERROR
 1

	)

611 
	#YYERRCODE
 256

	)

618 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

619 #i‚de‡
YYLLOC_DEFAULT


620 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

622 i‡(
	`YYID
 (
N
)) \

624 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

625 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

626 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

627 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

631 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

632 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

633 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

634 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

636 
	`YYID
 (0))

	)

644 #i‚de‡
YY_LOCATION_PRINT


645 #i‡
YYLTYPE_IS_TRIVIAL


646 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

647 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

648 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

649 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

651 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

658 #ifde‡
YYLEX_PARAM


659 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

661 
	#YYLEX
 
	`yyÀx
 ()

	)

665 #i‡
YYDEBUG


667 #i‚de‡
YYFPRINTF


668 
	~<°dio.h
>

669 
	#YYFPRINTF
 
Ârötf


	)

672 
	#YYDPRINTF
(
Args
) \

674 i‡(
yydebug
) \

675 
YYFPRINTF
 
Args
; \

676 } 
	`YYID
 (0))

	)

678 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

680 i‡(
yydebug
) \

682 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

683 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

684 
Ty≥
, 
VÆue
); \

685 
	`YYFPRINTF
 (
°dîr
, "\n"); \

687 } 
	`YYID
 (0))

	)

695 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

696 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

698 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

701 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

702 
FILE
 *
yyouçut
;

703 
yyty≥
;

704 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

707 i‡(!
yyvÆuï
)

709 #ifde‡
YYPRINT


710 i‡(
yyty≥
 < 
YYNTOKENS
)

711 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

713 
	`YYUSE
 (
yyouçut
);

715 
yyty≥
)

720 
	}
}

727 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

728 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

730 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

733 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

734 
FILE
 *
yyouçut
;

735 
yyty≥
;

736 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

739 i‡(
yyty≥
 < 
YYNTOKENS
)

740 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

742 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

744 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

745 
	`YYFPRINTF
 (
yyouçut
, ")");

746 
	}
}

753 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

754 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

756 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

759 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

760 
yyty≥_öt16
 *
yybŸtom
;

761 
yyty≥_öt16
 *
yyt›
;

764 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

765 ; 
yybŸtom
 <
yyt›
; yybottom++)

767 
yybŸ
 = *
yybŸtom
;

768 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

770 
	`YYFPRINTF
 (
°dîr
, "\n");

771 
	}
}

773 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

775 i‡(
yydebug
) \

776 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

777 } 
	`YYID
 (0))

	)

784 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

785 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

787 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

790 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

791 
YYSTYPE
 *
yyv•
;

792 
yyruÀ
;

795 
yyƒhs
 = 
yyr2
[
yyruÀ
];

796 
yyi
;

797 
yy o
 = 
yyæöe
[
yyruÀ
];

798 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

799 
yyruÀ
 - 1, 
yy o
);

801 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

803 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

804 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

805 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

807 
	`YYFPRINTF
 (
°dîr
, "\n");

809 
	}
}

811 
	#YY_REDUCE_PRINT
(
RuÀ
) \

813 i‡(
yydebug
) \

814 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

815 } 
	`YYID
 (0))

	)

819 
	gyydebug
;

821 
	#YYDPRINTF
(
Args
)

	)

822 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

823 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

824 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

829 #i‚def 
YYINITDEPTH


830 
	#YYINITDEPTH
 200

	)

840 #i‚de‡
YYMAXDEPTH


841 
	#YYMAXDEPTH
 10000

	)

846 #i‡
YYERROR_VERBOSE


848 #i‚de‡
yy°æí


849 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


850 
	#yy°æí
 
°æí


	)

853 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

854 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

855 
YYSIZE_T


856 
	$yy°æí
 (c⁄° *
yy°r
)

858 
YYSIZE_T


859 
	$yy°æí
 (
yy°r
)

860 c⁄° *
yy°r
;

863 
YYSIZE_T
 
yyÀn
;

864 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

866  
yyÀn
;

867 
	}
}

871 #i‚de‡
yy°p˝y


872 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


873 
	#yy°p˝y
 
°p˝y


	)

877 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

878 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

880 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

883 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

884 *
yyde°
;

885 c⁄° *
yy§c
;

888 *
yyd
 = 
yyde°
;

889 c⁄° *
yys
 = 
yy§c
;

891 (*
yyd
++ = *
yys
++) != '\0')

894  
yyd
 - 1;

895 
	}
}

899 #i‚de‡
yyäamîr


907 
YYSIZE_T


908 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

910 i‡(*
yy°r
 == '"')

912 
YYSIZE_T
 
yyn
 = 0;

913 c⁄° *
yyp
 = 
yy°r
;

916 *++
yyp
)

920 
do_nŸ_°rù_quŸes
;

923 i‡(*++
yyp
 != '\\')

924 
do_nŸ_°rù_quŸes
;

927 i‡(
yyªs
)

928 
yyªs
[
yyn
] = *
yyp
;

929 
yyn
++;

933 i‡(
yyªs
)

934 
yyªs
[
yyn
] = '\0';

935  
yyn
;

937 
do_nŸ_°rù_quŸes
: ;

940 i‡(! 
yyªs
)

941  
	`yy°æí
 (
yy°r
);

943  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

944 
	}
}

954 
YYSIZE_T


955 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

957 
yyn
 = 
yy∑˘
[
yy°©e
];

959 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

963 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

964 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

965 
YYSIZE_T
 
yysize
 = 
yysize0
;

966 
YYSIZE_T
 
yysize1
;

967 
yysize_ovîÊow
 = 0;

968 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

969 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

970 
yyx
;

975 
	`YY_
("syntaxÉrror, unexpected %s");

976 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

977 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

978 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

979 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

981 *
yyfmt
;

982 c⁄° *
yyf
;

983 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

984 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

985 c⁄° 
yy‹
[] = " or %s";

986 
yyf‹m©
[ 
yyu√x≥˘ed


987 +  
yyex≥˘ög
 - 1

988 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

989 * ( 
yy‹
 - 1))];

990 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

994 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

997 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

998 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

999 
yycou¡
 = 1;

1001 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1002 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1004 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1005 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1007 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1009 
yycou¡
 = 1;

1010 
yysize
 = 
yysize0
;

1011 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1014 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1015 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1016 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1017 
yysize
 = 
yysize1
;

1018 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1019 
yy¥efix
 = 
yy‹
;

1022 
yyf
 = 
	`YY_
(
yyf‹m©
);

1023 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1024 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1025 
yysize
 = 
yysize1
;

1027 i‡(
yysize_ovîÊow
)

1028  
YYSIZE_MAXIMUM
;

1030 i‡(
yyªsu…
)

1035 *
yyp
 = 
yyªsu…
;

1036 
yyi
 = 0;

1037 (*
yyp
 = *
yyf
) != '\0')

1039 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1041 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1042 
yyf
 += 2;

1046 
yyp
++;

1047 
yyf
++;

1051  
yysize
;

1053 
	}
}

1062 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1063 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1065 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1068 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1069 c⁄° *
yymsg
;

1070 
yyty≥
;

1071 
YYSTYPE
 *
yyvÆuï
;

1074 
	`YYUSE
 (
yyvÆuï
);

1076 i‡(!
yymsg
)

1077 
yymsg
 = "Deleting";

1078 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1080 
yyty≥
)

1086 
	}
}

1089 #ifde‡
YYPARSE_PARAM


1090 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1091 
yy∑r£
 (*
YYPARSE_PARAM
);

1093 
yy∑r£
 ();

1096 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1097 
yy∑r£
 ();

1099 
yy∑r£
 ();

1105 
	gyych¨
;

1108 
YYSTYPE
 
	gyylvÆ
;

1111 
	gyy√ºs
;

1119 #ifde‡
YYPARSE_PARAM


1120 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1121 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1123 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1126 
	$yy∑r£
 (
YYPARSE_PARAM
)

1127 *
YYPARSE_PARAM
;

1130 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1131 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1133 
	$yy∑r£
 ()

1136 
	$yy∑r£
 ()

1143 
yy°©e
;

1145 
yyîr°©us
;

1155 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1156 
yyty≥_öt16
 *
yyss
;

1157 
yyty≥_öt16
 *
yys•
;

1160 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1161 
YYSTYPE
 *
yyvs
;

1162 
YYSTYPE
 *
yyv•
;

1164 
YYSIZE_T
 
yy°acksize
;

1166 
yyn
;

1167 
yyªsu…
;

1169 
yytokí
;

1172 
YYSTYPE
 
yyvÆ
;

1174 #i‡
YYERROR_VERBOSE


1176 
yymsgbuf
[128];

1177 *
yymsg
 = 
yymsgbuf
;

1178 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1181 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1185 
yyÀn
 = 0;

1187 
yytokí
 = 0;

1188 
yyss
 = 
yysß
;

1189 
yyvs
 = 
yyvß
;

1190 
yy°acksize
 = 
YYINITDEPTH
;

1192 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1194 
yy°©e
 = 0;

1195 
yyîr°©us
 = 0;

1196 
yy√ºs
 = 0;

1197 
yych¨
 = 
YYEMPTY
;

1203 
yys•
 = 
yyss
;

1204 
yyv•
 = 
yyvs
;

1206 
yy£t°©e
;

1211 
yy√w°©e
:

1214 
yys•
++;

1216 
yy£t°©e
:

1217 *
yys•
 = 
yy°©e
;

1219 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1222 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1224 #ifde‡
yyovîÊow


1229 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1230 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1236 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1237 &
yyss1
, 
yysize
 *  (*
yys•
),

1238 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1239 &
yy°acksize
);

1241 
yyss
 = 
yyss1
;

1242 
yyvs
 = 
yyvs1
;

1245 #i‚de‡
YYSTACK_RELOCATE


1246 
yyexhau°edœb
;

1249 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1250 
yyexhau°edœb
;

1251 
yy°acksize
 *= 2;

1252 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1253 
yy°acksize
 = 
YYMAXDEPTH
;

1256 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1257 
yyÆloc
 *
yy±r
 =

1258 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1259 i‡(! 
yy±r
)

1260 
yyexhau°edœb
;

1261 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1262 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1263 #unde‡
YYSTACK_RELOCATE


1264 i‡(
yyss1
 !
yysß
)

1265 
	`YYSTACK_FREE
 (
yyss1
);

1270 
yys•
 = 
yyss
 + 
yysize
 - 1;

1271 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1273 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1274 (Ë
yy°acksize
));

1276 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1277 
YYABORT
;

1280 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1282 i‡(
yy°©e
 =
YYFINAL
)

1283 
YYACCEPT
;

1285 
yybackup
;

1290 
yybackup
:

1296 
yyn
 = 
yy∑˘
[
yy°©e
];

1297 i‡(
yyn
 =
YYPACT_NINF
)

1298 
yydeÁu…
;

1303 i‡(
yych¨
 =
YYEMPTY
)

1305 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1306 
yych¨
 = 
YYLEX
;

1309 i‡(
yych¨
 <
YYEOF
)

1311 
yych¨
 = 
yytokí
 = 
YYEOF
;

1312 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1316 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1317 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1322 
yyn
 +
yytokí
;

1323 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1324 
yydeÁu…
;

1325 
yyn
 = 
yyèbÀ
[yyn];

1326 i‡(
yyn
 <= 0)

1328 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1329 
yyîæab
;

1330 
yyn
 = -yyn;

1331 
yyªdu˚
;

1336 i‡(
yyîr°©us
)

1337 
yyîr°©us
--;

1340 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1343 
yych¨
 = 
YYEMPTY
;

1345 
yy°©e
 = 
yyn
;

1346 *++
yyv•
 = 
yylvÆ
;

1348 
yy√w°©e
;

1354 
yydeÁu…
:

1355 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1356 i‡(
yyn
 == 0)

1357 
yyîæab
;

1358 
yyªdu˚
;

1364 
yyªdu˚
:

1366 
yyÀn
 = 
yyr2
[
yyn
];

1376 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1379 
	`YY_REDUCE_PRINT
 (
yyn
);

1380 
yyn
)

1387 
	`addCuobjdumpSe˘i⁄
(0);

1388 
	`¢¥ötf
(
fûíame
, 1024, "_cuobjdump_%d.±x", 
±x£rül
++);

1389 
±xfûe
 = 
	`f›í
(
fûíame
, "w");

1390 
	`£tCuobjdumµtxfûíame
(
fûíame
);

1399 
	`f˛o£
(
±xfûe
);

1408 
	`addCuobjdumpSe˘i⁄
(1);

1409 
	`¢¥ötf
(
fûíame
, 1024, "_cuobjdump_%d.ñf", 
ñf£rül
);

1410 
ñffûe
 = 
	`f›í
(
fûíame
, "w");

1411 
	`£tCuobjdum≥lffûíame
(
fûíame
);

1420 
	`f˛o£
(
ñffûe
);

1421 
	`¢¥ötf
(
fûíame
, 1024, "_cuobjdump_%d.ßss", 
ñf£rül
++);

1422 
ßssfûe
 = 
	`f›í
(
fûíame
, "w");

1423 
	`£tCuobjdumpßssfûíame
(
fûíame
);

1432 
	`f˛o£
(
ßssfûe
);

1440 {
	`£tCuobjdum∑rch
((
yyv•
[(4Ë- (19)].
°rög_vÆue
)); 
	`£tCuobjdumpidítifõr
((yyvsp[(19) - (19)].string_value));;}

1447 {
	`Ârötf
(
±xfûe
, "%s", (
yyv•
[(2Ë- (2)].
°rög_vÆue
));;}

1454 {
	`Ârötf
(
ñffûe
, "%s", (
yyv•
[(2Ë- (2)].
°rög_vÆue
));;}

1461 {
	`Ârötf
(
ßssfûe
, "%s", (
yyv•
[(2Ë- (2)].
°rög_vÆue
));}

1470 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1472 
	`YYPOPSTACK
 (
yyÀn
);

1473 
yyÀn
 = 0;

1474 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1476 *++
yyv•
 = 
yyvÆ
;

1482 
yyn
 = 
yyr1
[yyn];

1484 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1485 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1486 
yy°©e
 = 
yyèbÀ
[yystate];

1488 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1490 
yy√w°©e
;

1496 
yyîæab
:

1498 i‡(!
yyîr°©us
)

1500 ++
yy√ºs
;

1501 #i‡! 
YYERROR_VERBOSE


1502 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1505 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1506 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1508 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1509 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1510 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1511 i‡(
yymsg
 !
yymsgbuf
)

1512 
	`YYSTACK_FREE
 (
yymsg
);

1513 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1514 i‡(
yymsg
)

1515 
yymsg_Æloc
 = 
yyÆloc
;

1518 
yymsg
 = 
yymsgbuf
;

1519 
yymsg_Æloc
 =  
yymsgbuf
;

1523 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1525 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1526 
	`yyîr‹
 (
yymsg
);

1530 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1531 i‡(
yysize
 != 0)

1532 
yyexhau°edœb
;

1540 i‡(
yyîr°©us
 == 3)

1545 i‡(
yych¨
 <
YYEOF
)

1548 i‡(
yych¨
 =
YYEOF
)

1549 
YYABORT
;

1553 
	`yyde°ru˘
 ("Error: discarding",

1554 
yytokí
, &
yylvÆ
);

1555 
yych¨
 = 
YYEMPTY
;

1561 
yyîæab1
;

1567 
yyîr‹œb
:

1573 
yyîr‹œb
;

1577 
	`YYPOPSTACK
 (
yyÀn
);

1578 
yyÀn
 = 0;

1579 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1580 
yy°©e
 = *
yys•
;

1581 
yyîæab1
;

1587 
yyîæab1
:

1588 
yyîr°©us
 = 3;

1592 
yyn
 = 
yy∑˘
[
yy°©e
];

1593 i‡(
yyn
 !
YYPACT_NINF
)

1595 
yyn
 +
YYTERROR
;

1596 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1598 
yyn
 = 
yyèbÀ
[yyn];

1599 i‡(0 < 
yyn
)

1605 i‡(
yys•
 =
yyss
)

1606 
YYABORT
;

1609 
	`yyde°ru˘
 ("Error:Öopping",

1610 
yy°os
[
yy°©e
], 
yyv•
);

1611 
	`YYPOPSTACK
 (1);

1612 
yy°©e
 = *
yys•
;

1613 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1616 *++
yyv•
 = 
yylvÆ
;

1620 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1622 
yy°©e
 = 
yyn
;

1623 
yy√w°©e
;

1629 
yyac˚±œb
:

1630 
yyªsu…
 = 0;

1631 
yyªtu∫
;

1636 
yyab‹éab
:

1637 
yyªsu…
 = 1;

1638 
yyªtu∫
;

1640 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1644 
yyexhau°edœb
:

1645 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1646 
yyªsu…
 = 2;

1650 
yyªtu∫
:

1651 i‡(
yych¨
 !
YYEMPTY
)

1652 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1653 
yytokí
, &
yylvÆ
);

1656 
	`YYPOPSTACK
 (
yyÀn
);

1657 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1658 
yys•
 !
yyss
)

1660 
	`yyde°ru˘
 ("Cleanup:Öopping",

1661 
yy°os
[*
yys•
], 
yyv•
);

1662 
	`YYPOPSTACK
 (1);

1664 #i‚de‡
yyovîÊow


1665 i‡(
yyss
 !
yysß
)

1666 
	`YYSTACK_FREE
 (
yyss
);

1668 #i‡
YYERROR_VERBOSE


1669 i‡(
yymsg
 !
yymsgbuf
)

1670 
	`YYSTACK_FREE
 (
yymsg
);

1673  
	`YYID
 (
yyªsu…
);

1674 
	}
}

	@libcuda/cuobjdump_parser.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mH_SEPARATOR
 = 258,

43 
	mH_ARCH
 = 259,

44 
	mH_CODEVERSION
 = 260,

45 
	mH_PRODUCER
 = 261,

46 
	mH_HOST
 = 262,

47 
	mH_COMPILESIZE
 = 263,

48 
	mH_IDENTIFIER
 = 264,

49 
	mCODEVERSION
 = 265,

50 
	mSTRING
 = 266,

51 
	mFILENAME
 = 267,

52 
	mDECIMAL
 = 268,

53 
	mPTXHEADER
 = 269,

54 
	mELFHEADER
 = 270,

55 
	mPTXLINE
 = 271,

56 
	mELFLINE
 = 272,

57 
	mSASSLINE
 = 273,

58 
	mIDENTIFIER
 = 274,

59 
	mNEWLINE
 = 275

65 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


66 
	uYYSTYPE


72 * 
	m°rög_vÆue
;

78 } 
	tYYSTYPE
;

79 
	#YYSTYPE_IS_TRIVIAL
 1

	)

80 
	#yy°y≥
 
YYSTYPE


	)

81 
	#YYSTYPE_IS_DECLARED
 1

	)

84 
YYSTYPE
 
cuobjdump_lvÆ
;

	@libopencl/nvopencl_wrapper.cc

62 
	~<CL/˛.h
>

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

66 
	~<°d¨g.h
>

68 
	#PREAMBLE
 "GPGPU-SimÇv›í˛_wøµî"

	)

70 
	$vmyexô
(
code
, c⁄° *
°r
,
va_li°
 
≠
)

72 
buf„r
[1024];

73 
	`¢¥ötf
(
buf„r
,1024,"%s: ERROR ** %s\n", 
PREAMBLE
, 
°r
);

74 
	`v¥ötf
(
buf„r
,
≠
);

75 
	`fÊush
(
°dout
);

76 if–
code
 )

77 
	`exô
(
code
);

78 
	}
}

79 
	$myexô
(
code
, c⁄° *
°r
, ... )

81 
va_li°
 
≠
;

82 
	`va_°¨t
(
≠
,
°r
);

83 
	`vmyexô
(
code
,
°r
,
≠
);

84 
	`va_íd
(
≠
);

85 
	}
}

86 
	$maö
(
¨gc
, c⁄° **
¨gv
)

88 
˛_c⁄ãxt
 
c⁄ãxt
;

89 
˛_¥ogøm
 
pgm
;

90 
˛_öt
 
îrcode
;

91 
˛_uöt
 
num_devi˚s
;

93 
boﬁ
 
debug
=
Ál£
;

95 
	`¥ötf
("%s: comm™dÜöê\'",
PREAMBLE
);

96  
i
=0; i < 
¨gc
; i++ ) {

97 
	`¥ötf
("%s", 
¨gv
[
i
]);

98 if–(
i
+1Ë< 
¨gc
 ) 
	`¥ötf
(" ");

100 
	`¥ötf
("'\n");

102 if–!
	`°∫cmp
(
¨gv
[1],"-d",2) ) {

103 
	`¥ötf
("nvopencl_wrapper started\n");

104 
	`fÊush
(
°dout
);

105 
debug
=
åue
;

106 
¨gv
 =árgv+1;

107 
¨gc
--;

110 
FILE
 *
Â
 = 
	`f›í
(
¨gv
[1],"r");

111 i‡–
Â
 =
NULL
 ) 
	`myexô
(1,"CouldÇŸ o≥¿fûê\'%s\'",
¨gv
[1]);

112 i‡–
debug
 ) { 
	`¥ötf
("›íed \'%s\'\n", 
¨gv
[1]); 
	`fÊush
(
°dout
); }

113 
	`f£ek
(
Â
,0,
SEEK_END
);

114 
size_t
 
sour˚_Àngth
 = 
	`·ñl
(
Â
);

115 i‡–
sour˚_Àngth
 =0 ) 
	`myexô
(2,"OpenCL file isÉmpty");

116 i‡–
debug
 ) { 
	`¥ötf
("fûê\'%s\' ha†Àngth %zu byãs\n", 
¨gv
[1], 
sour˚_Àngth
); 
	`fÊush
(
°dout
); }

117 *
sour˚
 = (*)
	`ˇŒoc
(
sour˚_Àngth
+1,1);

118 i‡–
sour˚
 =0 ) 
	`myexô
(2,"Memoryállocation failed");

119 
	`f£ek
(
Â
,0,
SEEK_SET
);

120 
	`‰ód
(
sour˚
,1,
sour˚_Àngth
,
Â
);

121 i‡–
debug
 ) { 
	`¥ötf
–"ªad i¿fûê\'%s\'\n", 
¨gv
[1] ); 
	`fÊush
(
°dout
); }

123 
buf„r
[1024];

124 
˛_uöt
 
num_∂©f‹ms
;

125 
˛_∂©f‹m_id
* 
∂©f‹ms
;

127 
îrcode
 = 
	`˛GëPœtf‹mIDs
(0, 
NULL
, &
num_∂©f‹ms
);

128 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(1,"clGetPlatformaIDsÑeturned %d",errcode);

129 i‡–
num_∂©f‹ms
 =0 ) 
	`myexô
(2,"No OpenCLÖlatforms found");

130 
∂©f‹ms
 = (
˛_∂©f‹m_id
*)
	`mÆloc
(
num_∂©f‹ms
 * (cl_platform_id));

131 
îrcode
 = 
	`˛GëPœtf‹mIDs
(
num_∂©f‹ms
, 
∂©f‹ms
, 
NULL
);

132 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(3,"clGetPlatformIDsÑeturned %d",errcode);

133 
îrcode
 = 
	`˛GëPœtf‹mInfo
(
∂©f‹ms
[0], 
CL_PLATFORM_NAME
, 1024, &
buf„r
, 
NULL
);

134 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(3,"clGetPlatformInfoÑeturned %d",errcode);

135 
	`¥ötf
("%s: Gíî©ög PTX usög O≥nCLÖœtf‹m \'%s\'\n",
PREAMBLE
,
buf„r
);

137 
îrcode
 = 
	`˛GëDevi˚IDs
(
∂©f‹ms
[0], 
CL_DEVICE_TYPE_GPU
, 0, 
NULL
, &
num_devi˚s
);

138 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(4,"clGetDeviceIDsÑeturned %d",errcode);

139 
	`¥ötf
("%s: found %uÇ©ivêO≥nCL devi˚s\n",
PREAMBLE
,
num_devi˚s
);

141 
˛_devi˚_id
 *
devi˚s
 = (˛_devi˚_id *)
	`mÆloc
(
num_devi˚s
 * (cl_device_id) );

142 
îrcode
 = 
	`˛GëDevi˚IDs
(
∂©f‹ms
[0], 
CL_DEVICE_TYPE_GPU
, 
num_devi˚s
, 
devi˚s
, 
NULL
);

143 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(5,"clGetDeviceIDsÑeturned %d",errcode);

144 
c⁄ãxt
 = 
	`˛Cª©eC⁄ãxt
(0, 
num_devi˚s
, 
devi˚s
, 
NULL
, NULL, &
îrcode
);

145 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(6,"clCreateContextÑeturned %d",errcode);

146 
pgm
 = 
	`˛Cª©eProgømWôhSour˚
(
c⁄ãxt
, 1, (c⁄° **)&
sour˚
, &
sour˚_Àngth
, &
îrcode
);

147 if–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(7,"clCreateProgramWithSourceÑeturned %d",errcode);

149 
›ti⁄s
[4096];

150 
n
=0;

151 
›ti⁄s
[0]=0;

152  
i
=3; i < 
¨gc
; i++ ) {

153 
	`¢¥ötf
(
›ti⁄s
+
n
,4096-n," %†", 
¨gv
[
i
] );

154 
n
+
	`°æí
(
¨gv
[
i
]);

155 
n
+= 2;

157 
îrcode
 = 
	`˛BuûdProgøm
(
pgm
, 0, 
NULL
, 
›ti⁄s
, NULL, NULL);

158 i‡–
îrcode
 !
CL_SUCCESS
 ) {

159 
	`¥ötf
("%s: clBuûdProgømÑëu∫ed %d (îr‹Ë-- buûdÜog:\n\n",
PREAMBLE
,
îrcode
);

160 
size_t
 
buûd_log_Àngth
=0;

161 
îrcode
 = 
	`˛GëProgømBuûdInfo
(
pgm
,
devi˚s
[0],
CL_PROGRAM_BUILD_LOG
,0,
NULL
,&
buûd_log_Àngth
);

162 if–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(8,"clGetProgramBuildInfoÑeturned %d",errcode);

163 *
buûd_log
 = (*)
	`ˇŒoc
(1,
buûd_log_Àngth
);

164 
îrcode
 = 
	`˛GëProgømBuûdInfo
(
pgm
,
devi˚s
[0],
CL_PROGRAM_BUILD_LOG
,
buûd_log_Àngth
,

165 
buûd_log
,&
buûd_log_Àngth
);

166 
	`¥ötf
("%s",
buûd_log
);

167 
	`¥ötf
("\n\n%s:Énd o‡buûdÜog\n", 
PREAMBLE
);

168 
	`¥ötf
("%s:ÉxôögÉ¨ly beˇu£ÅhêO≥nCL codêhadÉº‹†(£êabove).\n", 
PREAMBLE
);

169 
	`exô
(8);

172 
size_t
 
nbyãs1
=0;

173 
îrcode
 = 
	`˛GëProgømInfo
(
pgm
,
CL_PROGRAM_NUM_DEVICES
,(
˛_uöt
),&
num_devi˚s
,&
nbyãs1
);

174 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(9,"clGetProgramInfoÑeturned %d",errcode);

176 
size_t
 
nbyãs2
=0;

177 
size_t
 *
bö¨y_sizes
 = (size_t*)
	`ˇŒoc
(
num_devi˚s
,(size_t));

178 
îrcode
 = 
	`˛GëProgømInfo
(
pgm
,
CL_PROGRAM_BINARY_SIZES
,(
size_t
)*
num_devi˚s
,
bö¨y_sizes
,&
nbyãs2
);

179 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(10,"clGetProgramInfoÑeturned %d",errcode);

181 **
bö¨õs
 = (**)
	`ˇŒoc
(
num_devi˚s
,(*));

182 
size_t
 
byãs_to_ªad
 = 0;

184 
i
=0; i < 
num_devi˚s
; i++ ) {

185 
bö¨õs
[
i
] = (*Ë
	`ˇŒoc
(
bö¨y_sizes
[i],1);

186 
byãs_to_ªad
 +
bö¨y_sizes
[
i
];

189 
size_t
 
nbyãs3
=0;

190 
îrcode
 = 
	`˛GëProgømInfo
(
pgm
,
CL_PROGRAM_BINARIES
,
byãs_to_ªad
,
bö¨õs
,&
nbyãs3
);

191 i‡–
îrcode
 !
CL_SUCCESS
 ) 
	`myexô
(11,"clGetProgramInfoÑeturned %d",errcode);

193 
Â
 = 
	`f›í
(
¨gv
[2],"w");

194 
	`Ârötf
(
Â
,"%s",
bö¨õs
[0]);

195 
	`f˛o£
(
Â
);

197 
	}
}

	@libopencl/opencl_runtime_api.cc

64 
	~<°dlib.h
>

65 
	~<°dio.h
>

66 
	~<°rög.h
>

67 
	~<as£π.h
>

68 
	~<time.h
>

69 #ifde‡
OPENGL_SUPPORT


70 
	#GL_GLEXT_PROTOTYPES


	)

71 
	~<GL/gl.h
>

74 
	#__CUDA_RUNTIME_API_H__


	)

75 
	~"ho°_deföes.h
"

76 
	~"buûtö_ty≥s.h
"

77 
	~"__cudaF©F‹m©.h
"

78 
	~"../§c/ab°ø˘_h¨dw¨e_modñ.h
"

79 
	~"../§c/cuda-sim/cuda-sim.h
"

80 
	~"../§c/cuda-sim/±x_lﬂdî.h
"

81 
	~"../§c/cuda-sim/±x_ú.h
"

82 
	~"../§c/gpgpusim_íåypoöt.h
"

83 
	~"../§c/gpgpu-sim/gpu-sim.h
"

84 
	~"../§c/gpgpu-sim/shadî.h
"

87 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

88 
	#__my_func__
 
__func__


	)

90 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

91 
	#__my_func__
 
__my_func__


	)

93 
	#__my_func__
 ((
__c⁄°
 *Ë0)

	)

97 
	~<CL/˛.h
>

99 
	~<m≠
>

100 
	~<°rög
>

102 
	s_˛_c⁄ãxt
 {

103 
_˛_c⁄ãxt
–
˛_devi˚_id
 
gpu
 );

104 
˛_devi˚_id
 
gë_fú°_devi˚
();

105 
˛_mem
 
Cª©eBuf„r
(

106 
˛_mem_Êags
 
Êags
,

107 
size_t
 
size
 ,

108 * 
ho°_±r
,

109 
˛_öt
 * 
îrcode_ªt
 );

110 
˛_mem
 
lookup_mem
–˛_mem 
m
 );

111 
	m¥iv©e
:

112 
m_uid
;

113 
˛_devi˚_id
 
	mm_gpu
;

114 
	msm_c⁄ãxt_uid
;

116 
	m°d
::
m≠
<* ,
	m˛_mem
> 
	mm_ho°±r_to_˛_mem
;

117 
	m°d
::
m≠
<
˛_mem
 ,
	m˛_mem
> 
	mm_dev±r_to_˛_mem
;

120 
	s_˛_devi˚_id
 {

121 
_˛_devi˚_id
(
gpgpu_sim
* 
gpu
Ë{
	mm_id
 = 0; 
	mm_√xt
 = 
NULL
; 
	mm_gpgpu
=gpu;}

122 
_˛_devi˚_id
 *
√xt
(Ë{  
	mm_√xt
; }

123 
gpgpu_sim
 *
the_devi˚
(Ëc⁄° {  
	mm_gpgpu
; }

124 
	m¥iv©e
:

125 
m_id
;

126 
gpgpu_sim
 *
	mm_gpgpu
;

127 
_˛_devi˚_id
 *
	mm_√xt
;

130 
	s_˛_comm™d_queue


132 
_˛_comm™d_queue
–
˛_c⁄ãxt
 
c⁄ãxt
, 
˛_devi˚_id
 
devi˚
, 
˛_comm™d_queue_¥›îtõs
 
¥›îtõs
 )

134 
	mm_vÆid
 = 
åue
;

135 
	mm_c⁄ãxt
 = 
c⁄ãxt
;

136 
	mm_devi˚
 = 
devi˚
;

137 
	mm_¥›îtõs
 = 
¥›îtõs
;

139 
boﬁ
 
is_vÆid
(Ë{  
	mm_vÆid
; }

140 
˛_c⁄ãxt
 
gë_c⁄ãxt
(Ë{  
	mm_c⁄ãxt
; }

141 
˛_devi˚_id
 
gë_devi˚
(Ë{  
	mm_devi˚
; }

142 
˛_comm™d_queue_¥›îtõs
 
gë_¥›îtõs
(Ë{  
	mm_¥›îtõs
; }

143 
	m¥iv©e
:

144 
boﬁ
 
m_vÆid
;

145 
˛_c⁄ãxt
 
	mm_c⁄ãxt
;

146 
˛_devi˚_id
 
	mm_devi˚
;

147 
˛_comm™d_queue_¥›îtõs
 
	mm_¥›îtõs
;

150 
	s_˛_mem
 {

151 
_˛_mem
–
˛_mem_Êags
 
Êags
, 
size_t
 
size
 , *
ho°_±r
, 
˛_öt
 *
îrcode_ªt
, 
˛_devi˚_id
 
gpu
 );

152 
˛_mem
 
devi˚_±r
();

153 * 
ho°_±r
();

154 
boﬁ
 
is_⁄_ho°
(Ë{  
	mm_is_⁄_ho°
; }

155 
	m¥iv©e
:

156 
boﬁ
 
m_is_⁄_ho°
;

157 
size_t
 
	mm_devi˚_±r
;

158 *
	mm_ho°_±r
;

159 
˛_mem_Êags
 
	mm_Êags
;

160 
size_t
 
	mm_size
;

163 
	spgm_öfo
 {

164 
	m°d
::
°rög
 
m_sour˚
;

165 
	m°d
::
°rög
 
m_asm
;

166 
˛ass
 
symbﬁ_èbÀ
 *
	mm_symèb
;

167 
	m°d
::
m≠
<
°d
::
°rög
,
	mfun˘i⁄_öfo
*> 
	mm_kî√ls
;

170 
	s_˛_¥ogøm
 {

171 
_˛_¥ogøm
–
˛_c⁄ãxt
 
c⁄ãxt
,

172 
˛_uöt
 
cou¡
,

173 c⁄° ** 
°rögs
,

174 c⁄° 
size_t
 * 
Àngths
 );

175 
Buûd
(c⁄° *
›ti⁄s
);

176 
˛_kî√l
 
Cª©eKî√l
–c⁄° *
kî√l_«me
, 
˛_öt
 *
îrcode_ªt
 );

177 
˛_c⁄ãxt
 
gë_c⁄ãxt
(Ë{  
	mm_c⁄ãxt
; }

178 *
gë_±x
();

179 
size_t
 
gë_±x_size
();

181 
	m¥iv©e
:

182 
˛_c⁄ãxt
 
m_c⁄ãxt
;

183 
	m°d
::
m≠
<
˛_uöt
,
	mpgm_öfo
> 
	mm_pgm
;

186 
	s_˛_kî√l
 {

187 
_˛_kî√l
–
˛_¥ogøm
 
¥og
, c⁄° * 
kî√l_«me
, 
˛ass
 
fun˘i⁄_öfo
 *
kî√l_im∂
 );

188 
SëKî√lArg
(

189 
˛_uöt
 
¨g_ödex
,

190 
size_t
 
¨g_size
,

191 c⁄° * 
¨g_vÆue
 );

192 
˛_öt
 
böd_¨gs
–
gpgpu_±x_sim_¨g_li°_t
 &
¨g_li°
 );

193 
	m°d
::
°rög
 
«me
(Ëc⁄° {  
m_kî√l_«me
; }

194 
size_t
 
gë_w‹kgroup_size
(
˛_devi˚_id
 
devi˚
);

195 
˛_¥ogøm
 
gë_¥ogøm
(Ë{  
	mm_¥og
; }

196 
˛ass
 
fun˘i⁄_öfo
 *
gë_im∂emíèti⁄
(Ë{  
	mm_kî√l_im∂
; }

197 
	m¥iv©e
:

198 
m_uid
;

199 
	msm_c⁄ãxt_uid
;

200 
˛_¥ogøm
 
	mm_¥og
;

202 
	m°d
::
°rög
 
m_kî√l_«me
;

204 
	s¨g_öfo
 {

205 
size_t
 
	mm_¨g_size
;

206 c⁄° *
	mm_¨g_vÆue
;

209 
	m°d
::
m≠
<, 
	m¨g_öfo
> 
	mm_¨gs
;

210 
˛ass
 
fun˘i⁄_öfo
 *
	mm_kî√l_im∂
;

213 
	s_˛_∂©f‹m_id
 {

214 c⁄° 
	mm_uid
 = 0;

217 
_˛_∂©f‹m_id
 
	gg_gpgpu_sim_∂©f‹m_id
;

219 
	$gpgpusim_exô
()

221 
	`ab‹t
();

222 
	}
}

224 
	$gpgpusim_›í˛_w¨nög
–c⁄° * 
func
, 
löe
, c⁄° *
desc
 )

226 
	`¥ötf
("GPGPU-Sim O≥nCL API: W¨nög (%s:%uË** %s\n", 
func
,
löe
,
desc
);

227 
	}
}

229 
	$gpgpusim_›í˛_îr‹
–c⁄° * 
func
, 
löe
, c⁄° *
desc
 )

231 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR (%s:%uË** %s\n", 
func
,
löe
,
desc
);

232 
	`gpgpusim_exô
();

233 
	}
}

235 
	g_˛_kî√l
::
	$_˛_kî√l
–
˛_¥ogøm
 
¥og
, c⁄° * 
kî√l_«me
, 
˛ass
 
fun˘i⁄_öfo
 *
kî√l_im∂
 )

237 
m_uid
 = 
sm_c⁄ãxt_uid
++;

238 
m_kî√l_«me
 = 
°d
::
	`°rög
(
kî√l_«me
);

239 
m_kî√l_im∂
 = 
kî√l_im∂
;

240 
m_¥og
 = 
¥og
;

241 
	}
}

243 
	g_˛_kî√l
::
	$SëKî√lArg
(

244 
˛_uöt
 
¨g_ödex
,

245 
size_t
 
¨g_size
,

246 c⁄° * 
¨g_vÆue
 )

248 
¨g_öfo
 
¨g
;

249 
¨g
.
m_¨g_size
 = 
¨g_size
;

250 
¨g
.
m_¨g_vÆue
 = 
¨g_vÆue
;

251 
m_¨gs
[
¨g_ödex
] = 
¨g
;

252 
	}
}

254 
˛_öt
 
	g_˛_kî√l
::
	$böd_¨gs
–
gpgpu_±x_sim_¨g_li°_t
 &
¨g_li°
 )

256 
	`as£π
–
¨g_li°
.
	`em±y
() );

257 
k
=0;

258 
°d
::
m≠
<, 
¨g_öfo
>::
ôî©‹
 
i
;

259  
i
 = 
m_¨gs
.
	`begö
(); i!=m_¨gs.
	`íd
(); i++ ) {

260 if–
i
->
fú°
 !
k
 )

261  
CL_INVALID_KERNEL_ARGS
;

262 
¨g_öfo
 
¨g
 = 
i
->
£c⁄d
;

263 
gpgpu_±x_sim_¨g
 
	`∑øm
–
¨g
.
m_¨g_vÆue
,árg.
m_¨g_size
, 0 );

264 
¨g_li°
.
	`push_‰⁄t
–
∑øm
 );

265 
k
++;

267  
CL_SUCCESS
;

268 
	}
}

270 
	#mö
(
a
,
b
Ë(◊<b)?◊):(b))

	)

272 
size_t
 
	g_˛_kî√l
::
	$gë_w‹kgroup_size
(
˛_devi˚_id
 
devi˚
)

274 
ƒegs
 = 
	`±x_kî√l_ƒegs
–
m_kî√l_im∂
 );

275 
ªsu…_ªgs
 = ()-1;

276 if–
ƒegs
 > 0 )

277 
ªsu…_ªgs
 = 
devi˚
->
	`the_devi˚
()->
	`num_ªgi°îs_≥r_c‹e
(Ë/ ((
ƒegs
+3)&~3);

278 
ªsu…
 = 
devi˚
->
	`the_devi˚
()->
	`thªads_≥r_c‹e
();

279 
ªsu…
 = 
	`mö
‘esu…, 
ªsu…_ªgs
);

280  (
size_t
)
ªsu…
;

281 
	}
}

283 
˛_mem
 
	g_˛_mem
::
	$devi˚_±r
()

285 
˛_mem
 
ªsu…
 = (˛_mem)(*)
m_devi˚_±r
;

286  
ªsu…
;

287 
	}
}

289 * 
	g_˛_mem
::
	$ho°_±r
()

291  
m_ho°_±r
;

292 
	}
}

294 
	g_˛_mem
::
	$_˛_mem
(

295 
˛_mem_Êags
 
Êags
,

296 
size_t
 
size
 ,

297 * 
ho°_±r
,

298 
˛_öt
 * 
îrcode_ªt
,

299 
˛_devi˚_id
 
gpu
 )

301 if–
îrcode_ªt
 )

302 *
îrcode_ªt
 = 
CL_SUCCESS
;

304 
m_is_⁄_ho°
 = 
Ál£
;

305 
m_Êags
 = 
Êags
;

306 
m_size
 = 
size
;

307 
m_ho°_±r
 = 
ho°_±r
;

308 
m_devi˚_±r
 = 0;

310 if–(
Êags
 & (
CL_MEM_USE_HOST_PTR
|
CL_MEM_COPY_HOST_PTR
)Ë&& 
ho°_±r
 =
NULL
 ) {

311 if–
îrcode_ªt
 !
NULL
 )

312 *
îrcode_ªt
 = 
CL_INVALID_HOST_PTR
;

315 if–(
Êags
 & 
CL_MEM_COPY_HOST_PTR
Ë&& (Êag†& 
CL_MEM_USE_HOST_PTR
) ) {

316 if–
îrcode_ªt
 )

317 *
îrcode_ªt
 = 
CL_INVALID_VALUE
;

320 if–
Êags
 & 
CL_MEM_ALLOC_HOST_PTR
 ) {

321 if–
ho°_±r
 )

322 
	`gpgpusim_›í˛_îr‹
(
__my_func__
,
__LINE__
," CL_MEM_ALLOC_HOST_PTR --Çot yet supported/tested.\n");

323 
m_ho°_±r
 = 
	`mÆloc
(
size
);

326 if–
Êags
 & (
CL_MEM_USE_HOST_PTR
|
CL_MEM_ALLOC_HOST_PTR
) ) {

327 
m_is_⁄_ho°
 = 
åue
;

329 
m_is_⁄_ho°
 = 
Ál£
;

331 if–!(
Êags
 & (
CL_MEM_USE_HOST_PTR
|
CL_MEM_ALLOC_HOST_PTR
)) ) {

333 
m_devi˚_±r
 = (
size_t
Ë
gpu
->
	`the_devi˚
()->
	`gpu_mÆloc
(
size
);

334 if–
ho°_±r
 )

335 
gpu
->
	`the_devi˚
()->
	`mem˝y_to_gpu
–
m_devi˚_±r
, 
ho°_±r
, 
size
 );

337 
	}
}

339 
	g_˛_c⁄ãxt
::
	$_˛_c⁄ãxt
–
_˛_devi˚_id
 *
gpu
 )

341 
m_uid
 = 
sm_c⁄ãxt_uid
++;

342 
m_gpu
 = 
gpu
;

343 
	}
}

345 
˛_devi˚_id
 
	g_˛_c⁄ãxt
::
	$gë_fú°_devi˚
()

347  
m_gpu
;

348 
	}
}

350 
˛_mem
 
	g_˛_c⁄ãxt
::
	$Cª©eBuf„r
(

351 
˛_mem_Êags
 
Êags
,

352 
size_t
 
size
 ,

353 * 
ho°_±r
,

354 
˛_öt
 * 
îrcode_ªt
 )

356 if–
ho°_±r
 && (
m_ho°±r_to_˛_mem
.
	`föd
(ho°_±rË!m_ho°±r_to_˛_mem.
	`íd
()) ) {

357 
	`¥ötf
("GPGPU-Sim OpenCL API: WARNING ** clCreateBuffer - bufferálready created forÅhis host variable\n");

359 
˛_mem
 
ªsu…
 = 
√w
 
	`_˛_mem
(
Êags
,
size
,
ho°_±r
,
îrcode_ªt
,
m_gpu
);

360 
m_dev±r_to_˛_mem
[
ªsu…
->
	`devi˚_±r
()] =Ñesult;

361 if–
ho°_±r
 )

362 
m_ho°±r_to_˛_mem
[
ho°_±r
] = 
ªsu…
;

363 if–
ªsu…
->
	`devi˚_±r
() )

364  (
˛_mem
Ë
ªsu…
->
	`devi˚_±r
();

366  (
˛_mem
Ë
ho°_±r
;

367 
	}
}

369 
˛_mem
 
	g_˛_c⁄ãxt
::
	$lookup_mem
–
˛_mem
 
m
 )

371 
°d
::
m≠
<
˛_mem
 ,˛_mem>::
ôî©‹
 
i
=
m_dev±r_to_˛_mem
.
	`föd
(
m
);

372 if–
i
 =
m_dev±r_to_˛_mem
.
	`íd
() ) {

373 *
t
 = (*)
m
;

374 
°d
::
m≠
<* ,
˛_mem
>::
ôî©‹
 
j
 = 
m_ho°±r_to_˛_mem
.
	`föd
(
t
);

375 if–
j
 =
m_ho°±r_to_˛_mem
.
	`íd
() )

376  
NULL
;

378  
j
->
£c⁄d
;

380  
i
->
£c⁄d
;

382 
	}
}

384 
	g_˛_¥ogøm
::
	$_˛_¥ogøm
–
˛_c⁄ãxt
 
c⁄ãxt
,

385 
˛_uöt
 
cou¡
,

386 c⁄° ** 
°rögs
,

387 c⁄° 
size_t
 * 
Àngths
 )

389 
m_c⁄ãxt
 = 
c⁄ãxt
;

390  
˛_uöt
 
i
=0; i<
cou¡
; i++ ) {

391 
Àn
 = 
Àngths
[
i
];

392 *
tmp
 = (*)
	`mÆloc
(
Àn
+1);

393 
	`mem˝y
(
tmp
,
°rögs
[
i
],
Àn
);

394 
tmp
[
Àn
] = 0;

395 
m_pgm
[
i
].
m_sour˚
 = 
tmp
;

396 
	`‰ì
(
tmp
);

398 
	}
}

400 
pgm_öfo
 *
	gsg_öfo
;

402 
	$ªgi°î_±x_fun˘i⁄
–c⁄° *
«me
, 
fun˘i⁄_öfo
 *
im∂
 )

404 
sg_öfo
->
m_kî√ls
[
«me
] = 
im∂
;

405 
	}
}

407 "C" 
	$±xöfo_addöfo
()

409 
	`±xöfo_›í˛_addöfo
–
sg_öfo
->
m_kî√ls
 );

410 
	}
}

412 
_˛_¥ogøm
::
	$Buûd
(c⁄° *
›ti⁄s
)

414 
	`¥ötf
("GPGPU-Sim OpenCL API: compiling OpenCL kernels...\n");

415 
°d
::
m≠
<
˛_uöt
,
pgm_öfo
>::
ôî©‹
 
i
;

416  
i
 = 
m_pgm
.
	`begö
(); i!m_pgm.
	`íd
(); i++ ) {

417 
pgm_öfo
 &
öfo
=
i
->
£c⁄d
;

418 
sg_öfo
 = &
öfo
;

419 
sour˚_num
=
i
->
fú°
;

420 
±x_‚ame
[1024];

421 *
u£_exåa˘ed_±x
 = 
	`gëív
("PTX_SIM_USE_PTX_FILE");

422 if–
u£_exåa˘ed_±x
 =
NULL
 ) {

423 *
nv›í˛_libdú
 = 
	`gëív
("NVOPENCL_LIBDIR");

424 *
gpgpusim_›í˛_∑th
 = 
	`gëív
("GPGPUSIM_ROOT");

425 
boﬁ
 
îr‹
 = 
Ál£
;

426 if–
nv›í˛_libdú
 =
NULL
 ) {

427 
	`¥ötf
("GPGPU-Sim OpenCL API: Please set your NVOPENCL_LIBDIRÉnvironment variableÅo\n"

429 
îr‹
 = 
åue
;

431 if–
gpgpusim_›í˛_∑th
 =
NULL
 ) {

432 
	`Ârötf
(
°dîr
,"GPGPU-Sim OpenCL API: Please set your GPGPUSIM_ROOTÉnvironment variable\n");

433 
	`Ârötf
(
°dîr
,"ÅoÖointÅoÅheÜocation of your GPGPU-Sim installation\n");

434 
îr‹
 = 
åue
;

436 if–
îr‹
 )

437 
	`exô
(1);

439 
˛_‚ame
[1024];

440 c⁄° *
sour˚
 = 
öfo
.
m_sour˚
.
	`c_°r
();

443 *
ld_libøry_∑th_‹ig
 = 
	`gëív
("LD_LIBRARY_PATH");

446 
	`¢¥ötf
(
˛_‚ame
,1024,"_cl_XXXXXX");

447 
	`¢¥ötf
(
±x_‚ame
,1024,"_ptx_XXXXXX");

448 
fd
=
	`mk°emp
(
˛_‚ame
);

449 
	`˛o£
(
fd
);

450 
fd
=
	`mk°emp
(
±x_‚ame
);

451 
	`˛o£
(
fd
);

454 
FILE
 *
Â
 = 
	`f›í
(
˛_‚ame
,"w");

455 if–
Â
 =
NULL
 ) {

456 
	`¥ötf
("GPGPU-Sim OpenCL API: ERROR ** couldÇot createÅemporary filesÑequired for generating PTX\n");

457 
	`¥ötf
(" Ensure you have writeÖermissionÅoÅhe simulation directory\n");

458 
	`exô
(1);

460 
	`Ârötf
(
Â
,
sour˚
);

461 
	`f˛o£
(
Â
);

463 
comm™dlöe
[1024];

464 c⁄° *
›t
 = 
›ti⁄s
?options:"";

465 c⁄° * 
ªmŸe_dú
 = 
	`gëív
( "OPENCL_REMOTE_DIRECTORY" );

466 c⁄° * 
loˇl_pwd
 = 
	`gëív
( "PWD" );

467 i‡–!
ªmŸe_dú
 || 
	`°∫cmp
(Ñemote_dir, "", 1 ) == 0 ) {

468 
ªmŸe_dú
 = 
loˇl_pwd
;

470 c⁄° * 
ªmŸe_ho°
 = 
	`gëív
( "OPENCL_REMOTE_GPU_HOST" );

471 i‡–
ªmŸe_ho°
 && 
ªmŸe_dú
 ) {

473 
	`¢¥ötf
(
comm™dlöe
,1024,"ssh %†mkdú -∞%s", 
ªmŸe_ho°
, 
ªmŸe_dú
 );

474 
	`¥ötf
("GPGPU-Sim O≥nCL API: O≥nCL wøµî comm™dÜöê\'%s\'\n", 
comm™dlöe
);

475 
	`fÊush
(
°dout
);

476 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

477 if–
ªsu…
 ) { 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR (%d)\n",Ñesu… ); 
	`exô
(1); }

480 
	`¢¥ötf
(
comm™dlöe
,1024,"rsyn¯-à%s/%†%s:%s/%s", 
loˇl_pwd
, 
˛_‚ame
, 
ªmŸe_ho°
, 
ªmŸe_dú
, cl_fname );

481 
	`¥ötf
("GPGPU-Sim O≥nCL API: O≥nCL wøµî comm™dÜöê\'%s\'\n", 
comm™dlöe
);

482 
	`fÊush
(
°dout
);

483 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

484 if–
ªsu…
 ) { 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR (%d)\n",Ñesu… ); 
	`exô
(1); }

487 
	`¢¥ötf
(
comm™dlöe
,1024,"rsyn¯-à%s/lib›í˛/bö/nv›í˛_wøµî %s:%s/nv›í˛_wøµî", 
gpgpusim_›í˛_∑th
, 
ªmŸe_ho°
, 
ªmŸe_dú
 );

488 
	`¥ötf
("GPGPU-Sim O≥nCL API: O≥nCL wøµî comm™dÜöê\'%s\'\n", 
comm™dlöe
);

489 
	`fÊush
(
°dout
);

490 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

491 if–
ªsu…
 ) { 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR (%d)\n",Ñesu… ); 
	`exô
(1); }

494 
	`¢¥ötf
(
comm™dlöe
,1024,"ssh %s \"export LD_LIBRARY_PATH=%s; %s/nvopencl_wrapper %s/%s %s/%s %s\"",

495 
ªmŸe_ho°
, 
nv›í˛_libdú
, 
ªmŸe_dú
,ÑemŸe_dú, 
˛_‚ame
,ÑemŸe_dú, 
±x_‚ame
, 
›t
 );

496 
	`¥ötf
("GPGPU-Sim O≥nCL API: O≥nCL wøµî comm™dÜöê\'%s\'\n", 
comm™dlöe
);

497 
	`fÊush
(
°dout
);

498 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

499 if–
ªsu…
 ) { 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR (%d)\n",Ñesu… ); 
	`exô
(1); }

502 
	`¢¥ötf
(
comm™dlöe
,1024,"rsyn¯-à%s:%s/%†%s/%s", 
ªmŸe_ho°
, 
ªmŸe_dú
, 
±x_‚ame
, 
loˇl_pwd
,Ötx_fname );

503 
	`¥ötf
("GPGPU-Sim O≥nCL API: O≥nCL wøµî comm™dÜöê\'%s\'\n", 
comm™dlöe
);

504 
	`fÊush
(
°dout
);

505 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

506 if–
ªsu…
 ) { 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR (%d)\n",Ñesu… ); 
	`exô
(1); }

508 
	`£ãnv
("LD_LIBRARY_PATH",
nv›í˛_libdú
,1);

509 
	`¢¥ötf
(
comm™dlöe
,1024,"%s/libopencl/bin/nvopencl_wrapper %s %s %s",

510 
gpgpusim_›í˛_∑th
, 
˛_‚ame
, 
±x_‚ame
, 
›t
 );

511 
	`¥ötf
("GPGPU-Sim O≥nCL API: O≥nCL wøµî comm™dÜöê\'%s\'\n", 
comm™dlöe
);

512 
	`fÊush
(
°dout
);

513 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

514 
	`£ãnv
("LD_LIBRARY_PATH",
ld_libøry_∑th_‹ig
,1);

515 if–
ªsu…
 != 0 ) {

516 
	`¥ötf
("GPGPU-Sim OpenCL API: ERROR ** while calling NVIDIA driverÅo convert OpenCLÅo PTX (%u)\n",

517 
ªsu…
 );

518 
	`¥ötf
("GPGPU-Sim O≥nCL API: LD_LIBRARY_PATH wa†\'%s\'\n", 
nv›í˛_libdú
);

519 
	`¥ötf
("GPGPU-Sim O≥nCL API: comm™dÜöêwa†\'%s\'\n", 
comm™dlöe
);

520 
	`exô
(1);

523 if–!
g_kìp_öãrmedüã_fûes
 ) {

525 
	`¢¥ötf
(
comm™dlöe
,1024,"rm -‡%s", 
˛_‚ame
 );

526 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

527 if–
ªsu…
 != 0 )

528 
	`¥ötf
("GPGPU-Sim OpenCL API: couldÇotÑemoveÅemporary files generated while generating PTX\n");

531 
	`¢¥ötf
(
±x_‚ame
,1024,"_%u.±x", 
sour˚_num
);

535 
FILE
 *
Â
 = 
	`f›í
(
±x_‚ame
,"r");

536 if–
Â
 =
NULL
 ) {

537 
	`¥ötf
("GPGPU-Sim O≥nCL API: ERROR ** couldÇŸ o≥¿PTX fûê\'%s\' f‹Ñódög\n", 
±x_‚ame
 );

538 if–
u£_exåa˘ed_±x
 !
NULL
 )

539 
	`¥ötf
(" Ensure PTX filesáre in simulation directory.\n");

540 
	`exô
(1);

542 
	`f£ek
(
Â
,0,
SEEK_END
);

543 
Àn
 = 
	`·ñl
(
Â
);

544 if–
Àn
 == 0 ) {

545 
	`exô
(1);

547 
	`f£ek
(
Â
,0,
SEEK_SET
);

548 *
tmp
 = (*)
	`ˇŒoc
(
Àn
+1,1);

549 
	`‰ód
(
tmp
,1,
Àn
,
Â
);

550 
	`f˛o£
(
Â
);

551 if–
u£_exåa˘ed_±x
 =
NULL
 ) {

553 
comm™dlöe
[1024];

554 
	`¢¥ötf
(
comm™dlöe
,1024,"rm -‡%s", 
±x_‚ame
 );

555 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

556 if–
ªsu…
 != 0 )

557 
	`¥ötf
("GPGPU-Sim OpenCL API: couldÇotÑemoveÅemporary files generated while generating PTX\n");

559  
Àn
 > 0 && 
tmp
[len] != '}' ) {

560 
tmp
[
Àn
] = 0;

561 
Àn
--;

564 
öfo
.
m_asm
 = 
tmp
;

565 
öfo
.
m_symèb
 = 
	`gpgpu_±x_sim_lﬂd_±x_‰om_°rög
–
tmp
, 
sour˚_num
 );

566 
	`gpgpu_±xöfo_lﬂd_‰om_°rög
–
tmp
, 
sour˚_num
 );

567 
	`‰ì
(
tmp
);

569 
	`¥ötf
("GPGPU-Sim OpenCL API: finished compiling OpenCL kernels.\n");

570 
	}
}

572 
˛_kî√l
 
_˛_¥ogøm
::
	$Cª©eKî√l
–c⁄° *
kî√l_«me
, 
˛_öt
 *
îrcode_ªt
 )

574 
˛_kî√l
 
ªsu…
 = 
NULL
;

575 
˛ass
 
fun˘i⁄_öfo
 *
föfo
=
NULL
;

576 
°d
::
m≠
<
˛_uöt
,
pgm_öfo
>::
ôî©‹
 
f
;

577  
f
 = 
m_pgm
.
	`begö
(); f!m_pgm.
	`íd
(); f++ ) {

578 
pgm_öfo
 &
öfo
=
f
->
£c⁄d
;

579 
°d
::
m≠
<°d::
°rög
,
fun˘i⁄_öfo
*>::
ôî©‹
 
k
 = 
öfo
.
m_kî√ls
.
	`föd
(
kî√l_«me
);

580 if–
k
 !
öfo
.
m_kî√ls
.
	`íd
() ) {

581 
	`as£π
–
föfo
 =
NULL
 );

582 
föfo
 = 
k
->
£c⁄d
;

586 if–
föfo
 =
NULL
 )

587 *
îrcode_ªt
 = 
CL_INVALID_PROGRAM_EXECUTABLE
;

589 
ªsu…
 = 
√w
 
	`_˛_kî√l
(
this
,
kî√l_«me
,
föfo
);

590  
ªsu…
;

591 
	}
}

593 *
_˛_¥ogøm
::
	$gë_±x
()

595 if–
m_pgm
.
	`em±y
() ) {

596 
	`¥ötf
("GPGPU-Sim PTX OpenCL API: Cannot get PTX before buildingÖrogram\n");

597 
	`ab‹t
();

599 
size_t
 
buf„r_Àngth

	`gë_±x_size
();

600 *
tmp
 = (*)
	`ˇŒoc
(
buf„r_Àngth
,1);

601 
n
=0;

602 
°d
::
m≠
<
˛_uöt
,
pgm_öfo
>::
ôî©‹
 
p
;

603  
p
=
m_pgm
.
	`begö
();Ö !m_pgm.
	`íd
();Ö++ ) {

604 c⁄° *
±x
 = 
p
->
£c⁄d
.
m_asm
.
	`c_°r
();

605 
Àn
 = 
	`°æí
–
±x
 ) + 1;

606 
	`as£π
–(
n
+
Àn
-1Ë< 
buf„r_Àngth
 );

607 
	`mem˝y
(
tmp
+
n
,
±x
,
Àn
);

608 
n
+=
Àn
;

610 
	`as£π
–
n
 < 
buf„r_Àngth
 );

611 
tmp
[
n
]=0;

612  
tmp
;

613 
	}
}

615 
size_t
 
_˛_¥ogøm
::
	$gë_±x_size
()

617 
size_t
 
buf„r_Àngth
=0;

618 
°d
::
m≠
<
˛_uöt
,
pgm_öfo
>::
ôî©‹
 
p
;

619  
p
=
m_pgm
.
	`begö
();Ö !m_pgm.
	`íd
();Ö++ ) {

620 
buf„r_Àngth
 +
p
->
£c⁄d
.
m_asm
.
	`Àngth
();

621 
buf„r_Àngth
++;

623 
buf„r_Àngth
++;

624  
buf„r_Àngth
;

625 
	}
}

627 
_˛_c⁄ãxt
::
sm_c⁄ãxt_uid
 = 0;

628 
	g_˛_kî√l
::
sm_c⁄ãxt_uid
 = 0;

630 
˛ass
 
_˛_devi˚_id
 *
	$GPGPUSim_Inô
()

632 
_˛_devi˚_id
 *
the_devi˚
 = 
NULL
;

633 if–!
the_devi˚
 ) {

634 
gpgpu_sim
 *
the_gpu
 = 
	`gpgpu_±x_sim_öô_≥rf
();

635 
the_devi˚
 = 
√w
 
	`_˛_devi˚_id
(
the_gpu
);

637 
	`°¨t_sim_thªad
(2);

638  
the_devi˚
;

639 
	}
}

641 
	$›í˛_nŸ_im∂emíãd
–c⁄° * 
func
, 
löe
 )

643 
	`fÊush
(
°dout
);

644 
	`fÊush
(
°dîr
);

645 
	`¥ötf
("\n\nGPGPU-Sim PTX: ExecutionÉrror: OpenCL API function \"%s()\" hasÇot been implemented yet.\n"

647 
func
,
__FILE__
, 
löe
 );

648 
	`fÊush
(
°dout
);

649 
	`ab‹t
();

650 
	}
}

652 
	$›í˛_nŸ_föished
–c⁄° * 
func
, 
löe
 )

654 
	`fÊush
(
°dout
);

655 
	`fÊush
(
°dîr
);

656 
	`¥ötf
("\n\nGPGPU-Sim PTX: ExecutionÉrror: OpenCL API function \"%s()\" hasÇot been completed yet.\n"

658 
func
,
__FILE__
, 
löe
 );

659 
	`fÊush
(
°dout
);

660 
	`ab‹t
();

661 
	}
}

663 
CL_API_ENTRY
 
˛_c⁄ãxt
 
CL_API_CALL


664 
˛Cª©eC⁄ãxtFromTy≥
(
˛_c⁄ãxt_¥›îtõs
 * 
¥›îtõs
,

665 
˛_ul⁄g
 
devi˚_ty≥
,

666 (*
p‚_nŸify
)(c⁄° *, c⁄° *, 
size_t
, *),

667 * 
u£r_d©a
,

668 
˛_öt
 * 
îrcode_ªt
Ë
CL_API_SUFFIX__VERSION_1_0


670 
_˛_devi˚_id
 *
gpu
 = 
	`GPGPUSim_Inô
();

671 if–
devi˚_ty≥
 !
CL_DEVICE_TYPE_GPU
 ) {

672 
	`¥ötf
("GPGPU-Sim O≥nCL API: unsuµ‹ãd devi˚Åy≥ %lx\n", 
devi˚_ty≥
 );

673 
	`exô
(1);

676 if–
¥›îtõs
 !
NULL
 ) {

677 
	`¥ötf
("GPGPU-Sim O≥nCL API: dÿnŸ know howÅÿu£Ör›îtõ†ö %s\n", 
__my_func__
 );

681 if–
îrcode_ªt
 )

682 *
îrcode_ªt
 = 
CL_SUCCESS
;

683 
˛_c⁄ãxt
 
˘x
 = 
√w
 
	`_˛_c⁄ãxt
(
gpu
);

684  
˘x
;

685 
	}
}

688 
CL_API_ENTRY
 
˛_¥ogøm
 
CL_API_CALL


689 
	$˛Cª©eProgømWôhBö¨y
(
˛_c⁄ãxt
 ,

690 
˛_uöt
 ,

691 c⁄° 
˛_devi˚_id
 * ,

692 c⁄° 
size_t
 * ,

694 
˛_öt
 * ,

695 
˛_öt
 * ) 
CL_API_SUFFIX__VERSION_1_0
 {

697 
	`›í˛_nŸ_föished
(
__my_func__
, 
__LINE__
 );

698  
	`˛_¥ogøm
();

699 
	}
}

701 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


702 
	$˛GëEvítProfûögInfo
(
˛_evít
 ,

703 
˛_¥ofûög_öfo
 ,

704 
size_t
 ,

706 
size_t
 * ) 
CL_API_SUFFIX__VERSION_1_0
{

707 
	`gpgpusim_›í˛_w¨nög
(
__my_func__
,
__LINE__
, "GPGPUsim - OpenCLFunction isÇot implemented. Returning CL_SUCCESS");

708  
CL_SUCCESS
;

709 
	}
}

713 
CL_API_ENTRY
 
˛_c⁄ãxt
 
CL_API_CALL


714 
˛Cª©eC⁄ãxt
–c⁄° 
˛_c⁄ãxt_¥›îtõs
 * 
¥›îtõs
,

715 
˛_uöt
 
num_devi˚s
,

716 c⁄° 
˛_devi˚_id
 *
devi˚s
,

717 (*
p‚_nŸify
)(c⁄° *, c⁄° *, 
size_t
, *),

718 * 
u£r_d©a
,

719 
˛_öt
 * 
îrcode_ªt
Ë
CL_API_SUFFIX__VERSION_1_0


721 
_˛_devi˚_id
 *
gpu
 = 
	`GPGPUSim_Inô
();

722 if–
¥›îtõs
 !
NULL
 ) {

723 if–
¥›îtõs
[0] !
CL_CONTEXT_PLATFORM
 ||Ör›îtõs[1] !(
˛_c⁄ãxt_¥›îtõs
)&
g_gpgpu_sim_∂©f‹m_id
 ) {

724 if–
îrcode_ªt
 )

725 *
îrcode_ªt
 = 
CL_INVALID_PLATFORM
;

726  
NULL
;

729 if–
îrcode_ªt
 )

730 *
îrcode_ªt
 = 
CL_SUCCESS
;

731 
˛_c⁄ãxt
 
˘x
 = 
√w
 
	`_˛_c⁄ãxt
(
gpu
);

732  
˘x
;

733 
	}
}

735 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


736 
	$˛GëC⁄ãxtInfo
(
˛_c⁄ãxt
 
c⁄ãxt
,

737 
˛_c⁄ãxt_öfo
 
∑øm_«me
,

738 
size_t
 
∑øm_vÆue_size
,

739 * 
∑øm_vÆue
,

740 
size_t
 * 
∑øm_vÆue_size_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


742 if–
c⁄ãxt
 =
NULL
 )  
CL_INVALID_CONTEXT
;

743  
∑øm_«me
 ) {

744 
CL_CONTEXT_DEVICES
: {

745 
ngpu
=0;

746 
˛_devi˚_id
 
devi˚_id
 = 
c⁄ãxt
->
	`gë_fú°_devi˚
();

747  
devi˚_id
 !
NULL
 ) {

748 if–
∑øm_vÆue
 )

749 ((
˛_devi˚_id
*)
∑øm_vÆue
)[
ngpu
] = 
devi˚_id
;

750 
devi˚_id
 = devi˚_id->
	`√xt
();

751 
ngpu
++;

753 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà
ngpu
 * (
˛_devi˚_id
);

756 
CL_CONTEXT_REFERENCE_COUNT
:

757 
	`›í˛_nŸ_föished
(
__my_func__
,
__LINE__
);

759 
CL_CONTEXT_PROPERTIES
:

760 
	`›í˛_nŸ_föished
(
__my_func__
,
__LINE__
);

763 
	`›í˛_nŸ_föished
(
__my_func__
,
__LINE__
);

765  
CL_SUCCESS
;

766 
	}
}

768 
CL_API_ENTRY
 
˛_comm™d_queue
 
CL_API_CALL


769 
	$˛Cª©eComm™dQueue
(
˛_c⁄ãxt
 
c⁄ãxt
,

770 
˛_devi˚_id
 
devi˚
,

771 
˛_comm™d_queue_¥›îtõs
 
¥›îtõs
,

772 
˛_öt
 * 
îrcode_ªt
Ë
CL_API_SUFFIX__VERSION_1_0


774 if–!
c⁄ãxt
 ) { *
îrcode_ªt
 = 
CL_INVALID_CONTEXT
;  
NULL
; }

775 
	`gpgpusim_›í˛_w¨nög
(
__my_func__
,
__LINE__
, "assuming device_id is in context");

776 if–(
¥›îtõs
 & 
CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE
) )

777 
	`gpgpusim_›í˛_w¨nög
(
__my_func__
,
__LINE__
, "ignoring command queueÖroperty");

778 if–(
¥›îtõs
 & 
CL_QUEUE_PROFILING_ENABLE
) )

779 
	`gpgpusim_›í˛_w¨nög
(
__my_func__
,
__LINE__
, "ignoring command queueÖroperty");

780 if–
îrcode_ªt
 )

781 *
îrcode_ªt
 = 
CL_SUCCESS
;

782  
√w
 
	`_˛_comm™d_queue
(
c⁄ãxt
,
devi˚
,
¥›îtõs
);

783 
	}
}

785 
CL_API_ENTRY
 
˛_mem
 
CL_API_CALL


786 
	$˛Cª©eBuf„r
(
˛_c⁄ãxt
 
c⁄ãxt
,

787 
˛_mem_Êags
 
Êags
,

788 
size_t
 
size
 ,

789 * 
ho°_±r
,

790 
˛_öt
 * 
îrcode_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


792 if–!
c⁄ãxt
 ) { *
îrcode_ªt
 = 
CL_INVALID_CONTEXT
;  
NULL
; }

793  
c⁄ãxt
->
	`Cª©eBuf„r
(
Êags
,
size
,
ho°_±r
,
îrcode_ªt
);

794 
	}
}

796 
CL_API_ENTRY
 
˛_¥ogøm
 
CL_API_CALL


797 
	$˛Cª©eProgømWôhSour˚
(
˛_c⁄ãxt
 
c⁄ãxt
,

798 
˛_uöt
 
cou¡
,

799 c⁄° ** 
°rögs
,

800 c⁄° 
size_t
 * 
Àngths
,

801 
˛_öt
 * 
îrcode_ªt
Ë
CL_API_SUFFIX__VERSION_1_0


803 if–!
c⁄ãxt
 ) { *
îrcode_ªt
 = 
CL_INVALID_CONTEXT
;  
NULL
; }

804 *
îrcode_ªt
 = 
CL_SUCCESS
;

805  
√w
 
	`_˛_¥ogøm
(
c⁄ãxt
,
cou¡
,
°rögs
,
Àngths
);

806 
	}
}

809 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


810 
˛BuûdProgøm
(
˛_¥ogøm
 
¥ogøm
,

811 
˛_uöt
 
num_devi˚s
,

812 c⁄° 
˛_devi˚_id
 * 
devi˚_li°
,

813 c⁄° * 
›ti⁄s
,

814 (*
p‚_nŸify
)(
˛_¥ogøm
 , * ),

815 * 
u£r_d©a
 ) 
CL_API_SUFFIX__VERSION_1_0


817 if–!
¥ogøm
 )  
CL_INVALID_PROGRAM
;

818 
¥ogøm
->
	`Buûd
(
›ti⁄s
);

819  
CL_SUCCESS
;

820 
	}
}

822 
CL_API_ENTRY
 
˛_kî√l
 
CL_API_CALL


823 
	$˛Cª©eKî√l
(
˛_¥ogøm
 
¥ogøm
,

824 c⁄° * 
kî√l_«me
,

825 
˛_öt
 * 
îrcode_ªt
Ë
CL_API_SUFFIX__VERSION_1_0


827 if–
kî√l_«me
 =
NULL
 ) {

828 *
îrcode_ªt
 = 
CL_INVALID_KERNEL_NAME
;

829  
NULL
;

831 
˛_kî√l
 
kobj
 = 
¥ogøm
->
	`Cª©eKî√l
(
kî√l_«me
,
îrcode_ªt
);

832  
kobj
;

833 
	}
}

835 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


836 
	$˛SëKî√lArg
(
˛_kî√l
 
kî√l
,

837 
˛_uöt
 
¨g_ödex
,

838 
size_t
 
¨g_size
,

839 c⁄° * 
¨g_vÆue
 ) 
CL_API_SUFFIX__VERSION_1_0


841 
kî√l
->
	`SëKî√lArg
(
¨g_ödex
,
¨g_size
,
¨g_vÆue
);

842  
CL_SUCCESS
;

843 
	}
}

845 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


846 
	$˛EnqueueNDR™geKî√l
(
˛_comm™d_queue
 
comm™d_queue
,

847 
˛_kî√l
 
kî√l
,

848 
˛_uöt
 
w‹k_dim
,

849 c⁄° 
size_t
 * 
globÆ_w‹k_off£t
,

850 c⁄° 
size_t
 * 
globÆ_w‹k_size
,

851 c⁄° 
size_t
 * 
loˇl_w‹k_size
,

852 
˛_uöt
 
num_evíts_ö_waô_li°
,

853 c⁄° 
˛_evít
 * 
evít_waô_li°
,

854 
˛_evít
 * 
evít
Ë
CL_API_SUFFIX__VERSION_1_0


856 
_globÆ_size
[3];

857 
zîos
[3] = { 0, 0, 0};

858 
	`¥ötf
("\n\n\n");

859 *
mode
 = 
	`gëív
("PTX_SIM_MODE_FUNC");

860 i‡–
mode
 )

861 
	`ssˇnf
(
mode
,"%u", &
g_±x_sim_mode
);

862 
	`¥ötf
("GPGPU-Sim O≥nCL API: clEnqueueNDR™geKî√»'%s' (mode=%s)\n", 
kî√l
->
	`«me
().
	`c_°r
(),

863 
g_±x_sim_mode
?"functional simulation":"performance simulation");

864 i‡–!
w‹k_dim
 || w‹k_dim > 3 )  
CL_INVALID_WORK_DIMENSION
;

865 
size_t
 
_loˇl_size
[3];

866 if–
loˇl_w‹k_size
 !
NULL
 ) {

867  
d
=0; d < 
w‹k_dim
; d++ )

868 
_loˇl_size
[
d
]=
loˇl_w‹k_size
[d];

870 
	`¥ötf
("GPGPU-Sim OpenCL API: clEnqueueNDRangeKerneláutomaticÜocal work size selection:\n");

871  
d
=0; d < 
w‹k_dim
; d++ ) {

872 if–
d
==0 ) {

873 if–
globÆ_w‹k_size
[
d
] <
comm™d_queue
->
	`gë_devi˚
()->
	`the_devi˚
()->
	`thªads_≥r_c‹e
() ) {

874 
_loˇl_size
[
d
] = 
globÆ_w‹k_size
[d];

876 
	`¥ötf
("GPGPU-Sim OpenCL API: ERROR clEnqueueNDRangeKernel doesÇot know howÅo divide work\n" );

877  
CL_INVALID_WORK_GROUP_SIZE
;

880 
_loˇl_size
[
d
] = 1;

882 
	`¥ötf
("GPGPU-Sim O≥nCL API: clEnqueueNDR™geKî√»globÆ_w‹k_size[%u] = %zu\n", 
d
, 
globÆ_w‹k_size
[d] );

883 
	`¥ötf
("GPGPU-Sim O≥nCL API: clEnqueueNDR™geKî√»loˇl_w‹k_size[%u] = %zu\n", 
d
, 
_loˇl_size
[d] );

886  
d
=0; d < 
w‹k_dim
; d++ ) {

887 
_globÆ_size
[
d
] = ()
globÆ_w‹k_size
[d];

888 i‡–(
globÆ_w‹k_size
[
d
] % 
_loˇl_size
[d]) != 0 )

889  
CL_INVALID_WORK_GROUP_SIZE
;

892 
	`as£π
–
globÆ_w‹k_size
[0] =
_loˇl_size
[0] * (global_work_size[0]/_local_size[0]) );

893 
dim3
 
GridDim
;

894 
GridDim
.
x
 = 
globÆ_w‹k_size
[0]/
_loˇl_size
[0];

895 
GridDim
.
y
 = (
w‹k_dim
 < 2)?1:(
globÆ_w‹k_size
[1]/
_loˇl_size
[1]);

896 
GridDim
.
z
 = (
w‹k_dim
 < 3)?1:(
globÆ_w‹k_size
[2]/
_loˇl_size
[2]);

897 
dim3
 
BlockDim
;

898 
BlockDim
.
x
 = 
_loˇl_size
[0];

899 
BlockDim
.
y
 = (
w‹k_dim
 < 2)?1:
_loˇl_size
[1];

900 
BlockDim
.
z
 = (
w‹k_dim
 < 3)?1:
_loˇl_size
[2];

902 
gpgpu_±x_sim_¨g_li°_t
 
∑øms
;

903 
˛_öt
 
îr_vÆ
 = 
kî√l
->
	`böd_¨gs
(
∑øms
);

904 i‡–
îr_vÆ
 !
CL_SUCCESS
 )

905  
îr_vÆ
;

907 
gpgpu_t
 *
gpu
 = 
comm™d_queue
->
	`gë_devi˚
()->
	`the_devi˚
();

909 
	`gpgpu_±x_sim_mem˝y_symbﬁ
–"%_globÆ_size", 
_globÆ_size
, 3 * (), 0, 1, 
gpu
 );

910 
	`gpgpu_±x_sim_mem˝y_symbﬁ
–"%_w‹k_dim", &
w‹k_dim
, 1 * (), 0, 1, 
gpu
 );

911 
	`gpgpu_±x_sim_mem˝y_symbﬁ
–"%_globÆ_num_groups", &
GridDim
, 3 * (), 0, 1, 
gpu
 );

912 
	`gpgpu_±x_sim_mem˝y_symbﬁ
–"%_globÆ_œunch_off£t", 
zîos
, 3 * (), 0, 1, 
gpu
 );

913 
	`gpgpu_±x_sim_mem˝y_symbﬁ
–"%_globÆ_block_off£t", 
zîos
, 3 * (), 0, 1, 
gpu
 );

915 
kî√l_öfo_t
 *
grid
 = 
	`gpgpu_›í˛_±x_sim_öô_grid
(
kî√l
->
	`gë_im∂emíèti⁄
(),
∑øms
,
GridDim
,
BlockDim
,
gpu
);

916 i‡–
g_±x_sim_mode
 )

917 
	`gpgpu_›í˛_±x_sim_maö_func
–
grid
 );

919 
	`gpgpu_›í˛_±x_sim_maö_≥rf
–
grid
 );

920  
CL_SUCCESS
;

921 
	}
}

923 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


924 
	$˛EnqueueRódBuf„r
(
˛_comm™d_queue
 
comm™d_queue
,

925 
˛_mem
 
buf„r
,

926 
˛_boﬁ
 
blockög_ªad
,

927 
size_t
 
off£t
,

928 
size_t
 
cb
,

929 * 
±r
,

930 
˛_uöt
 
num_evíts_ö_waô_li°
,

931 c⁄° 
˛_evít
 * 
evít_waô_li°
,

932 
˛_evít
 * 
evít
 ) 
CL_API_SUFFIX__VERSION_1_0


934 if–!
blockög_ªad
 )

935 
	`gpgpusim_›í˛_w¨nög
(
__my_func__
,
__LINE__
, "non-blockingÑeadÅreatedás blockingÑead");

936 
gpgpu_t
 *
gpu
 = 
comm™d_queue
->
	`gë_devi˚
()->
	`the_devi˚
();

937 
gpu
->
	`mem˝y_‰om_gpu
–
±r
, (
size_t
)
buf„r
, 
cb
 );

938  
CL_SUCCESS
;

939 
	}
}

941 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


942 
	$˛EnqueueWrôeBuf„r
(
˛_comm™d_queue
 
comm™d_queue
,

943 
˛_mem
 
buf„r
,

944 
˛_boﬁ
 
blockög_wrôe
,

945 
size_t
 
off£t
,

946 
size_t
 
cb
,

947 c⁄° * 
±r
,

948 
˛_uöt
 
num_evíts_ö_waô_li°
,

949 c⁄° 
˛_evít
 * 
evít_waô_li°
,

950 
˛_evít
 * 
evít
 ) 
CL_API_SUFFIX__VERSION_1_0


952 if–!
blockög_wrôe
 )

953 
	`gpgpusim_›í˛_w¨nög
(
__my_func__
,
__LINE__
, "non-blocking writeÅreatedás blocking write");

954 
gpgpu_t
 *
gpu
 = 
comm™d_queue
->
	`gë_devi˚
()->
	`the_devi˚
();

955 
gpu
->
	`mem˝y_to_gpu
–(
size_t
)
buf„r
, 
±r
, 
cb
 );

956  
CL_SUCCESS
;

957 
	}
}

959 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


960 
	$˛Rñó£MemObje˘
(
˛_mem
 ) 
CL_API_SUFFIX__VERSION_1_0


962  
CL_SUCCESS
;

963 
	}
}

965 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


966 
	$˛Rñó£Kî√l
(
˛_kî√l
 ) 
CL_API_SUFFIX__VERSION_1_0


968  
CL_SUCCESS
;

969 
	}
}

971 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


972 
	$˛Rñó£Progøm
(
˛_¥ogøm
 ) 
CL_API_SUFFIX__VERSION_1_0


974  
CL_SUCCESS
;

975 
	}
}

977 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


978 
	$˛Rñó£Comm™dQueue
(
˛_comm™d_queue
 ) 
CL_API_SUFFIX__VERSION_1_0


980  
CL_SUCCESS
;

981 
	}
}

983 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


984 
	$˛Rñó£C⁄ãxt
(
˛_c⁄ãxt
 ) 
CL_API_SUFFIX__VERSION_1_0


986  
CL_SUCCESS
;

987 
	}
}

989 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


990 
	$˛GëPœtf‹mIDs
(
˛_uöt
 
num_íåõs
, 
˛_∂©f‹m_id
 *
∂©f‹ms
, cl_uöà*
num_∂©f‹ms
 ) 
CL_API_SUFFIX__VERSION_1_0


992 if–((
num_íåõs
 =0Ë&& (
∂©f‹ms
 !
NULL
)) ||

993 ((
num_∂©f‹ms
 =
NULL
Ë&& (
∂©f‹ms
 == NULL)) )

994  
CL_INVALID_VALUE
;

995 if–(
∂©f‹ms
 !
NULL
Ë&& (
num_íåõs
 > 0) )

996 
∂©f‹ms
[0] = &
g_gpgpu_sim_∂©f‹m_id
;

997 if–
num_∂©f‹ms
 )

998 *
num_∂©f‹ms
 = 1;

999  
CL_SUCCESS
;

1000 
	}
}

1002 
	#CL_STRING_CASE
–
S
 ) \

	)

1003 if–
∑øm_vÆue
 && (
∑øm_vÆue_size
 < 
°æí
(
S
)+1ËË 
CL_INVALID_VALUE
; \

1004 if–
	g∑øm_vÆue
 ) 
¢¥ötf
(
buf
,
°æí
(
S
)+1,S); \

1005 if–
	g∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà
°æí
(
S
)+1;

1007 
	#CL_INT_CASE
–
N
 ) \

	)

1008 if–
	g∑øm_vÆue
 && 
	g∑øm_vÆue_size
 < (
˛_öt
ËË 
CL_INVALID_VALUE
; \

1009 if–
∑øm_vÆue
 ) *((
˛_öt
*Ì¨am_vÆueË(
N
); \

1010 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà(
˛_öt
);

1012 
	#CL_ULONG_CASE
–
N
 ) \

	)

1013 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < (
˛_ul⁄g
ËË 
CL_INVALID_VALUE
; \

1014 if–
∑øm_vÆue
 ) *((
˛_ul⁄g
*Ì¨am_vÆueË(
N
); \

1015 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà(
˛_ul⁄g
);

1017 
	#CL_SIZE_CASE
–
N
 ) \

	)

1018 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < (
size_t
ËË 
CL_INVALID_VALUE
; \

1019 if–
∑øm_vÆue
 ) *((
size_t
*Ì¨am_vÆueË(
N
); \

1020 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà(
size_t
);

1022 
	#CL_CASE
–
T
, 
N
 ) \

	)

1023 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < (
T
ËË 
CL_INVALID_VALUE
; \

1024 if–
∑øm_vÆue
 ) *((
T
*Ì¨am_vÆueË(
N
); \

1025 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà(
T
);

1027 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1028 
	$˛GëPœtf‹mInfo
(
˛_∂©f‹m_id
 
∂©f‹m
,

1029 
˛_∂©f‹m_öfo
 
∑øm_«me
,

1030 
size_t
 
∑øm_vÆue_size
,

1031 * 
∑øm_vÆue
,

1032 
size_t
 * 
∑øm_vÆue_size_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


1034 if–
∂©f‹m
 =
NULL
 ||Öœtf‹m->
m_uid
 != 0 )

1035  
CL_INVALID_PLATFORM
;

1036 *
buf
 = (*)
∑øm_vÆue
;

1037  
∑øm_«me
 ) {

1038 
CL_PLATFORM_PROFILE
: 
	`CL_STRING_CASE
("FULL_PROFILE"); ;

1039 
CL_PLATFORM_VERSION
: 
	`CL_STRING_CASE
("OpenCL 1.0"); ;

1040 
CL_PLATFORM_NAME
: 
	`CL_STRING_CASE
("GPGPU-Sim"); ;

1041 
CL_PLATFORM_VENDOR
: 
	`CL_STRING_CASE
("GPGPU-Sim.org"); ;

1042 
CL_PLATFORM_EXTENSIONS
: 
	`CL_STRING_CASE
(" "); ;

1044  
CL_INVALID_VALUE
;

1046  
CL_SUCCESS
;

1047 
	}
}

1049 
	#NUM_DEVICES
 1

	)

1051 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1052 
	$˛GëDevi˚IDs
(
˛_∂©f‹m_id
 
∂©f‹m
,

1053 
˛_devi˚_ty≥
 
devi˚_ty≥
,

1054 
˛_uöt
 
num_íåõs
,

1055 
˛_devi˚_id
 * 
devi˚s
,

1056 
˛_uöt
 * 
num_devi˚s
 ) 
CL_API_SUFFIX__VERSION_1_0


1058 if–
∂©f‹m
 =
NULL
 ||Öœtf‹m->
m_uid
 != 0 )

1059  
CL_INVALID_PLATFORM
;

1060 if–(
num_íåõs
 =0 && 
devi˚s
 !
NULL
) ||

1061 (
num_devi˚s
 =
NULL
 && 
devi˚s
 == NULL) )

1062  
CL_INVALID_VALUE
;

1064  
devi˚_ty≥
 ) {

1065 
CL_DEVICE_TYPE_CPU
:

1066 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1068 
CL_DEVICE_TYPE_DEFAULT
:

1069 
CL_DEVICE_TYPE_GPU
:

1070 
CL_DEVICE_TYPE_ACCELERATOR
:

1071 
CL_DEVICE_TYPE_ALL
:

1072 if–
devi˚s
 !
NULL
 )

1073 
devi˚s
[0] = 
	`GPGPUSim_Inô
();

1074 if–
num_devi˚s
 )

1075 *
num_devi˚s
 = 
NUM_DEVICES
;

1078  
CL_INVALID_DEVICE_TYPE
;

1080  
CL_SUCCESS
;

1081 
	}
}

1083 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1084 
	$˛GëDevi˚Info
(
˛_devi˚_id
 
devi˚
,

1085 
˛_devi˚_öfo
 
∑øm_«me
,

1086 
size_t
 
∑øm_vÆue_size
,

1087 * 
∑øm_vÆue
,

1088 
size_t
 * 
∑øm_vÆue_size_ªt
Ë
CL_API_SUFFIX__VERSION_1_0


1090 if–
devi˚
 !
	`GPGPUSim_Inô
() )

1091  
CL_INVALID_DEVICE
;

1092 *
buf
 = (*)
∑øm_vÆue
;

1093  
∑øm_«me
 ) {

1094 
CL_DEVICE_NAME
: 
	`CL_STRING_CASE
( "GPGPU-Sim" ); ;

1095 
CL_DEVICE_GLOBAL_MEM_SIZE
: 
	`CL_ULONG_CASE
( 1024*1024*1024 ); ;

1096 
CL_DEVICE_MAX_COMPUTE_UNITS
: 
	`CL_INT_CASE
–
devi˚
->
	`the_devi˚
()->
	`gë_c⁄fig
().
	`num_shadî
() ); ;

1097 
CL_DEVICE_MAX_CLOCK_FREQUENCY
: 
	`CL_INT_CASE
–
devi˚
->
	`the_devi˚
()->
	`shadî_˛ock
() ); ;

1098 
CL_DEVICE_VENDOR
:
	`CL_STRING_CASE
("GPGPU-Sim.org"); ;

1099 
CL_DRIVER_VERSION
: 
	`CL_STRING_CASE
("1.0"); ;

1100 
CL_DEVICE_TYPE
: 
	`CL_INT_CASE
(
CL_DEVICE_TYPE_GPU
); ;

1101 
CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
: 
	`CL_INT_CASE
( 3 ); ;

1102 
CL_DEVICE_MAX_WORK_ITEM_SIZES
:

1103 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < 3*(
size_t
ËË 
CL_INVALID_VALUE
; \

1104 if–
∑øm_vÆue
 ) {

1105 
n_thªad_≥r_shadî
 = 
devi˚
->
	`the_devi˚
()->
	`thªads_≥r_c‹e
();

1106 ((
size_t
*)
∑øm_vÆue
)[0] = 
n_thªad_≥r_shadî
;

1107 ((
size_t
*)
∑øm_vÆue
)[1] = 
n_thªad_≥r_shadî
;

1108 ((
size_t
*)
∑øm_vÆue
)[2] = 
n_thªad_≥r_shadî
;

1110 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà3*(
˛_uöt
);

1112 
CL_DEVICE_MAX_WORK_GROUP_SIZE
: 
	`CL_INT_CASE
–
devi˚
->
	`the_devi˚
()->
	`thªads_≥r_c‹e
() ); ;

1113 
CL_DEVICE_ADDRESS_BITS
: 
	`CL_INT_CASE
( 32 ); ;

1114 
CL_DEVICE_IMAGE_SUPPORT
: 
	`CL_INT_CASE
–
CL_TRUE
 ); ;

1115 
CL_DEVICE_MAX_READ_IMAGE_ARGS
: 
	`CL_INT_CASE
( 128 ); ;

1116 
CL_DEVICE_MAX_WRITE_IMAGE_ARGS
: 
	`CL_INT_CASE
( 8 ); ;

1117 
CL_DEVICE_IMAGE2D_MAX_HEIGHT
: 
	`CL_INT_CASE
( 8192 ); ;

1118 
CL_DEVICE_IMAGE2D_MAX_WIDTH
: 
	`CL_INT_CASE
( 8192 ); ;

1119 
CL_DEVICE_IMAGE3D_MAX_HEIGHT
: 
	`CL_INT_CASE
( 2048 ); ;

1120 
CL_DEVICE_IMAGE3D_MAX_WIDTH
: 
	`CL_INT_CASE
( 2048 ); ;

1121 
CL_DEVICE_IMAGE3D_MAX_DEPTH
: 
	`CL_INT_CASE
( 2048 ); ;

1122 
CL_DEVICE_MAX_MEM_ALLOC_SIZE
: 
	`CL_INT_CASE
( 128*1024*1024 ); ;

1123 
CL_DEVICE_ERROR_CORRECTION_SUPPORT
: 
	`CL_INT_CASE
( 0 ); ;

1124 
CL_DEVICE_LOCAL_MEM_TYPE
: 
	`CL_INT_CASE
–
CL_LOCAL
 ); ;

1125 
CL_DEVICE_LOCAL_MEM_SIZE
: 
	`CL_ULONG_CASE
–
devi˚
->
	`the_devi˚
()->
	`sh¨ed_mem_size
() ); ;

1126 
CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
: 
	`CL_ULONG_CASE
( 64 * 1024 ); ;

1127 
CL_DEVICE_QUEUE_PROPERTIES
: 
	`CL_INT_CASE
–
CL_QUEUE_PROFILING_ENABLE
 ); ;

1128 
CL_DEVICE_EXTENSIONS
:

1129 if–
∑øm_vÆue
 && (
∑øm_vÆue_size
 < 1ËË 
CL_INVALID_VALUE
;

1130 if–
∑øm_vÆue
 ) 
buf
[0]=0;

1131 if–
∑øm_vÆue_size_ªt
 ) *param_value_size_ret = 1;

1133 
CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR
: 
	`CL_INT_CASE
(1); ;

1134 
CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT
: 
	`CL_INT_CASE
(1); ;

1135 
CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT
: 
	`CL_INT_CASE
(1); ;

1136 
CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG
: 
	`CL_INT_CASE
(1); ;

1137 
CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT
: 
	`CL_INT_CASE
(1); ;

1138 
CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE
: 
	`CL_INT_CASE
(0); ;

1139 
CL_DEVICE_SINGLE_FP_CONFIG
: 
	`CL_INT_CASE
(0); ;

1140 
CL_DEVICE_MEM_BASE_ADDR_ALIGN
: 
	`CL_INT_CASE
(256*8); ;

1142 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1144  
CL_SUCCESS
;

1145 
	}
}

1147 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1148 
	$˛Föish
(
˛_comm™d_queue
 ) 
CL_API_SUFFIX__VERSION_1_0


1150  
CL_SUCCESS
;

1151 
	}
}

1153 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1154 
	$˛GëProgømInfo
(
˛_¥ogøm
 
¥ogøm
,

1155 
˛_¥ogøm_öfo
 
∑øm_«me
,

1156 
size_t
 
∑øm_vÆue_size
,

1157 * 
∑øm_vÆue
,

1158 
size_t
 * 
∑øm_vÆue_size_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


1160 if–
¥ogøm
 =
NULL
 )

1161  
CL_INVALID_PROGRAM
;

1162 *
tmp
=
NULL
;

1163 
size_t
 
Àn
=0;

1164  
∑øm_«me
 ) {

1165 
CL_PROGRAM_REFERENCE_COUNT
:

1166 
	`CL_INT_CASE
(1);

1168 
CL_PROGRAM_CONTEXT
:

1169 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < (
˛_c⁄ãxt
)Ë 
CL_INVALID_VALUE
;

1170 if–
∑øm_vÆue
 ) *((
˛_c⁄ãxt
*Ì¨am_vÆueË
¥ogøm
->
	`gë_c⁄ãxt
();

1171 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà(
˛_c⁄ãxt
);

1173 
CL_PROGRAM_NUM_DEVICES
:

1174 
	`CL_INT_CASE
(
NUM_DEVICES
);

1176 
CL_PROGRAM_DEVICES
:

1177 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < 
NUM_DEVICES
 * (
˛_devi˚_id
) )

1178  
CL_INVALID_VALUE
;

1179 if–
∑øm_vÆue
 ) {

1180 
	`as£π
–
NUM_DEVICES
 == 1 );

1181 ((
˛_devi˚_id
*)
∑øm_vÆue
)[0] = 
	`GPGPUSim_Inô
();

1183 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà(
˛_devi˚_id
);

1185 
CL_PROGRAM_SOURCE
:

1186 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1188 
CL_PROGRAM_BINARY_SIZES
:

1189 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < 
NUM_DEVICES
 * (
size_t
ËË 
CL_INVALID_VALUE
;

1190 if–
∑øm_vÆue
 ) *((
size_t
*Ì¨am_vÆueË
¥ogøm
->
	`gë_±x_size
();

1191 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà
NUM_DEVICES
*(
size_t
);

1193 
CL_PROGRAM_BINARIES
:

1194 
Àn
 = 
¥ogøm
->
	`gë_±x_size
();

1195 if–
∑øm_vÆue
 && 
∑øm_vÆue_size
 < 
NUM_DEVICES
 * 
Àn
 )  
CL_INVALID_VALUE
;

1196 
tmp
 = 
¥ogøm
->
	`gë_±x
();

1197 if–
∑øm_vÆue
 ) 
	`mem˝y
–((**Ì¨am_vÆue)[0], 
tmp
, 
Àn
 );

1198 if–
∑øm_vÆue_size_ªt
 ) *∑øm_vÆue_size_ªà
Àn
;

1201  
CL_INVALID_VALUE
;

1204  
CL_SUCCESS
;

1205 
	}
}

1207 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1208 
	$˛EnqueueC›yBuf„r
(
˛_comm™d_queue
 
comm™d_queue
,

1209 
˛_mem
 
§c_buf„r
,

1210 
˛_mem
 
d°_buf„r
,

1211 
size_t
 
§c_off£t
,

1212 
size_t
 
d°_off£t
,

1213 
size_t
 
cb
,

1214 
˛_uöt
 
num_evíts_ö_waô_li°
,

1215 c⁄° 
˛_evít
 * 
evít_waô_li°
,

1216 
˛_evít
 * 
evít
 ) 
CL_API_SUFFIX__VERSION_1_0


1218 if–
num_evíts_ö_waô_li°
 > 0 )

1219 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1220 if–
comm™d_queue
 =
NULL
 || !comm™d_queue->
	`is_vÆid
() )

1221  
CL_INVALID_COMMAND_QUEUE
;

1222 
˛_c⁄ãxt
 
c⁄ãxt
 = 
comm™d_queue
->
	`gë_c⁄ãxt
();

1223 
˛_mem
 
§c
 = 
c⁄ãxt
->
	`lookup_mem
–
§c_buf„r
 );

1224 
˛_mem
 
d°
 = 
c⁄ãxt
->
	`lookup_mem
–
d°_buf„r
 );

1225 if–
§c
 =
NULL
 || 
d°
 == NULL )

1226  
CL_INVALID_MEM_OBJECT
;

1228 
gpgpu_t
 *
gpu
 = 
comm™d_queue
->
	`gë_devi˚
()->
	`the_devi˚
();

1229 if–
§c
->
	`is_⁄_ho°
(Ë&& !
d°
->is_on_host() )

1230 
gpu
->
	`mem˝y_to_gpu
–((
size_t
)
d°
->
	`devi˚_±r
())+
d°_off£t
, ((*)
§c
->
	`ho°_±r
())+
§c_off£t
, 
cb
 );

1231 if–!
§c
->
	`is_⁄_ho°
(Ë&& 
d°
->is_on_host() )

1232 
gpu
->
	`mem˝y_‰om_gpu
–((*)
d°
->
	`ho°_±r
())+
d°_off£t
, ((
size_t
)
§c
->
	`devi˚_±r
())+
§c_off£t
, 
cb
 );

1233 if–!
§c
->
	`is_⁄_ho°
(Ë&& !
d°
->is_on_host() )

1234 
gpu
->
	`mem˝y_gpu_to_gpu
–((
size_t
)
d°
->
	`devi˚_±r
())+
d°_off£t
, ((size_t)
§c
->devi˚_±r())+
§c_off£t
, 
cb
 );

1236 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1237  
CL_SUCCESS
;

1238 
	}
}

1240 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1241 
	$˛GëKî√lW‹kGroupInfo
(
˛_kî√l
 
kî√l
,

1242 
˛_devi˚_id
 
devi˚
,

1243 
˛_kî√l_w‹k_group_öfo
 
∑øm_«me
,

1244 
size_t
 
∑øm_vÆue_size
,

1245 * 
∑øm_vÆue
,

1246 
size_t
 * 
∑øm_vÆue_size_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


1248 if–
kî√l
 =
NULL
 )

1249  
CL_INVALID_KERNEL
;

1250  
∑øm_«me
 ) {

1251 
CL_KERNEL_WORK_GROUP_SIZE
:

1252 
	`CL_SIZE_CASE
–
kî√l
->
	`gë_w‹kgroup_size
(
devi˚
) );

1254 
CL_KERNEL_COMPILE_WORK_GROUP_SIZE
:

1255 
CL_KERNEL_LOCAL_MEM_SIZE
:

1256 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1257 *(
size_t
 *)
∑øm_vÆue
 = 
devi˚
->
	`the_devi˚
()->
	`sh¨ed_mem_size
();

1260  
CL_INVALID_VALUE
;

1263  
CL_SUCCESS
;

1264 
	}
}

1266 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1267 
	$˛WaôF‹Evíts
(
˛_uöt
 ,

1268 c⁄° 
˛_evít
 * ) 
CL_API_SUFFIX__VERSION_1_0


1270  
CL_SUCCESS
;

1271 
	}
}

1273 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1274 
	$˛Rñó£Evít
(
˛_evít
 ) 
CL_API_SUFFIX__VERSION_1_0


1276  
CL_SUCCESS
;

1277 
	}
}

1279 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1280 
	$˛GëComm™dQueueInfo
(
˛_comm™d_queue
 
comm™d_queue
,

1281 
˛_comm™d_queue_öfo
 
∑øm_«me
,

1282 
size_t
 
∑øm_vÆue_size
,

1283 * 
∑øm_vÆue
,

1284 
size_t
 * 
∑øm_vÆue_size_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


1286 if–
comm™d_queue
 =
NULL
 )

1287  
CL_INVALID_COMMAND_QUEUE
;

1288  
∑øm_«me
 ) {

1289 
CL_QUEUE_CONTEXT
: 
	`CL_CASE
(
˛_c⁄ãxt
, 
comm™d_queue
->
	`gë_c⁄ãxt
()); ;

1290 
CL_QUEUE_DEVICE
: 
	`CL_CASE
(
˛_devi˚_id
, 
comm™d_queue
->
	`gë_devi˚
()); ;

1291 
CL_QUEUE_REFERENCE_COUNT
: 
	`CL_CASE
(
˛_uöt
,1); ;

1292 
CL_QUEUE_PROPERTIES
: 
	`CL_CASE
(
˛_comm™d_queue_¥›îtõs
, 
comm™d_queue
->
	`gë_¥›îtõs
()); ;

1294  
CL_INVALID_VALUE
;

1296  
CL_SUCCESS
;

1297 
	}
}

1299 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1300 
	$˛Flush
(
˛_comm™d_queue
 ) 
CL_API_SUFFIX__VERSION_1_0


1302  
CL_SUCCESS
;

1303 
	}
}

1305 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1306 
	$˛GëSuµ‹ãdImageF‹m©s
(
˛_c⁄ãxt
 
c⁄ãxt
,

1307 
˛_mem_Êags
 
Êags
,

1308 
˛_mem_obje˘_ty≥
 
image_ty≥
,

1309 
˛_uöt
 
num_íåõs
,

1310 
˛_image_f‹m©
 * 
image_f‹m©s
,

1311 
˛_uöt
 * 
num_image_f‹m©s
Ë
CL_API_SUFFIX__VERSION_1_0


1313 if–!
c⁄ãxt
 )

1314  
CL_INVALID_CONTEXT
;

1315 if–
Êags
 =
CL_MEM_READ_ONLY
 ) {

1316 if–
image_ty≥
 =
CL_MEM_OBJECT_IMAGE2D
 || image_type == CL_MEM_OBJECT_IMAGE2D ) {

1317 if–
num_íåõs
 =0 || 
image_f‹m©s
 =
NULL
 ) {

1318 if–
num_image_f‹m©s
 !
NULL
 )

1319 *
num_image_f‹m©s
 = 71;

1321 if–
num_íåõs
 != 71 )

1322 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1323 
image_f‹m©s
[0].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[0].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1324 
image_f‹m©s
[1].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[1].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1325 
image_f‹m©s
[2].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[2].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1326 
image_f‹m©s
[3].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[3].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1327 
image_f‹m©s
[4].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[4].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1328 
image_f‹m©s
[5].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[5].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1329 
image_f‹m©s
[6].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[6].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT16
 ;

1330 
image_f‹m©s
[7].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[7].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT32
 ;

1331 
image_f‹m©s
[8].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[8].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1332 
image_f‹m©s
[9].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[9].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT16
 ;

1333 
image_f‹m©s
[10].
image_ch™√l_‹dî
 = 
CL_R
; image_f‹m©s[10].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT32
 ;

1334 
image_f‹m©s
[11].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[11].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1335 
image_f‹m©s
[12].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[12].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1336 
image_f‹m©s
[13].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[13].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1337 
image_f‹m©s
[14].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[14].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1338 
image_f‹m©s
[15].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[15].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1339 
image_f‹m©s
[16].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[16].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1340 
image_f‹m©s
[17].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[17].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT16
 ;

1341 
image_f‹m©s
[18].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[18].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT32
 ;

1342 
image_f‹m©s
[19].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[19].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1343 
image_f‹m©s
[20].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[20].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT16
 ;

1344 
image_f‹m©s
[21].
image_ch™√l_‹dî
 = 
CL_A
; image_f‹m©s[21].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT32
 ;

1345 
image_f‹m©s
[22].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[22].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1346 
image_f‹m©s
[23].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[23].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1347 
image_f‹m©s
[24].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[24].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1348 
image_f‹m©s
[25].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[25].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1349 
image_f‹m©s
[26].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[26].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1350 
image_f‹m©s
[27].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[27].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1351 
image_f‹m©s
[28].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[28].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT16
 ;

1352 
image_f‹m©s
[29].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[29].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT32
 ;

1353 
image_f‹m©s
[30].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[30].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1354 
image_f‹m©s
[31].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[31].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT16
 ;

1355 
image_f‹m©s
[32].
image_ch™√l_‹dî
 = 
CL_RG
; image_f‹m©s[32].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT32
 ;

1356 
image_f‹m©s
[33].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[33].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1357 
image_f‹m©s
[34].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[34].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1358 
image_f‹m©s
[35].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[35].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1359 
image_f‹m©s
[36].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[36].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1360 
image_f‹m©s
[37].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[37].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1361 
image_f‹m©s
[38].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[38].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1362 
image_f‹m©s
[39].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[39].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT16
 ;

1363 
image_f‹m©s
[40].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[40].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT32
 ;

1364 
image_f‹m©s
[41].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[41].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1365 
image_f‹m©s
[42].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[42].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT16
 ;

1366 
image_f‹m©s
[43].
image_ch™√l_‹dî
 = 
CL_RA
; image_f‹m©s[43].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT32
 ;

1367 
image_f‹m©s
[44].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[44].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1368 
image_f‹m©s
[45].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[45].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1369 
image_f‹m©s
[46].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[46].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1370 
image_f‹m©s
[47].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[47].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1371 
image_f‹m©s
[48].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[48].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1372 
image_f‹m©s
[49].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[49].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1373 
image_f‹m©s
[50].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[50].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT16
 ;

1374 
image_f‹m©s
[51].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[51].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT32
 ;

1375 
image_f‹m©s
[52].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[52].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1376 
image_f‹m©s
[53].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[53].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT16
 ;

1377 
image_f‹m©s
[54].
image_ch™√l_‹dî
 = 
CL_RGBA
; image_f‹m©s[54].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT32
 ;

1378 
image_f‹m©s
[55].
image_ch™√l_‹dî
 = 
CL_BGRA
; image_f‹m©s[55].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1379 
image_f‹m©s
[56].
image_ch™√l_‹dî
 = 
CL_BGRA
; image_f‹m©s[56].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1380 
image_f‹m©s
[57].
image_ch™√l_‹dî
 = 
CL_BGRA
; image_f‹m©s[57].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1381 
image_f‹m©s
[58].
image_ch™√l_‹dî
 = 
CL_ARGB
; image_f‹m©s[58].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1382 
image_f‹m©s
[59].
image_ch™√l_‹dî
 = 
CL_ARGB
; image_f‹m©s[59].
image_ch™√l_d©a_ty≥
 = 
CL_SIGNED_INT8
 ;

1383 
image_f‹m©s
[60].
image_ch™√l_‹dî
 = 
CL_ARGB
; image_f‹m©s[60].
image_ch™√l_d©a_ty≥
 = 
CL_UNSIGNED_INT8
 ;

1384 
image_f‹m©s
[61].
image_ch™√l_‹dî
 = 
CL_INTENSITY
; image_f‹m©s[61].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1385 
image_f‹m©s
[62].
image_ch™√l_‹dî
 = 
CL_INTENSITY
; image_f‹m©s[62].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1386 
image_f‹m©s
[63].
image_ch™√l_‹dî
 = 
CL_INTENSITY
; image_f‹m©s[63].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1387 
image_f‹m©s
[64].
image_ch™√l_‹dî
 = 
CL_INTENSITY
; image_f‹m©s[64].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1388 
image_f‹m©s
[65].
image_ch™√l_‹dî
 = 
CL_INTENSITY
; image_f‹m©s[65].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1389 
image_f‹m©s
[66].
image_ch™√l_‹dî
 = 
CL_LUMINANCE
; image_f‹m©s[66].
image_ch™√l_d©a_ty≥
 = 
CL_FLOAT
 ;

1390 
image_f‹m©s
[67].
image_ch™√l_‹dî
 = 
CL_LUMINANCE
; image_f‹m©s[67].
image_ch™√l_d©a_ty≥
 = 
CL_HALF_FLOAT
 ;

1391 
image_f‹m©s
[68].
image_ch™√l_‹dî
 = 
CL_LUMINANCE
; image_f‹m©s[68].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT8
 ;

1392 
image_f‹m©s
[69].
image_ch™√l_‹dî
 = 
CL_LUMINANCE
; image_f‹m©s[69].
image_ch™√l_d©a_ty≥
 = 
CL_UNORM_INT16
 ;

1393 
image_f‹m©s
[70].
image_ch™√l_‹dî
 = 
CL_LUMINANCE
; image_f‹m©s[70].
image_ch™√l_d©a_ty≥
 = 
CL_SNORM_INT16
 ;

1395 }  
CL_INVALID_VALUE
;

1397 
	`›í˛_nŸ_im∂emíãd
(
__my_func__
,
__LINE__
);

1399  
CL_SUCCESS
;

1400 
	}
}

1402 
CL_API_ENTRY
 * 
CL_API_CALL


1403 
	$˛EnqueueM≠Buf„r
(
˛_comm™d_queue
 
comm™d_queue
,

1404 
˛_mem
 
buf„r
,

1405 
˛_boﬁ
 
blockög_m≠
,

1406 
˛_m≠_Êags
 
m≠_Êags
,

1407 
size_t
 
off£t
,

1408 
size_t
 
cb
,

1409 
˛_uöt
 
num_evíts_ö_waô_li°
,

1410 c⁄° 
˛_evít
 * 
evít_waô_li°
,

1411 
˛_evít
 * 
evít
,

1412 
˛_öt
 * 
îrcode_ªt
 ) 
CL_API_SUFFIX__VERSION_1_0


1414 
_˛_mem
 *
mem
 = 
comm™d_queue
->
	`gë_c⁄ãxt
()->
	`lookup_mem
(
buf„r
);

1415 
	`as£π
–
mem
->
	`is_⁄_ho°
() );

1416  
mem
->
	`ho°_±r
();

1417 
	}
}

1420 
CL_API_ENTRY
 
˛_öt
 
CL_API_CALL


1421 
	$˛SëComm™dQueuePr›îty
–
˛_comm™d_queue
 
comm™d_queue
,

1422 
˛_comm™d_queue_¥›îtõs
 
¥›îtõs
,

1423 
˛_boﬁ
 
íabÀ
,

1424 
˛_comm™d_queue_¥›îtõs
 *
ﬁd_¥›îtõs


1425 Ë
CL_API_SUFFIX__VERSION_1_0


1428  
CL_SUCCESS
;

1429 
	}
}

	@src/abstract_hardware_model.cc

28 
	~"ab°ø˘_h¨dw¨e_modñ.h
"

29 
	~"cuda-sim/mem‹y.h
"

30 
	~"›ti⁄_∑r£r.h
"

31 
	~"cuda-sim/±x_ú.h
"

32 
	~"cuda-sim/±x-°©s.h
"

33 
	~"cuda-sim/cuda-sim.h
"

34 
	~"gpgpu-sim/gpu-sim.h
"

35 
	~<Æg‹ôhm
>

37 
	gmem_ac˚ss_t
::
sm_√xt_ac˚ss_uid
 = 0;

38 
	gw¨p_ö°_t
::
sm_√xt_uid
 = 0;

40 
	$move_w¨p
–
w¨p_ö°_t
 *&
d°
, w¨p_ö°_à*&
§c
 )

42 
	`as£π
–
d°
->
	`em±y
() );

43 
w¨p_ö°_t
* 
ãmp
 = 
d°
;

44 
d°
 = 
§c
;

45 
§c
 = 
ãmp
;

46 
§c
->
	`˛ór
();

47 
	}
}

50 
	ggpgpu_fun˘i⁄Æ_sim_c⁄fig
::
	$ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
)

52 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_u£_cuobjdump", 
OPT_BOOL
,

53 &
m_±x_u£_cuobjdump
,

55 #i‡(
CUDART_VERSION
 >= 4000)

61 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_c⁄vît_to_±x∂us", 
OPT_BOOL
,

62 &
m_±x_c⁄vît_to_±x∂us
,

65 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_f‹˚_max_ˇ∑bûôy", 
OPT_UINT32
,

66 &
m_±x_f‹˚_max_ˇ∑bûôy
,

69 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_ö°_debug_to_fûe", 
OPT_BOOL
,

70 &
g_±x_ö°_debug_to_fûe
,

73 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_ö°_debug_fûe", 
OPT_CSTR
, &
g_±x_ö°_debug_fûe
,

76 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_ö°_debug_thªad_uid", 
OPT_INT32
, &
g_±x_ö°_debug_thªad_uid
,

79 
	}
}

81 
	ggpgpu_fun˘i⁄Æ_sim_c⁄fig
::
	$±x_£t_ãx_ˇche_löesize
(
löesize
)

83 
m_ãxˇche_löesize
 = 
löesize
;

84 
	}
}

86 
	ggpgpu_t
::
	$gpgpu_t
–c⁄° 
gpgpu_fun˘i⁄Æ_sim_c⁄fig
 &
c⁄fig
 )

87 : 
	$m_fun˘i⁄_modñ_c⁄fig
(
c⁄fig
)

89 
m_globÆ_mem
 = 
√w
 
mem‹y_•a˚_im∂
<8192>("global",64*1024);

90 
m_ãx_mem
 = 
√w
 
mem‹y_•a˚_im∂
<8192>("tex",64*1024);

91 
m_surf_mem
 = 
√w
 
mem‹y_•a˚_im∂
<8192>("surf",64*1024);

93 
m_dev_mÆloc
=
GLOBAL_HEAP_START
;

95 if(
m_fun˘i⁄_modñ_c⁄fig
.
	`gë_±x_ö°_debug_to_fûe
() != 0)

96 
±x_ö°_debug_fûe
 = 
	`f›í
(
m_fun˘i⁄_modñ_c⁄fig
.
	`gë_±x_ö°_debug_fûe
(), "w");

97 
	}
}

99 
addªss_ty≥
 
	$löe_size_ba£d_èg_func
(
√w_addr_ty≥
 
addªss
,Çew_addr_ty≥ 
löe_size
)

102  
addªss
 & ~(
löe_size
-1);

103 
	}
}

105 
	gw¨p_ö°_t
::
	$˛ór_a˘ive
–c⁄° 
a˘ive_mask_t
 &
öa˘ive
 ) {

106 
a˘ive_mask_t
 
ã°
 = 
m_w¨p_a˘ive_mask
;

107 
ã°
 &
öa˘ive
;

108 
	`as£π
–
ã°
 =
öa˘ive
 );

109 
m_w¨p_a˘ive_mask
 &~
öa˘ive
;

110 
	}
}

112 
	gw¨p_ö°_t
::
	$£t_nŸ_a˘ive
–
œ√_id
 ) {

113 
m_w¨p_a˘ive_mask
.
	`ª£t
(
œ√_id
);

114 
	}
}

116 
	gw¨p_ö°_t
::
	$£t_a˘ive
–c⁄° 
a˘ive_mask_t
 &
a˘ive
 ) {

117 
m_w¨p_a˘ive_mask
 = 
a˘ive
;

118 if–
m_ißtomic
 ) {

119  
i
=0; i < 
m_c⁄fig
->
w¨p_size
; i++ ) {

120 if–!
m_w¨p_a˘ive_mask
.
	`ã°
(
i
) ) {

121 
m_≥r_sˇœr_thªad
[
i
].
ˇŒback
.
fun˘i⁄
 = 
NULL
;

122 
m_≥r_sˇœr_thªad
[
i
].
ˇŒback
.
ö°ru˘i⁄
 = 
NULL
;

123 
m_≥r_sˇœr_thªad
[
i
].
ˇŒback
.
thªad
 = 
NULL
;

127 
	}
}

129 
	gw¨p_ö°_t
::
	$do_©omic
(
boﬁ
 
f‹˚Do
) {

130 
	`do_©omic
–
m_w¨p_a˘ive_mask
,
f‹˚Do
 );

131 
	}
}

133 
	gw¨p_ö°_t
::
	$do_©omic
–c⁄° 
a˘ive_mask_t
& 
ac˚ss_mask
,
boﬁ
 
f‹˚Do
 ) {

134 
	`as£π
–
m_ißtomic
 && (!
m_em±y
||
f‹˚Do
) );

135  
i
=0; i < 
m_c⁄fig
->
w¨p_size
; i++ )

137 if–
ac˚ss_mask
.
	`ã°
(
i
) )

139 
døm_ˇŒback_t
 &
cb
 = 
m_≥r_sˇœr_thªad
[
i
].
ˇŒback
;

140 if–
cb
.
thªad
 )

142 
	`¥ötf
("come here kan delete\n");

147 
	}
}

149 
	gw¨p_ö°_t
::
	$gíî©e_mem_ac˚s£s
()

151 if–
	`em±y
(Ë|| 
›
 =
MEMORY_BARRIER_OP
 || 
m_mem_ac˚s£s_¸óãd
 )

153 i‡–!((
›
 =
LOAD_OP
Ë|| (› =
STORE_OP
)) )

155 if–
m_w¨p_a˘ive_mask
.
	`cou¡
() == 0 )

158 c⁄° 
size_t
 
°¨tög_queue_size
 = 
m_ac˚ssq
.
	`size
();

160 
	`as£π
–
	`is_lﬂd
(Ë|| 
	`is_°‹e
() );

161 
	`as£π
–
m_≥r_sˇœr_thªad_vÆid
 );

163 
boﬁ
 
is_wrôe
 = 
	`is_°‹e
();

165 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
;

166 
•a˚
.
	`gë_ty≥
()) {

167 
c⁄°_•a˚
:

168 
∑øm_•a˚_kî√l
:

169 
ac˚ss_ty≥
 = 
CONST_ACC_R
;

171 
ãx_•a˚
:

172 
ac˚ss_ty≥
 = 
TEXTURE_ACC_R
;

174 
globÆ_•a˚
:

175 
ac˚ss_ty≥
 = 
is_wrôe
? 
GLOBAL_ACC_W
: 
GLOBAL_ACC_R
;

177 
loˇl_•a˚
:

178 
∑øm_•a˚_loˇl
:

179 
ac˚ss_ty≥
 = 
is_wrôe
? 
LOCAL_ACC_W
: 
LOCAL_ACC_R
;

181 
sh¨ed_•a˚
: ;

182 : 
	`as£π
(0); ;

186 
√w_addr_ty≥
 
ˇche_block_size
 = 0;

188  
•a˚
.
	`gë_ty≥
() ) {

189 
sh¨ed_•a˚
: {

190 
subw¨p_size
 = 
m_c⁄fig
->
w¨p_size
 / m_c⁄fig->
mem_w¨p_∑πs
;

191 
tŸÆ_ac˚s£s
=0;

192  
subw¨p
=0; subw¨∞< 
m_c⁄fig
->
mem_w¨p_∑πs
; subwarp++ ) {

195 
°d
::
m≠
<,°d::m≠<
√w_addr_ty≥
,> > 
b™k_accs
;

198  
thªad
=
subw¨p
*
subw¨p_size
;Åhread < (subwarp+1)*subwarp_size;Åhread++ ) {

199 if–!
	`a˘ive
(
thªad
) )

201 
√w_addr_ty≥
 
addr
 = 
m_≥r_sˇœr_thªad
[
thªad
].
memªqaddr
[0];

204 
b™k
 = 
m_c⁄fig
->
	`shmem_b™k_func
(
addr
);

205 
√w_addr_ty≥
 
w‹d
 = 
	`löe_size_ba£d_èg_func
(
addr
,
m_c⁄fig
->
WORD_SIZE
);

206 
b™k_accs
[
b™k
][
w‹d
]++;

210 
boﬁ
 
brﬂdˇ°_dëe˘ed
 = 
Ál£
;

211 
√w_addr_ty≥
 
brﬂdˇ°_w‹d
=(new_addr_type)-1;

212 
brﬂdˇ°_b™k
=()-1;

213 
°d
::
m≠
<,°d::m≠<
√w_addr_ty≥
,> >::
ôî©‹
 
b
;

214  
b
=
b™k_accs
.
	`begö
(); b !b™k_accs.
	`íd
(); b++ ) {

215 
b™k
 = 
b
->
fú°
;

216 
°d
::
m≠
<
√w_addr_ty≥
,> &
ac˚ss_£t
 = 
b
->
£c⁄d
;

217 
°d
::
m≠
<
√w_addr_ty≥
,>::
ôî©‹
 
w
;

218  
w
=
ac˚ss_£t
.
	`begö
(); w !ac˚ss_£t.
	`íd
(); ++w ) {

219 if–
w
->
£c⁄d
 > 1 ) {

221 
brﬂdˇ°_dëe˘ed
=
åue
;

222 
brﬂdˇ°_b™k
=
b™k
;

223 
brﬂdˇ°_w‹d
=
w
->
fú°
;

227 if–
brﬂdˇ°_dëe˘ed
 )

232 
max_b™k_ac˚s£s
=0;

233  
b
=
b™k_accs
.
	`begö
(); b !b™k_accs.
	`íd
(); b++ ) {

234 
b™k_ac˚s£s
=0;

235 
°d
::
m≠
<
√w_addr_ty≥
,> &
ac˚ss_£t
 = 
b
->
£c⁄d
;

236 
°d
::
m≠
<
√w_addr_ty≥
,>::
ôî©‹
 
w
;

237  
w
=
ac˚ss_£t
.
	`begö
(); w !ac˚ss_£t.
	`íd
(); ++w )

238 
b™k_ac˚s£s
 +
w
->
£c⁄d
;

239 if–
brﬂdˇ°_dëe˘ed
 && 
brﬂdˇ°_b™k
 =
b
->
fú°
 ) {

240  
w
=
ac˚ss_£t
.
	`begö
(); w !ac˚ss_£t.
	`íd
(); ++w ) {

241 if–
w
->
fú°
 =
brﬂdˇ°_w‹d
 ) {

242 
n
 = 
w
->
£c⁄d
;

243 
	`as£π
(
n
 > 1);

244 
	`as£π
(
b™k_ac˚s£s
 >(
n
-1));

245 
b™k_ac˚s£s
 -(
n
-1);

250 if–
b™k_ac˚s£s
 > 
max_b™k_ac˚s£s
 )

251 
max_b™k_ac˚s£s
 = 
b™k_ac˚s£s
;

255 
tŸÆ_ac˚s£s
+
max_b™k_ac˚s£s
;

257 
	`as£π
–
tŸÆ_ac˚s£s
 > 0 &&ÅŸÆ_ac˚s£†<
m_c⁄fig
->
w¨p_size
 );

258 
cy˛es
 = 
tŸÆ_ac˚s£s
;

259 
	`±x_fûe_löe_°©s_add_smem_b™k_c⁄Êi˘
–
pc
, 
tŸÆ_ac˚s£s
 );

263 
ãx_•a˚
:

264 
ˇche_block_size
 = 
m_c⁄fig
->
gpgpu_ˇche_ãxl1_löesize
;

266 
c⁄°_•a˚
: 
∑øm_•a˚_kî√l
:

267 
ˇche_block_size
 = 
m_c⁄fig
->
gpgpu_ˇche_c⁄°l1_löesize
;

270 
globÆ_•a˚
: 
loˇl_•a˚
: 
∑øm_•a˚_loˇl
:

271 if–
m_c⁄fig
->
gpgpu_cﬂÀs˚_¨ch
 == 13 ) {

272 if(
	`ißtomic
())

273 
	`mem‹y_cﬂÀscög_¨ch_13_©omic
(
is_wrôe
, 
ac˚ss_ty≥
);

275 
	`mem‹y_cﬂÀscög_¨ch_13
(
is_wrôe
, 
ac˚ss_ty≥
);

276 } 
	`ab‹t
();

281 
	`ab‹t
();

284 if–
ˇche_block_size
 ) {

285 
	`as£π
–
m_ac˚ssq
.
	`em±y
() );

286 
mem_ac˚ss_byã_mask_t
 
byã_mask
;

287 
°d
::
m≠
<
√w_addr_ty≥
,
a˘ive_mask_t
> 
ac˚s£s
;

288 
°d
::
m≠
<
√w_addr_ty≥
,
a˘ive_mask_t
>::
ôî©‹
 
a
;

289  
thªad
=0;Åhªad < 
m_c⁄fig
->
w¨p_size
;Åhread++ ) {

290 if–!
	`a˘ive
(
thªad
) )

292 
√w_addr_ty≥
 
addr
 = 
m_≥r_sˇœr_thªad
[
thªad
].
memªqaddr
[0];

293 
block_addªss
 = 
	`löe_size_ba£d_èg_func
(
addr
,
ˇche_block_size
);

294 
ac˚s£s
[
block_addªss
].
	`£t
(
thªad
);

295 
idx
 = 
addr
-
block_addªss
;

296  
i
=0; i < 
d©a_size
; i++ )

297 
byã_mask
.
	`£t
(
idx
+
i
);

299  
a
=
ac˚s£s
.
	`begö
();á !ac˚s£s.
	`íd
(); ++a )

300 
m_ac˚ssq
.
	`push_back
–
	`mem_ac˚ss_t
(
ac˚ss_ty≥
,
a
->
fú°
,
ˇche_block_size
,
is_wrôe
,a->
£c⁄d
,
byã_mask
) );

303 i‡–
•a˚
.
	`gë_ty≥
(Ë=
globÆ_•a˚
 ) {

304 
	`±x_fûe_löe_°©s_add_uncﬂÀs˚d_gmem
–
pc
, 
m_ac˚ssq
.
	`size
(Ë- 
°¨tög_queue_size
 );

306 
m_mem_ac˚s£s_¸óãd
=
åue
;

307 
	}
}

309 
	gw¨p_ö°_t
::
	$mem‹y_cﬂÀscög_¨ch_13
–
boﬁ
 
is_wrôe
, 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
 )

312 
£gmít_size
 = 0;

313 
w¨p_∑πs
 = 
m_c⁄fig
->
mem_w¨p_∑πs
;

314  
d©a_size
 ) {

315 1: 
£gmít_size
 = 32; ;

316 2: 
£gmít_size
 = 64; ;

317 4: 8: 16: 
£gmít_size
 = 128; ;

319 
subw¨p_size
 = 
m_c⁄fig
->
w¨p_size
 / 
w¨p_∑πs
;

321  
subw¨p
=0; subw¨∞< 
w¨p_∑πs
; subwarp++ ) {

322 
°d
::
m≠
<
√w_addr_ty≥
,
å™ß˘i⁄_öfo
> 
subw¨p_å™ß˘i⁄s
;

325  
thªad
=
subw¨p
*
subw¨p_size
;Åhread<subwarp_size*(subwarp+1);Åhread++ ) {

326 if–!
	`a˘ive
(
thªad
) )

329 
d©a_size_cﬂÀs
 = 
d©a_size
;

330 
num_ac˚s£s
 = 1;

332 if–
•a˚
.
	`gë_ty≥
(Ë=
loˇl_•a˚
 || s∑˚.gë_ty≥(Ë=
∑øm_•a˚_loˇl
 ) {

334 if(
d©a_size
 >= 4) {

335 
d©a_size_cﬂÀs
 = 4;

336 
num_ac˚s£s
 = 
d©a_size
/4;

342 
	`as£π
(
num_ac˚s£s
 <
MAX_ACCESSES_PER_INSN_PER_THREAD
);

344 
ac˚ss
=0;ác˚ss<
num_ac˚s£s
;áccess++) {

345 
√w_addr_ty≥
 
addr
 = 
m_≥r_sˇœr_thªad
[
thªad
].
memªqaddr
[
ac˚ss
];

346 
block_addªss
 = 
	`löe_size_ba£d_èg_func
(
addr
,
£gmít_size
);

347 
chunk
 = (
addr
&127)/32;

348 
å™ß˘i⁄_öfo
 &
öfo
 = 
subw¨p_å™ß˘i⁄s
[
block_addªss
];

351 
	`as£π
(
block_addªss
 =
	`löe_size_ba£d_èg_func
(
addr
+
d©a_size_cﬂÀs
-1,
£gmít_size
));

353 
öfo
.
chunks
.
	`£t
(
chunk
);

354 
öfo
.
a˘ive
.
	`£t
(
thªad
);

355 
idx
 = (
addr
&127);

356  
i
=0; i < 
d©a_size_cﬂÀs
; i++ )

357 
öfo
.
byãs
.
	`£t
(
idx
+
i
);

362 
°d
::
m≠
< 
√w_addr_ty≥
, 
å™ß˘i⁄_öfo
 >::
ôî©‹
 
t
;

363  
t
=
subw¨p_å™ß˘i⁄s
.
	`begö
();Å !=subw¨p_å™ß˘i⁄s.
	`íd
();Å++ ) {

364 
√w_addr_ty≥
 
addr
 = 
t
->
fú°
;

365 c⁄° 
å™ß˘i⁄_öfo
 &
öfo
 = 
t
->
£c⁄d
;

367 
	`mem‹y_cﬂÀscög_¨ch_13_ªdu˚_™d_£nd
(
is_wrôe
, 
ac˚ss_ty≥
, 
öfo
, 
addr
, 
£gmít_size
);

371 
	}
}

373 
	gw¨p_ö°_t
::
	$mem‹y_cﬂÀscög_¨ch_13_©omic
–
boﬁ
 
is_wrôe
, 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
 )

376 
	`as£π
(
•a˚
.
	`gë_ty≥
(Ë=
globÆ_•a˚
);

379 
£gmít_size
 = 0;

380 
w¨p_∑πs
 = 2;

381  
d©a_size
 ) {

382 1: 
£gmít_size
 = 32; ;

383 2: 
£gmít_size
 = 64; ;

384 4: 8: 16: 
£gmít_size
 = 128; ;

386 
subw¨p_size
 = 
m_c⁄fig
->
w¨p_size
 / 
w¨p_∑πs
;

388  
subw¨p
=0; subw¨∞< 
w¨p_∑πs
; subwarp++ ) {

389 
°d
::
m≠
<
√w_addr_ty≥
,°d::
li°
<
å™ß˘i⁄_öfo
>> 
subw¨p_å™ß˘i⁄s
;

392  
thªad
=
subw¨p
*
subw¨p_size
;Åhread<subwarp_size*(subwarp+1);Åhread++ ) {

393 if–!
	`a˘ive
(
thªad
) )

396 
√w_addr_ty≥
 
addr
 = 
m_≥r_sˇœr_thªad
[
thªad
].
memªqaddr
[0];

397 
block_addªss
 = 
	`löe_size_ba£d_èg_func
(
addr
,
£gmít_size
);

398 
chunk
 = (
addr
&127)/32;

401 
	`as£π
(
block_addªss
 =
	`löe_size_ba£d_èg_func
(
addr
+
d©a_size
-1,
£gmít_size
));

404 
boﬁ
 
√w_å™ß˘i⁄
 = 
åue
;

405 
°d
::
li°
<
å™ß˘i⁄_öfo
>::
ôî©‹
 
ô
;

406 
å™ß˘i⁄_öfo
* 
öfo
;

407 
ô
=
subw¨p_å™ß˘i⁄s
[
block_addªss
].
	`begö
(); it!=subw¨p_å™ß˘i⁄s[block_addªss].
	`íd
(); it++) {

408 
idx
 = (
addr
&127);

409 if(
nŸ
 
ô
->
	`ã°_byãs
(
idx
,idx+
d©a_size
-1)) {

410 
√w_å™ß˘i⁄
 = 
Ál£
;

411 
öfo
 = &(*
ô
);

415 if(
√w_å™ß˘i⁄
) {

417 
subw¨p_å™ß˘i⁄s
[
block_addªss
].
	`push_back
(
	`å™ß˘i⁄_öfo
());

418 
öfo
 = &
subw¨p_å™ß˘i⁄s
[
block_addªss
].
	`back
();

420 
	`as£π
(
öfo
);

422 
öfo
->
chunks
.
	`£t
(
chunk
);

423 
öfo
->
a˘ive
.
	`£t
(
thªad
);

424 
idx
 = (
addr
&127);

425  
i
=0; i < 
d©a_size
; i++ ) {

426 
	`as£π
(!
öfo
->
byãs
.
	`ã°
(
idx
+
i
));

427 
öfo
->
byãs
.
	`£t
(
idx
+
i
);

432 
°d
::
m≠
< 
√w_addr_ty≥
, std::
li°
<
å™ß˘i⁄_öfo
> >::
ôî©‹
 
t_li°
;

433  
t_li°
=
subw¨p_å™ß˘i⁄s
.
	`begö
();Å_li° !=subw¨p_å™ß˘i⁄s.
	`íd
();Å_list++ ) {

435 
√w_addr_ty≥
 
addr
 = 
t_li°
->
fú°
;

436 c⁄° 
°d
::
li°
<
å™ß˘i⁄_öfo
>& 
å™ß˘i⁄_li°
 = 
t_li°
->
£c⁄d
;

438 
°d
::
li°
<
å™ß˘i⁄_öfo
>::
c⁄°_ôî©‹
 
t
;

439 
t
=
å™ß˘i⁄_li°
.
	`begö
();Å!Òønß˘i⁄_li°.
	`íd
();Å++) {

441 c⁄° 
å™ß˘i⁄_öfo
 &
öfo
 = *
t
;

442 
	`mem‹y_cﬂÀscög_¨ch_13_ªdu˚_™d_£nd
(
is_wrôe
, 
ac˚ss_ty≥
, 
öfo
, 
addr
, 
£gmít_size
);

446 
	}
}

448 
	gw¨p_ö°_t
::
	$mem‹y_cﬂÀscög_¨ch_13_ªdu˚_™d_£nd
–
boﬁ
 
is_wrôe
, 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
, c⁄° 
å™ß˘i⁄_öfo
 &
öfo
, 
√w_addr_ty≥
 
addr
, 
£gmít_size
 )

450 
	`as£π
–(
addr
 & (
£gmít_size
-1)) == 0 );

452 c⁄° 
°d
::
bô£t
<4> &
q
 = 
öfo
.
chunks
;

453 
	`as£π
–
q
.
	`cou¡
() >= 1 );

454 
°d
::
bô£t
<2> 
h
;

456 
size
=
£gmít_size
;

457 if–
£gmít_size
 == 128 ) {

458 
boﬁ
 
lowî_hÆf_u£d
 = 
q
[0] || q[1];

459 
boﬁ
 
uµî_hÆf_u£d
 = 
q
[2] || q[3];

460 if–
lowî_hÆf_u£d
 && !
uµî_hÆf_u£d
 ) {

462 
size
 = 64;

463 if(
q
[0]Ë
h
.
	`£t
(0);

464 if(
q
[1]Ë
h
.
	`£t
(1);

465 } i‡–(!
lowî_hÆf_u£d
Ë&& 
uµî_hÆf_u£d
 ) {

467 
addr
 =áddr+64;

468 
size
 = 64;

469 if(
q
[2]Ë
h
.
	`£t
(0);

470 if(
q
[3]Ë
h
.
	`£t
(1);

472 
	`as£π
(
lowî_hÆf_u£d
 && 
uµî_hÆf_u£d
);

474 } if–
£gmít_size
 == 64 ) {

476 if–(
addr
 % 128) == 0 ) {

477 if(
q
[0]Ë
h
.
	`£t
(0);

478 if(
q
[1]Ë
h
.
	`£t
(1);

480 
	`as£π
–(
addr
 % 128) == 64 );

481 if(
q
[2]Ë
h
.
	`£t
(0);

482 if(
q
[3]Ë
h
.
	`£t
(1);

485 if–
size
 == 64 ) {

486 
boﬁ
 
lowî_hÆf_u£d
 = 
h
[0];

487 
boﬁ
 
uµî_hÆf_u£d
 = 
h
[1];

488 if–
lowî_hÆf_u£d
 && !
uµî_hÆf_u£d
 ) {

489 
size
 = 32;

490 } i‡–(!
lowî_hÆf_u£d
Ë&& 
uµî_hÆf_u£d
 ) {

491 
addr
 =áddr+32;

492 
size
 = 32;

494 
	`as£π
(
lowî_hÆf_u£d
 && 
uµî_hÆf_u£d
);

497 
m_ac˚ssq
.
	`push_back
–
	`mem_ac˚ss_t
(
ac˚ss_ty≥
,
addr
,
size
,
is_wrôe
,
öfo
.
a˘ive
,öfo.
byãs
) );

498 
	}
}

500 
	gw¨p_ö°_t
::
	$com∂ëed
–
cy˛e
 ) const

502 
œãncy
 = 
cy˛e
 - 
issue_cy˛e
;

503 
	`as£π
(
œãncy
 <
cy˛e
);

504 
	`±x_fûe_löe_°©s_add_œãncy
(
pc
, 
œãncy
 * 
	`a˘ive_cou¡
());

505 
	}
}

508 
	gkî√l_öfo_t
::
m_√xt_uid
 = 1;

510 
	gkî√l_öfo_t
::
	$kî√l_öfo_t
(
˛ass
 
kî√l_öfo_t
 *
m
)

512 
m_kî√l_íåy
 = 
m
->m_kernel_entry;

513 
m_grid_dim
 = 
m
->m_grid_dim;

514 
m_block_dim
 = 
m
->m_block_dim;

516 
i
 = 0; i < 
Thªad_Num
; i++)

518 
m_√xt_˘a
[
i
].
x
=0;

519 
m_√xt_˘a
[
i
].
y
=0;

520 
m_√xt_˘a
[
i
].
z
=0;

521 
m_√xt_tid
[
i
]=
m_√xt_˘a
[i];

522 
m_öô_˘a
[
i
] = 
m_√xt_˘a
[i];

524 
m_√xt_˘a_Æl
.
x
 = 0;

525 
m_√xt_˘a_Æl
.
y
 = 0;

526 
m_√xt_˘a_Æl
.
z
 = 0;

528 
m_num_c‹es_ru¬ög
=0;

529 
m_uid
 = 
m
->m_uid;

530 
m_∑øm_mem
 = 
m
->m_param_mem;

532 
	}
}

533 
	gkî√l_öfo_t
::
	$kî√l_öfo_t
–
dim3
 
gridDim
, dim3 
blockDim
, 
˛ass
 
fun˘i⁄_öfo
 *
íåy
 )

535 
m_kî√l_íåy
=
íåy
;

536 
m_grid_dim
=
gridDim
;

537 
m_block_dim
=
blockDim
;

538 
i
 = 0; i < 
Thªad_Num
; i++)

540 
m_√xt_˘a
[
i
].
x
=0;

541 
m_√xt_˘a
[
i
].
y
=0;

542 
m_√xt_˘a
[
i
].
z
=0;

543 
m_√xt_tid
[
i
]=
m_√xt_˘a
[i];

544 
m_öô_˘a
[
i
] = 
m_√xt_˘a
[i];

546 
m_√xt_˘a_Æl
.
x
 = 0;

547 
m_√xt_˘a_Æl
.
y
 = 0;

548 
m_√xt_˘a_Æl
.
z
 = 0;

550 
m_num_c‹es_ru¬ög
=0;

551 
m_uid
 = 
m_√xt_uid
++;

552 
m_∑øm_mem
 = 
√w
 
mem‹y_•a˚_im∂
<8192>("param",64*1024);

553 
	}
}

555 
	gkî√l_öfo_t
::~
	$kî√l_öfo_t
()

557 
i
 = 0; i < 
Thªad_Num
; i++)

558 
	`as£π
–
m_a˘ive_thªads
[
i
].
	`em±y
() );

559 
dñëe
 
m_∑øm_mem
;

560 
	}
}

562 
	g°d
::
°rög
 
kî√l_öfo_t
::
	$«me
() const

564  
m_kî√l_íåy
->
	`gë_«me
();

565 
	}
}

567 
	gsimt_°ack
::
	$simt_°ack
–
wid
, 
w¨pSize
)

569 
m_w¨p_id
=
wid
;

570 
m_w¨p_size
 = 
w¨pSize
;

571 
m_°ack_t›
 = 0;

572 
m_pc
 = (
addªss_ty≥
*)
	`ˇŒoc
(
m_w¨p_size
 * 2, (address_type));

573 
m_ˇŒdïth
 = (*)
	`ˇŒoc
(
m_w¨p_size
 * 2, ());

574 
m_a˘ive_mask
 = 
√w
 
simt_mask_t
[
m_w¨p_size
 * 2];

575 
m_ªcvg_pc
 = (
addªss_ty≥
*)
	`ˇŒoc
(
m_w¨p_size
 * 2, (address_type));

576 
m_bønch_div_cy˛e
 = (*)
	`ˇŒoc
(
m_w¨p_size
 * 2, ());

577 
	`ª£t
();

578 
	}
}

580 
	gsimt_°ack
::
	$ª£t
()

582 
m_°ack_t›
 = 0;

583 
	`mem£t
(
m_pc
, -1, 
m_w¨p_size
 * 2 * (
addªss_ty≥
));

584 
	`mem£t
(
m_ˇŒdïth
, 0, 
m_w¨p_size
 * 2 * ());

585 
	`mem£t
(
m_ªcvg_pc
, -1, 
m_w¨p_size
 * 2 * (
addªss_ty≥
));

586 
	`mem£t
(
m_bønch_div_cy˛e
, 0, 
m_w¨p_size
 * 2 * ());

587  
i
=0; i < 2*
m_w¨p_size
; i++ )

588 
m_a˘ive_mask
[
i
].
	`ª£t
();

589 
	}
}

591 
	gsimt_°ack
::
	$œunch
–
addªss_ty≥
 
°¨t_pc
, c⁄° 
simt_mask_t
 &
a˘ive_mask
 )

593 
	`ª£t
();

594 
m_pc
[0] = 
°¨t_pc
;

595 
m_ˇŒdïth
[0] = 1;

596 
m_a˘ive_mask
[0] = 
a˘ive_mask
;

597 
	}
}

599 c⁄° 
	gsimt_mask_t
 &
	gsimt_°ack
::
	$gë_a˘ive_mask
() const

601  
m_a˘ive_mask
[
m_°ack_t›
];

602 
	}
}

604 
	gsimt_°ack
::
	$gë_pdom_°ack_t›_öfo
–*
pc
, *
Ωc
 ) const

606 *
pc
 = 
m_pc
[
m_°ack_t›
];

607 *
Ωc
 = 
m_ªcvg_pc
[
m_°ack_t›
];

608 
	}
}

610 
	gsimt_°ack
::
	$gë_Ω
() const

612  
m_ªcvg_pc
[
m_°ack_t›
];

613 
	}
}

615 
	gsimt_°ack
::
	$¥öt
 (
FILE
 *
fout
) const

617 c⁄° 
simt_°ack
 *
w¨p
=
this
;

618  
k
=0; k <
w¨p
->
m_°ack_t›
; k++ ) {

619 i‡–
k
==0 ) {

620 
	`Ârötf
(
fout
, "w%02d %1u ", 
m_w¨p_id
, 
k
 );

622 
	`Ârötf
(
fout
, " %1u ", 
k
 );

624 
j
=0; j<
m_w¨p_size
; j++)

625 
	`Ârötf
(
fout
, "%c", (
w¨p
->
m_a˘ive_mask
[
k
].
	`ã°
(
j
)?'1':'0') );

626 
	`Ârötf
(
fout
, "Öc: 0x%03x", 
w¨p
->
m_pc
[
k
] );

627 i‡–
w¨p
->
m_ªcvg_pc
[
k
] == ()-1 ) {

628 
	`Ârötf
(
fout
,"Ñp: ---- cd: %2u ", 
w¨p
->
m_ˇŒdïth
[
k
] );

630 
	`Ârötf
(
fout
,"Ñp: %4u cd: %2u ", 
w¨p
->
m_ªcvg_pc
[
k
], w¨p->
m_ˇŒdïth
[k] );

632 i‡–
w¨p
->
m_bønch_div_cy˛e
[
k
] != 0 ) {

633 
	`Ârötf
(
fout
," bd@%6u ", (Ë
w¨p
->
m_bønch_div_cy˛e
[
k
] );

635 
	`Ârötf
(
fout
," " );

637 
	`±x_¥öt_ö¢
–
w¨p
->
m_pc
[
k
], 
fout
 );

638 
	`Ârötf
(
fout
,"\n");

640 
	}
}

642 
	gsimt_°ack
::
	$upd©e
–
simt_mask_t
 &
thªad_d⁄e
, 
addr_ve˘‹_t
 &
√xt_pc
, 
addªss_ty≥
 
ªcvg_pc
 )

644 
°ack_t›
 = 
m_°ack_t›
;

646 
	`as£π
–
√xt_pc
.
	`size
(Ë=
m_w¨p_size
 );

648 
simt_mask_t
 
t›_a˘ive_mask
 = 
m_a˘ive_mask
[
°ack_t›
];

649 
addªss_ty≥
 
t›_ªcvg_pc
 = 
m_ªcvg_pc
[
°ack_t›
];

650 
addªss_ty≥
 
t›_pc
 = 
m_pc
[
°ack_t›
];

652 
	`as£π
(
t›_a˘ive_mask
.
	`™y
());

654 c⁄° 
addªss_ty≥
 
nuŒ_pc
 = 0;

655 
boﬁ
 
w¨p_divîged
 = 
Ál£
;

656 
addªss_ty≥
 
√w_ªcvg_pc
 = 
nuŒ_pc
;

657 
t›_a˘ive_mask
.
	`™y
()) {

660 
addªss_ty≥
 
tmp_√xt_pc
 = 
nuŒ_pc
;

661 
simt_mask_t
 
tmp_a˘ive_mask
;

662 
i
 = 
m_w¨p_size
 - 1; i >= 0; i--) {

663 i‡–
t›_a˘ive_mask
.
	`ã°
(
i
) ) {

664 i‡(
thªad_d⁄e
.
	`ã°
(
i
)) {

665 
t›_a˘ive_mask
.
	`ª£t
(
i
);

666 } i‡(
tmp_√xt_pc
 =
nuŒ_pc
) {

667 
tmp_√xt_pc
 = 
√xt_pc
[
i
];

668 
tmp_a˘ive_mask
.
	`£t
(
i
);

669 
t›_a˘ive_mask
.
	`ª£t
(
i
);

670 } i‡(
tmp_√xt_pc
 =
√xt_pc
[
i
]) {

671 
tmp_a˘ive_mask
.
	`£t
(
i
);

672 
t›_a˘ive_mask
.
	`ª£t
(
i
);

679 i‡(
tmp_√xt_pc
 =
t›_ªcvg_pc
) ;

683 i‡(
t›_a˘ive_mask
.
	`™y
(Ë&& !
w¨p_divîged
 ) {

684 
w¨p_divîged
 = 
åue
;

686 
√w_ªcvg_pc
 = 
ªcvg_pc
;

687 i‡(
√w_ªcvg_pc
 !
t›_ªcvg_pc
) {

688 
m_pc
[
°ack_t›
] = 
√w_ªcvg_pc
;

689 
m_bønch_div_cy˛e
[
°ack_t›
] = 
gpu_sim_cy˛e
;

690 
°ack_t›
 += 1;

691 
m_bønch_div_cy˛e
[
°ack_t›
] = 0;

696 i‡(
w¨p_divîged
 && 
tmp_√xt_pc
 =
√w_ªcvg_pc
) ;

699 
m_pc
[
°ack_t›
] = 
tmp_√xt_pc
;

700 
m_a˘ive_mask
[
°ack_t›
] = 
tmp_a˘ive_mask
;

701 i‡(
w¨p_divîged
) {

702 
m_ˇŒdïth
[
°ack_t›
] = 0;

703 
m_ªcvg_pc
[
°ack_t›
] = 
√w_ªcvg_pc
;

705 
m_ªcvg_pc
[
°ack_t›
] = 
t›_ªcvg_pc
;

707 
°ack_t›
 += 1;

709 
m_°ack_t›
 = 
°ack_t›
 - 1;

711 
	`as£π
(
m_°ack_t›
 >= 0);

712 
	`as£π
(
m_°ack_t›
 < 
m_w¨p_size
 * 2);

714 i‡(
w¨p_divîged
) {

715 
	`±x_fûe_löe_°©s_add_w¨p_divîgí˚
(
t›_pc
, 1);

717 
	}
}

719 
	gc‹e_t
::
	$execuã_w¨p_ö°_t
(
w¨p_ö°_t
 &
ö°
, 
w¨pSize
, 
w¨pId
){

721  
t
=0;Å < 
w¨pSize
;Å++ ) {

722 if–
ö°
.
	`a˘ive
(
t
) ) {

723 if(
w¨pId
==((-1)))

724 
w¨pId
 = 
ö°
.
	`w¨p_id
();

725 
tid
=
w¨pSize
*
w¨pId
+
t
;

728 
m_thªad
[
tid
]->
	`±x_exec_ö°
(
ö°
,
t
);

732 
	`checkExecuti⁄SètusAndUpd©e
(
ö°
,
t
,
tid
);

735 
	}
}

737 
boﬁ
 
	gc‹e_t
::
	$±x_thªad_d⁄e
–
hw_thªad_id
 ) const

739  ((
m_thªad
[ 
hw_thªad_id
 ]==
NULL
Ë|| m_thªad[ hw_thªad_id ]->
	`is_d⁄e
());

740 
	}
}

742 
	gc‹e_t
::
	$upd©eSIMTSèck
(
w¨pId
, 
w¨pSize
, 
w¨p_ö°_t
 * 
ö°
){

743 
simt_mask_t
 
thªad_d⁄e
;

744 
addr_ve˘‹_t
 
√xt_pc
;

745 
wtid
 = 
w¨pId
 * 
w¨pSize
;

746 
i
 = 0; i < 
w¨pSize
; i++) {

747 if–
	`±x_thªad_d⁄e
(
wtid
+
i
) ) {

748 
thªad_d⁄e
.
	`£t
(
i
);

749 
√xt_pc
.
	`push_back
–(
addªss_ty≥
)-1 );

751 if–
ö°
->
ªc⁄vîgí˚_pc
 =
RECONVERGE_RETURN_PC
 )

752 
ö°
->
ªc⁄vîgí˚_pc
 = 
	`gë_ªtu∫_pc
(
m_thªad
[
wtid
+
i
]);

753 
√xt_pc
.
	`push_back
–
m_thªad
[
wtid
+
i
]->
	`gë_pc
() );

756 
m_simt_°ack
[
w¨pId
]->
	`upd©e
(
thªad_d⁄e
,
√xt_pc
,
ö°
->
ªc⁄vîgí˚_pc
);

757 
	}
}

760 
w¨p_ö°_t
 
	gc‹e_t
::
	$gëExecuãW¨p
(
w¨pId
){

761 
pc
,
Ωc
;

762 
m_simt_°ack
[
w¨pId
]->
	`gë_pdom_°ack_t›_öfo
(&
pc
,&
Ωc
);

763 
w¨p_ö°_t
 
wi
*
	`±x_„tch_ö°
(
pc
);

764 
wi
.
	`£t_a˘ive
(
m_simt_°ack
[
w¨pId
]->
	`gë_a˘ive_mask
());

765  
wi
;

766 
	}
}

768 
	gc‹e_t
::
	$öôûizeSIMTSèck
(
w¨ps
, 
w¨psSize
)

770 
m_simt_°ack
 = 
√w
 
simt_°ack
*[
w¨ps
];

771 
i
 = 0; i < 
w¨ps
; ++i)

772 
m_simt_°ack
[
i
] = 
√w
 
	`simt_°ack
(i,
w¨psSize
);

773 
	}
}

	@src/abstract_hardware_model.h

28 #i‚de‡
ABSTRACT_HARDWARE_MODEL_INCLUDED


29 
	#ABSTRACT_HARDWARE_MODEL_INCLUDED


	)

31 
	e_mem‹y_•a˚_t
 {

32 
	mundeföed_•a˚
=0,

33 
	mªg_•a˚
,

34 
	mloˇl_•a˚
,

35 
	msh¨ed_•a˚
,

36 
	m∑øm_•a˚_un˛assifõd
,

37 
	m∑øm_•a˚_kî√l
,

38 
	m∑øm_•a˚_loˇl
,

39 
	mc⁄°_•a˚
,

40 
	mãx_•a˚
,

41 
	msurf_•a˚
,

42 
	mglobÆ_•a˚
,

43 
	mgíîic_•a˚
,

44 
	mö°ru˘i⁄_•a˚


47 #ifde‡
__˝lu•lus


49 
	~<°rög.h
>

50 
	~<°dio.h
>

52 
	t√w_addr_ty≥
;

53 
	taddªss_ty≥
;

54 
	taddr_t
;

58 
	eu¨ch_›_t
 {

59 
	mNO_OP
=-1,

60 
	mALU_OP
=1,

61 
	mSFU_OP
,

62 
	mALU_SFU_OP
,

63 
	mLOAD_OP
,

64 
	mSTORE_OP
,

65 
	mBRANCH_OP
,

66 
	mBARRIER_OP
,

67 
	mMEMORY_BARRIER_OP


69 
u¨ch_›_t
 
	t›_ty≥
;

71 
	e_mem‹y_›_t
 {

72 
	mno_mem‹y_›
 = 0,

73 
	mmem‹y_lﬂd
,

74 
	mmem‹y_°‹e


77 
	~<bô£t
>

78 
	~<li°
>

79 
	~<ve˘‹
>

80 
	~<as£π.h
>

81 
	~<°dlib.h
>

82 
	~<m≠
>

84 #i‡!
deföed
(
__VECTOR_TYPES_H__
)

85 
	sdim3
 {

86 
	mx
, 
	my
, 
	mz
;

94 #i‡ 
deföed
–
__GNUC__
 ) 
™d
 
nŸ
 deföed–
_GLIBCXX_DEBUG
 )

95 #i‡
__GNUC__
 >4 && 
__GNUC_MINOR__
 >= 3

96 
	~<un‹dîed_m≠
>

97 
	#my_hash_m≠
 
°d
::
un‹dîed_m≠


	)

99 
	~<ext/hash_m≠
>

100 
«me•a˚
 
	g°d
 {

101 
usög
 
«me•a˚
 
	g__gnu_cxx
;

103 
	#my_hash_m≠
 
°d
::
hash_m≠


	)

106 
	~<m≠
>

107 
	#my_hash_m≠
 
°d
::
m≠


	)

108 
	#USE_MAP


	)

112 
	sKAIN_Rubbish


114 
	mBlock
;

115 
	mw¨p
;

116 
	mödex
;

118 
	#Thªad_Num
 300

119 
	#W¨p_PîBlock
 16

121 
	#AŒC‹es
 30

122 

	)

124 
	#Clu°î_Thªad_Num
 10

125 
	#P_C_size
 13335792

126 
	#KAIN_W¨p_cou¡s
 33

	)

127 
	#KAIN_ö°ru˘i⁄_buf„r
 1500

128 

	)

130 
	#KAIN_rubbish_buf„r
 200000

	)

131 
	#KAIN_mem‹y_buf„r
 10

	)

132 
	#KAIN_rubbish_thªad
 1

133 

	)

137 
	~<sched.h
>

138 
ö¸emít_x_thí_y_thí_z
–
dim3
 &
i
, c⁄° dim3 &
bound
);

141 
End_Block_Pro˚ss
[5];

142 
Begö_Block_Pro˚ss
[5];

144 ˛as†
	ckî√l_öfo_t
 {

145 
	mpublic
:

154 
kî√l_öfo_t
–
dim3
 
gridDim
, dim3 
blockDim
, 
˛ass
 
fun˘i⁄_öfo
 *
íåy
 );

155 
kî√l_öfo_t
(
˛ass
 kî√l_öfo_à*
m
);

156 ~
kî√l_öfo_t
();

158 
	$KAIN_£t_Mem2_NULL
()

160 
m_∑øm_mem
 = 
NULL
;

163 
	$öc_ru¬ög
(Ë{ 
m_num_c‹es_ru¬ög
++; 
	}
}

164 
	$dec_ru¬ög
()

166 
	`as£π
–
m_num_c‹es_ru¬ög
 > 0 );

167 
m_num_c‹es_ru¬ög
--;

168 
	}
}

169 
boﬁ
 
	$ru¬ög
(Ëc⁄° {  
m_num_c‹es_ru¬ög
>0; 
	}
}

170 
boﬁ
 
	$d⁄e
() const

172  
	`no_m‹e_˘as_to_run
(Ë&& !
	`ru¬ög
();

173 
	}
}

174 
˛ass
 
fun˘i⁄_öfo
 *
	$íåy
(Ë{  
m_kî√l_íåy
; 
	}
}

175 c⁄° 
˛ass
 
fun˘i⁄_öfo
 *
	$íåy
(Ëc⁄° {  
m_kî√l_íåy
; 
	}
}

177 
size_t
 
	$num_blocks
() const

179  
m_grid_dim
.
x
 * m_grid_dim.
y
 * m_grid_dim.
z
;

180 
	}
}

181 
size_t
 
	$num_blocks_runID_KAIN
(
Thªad_ID
) const

183  
m_√xt_˘a
[
Thªad_ID
].
x
 + 
m_grid_dim
.x*m_√xt_˘a[Thªad_ID].
y
+m_grid_dim.x*m_grid_dim.y*m_√xt_˘a[Thªad_ID].
z
;

184 
	}
}

220 
size_t
 
	$thªads_≥r_˘a
() const

222  
m_block_dim
.
x
 * m_block_dim.
y
 * m_block_dim.
z
;

223 
	}
}

225 
dim3
 
	$gë_grid_dim
(Ëc⁄° {  
m_grid_dim
; 
	}
}

226 
dim3
 
	$gë_˘a_dim
(Ëc⁄° {  
m_block_dim
; 
	}
}

227 
	$ö¸emít_˘a_id_≥rf‹m™˚
(
Thªad_ID
)

230 
	`ö¸emít_x_thí_y_thí_z
(
m_√xt_˘a_Æl
,
m_grid_dim
);

231 
m_√xt_˘a
[
Thªad_ID
] = 
m_√xt_˘a_Æl
;

232 
m_√xt_tid
[
Thªad_ID
].
x
=0;

233 
m_√xt_tid
[
Thªad_ID
].
y
=0;

234 
m_√xt_tid
[
Thªad_ID
].
z
=0;

236 
	}
}

238 
	$ö¸emít_˘a_id
(
Thªad_ID
)

242 
m_√xt_˘a
[
Thªad_ID
] = 
m_√xt_˘a_Æl
;

243 
	`ö¸emít_x_thí_y_thí_z
(
m_√xt_˘a_Æl
,
m_grid_dim
);

244 
m_√xt_tid
[
Thªad_ID
].
x
=0;

245 
m_√xt_tid
[
Thªad_ID
].
y
=0;

246 
m_√xt_tid
[
Thªad_ID
].
z
=0;

247 
	}
}

248 
dim3
 
	$gë_√xt_˘a_id
(
Thªad_ID
Ëc⁄° {  
m_√xt_˘a
[Thªad_ID]; 
	}
}

249 
boﬁ
 
	$no_m‹e_˘as_to_run
() const

254 
Pro˚ss_id
;

255 
blocks_now
 = 
m_√xt_˘a_Æl
.
x
 + m_√xt_˘a_Æl.
y
 * 
m_grid_dim
.x + m_√xt_˘a_Æl.
z
 * m_grid_dim.x * m_grid_dim.y;

256 
blocks_ˇn
 = 
m_grid_dim_kaö
.
x
 + m_grid_dim_kaö.
y
 * 
m_grid_dim
.x + m_grid_dim_kaö.
z
 * m_grid_dim.x * m_grid_dim.y;

257 
boﬁ
 
ªt
 = 
blocks_now
 >
blocks_ˇn
;

259  
ªt
;

260 
	}
}

264 
boﬁ
 
	$KAIN_˛ór_˘a
(
˛ass
 
fun˘i⁄_öfo
 *
mm
)

266 
m_√xt_˘a_Æl
.
x
 = 0;

267 
m_√xt_˘a_Æl
.
y
 = 0;

268 
m_√xt_˘a_Æl
.
z
 = 0;

269 
i
 = 0; i < 
Thªad_Num
; i++)

271 
m_√xt_˘a
[
i
].
x
=0;

272 
m_√xt_˘a
[
i
].
y
=0;

273 
m_√xt_˘a
[
i
].
z
=0;

274 
m_√xt_tid
[
i
]=
m_√xt_˘a
[i];

275 
m_a˘ive_thªads
[
i
].
	`˛ór
();

283 
m_num_c‹es_ru¬ög
 = 0;

284 
m_kî√l_íåy
 = 
mm
;

285 
	}
}

286 
boﬁ
 
	$KAIN_£t_˘a
(
¥o˚ss_id
)

288 
Puª_simuœti⁄_blockID
;

289 
Fun˘i⁄_ovî_thªad
;

290 
Pro˚ss_cou¡
;

292 
Fun˘i⁄_ovî_thªad
 = 0;

293 
Æl_blocks
 = 
	`num_blocks
();

294 
blocks_≥r_¥o˚ss
 = 
Æl_blocks
 / 
Pro˚ss_cou¡
;

295 
Àave_blocks
 = 
Æl_blocks
 % 
Pro˚ss_cou¡
;

296 
begö
 = 
blocks_≥r_¥o˚ss
 * 
¥o˚ss_id
;

297 
íd
 = 
blocks_≥r_¥o˚ss
 * (
¥o˚ss_id
+1);

299 
Begö_Block_Pro˚ss
[
¥o˚ss_id
] = 
begö
;

306 if(
¥o˚ss_id
 =
Pro˚ss_cou¡
 - 1)

307 
íd
 =Énd+
Àave_blocks
;

308 
End_Block_Pro˚ss
[
¥o˚ss_id
] = 
íd
;

310 if(
¥o˚ss_id
 == 0)

312 
Puª_simuœti⁄_blockID
 = 
íd
;

316 
Puª_simuœti⁄_blockID
 = 999999999;

320 
m_√xt_˘a_Æl
.
z
 = 
begö
 / (
m_grid_dim
.
x
*m_grid_dim.
y
);

321 
m_√xt_˘a_Æl
.
y
 = (
begö
 - m_√xt_˘a_Æl.
z
 * 
m_grid_dim
.
x
*m_grid_dim.y)/ m_grid_dim.x;

322 
m_√xt_˘a_Æl
.
x
 = 
begö
 - m_√xt_˘a_Æl.
z
 * 
m_grid_dim
.x*m_grid_dim.
y
 - m_next_cta_all.y * m_grid_dim.x;

323 
	`as£π
(
m_√xt_˘a_Æl
.
x
 + m_√xt_˘a_Æl.
y
 * 
m_grid_dim
.x + m_√xt_˘a_Æl.
z
 * m_grid_dim.x * m_grid_dim.y =
begö
);

325 
m_√xt_˘a
[0] = 
m_√xt_˘a_Æl
;

328 
m_grid_dim_kaö
.
z
 = 
íd
 / (
m_grid_dim
.
x
*m_grid_dim.
y
);

329 
m_grid_dim_kaö
.
y
 = (
íd
 - m_grid_dim_kaö.
z
 * 
m_grid_dim
.
x
*m_grid_dim.y)/ m_grid_dim.x;

330 
m_grid_dim_kaö
.
x
 = 
íd
 - m_grid_dim_kaö.
z
 * 
m_grid_dim
.x*m_grid_dim.
y
 - m_grid_dim_kain.y * m_grid_dim.x;

331 
	`as£π
(
m_grid_dim_kaö
.
x
 + m_grid_dim_kaö.
y
 * 
m_grid_dim
.x + m_grid_dim_kaö.
z
 * m_grid_dim.x * m_grid_dim.y =
íd
);

337 
	`¥ötf
("Begö, Pro˚s†id :%d, x i†%d,y i†%d, z i†%d\n",
¥o˚ss_id
,
m_√xt_˘a_Æl
.
x
,m_√xt_˘a_Æl.
y
,m_√xt_˘a_Æl.
z
);

338 
	`¥ötf
("End, Pro˚s†id :%d, x i†%d,y i†%d, z i†%d\n",
¥o˚ss_id
,
m_grid_dim_kaö
.
x
,m_grid_dim_kaö.
y
,m_grid_dim_kaö.
z
);

339 
	`fÊush
(
°dout
);

340 
	}
}

341 
boﬁ
 
	$no_m‹e_˘as_to_run_kaö
(
Thªad_ID
, *
Check_agaö
)

343 
Mem‹y_C
;

344 
˛ass
 
KAIN_w¨p_ö°
 **
Mem‹y
;

345 
˛ass
 
KAIN_w¨p_ö°
 **
block_w¨pid
[299999][100];

346 
Föished_⁄_Sim
[299999];

347 
La°_Run_Block
[
Thªad_Num
];

348 
Pro˚ss_id
;

349 
Fun˘i⁄_ovî_thªad
;

351 
±hªad_muãx_t
 
sh¨ed_mem‹y_lookup_muãx
;

352 
	`±hªad_muãx_lock
(&
sh¨ed_mem‹y_lookup_muãx
);

356 
blocks_now
 = 
m_√xt_˘a_Æl
.
x
 + m_√xt_˘a_Æl.
y
 * 
m_grid_dim
.x + m_√xt_˘a_Æl.
z
 * m_grid_dim.x * m_grid_dim.y;

357 
blocks_ˇn
 = 
m_grid_dim_kaö
.
x
 + m_grid_dim_kaö.
y
 * 
m_grid_dim
.x + m_grid_dim_kaö.
z
 * m_grid_dim.x * m_grid_dim.y;

358 
boﬁ
 
ªt
 = 
blocks_now
 >
blocks_ˇn
;

361 if(
ªt
 =
Ál£
)

363 if(
La°_Run_Block
[
Thªad_ID
] == -1)

365 
	`ö¸emít_˘a_id
(
Thªad_ID
);

366 
blockID

	`num_blocks_runID_KAIN
(
Thªad_ID
);

367 
La°_Run_Block
[
Thªad_ID
] = 
blockID
;

368 
nw¨ps
;

369 if(
	`thªads_≥r_˘a
()%32==0 )

370 
nw¨ps
 = 
	`thªads_≥r_˘a
()/32;

372 
nw¨ps
 = 
	`thªads_≥r_˘a
()/32 + 1;

373 
i
 = 0; i < 
nw¨ps
; i++)

375 
block_w¨pid
[
blockID
][
i
][0] = 
Mem‹y
[
Mem‹y_C
];

376 
Mem‹y_C
++;

377 
block_w¨pid
[
blockID
][
i
][1] = 
Mem‹y
[
Mem‹y_C
];

378 
Mem‹y_C
++;

379 
	`as£π
(
Mem‹y_C
 < 
Thªad_Num
*
W¨p_PîBlock
*2+2);

384 
œ°_block
 = 
La°_Run_Block
[
Thªad_ID
];

385 if(
Föished_⁄_Sim
[
œ°_block
] == 1)

387 
	`ö¸emít_˘a_id
(
Thªad_ID
);

388 
blockID

	`num_blocks_runID_KAIN
(
Thªad_ID
);

389 
La°_Run_Block
[
Thªad_ID
] = 
blockID
;

390 
nw¨ps
;

391 if(
	`thªads_≥r_˘a
()%32==0 )

392 
nw¨ps
 = 
	`thªads_≥r_˘a
()/32;

394 
nw¨ps
 = 
	`thªads_≥r_˘a
()/32 + 1;

395 
i
 = 0; i < 
nw¨ps
; i++)

397 
block_w¨pid
[
blockID
][
i
][0] = block_w¨pid[
œ°_block
][i][0] ;

398 
block_w¨pid
[
blockID
][
i
][1] = block_w¨pid[
œ°_block
][i][1];

403 *
Check_agaö
 = 1;

409 if(
ªt
 =
åue
 && 
Pro˚ss_id
== 0 )

411 i‡(
blocks_now
 >
	`num_blocks
())

413 
ªt
 = 
åue
;

414 
Fun˘i⁄_ovî_thªad
++;

418 
	`ö¸emít_˘a_id
(
Thªad_ID
);

419 
ªt
 = 
Ál£
;

423 
	`±hªad_muãx_u∆ock
(&
sh¨ed_mem‹y_lookup_muãx
);

424  
ªt
;

425 
	}
}

427 
	$ö¸emít_thªad_id
(
Thªad_ID
Ë{ 
	`ö¸emít_x_thí_y_thí_z
(
m_√xt_tid
[Thªad_ID],
m_block_dim
); 
	}
}

428 
dim3
 
	$gë_√xt_thªad_id_3d
(
Thªad_ID
Ëc⁄° {  
m_√xt_tid
[Thªad_ID]; 
	}
}

429 
	$gë_√xt_thªad_id
(
Thªad_ID
) const

431  
m_√xt_tid
[
Thªad_ID
].
x
 + 
m_block_dim
.x*m_√xt_tid[Thªad_ID].
y
 + m_block_dim.x*m_block_dim.y*m_√xt_tid[Thªad_ID].
z
;

432 
	}
}

433 
boﬁ
 
	$m‹e_thªads_ö_˘a
(
Thªad_ID
) const

435  
m_√xt_tid
[
Thªad_ID
].
z
 < 
m_block_dim
.z && m_√xt_tid[Thªad_ID].
y
 < m_block_dim.y && m_√xt_tid[Thªad_ID].
x
 < m_block_dim.x;

436 
	}
}

437 
	$gë_uid
(Ëc⁄° {  
m_uid
; 
	}
}

438 
	g°d
::
°rög
 
	$«me
() const;

440 
°d
::
li°
<
˛ass
 
±x_thªad_öfo
 *> &
	$a˘ive_thªads
(
Thªad_ID
Ë{  
m_a˘ive_thªads
[Thªad_ID]; 
	}
}

441 
˛ass
 
mem‹y_•a˚
 *
	$gë_∑øm_mem‹y
() {

443  
m_∑øm_mem
; 
	}
}

445 
	g¥iv©e
:

446 
kî√l_öfo_t
( const kernel_info_t & );

447 
	g›î©‹
=–c⁄° 
kî√l_öfo_t
 & );

449 
˛ass
 
fun˘i⁄_öfo
 *
	gm_kî√l_íåy
;

451 
	gm_uid
;

452 
	gm_√xt_uid
;

453 
dim3
 
	gm_grid_dim
;

454 
dim3
 
	gm_grid_dim_kaö
;

455 
dim3
 
	gm_block_dim
;

456 
dim3
 
	gm_√xt_˘a_Æl
;

457 
dim3
 
	gm_√xt_˘a
[
Thªad_Num
];

458 
dim3
 
	gm_√xt_tid
[
Thªad_Num
];

459 
dim3
 
	gm_öô_˘a
[
Thªad_Num
];

460 
size_t
 
	g˘a_≥r_kaö
[
Thªad_Num
];

461 
	gm_num_c‹es_ru¬ög
;

463 
	g°d
::
li°
<
˛ass
 
±x_thªad_öfo
 *> 
m_a˘ive_thªads
[299999];

464 
˛ass
 
mem‹y_•a˚
 *
	gm_∑øm_mem
;

467 
	sc‹e_c⁄fig
 {

468 
c‹e_c⁄fig
()

470 
	mm_vÆid
 = 
Ál£
;

471 
	mnum_shmem_b™k
=16;

473 
vútuÆ
 
öô
() = 0;

475 
boﬁ
 
	mm_vÆid
;

476 
	mw¨p_size
;

479 
	mgpgpu_cﬂÀs˚_¨ch
;

482 c⁄° 
addªss_ty≥
 
	mWORD_SIZE
=4;

483 
	mnum_shmem_b™k
;

484 
shmem_b™k_func
(
addªss_ty≥
 
addr
) const

486  ((
	maddr
/
	mWORD_SIZE
Ë% 
	mnum_shmem_b™k
);

488 
	mmem_w¨p_∑πs
;

489 
	mgpgpu_shmem_size
;

492 
	mgpgpu_ˇche_ãxl1_löesize
;

493 
	mgpgpu_ˇche_c⁄°l1_löesize
;

495 
	mgpgpu_max_ö¢_issue_≥r_w¨p
;

499 c⁄° 
	gMAX_WARP_SIZE
 = 32;

500 
	g°d
::
	tbô£t
<
	tMAX_WARP_SIZE
> 
	ta˘ive_mask_t
;

501 
	#MAX_WARP_SIZE_SIMT_STACK
 
MAX_WARP_SIZE


	)

502 
	g°d
::
	tbô£t
<
	tMAX_WARP_SIZE_SIMT_STACK
> 
	tsimt_mask_t
;

503 
	g°d
::
	tve˘‹
<
	taddªss_ty≥
> 
	taddr_ve˘‹_t
;

505 ˛as†
	csimt_°ack
 {

506 
	mpublic
:

507 
simt_°ack
–
wid
, 
w¨pSize
);

509 
ª£t
();

510 
œunch
–
addªss_ty≥
 
°¨t_pc
, c⁄° 
simt_mask_t
 &
a˘ive_mask
 );

511 
upd©e
–
simt_mask_t
 &
thªad_d⁄e
, 
addr_ve˘‹_t
 &
√xt_pc
, 
addªss_ty≥
 
ªcvg_pc
 );

513 c⁄° 
	msimt_mask_t
 &
	$gë_a˘ive_mask
() const;

514 
	$gë_pdom_°ack_t›_öfo
–*
pc
, *
Ωc
 ) const;

515 
	$gë_Ω
() const;

516 
	$¥öt
(
FILE
*
Â
) const;

518 
¥Ÿe˘ed
:

519 
m_w¨p_id
;

520 
m_°ack_t›
;

521 
m_w¨p_size
;

523 
addªss_ty≥
 *
m_pc
;

524 
simt_mask_t
 *
m_a˘ive_mask
;

525 
addªss_ty≥
 *
m_ªcvg_pc
;

526 *
m_ˇŒdïth
;

528 *
m_bønch_div_cy˛e
;

531 
	#GLOBAL_HEAP_START
 0x80000000

	)

533 
	#SHARED_MEM_SIZE_MAX
 (64*1024)

	)

534 
	#LOCAL_MEM_SIZE_MAX
 (8*1024)

	)

535 
	#MAX_STREAMING_MULTIPROCESSORS
 64

	)

536 
	#MAX_THREAD_PER_SM
 2048

	)

537 
	#TOTAL_LOCAL_MEM_PER_SM
 (
MAX_THREAD_PER_SM
*
LOCAL_MEM_SIZE_MAX
)

	)

538 
	#TOTAL_SHARED_MEM
 (
MAX_STREAMING_MULTIPROCESSORS
*
SHARED_MEM_SIZE_MAX
)

	)

539 
	#TOTAL_LOCAL_MEM
 (
MAX_STREAMING_MULTIPROCESSORS
*
MAX_THREAD_PER_SM
*
LOCAL_MEM_SIZE_MAX
)

	)

540 
	#SHARED_GENERIC_START
 (
GLOBAL_HEAP_START
-
TOTAL_SHARED_MEM
)

	)

541 
	#LOCAL_GENERIC_START
 (
SHARED_GENERIC_START
-
TOTAL_LOCAL_MEM
)

	)

542 
	#STATIC_ALLOC_LIMIT
 (
GLOBAL_HEAP_START
 - (
TOTAL_LOCAL_MEM
+
TOTAL_SHARED_MEM
))

	)

544 #i‡!
	`deföed
(
__CUDA_RUNTIME_API_H__
)

546 
	ecudaCh™√lF‹m©Köd
 {

547 
cudaCh™√lF‹m©KödSig√d
,

548 
cudaCh™√lF‹m©KödUnsig√d
,

549 
cudaCh™√lF‹m©KödFlﬂt


552 
	scudaCh™√lF‹m©Desc
 {

553 
x
;

554 
y
;

555 
z
;

556 
w
;

557 
cudaCh™√lF‹m©Köd
 
f
;

560 
	scudaAºay
 {

561 *
devPå
;

562 
devPå32
;

563 
cudaCh™√lF‹m©Desc
 
desc
;

564 
width
;

565 
height
;

566 
size
;

567 
dimísi⁄s
;

570 
	ecudaTextuªAddªssMode
 {

571 
cudaAddªssModeWøp
,

572 
cudaAddªssModeCœmp


575 
	ecudaTextuªFûãrMode
 {

576 
cudaFûãrModePoöt
,

577 
cudaFûãrModeLöór


580 
	ecudaTextuªRódMode
 {

581 
cudaRódModeEÀmítTy≥
,

582 
cudaRódModeN‹mÆizedFlﬂt


585 
	sãxtuªRe„ªn˚
 {

586 
n‹mÆized
;

587 
cudaTextuªFûãrMode
 
fûãrMode
;

588 
cudaTextuªAddªssMode
 
addªssMode
[2];

589 
cudaCh™√lF‹m©Desc
 
ch™√lDesc
;

594 ˛as†
	cgpgpu_fun˘i⁄Æ_sim_c⁄fig


596 
public
:

597 
	`ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
);

599 
	`±x_£t_ãx_ˇche_löesize
(
löesize
);

601 
	$gë_f‹˚d_max_ˇ∑bûôy
(Ëc⁄° {  
m_±x_f‹˚_max_ˇ∑bûôy
; }

602 
boﬁ
 
	$c⁄vît_to_±x∂us
(Ëc⁄° {  
m_±x_c⁄vît_to_±x∂us
; 
	}
}

603 
boﬁ
 
	$u£_cuobjdump
(Ëc⁄° {  
m_±x_u£_cuobjdump
; 
	}
}

605 
	$gë_±x_ö°_debug_to_fûe
(Ëc⁄° {  
g_±x_ö°_debug_to_fûe
; 
	}
}

606 c⁄° * 
	$gë_±x_ö°_debug_fûe
(Ëc⁄° {  
g_±x_ö°_debug_fûe
; 
	}
}

607 
	$gë_±x_ö°_debug_thªad_uid
(Ëc⁄° {  
g_±x_ö°_debug_thªad_uid
; 
	}
}

608 
	$gë_ãxˇche_löesize
(Ëc⁄° {  
m_ãxˇche_löesize
; 
	}
}

610 
	g¥iv©e
:

612 
m_±x_c⁄vît_to_±x∂us
;

613 
	gm_±x_u£_cuobjdump
;

614 
	gm_±x_f‹˚_max_ˇ∑bûôy
;

616 
	gg_±x_ö°_debug_to_fûe
;

617 * 
	gg_±x_ö°_debug_fûe
;

618 
	gg_±x_ö°_debug_thªad_uid
;

620 
	gm_ãxˇche_löesize
;

623 ˛as†
	cgpgpu_t
 {

624 
	mpublic
:

625 
gpgpu_t
–c⁄° 
gpgpu_fun˘i⁄Æ_sim_c⁄fig
 &
c⁄fig
 );

626 * 
gpu_mÆloc
–
size_t
 
size
 );

627 * 
gpu_mÆloˇºay
–
size_t
 
cou¡
 );

628 
gpu_mem£t
–
size_t
 
d°_°¨t_addr
, 
c
, size_à
cou¡
 );

629 
mem˝y_to_gpu
–
size_t
 
d°_°¨t_addr
, c⁄° *
§c
, size_à
cou¡
 );

630 
mem˝y_‰om_gpu
–*
d°
, 
size_t
 
§c_°¨t_addr
, size_à
cou¡
 );

631 
mem˝y_gpu_to_gpu
–
size_t
 
d°
, size_à
§c
, size_à
cou¡
 );

633 
˛ass
 
mem‹y_•a˚
 *
	$gë_globÆ_mem‹y
(Ë{  
m_globÆ_mem
; }

634 
˛ass
 
mem‹y_•a˚
 *
	$gë_ãx_mem‹y
(Ë{  
m_ãx_mem
; 
	}
}

635 
˛ass
 
mem‹y_•a˚
 *
	$gë_surf_mem‹y
(Ë{  
m_surf_mem
; 
	}
}

637 
gpgpu_±x_sim_bödTextuªToAºay
(c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
, c⁄° 
cudaAºay
* 
¨øy
);

638 
gpgpu_±x_sim_bödNameToTextuª
(c⁄° * 
«me
, c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
);

639 c⁄° * 
gpgpu_±x_sim_födName‰omTextuª
(c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
);

641 c⁄° 
ãxtuªRe„ªn˚
* 
gë_ãxªf
(c⁄° 
°d
::
°rög
 &
ãx«me
) const

643 
°d
::
m≠
<°d::
°rög
, c⁄° 
	gãxtuªRe„ªn˚
*>::
c⁄°_ôî©‹
 
t
=
m_NameToTextuªRef
.
föd
(
ãx«me
);

644 
as£π
–
t
 !
m_NameToTextuªRef
.
íd
() );

645  
	gt
->
	g£c⁄d
;

647 c⁄° 
cudaAºay
* 
	$gë_ãx¨øy
–c⁄° 
ãxtuªRe„ªn˚
 *
ãxªf
 ) const

652 
°d
::
m≠
<c⁄° 
ãxtuªRe„ªn˚
*,c⁄° 
cudaAºay
*>::
c⁄°_ôî©‹
 
t
=
m_TextuªRefToCudaAºay
.
	`föd
(
ãxªf
);

653 
	`as£π
(
t
 !
m_TextuªRefToCudaAºay
.
	`íd
());

655  
t
->
£c⁄d
;

656 
	}
}

657 c⁄° 
ãxtuªInfo
* 
	$gë_ãxöfo
–c⁄° 
ãxtuªRe„ªn˚
 *
ãxªf
 ) const

659 
°d
::
m≠
<c⁄° 
ãxtuªRe„ªn˚
*, c⁄° 
ãxtuªInfo
*>::
c⁄°_ôî©‹
 
t
=
m_TextuªRefToTexuªInfo
.
	`föd
(
ãxªf
);

660 
	`as£π
(
t
 !
m_TextuªRefToTexuªInfo
.
	`íd
());

661  
t
->
£c⁄d
;

662 
	}
}

664 c⁄° 
	ggpgpu_fun˘i⁄Æ_sim_c⁄fig
 &
	$gë_c⁄fig
(Ëc⁄° {  
m_fun˘i⁄_modñ_c⁄fig
; 
	}
}

665 
FILE
* 
	$gë_±x_ö°_debug_fûe
(Ë{  
±x_ö°_debug_fûe
; 
	}
}

667 
	g¥Ÿe˘ed
:

668 c⁄° 
gpgpu_fun˘i⁄Æ_sim_c⁄fig
 &
m_fun˘i⁄_modñ_c⁄fig
;

669 
FILE
* 
	g±x_ö°_debug_fûe
;

671 
˛ass
 
mem‹y_•a˚
 *
	gm_globÆ_mem
;

672 
˛ass
 
mem‹y_•a˚
 *
	gm_ãx_mem
;

673 
˛ass
 
mem‹y_•a˚
 *
	gm_surf_mem
;

675 
	gm_dev_mÆloc
;

677 
	g°d
::
m≠
<
°d
::
°rög
, c⁄° 
	gãxtuªRe„ªn˚
*> 
	gm_NameToTextuªRef
;

678 
	g°d
::
m≠
<c⁄° 
ãxtuªRe„ªn˚
*,c⁄° 
	gcudaAºay
*> 
	gm_TextuªRefToCudaAºay
;

679 
	g°d
::
m≠
<c⁄° 
ãxtuªRe„ªn˚
*, c⁄° 
	gãxtuªInfo
*> 
	gm_TextuªRefToTexuªInfo
;

682 
	sgpgpu_±x_sim_kî√l_öfo


686 
	mlmem
;

687 
	msmem
;

688 
	mcmem
;

689 
	mªgs
;

690 
	m±x_vîsi⁄
;

691 
	msm_èrgë
;

694 
	sgpgpu_±x_sim_¨g
 {

695 
gpgpu_±x_sim_¨g
(Ë{ 
	mm_°¨t
=
NULL
; }

696 
gpgpu_±x_sim_¨g
(c⁄° *
¨g
, 
size_t
 
size
, size_à
off£t
)

698 
	mm_°¨t
=
¨g
;

699 
	mm_nbyãs
=
size
;

700 
	mm_off£t
=
off£t
;

702 c⁄° *
	mm_°¨t
;

703 
size_t
 
	mm_nbyãs
;

704 
size_t
 
	mm_off£t
;

707 
	g°d
::
	tli°
<
	tgpgpu_±x_sim_¨g
> 
	tgpgpu_±x_sim_¨g_li°_t
;

709 ˛as†
	cmem‹y_•a˚_t
 {

710 
	mpublic
:

711 
	$mem‹y_•a˚_t
(Ë{ 
m_ty≥
 = 
undeföed_•a˚
; 
m_b™k
=0; }

712 
	$mem‹y_•a˚_t
–c⁄° 
_mem‹y_•a˚_t
 &
‰om
 ) { 
m_ty≥
 = from; 
m_b™k
 = 0; 
	}
}

713 
boﬁ
 
	g›î©‹
==–c⁄° 
mem‹y_•a˚_t
 &
x
 ) c⁄° {  (
m_b™k
 =x.m_b™kË&& (
m_ty≥
 == x.m_type); }

714 
boﬁ
 
	g›î©‹
!=–c⁄° 
mem‹y_•a˚_t
 &
x
 ) c⁄° {  !(*
this
 == x); }

715 
boﬁ
 
	g›î©‹
<–c⁄° 
	gmem‹y_•a˚_t
 &
	gx
 ) const

717 if(
	gm_ty≥
 < 
	gx
.m_type)

718  
	gåue
;

719 if(
	gm_ty≥
 > 
	gx
.m_type)

720  
	gÁl£
;

721 if–
	gm_b™k
 < 
	gx
.m_bank )

722  
	gåue
;

723  
	gÁl£
;

725 
_mem‹y_•a˚_t
 
	$gë_ty≥
(Ëc⁄° {  
m_ty≥
; 
	}
}

726 
	$gë_b™k
(Ëc⁄° {  
m_b™k
; 
	}
}

727 
	$£t_b™k
–
b
 ) { 
m_b™k
 = b; 
	}
}

728 
boﬁ
 
	$is_c⁄°
(Ëc⁄° {  (
m_ty≥
 =
c⁄°_•a˚
Ë|| (m_ty≥ =
∑øm_•a˚_kî√l
); 
	}
}

729 
boﬁ
 
	$is_loˇl
(Ëc⁄° {  (
m_ty≥
 =
loˇl_•a˚
Ë|| (m_ty≥ =
∑øm_•a˚_loˇl
); 
	}
}

731 
	g¥iv©e
:

732 
_mem‹y_•a˚_t
 
m_ty≥
;

733 
	gm_b™k
;

736 c⁄° 
	gMAX_MEMORY_ACCESS_SIZE
 = 128;

737 
	g°d
::
	tbô£t
<
	tMAX_MEMORY_ACCESS_SIZE
> 
	tmem_ac˚ss_byã_mask_t
;

738 
	#NO_PARTIAL_WRITE
 (
	`mem_ac˚ss_byã_mask_t
())

	)

740 
	emem_ac˚ss_ty≥
 {

741 
	mGLOBAL_ACC_R
,

742 
	mLOCAL_ACC_R
,

743 
	mCONST_ACC_R
,

744 
	mTEXTURE_ACC_R
,

745 
	mGLOBAL_ACC_W
,

746 
	mLOCAL_ACC_W
,

747 
	mL1_WRBK_ACC
,

748 
	mL2_WRBK_ACC
,

749 
	mINST_ACC_R
,

750 
	mNUM_MEM_ACCESS_TYPE


753 
	eˇche_›î©‹_ty≥
 {

754 
	mCACHE_UNDEFINED
,

757 
	mCACHE_ALL
,

758 
	mCACHE_LAST_USE
,

759 
	mCACHE_VOLATILE
,

762 
	mCACHE_STREAMING
,

763 
	mCACHE_GLOBAL
,

766 
	mCACHE_WRITE_BACK
,

767 
	mCACHE_WRITE_THROUGH


770 ˛as†
	cmem_ac˚ss_t
 {

771 
	mpublic
:

772 
	$mem_ac˚ss_t
(Ë{ 
	`öô
(); }

773 
	$mem_ac˚ss_t
–
mem_ac˚ss_ty≥
 
ty≥
,

774 
addªss_ty≥
 
addªss
,

775 
size
,

776 
boﬁ
 
wr
 )

778 
	`öô
();

779 
m_ty≥
 = 
ty≥
;

780 
m_addr
 = 
addªss
;

781 
m_ªq_size
 = 
size
;

782 
m_wrôe
 = 
wr
;

783 
	}
}

784 
	$mem_ac˚ss_t
–
mem_ac˚ss_ty≥
 
ty≥
,

785 
addªss_ty≥
 
addªss
,

786 
size
,

787 
boﬁ
 
wr
,

788 c⁄° 
a˘ive_mask_t
 &
a˘ive_mask
,

789 c⁄° 
mem_ac˚ss_byã_mask_t
 &
byã_mask
 )

790 : 
	`m_w¨p_mask
(
a˘ive_mask
), 
	$m_byã_mask
(
byã_mask
)

792 
	`öô
();

793 
m_ty≥
 = 
ty≥
;

794 
m_addr
 = 
addªss
;

795 
m_ªq_size
 = 
size
;

796 
m_wrôe
 = 
wr
;

797 
	}
}

799 
√w_addr_ty≥
 
	$gë_addr
(Ëc⁄° {  
m_addr
; 
	}
}

800 
	$gë_size
(Ëc⁄° {  
m_ªq_size
; 
	}
}

801 c⁄° 
	ga˘ive_mask_t
 &
	$gë_w¨p_mask
(Ëc⁄° {  
m_w¨p_mask
; 
	}
}

802 
boﬁ
 
	$is_wrôe
(Ëc⁄° {  
m_wrôe
; 
	}
}

803 
mem_ac˚ss_ty≥
 
	$gë_ty≥
(Ëc⁄° {  
m_ty≥
; 
	}
}

804 
mem_ac˚ss_byã_mask_t
 
	$gë_byã_mask
(Ëc⁄° {  
m_byã_mask
; 
	}
}

806 
	$¥öt
(
FILE
 *
Â
) const

808 
	`Ârötf
(
Â
,"addr=0x%Œx, %s, size=%u, ", 
m_addr
, 
m_wrôe
?"°‹e":"lﬂd ", 
m_ªq_size
 );

809 
m_ty≥
) {

810 
GLOBAL_ACC_R
: 
	`Ârötf
(
Â
,"GLOBAL_R"); ;

811 
LOCAL_ACC_R
: 
	`Ârötf
(
Â
,"LOCAL_R "); ;

812 
CONST_ACC_R
: 
	`Ârötf
(
Â
,"CONST "); ;

813 
TEXTURE_ACC_R
: 
	`Ârötf
(
Â
,"TEXTURE "); ;

814 
GLOBAL_ACC_W
: 
	`Ârötf
(
Â
,"GLOBAL_W"); ;

815 
LOCAL_ACC_W
: 
	`Ârötf
(
Â
,"LOCAL_W "); ;

816 
L2_WRBK_ACC
: 
	`Ârötf
(
Â
,"L2_WRBK "); ;

817 
INST_ACC_R
: 
	`Ârötf
(
Â
,"INST "); ;

818 
L1_WRBK_ACC
: 
	`Ârötf
(
Â
,"L1_WRBK "); ;

819 : 
	`Ârötf
(
Â
,"unknown "); ;

821 
	}
}

823 
	g¥iv©e
:

824 
	$öô
()

826 
m_uid
=++
sm_√xt_ac˚ss_uid
;

827 
m_addr
=0;

828 
m_ªq_size
=0;

829 
	}
}

831 
	gm_uid
;

832 
√w_addr_ty≥
 
	gm_addr
;

833 
boﬁ
 
	gm_wrôe
;

834 
	gm_ªq_size
;

835 
mem_ac˚ss_ty≥
 
	gm_ty≥
;

836 
a˘ive_mask_t
 
	gm_w¨p_mask
;

837 
mem_ac˚ss_byã_mask_t
 
	gm_byã_mask
;

839 
	gsm_√xt_ac˚ss_uid
;

842 
˛ass
 
	gmem_„tch
;

844 ˛as†
	cmem_„tch_öãrÁ˚
 {

845 
	mpublic
:

846 
vútuÆ
 
boﬁ
 
	$fuŒ
–
size
, 
boﬁ
 
wrôe
 ) const = 0;

847 
vútuÆ
 
	`push
–
mem_„tch
 *
mf
 ) = 0;

850 ˛as†
	cmem_„tch_Æloˇt‹
 {

851 
public
:

852 
vútuÆ
 
mem_„tch
 *
	$Æloc
–
√w_addr_ty≥
 
addr
, 
mem_ac˚ss_ty≥
 
ty≥
, 
size
, 
boﬁ
 
wr
 ) const = 0;

853 
vútuÆ
 
mem_„tch
 *
	$Æloc
–c⁄° 
˛ass
 
w¨p_ö°_t
 &
ö°
, c⁄° 
mem_ac˚ss_t
 &
ac˚ss
 ) const = 0;

857 
	#MAX_REG_OPERANDS
 8

	)

859 
	sdøm_ˇŒback_t
 {

860 
	`døm_ˇŒback_t
(Ë{ 
fun˘i⁄
=
NULL
; 
ö°ru˘i⁄
=NULL; 
thªad
=NULL; }

861 (*
fun˘i⁄
)(c⁄° 
˛ass
 
ö°_t
*, cœs†
±x_thªad_öfo
*);

862 c⁄° 
˛ass
 
ö°_t
* 
ö°ru˘i⁄
;

863 
˛ass
 
±x_thªad_öfo
 *
thªad
;

866 ˛as†
	cö°_t
 {

867 
public
:

868 
	$ö°_t
()

870 
m_decoded
=
Ál£
;

871 
pc
=(
addªss_ty≥
)-1;

872 
ªc⁄vîgí˚_pc
=(
addªss_ty≥
)-1;

873 
›
=
NO_OP
;

874 
	`mem£t
(
out
, 0, ());

875 
	`mem£t
(
ö
, 0, ());

876 
is_ve˘‹ö
=0;

877 
is_ve˘‹out
=0;

878 
•a˚
 = 
	`mem‹y_•a˚_t
();

879 
ˇche_›
 = 
CACHE_UNDEFINED
;

880 
œãncy
 = 1;

881 
öôüti⁄_öãrvÆ
 = 1;

882  
i
=0; i < 
MAX_REG_OPERANDS
; i++ ) {

883 
¨ch_ªg
.
§c
[
i
] = -1;

884 
¨ch_ªg
.
d°
[
i
] = -1;

886 
isize
=0;

888 
boﬁ
 
	$vÆid
(Ëc⁄° {  
m_decoded
; 
	}
}

889 
vútuÆ
 
	$¥öt_ö¢
–
FILE
 *
Â
 ) const

891 
	`Ârötf
(
Â
," [ö° @Öc=0x%04x] ", 
pc
 );

892 
	}
}

893 
boﬁ
 
	$is_lﬂd
(Ëc⁄° {  (
›
 =
LOAD_OP
 || 
mem‹y_›
 =
mem‹y_lﬂd
); 
	}
}

894 
boﬁ
 
	$is_°‹e
(Ëc⁄° {  (
›
 =
STORE_OP
 || 
mem‹y_›
 =
mem‹y_°‹e
); 
	}
}

896 
addªss_ty≥
 
	gpc
;

897 
	gisize
;

898 
›_ty≥
 
	g›
;

899 
_mem‹y_›_t
 
	gmem‹y_›
;

901 
addªss_ty≥
 
	gªc⁄vîgí˚_pc
;

903 
	gout
[4];

904 
	gö
[4];

905 
	gis_ve˘‹ö
;

906 
	gis_ve˘‹out
;

907 
	g¥ed
;

908 
	g¨1
, 
	g¨2
;

911 
	gd°
[
MAX_REG_OPERANDS
];

912 
	g§c
[
MAX_REG_OPERANDS
];

913 } 
	g¨ch_ªg
;

915 
	gœãncy
;

916 
	göôüti⁄_öãrvÆ
;

918 
	gd©a_size
;

919 
mem‹y_•a˚_t
 
	g•a˚
;

920 
ˇche_›î©‹_ty≥
 
	gˇche_›
;

922 
	g¥Ÿe˘ed
:

923 
boﬁ
 
m_decoded
;

924 
vútuÆ
 
	$¥e_decode
(Ë{
	}
}

927 
	edivîgí˚_suµ‹t_t
 {

928 
	mPOST_DOMINATOR
 = 1,

929 
	mNUM_SIMD_MODEL


932 c⁄° 
	gMAX_ACCESSES_PER_INSN_PER_THREAD
 = 8;

934 ˛as†
	cw¨p_ö°_t
: 
public
 
ö°_t
 {

935 
public
:

937 
	$w¨p_ö°_t
(
kaö
)

939 
m_uid
=0;

940 
m_em±y
=
åue
;

941 
m_c⁄fig
=
NULL
;

943 
m_≥r_sˇœr_thªad
.
	`ªsize
(32);

946 
	$w¨p_ö°_t
()

948 
m_uid
=0;

949 
m_em±y
=
åue
;

950 
m_c⁄fig
=
NULL
;

951 
m_≥r_sˇœr_thªad
.
	`ªsize
(32);

952 
	}
}

953 
	$w¨p_ö°_t
–c⁄° 
c‹e_c⁄fig
 *
c⁄fig
 )

955 
m_uid
=0;

956 
	`as£π
(
c⁄fig
->
w¨p_size
<=
MAX_WARP_SIZE
);

957 
m_c⁄fig
=
c⁄fig
;

958 
m_em±y
=
åue
;

959 
m_ißtomic
=
Ál£
;

960 
m_≥r_sˇœr_thªad_vÆid
=
Ál£
;

961 
m_mem_ac˚s£s_¸óãd
=
Ál£
;

962 
m_ˇche_hô
=
Ál£
;

963 
m_≥r_sˇœr_thªad
.
	`ªsize
(32);

964 
	}
}

965 
	gvútuÆ
 ~
	$w¨p_ö°_t
(){

966 
	}
}

970 
	$w¨p_ö°_c›y_t
(
w¨p_ö°_t
 &
‹i
)

1001 
i
 = 0; i < 4; i++)

1003 
out
[
i
] = 
‹i
.out[i];

1004 
ö
[
i
] = 
‹i
.in[i];

1007 
is_ve˘‹ö
 = 
‹i
.is_vectorin;

1008 
is_ve˘‹out
 = 
‹i
.is_vectorout;

1009 
¥ed
 = 
‹i
.pred;

1010 
¨1
 = 
‹i
.ar1;

1011 
¨2
 = 
‹i
.ar2;

1013 
i
 = 0; i < 
MAX_REG_OPERANDS
; i++)

1015 
¨ch_ªg
.
d°
[
i
] = 
‹i
.arch_reg.dst[i];

1016 
¨ch_ªg
.
§c
[
i
] = 
‹i
.arch_reg.src[i];

1018 
œãncy
 = 
‹i
.latency;

1019 
öôüti⁄_öãrvÆ
 = 
‹i
.initiation_interval;

1021 
d©a_size
 = 
‹i
.data_size;

1022 
•a˚
 = 
‹i
.space;

1023 
ˇche_›
 = 
‹i
.cache_op;

1024 
m_decoded
 = 
‹i
.m_decoded;

1026 
	}
}

1032 
	$w¨p_ö°_c›y
(
w¨p_ö°_t
 &
‹i
)

1039 
m_ißtomic
 = 
‹i
.m_isatomic;

1041 
m_c⁄fig
 = 
‹i
.m_config;

1042 
m_w¨p_a˘ive_mask
 = 
‹i
.m_warp_active_mask;

1043 
m_≥r_sˇœr_thªad_vÆid
 = 
‹i
.m_per_scalar_thread_valid;

1047 
m_≥r_sˇœr_thªad
.
	`assign
(
‹i
.m_≥r_sˇœr_thªad.
	`begö
(),‹i.m_≥r_sˇœr_thªad.
	`íd
());

1049 
m_mem_ac˚s£s_¸óãd
 = 
‹i
.m_mem_accesses_created;

1051 
sm_√xt_uid
 = 
‹i
.sm_next_uid;

1054 
pc
 = 
‹i
.pc;

1055 
isize
 = 
‹i
.isize;

1056 
›
 = 
‹i
.op;

1057 
mem‹y_›
 = 
‹i
.memory_op;

1061 
i
 = 0; i < 4; i++)

1063 
out
[
i
] = 
‹i
.out[i];

1064 
ö
[
i
] = 
‹i
.in[i];

1066 
is_ve˘‹ö
 = 
‹i
.is_vectorin;

1067 
is_ve˘‹out
 = 
‹i
.is_vectorout;

1068 
¥ed
 = 
‹i
.pred;

1069 
¨1
 = 
‹i
.ar1;

1070 
¨2
 = 
‹i
.ar2;

1072 
i
 = 0; i < 
MAX_REG_OPERANDS
; i++)

1074 
¨ch_ªg
.
d°
[
i
] = 
‹i
.arch_reg.dst[i];

1075 
¨ch_ªg
.
§c
[
i
] = 
‹i
.arch_reg.src[i];

1077 
œãncy
 = 
‹i
.latency;

1078 
öôüti⁄_öãrvÆ
 = 
‹i
.initiation_interval;

1080 
d©a_size
 = 
‹i
.data_size;

1081 
•a˚
 = 
‹i
.space;

1082 
ˇche_›
 = 
‹i
.cache_op;

1083 
m_decoded
 = 
‹i
.m_decoded;

1085 
	}
}

1088 
do_©omic
(
boﬁ
 
f‹˚Do
=
Ál£
);

1089 
do_©omic
–c⁄° 
a˘ive_mask_t
& 
ac˚ss_mask
, 
boﬁ
 
f‹˚Do
=
Ál£
 );

1090 
	$˛ór
()

1092 
m_em±y
=
åue
;

1093 
	}
}

1094 
	$issue
–c⁄° 
a˘ive_mask_t
 &
mask
, 
w¨p_id
, 
cy˛e
 )

1096 
m_w¨p_a˘ive_mask
=
mask
;

1097 
m_uid
 = ++
sm_√xt_uid
;

1098 
m_w¨p_id
 = 
w¨p_id
;

1099 
issue_cy˛e
 = 
cy˛e
;

1100 
cy˛es
 = 
öôüti⁄_öãrvÆ
;

1101 
m_ˇche_hô
=
Ál£
;

1102 
m_em±y
=
Ál£
;

1103 
	}
}

1104 
	$KAIN_c›y_issue
–
w¨p_id
, 
cy˛e
 )

1106 
m_uid
 = ++
sm_√xt_uid
;

1107 
m_w¨p_id
 = 
w¨p_id
;

1108 
issue_cy˛e
 = 
cy˛e
;

1109 
cy˛es
 = 
öôüti⁄_öãrvÆ
;

1110 
m_ˇche_hô
=
Ál£
;

1111 
m_em±y
=
Ál£
;

1112 
	}
}

1116 
	$com∂ëed
–
cy˛e
 ) const;

1117 
	$£t_addr
–
n
, 
√w_addr_ty≥
 
addr
 )

1119 if–!
m_≥r_sˇœr_thªad_vÆid
 ) {

1121 
m_≥r_sˇœr_thªad_vÆid
=
åue
;

1123 
m_≥r_sˇœr_thªad
[
n
].
memªqaddr
[0] = 
addr
;

1124 
	}
}

1125 
	$£t_addr
–
n
, 
√w_addr_ty≥
* 
addr
, 
num_addrs
 )

1127 if–!
m_≥r_sˇœr_thªad_vÆid
 ) {

1129 
m_≥r_sˇœr_thªad_vÆid
=
åue
;

1131 
	`as£π
(
num_addrs
 <
MAX_ACCESSES_PER_INSN_PER_THREAD
);

1132 
i
=0; i<
num_addrs
; i++)

1133 
m_≥r_sˇœr_thªad
[
n
].
memªqaddr
[
i
] = 
addr
[i];

1134 
	}
}

1136 
	så™ß˘i⁄_öfo
 {

1137 
	g°d
::
bô£t
<4> 
chunks
;

1138 
mem_ac˚ss_byã_mask_t
 
	gbyãs
;

1139 
a˘ive_mask_t
 
	ga˘ive
;

1141 
boﬁ
 
ã°_byãs
(
°¨t_bô
, 
íd_bô
) {

1142  
	gi
=
°¨t_bô
; i<=
íd_bô
; i++ )

1143 if(
	gbyãs
.
ã°
(
i
))

1144  
	gåue
;

1145  
	gÁl£
;

1149 
gíî©e_mem_ac˚s£s
();

1150 
mem‹y_cﬂÀscög_¨ch_13
–
boﬁ
 
is_wrôe
, 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
 );

1151 
mem‹y_cﬂÀscög_¨ch_13_©omic
–
boﬁ
 
is_wrôe
, 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
 );

1152 
mem‹y_cﬂÀscög_¨ch_13_ªdu˚_™d_£nd
–
boﬁ
 
is_wrôe
, 
mem_ac˚ss_ty≥
 
ac˚ss_ty≥
, c⁄° 
å™ß˘i⁄_öfo
 &
öfo
, 
√w_addr_ty≥
 
addr
, 
£gmít_size
 );

1154 
add_ˇŒback
–
œ√_id
,

1155 (*
fun˘i⁄
)(c⁄° 
˛ass
 
ö°_t
*, cœs†
±x_thªad_öfo
*),

1156 c⁄° 
ö°_t
 *
ö°
,

1157 
˛ass
 
±x_thªad_öfo
 *
thªad
 )

1159 if–!
m_≥r_sˇœr_thªad_vÆid
 ) {

1161 
m_≥r_sˇœr_thªad_vÆid
=
åue
;

1162 
m_ißtomic
=
åue
;

1164 
m_≥r_sˇœr_thªad
[
œ√_id
].
ˇŒback
.
fun˘i⁄
 = function;

1165 
m_≥r_sˇœr_thªad
[
œ√_id
].
ˇŒback
.
ö°ru˘i⁄
 = 
ö°
;

1166 
m_≥r_sˇœr_thªad
[
œ√_id
].
ˇŒback
.
thªad
 =Åhread;

1167 
	}
}

1168 
£t_a˘ive
–c⁄° 
a˘ive_mask_t
 &
a˘ive
 );

1170 
˛ór_a˘ive
–c⁄° 
a˘ive_mask_t
 &
öa˘ive
 );

1171 
£t_nŸ_a˘ive
–
œ√_id
 );

1174 
vútuÆ
 
	$¥öt_ö¢
(
FILE
 *
Â
) const

1176 
	`Ârötf
(
Â
," [ö° @Öc=0x%04x] ", 
pc
 );

1177 
i
=()
m_c⁄fig
->
w¨p_size
-1; i>=0; i--)

1178 
	`Ârötf
(
Â
, "%c", ((
m_w¨p_a˘ive_mask
[
i
])?'1':'0') );

1179 
	}
}

1180 
boﬁ
 
	$a˘ive
–
thªad
 ) c⁄° {  
m_w¨p_a˘ive_mask
.
	`ã°
—hªad); 
	}
}

1181 
	$a˘ive_cou¡
(Ëc⁄° {  
m_w¨p_a˘ive_mask
.
	`cou¡
(); 
	}
}

1182 
boﬁ
 
	$em±y
(Ëc⁄° {  
m_em±y
; 
	}
}

1183 
	$w¨p_id
() const

1185 
	`as£π
–!
m_em±y
 );

1186  
m_w¨p_id
;

1187 
	}
}

1188 
boﬁ
 
	$has_ˇŒback
–
n
 ) const

1190  
m_w¨p_a˘ive_mask
[
n
] && 
m_≥r_sˇœr_thªad_vÆid
 &&

1191 (
m_≥r_sˇœr_thªad
[
n
].
ˇŒback
.
fun˘i⁄
!=
NULL
);

1192 
	}
}

1193 
√w_addr_ty≥
 
	$gë_addr
–
n
 ) const

1195 
	`as£π
–
m_≥r_sˇœr_thªad_vÆid
 );

1196  
m_≥r_sˇœr_thªad
[
n
].
memªqaddr
[0];

1197 
	}
}

1199 
boﬁ
 
	$ißtomic
(Ëc⁄° {  
m_ißtomic
; 
	}
}

1201 
	$w¨p_size
(Ëc⁄° {  
m_c⁄fig
->
w¨p_size
; 
	}
}

1203 
boﬁ
 
	$ac˚ssq_em±y
(Ëc⁄° {  
m_ac˚ssq
.
	`em±y
(); 
	}
}

1204 
	$ac˚ssq_cou¡
(Ëc⁄° {  
m_ac˚ssq
.
	`size
(); 
	}
}

1205 c⁄° 
	gmem_ac˚ss_t
 &
	$ac˚ssq_back
(Ë{  
m_ac˚ssq
.
	`back
(); 
	}
}

1206 
	$ac˚ssq_p›_back
(Ë{ 
m_ac˚ssq
.
	`p›_back
(); 
	}
}

1208 
boﬁ
 
	$di•©ch_dñay
()

1210 if–
cy˛es
 > 0 )

1211 
cy˛es
--;

1212  
cy˛es
 > 0;

1213 
	}
}

1215 
	$¥öt
–
FILE
 *
fout
 ) const;

1216 
	$gë_uid
(Ëc⁄° {  
m_uid
; 
	}
}

1218 
	g¥Ÿe˘ed
:

1220 
m_uid
;

1221 
boﬁ
 
	gm_em±y
;

1222 
boﬁ
 
	gm_ˇche_hô
;

1223 
	gissue_cy˛e
;

1224 
	gcy˛es
;

1225 
boﬁ
 
	gm_ißtomic
;

1226 
	gm_w¨p_id
;

1227 c⁄° 
c‹e_c⁄fig
 *
	gm_c⁄fig
;

1228 
a˘ive_mask_t
 
	gm_w¨p_a˘ive_mask
;

1230 
	s≥r_thªad_öfo
 {

1231 
≥r_thªad_öfo
() {

1232 
	gi
=0; i<
	gMAX_ACCESSES_PER_INSN_PER_THREAD
; i++)

1233 
	gmemªqaddr
[
i
] = 0;

1235 
døm_ˇŒback_t
 
	gˇŒback
;

1236 
√w_addr_ty≥
 
	gmemªqaddr
[
MAX_ACCESSES_PER_INSN_PER_THREAD
];

1238 
boﬁ
 
	gm_≥r_sˇœr_thªad_vÆid
;

1239 
	g°d
::
ve˘‹
<
≥r_thªad_öfo
> 
m_≥r_sˇœr_thªad
;

1240 
boﬁ
 
	gm_mem_ac˚s£s_¸óãd
;

1241 
	g°d
::
li°
<
mem_ac˚ss_t
> 
m_ac˚ssq
;

1243 
	gsm_√xt_uid
;

1246 
move_w¨p
–
w¨p_ö°_t
 *&
d°
, w¨p_ö°_à*&
§c
 );

1248 
size_t
 
gë_kî√l_code_size
–
˛ass
 
fun˘i⁄_öfo
 *
íåy
 );

1254 ˛as†
	cc‹e_t
 {

1255 
	mpublic
:

1256 
vútuÆ
 ~
	$c‹e_t
() {}

1257 
vútuÆ
 
	`w¨p_exô
–
w¨p_id
 ) = 0;

1258 
vútuÆ
 
boﬁ
 
	$w¨p_waôög_©_b¨rõr
–
w¨p_id
 ) const = 0;

1259 
vútuÆ
 
	`checkExecuti⁄SètusAndUpd©e
(
w¨p_ö°_t
 &
ö°
, 
t
, 
tid
)=0;

1260 
˛ass
 
gpgpu_sim
 * 
	$gë_gpu
(Ë{ 
m_gpu
;
	}
}

1261 
execuã_w¨p_ö°_t
(
w¨p_ö°_t
 &
ö°
, 
w¨pSize
, 
w¨pId
 =()-1);

1262 
boﬁ
 
	$±x_thªad_d⁄e
–
hw_thªad_id
 ) const ;

1263 
	`upd©eSIMTSèck
(
w¨pId
, 
w¨pSize
, 
w¨p_ö°_t
 * 
ö°
);

1264 
	`öôûizeSIMTSèck
(
w¨ps
, 
w¨psSize
);

1265 
w¨p_ö°_t
 
	`gëExecuãW¨p
(
w¨pId
);

1267 
¥Ÿe˘ed
:

1268 
˛ass
 
gpgpu_sim
 *
m_gpu
;

1269 
kî√l_öfo_t
 *
m_kî√l
;

1270 
simt_°ack
 **
m_simt_°ack
;

1271 
˛ass
 
±x_thªad_öfo
 ** 
m_thªad
;

1272 
	}
};

1276 ˛as†
	cªgi°î_£t
 {

1277 
	mpublic
:

1278 
	$ªgi°î_£t
(
num
, c⁄° * 
«me
){

1279  
i
 = 0; i < 
num
; i++ ) {

1280 
ªgs
.
	`push_back
(
√w
 
	`w¨p_ö°_t
());

1282 
m_«me
 = 
«me
;

1284 
boﬁ
 
	$has_‰ì
(){

1285  
i
 = 0; i < 
ªgs
.
	`size
(); i++ ) {

1286 if–
ªgs
[
i
]->
	`em±y
() ) {

1287  
åue
;

1290  
Ál£
;

1291 
	}
}

1292 
boﬁ
 
	$has_ªady
(){

1293  
i
 = 0; i < 
ªgs
.
	`size
(); i++ ) {

1294 if–
nŸ
 
ªgs
[
i
]->
	`em±y
() ) {

1295  
åue
;

1298  
Ál£
;

1299 
	}
}

1301 
	$move_ö
–
w¨p_ö°_t
 *&
§c
 ){

1302 
w¨p_ö°_t
** 
‰ì
 = 
	`gë_‰ì
();

1303 
	`move_w¨p
(*
‰ì
, 
§c
);

1304 
	}
}

1308 
	$move_out_to
–
w¨p_ö°_t
 *&
de°
 ){

1309 
w¨p_ö°_t
 **
ªady
=
	`gë_ªady
();

1310 
	`move_w¨p
(
de°
, *
ªady
);

1311 
	}
}

1313 
w¨p_ö°_t
** 
	$gë_ªady
(){

1314 
w¨p_ö°_t
** 
ªady
;

1315 
ªady
 = 
NULL
;

1316  
i
 = 0; i < 
ªgs
.
	`size
(); i++ ) {

1317 if–
nŸ
 
ªgs
[
i
]->
	`em±y
() ) {

1318 if–
ªady
 
	`™d
 (*ªady)->
	`gë_uid
(Ë< 
ªgs
[
i
]->get_uid() ) {

1321 
ªady
 = &
ªgs
[
i
];

1325  
ªady
;

1326 
	}
}

1328 
	$¥öt
(
FILE
* 
Â
) const{

1329 
	`Ârötf
(
Â
, "%†: @%p\n", 
m_«me
, 
this
);

1330  
i
 = 0; i < 
ªgs
.
	`size
(); i++ ) {

1331 
	`Ârötf
(
Â
, " ");

1332 
ªgs
[
i
]->
	`¥öt
(
Â
);

1333 
	`Ârötf
(
Â
, "\n");

1335 
	}
}

1337 
w¨p_ö°_t
 ** 
	$gë_‰ì
(){

1338  
i
 = 0; i < 
ªgs
.
	`size
(); i++ ) {

1339 if–
ªgs
[
i
]->
	`em±y
() ) {

1340  &
ªgs
[
i
];

1343 
	`as£π
(0 && "No freeÑegisters found");

1344  
NULL
;

1345 
	}
}

1347 
	g¥iv©e
:

1348 
°d
::
ve˘‹
<
w¨p_ö°_t
*> 
ªgs
;

1349 c⁄° * 
	gm_«me
;

	@src/cuda-sim/cuda-math.h

67 #i‚de‡
CUDA_MATH


68 
	#CUDA_MATH


	)

71 #unde‡
max


72 #unde‡
mö


73 
«me•a˚
 
	gcuda_m©h
 {

74 
	#__©åibuã__
(
a
)

75 #unde‡
INT_MAX


	)

77 #i‡
CUDART_VERSION
 < 3000

79 
	söt4
 {

80 
	gx
, 
	gy
, 
	gz
, 
	gw
;

82 
	suöt4
 {

83 
	gx
, 
	gy
, 
	gz
, 
	gw
;

85 
	sÊﬂt4
 {

86 
	gx
, 
	gy
, 
	gz
, 
	gw
;

88 
	sÊﬂt2
 {

89 
	gx
, 
	gy
;

94 
öt4
 
	töt4
;

95 
uöt4
 
	tuöt4
;

96 
Êﬂt4
 
	tÊﬂt4
;

97 
Êﬂt2
 
	tÊﬂt2
;

99 
rsqπf
();

101 
	#CUDA_FLOAT_MATH_FUNCTIONS


	)

102 
	~<devi˚_ty≥s.h
>

103 
	#__CUDA_INTERNAL_COMPILATION__


	)

104 
	~<m©h_fun˘i⁄s.h
>

105 #unde‡
__CUDA_INTERNAL_COMPILATION__


106 #unde‡
__©åibuã__


109 
Êﬂt2öt
(
a
, 
cudaRoundMode
 
mode
)

111  
__öã∫Æ_Êﬂt2uöt
(
a
, 
mode
);

115 
Êﬂt2uöt
(
a
, 
cudaRoundMode
 
mode
)

117  
__öã∫Æ_Êﬂt2uöt
(
a
, 
mode
);

120 
__Œ2Êﬂt_rz
(
a
) {

121 
	g‹ig_∫d_mode
 = 
„gëround
();

122 
„£åound
(
FE_TOWARDZERO
);

123 
	gb
 = 
a
;

124 
„£åound
(
‹ig_∫d_mode
);

125  
	gb
;

127 
__Œ2Êﬂt_ru
(
a
) {

128 
	g‹ig_∫d_mode
 = 
„gëround
();

129 
„£åound
(
FE_UPWARD
);

130 
	gb
 = 
a
;

131 
„£åound
(
‹ig_∫d_mode
);

132  
	gb
;

134 
__Œ2Êﬂt_rd
(
a
) {

135 
	g‹ig_∫d_mode
 = 
„gëround
();

136 
„£åound
(
FE_DOWNWARD
);

137 
	gb
 = 
a
;

138 
„£åound
(
‹ig_∫d_mode
);

139  
	gb
;

144 
	#CUDA_FLOAT_MATH_FUNCTIONS


	)

145 
	#__CUDACC__


	)

148 
	~<devi˚_ty≥s.h
>

149 
	~<„nv.h
>

152 
__öt2Êﬂt_∫
(
a
) {

153 
	g‹ig_∫d_mode
 = 
„gëround
();

154 
„£åound
(
FE_TONEAREST
);

155 
	gb
 = 
a
;

156 
„£åound
(
‹ig_∫d_mode
);

157  
	gb
;

159 
__öt2Êﬂt_rz
(
a
) {

160 
	g‹ig_∫d_mode
 = 
„gëround
();

161 
„£åound
(
FE_TOWARDZERO
);

162 
	gb
 = 
a
;

163 
„£åound
(
‹ig_∫d_mode
);

164  
	gb
;

166 
__öt2Êﬂt_ru
(
a
) {

167 
	g‹ig_∫d_mode
 = 
„gëround
();

168 
„£åound
(
FE_UPWARD
);

169 
	gb
 = 
a
;

170 
„£åound
(
‹ig_∫d_mode
);

171  
	gb
;

173 
__öt2Êﬂt_rd
(
a
) {

174 
	g‹ig_∫d_mode
 = 
„gëround
();

175 
„£åound
(
FE_DOWNWARD
);

176 
	gb
 = 
a
;

177 
„£åound
(
‹ig_∫d_mode
);

178  
	gb
;

182 
__uöt2Êﬂt_∫
(
a
) {

183 
	g‹ig_∫d_mode
 = 
„gëround
();

184 
„£åound
(
FE_TONEAREST
);

185 
	gb
 = 
a
;

186 
„£åound
(
‹ig_∫d_mode
);

187  
	gb
;

189 
__uöt2Êﬂt_rz
(
a
) {

190 
	g‹ig_∫d_mode
 = 
„gëround
();

191 
„£åound
(
FE_TOWARDZERO
);

192 
	gb
 = 
a
;

193 
„£åound
(
‹ig_∫d_mode
);

194  
	gb
;

196 
__uöt2Êﬂt_ru
(
a
) {

197 
	g‹ig_∫d_mode
 = 
„gëround
();

198 
„£åound
(
FE_UPWARD
);

199 
	gb
 = 
a
;

200 
„£åound
(
‹ig_∫d_mode
);

201  
	gb
;

203 
__uöt2Êﬂt_rd
(
a
) {

204 
	g‹ig_∫d_mode
 = 
„gëround
();

205 
„£åound
(
FE_DOWNWARD
);

206 
	gb
 = 
a
;

207 
„£åound
(
‹ig_∫d_mode
);

208  
	gb
;

212 
__Œ2Êﬂt_∫
(
a
) {

213 
	g‹ig_∫d_mode
 = 
„gëround
();

214 
„£åound
(
FE_TONEAREST
);

215 
	gb
 = 
a
;

216 
„£åound
(
‹ig_∫d_mode
);

217  
	gb
;

219 
__Œ2Êﬂt_rz
(
a
) {

220 
	g‹ig_∫d_mode
 = 
„gëround
();

221 
„£åound
(
FE_TOWARDZERO
);

222 
	gb
 = 
a
;

223 
„£åound
(
‹ig_∫d_mode
);

224  
	gb
;

226 
__Œ2Êﬂt_ru
(
a
) {

227 
	g‹ig_∫d_mode
 = 
„gëround
();

228 
„£åound
(
FE_UPWARD
);

229 
	gb
 = 
a
;

230 
„£åound
(
‹ig_∫d_mode
);

231  
	gb
;

233 
__Œ2Êﬂt_rd
(
a
) {

234 
	g‹ig_∫d_mode
 = 
„gëround
();

235 
„£åound
(
FE_DOWNWARD
);

236 
	gb
 = 
a
;

237 
„£åound
(
‹ig_∫d_mode
);

238  
	gb
;

242 
__uŒ2Êﬂt_∫
(
a
) {

243 
	g‹ig_∫d_mode
 = 
„gëround
();

244 
„£åound
(
FE_TONEAREST
);

245 
	gb
 = 
a
;

246 
„£åound
(
‹ig_∫d_mode
);

247  
	gb
;

249 
__uŒ2Êﬂt_rz
(
a
) {

250 
	g‹ig_∫d_mode
 = 
„gëround
();

251 
„£åound
(
FE_TOWARDZERO
);

252 
	gb
 = 
a
;

253 
„£åound
(
‹ig_∫d_mode
);

254  
	gb
;

256 
__uŒ2Êﬂt_ru
(
a
) {

257 
	g‹ig_∫d_mode
 = 
„gëround
();

258 
„£åound
(
FE_UPWARD
);

259 
	gb
 = 
a
;

260 
„£åound
(
‹ig_∫d_mode
);

261  
	gb
;

263 
__uŒ2Êﬂt_rd
(
a
) {

264 
	g‹ig_∫d_mode
 = 
„gëround
();

265 
„£åound
(
FE_DOWNWARD
);

266 
	gb
 = 
a
;

267 
„£åound
(
‹ig_∫d_mode
);

268  
	gb
;

272 
Êﬂt2öt
(
a
, 
cudaRoundMode
 
mode
)

274 
	gtmp
;

275 
	gmode
) {

276 
	gcuda_m©h
::
cudaRoundZîo
: 
tmp
 = 
åuncf
(
a
); ;

277 
	gcuda_m©h
::
cudaRoundNóª°
: 
tmp
 = 
√¨byötf
(
a
); ;

278 
	gcuda_m©h
::
cudaRoundMöInf
: 
tmp
 = 
Êo‹f
(
a
); ;

279 
	gcuda_m©h
::
cudaRoundPosInf
: 
tmp
 = 
˚ûf
(
a
); ;

280 : 
ab‹t
();

282  
	gtmp
;

285 
__öã∫Æ_Êﬂt2öt
(
a
, 
cudaRoundMode
 
mode
)

287  
Êﬂt2öt
(
a
, 
mode
);

291 
Êﬂt2uöt
(
a
, 
cudaRoundMode
 
mode
)

293 
	gtmp
;

294 
	gmode
) {

295 
	gcuda_m©h
::
cudaRoundZîo
: 
tmp
 = 
åuncf
(
a
); ;

296 
	gcuda_m©h
::
cudaRoundNóª°
: 
tmp
 = 
√¨byötf
(
a
); ;

297 
	gcuda_m©h
::
cudaRoundMöInf
: 
tmp
 = 
Êo‹f
(
a
); ;

298 
	gcuda_m©h
::
cudaRoundPosInf
: 
tmp
 = 
˚ûf
(
a
); ;

299 : 
ab‹t
();

301  
	gtmp
;

304 
__öã∫Æ_Êﬂt2uöt
(
a
, 
cudaRoundMode
 
mode
)

306  
Êﬂt2uöt
(
a
, 
mode
);

310 
fdividef
(
a
, 
b
)

312  (
	ga
 / 
	gb
);

315 
__öã∫Æ_accuøã_fdividef
(
a
, 
b
)

317  
fdividef
(
a
, 
b
);

321 
__ßtuøãf
(
a
)

323 
	gb
;

324 i‡(
i¢™
(
a
)Ë
	gb
 = 0.0f;

325 i‡(
	ga
 >1.0fË
b
 = 1.0f;

326 i‡(
	ga
 <0.0fË
b
 = 0.0f;

327 
	gb
 = 
a
;

328  
	gb
;

332 
__powf
(
a
, 
b
)

334  
powf
(
a
, 
b
);

337 #unde‡
__CUDACC__


338 
	#__CUDA_INTERNAL_COMPILATION__


	)

339 
	~<m©h_fun˘i⁄s.h
>

340 #unde‡
__CUDA_INTERNAL_COMPILATION__


341 #unde‡
__©åibuã__


	@src/cuda-sim/cuda-sim.cc

29 
	~"cuda-sim.h
"

30 
	~"ö°ru˘i⁄s.h
"

31 
	~"±x_ú.h
"

32 
	~"±x_sim.h
"

33 
	~<°dio.h
>

35 
	~"›codes.h
"

36 
	~"../öãrsim/°©wø≥r.h
"

37 
	~<£t
>

38 
	~<m≠
>

39 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

40 
	~"mem‹y.h
"

41 
	~"±x-°©s.h
"

42 
	~"±x_lﬂdî.h
"

43 
	~"±x_∑r£r.h
"

44 
	~"../gpgpu-sim/gpu-sim.h
"

45 
	~"±x_sim.h
"

46 
	~"../gpgpusim_íåypoöt.h
"

47 
	~"decuda_¥ed_èbÀ/decuda_¥ed_èbÀ.h
"

48 
	~"../°ªam_m™agî.h
"

50 
	ggpgpu_±x_ö°ru˘i⁄_˛assifiˇti⁄
;

51 ** 
	gg_ö°_˛assifiˇti⁄_°©
 = 
NULL
;

52 ** 
	gg_ö°_›_˛assifiˇti⁄_°©

NULL
;

53 
	gg_±x_kî√l_cou¡
 = -1;

54 
	gg_debug_executi⁄
 = 0;

55 
	gg_debug_thªad_uid
 = 0;

56 
addr_t
 
	gg_debug_pc
 = 0xBEEF1518;

59 
	gg_±x_sim_num_ö¢
 = 0;

60 
	ggpgpu_∑øm_num_shadîs
 = 0;

62 *
	g›code_œãncy_öt
, *
	g›code_œãncy_Â
, *
	g›code_œãncy_dp
;

63 *
	g›code_öôüti⁄_öt
, *
	g›code_öôüti⁄_Â
, *
	g›code_öôüti⁄_dp
;

65 
	$±x_›cocde_œãncy_›ti⁄s
 (
›ti⁄_∑r£r_t
 
›p
) {

66 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_›code_œãncy_öt", 
OPT_CSTR
, &
›code_œãncy_öt
,

70 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_›code_œãncy_Â", 
OPT_CSTR
, &
›code_œãncy_Â
,

74 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_›code_œãncy_dp", 
OPT_CSTR
, &
›code_œãncy_dp
,

78 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_›code_öôüti⁄_öt", 
OPT_CSTR
, &
›code_öôüti⁄_öt
,

82 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_›code_öôüti⁄_Â", 
OPT_CSTR
, &
›code_öôüti⁄_Â
,

86 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_›code_öôüti⁄_dp", 
OPT_CSTR
, &
›code_öôüti⁄_dp
,

90 
	}
}

92 
addªss_ty≥
 
gë_c⁄vîge_poöt
◊ddªss_ty≥ 
pc
);

94 
	ggpgpu_t
::
	$gpgpu_±x_sim_bödNameToTextuª
(c⁄° * 
«me
, c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
)

96 
°d
::
°rög
 
	`ãx«me
(
«me
);

97 
m_NameToTextuªRef
[
ãx«me
] = 
ãxªf
;

98 
	}
}

100 c⁄° * 
	ggpgpu_t
::
	$gpgpu_±x_sim_födName‰omTextuª
(c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
)

102 
°d
::
m≠
<°d::
°rög
, c⁄° 
ãxtuªRe„ªn˚
*>::
ôî©‹
 
ôr
 = 
m_NameToTextuªRef
.
	`begö
();

103 
ôr
 !
m_NameToTextuªRef
.
	`íd
()) {

104 i‡((*
ôr
).
£c⁄d
 =
ãxªf
) {

105 c⁄° *
p
 = ((*
ôr
).
fú°
).
	`c_°r
();

106  
p
;

108 
ôr
++;

110  
NULL
;

111 
	}
}

113 
	$ötLOGB2
–
v
 ) {

114 
shi·
;

115 
r
;

117 
r
 = 0;

119 
shi·
 = (–
v
 & 0xFFFF0000Ë!0 ) << 4; v >>shi·; 
r
 |= shift;

120 
shi·
 = (–
v
 & 0xFF00 ) !0 ) << 3; v >>shi·; 
r
 |= shift;

121 
shi·
 = (–
v
 & 0xF0 ) !0 ) << 2; v >>shi·; 
r
 |= shift;

122 
shi·
 = (–
v
 & 0xC ) !0 ) << 1; v >>shi·; 
r
 |= shift;

123 
shi·
 = (–
v
 & 0x2 ) !0 ) << 0; v >>shi·; 
r
 |= shift;

125  
r
;

126 
	}
}

128 
	ggpgpu_t
::
	$gpgpu_±x_sim_bödTextuªToAºay
(c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
, c⁄° 
cudaAºay
* 
¨øy
)

130 
m_TextuªRefToCudaAºay
[
ãxªf
] = 
¨øy
;

131 
ãxñ_size_bôs
 = 
¨øy
->
desc
.
w
 +áºay->desc.
x
 +áºay->desc.
y
 +áºay->desc.
z
;

132 
ãxñ_size
 = 
ãxñ_size_bôs
/8;

133 
Tx
, 
Ty
;

134 
r
;

136 
	`¥ötf
("GPGPU-Sim PTX:Åexñ sizê%d\n", 
ãxñ_size
);

137 
	`¥ötf
("GPGPU-Sim PTX:Åextuª cachêlöesizê%d\n", 
m_fun˘i⁄_modñ_c⁄fig
.
	`gë_ãxˇche_löesize
());

139 
m_fun˘i⁄_modñ_c⁄fig
.
	`gë_ãxˇche_löesize
()) {

140 16: 
Tx
 = 4; ;

141 32: 
Tx
 = 8; ;

142 64: 
Tx
 = 8; ;

143 128: 
Tx
 = 16; ;

144 256: 
Tx
 = 16; ;

146 
	`¥ötf
("GPGPU-Sim PTX: Löêsizêo‡%d byã†cuºíéyÇŸ suµ‹ãd.\n", 
m_fun˘i⁄_modñ_c⁄fig
.
	`gë_ãxˇche_löesize
());

147 
	`as£π
(0);

150 
r
 = 
ãxñ_size
 >> 2;

152 
r
 != 0) {

153 
Tx
 = Tx >> 1;

154 
r
 =Ñ >> 2;

157 
Ty
 = 
m_fun˘i⁄_modñ_c⁄fig
.
	`gë_ãxˇche_löesize
()/(
Tx
*
ãxñ_size
);

159 
	`¥ötf
("GPGPU-Sim PTX: Tx = %d; Ty = %d, Tx_numbô†%d, Ty_numbô†%d\n", 
Tx
, 
Ty
, 
	`ötLOGB2
(Tx), intLOGB2(Ty));

160 
	`¥ötf
("GPGPU-Sim PTX: Texñ sizê%d byãs;Åexñ_size_numbô†%d\n", 
ãxñ_size
, 
	`ötLOGB2
(texel_size));

161 
	`¥ötf
("GPGPU-Sim PTX: BödögÅextuªÅÿ¨øy sèπögáàdevPå32 = 0x%x\n", 
¨øy
->
devPå32
);

162 
	`¥ötf
("GPGPU-Sim PTX: Texñ sizê%d byãs\n", 
ãxñ_size
);

163 
ãxtuªInfo
* 
ãxInfo
 = (ãxtuªInfo*Ë
	`mÆloc
((textureInfo));

164 
ãxInfo
->
Tx
 = Tx;

165 
ãxInfo
->
Ty
 = Ty;

166 
ãxInfo
->
Tx_numbôs
 = 
	`ötLOGB2
(
Tx
);

167 
ãxInfo
->
Ty_numbôs
 = 
	`ötLOGB2
(
Ty
);

168 
ãxInfo
->
ãxñ_size
 =Åexel_size;

169 
ãxInfo
->
ãxñ_size_numbôs
 = 
	`ötLOGB2
(
ãxñ_size
);

170 
m_TextuªRefToTexuªInfo
[
ãxªf
] = 
ãxInfo
;

171 
	}
}

173 
	gg_as£mbÀ_code_√xt_pc
=0;

174 
	g°d
::
m≠
<,
	gfun˘i⁄_öfo
*> 
	gg_pc_to_föfo
;

175 
	g°d
::
ve˘‹
<
±x_ö°ru˘i⁄
*> 
fun˘i⁄_öfo
::
s_g_pc_to_ö¢
;

177 
	#MAX_INST_SIZE
 8

	)

179 
	gfun˘i⁄_öfo
::
	$±x_as£mbÀ
()

181 if–
m_as£mbÀd
 ) {

186 
num_ö°
 = 
m_ö°ru˘i⁄s
.
	`size
();

187 
m_ö°r_mem_size
 = 
MAX_INST_SIZE
*(
num_ö°
+1);

188 
m_ö°r_mem
 = 
√w
 
±x_ö°ru˘i⁄
*[ 
m_ö°r_mem_size
 ];

190 
	`¥ötf
("GPGPU-Sim PTX: in°ru˘i⁄ás£mbly f‹ fun˘i⁄ \'%s\'... ", 
m_«me
.
	`c_°r
() );

191 
	`fÊush
(
°dout
);

192 
°d
::
li°
<
±x_ö°ru˘i⁄
*>::
ôî©‹
 
i
;

194 
addr_t
 
PC
 = 
g_as£mbÀ_code_√xt_pc
;

196  
i
=0; i < (
PC
%
MAX_INST_SIZE
); i++ )

197 
s_g_pc_to_ö¢
.
	`push_back
((
±x_ö°ru˘i⁄
*)
NULL
);

198 
PC
 +PC%
MAX_INST_SIZE
;

199 
m_°¨t_PC
 = 
PC
;

201 
addr_t
 
n
=0;

202 
s_g_pc_to_ö¢
.
	`ª£rve
(s_g_pc_to_ö¢.
	`size
(Ë+ 
MAX_INST_SIZE
*
m_ö°ru˘i⁄s
.size());

203  
i
=
m_ö°ru˘i⁄s
.
	`begö
(); i !m_ö°ru˘i⁄s.
	`íd
(); i++ ) {

204 
±x_ö°ru˘i⁄
 *
pI
 = *
i
;

205 i‡–
pI
->
	`is_œbñ
() ) {

206 c⁄° 
symbﬁ
 *
l
 = 
pI
->
	`gë_œbñ
();

207 
œbñs
[
l
->
	`«me
()] = 
n
;

209 
g_pc_to_föfo
[
PC
] = 
this
;

210 
m_ö°r_mem
[
n
] = 
pI
;

211 
s_g_pc_to_ö¢
.
	`push_back
(
pI
);

212 
	`as£π
(
pI
 =
s_g_pc_to_ö¢
[
PC
]);

213 
pI
->
	`£t_m_ö°r_mem_ödex
(
n
);

214 
pI
->
	`£t_PC
(
PC
);

215 
	`as£π
–
pI
->
	`ö°_size
(Ë<
MAX_INST_SIZE
 );

216  
i
=1; i < 
pI
->
	`ö°_size
(); i++ ) {

217 
s_g_pc_to_ö¢
.
	`push_back
((
±x_ö°ru˘i⁄
*)
NULL
);

218 
m_ö°r_mem
[
n
+
i
]=
NULL
;

220 
n
 +
pI
->
	`ö°_size
();

221 
PC
 +
pI
->
	`ö°_size
();

224 
g_as£mbÀ_code_√xt_pc
=
PC
;

225  
ii
=0; iò< 
n
; iò+
m_ö°r_mem
[ii]->
	`ö°_size
() ) {

226 
±x_ö°ru˘i⁄
 *
pI
 = 
m_ö°r_mem
[
ii
];

227 i‡–
pI
->
	`gë_›code
(Ë=
BRA_OP
 ||ÖI->gë_›code(Ë=
BREAKADDR_OP
 ||ÖI->gë_›code(Ë=
CALLP_OP
) {

228 
›î™d_öfo
 &
èrgë
 = 
pI
->
	`d°
();

229 i‡–
œbñs
.
	`föd
(
èrgë
.
	`«me
()Ë=œbñs.
	`íd
() ) {

230 
	`¥ötf
("GPGPU-Sim PTX: LoaderÉrror (%s:%u): BranchÜabel \"%s\" doesÇotáppear inássembly code.",

231 
pI
->
	`sour˚_fûe
(),pI->
	`sour˚_löe
(), 
èrgë
.
	`«me
().
	`c_°r
() );

232 
	`ab‹t
();

234 
ödex
 = 
œbñs
[ 
èrgë
.
	`«me
() ];

235 
PC
 = 
m_ö°r_mem
[
ödex
]->
	`gë_PC
();

236 
m_symèb
->
	`£t_œbñ_addªss
–
èrgë
.
	`gë_symbﬁ
(), 
PC
 );

237 
èrgë
.
	`£t_ty≥
(
œbñ_t
);

241 
	`¥ötf
(" done.\n");

242 
	`fÊush
(
°dout
);

243 
	`¥ötf
("GPGPU-Sim PTX: födögÑec⁄vîgí˚Öoöt†f‹ \'%s\'...\n", 
m_«me
.
	`c_°r
() );

245 
	`¸óã_basic_blocks
();

246 
	`c⁄√˘_basic_blocks
();

247 
boﬁ
 
modifõd
 = 
Ál£
;

249 
	`föd_domö©‹s
();

250 
	`föd_idomö©‹s
();

251 
modifõd
 = 
	`c⁄√˘_bªak_èrgës
();

252 } 
modifõd
 =
åue
);

254 i‡–
g_debug_executi⁄
>=50 ) {

255 
	`¥öt_basic_blocks
();

256 
	`¥öt_basic_block_löks
();

257 
	`¥öt_basic_block_dŸ
();

259 i‡–
g_debug_executi⁄
>=2 ) {

260 
	`¥öt_domö©‹s
();

262 
	`föd_po°domö©‹s
();

263 
	`föd_ùo°domö©‹s
();

264 i‡–
g_debug_executi⁄
>=50 ) {

265 
	`¥öt_po°domö©‹s
();

266 
	`¥öt_ùo°domö©‹s
();

269 
	`¥ötf
("GPGPU-Sim PTX:Öª-decodög in°ru˘i⁄†f‹ \'%s\'... ", 
m_«me
.
	`c_°r
() );

270  
ii
=0; iò< 
n
; iò+
m_ö°r_mem
[ii]->
	`ö°_size
() ) {

271 
±x_ö°ru˘i⁄
 *
pI
 = 
m_ö°r_mem
[
ii
];

272 
pI
->
	`¥e_decode
();

274 
	`¥ötf
(" done.\n");

275 
	`fÊush
(
°dout
);

277 
m_as£mbÀd
 = 
åue
;

278 
	}
}

280 
addr_t
 
	$sh¨ed_to_gíîic
–
smid
, 
addr_t
 
addr
 )

282 
	`as£π
–
addr
 < 
SHARED_MEM_SIZE_MAX
 );

283  
SHARED_GENERIC_START
 + 
smid
*
SHARED_MEM_SIZE_MAX
 + 
addr
;

284 
	}
}

286 
addr_t
 
	$globÆ_to_gíîic
–
addr_t
 
addr
 )

288  
addr
;

289 
	}
}

291 
boﬁ
 
	$is•a˚_sh¨ed
–
smid
, 
addr_t
 
addr
 )

293 
addr_t
 
°¨t
 = 
SHARED_GENERIC_START
 + 
smid
*
SHARED_MEM_SIZE_MAX
;

294 
addr_t
 
íd
 = 
SHARED_GENERIC_START
 + (
smid
+1)*
SHARED_MEM_SIZE_MAX
;

295 if–(
addr
 >
íd
Ë|| (add∏< 
°¨t
) )

296  
Ál£
;

297  
åue
;

298 
	}
}

300 
boﬁ
 
	$is•a˚_globÆ
–
addr_t
 
addr
 )

302  (
addr
 >
GLOBAL_HEAP_START
Ë|| (add∏< 
STATIC_ALLOC_LIMIT
);

303 
	}
}

305 
mem‹y_•a˚_t
 
	$which•a˚
–
addr_t
 
addr
 )

307 if–(
addr
 >
GLOBAL_HEAP_START
Ë|| (add∏< 
STATIC_ALLOC_LIMIT
) ) {

308  
globÆ_•a˚
;

309 } if–
addr
 >
SHARED_GENERIC_START
 ) {

310  
sh¨ed_•a˚
;

312  
loˇl_•a˚
;

314 
	}
}

316 
addr_t
 
	$gíîic_to_sh¨ed
–
smid
, 
addr_t
 
addr
 )

318 
	`as£π
(
	`is•a˚_sh¨ed
(
smid
,
addr
));

319  
addr
 - (
SHARED_GENERIC_START
 + 
smid
*
SHARED_MEM_SIZE_MAX
);

320 
	}
}

322 
addr_t
 
	$loˇl_to_gíîic
–
smid
, 
hwtid
, 
addr_t
 
addr
 )

324 
	`as£π
(
addr
 < 
LOCAL_MEM_SIZE_MAX
);

325  
LOCAL_GENERIC_START
 + (
TOTAL_LOCAL_MEM_PER_SM
 * 
smid
Ë+ (
LOCAL_MEM_SIZE_MAX
 * 
hwtid
Ë+ 
addr
;

326 
	}
}

328 
boﬁ
 
	$is•a˚_loˇl
–
smid
, 
hwtid
, 
addr_t
 
addr
 )

330 
addr_t
 
°¨t
 = 
LOCAL_GENERIC_START
 + (
TOTAL_LOCAL_MEM_PER_SM
 * 
smid
Ë+ (
LOCAL_MEM_SIZE_MAX
 * 
hwtid
);

331 
addr_t
 
íd
 = 
LOCAL_GENERIC_START
 + (
TOTAL_LOCAL_MEM_PER_SM
 * 
smid
Ë+ (
LOCAL_MEM_SIZE_MAX
 * (
hwtid
+1));

332 if–(
addr
 >
íd
Ë|| (add∏< 
°¨t
) )

333  
Ál£
;

334  
åue
;

335 
	}
}

337 
addr_t
 
	$gíîic_to_loˇl
–
smid
, 
hwtid
, 
addr_t
 
addr
 )

339 
	`as£π
(
	`is•a˚_loˇl
(
smid
,
hwtid
,
addr
));

340  
addr
 - (
LOCAL_GENERIC_START
 + (
TOTAL_LOCAL_MEM_PER_SM
 * 
smid
Ë+ (
LOCAL_MEM_SIZE_MAX
 * 
hwtid
));

341 
	}
}

343 
addr_t
 
	$gíîic_to_globÆ
–
addr_t
 
addr
 )

345  
addr
;

346 
	}
}

349 * 
	ggpgpu_t
::
	$gpu_mÆloc
–
size_t
 
size
 )

351 
ªsu…
 = 
m_dev_mÆloc
;

352 if(
g_debug_executi⁄
 >= 3) {

353 
	`¥ötf
("GPGPU-Sim PTX:áŒoˇtög %zu byã†⁄ GPU sèπögáàaddªs†0x%Lx\n", 
size
, 
m_dev_mÆloc
 );

354 
	`fÊush
(
°dout
);

356 
m_dev_mÆloc
 +
size
;

357 i‡(
size
%256Ë
m_dev_mÆloc
 += (256 - size%256);

358 (*Ë
ªsu…
;

359 
	}
}

361 * 
	ggpgpu_t
::
	$gpu_mÆloˇºay
–
size_t
 
size
 )

363 
ªsu…
 = 
m_dev_mÆloc
;

364 if(
g_debug_executi⁄
 >= 3) {

365 
	`¥ötf
("GPGPU-Sim PTX:áŒoˇtög %zu byã†⁄ GPU sèπögáàaddªs†0x%Lx\n", 
size
, 
m_dev_mÆloc
 );

366 
	`fÊush
(
°dout
);

368 
m_dev_mÆloc
 +
size
;

369 i‡(
size
%256Ë
m_dev_mÆloc
 += (256 - size%256);

370 (*Ë
ªsu…
;

371 
	}
}

374 
	ggpgpu_t
::
	$mem˝y_to_gpu
–
size_t
 
d°_°¨t_addr
, c⁄° *
§c
, size_à
cou¡
 )

376 if(
g_debug_executi⁄
 >= 3) {

377 
	`¥ötf
("GPGPU-Sim PTX: c›yög %zu byã†‰om CPU[0x%Lx]ÅÿGPU[0x%Lx] ... ", 
cou¡
, (Ë
§c
, (Ë
d°_°¨t_addr
 );

378 
	`fÊush
(
°dout
);

380 *
§c_d©a
 = (*)
§c
;

381 
n
=0;Ç < 
cou¡
;Ç ++ )

382 
m_globÆ_mem
->
	`wrôe
(
d°_°¨t_addr
+
n
,1, 
§c_d©a
+n,
NULL
,NULL);

383 if(
g_debug_executi⁄
 >= 3) {

384 
	`¥ötf
( " done.\n");

385 
	`fÊush
(
°dout
);

387 
	}
}

389 
	ggpgpu_t
::
	$mem˝y_‰om_gpu
–*
d°
, 
size_t
 
§c_°¨t_addr
, size_à
cou¡
 )

391 if(
g_debug_executi⁄
 >= 3) {

392 
	`¥ötf
("GPGPU-Sim PTX: c›yög %zu byã†‰om GPU[0x%Lx]ÅÿCPU[0x%Lx] ...", 
cou¡
, (Ë
§c_°¨t_addr
, (Ë
d°
 );

393 
	`fÊush
(
°dout
);

395 *
d°_d©a
 = (*)
d°
;

396 
n
=0;Ç < 
cou¡
;Ç ++ )

397 
m_globÆ_mem
->
	`ªad
(
§c_°¨t_addr
+
n
,1,
d°_d©a
+n);

398 if(
g_debug_executi⁄
 >= 3) {

399 
	`¥ötf
( " done.\n");

400 
	`fÊush
(
°dout
);

402 
	}
}

404 
	ggpgpu_t
::
	$mem˝y_gpu_to_gpu
–
size_t
 
d°
, size_à
§c
, size_à
cou¡
 )

406 if(
g_debug_executi⁄
 >= 3) {

407 
	`¥ötf
("GPGPU-Sim PTX: c›yög %zu byã†‰om GPU[0x%Lx]ÅÿGPU[0x%Lx] ...", 
cou¡
,

408 (Ë
§c
, (Ë
d°
 );

409 
	`fÊush
(
°dout
);

411 
n
=0;Ç < 
cou¡
;Ç ++ ) {

412 
tmp
;

413 
m_globÆ_mem
->
	`ªad
(
§c
+
n
,1,&
tmp
);

414 
m_globÆ_mem
->
	`wrôe
(
d°
+
n
,1, &
tmp
,
NULL
,NULL);

416 if(
g_debug_executi⁄
 >= 3) {

417 
	`¥ötf
( " done.\n");

418 
	`fÊush
(
°dout
);

420 
	}
}

422 
	ggpgpu_t
::
	$gpu_mem£t
–
size_t
 
d°_°¨t_addr
, 
c
, size_à
cou¡
 )

424 if(
g_debug_executi⁄
 >= 3) {

425 
	`¥ötf
("GPGPU-Sim PTX: setting %zu bytes of memoryÅo 0x%x startingát 0x%Lx... ",

426 
cou¡
, (Ë
c
, (Ë
d°_°¨t_addr
 );

427 
	`fÊush
(
°dout
);

429 
c_vÆue
 = ()
c
;

430 
n
=0;Ç < 
cou¡
;Ç ++ )

431 
m_globÆ_mem
->
	`wrôe
(
d°_°¨t_addr
+
n
,1,&
c_vÆue
,
NULL
,NULL);

432 if(
g_debug_executi⁄
 >= 3) {

433 
	`¥ötf
( " done.\n");

434 
	`fÊush
(
°dout
);

436 
	}
}

438 
	$±x_¥öt_ö¢
–
addªss_ty≥
 
pc
, 
FILE
 *
Â
 )

440 
size
=1;

441 
°d
::
m≠
<,
fun˘i⁄_öfo
*>::
ôî©‹
 
f
 = 
g_pc_to_föfo
.
	`föd
(
pc
);

442 if–
f
 =
g_pc_to_föfo
.
	`íd
() ) {

443 
	`Ârötf
(
Â
,"<nÿö°ru˘i⁄áàaddªs†0x%x>", 
pc
 );

446 
fun˘i⁄_öfo
 *
föfo
 = 
f
->
£c⁄d
;

447 
	`as£π
–
föfo
 );

448 
size
 = 
föfo
->
	`¥öt_ö¢
(
pc
,
Â
);

449 
	}
}

451 
	g±x_ö°ru˘i⁄
::
	$£t_›code_™d_œãncy
()

453 
öt_œãncy
[5];

454 
Â_œãncy
[5];

455 
dp_œãncy
[5];

456 
öt_öô
[5];

457 
Â_öô
[5];

458 
dp_öô
[5];

466 
	`ssˇnf
(
›code_œãncy_öt
, "%u,%u,%u,%u,%u",

467 &
öt_œãncy
[0],&int_latency[1],&int_latency[2],

468 &
öt_œãncy
[3],&int_latency[4]);

469 
	`ssˇnf
(
›code_œãncy_Â
, "%u,%u,%u,%u,%u",

470 &
Â_œãncy
[0],&fp_latency[1],&fp_latency[2],

471 &
Â_œãncy
[3],&fp_latency[4]);

472 
	`ssˇnf
(
›code_œãncy_dp
, "%u,%u,%u,%u,%u",

473 &
dp_œãncy
[0],&dp_latency[1],&dp_latency[2],

474 &
dp_œãncy
[3],&dp_latency[4]);

475 
	`ssˇnf
(
›code_öôüti⁄_öt
, "%u,%u,%u,%u,%u",

476 &
öt_öô
[0],&int_init[1],&int_init[2],

477 &
öt_öô
[3],&int_init[4]);

478 
	`ssˇnf
(
›code_öôüti⁄_Â
, "%u,%u,%u,%u,%u",

479 &
Â_öô
[0],&fp_init[1],&fp_init[2],

480 &
Â_öô
[3],&fp_init[4]);

481 
	`ssˇnf
(
›code_öôüti⁄_dp
, "%u,%u,%u,%u,%u",

482 &
dp_öô
[0],&dp_init[1],&dp_init[2],

483 &
dp_öô
[3],&dp_init[4]);

485 
›
 = 
ALU_OP
;

486 
öôüti⁄_öãrvÆ
 = 
œãncy
 = 1;

487  
m_›code
 ) {

488 
MOV_OP
:

489 
	`as£π
–!(
	`has_mem‹y_ªad
(Ë&& 
	`has_mem‹y_wrôe
()) );

490 i‡–
	`has_mem‹y_ªad
(ËË
›
 = 
LOAD_OP
;

491 i‡–
	`has_mem‹y_wrôe
(ËË
›
 = 
STORE_OP
;

493 
LD_OP
: 
›
 = 
LOAD_OP
; ;

494 
ST_OP
: 
›
 = 
STORE_OP
; ;

495 
BRA_OP
: 
›
 = 
BRANCH_OP
; ;

496 
BREAKADDR_OP
: 
›
 = 
BRANCH_OP
; ;

497 
TEX_OP
: 
›
 = 
LOAD_OP
; ;

498 
ATOM_OP
: 
›
 = 
LOAD_OP
; ;

499 
BAR_OP
: 
›
 = 
BARRIER_OP
; ;

500 
MEMBAR_OP
: 
›
 = 
MEMORY_BARRIER_OP
; ;

501 
ADD_OP
: 
ADDP_OP
: 
ADDC_OP
: 
SUB_OP
: 
SUBC_OP
:

503 
	`gë_ty≥
()){

504 
F32_TYPE
:

505 
œãncy
 = 
Â_œãncy
[0];

506 
öôüti⁄_öãrvÆ
 = 
Â_öô
[0];

508 
F64_TYPE
:

509 
FF64_TYPE
:

510 
œãncy
 = 
dp_œãncy
[0];

511 
öôüti⁄_öãrvÆ
 = 
dp_öô
[0];

513 
B32_TYPE
:

514 
U32_TYPE
:

515 
S32_TYPE
:

517 
œãncy
 = 
öt_œãncy
[0];

518 
öôüti⁄_öãrvÆ
 = 
öt_öô
[0];

522 
MAX_OP
: 
MIN_OP
:

524 
	`gë_ty≥
()){

525 
F32_TYPE
:

526 
œãncy
 = 
Â_œãncy
[1];

527 
öôüti⁄_öãrvÆ
 = 
Â_öô
[1];

529 
F64_TYPE
:

530 
FF64_TYPE
:

531 
œãncy
 = 
dp_œãncy
[1];

532 
öôüti⁄_öãrvÆ
 = 
dp_öô
[1];

534 
B32_TYPE
:

535 
U32_TYPE
:

536 
S32_TYPE
:

538 
œãncy
 = 
öt_œãncy
[1];

539 
öôüti⁄_öãrvÆ
 = 
öt_öô
[1];

543 
MUL_OP
:

545 
	`gë_ty≥
()){

546 
F32_TYPE
:

547 
œãncy
 = 
Â_œãncy
[2];

548 
öôüti⁄_öãrvÆ
 = 
Â_öô
[2];

549 
›
 = 
ALU_SFU_OP
;

551 
F64_TYPE
:

552 
FF64_TYPE
:

553 
œãncy
 = 
dp_œãncy
[2];

554 
öôüti⁄_öãrvÆ
 = 
dp_öô
[2];

555 
›
 = 
ALU_SFU_OP
;

557 
B32_TYPE
:

558 
U32_TYPE
:

559 
S32_TYPE
:

561 
œãncy
 = 
öt_œãncy
[2];

562 
öôüti⁄_öãrvÆ
 = 
öt_öô
[2];

563 
›
 = 
SFU_OP
;

567 
MAD_OP
:

569 
	`gë_ty≥
()){

570 
F32_TYPE
:

571 
œãncy
 = 
Â_œãncy
[3];

572 
öôüti⁄_öãrvÆ
 = 
Â_öô
[3];

574 
F64_TYPE
:

575 
FF64_TYPE
:

576 
œãncy
 = 
dp_œãncy
[3];

577 
öôüti⁄_öãrvÆ
 = 
dp_öô
[3];

579 
B32_TYPE
:

580 
U32_TYPE
:

581 
S32_TYPE
:

583 
œãncy
 = 
öt_œãncy
[3];

584 
öôüti⁄_öãrvÆ
 = 
öt_öô
[3];

585 
›
 = 
SFU_OP
;

589 
DIV_OP
:

591 
›
 = 
SFU_OP
;

592 
	`gë_ty≥
()){

593 
F32_TYPE
:

594 
œãncy
 = 
Â_œãncy
[4];

595 
öôüti⁄_öãrvÆ
 = 
Â_öô
[4];

597 
F64_TYPE
:

598 
FF64_TYPE
:

599 
œãncy
 = 
dp_œãncy
[4];

600 
öôüti⁄_öãrvÆ
 = 
dp_öô
[4];

602 
B32_TYPE
:

603 
U32_TYPE
:

604 
S32_TYPE
:

606 
œãncy
 = 
öt_œãncy
[4];

607 
öôüti⁄_öãrvÆ
 = 
öt_öô
[4];

611 
SQRT_OP
: 
SIN_OP
: 
COS_OP
: 
EX2_OP
: 
LG2_OP
: 
RSQRT_OP
: 
RCP_OP
:

613 
œãncy
 = 
dp_œãncy
[2];

614 
öôüti⁄_öãrvÆ
 = 
dp_öô
[2];

615 
›
 = 
SFU_OP
;

620 
	}
}

622 
	g±x_thªad_öfo
::
	$±x_„tch_ö°
–
ö°_t
 &
ö°
 ) const

624 
addr_t
 
pc
 = 
	`gë_pc
();

625 c⁄° 
±x_ö°ru˘i⁄
 *
pI
 = 
m_func_öfo
->
	`gë_ö°ru˘i⁄
(
pc
);

626 
ö°
 = (c⁄° 
ö°_t
&)*
pI
;

627 
	`as£π
–
ö°
.
	`vÆid
() );

628 
	}
}

630 
	$d©©y≥2size
–
d©a_ty≥
 )

632 
d©a_size
;

633  
d©a_ty≥
 ) {

634 
B8_TYPE
:

635 
S8_TYPE
:

636 
U8_TYPE
:

637 
d©a_size
 = 1; ;

638 
B16_TYPE
:

639 
S16_TYPE
:

640 
U16_TYPE
:

641 
F16_TYPE
:

642 
d©a_size
 = 2; ;

643 
B32_TYPE
:

644 
S32_TYPE
:

645 
U32_TYPE
:

646 
F32_TYPE
:

647 
d©a_size
 = 4; ;

648 
B64_TYPE
:

649 
BB64_TYPE
:

650 
S64_TYPE
:

651 
U64_TYPE
:

652 
F64_TYPE
:

653 
FF64_TYPE
:

654 
d©a_size
 = 8; ;

655 
BB128_TYPE
:

656 
d©a_size
 = 16; ;

657 : 
	`as£π
(0); ;

659  
d©a_size
;

660 
	}
}

662 
	g±x_ö°ru˘i⁄
::
	$¥e_decode
()

664 
pc
 = 
m_PC
;

665 
isize
 = 
m_ö°_size
;

666  
i
=0; i<4; i++) {

667 
out
[
i
] = 0;

668 
ö
[
i
] = 0;

670 
is_ve˘‹ö
 = 0;

671 
is_ve˘‹out
 = 0;

672 
°d
::
	`fûl_n
(
¨ch_ªg
.
§c
, 
MAX_REG_OPERANDS
, -1);

673 
°d
::
	`fûl_n
(
¨ch_ªg
.
d°
, 
MAX_REG_OPERANDS
, -1);

674 
¥ed
 = 0;

675 
¨1
 = 0;

676 
¨2
 = 0;

677 
•a˚
 = 
m_•a˚_•ec
;

678 
mem‹y_›
 = 
no_mem‹y_›
;

679 
d©a_size
 = 0;

680 i‡–
	`has_mem‹y_ªad
(Ë|| 
	`has_mem‹y_wrôe
() ) {

681 
to_ty≥
 = 
	`gë_ty≥
();

682 
d©a_size
 = 
	`d©©y≥2size
(
to_ty≥
);

683 
mem‹y_›
 = 
	`has_mem‹y_ªad
(Ë? 
mem‹y_lﬂd
 : 
mem‹y_°‹e
;

686 
boﬁ
 
has_d°
 = 
Ál£
 ;

688  
	`gë_›code
() ) {

689 
	#OP_DEF
(
OP
,
FUNC
,
STR
,
DST
,
CLASSIFICATION
ËOP: 
has_d°
 = (DST!=0); ;

	)

690 
	~"›codes.def
"

691 #unde‡
OP_DEF


693 
	`¥ötf
–"Executi⁄Éº‹: InvÆid opcodê(0x%x)\n", 
	`gë_›code
() );

697  
m_ˇche_›ti⁄
 ) {

698 
CA_OPTION
: 
ˇche_›
 = 
CACHE_ALL
; ;

699 
CG_OPTION
: 
ˇche_›
 = 
CACHE_GLOBAL
; ;

700 
CS_OPTION
: 
ˇche_›
 = 
CACHE_STREAMING
; ;

701 
LU_OPTION
: 
ˇche_›
 = 
CACHE_LAST_USE
; ;

702 
CV_OPTION
: 
ˇche_›
 = 
CACHE_VOLATILE
; ;

703 
WB_OPTION
: 
ˇche_›
 = 
CACHE_WRITE_BACK
; ;

704 
WT_OPTION
: 
ˇche_›
 = 
CACHE_WRITE_THROUGH
; ;

706 if–
m_›code
 =
LD_OP
 )

707 
ˇche_›
 = 
CACHE_ALL
;

708 if–
m_›code
 =
ST_OP
 )

709 
ˇche_›
 = 
CACHE_WRITE_BACK
;

710 if–
m_›code
 =
ATOM_OP
 )

711 
ˇche_›
 = 
CACHE_GLOBAL
;

715 
	`£t_›code_™d_œãncy
();

718 
n
=0,
m
=0;

719 
±x_ö°ru˘i⁄
::
c⁄°_ôî©‹
 
›r
=
	`›_ôî_begö
();

720  ; 
›r
 !
	`›_ôî_íd
(); o¥++, 
n
++ ) {

721 c⁄° 
›î™d_öfo
 &
o
 = *
›r
;

722 i‡–
has_d°
 && 
n
==0 ) {

723 i‡–
o
.
	`is_ªg
() ) {

724 
out
[0] = 
o
.
	`ªg_num
();

725 
¨ch_ªg
.
d°
[0] = 
o
.
	`¨ch_ªg_num
();

726 } i‡–
o
.
	`is_ve˘‹
() ) {

727 
is_ve˘‹ö
 = 1;

728 
num_ñem
 = 
o
.
	`gë_ve˘_√Àm
();

729 if–
num_ñem
 >1 ) 
out
[0] = 
o
.
	`ªg1_num
();

730 if–
num_ñem
 >2 ) 
out
[1] = 
o
.
	`ªg2_num
();

731 if–
num_ñem
 >3 ) 
out
[2] = 
o
.
	`ªg3_num
();

732 if–
num_ñem
 >4 ) 
out
[3] = 
o
.
	`ªg4_num
();

733 
i
 = 0; i < 
num_ñem
; i++)

734 
¨ch_ªg
.
d°
[
i
] = 
o
.
	`¨ch_ªg_num
(i);

737 i‡–
o
.
	`is_ªg
() ) {

738 
ªg_num
 = 
o
.
	`ªg_num
();

739 
¨ch_ªg
.
§c
[
m
] = 
o
.
	`¨ch_ªg_num
();

740  
m
 ) {

741 0: 
ö
[0] = 
ªg_num
; ;

742 1: 
ö
[1] = 
ªg_num
; ;

743 2: 
ö
[2] = 
ªg_num
; ;

746 
m
++;

747 } i‡–
o
.
	`is_ve˘‹
() ) {

749 
is_ve˘‹out
 = 1;

750 
num_ñem
 = 
o
.
	`gë_ve˘_√Àm
();

751 if–
num_ñem
 >1 ) 
ö
[0] = 
o
.
	`ªg1_num
();

752 if–
num_ñem
 >2 ) 
ö
[1] = 
o
.
	`ªg2_num
();

753 if–
num_ñem
 >3 ) 
ö
[2] = 
o
.
	`ªg3_num
();

754 if–
num_ñem
 >4 ) 
ö
[3] = 
o
.
	`ªg4_num
();

755 
i
 = 0; i < 
num_ñem
; i++)

756 
¨ch_ªg
.
§c
[
i
] = 
o
.
	`¨ch_ªg_num
(i);

757 
m
+=4;

763 if(
	`has_¥ed
()) {

764 c⁄° 
›î™d_öfo
 &
p
 = 
	`gë_¥ed
();

765 
¥ed
 = 
p
.
	`ªg_num
();

771 if–
	`has_mem‹y_ªad
(Ë|| 
	`has_mem‹y_wrôe
() ) {

772 
±x_ö°ru˘i⁄
::
c⁄°_ôî©‹
 
›
=
	`›_ôî_begö
();

773  ; 
›
 !
	`›_ôî_íd
(); op++, 
n
++ ) {

774 c⁄° 
›î™d_öfo
 &
o
 = *
›
;

776 if(
o
.
	`is_mem‹y_›î™d
()) {

780 if(
o
.
	`is_mem‹y_›î™d2
()) {

783 if(
o
.
	`gë_doubÀ_›î™d_ty≥
() == 0 || o.get_double_operand_type() == 3){

784 
¨1
 = 
o
.
	`ªg_num
();

785 
¨ch_ªg
.
§c
[4] = 
o
.
	`¨ch_ªg_num
();

789 if(
o
.
	`gë_doubÀ_›î™d_ty≥
() == 1 || o.get_double_operand_type() == 2) {

790 
¨1
 = 
o
.
	`ªg1_num
();

791 
¨ch_ªg
.
§c
[4] = 
o
.
	`¨ch_ªg_num
();

792 
¨2
 = 
o
.
	`ªg2_num
();

793 
¨ch_ªg
.
§c
[5] = 
o
.
	`¨ch_ªg_num
();

798 i‡(
o
.
	`gë_symbﬁ
()->
	`ty≥
()->
	`gë_key
().
	`is_ªg
()) {

799 
¨1
 = 
o
.
	`ªg_num
();

800 
¨ch_ªg
.
§c
[4] = 
o
.
	`¨ch_ªg_num
();

808 
ªc⁄vîgí˚_pc
 = 
	`gë_c⁄vîge_poöt
(
pc
);

810 
m_decoded
=
åue
;

811 
	}
}

813 
	gfun˘i⁄_öfo
::
add_∑øm_«me_ty≥_size
–
ödex
, 
°d
::
°rög
 
«me
, 
ty≥
, 
size_t
 
size
 )

815 
	g∑r£d_ödex
;

816 
	gbuf„r
[2048];

817 
¢¥ötf
(
buf„r
,2048,"%s_∑øm_%%u", 
m_«me
.
c_°r
() );

818 
	g¡okís
 = 
ssˇnf
(
«me
.
c_°r
(),
buf„r
,&
∑r£d_ödex
);

819 if–
	g¡okís
 == 1 ) {

820 
as£π
–
m_±x_kî√l_∑øm_öfo
.
föd
(
∑r£d_ödex
Ë=m_±x_kî√l_∑øm_öfo.
íd
() );

821 
	gm_±x_kî√l_∑øm_öfo
[
∑r£d_ödex
] = 
∑øm_öfo
(
«me
, 
ty≥
, 
size
);

823 
as£π
–
m_±x_kî√l_∑øm_öfo
.
föd
(
ödex
Ë=m_±x_kî√l_∑øm_öfo.
íd
() );

824 
	gm_±x_kî√l_∑øm_öfo
[
ödex
] = 
∑øm_öfo
(
«me
, 
ty≥
, 
size
);

828 
	gfun˘i⁄_öfo
::
	$add_∑øm_d©a
–
¨gn
, 
gpgpu_±x_sim_¨g
 *
¨gs
 )

830 c⁄° *
d©a
 = 
¨gs
->
m_°¨t
;

832 
°d
::
m≠
<,
∑øm_öfo
>::
ôî©‹
 
i
=
m_±x_kî√l_∑øm_öfo
.
	`föd
(
¨gn
);

833 if–
i
 !
m_±x_kî√l_∑øm_öfo
.
	`íd
()) {

834 
∑øm_t
 
tmp
;

835 
tmp
.
pd©a
 = 
¨gs
->
m_°¨t
;

836 
tmp
.
size
 = 
¨gs
->
m_nbyãs
;

837 
tmp
.
off£t
 = 
¨gs
->
m_off£t
;

838 
tmp
.
ty≥
 = 0;

839 
i
->
£c⁄d
.
	`add_d©a
(
tmp
);

840 
i
->
£c⁄d
.
	`add_off£t
((Ë
¨gs
->
m_off£t
);

856 
buf„r
[2048];

857 
	`¢¥ötf
(
buf„r
,2048,"%s_∑øm_%u",
m_«me
.
	`c_°r
(),
¨gn
);

859 
symbﬁ
 *
p
 = 
m_symèb
->
	`lookup
(
buf„r
);

860 if–
p
 =
NULL
 ) {

861 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** couldÇŸÜoˇã symbﬁ f‹ \'%s\' : c™nŸ böd buf„r\n", 
buf„r
);

862 
	`ab‹t
();

864 if–
d©a
 )

865 
p
->
	`£t_addªss
((
addr_t
)*(
size_t
*)
d©a
);

869 if–!
p
->
	`is_sh¨ed
() ) {

870 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** clSetKernelArgÖassed NULL butárgÇot shared memory\n");

871 
	`ab‹t
();

873 
num_bôs
 = 8*
¨gs
->
m_nbyãs
;

874 
	`¥ötf
("GPGPU-Sim PTX: deferredállocation of sharedÑegion for \"%s\" from 0x%xÅo 0x%x (shared memory space)\n",

875 
p
->
	`«me
().
	`c_°r
(),

876 
m_symèb
->
	`gë_sh¨ed_√xt
(),

877 
m_symèb
->
	`gë_sh¨ed_√xt
(Ë+ 
num_bôs
/8 );

878 
	`fÊush
(
°dout
);

879 
	`as£π
–(
num_bôs
%8) == 0 );

880 
addr_t
 
addr
 = 
m_symèb
->
	`gë_sh¨ed_√xt
();

881 
addr_t
 
addr_∑d
 = 
num_bôs
 ? ((“um_bôs/8Ë- (
addr
 % (num_bits/8))) % (num_bits/8)) : 0;

882 
p
->
	`£t_addªss
–
addr
+
addr_∑d
 );

883 
m_symèb
->
	`Æloc_sh¨ed
–
num_bôs
/8 + 
addr_∑d
 );

886 
	}
}

888 
	gfun˘i⁄_öfo
::
	$föÆize
–
mem‹y_•a˚
 *
∑øm_mem
 )

890 
∑øm_addªss
 = 0;

891  
°d
::
m≠
<,
∑øm_öfo
>::
ôî©‹
 
i
=
m_±x_kî√l_∑øm_öfo
.
	`begö
(); i!=m_±x_kî√l_∑øm_öfo.
	`íd
(); i++ ) {

892 
∑øm_öfo
 &
p
 = 
i
->
£c⁄d
;

893 
°d
::
°rög
 
«me
 = 
p
.
	`gë_«me
();

894 
ty≥
 = 
p
.
	`gë_ty≥
();

895 
∑øm_t
 
∑øm_vÆue
 = 
p
.
	`gë_vÆue
();

896 
∑øm_vÆue
.
ty≥
 =Åype;

897 
symbﬁ
 *
∑øm
 = 
m_symèb
->
	`lookup
(
«me
.
	`c_°r
());

898 
xty≥
 = 
∑øm
->
	`ty≥
()->
	`gë_key
().
	`sˇœr_ty≥
();

899 
	`as£π
(
xty≥
==()
ty≥
);

900 
size_t
 
size
;

901 
size
 = 
∑øm_vÆue
.size;

903 if–
size
 !
p
.
	`gë_size
() / 8) {

904 
	`¥ötf
("GPGPU-Sim PTX: WARNINGáctual kernelÖaramter size = %zu bytes vs. formal size = %zu (using smaller ofÅwo)\n",

905 
size
, 
p
.
	`gë_size
()/8);

906 
size
 = (size<(
p
.
	`gë_size
()/8))?size:(p.get_size()/8);

909 c⁄° 
size_t
 
w‹d_size
 = 4;

910 
size_t
 
idx
 = 0; idx < 
size
; idx +
w‹d_size
) {

911 c⁄° *
pd©a
 = 
ªöãΩªt_ˇ°
<c⁄° *>(
∑øm_vÆue
.pd©aË+ 
idx
;

912 
∑øm_mem
->
	`wrôe
(
∑øm_addªss
 + 
idx
, 
w‹d_size
, 
pd©a
,
NULL
,NULL);

914 
∑øm
->
	`£t_addªss
(
∑øm_addªss
);

915 
∑øm_addªss
 +
size
;

917 
	}
}

919 
	gfun˘i⁄_öfo
::
	$∑øm_to_sh¨ed
–
mem‹y_•a˚
 *
sh¨ed_mem
, 
symbﬁ_èbÀ
 *
symèb
 )

922  
°d
::
m≠
<,
∑øm_öfo
>::
ôî©‹
 
i
=
m_±x_kî√l_∑øm_öfo
.
	`begö
(); i!=m_±x_kî√l_∑øm_öfo.
	`íd
(); i++ ) {

923 
∑øm_öfo
 &
p
 = 
i
->
£c⁄d
;

924 
°d
::
°rög
 
«me
 = 
p
.
	`gë_«me
();

925 
ty≥
 = 
p
.
	`gë_ty≥
();

926 
∑øm_t
 
vÆue
 = 
p
.
	`gë_vÆue
();

927 
vÆue
.
ty≥
 =Åype;

928 
symbﬁ
 *
∑øm
 = 
symèb
->
	`lookup
(
«me
.
	`c_°r
());

929 
xty≥
 = 
∑øm
->
	`ty≥
()->
	`gë_key
().
	`sˇœr_ty≥
();

930 
	`as£π
(
xty≥
==()
ty≥
);

932 
tmp
;

933 
size_t
 
size
;

934 
off£t
 = 
p
.
	`gë_off£t
();

935 
ty≥_öfo_key
::
	`ty≥_decode
(
xty≥
,
size
,
tmp
);

938 
sh¨ed_mem
->
	`wrôe
(
off£t
+0x10,
size
/8,
vÆue
.
pd©a
,
NULL
,NULL);

940 
	}
}

943 
	gfun˘i⁄_öfo
::
	$li°_∑øm
–
FILE
 *
fout
 ) const

945  
°d
::
m≠
<,
∑øm_öfo
>::
c⁄°_ôî©‹
 
i
=
m_±x_kî√l_∑øm_öfo
.
	`begö
(); i!=m_±x_kî√l_∑øm_öfo.
	`íd
(); i++ ) {

946 c⁄° 
∑øm_öfo
 &
p
 = 
i
->
£c⁄d
;

947 
°d
::
°rög
 
«me
 = 
p
.
	`gë_«me
();

948 
symbﬁ
 *
∑øm
 = 
m_symèb
->
	`lookup
(
«me
.
	`c_°r
());

949 
addr_t
 
∑øm_addr
 = 
∑øm
->
	`gë_addªss
();

950 
	`Ârötf
(
fout
, "%s: %#08x\n", 
«me
.
	`c_°r
(), 
∑øm_addr
);

952 
	`fÊush
(
fout
);

953 
	}
}

955 
	gãm∂©e
<
	ga˘iv©e_Àvñ
>

956 
boﬁ
 
	$±x_debug_exec_dump_c⁄d
(
thd_uid
, 
addr_t
 
pc
)

958 i‡(
g_debug_executi⁄
 >
a˘iv©e_Àvñ
) {

960 i‡–(
g_debug_thªad_uid
 !0Ë&& (
thd_uid
 != ()g_debug_thread_uid) ) {

961  
Ál£
;

963 i‡–(
g_debug_pc
 !0xBEEF1518Ë&& (
pc
 != g_debug_pc) ) {

964  
Ál£
;

967  
åue
;

970  
Ál£
;

971 
	}
}

973 
	$öô_ö°_˛assifiˇti⁄_°©
()

975 
°d
::
£t
<> 
öô
;

976 if–
öô
.
	`föd
(
g_±x_kî√l_cou¡
Ë!öô.
	`íd
() )

978 
öô
.
	`ö£π
(
g_±x_kî√l_cou¡
);

979 
kî√ ame
[256] ="";

980 
	#MAX_CLASS_KER
 1024

	)

981 i‡(!
g_ö°_˛assifiˇti⁄_°©
Ëg_ö°_˛assifiˇti⁄_°© = (**)
	`ˇŒoc
(
MAX_CLASS_KER
, (*));

982 
	`¢¥ötf
(
kî√ ame
, 
MAX_CLASS_KER
, "Kî√»%d Cœssifiˇti⁄\n",
g_±x_kî√l_cou¡
 );

983 
	`as£π
–
g_±x_kî√l_cou¡
 < 
MAX_CLASS_KER
 ) ;

984 
g_ö°_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
] = 
	`SètCª©e
(
kî√ ame
,1,20);

985 i‡(!
g_ö°_›_˛assifiˇti⁄_°©
Ëg_ö°_›_˛assifiˇti⁄_°© = (**)
	`ˇŒoc
(
MAX_CLASS_KER
, (*));

986 
	`¢¥ötf
(
kî√ ame
, 
MAX_CLASS_KER
, "Kî√»%d OP Cœssifiˇti⁄\n",
g_±x_kî√l_cou¡
 );

987 
g_ö°_›_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
] = 
	`SètCª©e
(
kî√ ame
,1,100);

988 
	}
}

990 
	$gë_ãx_d©asize
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

992 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

993 
°d
::
°rög
 
ãx«me
 = 
§c1
.
	`«me
();

995 
gpgpu_t
 *
gpu
 = 
thªad
->
	`gë_gpu
();

996 c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
 = 
gpu
->
	`gë_ãxªf
(
ãx«me
);

997 c⁄° 
ãxtuªInfo
* 
ãxInfo
 = 
gpu
->
	`gë_ãxöfo
(
ãxªf
);

999 
d©a_size
 = 
ãxInfo
->
ãxñ_size
;

1000  
d©a_size
;

1001 
	}
}

1003 
	g±x_thªad_öfo
::
	$±x_exec_ö°
–
w¨p_ö°_t
 &
ö°
, 
œ√_id
)

1005 
boﬁ
 
skù
 = 
Ál£
;

1006 
›_˛assifiˇti⁄
 = 0;

1007 
addr_t
 
pc
 = 
	`√xt_ö°r
();

1008 if(
pc
 !
ö°
.pc)

1010 
	`¥ötf
("p¯i†%ld\n",
pc
);

1011 
	`¥ötf
("ö°.p¯i†%ld\n",
ö°
.
pc
);

1014 
	`as£π
–
pc
 =
ö°
.pc );

1015 c⁄° 
±x_ö°ru˘i⁄
 *
pI
 = 
m_func_öfo
->
	`gë_ö°ru˘i⁄
(
pc
);

1016 
	`£t_≈c
–
pc
 + 
pI
->
	`ö°_size
() );

1020 
åy
 {

1022 
	`˛órRPC
();

1023 
m_œ°_£t_›î™d_vÆue
.
u64
 = 0;

1025 if(
	`is_d⁄e
())

1027 
	`¥ötf
("attemptedÅoÉxecute instruction onáÅhreadÅhat isálready done.\n");

1028 
	`as£π
(0);

1031 i‡–
g_debug_executi⁄
 >6 || 
m_gpu
->
	`gë_c⁄fig
().
	`gë_±x_ö°_debug_to_fûe
()) {

1032 i‡–(
g_debug_thªad_uid
==0Ë|| (
	`gë_uid
() == ()g_debug_thread_uid) ) {

1034 
	`˛ór_modifõdªgs
();

1035 
	`íabÀ_debug_åa˚
();

1040 if–
pI
->
	`has_¥ed
() ) {

1041 c⁄° 
›î™d_öfo
 &
¥ed
 = 
pI
->
	`gë_¥ed
();

1042 
±x_ªg_t
 
¥ed_vÆue
 = 
	`gë_›î™d_vÆue
(
¥ed
,Öªd, 
PRED_TYPE
, 
this
, 0);

1043 if(
pI
->
	`gë_¥ed_mod
() == -1) {

1044 
skù
 = (
¥ed_vÆue
.
¥ed
 & 0x0001Ë^ 
pI
->
	`gë_¥ed_√g
();

1046 
skù
 = !
	`¥ed_lookup
(
pI
->
	`gë_¥ed_mod
(), 
¥ed_vÆue
.
¥ed
 & 0x000F);

1050 if–
skù
 ) {

1051 
ö°
.
	`£t_nŸ_a˘ive
(
œ√_id
);

1053 c⁄° 
±x_ö°ru˘i⁄
 *
pI_ßved
 = 
pI
;

1054 
±x_ö°ru˘i⁄
 *
pJ
 = 
NULL
;

1055 if–
pI
->
	`gë_›code
(Ë=
VOTE_OP
 ) {

1056 
pJ
 = 
√w
 
	`±x_ö°ru˘i⁄
(*
pI
);

1057 *((
w¨p_ö°_t
*)
pJ
Ë
ö°
;

1058 
pI
 = 
pJ
;

1062  
pI
->
	`gë_›code
() ) {

1063 
	#OP_DEF
(
OP
,
FUNC
,
STR
,
DST
,
CLASSIFICATION
ËOP: 
	`FUNC
(
pI
,
this
); 
›_˛assifiˇti⁄
 = CLASSIFICATION; ;

	)

1064 
	~"›codes.def
"

1065 #unde‡
OP_DEF


1066 : 
	`¥ötf
–"Executi⁄Éº‹: InvÆid opcodê(0x%x)\n", 
pI
->
	`gë_›code
() ); ;

1070 
dñëe
 
pJ
;

1071 
pI
 = 
pI_ßved
;

1074 if(
pI
->
	`is_exô
())

1075 
	`exô_im∂
(
pI
,
this
);

1080 c⁄° 
gpgpu_fun˘i⁄Æ_sim_c⁄fig
 &
c⁄fig
 = 
m_gpu
->
	`gë_c⁄fig
();

1083 if–
c⁄fig
.
	`gë_±x_ö°_debug_to_fûe
() != 0 &&

1084 (
c⁄fig
.
	`gë_±x_ö°_debug_thªad_uid
(Ë=0 || c⁄fig.gë_±x_ö°_debug_thªad_uid(Ë=
	`gë_uid
()) ) {

1085 
dim3
 
˘aid
 = 
	`gë_˘aid
();

1086 
dim3
 
tid
 = 
	`gë_tid
();

1087 
	`Ârötf
(
m_gpu
->
	`gë_±x_ö°_debug_fûe
(),

1089 
	`gë_uid
(),

1090 
pI
->
	`sour˚_fûe
(),ÖI->
	`sour˚_löe
(),ÖI->
	`gë_sour˚
() );

1092 
	`fÊush
(
m_gpu
->
	`gë_±x_ö°_debug_fûe
());

1095 i‡–
±x_debug_exec_dump_c⁄d
<5>(
	`gë_uid
(), 
pc
) ) {

1096 
dim3
 
˘aid
 = 
	`gë_˘aid
();

1097 
dim3
 
tid
 = 
	`gë_tid
();

1098 
	`¥ötf
("%u [thd=%u][i=%u] : ctaid=(%u,%u,%u)Åid=(%u,%u,%u) icount=%u [pc=%u] (%s:%u - %s) [0x%llx]\n",

1099 
g_±x_sim_num_ö¢
,

1100 
	`gë_uid
(),

1101 
pI
->
	`uid
(), 
˘aid
.
x
,˘aid.
y
,˘aid.
z
,
tid
.x,tid.y,tid.z,

1102 
	`gë_icou¡
(),

1103 
pc
, 
pI
->
	`sour˚_fûe
(),ÖI->
	`sour˚_löe
(),ÖI->
	`gë_sour˚
(),

1104 
m_œ°_£t_›î™d_vÆue
.
u64
 );

1105 
	`fÊush
(
°dout
);

1108 
addr_t
 
ö¢_memaddr
 = 0xFEEBDAED;

1109 
mem‹y_•a˚_t
 
ö¢_•a˚
 = 
undeföed_•a˚
;

1110 
_mem‹y_›_t
 
ö¢_mem‹y_›
 = 
no_mem‹y_›
;

1111 
ö¢_d©a_size
 = 0;

1112 i‡–(
pI
->
	`has_mem‹y_ªad
(Ë||ÖI->
	`has_mem‹y_wrôe
()) ) {

1113 
ö¢_memaddr
 = 
	`œ°_óddr
();

1114 
ö¢_•a˚
 = 
	`œ°_•a˚
();

1115 
to_ty≥
 = 
pI
->
	`gë_ty≥
();

1116 
ö¢_d©a_size
 = 
	`d©©y≥2size
(
to_ty≥
);

1117 
ö¢_mem‹y_›
 = 
pI
->
	`has_mem‹y_ªad
(Ë? 
mem‹y_lﬂd
 : 
mem‹y_°‹e
;

1120 i‡–
pI
->
	`gë_›code
(Ë=
ATOM_OP
 ) {

1121 
ö¢_memaddr
 = 
	`œ°_óddr
();

1122 
ö¢_•a˚
 = 
	`œ°_•a˚
();

1123 
ö°
.
	`add_ˇŒback
–
œ√_id
, 
	`œ°_ˇŒback
().
fun˘i⁄
,Üa°_ˇŒback().
ö°ru˘i⁄
, 
this
 );

1124 
to_ty≥
 = 
pI
->
	`gë_ty≥
();

1125 
ö¢_d©a_size
 = 
	`d©©y≥2size
(
to_ty≥
);

1128 i‡(
pI
->
	`gë_›code
(Ë=
TEX_OP
) {

1129 
ö°
.
	`£t_addr
(
œ√_id
, 
	`œ°_óddr
() );

1130 
	`as£π
–
ö°
.
•a˚
 =
	`œ°_•a˚
() );

1131 
ö¢_d©a_size
 = 
	`gë_ãx_d©asize
(
pI
, 
this
);

1135 if–
c⁄fig
.
	`gë_±x_ö°_debug_to_fûe
()!=0 &&

1136 (
c⁄fig
.
	`gë_±x_ö°_debug_thªad_uid
()==0||c⁄fig.gë_±x_ö°_debug_thªad_uid()==
	`gë_uid
()) ) {

1137 
	`dump_modifõdªgs
(
m_gpu
->
	`gë_±x_ö°_debug_fûe
());

1138 
	`dump_ªgs
(
m_gpu
->
	`gë_±x_ö°_debug_fûe
());

1141 i‡–
g_debug_executi⁄
 >= 6 ) {

1142 i‡–
±x_debug_exec_dump_c⁄d
<6>(
	`gë_uid
(), 
pc
) )

1143 
	`dump_modifõdªgs
(
°dout
);

1145 i‡–
g_debug_executi⁄
 >= 10 ) {

1146 i‡–
±x_debug_exec_dump_c⁄d
<10>(
	`gë_uid
(), 
pc
) )

1147 
	`dump_ªgs
(
°dout
);

1149 
	`upd©e_pc
();

1153 if(!(
this
->
m_fun˘i⁄ÆSimuœti⁄Mode
))

1154 
	`±x_fûe_löe_°©s_add_exec_cou¡
(
pI
);

1156 i‡–
gpgpu_±x_ö°ru˘i⁄_˛assifiˇti⁄
 ) {

1157 
	`öô_ö°_˛assifiˇti⁄_°©
();

1158 
•a˚_ty≥
=0;

1159  
pI
->
	`gë_•a˚
().
	`gë_ty≥
() ) {

1160 
globÆ_•a˚
: 
•a˚_ty≥
 = 10; ;

1161 
loˇl_•a˚
: 
•a˚_ty≥
 = 11; ;

1162 
ãx_•a˚
: 
•a˚_ty≥
 = 12; ;

1163 
surf_•a˚
: 
•a˚_ty≥
 = 13; ;

1164 
∑øm_•a˚_kî√l
:

1165 
∑øm_•a˚_loˇl
:

1166 
•a˚_ty≥
 = 14; ;

1167 
sh¨ed_•a˚
: 
•a˚_ty≥
 = 15; ;

1168 
c⁄°_•a˚
: 
•a˚_ty≥
 = 16; ;

1170 
•a˚_ty≥
 = 0 ;

1173 
	`SètAddSam∂e
–
g_ö°_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
], 
›_˛assifiˇti⁄
);

1174 i‡(
•a˚_ty≥
Ë
	`SètAddSam∂e
–
g_ö°_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
], ( )space_type);

1175 
	`SètAddSam∂e
–
g_ö°_›_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
], (Ë
pI
->
	`gë_›code
() );

1188 if(!
skù
) {

1189 
ö°
.
•a˚
 = 
ö¢_•a˚
;

1190 
ö°
.
	`£t_addr
(
œ√_id
, 
ö¢_memaddr
);

1191 
ö°
.
d©a_size
 = 
ö¢_d©a_size
;

1192 
	`as£π
–
ö°
.
mem‹y_›
 =
ö¢_mem‹y_›
 );

1195 } 
	`ˇtch
 ( 
x
 ) {

1196 
	`¥ötf
("GPGPU-Sim PTX: ERROR (%dËexecutög i¡ru˘i⁄ (%s:%u)\n", 
x
, 
pI
->
	`sour˚_fûe
(),ÖI->
	`sour˚_löe
() );

1197 
	`¥ötf
("GPGPU-Sim PTX: '%s'\n", 
pI
->
	`gë_sour˚
() );

1198 
	`ab‹t
();

1201 
	}
}

1203 
	$£t_∑øm_gpgpu_num_shadîs
(
num_shadîs
)

1205 
gpgpu_∑øm_num_shadîs
 = 
num_shadîs
;

1206 
	}
}

1208 c⁄° 
gpgpu_±x_sim_kî√l_öfo
* 
	$±x_sim_kî√l_öfo
(c⁄° 
fun˘i⁄_öfo
 *
kî√l
)

1210  
kî√l
->
	`gë_kî√l_öfo
();

1211 
	}
}

1213 c⁄° 
w¨p_ö°_t
 *
	$±x_„tch_ö°
–
addªss_ty≥
 
pc
 )

1215  
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

1216 
	}
}

1217 
Pro˚ss_id
;

1218 
	gEnd_Block_Pro˚ss
[5];

1219 
	gBegö_Block_Pro˚ss
[5];

1220 
	gblock_co°
[299999];

1221 
	$±x_sim_öô_thªad1
–
kî√l_öfo_t
 &
kî√l
,

1222 
±x_thªad_öfo
** 
thªad_öfo
,

1223 
sid
,

1224 
tid
,

1225 
thªads_À·
,

1226 
num_thªads
,

1227 
c‹e_t
 *
c‹e
,

1228 
hw_˘a_id
,

1229 
hw_w¨p_id
,

1230 
gpgpu_t
 *
gpu
,

1231 
CTA≥rShadî
,

1232 
boﬁ
 
isInFun˘i⁄ÆSimuœti⁄Mode
)

1234 
°d
::
li°
<
±x_thªad_öfo
 *> &
a˘ive_thªads
 = 
kî√l
.
	`a˘ive_thªads
(0);

1240 i‡–*
thªad_öfo
 !
NULL
 ) {

1241 
±x_thªad_öfo
 *
thd
 = *
thªad_öfo
;

1242 
	`as£π
–
thd
->
	`is_d⁄e
() );

1243 i‡–
g_debug_executi⁄
==-1 ) {

1244 
dim3
 
˘aid
 = 
thd
->
	`gë_˘aid
();

1245 
dim3
 
t
 = 
thd
->
	`gë_tid
();

1246 
	`¥ötf
("GPGPU-Sim PTX simulator:ÅhreadÉxiting ctaid=(%u,%u,%u)Åid=(%u,%u,%u) uid=%u\n",

1247 
˘aid
.
x
,˘aid.
y
,˘aid.
z
,
t
.x,t.y,t.z, 
thd
->
	`gë_uid
() );

1248 
	`fÊush
(
°dout
);

1251 
dñëe
 
thd
;

1252 *
thªad_öfo
 = 
NULL
;

1255 i‡–!
a˘ive_thªads
.
	`em±y
() ) {

1257 
	`as£π
–
a˘ive_thªads
.
	`size
(Ë<
thªads_À·
 );

1258 
±x_thªad_öfo
 *
thd
 = 
a˘ive_thªads
.
	`‰⁄t
();

1259 
a˘ive_thªads
.
	`p›_‰⁄t
();

1260 *
thªad_öfo
 = 
thd
;

1261 
thd
->
	`öô
(
gpu
, 
c‹e
, 
sid
, 
hw_˘a_id
, 
hw_w¨p_id
, 
tid
, 
isInFun˘i⁄ÆSimuœti⁄Mode
 );

1265 i‡–
kî√l
.
	`no_m‹e_˘as_to_run
() ) {

1269 i‡–
thªads_À·
 < 
kî√l
.
	`thªads_≥r_˘a
() ) {

1273 i‡–
g_debug_executi⁄
==-1 ) {

1274 
	`¥ötf
("GPGPU-Sim PTX simulator: STARTING THREAD ALLOCATION --> \n");

1275 
	`fÊush
(
°dout
);

1313 
block_id

kî√l
.
	`num_blocks_runID_KAIN
(0);

1319 
block_co°
[
block_id
] = 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
;

1333  
kî√l
.
	`m‹e_thªads_ö_˘a
(0) ) {

1335 
dim3
 
˘aid3d
 = 
kî√l
.
	`gë_√xt_˘a_id
(0);

1337 
√w_tid
 = 
kî√l
.
	`gë_√xt_thªad_id
(0);

1338 
dim3
 
tid3d
 = 
kî√l
.
	`gë_√xt_thªad_id_3d
(0);

1339 
kî√l
.
	`ö¸emít_thªad_id
(0);

1340 
√w_tid
 +
tid
;

1341 
±x_thªad_öfo
 *
thd
 = 
√w
 
	`±x_thªad_öfo
(
kî√l
);

1355 
thd
->
	`£t_öfo
(
kî√l
.
	`íåy
());

1356 
thd
->
	`£t_n˘aid
(
kî√l
.
	`gë_grid_dim
());

1357 
thd
->
	`£t_¡id
(
kî√l
.
	`gë_˘a_dim
());

1358 
thd
->
	`£t_˘aid
(
˘aid3d
);

1359 
thd
->
	`£t_tid
(
tid3d
);

1361 if–
kî√l
.
	`íåy
()->
	`gë_±x_vîsi⁄
().
	`exãnsi⁄s
() )

1364 
thd
->
	`˝y_tid_to_ªg
(
tid3d
);

1367 
thd
->
	`£t_vÆid
();

1368 
thd
->
m_sh¨ed_mem
 = 
NULL
;

1369 
fun˘i⁄_öfo
 *
föfo
 = 
thd
->
	`func_öfo
();

1374 
thd
->
m_˘a_öfo
 = 
NULL
;

1377 
thd
->
m_loˇl_mem
 = 
NULL
;

1379 i‡–
g_debug_executi⁄
==-1 ) {

1380 
	`¥ötf
("GPGPU-Sim PTX simulator:állocatingÅhread ctaid=(%u,%u,%u)Åid=(%u,%u,%u) @ 0x%Lx\n",

1381 
˘aid3d
.
x
,˘aid3d.
y
,˘aid3d.
z
,
tid3d
.x,tid3d.y,tid3d.z, ()
thd
 );

1382 
	`fÊush
(
°dout
);

1384 
a˘ive_thªads
.
	`push_back
(
thd
);

1386 i‡–
g_debug_executi⁄
==-1 ) {

1387 
	`¥ötf
("GPGPU-Sim PTX simulator: <-- FINISHING THREAD ALLOCATION\n");

1388 
	`fÊush
(
°dout
);

1392 
kî√l
.
	`ö¸emít_˘a_id_≥rf‹m™˚
(0);

1394 
	`as£π
–
a˘ive_thªads
.
	`size
(Ë<
thªads_À·
 );

1395 *
thªad_öfo
 = 
a˘ive_thªads
.
	`‰⁄t
();

1396 (*
thªad_öfo
)->
	`öô
(
gpu
, 
c‹e
, 
sid
, 
hw_˘a_id
, 
hw_w¨p_id
, 
tid
,
isInFun˘i⁄ÆSimuœti⁄Mode
 );

1397 
a˘ive_thªads
.
	`p›_‰⁄t
();

1399 
	}
}

1403 
	$±x_sim_öô_thªad
–
kî√l_öfo_t
 &
kî√l
,

1404 
±x_thªad_öfo
** 
thªad_öfo
,

1405 
sid
,

1406 
tid
,

1407 
thªads_À·
,

1408 
num_thªads
,

1409 
c‹e_t
 *
c‹e
,

1410 
hw_˘a_id
,

1411 
hw_w¨p_id
,

1412 
gpgpu_t
 *
gpu
,

1413 
boﬁ
 
isInFun˘i⁄ÆSimuœti⁄Mode
,

1414 
Thªad_ID
)

1423 
°d
::
li°
<
±x_thªad_öfo
 *> &
a˘ive_thªads
 = 
kî√l
.
	`a˘ive_thªads
(
sid
);

1446 i‡–*
thªad_öfo
 !
NULL
 ) {

1447 
±x_thªad_öfo
 *
thd
 = *
thªad_öfo
;

1448 
	`as£π
–
thd
->
	`is_d⁄e
() );

1449 i‡–
g_debug_executi⁄
==-1 ) {

1450 
dim3
 
˘aid
 = 
thd
->
	`gë_˘aid
();

1451 
dim3
 
t
 = 
thd
->
	`gë_tid
();

1452 
	`¥ötf
("GPGPU-Sim PTX simulator:ÅhreadÉxiting ctaid=(%u,%u,%u)Åid=(%u,%u,%u) uid=%u\n",

1453 
˘aid
.
x
,˘aid.
y
,˘aid.
z
,
t
.x,t.y,t.z, 
thd
->
	`gë_uid
() );

1454 
	`fÊush
(
°dout
);

1456 
thd
->
m_˘a_öfo
->
	`ªgi°î_dñëed_thªad
(thd);

1457 
dñëe
 
thd
;

1458 *
thªad_öfo
 = 
NULL
;

1461 i‡–!
a˘ive_thªads
.
	`em±y
() ) {

1462 
	`as£π
–
a˘ive_thªads
.
	`size
(Ë<
thªads_À·
 );

1463 
±x_thªad_öfo
 *
thd
 = 
a˘ive_thªads
.
	`‰⁄t
();

1464 
a˘ive_thªads
.
	`p›_‰⁄t
();

1465 *
thªad_öfo
 = 
thd
;

1466 
thd
->
	`öô
(
gpu
, 
c‹e
, 
sid
, 
hw_˘a_id
, 
hw_w¨p_id
, 
tid
, 
isInFun˘i⁄ÆSimuœti⁄Mode
 );

1469 if(
isInFun˘i⁄ÆSimuœti⁄Mode
 =
Ál£
)

1470 i‡–
kî√l
.
	`no_m‹e_˘as_to_run
() ) {

1474 i‡–
thªads_À·
 < 
kî√l
.
	`thªads_≥r_˘a
() ) {

1479 i‡–
g_debug_executi⁄
==-1 ) {

1480 
	`¥ötf
("GPGPU-Sim PTX simulator: STARTING THREAD ALLOCATION --> \n");

1481 
	`fÊush
(
°dout
);

1485 
±x_˘a_öfo
 *
˘a_öfo
 = 
NULL
;

1486 
mem‹y_•a˚
 *
sh¨ed_mem
 = 
NULL
;

1488 
˘a_size
 = 
kî√l
.
	`thªads_≥r_˘a
();

1489 
max_˘a_≥r_sm
 = 
num_thªads
/
˘a_size
;

1490 
	`as£π
–
max_˘a_≥r_sm
 > 0 );

1492 
sm_idx
 = (
tid
/
˘a_size
)*
gpgpu_∑øm_num_shadîs
 + 
sid
;

1510 i‡–
g_debug_executi⁄
 >= 1 )

1513 
	`¥ötf
(" ThªadID:%d <CTAáŒoc> : sm_idx=%u sid=%u max_˘a_≥r_sm=%u\n", 
Thªad_ID
,

1514 
sm_idx
, 
sid
, 
max_˘a_≥r_sm
 );

1516 
buf
[512];

1517 
	`¢¥ötf
(
buf
,512,"sh¨ed_%u", 
sid
);

1518 
sh¨ed_mem
 = 
√w
 
mem‹y_•a˚_im∂
<16*1024>(
buf
,4);

1524 
˘a_öfo
 = 
√w
 
	`±x_˘a_öfo
(
sm_idx
,
åue
);

1531 i‡–
g_debug_executi⁄
 >= 1 )

1533 
	`¥ötf
("ThªadID:%d <CTAÑóŒoc> : sm_idx=%u sid=%u max_˘a_≥r_sm=%u\n", 
Thªad_ID
,

1534 
sm_idx
, 
sid
, 
max_˘a_≥r_sm
 );

1538 
˘a_öfo
->
	`check_˘a_thªad_°©us_™d_ª£t
();

1553  
kî√l
.
	`m‹e_thªads_ö_˘a
(
Thªad_ID
) ) {

1554 
dim3
 
˘aid3d
 = 
kî√l
.
	`gë_√xt_˘a_id
(
Thªad_ID
);

1555 
√w_tid
 = 
kî√l
.
	`gë_√xt_thªad_id
(
Thªad_ID
);

1556 
dim3
 
tid3d
 = 
kî√l
.
	`gë_√xt_thªad_id_3d
(
Thªad_ID
);

1557 
kî√l
.
	`ö¸emít_thªad_id
(
Thªad_ID
);

1558 
√w_tid
 +
tid
;

1559 
±x_thªad_öfo
 *
thd
 = 
√w
 
	`±x_thªad_öfo
(
kî√l
);

1561 
mem‹y_•a˚
 *
loˇl_mem
 = 
NULL
;

1574 
buf
[512];

1575 
	`¢¥ötf
(
buf
,512,"loˇl_%u_%u", 
sid
, 
√w_tid
);

1576 
loˇl_mem
 = 
√w
 
mem‹y_•a˚_im∂
<32>(
buf
,32);

1586 
thd
->
	`£t_öfo
(
kî√l
.
	`íåy
());

1587 
thd
->
	`£t_n˘aid
(
kî√l
.
	`gë_grid_dim
());

1588 
thd
->
	`£t_¡id
(
kî√l
.
	`gë_˘a_dim
());

1589 
thd
->
	`£t_˘aid
(
˘aid3d
);

1590 
thd
->
	`£t_tid
(
tid3d
);

1598 if–
kî√l
.
	`íåy
()->
	`gë_±x_vîsi⁄
().
	`exãnsi⁄s
() )

1599 
thd
->
	`˝y_tid_to_ªg
(
tid3d
);

1600 
thd
->
	`£t_vÆid
();

1601 
thd
->
m_sh¨ed_mem
 = 
sh¨ed_mem
;

1602 
fun˘i⁄_öfo
 *
föfo
 = 
thd
->
	`func_öfo
();

1603 
symbﬁ_èbÀ
 *
°
 = 
föfo
->
	`gë_symèb
();

1604 
thd
->
	`func_öfo
()->
	`∑øm_to_sh¨ed
—hd->
m_sh¨ed_mem
,
°
);

1605 
thd
->
m_˘a_öfo
 = 
˘a_öfo
;

1606 
˘a_öfo
->
	`add_thªad
(
thd
);

1607 
thd
->
m_loˇl_mem
 = 
loˇl_mem
;

1608 i‡–
g_debug_executi⁄
==-1 ) {

1609 
	`¥ötf
("GPGPU-Sim PTX simulator:állocatingÅhread ctaid=(%u,%u,%u)Åid=(%u,%u,%u) @ 0x%Lx\n",

1610 
˘aid3d
.
x
,˘aid3d.
y
,˘aid3d.
z
,
tid3d
.x,tid3d.y,tid3d.z, ()
thd
 );

1611 
	`fÊush
(
°dout
);

1620 
a˘ive_thªads
.
	`push_back
(
thd
);

1622 i‡–
g_debug_executi⁄
==-1 ) {

1623 
	`¥ötf
("GPGPU-Sim PTX simulator: <-- FINISHING THREAD ALLOCATION\n");

1624 
	`fÊush
(
°dout
);

1629 
	`as£π
–
a˘ive_thªads
.
	`size
(Ë<
thªads_À·
 );

1630 *
thªad_öfo
 = 
a˘ive_thªads
.
	`‰⁄t
();

1631 (*
thªad_öfo
)->
	`öô
(
gpu
, 
c‹e
, 
sid
, 
hw_˘a_id
, 
hw_w¨p_id
, 
tid
,
isInFun˘i⁄ÆSimuœti⁄Mode
 );

1632 
a˘ive_thªads
.
	`p›_‰⁄t
();

1634 
	}
}

1636 
size_t
 
	$gë_kî√l_code_size
–
˛ass
 
fun˘i⁄_öfo
 *
íåy
 )

1638  
íåy
->
	`gë_fun˘i⁄_size
();

1639 
	}
}

1642 
kî√l_öfo_t
 *
	$gpgpu_›í˛_±x_sim_öô_grid
(
˛ass
 
fun˘i⁄_öfo
 *
íåy
,

1643 
gpgpu_±x_sim_¨g_li°_t
 
¨gs
,

1644 
dim3
 
gridDim
,

1645 
dim3
 
blockDim
,

1646 
gpgpu_t
 *
gpu
 )

1648 
kî√l_öfo_t
 *
ªsu…
 = 
√w
 
	`kî√l_öfo_t
(
gridDim
,
blockDim
,
íåy
);

1649 
¨gcou¡
=
¨gs
.
	`size
();

1650 
¨gn
=1;

1651  
gpgpu_±x_sim_¨g_li°_t
::
ôî©‹
 
a
 = 
¨gs
.
	`begö
();á !¨gs.
	`íd
();á++ ) {

1652 
íåy
->
	`add_∑øm_d©a
(
¨gcou¡
-
¨gn
,&(*
a
));

1653 
¨gn
++;

1655 
íåy
->
	`föÆize
(
ªsu…
->
	`gë_∑øm_mem‹y
());

1656 
g_±x_kî√l_cou¡
++;

1657 
	`fÊush
(
°dout
);

1659  
ªsu…
;

1660 
	}
}

1662 c⁄° *
	gg_gpgpusim_buûd_°rög
 = "$Change: 12667 $";

1663 c⁄° *
	gg_gpgpusim_vîsi⁄_°rög
 = "3.1.0";

1665 
	$¥öt_•œsh
()

1667 
•œsh_¥öãd
=0;

1668 i‡–!
•œsh_¥öãd
 ) {

1669 
buûd
=0;

1670 
	`ssˇnf
(
g_gpgpusim_buûd_°rög
, "$Ch™ge"": %u $", &
buûd
);

1671 
	`Ârötf
(
°dout
, "\n\¿ *** GPGPU-Sim vîsi⁄ %†(buûd %uË***\n\n\n", 
g_gpgpusim_vîsi⁄_°rög
, 
buûd
 );

1672 
•œsh_¥öãd
=1;

1674 
	}
}

1676 
	g°d
::
m≠
<c⁄° *,°d::
°rög
> 
g_c⁄°_«me_lookup
;

1677 
	g°d
::
m≠
<c⁄° *,°d::
°rög
> 
g_globÆ_«me_lookup
;

1678 
	g°d
::
£t
<
°d
::
°rög
> 
g_globÆs
;

1679 
	g°d
::
£t
<
°d
::
°rög
> 
g_c⁄°™ts
;

1681 
	$gpgpu_±x_sim_ªgi°î_c⁄°_v¨übÀ
(*
ho°V¨
, c⁄° *
devi˚Name
, 
size_t
 
size
 )

1683 
	`¥ötf
("GPGPU-Sim PTXÑegi°îög c⁄°™à%†(%zu byãsËtÿ«mêm≠pög\n", 
devi˚Name
, 
size
 );

1684 
g_c⁄°_«me_lookup
[
ho°V¨
] = 
devi˚Name
;

1685 
	}
}

1687 
	$gpgpu_±x_sim_ªgi°î_globÆ_v¨übÀ
(*
ho°V¨
, c⁄° *
devi˚Name
, 
size_t
 
size
 )

1689 
	`¥ötf
("GPGPU-Sim PTXÑegi°îög globÆ %†ho°V¨Åÿ«mêm≠pög\n", 
devi˚Name
 );

1690 
g_globÆ_«me_lookup
[
ho°V¨
] = 
devi˚Name
;

1691 
	}
}

1693 
	$gpgpu_±x_sim_mem˝y_symbﬁ
(c⁄° *
ho°V¨
, c⁄° *
§c
, 
size_t
 
cou¡
, size_à
off£t
, 
to
, 
gpgpu_t
 *
gpu
 )

1695 
	`¥ötf
("GPGPU-Sim PTX: sèπög gpgpu_±x_sim_mem˝y_symbﬁ wôh ho°V¨ 0x%p\n", 
ho°V¨
);

1696 
boﬁ
 
found_sym
 = 
Ál£
;

1697 
mem‹y_•a˚_t
 
mem_ªgi⁄
 = 
undeföed_•a˚
;

1698 
°d
::
°rög
 
sym_«me
;

1700 
°d
::
m≠
<c⁄° *,°d::
°rög
>::
ôî©‹
 
c
=
g_c⁄°_«me_lookup
.
	`föd
(
ho°V¨
);

1701 i‡–
c
!=
g_c⁄°_«me_lookup
.
	`íd
() ) {

1702 
found_sym
 = 
åue
;

1703 
sym_«me
 = 
c
->
£c⁄d
;

1704 
mem_ªgi⁄
 = 
c⁄°_•a˚
;

1706 
°d
::
m≠
<c⁄° *,°d::
°rög
>::
ôî©‹
 
g
=
g_globÆ_«me_lookup
.
	`föd
(
ho°V¨
);

1707 i‡–
g
!=
g_globÆ_«me_lookup
.
	`íd
() ) {

1708 i‡–
found_sym
 ) {

1709 
	`¥ötf
("ExecutionÉrror: PTX symbol \"%s\" w/ hostVar=0x%Lx is declared both constánd global?\n",

1710 
sym_«me
.
	`c_°r
(), ()
ho°V¨
 );

1711 
	`ab‹t
();

1713 
found_sym
 = 
åue
;

1714 
sym_«me
 = 
g
->
£c⁄d
;

1715 
mem_ªgi⁄
 = 
globÆ_•a˚
;

1717 if–
g_globÆs
.
	`föd
(
ho°V¨
Ë!g_globÆs.
	`íd
() ) {

1718 
found_sym
 = 
åue
;

1719 
sym_«me
 = 
ho°V¨
;

1720 
mem_ªgi⁄
 = 
globÆ_•a˚
;

1722 if–
g_c⁄°™ts
.
	`föd
(
ho°V¨
Ë!g_c⁄°™ts.
	`íd
() ) {

1723 
found_sym
 = 
åue
;

1724 
sym_«me
 = 
ho°V¨
;

1725 
mem_ªgi⁄
 = 
c⁄°_•a˚
;

1728 i‡–!
found_sym
 ) {

1729 
	`¥ötf
("Executi⁄Éº‹: Nÿöf‹m©i⁄ f‹ PTX symbﬁ w/ ho°V¨=0x%Lx\n", ()
ho°V¨
 );

1730 
	`ab‹t
();

1731 } 
	`¥ötf
("GPGPU-Sim PTX: gpgpu_±x_sim_mem˝y_symbﬁ: Found PTX symbﬁ w/ ho°V¨=0x%Lx\n", ()
ho°V¨
 );

1732 c⁄° *
mem_«me
 = 
NULL
;

1733 
mem‹y_•a˚
 *
mem
 = 
NULL
;

1735 
°d
::
m≠
<°d::
°rög
,
symbﬁ_èbÀ
*>::
ôî©‹
 
°
 = 
g_sym_«me_to_symbﬁ_èbÀ
.
	`föd
(
sym_«me
.
	`c_°r
());

1736 
	`as£π
–
°
 !
g_sym_«me_to_symbﬁ_èbÀ
.
	`íd
() );

1737 
symbﬁ_èbÀ
 *
symèb
 = 
°
->
£c⁄d
;

1739 
symbﬁ
 *
sym
 = 
symèb
->
	`lookup
(
sym_«me
.
	`c_°r
());

1740 
	`as£π
(
sym
);

1741 
d°
 = 
sym
->
	`gë_addªss
(Ë+ 
off£t
;

1742 
mem_ªgi⁄
.
	`gë_ty≥
()) {

1743 
c⁄°_•a˚
:

1744 
mem
 = 
gpu
->
	`gë_globÆ_mem‹y
();

1745 
mem_«me
 = "global";

1747 
globÆ_•a˚
:

1748 
mem
 = 
gpu
->
	`gë_globÆ_mem‹y
();

1749 
mem_«me
 = "global";

1752 
	`ab‹t
();

1754 
	`¥ötf
("GPGPU-Sim PTX: gpgpu_ptx_sim_memcpy_symbol: copying %zu bytes %s symbol %s+%zu @0x%x ...\n",

1755 
cou¡
, (
to
?"Åÿ":"‰om"), 
sym_«me
.
	`c_°r
(), 
off£t
, 
d°
 );

1756  
n
=0;Ç < 
cou¡
;Ç++ ) {

1757 if–
to
 ) 
mem
->
	`wrôe
(
d°
+
n
,1,((*)
§c
)+n,
NULL
,NULL);

1758 
mem
->
	`ªad
(
d°
+
n
,1,((*)
§c
)+n);

1760 
	`fÊush
(
°dout
);

1761 
	}
}

1763 
	gg_±x_sim_mode
;

1765 "C" 
±x_debug
;

1767 
boﬁ
 
	gg_cuda_œunch_blockög
 = 
Ál£
;

1769 
	$ªad_sim_ívú⁄mít_v¨übÀs
()

1771 
±x_debug
 = 0;

1772 
g_debug_executi⁄
 = 0;

1773 
g_öãø˘ive_debuggî_íabÀd
 = 
Ál£
;

1775 *
mode
 = 
	`gëív
("PTX_SIM_MODE_FUNC");

1776 i‡–
mode
 )

1777 
	`ssˇnf
(
mode
,"%u", &
g_±x_sim_mode
);

1778 
	`¥ötf
("GPGPU-Sim PTX: simuœti⁄ modê%d (ˇ¿ch™gêwôh PTX_SIM_MODE_FUNCÉnvú⁄míàv¨übÀ:\n", 
g_±x_sim_mode
);

1779 
	`¥ötf
(" 1=functional simulation only, 0=detailedÖerformance simulator)\n");

1780 *
dbg_öãr
 = 
	`gëív
("GPGPUSIM_DEBUG");

1781 i‡–
dbg_öãr
 && 
	`°æí
(dbg_inter) ) {

1782 
	`¥ötf
("GPGPU-Sim PTX:Énabling interactive debugger\n");

1783 
	`fÊush
(
°dout
);

1784 
g_öãø˘ive_debuggî_íabÀd
 = 
åue
;

1786 *
dbg_Àvñ
 = 
	`gëív
("PTX_SIM_DEBUG");

1787 i‡–
dbg_Àvñ
 && 
	`°æí
(dbg_level) ) {

1788 
	`¥ötf
("GPGPU-Sim PTX: sëtög debugÜevñÅÿ%s\n", 
dbg_Àvñ
 );

1789 
	`fÊush
(
°dout
);

1790 
	`ssˇnf
(
dbg_Àvñ
,"%d", &
g_debug_executi⁄
);

1792 *
dbg_thªad
 = 
	`gëív
("PTX_SIM_DEBUG_THREAD_UID");

1793 i‡–
dbg_thªad
 && 
	`°æí
(dbg_thread) ) {

1794 
	`¥ötf
("GPGPU-Sim PTX:Örötög debug inf‹m©i⁄ f‹Åhªad uid %s\n", 
dbg_thªad
 );

1795 
	`fÊush
(
°dout
);

1796 
	`ssˇnf
(
dbg_thªad
,"%d", &
g_debug_thªad_uid
);

1798 *
dbg_pc
 = 
	`gëív
("PTX_SIM_DEBUG_PC");

1799 i‡–
dbg_pc
 && 
	`°æí
(dbg_pc) ) {

1800 
	`¥ötf
("GPGPU-Sim PTX:Örötög debug inf‹m©i⁄ f‹ in°ru˘i⁄ wôh PC = %s\n", 
dbg_pc
 );

1801 
	`fÊush
(
°dout
);

1802 
	`ssˇnf
(
dbg_pc
,"%d", &
g_debug_pc
);

1805 #i‡
CUDART_VERSION
 > 1010

1806 
g_ovîride_embedded_±x
 = 
Ál£
;

1807 *
u£fûe
 = 
	`gëív
("PTX_SIM_USE_PTX_FILE");

1808 i‡(
u£fûe
 && 
	`°æí
(usefile)) {

1809 
	`¥ötf
("GPGPU-Sim PTX: overridingÉmbeddedÖtx withÖtx file (PTX_SIM_USE_PTX_FILE is set)\n");

1810 
	`fÊush
(
°dout
);

1811 
g_ovîride_embedded_±x
 = 
åue
;

1813 *
blockög
 = 
	`gëív
("CUDA_LAUNCH_BLOCKING");

1814 if–
blockög
 && !
	`°rcmp
(blocking,"1") ) {

1815 
g_cuda_œunch_blockög
 = 
åue
;

1818 
g_cuda_œunch_blockög
 = 
åue
;

1819 
g_ovîride_embedded_±x
 = 
åue
;

1822 i‡–
g_debug_executi⁄
 >= 40 ) {

1823 
±x_debug
 = 1;

1825 
	}
}

1827 
±x_˘a_öfo
 *
	gg_func_˘a_öfo
 = 
NULL
;

1829 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

1835 
	sKAIN_SM_run_CTA_°r


1837 
kî√l_öfo_t
 *
	mkî√l
;

1838 
	mID
;

1840 
±hªad_muãx_t
 
	gsh¨ed_mem‹y_lookup_muãx
;

1841 
±hªad_muãx_t
 
	gkaö_fuck
;

1842 
±hªad_muãx_t
 
	gkaö_fuck_fuck
;

1844 ˛as†
	cKAIN_w¨p_ö°


1846 
	mpublic
:

1847 
w¨p_ö°_t
 *
ö°
;

1848 
simt_mask_t
 *
	mthªad_d⁄e
;

1849 
addr_ve˘‹_t
 *
	m√xt_pc
;

1850 
	mªc⁄vîgí˚_pc
;

1851 
	$KAIN_w¨p_ö°
()

1853 
ö°
 = 
√w
 
	`w¨p_ö°_t
(1);

1854 
thªad_d⁄e

√w
 
simt_mask_t
;

1855 
√xt_pc
 = 
√w
 
addr_ve˘‹_t
;

1856 
√xt_pc
->
	`ªsize
(32);

1858 ~
	$KAIN_w¨p_ö°
()

1860 
	`¥ötf
("before inst\n");

1861 
dñëe
 
ö°
;

1862 
	`¥ötf
("beforeÅhread_done\n");

1863 
dñëe
 
thªad_d⁄e
;

1864 
	`¥ötf
("beforeÇetx_pc\n");

1865 
dñëe
 
√xt_pc
;

1866 
	`¥ötf
("afterÇetx_pc\n");

1867 
	}
}

1870 
˛ass
 
KAIN_w¨p_ö°
 **
block_w¨pid
[299999][100];

1871 
	gMem‹y_Æloˇã_‰om_OS
;

1874 
KAIN_SM_run_CTA_°r
 *
	gthªad_tmp
;

1875 
Pro˚ss_id
;

1876 *
	$KAIN_SM_run_CTA
(*
thªad_öfo
)

1879 
gpgpu_sim
 *
g_the_gpu
;

1880 
KAIN_SM_run_CTA_°r
 *
tmp
 = (KAIN_SM_run_CTA_°∏*)
thªad_öfo
;

1881 
ID
 = 
tmp
->ID;

1883 
	`¥ötf
("ThªadID:%d cª©ed\n", 
ID
);

1884 
	`fÊush
(
°dout
);

1900 
kî√l_öfo_t
 *
kî√l
 = 
thªad_tmp
[
ID
].kernel;

1901 
thªad_tmp
[
ID
].
kî√l
 = 0;

1902 
Check_agaö
 = 0;

1903 !
kî√l
->
	`no_m‹e_˘as_to_run_kaö
(
ID
,&
Check_agaö
))

1905 if(
Check_agaö
 == 0)

1907 
blockID

kî√l
->
	`num_blocks_runID_KAIN
(
ID
);

1908 
nw¨ps
;

1909 if(
kî√l
->
	`thªads_≥r_˘a
()%32==0 )

1910 
nw¨ps
 = 
kî√l
->
	`thªads_≥r_˘a
()/32;

1912 
nw¨ps
 = 
kî√l
->
	`thªads_≥r_˘a
()/32 + 1;

1916 
	`¥ötf
("KAIN,Pro˚s†%d, ThªadID:%d,Ñu¿block ID i†%d\n",
Pro˚ss_id
,
ID
,
kî√l
->
	`num_blocks_runID_KAIN
(ID));

1917 
	`fÊush
(
°dout
);

1918 
fun˘i⁄ÆC‹eSim
 
	`˘a
(
kî√l
, 
g_the_gpu
, g_the_gpu->
	`gëShadîC‹eC⁄fig
()->
w¨p_size
,
ID
,
blockID
);

1919 
˘a
.
	`execuã
();

1923 
blockID

kî√l
->
	`num_blocks_runID_KAIN
(
ID
);

1926 
	`¶ìp
(1);

1928 
Check_agaö
 = 0;

1930 if(
Pro˚ss_id
 != 0)

1932 
	`±hªad_exô
(
NULL
);

1934 
thªad_tmp
[
ID
].
kî√l
 == 0)

1935 
	`¶ìp
(1);

1937 
	}
}

1938 
	$gpgpu_cuda_±x_sim_maö_func
–
kî√l_öfo_t
 *
kî√l
, 
boﬁ
 
›íCL
 )

1943 
gpgpu_sim
 *
g_the_gpu
;

1944 
cou¡
=0;

1957 
öô_cuda_thªad
 = 0;

1958 
±hªad_t
 
thªad_id
[
Thªad_Num
];

1959 if(
öô_cuda_thªad
 =0 || 
Pro˚ss_id
 != 0)

1962 
öô_cuda_thªad
 = 1;

1964 
±hªad_©å_t
 
©å_P
;

1965 
sched_∑øm
 
∑øm_P
;

1966 
	`±hªad_©å_öô
(&
©å_P
);

1967 
	`±hªad_©å_£töhîôsched
 (&
©å_P
,
PTHREAD_EXPLICIT_SCHED
);

1968 
	`±hªad_©å_£tschedpﬁicy
 (&
©å_P
, 
SCHED_FIFO
);

1969 
∑øm_P
.
sched_¥i‹ôy
 = 1;

1970 
	`±hªad_©å_£tsched∑øm
 (&
©å_P
, &
∑øm_P
);

1973 if(
öô_cuda_thªad
 == 0)

1976 
	`±hªad_muãx_öô
(&
sh¨ed_mem‹y_lookup_muãx
,
NULL
);

1977 
	`±hªad_muãx_öô
(&
kaö_fuck
,
NULL
);

1978 
	`±hªad_muãx_öô
(&
kaö_fuck_fuck
,
NULL
);

1982 
cou¡
 = 0; cou¡ < 
Thªad_Num
; count++)

1984 
thªad_tmp
[
cou¡
].
kî√l
 = kernel;

1985 
thªad_tmp
[
cou¡
].
ID
 = count;

2005 
ªt
;

2006 
ªt
 = 
	`±hªad_¸óã
(
thªad_id
+
cou¡
,&
©å_P
,
KAIN_SM_run_CTA
,
thªad_tmp
+count);

2007 if(
ªt
 != 0)

2009 
	`¥ötf
("îº‹Ñë i†%d\n",
ªt
);

2010 
	`as£π
(0);

2014 
	`¥ötf
("¥o˚ss_id %d,suc˚s†¸óãÖthªad %d\n",
Pro˚ss_id
,
cou¡
);

2015 
	`fÊush
(
°dout
);

2022 
i
 = 0; i < 
Thªad_Num
; i++)

2024 
thªad_tmp
[
i
].
kî√l
 = kernel;

2028 
	`¥ötf
("¥o˚ss_id %d, comêtÿwaôÅhêfun˘i⁄Æ simuœti⁄ÅhªadÉnd\n",
Pro˚ss_id
);

2029 if(
Pro˚ss_id
 != 0)

2030 
cou¡
 = 0; cou¡ < 
Thªad_Num
; count++)

2032 
	`±hªad_joö
(*(
thªad_id
+
cou¡
),
NULL
);

2035 
	`¥ötf
("come hereeeeeeeeeeeee\n");

2039 
°ªam_m™agî
 *
g_°ªam_m™agî
;

2074 
	}
}

2076 
	gfun˘i⁄ÆC‹eSim
::
	$öôülizeCTA
()

2078 
˘aLiveThªads
=0;

2079 
m_w¨psCou¡

	`˚û
(()
m_kî√l
->
	`thªads_≥r_˘a
()/
m_maxW¨pSize
);

2087 
	`öôûizeSIMTSèck
(
m_w¨psCou¡
,
m_maxW¨pSize
);

2088 
m_w¨pAtB¨rõr
 = 
√w
 
boﬁ
 [
m_w¨psCou¡
];

2089 
m_liveThªadCou¡
 = 
√w
 [
m_w¨psCou¡
];

2090 
m_thªad
 = 
√w
 
±x_thªad_öfo
*[
m_w¨psCou¡
*
m_maxW¨pSize
];

2099 
i
=0; i< 
m_w¨psCou¡
; i++){

2100 
m_w¨pAtB¨rõr
[
i
]=
Ál£
;

2101 
m_liveThªadCou¡
[
i
]=0;

2103 
i
=0; i< 
m_w¨psCou¡
*
m_maxW¨pSize
;i++)

2104 
m_thªad
[
i
]=
NULL
;

2114 
i
=0; i<
m_kî√l
->
	`thªads_≥r_˘a
();i++) {

2117 
	`±x_sim_öô_thªad
(*
m_kî√l
,&
m_thªad
[
i
],
BlockID_KAIN
,i,m_kî√l->
	`thªads_≥r_˘a
()-i,m_kî√l->thªads_≥r_˘a(),
NULL
,0,i/
m_maxW¨pSize
,(
gpgpu_t
*)
m_gpu
, 
åue
,
	`Cuºít_ThªadId_KAIN
());

2118 
	`as£π
(
m_thªad
[
i
]!=
NULL
 && !m_thªad[i]->
	`is_d⁄e
());

2119 
m_thªad
[
i
]->
	`£t_ThªadID_kaö
(
	`Cuºít_ThªadId_KAIN
());

2120 
˘aLiveThªads
++;

2123 
k
=0;k<
m_w¨psCou¡
;k++)

2124 
	`¸óãW¨p
(
k
);

2125 
	}
}

2127 
	gfun˘i⁄ÆC‹eSim
::
	$¸óãW¨p
(
w¨pId
)

2129 
simt_mask_t
 
öôülMask
;

2130 
liveThªadsCou¡
=0;

2131 
öôülMask
.
	`£t
();

2132 
i
=
w¨pId
*
m_maxW¨pSize
; i<warpId*m_maxWarpSize+m_maxWarpSize;i++){

2133 if(
m_thªad
[
i
]==
NULL
Ë
öôülMask
.
	`ª£t
(i-
w¨pId
*
m_maxW¨pSize
);

2134 
liveThªadsCou¡
++;

2137 
	`as£π
(
m_thªad
[
w¨pId
*
m_maxW¨pSize
]!=
NULL
);

2138 
m_simt_°ack
[
w¨pId
]->
	`œunch
(
m_thªad
[w¨pId*
m_maxW¨pSize
]->
	`gë_pc
(),
öôülMask
);

2139 
m_liveThªadCou¡
[
w¨pId
]
liveThªadsCou¡
;

2140 
	}
}

2142 vﬁ©ûê
	gCou¡_Block_P
[
P_C_size
];

2143 vﬁ©ûê
Cou¡_Block_C
[
P_C_size
];

2153 
	gfun˘i⁄ÆC‹eSim
::
	$execuã
()

2155 
	`±hªad_muãx_lock
(&
kaö_fuck_fuck
);

2158 
	`öôülizeCTA
();

2161 
	`±hªad_muãx_u∆ock
(&
kaö_fuck_fuck
);

2163 
tid
=
m_maxW¨pSize
*0+0;

2164 
BlockID
;

2165 
W¨pID
;

2166 
m_thªad
[
tid
]->
	`KAIN_gë_˘a_num
(
m_maxW¨pSize
,0,&
BlockID
,&
W¨pID
);

2170 
åue
){

2171 
boﬁ
 
someO√Live

Ál£
;

2172 
boﬁ
 
ÆlAtB¨rõr
 = 
åue
;

2174 
boﬁ
 
KAIN_C_P_lock
 = 
åue
;

2175 
i
=0;i<
m_w¨psCou¡
;i++){

2178 
	`execuãW¨p
(
i
,
ÆlAtB¨rõr
,
someO√Live
);

2181 if(!
someO√Live
) ;

2182 if(
ÆlAtB¨rõr
){

2183 
i
=0;i<
m_w¨psCou¡
;i++)

2184 
m_w¨pAtB¨rõr
[
i
]=
Ál£
;

2208 
	}
}

2209 
	gPuª_simuœti⁄_blockID
;

2210 
	gfun˘i⁄ÆC‹eSim
::
	$execuãW¨p
(
i
, 
boﬁ
 &
ÆlAtB¨rõr
, boﬁ & 
someO√Live
)

2212 if(!
m_w¨pAtB¨rõr
[
i
] && 
m_liveThªadCou¡
[i]!=0){

2213 
w¨p_ö°_t
 
ö°
 =
	`gëExecuãW¨p
(
i
);

2215 
tid
=
m_maxW¨pSize
*
i
+0;

2216 
BlockID
;

2217 
W¨pID
;

2218 
m_thªad
[
tid
]->
	`KAIN_gë_˘a_num
(
m_maxW¨pSize
,
ö°
.
pc
,&
BlockID
,&
W¨pID
);

2219 
ö°_ödex
 = 
ö°
.
pc
 / 8;

2221 
w¨p_ID_Æl
 = 
BlockID
 * 
KAIN_W¨p_cou¡s
 + 
W¨pID
;

2223 if(
BlockID
 < 
Puª_simuœti⁄_blockID
){

2226 if(
Cou¡_Block_P
[
w¨p_ID_Æl
] - 
Cou¡_Block_C
[w¨p_ID_Æl] <2*
KAIN_ö°ru˘i⁄_buf„r
-1)

2230 
	`¶ìp
(1);

2235 
ödex_√w
 = 
Cou¡_Block_P
[
w¨p_ID_Æl
];

2237 
ödex_now
 = 
ödex_√w
%(2*
KAIN_ö°ru˘i⁄_buf„r
);

2238 
ödex_now
 = index_now / 
KAIN_ö°ru˘i⁄_buf„r
;

2239 
ödex_√w
 = index_√w %(
KAIN_ö°ru˘i⁄_buf„r
);

2308 
˛ass
 
KAIN_w¨p_ö°
 &
this_ö°
 = 
block_w¨pid
[
BlockID
][
W¨pID
][
ödex_now
][
ödex_√w
];

2318 
	`execuã_w¨p_ö°_t
(
ö°
,
m_maxW¨pSize
,
i
);

2321 if(
ö°
.
	`ißtomic
()Ëö°.
	`do_©omic
(
åue
);

2322 if(
ö°
.
›
==
BARRIER_OP
 || in°.›==
MEMORY_BARRIER_OP
 ) 
m_w¨pAtB¨rõr
[
i
]=
åue
;

2327 
w¨pId
 = 
i
;

2328 
w¨pSize
 = 
m_maxW¨pSize
;

2331 if(
BlockID
 < 
Puª_simuœti⁄_blockID
){

2332 (
this_ö°
.
ö°
)->
	`w¨p_ö°_c›y
(inst);

2336 
simt_mask_t
 
thªad_d⁄e
;

2337 
thªad_d⁄e
.
	`ª£t
();

2338 
addr_ve˘‹_t
 
	`√xt_pc
(32,0);

2339 
wtid
 = 
w¨pId
 * 
w¨pSize
;

2340 
i
 = 0; i < 
w¨pSize
; i++) {

2341 if–
	`±x_thªad_d⁄e
(
wtid
+
i
) ) {

2342 
thªad_d⁄e
.
	`£t
(
i
);

2344 
√xt_pc
.
	`©
(
i
Ë((
addªss_ty≥
)-1 );

2346 if–
ö°
.
ªc⁄vîgí˚_pc
 =
RECONVERGE_RETURN_PC
 )

2347 
ö°
.
ªc⁄vîgí˚_pc
 = 
	`gë_ªtu∫_pc
(
m_thªad
[
wtid
+
i
]);

2348 
√xt_pc
.
	`©
(
i
Ë(
m_thªad
[
wtid
+i]->
	`gë_pc
() );

2353 if(
BlockID
 < 
Puª_simuœti⁄_blockID
){

2354 *(
this_ö°
.
thªad_d⁄e
)=(thread_done);

2355 (
this_ö°
.
√xt_pc
)->
	`assign
“ext_pc.
	`begö
(),√xt_pc.
	`íd
());

2357 (
this_ö°
.
ªc⁄vîgí˚_pc
)=
ö°
.reconvergence_pc;

2360 
m_simt_°ack
[
w¨pId
]->
	`upd©e
(
thªad_d⁄e
,
√xt_pc
,
ö°
.
ªc⁄vîgí˚_pc
);

2362 if(
BlockID
 < 
Puª_simuœti⁄_blockID
){

2363 
Cou¡_Block_P
[
w¨p_ID_Æl
]++;

2389 if(
m_liveThªadCou¡
[
i
]>0Ë
someO√Live
=
åue
;

2390 if(!
m_w¨pAtB¨rõr
[
i
]&& 
m_liveThªadCou¡
[i]>0Ë
ÆlAtB¨rõr
 = 
Ál£
;

2391 
	}
}

2393 
	$å™¶©e_pc_to_±xlöío
(
pc
)

2397 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

2398 
±x_löe_numbî
 = 
pIn¢
->
	`sour˚_löe
();

2400  
±x_löe_numbî
;

2401 
	}
}

2405 
	gg_±xöfo_îr‹_dëe˘ed
;

2407 *
	gg_±xöfo_k«me
 = 
NULL
;

2408 
gpgpu_±x_sim_kî√l_öfo
 
	gg_±xöfo_köfo
;

2410 c⁄° *
	$gë_±xöfo_k«me
()

2412  
g_±xöfo_k«me
;

2413 
	}
}

2415 
	$¥öt_±xöfo
()

2417 
	`¥ötf
 ("GPGPU-Sim PTX: Kernel \'%s\' :Ñegs=%u,Ümem=%u, smem=%u, cmem=%u\n",

2418 
	`gë_±xöfo_k«me
(),

2419 
g_±xöfo_köfo
.
ªgs
,

2420 
g_±xöfo_köfo
.
lmem
,

2421 
g_±xöfo_köfo
.
smem
,

2422 
g_±xöfo_köfo
.
cmem
 );

2423 
	}
}

2426 
gpgpu_±x_sim_kî√l_öfo
 
	$gë_±xöfo_köfo
()

2428  
g_±xöfo_köfo
;

2429 
	}
}

2431 "C" 
	$±xöfo_fun˘i⁄
(c⁄° *
‚ame
 )

2433 
	`˛ór_±xöfo
();

2434 
g_±xöfo_k«me
 = 
	`°rdup
(
‚ame
);

2435 
	}
}

2437 "C" 
	$±xöfo_ªgs
–
ƒegs
 )

2439 
g_±xöfo_köfo
.
ªgs
=
ƒegs
;

2440 
	}
}

2442 "C" 
	$±xöfo_lmem
–
de˛¨ed
, 
sy°em
 )

2444 
g_±xöfo_köfo
.
lmem
=
de˛¨ed
+
sy°em
;

2445 
	}
}

2447 "C" 
	$±xöfo_smem
–
de˛¨ed
, 
sy°em
 )

2449 
g_±xöfo_köfo
.
smem
=
de˛¨ed
+
sy°em
;

2450 
	}
}

2452 "C" 
	$±xöfo_cmem
–
nbyãs
, 
b™k
 )

2454 
g_±xöfo_köfo
.
cmem
+=
nbyãs
;

2455 
	}
}

2457 
	$˛ór_±xöfo
()

2459 
	`‰ì
(
g_±xöfo_k«me
);

2460 
g_±xöfo_k«me
=
NULL
;

2461 
g_±xöfo_köfo
.
ªgs
=0;

2462 
g_±xöfo_köfo
.
lmem
=0;

2463 
g_±xöfo_köfo
.
smem
=0;

2464 
g_±xöfo_köfo
.
cmem
=0;

2465 
g_±xöfo_köfo
.
±x_vîsi⁄
=0;

2466 
g_±xöfo_köfo
.
sm_èrgë
=0;

2467 
	}
}

2470 
±xöfo_›í˛_addöfo
–
°d
::
m≠
<°d::
°rög
,
fun˘i⁄_öfo
*> &
kî√ls
 )

2472 if–!
°rcmp
("__cuda_dummy_íåy__",
g_±xöfo_k«me
) ) {

2474 
˛ór_±xöfo
();

2477 
°d
::
m≠
<°d::
°rög
,
fun˘i⁄_öfo
*>::
ôî©‹
 
k
=
kî√ls
.
föd
(
g_±xöfo_k«me
);

2478 if–
k
==
kî√ls
.
íd
() ) {

2479 
¥ötf
 ("GPGPU-Sim PTX: ERROR ** im∂emíèti⁄ f‹ '%s'ÇŸ found.\n", 
g_±xöfo_k«me
 );

2480 
ab‹t
();

2482 
¥ötf
 ("GPGPU-Sim PTX: Kernel \'%s\' :Ñegs=%u,Ümem=%u, smem=%u, cmem=%u\n",

2483 
g_±xöfo_k«me
,

2484 
g_±xöfo_köfo
.
ªgs
,

2485 
g_±xöfo_köfo
.
lmem
,

2486 
g_±xöfo_köfo
.
smem
,

2487 
g_±xöfo_köfo
.
cmem
 );

2488 
fun˘i⁄_öfo
 *
föfo
 = 
k
->
£c⁄d
;

2489 
as£π
(
föfo
!=
NULL
);

2490 
föfo
->
£t_kî√l_öfo
–
g_±xöfo_köfo
 );

2492 
˛ór_±xöfo
();

2495 
	sªc_±s
 {

2496 
gpgpu_ªc⁄_t
 *
s_kî√l_ªc⁄_poöts
;

2497 
s_num_ªc⁄
;

2500 
	g°d
::
m≠
<
fun˘i⁄_öfo
*,
	gªc_±s
> 
	gg_Ωts
;

2502 
ªc_±s
 
	$föd_ªc⁄vîgí˚_poöts
–
fun˘i⁄_öfo
 *
föfo
 )

2504 
ªc_±s
 
tmp
;

2505 
°d
::
m≠
<
fun˘i⁄_öfo
*,
ªc_±s
>::
ôî©‹
 
r
=
g_Ωts
.
	`föd
(
föfo
);

2507 if–
r
==
g_Ωts
.
	`íd
() ) {

2508 
num_ªc⁄
 = 
föfo
->
	`gë_num_ªc⁄vîgí˚_∑ús
();

2510 
gpgpu_ªc⁄_t
 *
kî√l_ªc⁄_poöts
 = (gpgpu_ªc⁄_t*Ë
	`ˇŒoc
(
num_ªc⁄
, (gpgpu_recon_t));

2511 
föfo
->
	`gë_ªc⁄vîgí˚_∑ús
(
kî√l_ªc⁄_poöts
);

2512 
	`¥ötf
("GPGPU-Sim PTX: Rec⁄vîgí˚ Paú†f‹ %s\n", 
föfo
->
	`gë_«me
().
	`c_°r
() );

2513 
i
=0;i<
num_ªc⁄
;i++)

2514 
	`¥ötf
("GPGPU-Sim PTX: bønchÖ¯%d\â¨gëÖ¯%d\n", 
kî√l_ªc⁄_poöts
[
i
].
sour˚_pc
, kî√l_ªc⁄_poöts[i].
èrgë_pc
);

2515 
tmp
.
s_kî√l_ªc⁄_poöts
 = 
kî√l_ªc⁄_poöts
;

2516 
tmp
.
s_num_ªc⁄
 = 
num_ªc⁄
;

2517 
g_Ωts
[
föfo
] = 
tmp
;

2519 
tmp
 = 
r
->
£c⁄d
;

2521  
tmp
;

2522 
	}
}

2524 
addªss_ty≥
 
	$gë_ªtu∫_pc
–*
thd
 )

2527 
±x_thªad_öfo
 *
the_thªad
 = (±x_thªad_öfo*)
thd
;

2528 
	`as£π
–
the_thªad
 !
NULL
 );

2529  
the_thªad
->
	`gë_ªtu∫_PC
();

2530 
	}
}

2532 
addªss_ty≥
 
	$gë_c⁄vîge_poöt
–
addªss_ty≥
 
pc
 )

2538 
°d
::
m≠
<,
fun˘i⁄_öfo
*>::
ôî©‹
 
f
=
g_pc_to_föfo
.
	`föd
(
pc
);

2539 
	`as£π
–
f
 !
g_pc_to_föfo
.
	`íd
() );

2540 
fun˘i⁄_öfo
 *
föfo
 = 
f
->
£c⁄d
;

2541 
ªc_±s
 
tmp
 = 
	`föd_ªc⁄vîgí˚_poöts
(
föfo
);

2543 
i
=0;

2544 ; 
i
 < 
tmp
.
s_num_ªc⁄
; ++i) {

2545 i‡(
tmp
.
s_kî√l_ªc⁄_poöts
[
i
].
sour˚_pc
 =
pc
) {

2546 if–
tmp
.
s_kî√l_ªc⁄_poöts
[
i
].
èrgë_pc
 == () -2 ) {

2547  
RECONVERGE_RETURN_PC
;

2549  
tmp
.
s_kî√l_ªc⁄_poöts
[
i
].
èrgë_pc
;

2553  
NO_BRANCH_DIVERGENCE
;

2554 
	}
}

2556 
	gfun˘i⁄ÆC‹eSim
::
	$w¨p_exô
–
w¨p_id
 )

2558 
i
=0;i<
m_w¨psCou¡
*
m_maxW¨pSize
;i++){

2559 if(
m_thªad
[
i
]!=
NULL
){

2560 
m_thªad
[
i
]->
m_˘a_öfo
->
	`ªgi°î_dñëed_thªad
(m_thread[i]);

2561 
dñëe
 
m_thªad
[
i
];

2564 
	}
}

	@src/cuda-sim/cuda-sim.h

28 #i‚de‡
CUDASIM_H_INCLUDED


29 
	#CUDASIM_H_INCLUDED


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

32 
	~"../gpgpu-sim/shadî.h
"

33 
	~<°dlib.h
>

34 
	~<m≠
>

35 
	~<°rög
>

36 
	~"±x_sim.h
"

38 
˛ass
 
	gmem‹y_•a˚
;

39 
˛ass
 
	gfun˘i⁄_öfo
;

40 
˛ass
 
	gsymbﬁ_èbÀ
;

42 c⁄° *
g_gpgpusim_vîsi⁄_°rög
;

43 
g_±x_sim_mode
;

44 
g_debug_executi⁄
;

45 
g_debug_thªad_uid
;

46 ** 
g_ö°_˛assifiˇti⁄_°©
;

47 ** 
g_ö°_›_˛assifiˇti⁄_°©
;

48 
g_±x_kî√l_cou¡
;

50 
±x_›cocde_œãncy_›ti⁄s
 (
›ti⁄_∑r£r_t
 
›p
);

51 
˛ass
 
kî√l_öfo_t
 *
gpgpu_›í˛_±x_sim_öô_grid
(˛as†
fun˘i⁄_öfo
 *
íåy
,

52 
gpgpu_±x_sim_¨g_li°_t
 
¨gs
,

53 
dim3
 
gridDim
,

54 
dim3
 
blockDim
,

55 
˛ass
 
gpgpu_t
 *
gpu
 );

56 
gpgpu_cuda_±x_sim_maö_func
–
kî√l_öfo_t
 *
kî√l
, 
boﬁ
 
›íCL
 = 
Ál£
 );

57 *
KAIN_SM_run_CTA
(*
thªad_tmp
);

58 
¥öt_•œsh
();

59 
gpgpu_±x_sim_ªgi°î_c⁄°_v¨übÀ
(*, c⁄° *
devi˚Name
, 
size_t
 
size
 );

60 
gpgpu_±x_sim_ªgi°î_globÆ_v¨übÀ
(*
ho°V¨
, c⁄° *
devi˚Name
, 
size_t
 
size
 );

61 
gpgpu_±x_sim_mem˝y_symbﬁ
(c⁄° *
ho°V¨
, c⁄° *
§c
, 
size_t
 
cou¡
, size_à
off£t
, 
to
, 
gpgpu_t
 *
gpu
 );

63 
ªad_sim_ívú⁄mít_v¨übÀs
();

64 
±xöfo_›í˛_addöfo
–
°d
::
m≠
<°d::
°rög
,
fun˘i⁄_öfo
*> &
kî√ls
 );

65 
±x_sim_öô_thªad
–
kî√l_öfo_t
 &
kî√l
,

66 
˛ass
 
±x_thªad_öfo
** 
thªad_öfo
,

67 
sid
,

68 
tid
,

69 
thªads_À·
,

70 
num_thªads
,

71 
˛ass
 
c‹e_t
 *
c‹e
,

72 
hw_˘a_id
,

73 
hw_w¨p_id
,

74 
gpgpu_t
 *
gpu
,

75 
boﬁ
 
fun˘i⁄ÆSimuœti⁄Mode
 = 
Ál£
,

76 
Thªad_ID
=
Thªad_Num
-1);

77 
±x_sim_öô_thªad1
–
kî√l_öfo_t
 &
kî√l
,

78 
˛ass
 
±x_thªad_öfo
** 
thªad_öfo
,

79 
sid
,

80 
tid
,

81 
thªads_À·
,

82 
num_thªads
,

83 
˛ass
 
c‹e_t
 *
c‹e
,

84 
hw_˘a_id
,

85 
hw_w¨p_id
,

86 
gpgpu_t
 *
gpu
,

87 
CTA≥rShadî
,

88 
boﬁ
 
fun˘i⁄ÆSimuœti⁄Mode
 = 
Ál£
);

90 c⁄° 
w¨p_ö°_t
 *
±x_„tch_ö°
–
addªss_ty≥
 
pc
 );

91 c⁄° 
gpgpu_±x_sim_kî√l_öfo
* 
±x_sim_kî√l_öfo
(c⁄° 
˛ass
 
fun˘i⁄_öfo
 *
kî√l
);

92 
±x_¥öt_ö¢
–
addªss_ty≥
 
pc
, 
FILE
 *
Â
 );

93 
£t_∑øm_gpgpu_num_shadîs
(
num_shadîs
);

99 ˛as†
	cfun˘i⁄ÆC‹eSim
: 
public
 
c‹e_t


101 
public
:

102 
	$fun˘i⁄ÆC‹eSim
(
kî√l_öfo_t
 * 
kî√l
, 
gpgpu_sim
 *
g
, 
maxw¨pSize
,
ThªadID_KAIN
,
BlockID
){

103 
this
->
m_kî√l
=
kî√l
;

104 
m_gpu
=
g
;

105 
m_maxW¨pSize
 = 
maxw¨pSize
;

106 
ThªadId_KAIN
 = 
ThªadID_KAIN
;

107 
BlockID_KAIN
=
BlockID
;

109 ~
	$fun˘i⁄ÆC‹eSim
(){

111 
	`w¨p_exô
(0);

112 
dñëe
 
m_liveThªadCou¡
;

113 
dñëe
 
m_w¨pAtB¨rõr
;

114 
	}
}

116 
execuã
();

117 
	$Cuºít_ThªadId_KAIN
()

119  
ThªadId_KAIN
;

120 
	}
}

121 
vútuÆ
 
w¨p_exô
–
w¨p_id
 );

122 
vútuÆ
 
boﬁ
 
	$w¨p_waôög_©_b¨rõr
–
w¨p_id
 ) const

124  (
m_w¨pAtB¨rõr
[
w¨p_id
] || !(
m_liveThªadCou¡
[warp_id]>0));

125 
	}
}

127 
	g¥iv©e
:

128 
execuãW¨p
(, 
boﬁ
 &, bool &);

130 
öôülizeCTA
();

131 
vútuÆ
 
	$checkExecuti⁄SètusAndUpd©e
(
w¨p_ö°_t
 &
ö°
, 
t
, 
tid
)

133 if(
m_thªad
[
tid
]==
NULL
 || m_thªad[tid]->
	`is_d⁄e
()){

134 
m_liveThªadCou¡
[
tid
/
m_maxW¨pSize
]--;

136 
	}
}

139 
¸óãW¨p
(
w¨pId
);

141 
	gm_maxW¨pSize
;

142 
	gThªadId_KAIN
;

143 
	gm_w¨psCou¡
;

145 * 
	gm_liveThªadCou¡
;

146 
boﬁ
* 
	gm_w¨pAtB¨rõr
;

147 
	gBlockID_KAIN
;

150 
	#RECONVERGE_RETURN_PC
 ((
addªss_ty≥
)-2)

	)

151 
	#NO_BRANCH_DIVERGENCE
 ((
addªss_ty≥
)-1)

	)

152 
addªss_ty≥
 
gë_ªtu∫_pc
–*
thd
 );

153 c⁄° *
gë_±xöfo_k«me
();

154 
¥öt_±xöfo
();

155 
˛ór_±xöfo
();

156 
gpgpu_±x_sim_kî√l_öfo
 
gë_±xöfo_köfo
();

	@src/cuda-sim/cuda_device_printf.cc

28 
	~"cuda_devi˚_¥ötf.h
"

29 
	~"±x_ú.h
"

31 
decode_•a˚
–
mem‹y_•a˚_t
 &
•a˚
, 
±x_thªad_öfo
 *
thªad
, c⁄° 
›î™d_öfo
 &
›
, 
mem‹y_•a˚
 *&
mem
, 
addr_t
 &
addr
);

33 
	$my_cuda_¥ötf
(c⁄° *
fmt°r
,c⁄° *
¨g_li°
)

35 
FILE
 *
Â
 = 
°dout
;

36 
i
=0,
j
=0;

37 
¨g_off£t
=0;

38 
buf
[64];

39 
boﬁ
 
ö_fmt
=
Ál£
;

40  
fmt°r
[
i
] ) {

41 
c
 = 
fmt°r
[
i
++];

42 if–!
ö_fmt
 ) {

43 if–
c
 != '%' ) {

44 
	`Ârötf
(
Â
,"%c",
c
);

46 
ö_fmt
=
åue
;

47 
buf
[0] = 
c
;

48 
j
=1;

51 if(!–
c
 == 'u' || c == 'f' || c == 'd' )) {

52 
	`¥ötf
("GPGPU-Sim PTX: ERROR **ÖrintfÖarsing support isÜimitedÅo %%u, %%f, %%dátÖresent");

53 
	`ab‹t
();

55 
buf
[
j
] = 
c
;

56 
buf
[
j
+1] = 0;

57 * 
±r
 = (*)&
¨g_li°
[
¨g_off£t
];

59 if–
c
 == 'u' || c == 'd' ) {

60 
	`Ârötf
(
Â
,
buf
,*((*)
±r
));

61 } if–
c
 == 'f' ) {

62 
tmp
 = *((*)
±r
);

63 
	`Ârötf
(
Â
,
buf
,
tmp
);

65 
¨g_off£t
++;

66 
ö_fmt
=
Ál£
;

69 
	}
}

71 
	$gpgpusim_cuda_v¥ötf
(c⁄° 
±x_ö°ru˘i⁄
 * 
pI
, 
±x_thªad_öfo
 * 
thªad
, c⁄° 
fun˘i⁄_öfo
 * 
èrgë_func
 )

73 *
fmt°r
 = 
NULL
;

74 *
¨g_li°
 = 
NULL
;

75 
n_ªtu∫
 = 
èrgë_func
->
	`has_ªtu∫
();

76 
n_¨gs
 = 
èrgë_func
->
	`num_¨gs
();

77 
	`as£π
–
n_¨gs
 == 2 );

78  
¨g
=0;árg < 
n_¨gs
;árg ++ ) {

79 c⁄° 
›î™d_öfo
 &
a˘uÆ_∑øm_›
 = 
pI
->
	`›î™d_lookup
(
n_ªtu∫
+1+
¨g
);

80 c⁄° 
symbﬁ
 *
f‹mÆ_∑øm
 = 
èrgë_func
->
	`gë_¨g
(
¨g
);

81 
size
=
f‹mÆ_∑øm
->
	`gë_size_ö_byãs
();

82 
	`as£π
–
f‹mÆ_∑øm
->
	`is_∑øm_loˇl
() );

83 
	`as£π
–
a˘uÆ_∑øm_›
.
	`is_∑øm_loˇl
() );

84 
addr_t
 
‰om_addr
 = 
a˘uÆ_∑øm_›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

85 
buf„r
[1024];

86 
	`as£π
(
size
<1024*());

87 
thªad
->
m_loˇl_mem
->
	`ªad
(
‰om_addr
,
size
,
buf„r
);

88 
addr_t
 
addr
 = (addr_t)
buf„r
[0];

89 
mem‹y_•a˚
 *
mem
=
NULL
;

90 
mem‹y_•a˚_t
 
•a˚
 = 
gíîic_•a˚
;

91 
	`decode_•a˚
(
•a˚
,
thªad
,
a˘uÆ_∑øm_›
,
mem
,
addr
);

93 
	`as£π
(
mem
 !
NULL
);

95 if–
¨g
 == 0 ) {

96 
Àn
 = 0;

97 
b
 = 0;

99 
mem
->
	`ªad
(
addr
+
Àn
,1,&
b
);

100 
Àn
++;

101 } 
b
);

102 
fmt°r
 = (*)
	`mÆloc
(
Àn
+64);

103  
i
=0; i < 
Àn
; i++ )

104 
mem
->
	`ªad
(
addr
+
i
,1,
fmt°r
+i);

107 
Àn
 = 
thªad
->
	`gë_föfo
()->
	`loˇl_mem_‰amesize
();

108 
¨g_li°
 = (*)
	`mÆloc
(
Àn
+64);

109  
i
=0; i < 
Àn
; i++ )

110 
mem
->
	`ªad
(
addr
+
i
,1,
¨g_li°
+i);

114 
	`my_cuda_¥ötf
(
fmt°r
,
¨g_li°
);

115 
	`‰ì
(
fmt°r
);

116 
	`‰ì
(
¨g_li°
);

117 
	}
}

	@src/cuda-sim/cuda_device_printf.h

28 #i‚de‡
CUDA_DEVICE_PRINTF_INCLUDED


29 
	#CUDA_DEVICE_PRINTF_INCLUDED


	)

31 
gpgpusim_cuda_v¥ötf
(c⁄° 
˛ass
 
±x_ö°ru˘i⁄
 * 
pI
, cœs†
±x_thªad_öfo
 * 
thªad
, c⁄° cœs†
fun˘i⁄_öfo
 * 
èrgë_func
 );

	@src/cuda-sim/decuda_pred_table/decuda_pred_table.cc

29 
	~"decuda_¥ed_èbÀ.h
"

31 
boﬁ
 
	$¥ed_lookup
(
c⁄dôi⁄
, 
Êags
)

44 
boﬁ
 c⁄° 
¥ed_èbÀ
[32][16] =

78  
¥ed_èbÀ
[
c⁄dôi⁄
][
Êags
];

79 
	}
}

	@src/cuda-sim/decuda_pred_table/decuda_pred_table.h

1 
boﬁ
 
¥ed_lookup
(
c⁄dôi⁄
, 
Êags
);

	@src/cuda-sim/instructions.cc

29 
	~"ö°ru˘i⁄s.h
"

30 
	~"±x_ú.h
"

31 
	~"›codes.h
"

32 
	~"±x_sim.h
"

33 
	~"±x.èb.h
"

34 
	~<°dlib.h
>

35 
	~<m©h.h
>

36 
	~<„nv.h
>

38 
	~"cuda-m©h.h
"

39 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

40 
	~"±x_lﬂdî.h
"

41 
	~"cuda_devi˚_¥ötf.h
"

42 
	~"../gpgpu-sim/gpu-sim.h
"

43 
	~"../gpgpu-sim/shadî.h
"

45 
	~<°d¨g.h
>

47 
	g±x_ö°ru˘i⁄
::
g_num_±x_ö°_uid
=0;

48 
±hªad_muãx_t
 
sh¨ed_mem‹y_lookup_muãx
;

50 c⁄° *
	gg_›code_°rög
[
NUM_OPCODES
] = {

51 
	#OP_DEF
(
OP
,
FUNC
,
STR
,
DST
,
CLASSIFICATION
ËSTR,

	)

52 
	~"›codes.def
"

53 #unde‡
OP_DEF


56 
ö°_nŸ_im∂emíãd
–c⁄° 
±x_ö°ru˘i⁄
 * 
pI
 ) ;

57 
±x_ªg_t
 
§cO≥øndModifõrs
’tx_ªg_à
›D©a
, 
›î™d_öfo
 
›Info
, o≥ønd_öfÿ
d°Info
, 
ty≥
, 
±x_thªad_öfo
 *
thªad
);

59 
sign_exãnd
–
±x_ªg_t
 &
d©a
, 
§c_size
, c⁄° 
›î™d_öfo
 &
d°
 );

61 
	g±x_thªad_öfo
::
	$£t_ªg
–c⁄° 
symbﬁ
 *
ªg
, c⁄° 
±x_ªg_t
 &
vÆue
 )

63 
	`as£π
–
ªg
 !
NULL
 );

64 if–
ªg
->
	`«me
() == "_" ) ;

65 
	`as£π
–!
m_ªgs
.
	`em±y
() );

66 
	`as£π
–
ªg
->
	`uid
() > 0 );

67 
m_ªgs
.
	`back
()[ 
ªg
 ] = 
vÆue
;

68 i‡(
m_íabÀ_debug_åa˚
 )

69 
m_debug_åa˚_ªgs_modifõd
.
	`back
()[ 
ªg
 ] = 
vÆue
;

70 
m_œ°_£t_›î™d_vÆue
 = 
vÆue
;

71 
	}
}

73 
±x_ªg_t
 
	g±x_thªad_öfo
::
	$gë_ªg
–c⁄° 
symbﬁ
 *
ªg
 )

75 
boﬁ
 
unfound_ªgi°î_w¨√d
 = 
Ál£
;

76 
	`as£π
–
ªg
 !
NULL
 );

77 
	`as£π
–!
m_ªgs
.
	`em±y
() );

78 
ªg_m≠_t
::
ôî©‹
 
ªgs_ôî
 = 
m_ªgs
.
	`back
().
	`föd
(
ªg
);

79 i‡(
ªgs_ôî
 =
m_ªgs
.
	`back
().
	`íd
()) {

80 
	`as£π
–
ªg
->
	`ty≥
()->
	`gë_key
().
	`is_ªg
() );

81 c⁄° 
°d
::
°rög
 &
«me
 = 
ªg
->
	`«me
();

82 
ˇŒ_uid
 = 
m_ˇŒ°ack
.
	`back
().
m_ˇŒ_uid
;

83 
±x_ªg_t
 
unöô_ªg
;

84 
unöô_ªg
.
u32
 = 0x0;

85 
	`£t_ªg
(
ªg
, 
unöô_ªg
);

86 
°d
::
°rög
 
fûe_loc
 = 
	`gë_loˇti⁄
();

87 if–!
unfound_ªgi°î_w¨√d
 ) {

88 
	`¥ötf
("GPGPU-Sim PTX: WARNING (%s) **Ñeading undefinedÑegister \'%s\' (cuid:%u). SettingÅo 0X00000000. This is okay if youáre simulatingÅheÇative ISA"

90 
fûe_loc
.
	`c_°r
(), 
«me
.c_°r(), 
ˇŒ_uid
 );

91 
unfound_ªgi°î_w¨√d
 = 
åue
;

93 
ªgs_ôî
 = 
m_ªgs
.
	`back
().
	`föd
(
ªg
);

95 i‡(
m_íabÀ_debug_åa˚
 )

96 
m_debug_åa˚_ªgs_ªad
.
	`back
()[ 
ªg
 ] = 
ªgs_ôî
->
£c⁄d
;

97  
ªgs_ôî
->
£c⁄d
;

98 
	}
}

100 
±x_ªg_t
 
	g±x_thªad_öfo
::
	$gë_›î™d_vÆue
–c⁄° 
›î™d_öfo
 &
›
, o≥ønd_öfÿ
d°Info
, 
›Ty≥
, 
±x_thªad_öfo
 *
thªad
, 
dîefFœg
 )

102 
±x_ªg_t
 
ªsu…
, 
tmp
;

104 if(
›
.
	`gë_doubÀ_›î™d_ty≥
() == 0) {

105 if(((
›Ty≥
 !
BB128_TYPE
Ë&& (›Ty≥ !
BB64_TYPE
Ë&& (›Ty≥ !
FF64_TYPE
)Ë|| (
›
.
	`gë_addr_•a˚
(Ë!
undeföed_•a˚
)) {

106 i‡–
›
.
	`is_ªg
() ) {

107 
ªsu…
 = 
	`gë_ªg
–
›
.
	`gë_symbﬁ
() );

108 } i‡–
›
.
	`is_buûtö
()) {

109 
ªsu…
 = 
	`gë_buûtö
–
›
.
	`gë_öt
(), op.
	`gë_addr_off£t
() );

110 } i‡–
›
.
	`is_mem‹y_›î™d
() ) {

112 c⁄° 
symbﬁ
 *
sym
 = 
›
.
	`gë_symbﬁ
();

113 c⁄° 
ty≥_öfo
 *
ty≥
 = 
sym
->
	`ty≥
();

114 c⁄° 
ty≥_öfo_key
 &
öfo
 = 
ty≥
->
	`gë_key
();

116 i‡–
öfo
.
	`is_ªg
() ) {

117 c⁄° 
symbﬁ
 *
«me
 = 
›
.
	`gë_symbﬁ
();

118 
ªsu…
.
u64
 = 
	`gë_ªg
(
«me
).u64 + 
›
.
	`gë_addr_off£t
();

119 } i‡–
öfo
.
	`is_∑øm_kî√l
() ) {

120 
ªsu…
 = 
sym
->
	`gë_addªss
(Ë+ 
›
.
	`gë_addr_off£t
();

121 } i‡–
öfo
.
	`is_∑øm_loˇl
() ) {

122 
ªsu…
 = 
sym
->
	`gë_addªss
(Ë+ 
›
.
	`gë_addr_off£t
();

123 } i‡–
öfo
.
	`is_globÆ
() ) {

124 
	`as£π
–
›
.
	`gë_addr_off£t
() == 0 );

125 
ªsu…
 = 
sym
->
	`gë_addªss
();

126 } i‡–
öfo
.
	`is_loˇl
() ) {

127 
ªsu…
 = 
sym
->
	`gë_addªss
(Ë+ 
›
.
	`gë_addr_off£t
();

128 } i‡–
öfo
.
	`is_c⁄°
() ) {

129 
ªsu…
 = 
sym
->
	`gë_addªss
(Ë+ 
›
.
	`gë_addr_off£t
();

130 } i‡–
›
.
	`is_sh¨ed
() ) {

131 
ªsu…
 = 
›
.
	`gë_symbﬁ
()->
	`gë_addªss
(Ë+ op.
	`gë_addr_off£t
();

133 c⁄° *
«me
 = 
›
.
	`«me
().
	`c_°r
();

134 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** gë_›î™d_vÆuê: unknow¿mem‹y o≥øndÅy≥ f‹ %s\n", 
«me
 );

135 
	`ab‹t
();

138 } i‡–
›
.
	`is_lôîÆ
() ) {

139 
ªsu…
 = 
›
.
	`gë_lôîÆ_vÆue
();

140 } i‡–
›
.
	`is_œbñ
() ) {

141 
ªsu…
 = 
›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

142 } i‡–
›
.
	`is_sh¨ed
() ) {

143 
ªsu…
 = 
›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

144 } i‡–
›
.
	`is_c⁄°
() ) {

145 
ªsu…
 = 
›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

146 } i‡–
›
.
	`is_globÆ
() ) {

147 
ªsu…
 = 
›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

148 } i‡–
›
.
	`is_loˇl
() ) {

149 
ªsu…
 = 
›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

151 c⁄° *
«me
 = 
›
.
	`«me
().
	`c_°r
();

152 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** gë_›î™d_vÆuê: unknow¿›î™dÅy≥ f‹ %s\n", 
«me
 );

153 
	`as£π
(0);

156 if(
›
.
	`gë_›î™d_lohi
() == 1)

157 
ªsu…
.
u64
 =Ñesult.u64 & 0xFFFF;

158 if(
›
.
	`gë_›î™d_lohi
() == 2)

159 
ªsu…
.
u64
 = (result.u64>>16) & 0xFFFF;

160 } i‡(
›Ty≥
 =
BB128_TYPE
) {

162 
ªsu…
.
u128
.
lowe°
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(0Ë).
u32
;

163 
ªsu…
.
u128
.
low
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(1Ë).
u32
;

164 
ªsu…
.
u128
.
high
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(2Ë).
u32
;

165 
ªsu…
.
u128
.
highe°
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(3Ë).
u32
;

168 
ªsu…
.
bôs
.
ls
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(0Ë).
u32
;

169 
ªsu…
.
bôs
.
ms
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(1Ë).
u32
;

171 } i‡(
›
.
	`gë_doubÀ_›î™d_ty≥
() == 1) {

172 
±x_ªg_t
 
fú°HÆf
, 
£c⁄dHÆf
;

173 
fú°HÆf
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(0Ë).
u64
;

174 
£c⁄dHÆf
 = 
	`gë_ªg
–
›
.
	`vec_symbﬁ
(1Ë).
u64
;

175 if(
›
.
	`gë_›î™d_lohi
() == 1)

176 
£c⁄dHÆf
.
u64
 = secondHalf.u64 & 0xFFFF;

177 if(
›
.
	`gë_›î™d_lohi
() == 2)

178 
£c⁄dHÆf
.
u64
 = (secondHalf.u64>>16) & 0xFFFF;

179 
ªsu…
 = 
fú°HÆf
.
u64
 + 
£c⁄dHÆf
.u64;

180 } i‡(
›
.
	`gë_doubÀ_›î™d_ty≥
() == 2) {

183 
±x_ªg_t
 
fú°HÆf
, 
£c⁄dHÆf
;

184 
fú°HÆf
 = 
	`gë_ªg
(
›
.
	`vec_symbﬁ
(0)).
u64
;

185 
£c⁄dHÆf
 = 
	`gë_ªg
(
›
.
	`vec_symbﬁ
(1)).
u64
;

186 if(
›
.
	`gë_›î™d_lohi
() == 1)

187 
£c⁄dHÆf
.
u64
 = secondHalf.u64 & 0xFFFF;

188 if(
›
.
	`gë_›î™d_lohi
() == 2)

189 
£c⁄dHÆf
.
u64
 = (secondHalf.u64>>16) & 0xFFFF;

190 
ªsu…
 = 
fú°HÆf
.
u64
;

191 
fú°HÆf
 = fú°HÆf.
u64
 + 
£c⁄dHÆf
.u64;

192 
	`£t_ªg
(
›
.
	`vec_symbﬁ
(0),
fú°HÆf
);

193 } i‡(
›
.
	`gë_doubÀ_›î™d_ty≥
() == 3) {

196 
±x_ªg_t
 
fú°HÆf
;

197 
fú°HÆf
 = 
	`gë_ªg
(
›
.
	`gë_symbﬁ
()).
u64
;

198 
ªsu…
 = 
fú°HÆf
.
u64
;

199 
fú°HÆf
 = fú°HÆf.
u64
 + 
›
.
	`gë_addr_off£t
();

200 
	`£t_ªg
(
›
.
	`gë_symbﬁ
(),
fú°HÆf
);

203 
±x_ªg_t
 
föÆResu…
;

204 
mem‹y_•a˚
 *
mem
 = 
NULL
;

205 
size_t
 
size
;

206 
t
;

207 
föÆResu…
.
u64
=0;

210 if((
›
.
	`gë_addr_•a˚
(Ë=
globÆ_•a˚
)&&(
dîefFœg
)) {

212 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
();

213 
ty≥_öfo_key
::
	`ty≥_decode
(
›Ty≥
,
size
,
t
);

214 
mem
->
	`ªad
(
ªsu…
.
u32
,
size
/8,&
föÆResu…
.
u128
);

215 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
ªsu…
.
u32
;

216 
thªad
->
m_œ°_mem‹y_•a˚
 = 
globÆ_•a˚
;

218 if–
›Ty≥
 =
S16_TYPE
 || opTy≥ =
S32_TYPE
 )

219 
	`sign_exãnd
(
föÆResu…
,
size
,
d°Info
);

220 } if((
›
.
	`gë_addr_•a˚
(Ë=
sh¨ed_•a˚
)&&(
dîefFœg
)) {

222 
mem
 = 
thªad
->
m_sh¨ed_mem
;

223 
ty≥_öfo_key
::
	`ty≥_decode
(
›Ty≥
,
size
,
t
);

224 
mem
->
	`ªad
(
ªsu…
.
u32
,
size
/8,&
föÆResu…
.
u128
);

225 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
ªsu…
.
u32
;

226 
thªad
->
m_œ°_mem‹y_•a˚
 = 
sh¨ed_•a˚
;

228 if–
›Ty≥
 =
S16_TYPE
 || opTy≥ =
S32_TYPE
 )

229 
	`sign_exãnd
(
föÆResu…
,
size
,
d°Info
);

230 } if((
›
.
	`gë_addr_•a˚
(Ë=
c⁄°_•a˚
)&&(
dîefFœg
)) {

232 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
();

233 
ty≥_öfo_key
::
	`ty≥_decode
(
›Ty≥
,
size
,
t
);

234 
mem
->
	`ªad
((
ªsu…
.
u32
 + 
›
.
	`gë_c⁄°_mem_off£t
()),
size
/8,&
föÆResu…
.
u128
);

235 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
ªsu…
.
u32
;

236 
thªad
->
m_œ°_mem‹y_•a˚
 = 
c⁄°_•a˚
;

237 if–
›Ty≥
 =
S16_TYPE
 || opTy≥ =
S32_TYPE
 )

238 
	`sign_exãnd
(
föÆResu…
,
size
,
d°Info
);

239 } if((
›
.
	`gë_addr_•a˚
(Ë=
loˇl_•a˚
)&&(
dîefFœg
)) {

241 
mem
 = 
thªad
->
m_loˇl_mem
;

242 
ty≥_öfo_key
::
	`ty≥_decode
(
›Ty≥
,
size
,
t
);

243 
mem
->
	`ªad
(
ªsu…
.
u32
,
size
/8,&
föÆResu…
.
u128
);

244 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
ªsu…
.
u32
;

245 
thªad
->
m_œ°_mem‹y_•a˚
 = 
loˇl_•a˚
;

246 if–
›Ty≥
 =
S16_TYPE
 || opTy≥ =
S32_TYPE
 )

247 
	`sign_exãnd
(
föÆResu…
,
size
,
d°Info
);

249 
föÆResu…
 = 
ªsu…
;

252 if((
›
.
	`gë_›î™d_√g
(Ë=
åue
)&&(
dîefFœg
)) {

253  
›Ty≥
 ) {

255 
S8_TYPE
:

256 
U8_TYPE
:

257 
B8_TYPE
:

258 
föÆResu…
.
s8
 = -finalResult.s8;

260 
S16_TYPE
:

261 
U16_TYPE
:

262 
B16_TYPE
:

263 
föÆResu…
.
s16
 = -finalResult.s16;

265 
S32_TYPE
:

266 
U32_TYPE
:

267 
B32_TYPE
:

268 
föÆResu…
.
s32
 = -finalResult.s32;

270 
S64_TYPE
:

271 
U64_TYPE
:

272 
B64_TYPE
:

273 
föÆResu…
.
s64
 = -finalResult.s64;

275 
F16_TYPE
:

276 
föÆResu…
.
f16
 = -finalResult.f16;

278 
F32_TYPE
:

279 
föÆResu…
.
f32
 = -finalResult.f32;

281 
F64_TYPE
:

282 
FF64_TYPE
:

283 
föÆResu…
.
f64
 = -finalResult.f64;

286 
	`as£π
(0);

291  
föÆResu…
;

293 
	}
}

295 
	$gë_›î™d_nbôs
–c⁄° 
›î™d_öfo
 &
›
 )

297 i‡–
›
.
	`is_ªg
() ) {

298 c⁄° 
symbﬁ
 *
sym
 = 
›
.
	`gë_symbﬁ
();

299 c⁄° 
ty≥_öfo
 *
typ
 = 
sym
->
	`ty≥
();

300 
ty≥_öfo_key
 
t
 = 
typ
->
	`gë_key
();

301  
t
.
	`sˇœr_ty≥
() ) {

302 
PRED_TYPE
:

304 
B8_TYPE
: 
S8_TYPE
: 
U8_TYPE
:

306 
S16_TYPE
: 
U16_TYPE
: 
F16_TYPE
: 
B16_TYPE
:

308 
S32_TYPE
: 
U32_TYPE
: 
F32_TYPE
: 
B32_TYPE
:

310 
S64_TYPE
: 
U64_TYPE
: 
F64_TYPE
: 
B64_TYPE
:

313 
	`¥ötf
("ERROR: unknownÑegisterÅype\n");

314 
	`fÊush
(
°dout
);

315 
	`ab‹t
();

318 
	`¥ötf
("ERROR: NeedÅo implement get_operand_nbits() for currently unsupported operand_infoÅype\n");

319 
	`fÊush
(
°dout
);

320 
	`ab‹t
();

324 
	}
}

326 
	g±x_thªad_öfo
::
	$gë_ve˘‹_›î™d_vÆues
–c⁄° 
›î™d_öfo
 &
›
, 
±x_ªg_t
* 
±x_ªgs
, 
num_ñemíts
 )

328 
	`as£π
–
›
.
	`is_ve˘‹
() );

329 
	`as£π
–
num_ñemíts
 <= 4 );

331 
idx
 = 
num_ñemíts
 - 1; idx >= 0; --idx) {

332 c⁄° 
symbﬁ
 *
sym
 = 
NULL
;

333 
sym
 = 
›
.
	`vec_symbﬁ
(
idx
);

334 if–
	`°rcmp
(
sym
->
	`«me
().
	`c_°r
(),"_") != 0) {

335 
ªg_m≠_t
::
ôî©‹
 
ªg_ôî
 = 
m_ªgs
.
	`back
().
	`föd
(
sym
);

336 
	`as£π
–
ªg_ôî
 !
m_ªgs
.
	`back
().
	`íd
() );

337 
±x_ªgs
[
idx
] = 
ªg_ôî
->
£c⁄d
;

340 
	}
}

342 
	$sign_exãnd
–
±x_ªg_t
 &
d©a
, 
§c_size
, c⁄° 
›î™d_öfo
 &
d°
 )

344 if–!
d°
.
	`is_ªg
() )

346 
d°_size
 = 
	`gë_›î™d_nbôs
–
d°
 );

347 if–
§c_size
 >
d°_size
 )

350 
mask
 = 1;

351 
mask
 <<(
§c_size
-1);

352 if–(
mask
 & 
d©a
.
u64
) == 0 ) {

357 
mask
 = 1;

358 
mask
 <<
d°_size
-
§c_size
;

359 
mask
 -= 1;

360 
mask
 <<
§c_size
;

361 
d©a
.
u64
 |
mask
;

362 
	}
}

364 
	g±x_thªad_öfo
::
	$£t_›î™d_vÆue
–c⁄° 
›î™d_öfo
 &
d°
, c⁄° 
±x_ªg_t
 &
d©a
, 
ty≥
, 
±x_thªad_öfo
 *
thªad
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
ovîÊow
, 
ˇºy
 )

367 
thªad
->
	`£t_›î™d_vÆue
–
d°
, 
d©a
, 
ty≥
,Åhªad, 
pI
 );

369 i‡(
d°
.
	`gë_doubÀ_›î™d_ty≥
() == -2)

371 
±x_ªg_t
 
¥edVÆue
;

373 c⁄° 
symbﬁ
 *
sym
 = 
d°
.
	`vec_symbﬁ
(0);

374 
¥edVÆue
.
u64
 = (
m_ªgs
.
	`back
()[ 
sym
 ].u64) & ~(0x0C);

375 
¥edVÆue
.
u64
 |((
ovîÊow
 & 0x01)<<3);

376 
¥edVÆue
.
u64
 |((
ˇºy
 & 0x01)<<2);

378 
	`£t_ªg
(
sym
,
¥edVÆue
);

380 i‡(
d°
.
	`gë_doubÀ_›î™d_ty≥
() == 0)

386 
	`¥ötf
("Unexpected double destination\n");

387 
	`as£π
(0);

390 
	}
}

392 
	g±x_thªad_öfo
::
	$£t_›î™d_vÆue
–c⁄° 
›î™d_öfo
 &
d°
, c⁄° 
±x_ªg_t
 &
d©a
, 
ty≥
, 
±x_thªad_öfo
 *
thªad
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
 )

395 
±x_ªg_t
 
d°D©a
;

396 
mem‹y_•a˚
 *
mem
 = 
NULL
;

397 
size_t
 
size
;

398 
t
;

401 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

404 if(
d°
.
	`gë_addr_•a˚
(Ë=
undeföed_•a˚
)

406 
±x_ªg_t
 
£tVÆue
;

407 
£tVÆue
.
u64
 = 
d©a
.u64;

410 i‡(
d°
.
	`gë_doubÀ_›î™d_ty≥
() == -1)

412 
±x_ªg_t
 
£tVÆue2
;

413 c⁄° 
symbﬁ
 *
«me1
 = 
d°
.
	`vec_symbﬁ
(0);

414 c⁄° 
symbﬁ
 *
«me2
 = 
d°
.
	`vec_symbﬁ
(1);

416 i‡–(
ty≥
==
F16_TYPE
)||—y≥==
F32_TYPE
)||—y≥==
F64_TYPE
)||—y≥==
FF64_TYPE
) ) {

417 
£tVÆue2
.
f32
 = (
£tVÆue
.
u64
==0)?1.0f:0.0f;

419 
£tVÆue2
.
u32
 = (
£tVÆue
.
u64
==0)?0xFFFFFFFF:0;

422 
	`£t_ªg
(
«me1
,
£tVÆue
);

423 
	`£t_ªg
(
«me2
,
£tVÆue2
);

429 i‡((
d°
.
	`gë_doubÀ_›î™d_ty≥
() == -2)||(dst.get_double_operand_type() == -3))

431 
±x_ªg_t
 
¥edVÆue
;

432 c⁄° 
symbﬁ
 *
¥edName
 = 
d°
.
	`vec_symbﬁ
(0);

433 c⁄° 
symbﬁ
 *
ªgName
 = 
d°
.
	`vec_symbﬁ
(1);

434 
¥edVÆue
.
u64
 = 0;

436  
ty≥
 ) {

437 
S8_TYPE
:

438 if((
£tVÆue
.
s8
 & 0x7F) == 0)

439 
¥edVÆue
.
u64
 |= 1;

441 
S16_TYPE
:

442 if((
£tVÆue
.
s16
 & 0x7FFF) == 0)

443 
¥edVÆue
.
u64
 |= 1;

445 
S32_TYPE
:

446 if((
£tVÆue
.
s32
 & 0x7FFFFFFF) == 0)

447 
¥edVÆue
.
u64
 |= 1;

449 
S64_TYPE
:

450 if((
£tVÆue
.
s64
 & 0x7FFFFFFFFFFFFFFF) == 0)

451 
¥edVÆue
.
u64
 |= 1;

453 
U8_TYPE
:

454 
B8_TYPE
:

455 if(
£tVÆue
.
u8
 == 0)

456 
¥edVÆue
.
u64
 |= 1;

458 
U16_TYPE
:

459 
B16_TYPE
:

460 if(
£tVÆue
.
u16
 == 0)

461 
¥edVÆue
.
u64
 |= 1;

463 
U32_TYPE
:

464 
B32_TYPE
:

465 if(
£tVÆue
.
u32
 == 0)

466 
¥edVÆue
.
u64
 |= 1;

468 
U64_TYPE
:

469 
B64_TYPE
:

470 if(
£tVÆue
.
u64
 == 0)

471 
¥edVÆue
.
u64
 |= 1;

473 
F16_TYPE
:

474 if(
£tVÆue
.
f16
 == 0)

475 
¥edVÆue
.
u64
 |= 1;

477 
F32_TYPE
:

478 if(
£tVÆue
.
f32
 == 0)

479 
¥edVÆue
.
u64
 |= 1;

481 
F64_TYPE
:

482 
FF64_TYPE
:

483 if(
£tVÆue
.
f64
 == 0)

484 
¥edVÆue
.
u64
 |= 1;

486 : 
	`as£π
(0); ;

490 i‡–(
ty≥
==
S8_TYPE
)||—y≥==
S16_TYPE
)||—y≥==
S32_TYPE
)||—y≥==
S64_TYPE
)||

491 (
ty≥
==
U8_TYPE
)||—y≥==
U16_TYPE
)||—y≥==
U32_TYPE
)||—y≥==
U64_TYPE
)||

492 (
ty≥
==
B8_TYPE
)||—y≥==
B16_TYPE
)||—y≥==
B32_TYPE
)||—y≥==
B64_TYPE
)) {

493 if((
£tVÆue
.
u32
 & (1<<(
size
-1))) != 0)

494 
¥edVÆue
.
u64
 |= 1<<1;

496 i‡–
ty≥
==
F32_TYPE
 ) {

497 if(
£tVÆue
.
f32
 < 0)

498 
¥edVÆue
.
u64
 |= 1<<1;

501 if(
d°
.
	`gë_›î™d_lohi
() == 1)

503 
£tVÆue
.
u64
 = ((
m_ªgs
.
	`back
()[ 
ªgName
 ].u64Ë& (~(0xFFFF))Ë+ (
d©a
.u64 & 0xFFFF);

505 if(
d°
.
	`gë_›î™d_lohi
() == 2)

507 
£tVÆue
.
u64
 = ((
m_ªgs
.
	`back
()[ 
ªgName
 ].u64Ë& (~(0xFFFF0000))Ë+ ((
d©a
.u64<<16) & 0xFFFF0000);

510 
	`£t_ªg
(
¥edName
,
¥edVÆue
);

511 
	`£t_ªg
(
ªgName
,
£tVÆue
);

513 i‡(
ty≥
 =
BB128_TYPE
)

516 
±x_ªg_t
 
£tVÆue2
, 
£tVÆue3
, 
£tVÆue4
;

517 
£tVÆue
.
u64
 = 0;

518 
£tVÆue2
.
u64
 = 0;

519 
£tVÆue3
.
u64
 = 0;

520 
£tVÆue4
.
u64
 = 0;

521 
£tVÆue
.
u32
 = 
d©a
.
u128
.
lowe°
;

522 
£tVÆue2
.
u32
 = 
d©a
.
u128
.
low
;

523 
£tVÆue3
.
u32
 = 
d©a
.
u128
.
high
;

524 
£tVÆue4
.
u32
 = 
d©a
.
u128
.
highe°
;

526 c⁄° 
symbﬁ
 *
«me1
, *
«me2
, *
«me3
, *
«me4
 = 
NULL
;

528 
«me1
 = 
d°
.
	`vec_symbﬁ
(0);

529 
«me2
 = 
d°
.
	`vec_symbﬁ
(1);

530 
«me3
 = 
d°
.
	`vec_symbﬁ
(2);

531 
«me4
 = 
d°
.
	`vec_symbﬁ
(3);

533 
	`£t_ªg
(
«me1
,
£tVÆue
);

534 
	`£t_ªg
(
«me2
,
£tVÆue2
);

535 
	`£t_ªg
(
«me3
,
£tVÆue3
);

536 
	`£t_ªg
(
«me4
,
£tVÆue4
);

538 i‡(
ty≥
 =
BB64_TYPE
 ||Åy≥ =
FF64_TYPE
)

541 
±x_ªg_t
 
£tVÆue2
;

542 
£tVÆue
.
u32
 = 0;

543 
£tVÆue2
.
u32
 = 0;

545 
£tVÆue
.
u32
 = 
d©a
.
bôs
.
ls
;

546 
£tVÆue2
.
u32
 = 
d©a
.
bôs
.
ms
;

548 c⁄° 
symbﬁ
 *
«me1
, *
«me2
 = 
NULL
;

550 
«me1
 = 
d°
.
	`vec_symbﬁ
(0);

551 
«me2
 = 
d°
.
	`vec_symbﬁ
(1);

553 
	`£t_ªg
(
«me1
,
£tVÆue
);

554 
	`£t_ªg
(
«me2
,
£tVÆue2
);

558 if(
d°
.
	`gë_›î™d_lohi
() == 1)

560 
£tVÆue
.
u64
 = ((
m_ªgs
.
	`back
()[ 
d°
.
	`gë_symbﬁ
(Ë].u64Ë& (~(0xFFFF))Ë+ (
d©a
.u64 & 0xFFFF);

562 if(
d°
.
	`gë_›î™d_lohi
() == 2)

564 
£tVÆue
.
u64
 = ((
m_ªgs
.
	`back
()[ 
d°
.
	`gë_symbﬁ
(Ë].u64Ë& (~(0xFFFF0000))Ë+ ((
d©a
.u64<<16) & 0xFFFF0000);

566 
	`£t_ªg
(
d°
.
	`gë_symbﬁ
(),
£tVÆue
);

571 if(
d°
.
	`gë_addr_•a˚
(Ë=
globÆ_•a˚
)

573 
d°D©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
d°
, d°, 
ty≥
,Åhread, 0);

574 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
();

575 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

577 
mem
->
	`wrôe
(
d°D©a
.
u32
,
size
/8,&
d©a
.
u128
,
thªad
,
pI
);

578 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
d°D©a
.
u32
;

579 
thªad
->
m_œ°_mem‹y_•a˚
 = 
globÆ_•a˚
;

583 if(
d°
.
	`gë_addr_•a˚
(Ë=
sh¨ed_•a˚
)

585 
d°D©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
d°
, d°, 
ty≥
,Åhread, 0);

586 
mem
 = 
thªad
->
m_sh¨ed_mem
;

587 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

589 
mem
->
	`wrôe
(
d°D©a
.
u32
,
size
/8,&
d©a
.
u128
,
thªad
,
pI
);

590 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
d°D©a
.
u32
;

591 
thªad
->
m_œ°_mem‹y_•a˚
 = 
sh¨ed_•a˚
;

595 if(
d°
.
	`gë_addr_•a˚
(Ë=
loˇl_•a˚
)

597 
d°D©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
d°
, d°, 
ty≥
,Åhread, 0);

598 
mem
 = 
thªad
->
m_loˇl_mem
;

599 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

601 
mem
->
	`wrôe
(
d°D©a
.
u32
,
size
/8,&
d©a
.
u128
,
thªad
,
pI
);

602 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
d°D©a
.
u32
;

603 
thªad
->
m_œ°_mem‹y_•a˚
 = 
loˇl_•a˚
;

608 
	`¥ötf
("Destination storesÅo unknownÜocation.");

609 
	`as£π
(0);

613 
	}
}

615 
	g±x_thªad_öfo
::
	$£t_ve˘‹_›î™d_vÆues
–c⁄° 
›î™d_öfo
 &
d°
,

616 c⁄° 
±x_ªg_t
 &
d©a1
,

617 c⁄° 
±x_ªg_t
 &
d©a2
,

618 c⁄° 
±x_ªg_t
 &
d©a3
,

619 c⁄° 
±x_ªg_t
 &
d©a4
 )

622 
num_ñemíts
 = 
d°
.
	`gë_ve˘_√Àm
();

623 i‡(
num_ñemíts
 > 0) {

624 
	`£t_ªg
(
d°
.
	`vec_symbﬁ
(0), 
d©a1
);

625 i‡(
num_ñemíts
 > 1) {

626 
	`£t_ªg
(
d°
.
	`vec_symbﬁ
(1), 
d©a2
);

627 i‡(
num_ñemíts
 > 2) {

628 
	`£t_ªg
(
d°
.
	`vec_symbﬁ
(2), 
d©a3
);

629 i‡(
num_ñemíts
 > 3) {

630 
	`£t_ªg
(
d°
.
	`vec_symbﬁ
(3), 
d©a4
);

636 
m_œ°_£t_›î™d_vÆue
 = 
d©a1
;

638 
	}
}

640 
	#my_abs
(
a
Ë((◊)<0)?(-a):◊))

	)

642 
	#MY_MAX_I
(
a
,
b
Ë◊ > bË?á : 
	)
b

643 
	#MY_MAX_F
(
a
,
b
Ë
	`isNaN
◊Ë? b : isNaN(bË?á : (®> bË?á : 
	)
b

645 
	#MY_MIN_I
(
a
,
b
Ë◊ < bË?á : 
	)
b

646 
	#MY_MIN_F
(
a
,
b
Ë
	`isNaN
◊Ë? b : isNaN(bË?á : (®< bË?á : 
	)
b

648 
	#MY_INC_I
(
a
,
b
Ë◊ >bË? 0 :á+1

	)

649 
	#MY_DEC_I
(
a
,
b
Ë(◊ =0Ë|| (®> b)Ë? b :á-1

	)

651 
	#MY_CAS_I
(
a
,
b
,
c
Ë◊ =bË? c : 
	)
a

653 
	#MY_EXCH
(
a
,
b
Ë
	)
b

655 
	$abs_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

657 
±x_ªg_t
 
a
, 
d
;

658 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

659 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

661 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

662 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

665  
i_ty≥
 ) {

666 
S16_TYPE
: 
d
.
s16
 = 
	`my_abs
(
a
.s16); ;

667 
S32_TYPE
: 
d
.
s32
 = 
	`my_abs
(
a
.s32); ;

668 
S64_TYPE
: 
d
.
s64
 = 
	`my_abs
(
a
.s64); ;

669 
U16_TYPE
: 
d
.
s16
 = 
	`my_abs
(
a
.
u16
); ;

670 
U32_TYPE
: 
d
.
s32
 = 
	`my_abs
(
a
.
u32
); ;

671 
U64_TYPE
: 
d
.
s64
 = 
	`my_abs
(
a
.
u64
); ;

672 
F32_TYPE
: 
d
.
f32
 = 
	`my_abs
(
a
.f32); ;

673 
F64_TYPE
: 
FF64_TYPE
: 
d
.
f64
 = 
	`my_abs
(
a
.f64); ;

675 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

676 
	`as£π
(0);

680 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

681 
	}
}

683 
	$addp_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

686 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
§c3_d©a
, 
d©a
;

687 
ovîÊow
 = 0;

688 
ˇºy
 = 0;

690 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

691 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

692 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

693 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c3
();

695 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

696 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

697 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

698 
§c3_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
i_ty≥
,Åhread, 1);

700 
roundög_mode
 = 
pI
->
	`roundög_mode
();

701 
‹ig_rm
 = 
	`„gëround
();

702  
roundög_mode
 ) {

703 
RN_OPTION
: ;

704 
RZ_OPTION
: 
	`„£åound
–
FE_TOWARDZERO
 ); ;

705 : 
	`as£π
(0); ;

710  
i_ty≥
 ) {

711 
S8_TYPE
:

712 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0x0000000FFË+ (
§c2_d©a
.s64 & 0x0000000FFË+ (
§c3_d©a
.
¥ed
 & 0x4);

713 if(((
§c1_d©a
.
s64
 & 0x80)-(
§c2_d©a
.s64 & 0x80)Ë=0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x80)-(
d©a
.s64 & 0x80))==0?0:1; }

714 
ˇºy
 = (
d©a
.
u64
 & 0x000000100)>>8;

716 
S16_TYPE
:

717 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0x00000FFFFË+ (
§c2_d©a
.s64 & 0x00000FFFFË+ (
§c3_d©a
.
¥ed
 & 0x4);

718 if(((
§c1_d©a
.
s64
 & 0x8000)-(
§c2_d©a
.s64 & 0x8000)Ë=0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x8000)-(
d©a
.s64 & 0x8000))==0?0:1; }

719 
ˇºy
 = (
d©a
.
u64
 & 0x000010000)>>16;

721 
S32_TYPE
:

722 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0x0FFFFFFFFË+ (
§c2_d©a
.s64 & 0x0FFFFFFFFË+ (
§c3_d©a
.
¥ed
 & 0x4);

723 if(((
§c1_d©a
.
s64
 & 0x80000000)-(
§c2_d©a
.s64 & 0x80000000)Ë=0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x80000000)-(
d©a
.s64 & 0x80000000))==0?0:1; }

724 
ˇºy
 = (
d©a
.
u64
 & 0x100000000)>>32;

726 
S64_TYPE
:

727 
d©a
.
s64
 = 
§c1_d©a
.s64 + 
§c2_d©a
.s64 + (
§c3_d©a
.
¥ed
 & 0x4);

729 
U8_TYPE
:

730 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFË+ (
§c2_d©a
.u64 & 0xFFË+ (
§c3_d©a
.
¥ed
 & 0x4);

731 
ˇºy
 = (
d©a
.
u64
 & 0x100)>>8;

733 
U16_TYPE
:

734 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFFFË+ (
§c2_d©a
.u64 & 0xFFFFË+ (
§c3_d©a
.
¥ed
 & 0x4);

735 
ˇºy
 = (
d©a
.
u64
 & 0x10000)>>16;

737 
U32_TYPE
:

738 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFFFFFFFË+ (
§c2_d©a
.u64 & 0xFFFFFFFFË+ (
§c3_d©a
.
¥ed
 & 0x4);

739 
ˇºy
 = (
d©a
.
u64
 & 0x100000000)>>32;

741 
U64_TYPE
:

742 
d©a
.
s64
 = 
§c1_d©a
.s64 + 
§c2_d©a
.s64 + (
§c3_d©a
.
¥ed
 & 0x4);

744 
F16_TYPE
: 
	`as£π
(0); ;

745 
F32_TYPE
: 
d©a
.
f32
 = 
§c1_d©a
.f32 + 
§c2_d©a
.f32; ;

746 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
§c1_d©a
.f64 + 
§c2_d©a
.f64; ;

747 : 
	`as£π
(0); ;

749 
	`„£åound
–
‹ig_rm
 );

751 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
i_ty≥
,Åhªad, 
pI
, 
ovîÊow
, 
ˇºy
 );

752 
	}
}

754 
	$add_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

756 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

757 
ovîÊow
 = 0;

758 
ˇºy
 = 0;

760 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

761 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

762 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

764 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

765 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

766 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

768 
roundög_mode
 = 
pI
->
	`roundög_mode
();

769 
‹ig_rm
 = 
	`„gëround
();

770  
roundög_mode
 ) {

771 
RN_OPTION
: ;

772 
RZ_OPTION
: 
	`„£åound
–
FE_TOWARDZERO
 ); ;

773 : 
	`as£π
(0); ;

777  
i_ty≥
 ) {

778 
S8_TYPE
:

779 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0x0000000FFË+ (
§c2_d©a
.s64 & 0x0000000FF);

780 if(((
§c1_d©a
.
s64
 & 0x80)-(
§c2_d©a
.s64 & 0x80)Ë=0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x80)-(
d©a
.s64 & 0x80))==0?0:1; }

781 
ˇºy
 = (
d©a
.
u64
 & 0x000000100)>>8;

783 
S16_TYPE
:

784 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0x00000FFFFË+ (
§c2_d©a
.s64 & 0x00000FFFF);

785 if(((
§c1_d©a
.
s64
 & 0x8000)-(
§c2_d©a
.s64 & 0x8000)Ë=0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x8000)-(
d©a
.s64 & 0x8000))==0?0:1; }

786 
ˇºy
 = (
d©a
.
u64
 & 0x000010000)>>16;

788 
S32_TYPE
:

789 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0x0FFFFFFFFË+ (
§c2_d©a
.s64 & 0x0FFFFFFFF);

790 if(((
§c1_d©a
.
s64
 & 0x80000000)-(
§c2_d©a
.s64 & 0x80000000)Ë=0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x80000000)-(
d©a
.s64 & 0x80000000))==0?0:1; }

791 
ˇºy
 = (
d©a
.
u64
 & 0x100000000)>>32;

793 
S64_TYPE
:

794 
d©a
.
s64
 = 
§c1_d©a
.s64 + 
§c2_d©a
.s64;

796 
U8_TYPE
:

797 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFË+ (
§c2_d©a
.u64 & 0xFF);

798 
ˇºy
 = (
d©a
.
u64
 & 0x100)>>8;

800 
U16_TYPE
:

801 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFFFË+ (
§c2_d©a
.u64 & 0xFFFF);

802 
ˇºy
 = (
d©a
.
u64
 & 0x10000)>>16;

804 
U32_TYPE
:

805 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFFFFFFFË+ (
§c2_d©a
.u64 & 0xFFFFFFFF);

806 
ˇºy
 = (
d©a
.
u64
 & 0x100000000)>>32;

808 
U64_TYPE
:

809 
d©a
.
s64
 = 
§c1_d©a
.s64 + 
§c2_d©a
.s64;

811 
F16_TYPE
: 
	`as£π
(0); ;

812 
F32_TYPE
: 
d©a
.
f32
 = 
§c1_d©a
.f32 + 
§c2_d©a
.f32; ;

813 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
§c1_d©a
.f64 + 
§c2_d©a
.f64; ;

814 : 
	`as£π
(0); ;

816 
	`„£åound
–
‹ig_rm
 );

818 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
i_ty≥
,Åhªad, 
pI
, 
ovîÊow
, 
ˇºy
 );

819 
	}
}

821 
	$addc_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

823 
	$™d_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

825 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

827 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

828 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

829 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

831 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

832 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

833 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

837 if(
i_ty≥
 =
PRED_TYPE
)

838 
d©a
.
¥ed
 = ~(~(
§c1_d©a
.¥edË& ~(
§c2_d©a
.pred));

840 
d©a
.
u64
 = 
§c1_d©a
.u64 & 
§c2_d©a
.u64;

842 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

843 
	}
}

845 
	$™dn_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

847 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

849 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

850 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

851 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

853 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

854 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

855 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

857  
i_ty≥
 ) {

858 
B16_TYPE
: 
§c2_d©a
.
u16
 = ~src2_data.u16; ;

859 
B32_TYPE
: 
§c2_d©a
.
u32
 = ~src2_data.u32; ;

860 
B64_TYPE
: 
§c2_d©a
.
u64
 = ~src2_data.u64; ;

862 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

863 
	`as£π
(0);

867 
d©a
.
u64
 = 
§c1_d©a
.u64 & 
§c2_d©a
.u64;

869 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

870 
	}
}

872 
	$©om_ˇŒback
–c⁄° 
ö°_t
* 
ö°
, 
±x_thªad_öfo
* 
thªad
 )

874 c⁄° 
±x_ö°ru˘i⁄
 *
pI
 = 
dy«mic_ˇ°
<c⁄°Ötx_ö°ru˘i⁄*>(
ö°
);

877 
	`as£π
–
pI
->
	`gë_•a˚
()==
globÆ_•a˚
 );

880 
to_ty≥
 = 
pI
->
	`gë_ty≥
();

881 
size_t
 
size
;

882 
t
;

883 
ty≥_öfo_key
::
	`ty≥_decode
(
to_ty≥
, 
size
, 
t
);

886 
±x_ªg_t
 
d©a
,

887 
§c1_d©a
,

888 
§c2_d©a
,

889 
›_ªsu…
;

891 
boﬁ
 
d©a_ªady
 = 
Ál£
;

894 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

895 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

896 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

899 i‡(
d°
.
	`gë_symbﬁ
()->
	`ty≥
()){

900 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
to_ty≥
,Åhread, 1);

901 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
to_ty≥
,Åhread, 1);

904 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, src1, 
to_ty≥
,Åhread, 1);

905 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
§c1
, 
to_ty≥
,Åhread, 1);

910 
thªad
->
	`gë_globÆ_mem‹y
()->
	`ªad
(
§c1_d©a
.
u32
,
size
/8,&
d©a
.
s64
);

911 i‡(
d°
.
	`gë_symbﬁ
()->
	`ty≥
()){

912 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
to_ty≥
,Åhªad, 
pI
);

916 
m_©omic_•ec
 = 
pI
->
	`gë_©omic
();

918  
m_©omic_•ec
 ) {

920 
ATOMIC_AND
:

923  
to_ty≥
 ) {

924 
B32_TYPE
:

925 
U32_TYPE
:

926 
›_ªsu…
.
u32
 = 
d©a
.u32 & 
§c2_d©a
.u32;

927 
d©a_ªady
 = 
åue
;

929 
S32_TYPE
:

930 
›_ªsu…
.
s32
 = 
d©a
.s32 & 
§c2_d©a
.s32;

931 
d©a_ªady
 = 
åue
;

934 
	`¥ötf
("Executi⁄Éº‹:Åy≥ mism©ch (%xËwôh in°ru˘i⁄\«tom.AND o∆yác˚±†b32\n", 
to_ty≥
);

935 
	`as£π
(0);

942 
ATOMIC_OR
:

945  
to_ty≥
 ) {

946 
B32_TYPE
:

947 
U32_TYPE
:

948 
›_ªsu…
.
u32
 = 
d©a
.u32 | 
§c2_d©a
.u32;

949 
d©a_ªady
 = 
åue
;

951 
S32_TYPE
:

952 
›_ªsu…
.
s32
 = 
d©a
.s32 | 
§c2_d©a
.s32;

953 
d©a_ªady
 = 
åue
;

956 
	`¥ötf
("Executi⁄Éº‹:Åy≥ mism©ch (%xËwôh in°ru˘i⁄\«tom.OR o∆yác˚±†b32\n", 
to_ty≥
);

957 
	`as£π
(0);

964 
ATOMIC_XOR
:

967  
to_ty≥
 ) {

968 
B32_TYPE
:

969 
U32_TYPE
:

970 
›_ªsu…
.
u32
 = 
d©a
.u32 ^ 
§c2_d©a
.u32;

971 
d©a_ªady
 = 
åue
;

973 
S32_TYPE
:

974 
›_ªsu…
.
s32
 = 
d©a
.s32 ^ 
§c2_d©a
.s32;

975 
d©a_ªady
 = 
åue
;

978 
	`¥ötf
("Executi⁄Éº‹:Åy≥ mism©ch (%xËwôh in°ru˘i⁄\«tom.XOR o∆yác˚±†b32\n", 
to_ty≥
);

979 
	`as£π
(0);

986 
ATOMIC_CAS
:

989 
±x_ªg_t
 
§c3_d©a
;

990 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c3
();

991 
§c3_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
to_ty≥
,Åhread, 1);

993  
to_ty≥
 ) {

994 
B32_TYPE
:

995 
U32_TYPE
:

996 
›_ªsu…
.
u32
 = 
	`MY_CAS_I
(
d©a
.u32, 
§c2_d©a
.u32, 
§c3_d©a
.u32);

997 
d©a_ªady
 = 
åue
;

999 
B64_TYPE
:

1000 
U64_TYPE
:

1001 
›_ªsu…
.
u64
 = 
	`MY_CAS_I
(
d©a
.u64, 
§c2_d©a
.u64, 
§c3_d©a
.u64);

1002 
d©a_ªady
 = 
åue
;

1004 
S32_TYPE
:

1005 
›_ªsu…
.
s32
 = 
	`MY_CAS_I
(
d©a
.s32, 
§c2_d©a
.s32, 
§c3_d©a
.s32);

1006 
d©a_ªady
 = 
åue
;

1009 
	`¥ötf
("Executi⁄Éº‹:Åy≥ mism©ch (%xËwôh in°ru˘i⁄\«tom.CAS o∆yác˚±†b32ánd b64\n", 
to_ty≥
);

1010 
	`as£π
(0);

1017 
ATOMIC_EXCH
:

1019  
to_ty≥
 ) {

1020 
B32_TYPE
:

1021 
U32_TYPE
:

1022 
›_ªsu…
.
u32
 = 
	`MY_EXCH
(
d©a
.u32, 
§c2_d©a
.u32);

1023 
d©a_ªady
 = 
åue
;

1025 
B64_TYPE
:

1026 
U64_TYPE
:

1027 
›_ªsu…
.
u64
 = 
	`MY_EXCH
(
d©a
.u64, 
§c2_d©a
.u64);

1028 
d©a_ªady
 = 
åue
;

1030 
S32_TYPE
:

1031 
›_ªsu…
.
s32
 = 
	`MY_EXCH
(
d©a
.s32, 
§c2_d©a
.s32);

1032 
d©a_ªady
 = 
åue
;

1035 
	`¥ötf
("Executi⁄Éº‹:Åy≥ mism©ch (%xËwôh in°ru˘i⁄\«tom.EXCH o∆yác˚±†b32\n", 
to_ty≥
);

1036 
	`as£π
(0);

1043 
ATOMIC_ADD
:

1046  
to_ty≥
 ) {

1047 
U32_TYPE
:

1048 
›_ªsu…
.
u32
 = 
d©a
.u32 + 
§c2_d©a
.u32;

1049 
d©a_ªady
 = 
åue
;

1051 
S32_TYPE
:

1052 
›_ªsu…
.
s32
 = 
d©a
.s32 + 
§c2_d©a
.s32;

1053 
d©a_ªady
 = 
åue
;

1055 
U64_TYPE
:

1056 
›_ªsu…
.
u64
 = 
d©a
.u64 + 
§c2_d©a
.u64;

1057 
d©a_ªady
 = 
åue
;

1059 
F32_TYPE
:

1060 
›_ªsu…
.
f32
 = 
d©a
.f32 + 
§c2_d©a
.f32;

1061 
d©a_ªady
 = 
åue
;

1064 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\natom.ADD onlyáccepts u32, s32, u64,ánd f32\n");

1065 
	`as£π
(0);

1072 
ATOMIC_INC
:

1074  
to_ty≥
 ) {

1075 
U32_TYPE
:

1076 
›_ªsu…
.
u32
 = 
	`MY_INC_I
(
d©a
.u32, 
§c2_d©a
.u32);

1077 
d©a_ªady
 = 
åue
;

1080 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\natom.INC onlyáccepts u32ánd s32\n");

1081 
	`as£π
(0);

1088 
ATOMIC_DEC
:

1090  
to_ty≥
 ) {

1091 
U32_TYPE
:

1092 
›_ªsu…
.
u32
 = 
	`MY_DEC_I
(
d©a
.u32, 
§c2_d©a
.u32);

1093 
d©a_ªady
 = 
åue
;

1096 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\natom.DEC onlyáccepts u32ánd s32\n");

1097 
	`as£π
(0);

1104 
ATOMIC_MIN
:

1106  
to_ty≥
 ) {

1107 
U32_TYPE
:

1108 
›_ªsu…
.
u32
 = 
	`MY_MIN_I
(
d©a
.u32, 
§c2_d©a
.u32);

1109 
d©a_ªady
 = 
åue
;

1111 
S32_TYPE
:

1112 
›_ªsu…
.
s32
 = 
	`MY_MIN_I
(
d©a
.s32, 
§c2_d©a
.s32);

1113 
d©a_ªady
 = 
åue
;

1116 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\natom.MIN onlyáccepts u32ánd s32\n");

1117 
	`as£π
(0);

1124 
ATOMIC_MAX
:

1126  
to_ty≥
 ) {

1127 
U32_TYPE
:

1128 
›_ªsu…
.
u32
 = 
	`MY_MAX_I
(
d©a
.u32, 
§c2_d©a
.u32);

1129 
d©a_ªady
 = 
åue
;

1131 
S32_TYPE
:

1132 
›_ªsu…
.
s32
 = 
	`MY_MAX_I
(
d©a
.s32, 
§c2_d©a
.s32);

1133 
d©a_ªady
 = 
åue
;

1136 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\natom.MAX onlyáccepts u32ánd s32\n");

1137 
	`as£π
(0);

1146 
	`as£π
(0);

1153 
thªad
->
	`gë_globÆ_mem‹y
()->
	`wrôe
(
§c1_d©a
.
u32
,
size
/8,&
›_ªsu…
.
s64
,thªad,
pI
);

1154 
	}
}

1157 
	$©om_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1163 
	`as£π
–
pI
->
	`gë_•a˚
()=
globÆ_•a˚
 );

1166 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1167 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1168 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

1169 
±x_ªg_t
 
§c1_d©a
;

1170 i‡(
d°
.
	`gë_symbﬁ
()->
	`ty≥
()){

1171 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

1173 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, src1, 
i_ty≥
,Åhread, 1);

1176 
mem‹y_•a˚_t
 
•a˚
 = 
pI
->
	`gë_•a˚
();

1178 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
§c1_d©a
.
u32
;

1179 
thªad
->
m_œ°_mem‹y_•a˚
 = 
•a˚
;

1180 
thªad
->
m_œ°_døm_ˇŒback
.
fun˘i⁄
 = 
©om_ˇŒback
;

1181 
thªad
->
m_œ°_døm_ˇŒback
.
ö°ru˘i⁄
 = 
pI
;

1182 
	}
}

1184 
	$b¨_sync_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1186 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1187 
±x_ªg_t
 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
d°
, d°, 
U32_TYPE
,Åhread, 1);

1188 
	`as£π
–
b
.
u32
 == 0 );

1189 
	}
}

1191 
	$b„_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

1192 
	$bfi_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

1193 
	$bföd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

1195 
	$bø_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1197 c⁄° 
›î™d_öfo
 &
èrgë
 = 
pI
->
	`d°
();

1198 
±x_ªg_t
 
èrgë_pc
 = 
thªad
->
	`gë_›î™d_vÆue
(
èrgë
,Å¨gë, 
U32_TYPE
,Åhread, 1);

1200 
thªad
->
m_bønch_èkí
 = 
åue
;

1201 
thªad
->
	`£t_≈c
(
èrgë_pc
);

1202 
	}
}

1204 
	$bªak_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1206 c⁄° 
›î™d_öfo
 &
èrgë
 = 
thªad
->
	`p›_bªakaddr
();

1207 
±x_ªg_t
 
èrgë_pc
 = 
thªad
->
	`gë_›î™d_vÆue
(
èrgë
,Å¨gë, 
U32_TYPE
,Åhread, 1);

1209 
thªad
->
m_bønch_èkí
 = 
åue
;

1210 
thªad
->
	`£t_≈c
(
èrgë_pc
);

1211 
	}
}

1213 
	$bªakaddr_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1215 c⁄° 
›î™d_öfo
 &
èrgë
 = 
pI
->
	`d°
();

1216 
thªad
->
	`push_bªakaddr
(
èrgë
);

1217 
	`as£π
(
pI
->
	`has_¥ed
(Ë=
Ál£
);

1218 
	}
}

1220 
	$bªv_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

1221 
	$brk±_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

1223 
	$ˇŒ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1225 
ˇŒ_uid_√xt
 = 1;

1227 c⁄° 
›î™d_öfo
 &
èrgë
 = 
pI
->
	`func_addr
();

1228 
	`as£π
–
èrgë
.
	`is_fun˘i⁄_addªss
() );

1229 c⁄° 
symbﬁ
 *
func_addr
 = 
èrgë
.
	`gë_symbﬁ
();

1230 c⁄° 
fun˘i⁄_öfo
 *
èrgë_func
 = 
func_addr
->
	`gë_pc
();

1233 if–
pI
->
	`has_ªtu∫
(Ë^ 
èrgë_func
->has_return() ) {

1234 
	`¥ötf
("GPGPU-Sim PTX: ExecutionÉrror - mismatch inÇumber ofÑeturn values between\n"

1236 
	`ab‹t
();

1238 
n_ªtu∫
 = 
èrgë_func
->
	`has_ªtu∫
();

1239 
n_¨gs
 = 
èrgë_func
->
	`num_¨gs
();

1240 
n_›î™ds
 = 
pI
->
	`gë_num_›î™ds
();

1242 if–
n_›î™ds
 !(
n_ªtu∫
+1+
n_¨gs
) ) {

1243 
	`¥ötf
("GPGPU-Sim PTX: ExecutionÉrror - mismatch inÇumber ofárguements between\n"

1245 
	`ab‹t
();

1249 
°d
::
°rög
 
‚ame
 = 
èrgë_func
->
	`gë_«me
();

1250 if–
‚ame
 == "vprintf" ) {

1251 
	`gpgpusim_cuda_v¥ötf
(
pI
, 
thªad
, 
èrgë_func
);

1256 
¨g_buf„r_li°_t
 
¨g_vÆues
;

1257 
	`c›y_¨gs_öto_buf„r_li°
(
pI
, 
thªad
, 
èrgë_func
, 
¨g_vÆues
);

1260 c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
 = 
NULL
;

1261 c⁄° 
symbﬁ
 *
ªtu∫_v¨_d°
 = 
NULL
;

1262 if–
èrgë_func
->
	`has_ªtu∫
() ) {

1263 
ªtu∫_v¨_d°
 = 
pI
->
	`d°
().
	`gë_symbﬁ
();

1264 
ªtu∫_v¨_§c
 = 
èrgë_func
->
	`gë_ªtu∫_v¨
();

1267 
sid
 = 
thªad
->
	`gë_hw_sid
();

1268 
tid
 = 
thªad
->
	`gë_hw_tid
();

1269 
gpgpu_sim
 *
gpu
 = 
thªad
->
	`gë_gpu
();

1270 
ˇŒì_pc
=0, 
ˇŒì_Ωc
=0;

1271 if–
gpu
->
	`simd_modñ
(Ë=
POST_DOMINATOR
 ) {

1272 
gpu
->
	`gë_pdom_°ack_t›_öfo
(
sid
,
tid
,&
ˇŒì_pc
,&
ˇŒì_Ωc
);

1273 
	`as£π
–
ˇŒì_pc
 =
thªad
->
	`gë_pc
() );

1276 
thªad
->
	`ˇŒ°ack_push
(
ˇŒì_pc
 + 
pI
->
	`ö°_size
(), 
ˇŒì_Ωc
, 
ªtu∫_v¨_§c
, 
ªtu∫_v¨_d°
, 
ˇŒ_uid_√xt
++);

1278 
	`c›y_buf„r_li°_öto_‰ame
(
thªad
, 
¨g_vÆues
);

1280 
thªad
->
	`£t_≈c
(
èrgë_func
);

1281 
	}
}

1284 
	$ˇŒp_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1287 
ˇŒ_uid_√xt
 = 1;

1289 c⁄° 
›î™d_öfo
 &
èrgë
 = 
pI
->
	`d°
();

1290 
±x_ªg_t
 
èrgë_pc
 = 
thªad
->
	`gë_›î™d_vÆue
(
èrgë
,Å¨gë, 
U32_TYPE
,Åhread, 1);

1292 c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
 = 
NULL
;

1293 c⁄° 
symbﬁ
 *
ªtu∫_v¨_d°
 = 
NULL
;

1295 
sid
 = 
thªad
->
	`gë_hw_sid
();

1296 
tid
 = 
thªad
->
	`gë_hw_tid
();

1297 
gpgpu_sim
 *
gpu
 = 
thªad
->
	`gë_gpu
();

1298 
ˇŒì_pc
=0, 
ˇŒì_Ωc
=0;

1299 if–
gpu
->
	`simd_modñ
(Ë=
POST_DOMINATOR
 ) {

1300 
gpu
->
	`gë_pdom_°ack_t›_öfo
(
sid
,
tid
,&
ˇŒì_pc
,&
ˇŒì_Ωc
);

1301 
	`as£π
–
ˇŒì_pc
 =
thªad
->
	`gë_pc
() );

1304 
thªad
->
	`ˇŒ°ack_push_∂us
(
ˇŒì_pc
 + 
pI
->
	`ö°_size
(), 
ˇŒì_Ωc
, 
ªtu∫_v¨_§c
, 
ªtu∫_v¨_d°
, 
ˇŒ_uid_√xt
++);

1305 
thªad
->
	`£t_≈c
(
èrgë_pc
);

1306 
	}
}

1308 
	$˛z_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1310 
±x_ªg_t
 
a
, 
d
;

1311 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1312 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1314 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

1315 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

1317 
max
;

1318 
mask
;

1319 
d
.
u64
 = 0;

1321  
i_ty≥
 ) {

1322 
B32_TYPE
:

1323 
max
 = 32;

1324 
mask
 = 0x80000000;

1326 
B64_TYPE
:

1327 
max
 = 64;

1328 
mask
 = 0x8000000000000000;

1331 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

1332 
	`as£π
(0);

1336 (
d
.
u32
 < 
max
Ë&& ((
a
.
u64
&
mask
) == 0) ) {

1337 
d
.
u32
++;

1338 
a
.
u64
 =á.u64 << 1;

1341 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
B32_TYPE
,Åhªad, 
pI
);

1342 
	}
}

1344 
	$˙Ÿ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1346 
±x_ªg_t
 
a
, 
b
, 
d
;

1347 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1348 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1350 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

1351 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

1353  
i_ty≥
 ) {

1354 
PRED_TYPE
: 
d
.
¥ed
 = ((
a
.pred & 0x0001) == 0)?1:0; ;

1355 
B16_TYPE
: 
d
.
u16
 = (
a
.u16 == 0)?1:0; ;

1356 
B32_TYPE
: 
d
.
u32
 = (
a
.u32 == 0)?1:0; ;

1357 
B64_TYPE
: 
d
.
u64
 = (
a
.u64 == 0)?1:0; ;

1359 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

1360 
	`as£π
(0);

1364 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

1365 
	}
}

1367 
	$cos_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1369 
±x_ªg_t
 
a
, 
d
;

1370 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1371 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1373 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

1374 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

1377  
i_ty≥
 ) {

1378 
F32_TYPE
:

1379 
d
.
f32
 = 
	`cos
(
a
.f32);

1382 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

1383 
	`as£π
(0);

1387 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

1388 
	}
}

1390 
±x_ªg_t
 
	$ch›
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1392  
to_width
 ) {

1393 8: 
x
.
	`mask_™d
(0,0xFF); ;

1394 16: 
x
.
	`mask_™d
(0,0xFFFF); ;

1395 32: 
x
.
	`mask_™d
(0,0xFFFFFFFF); ;

1397 : 
	`as£π
(0);

1399  
x
;

1400 
	}
}

1402 
±x_ªg_t
 
	$£xt
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1404 
x
=
	`ch›
(x,0,
‰om_width
,0,
roundög_mode
,
ßtuøti⁄_mode
);

1405  
‰om_width
 ) {

1406 8: i‡–
x
.
	`gë_bô
(7ËËx.
	`mask_‹
(0xFFFFFFFF,0xFFFFFF00);;

1407 16:i‡–
x
.
	`gë_bô
(15ËËx.
	`mask_‹
(0xFFFFFFFF,0xFFFF0000);;

1408 32: i‡–
x
.
	`gë_bô
(31ËËx.
	`mask_‹
(0xFFFFFFFF,0x00000000);;

1410 : 
	`as£π
(0);

1412  
x
;

1413 
	}
}

1415 
±x_ªg_t
 
	$zext
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1417  
	`ch›
(
x
,0,
‰om_width
,0,
roundög_mode
,
ßtuøti⁄_mode
);

1418 
	}
}

1420 
	$ßtuøãi
(
a
, 
max
, 
mö
)

1422 i‡(
a
 > 
max
)á = max;

1423 i‡(
a
 < 
mö
)á = min;

1424  
a
;

1425 
	}
}

1427 
	$ßtuøãi
(
a
, 
max
)

1429 i‡(
a
 > 
max
)á = max;

1430  
a
;

1431 
	}
}

1433 
±x_ªg_t
 
	$f2x
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1435 
	`as£π
–
‰om_width
 == 32);

1437 
cuda_m©h
::
cudaRoundMode
 
mode
 = cuda_m©h::
cudaRoundZîo
;

1438 
roundög_mode
) {

1439 
RZI_OPTION
: 
mode
 = 
cuda_m©h
::
cudaRoundZîo
; ;

1440 
RNI_OPTION
: 
mode
 = 
cuda_m©h
::
cudaRoundNóª°
; ;

1441 
RMI_OPTION
: 
mode
 = 
cuda_m©h
::
cudaRoundMöInf
; ;

1442 
RPI_OPTION
: 
mode
 = 
cuda_m©h
::
cudaRoundPosInf
; ;

1446 
±x_ªg_t
 
y
;

1447 i‡–
to_sign
 == 1 ) {

1448 
tmp
 = 
cuda_m©h
::
	`Êﬂt2öt
(
x
.
f32
, 
mode
);

1449 i‡((
x
.
u32
 & 0x7f800000) == 0)

1450 
tmp
 = 0;

1451 i‡(
ßtuøti⁄_mode
 && 
to_width
 < 32) {

1452 
tmp
 = 
	`ßtuøãi
—mp, (1<<
to_width
) - 1, -(1<<to_width));

1454  
to_width
 ) {

1455 8: 
y
.
s8
 = ()
tmp
; ;

1456 16: 
y
.
s16
 = ()
tmp
; ;

1457 32: 
y
.
s32
 = ()
tmp
; ;

1458 64: 
y
.
s64
 = ()
tmp
; ;

1459 : 
	`as£π
(0); ;

1461 } i‡–
to_sign
 == 0 ) {

1462 
tmp
 = 
cuda_m©h
::
	`Êﬂt2uöt
(
x
.
f32
, 
mode
);

1463 i‡((
x
.
u32
 & 0x7f800000) == 0)

1464 
tmp
 = 0;

1465 i‡(
ßtuøti⁄_mode
 && 
to_width
 < 32) {

1466 
tmp
 = 
	`ßtuøãi
—mp, (1<<
to_width
) - 1);

1468  
to_width
 ) {

1469 8: 
y
.
u8
 = ()
tmp
; ;

1470 16: 
y
.
u16
 = ()
tmp
; ;

1471 32: 
y
.
u32
 = ()
tmp
; ;

1472 64: 
y
.
u64
 = ()
tmp
; ;

1473 : 
	`as£π
(0); ;

1476  
to_width
 ) {

1477 16: 
	`as£π
(0); ;

1478 32: 
	`as£π
(0); ;

1480 
y
.
f64
 = 
x
.
f32
;

1482 : 
	`as£π
(0); ;

1485  
y
;

1486 
	}
}

1488 
	$ßtuøãd2i
 (
a
, 
max
, 
mö
) {

1489 i‡(
a
 > 
max
)á = max;

1490 i‡(
a
 < 
mö
)á = min;

1491  
a
;

1492 
	}
}

1494 
±x_ªg_t
 
	$d2x
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1496 
	`as£π
–
‰om_width
 == 64);

1498 
tmp
;

1499 
roundög_mode
) {

1500 
RZI_OPTION
: 
tmp
 = 
	`åunc
(
x
.
f64
); ;

1501 
RNI_OPTION
: 
tmp
 = 
	`√¨byöt
(
x
.
f64
); ;

1502 
RMI_OPTION
: 
tmp
 = 
	`Êo‹
(
x
.
f64
); ;

1503 
RPI_OPTION
: 
tmp
 = 
	`˚û
(
x
.
f64
); ;

1504 : 
tmp
 = 
x
.
f64
; ;

1507 
±x_ªg_t
 
y
;

1508 i‡–
to_sign
 == 1 ) {

1509 
tmp
 = 
	`ßtuøãd2i
—mp, ((1<<(
to_width
 - 1)) - 1), (1<<(to_width - 1)) );

1510  
to_width
 ) {

1511 8: 
y
.
s8
 = ()
tmp
; ;

1512 16: 
y
.
s16
 = ()
tmp
; ;

1513 32: 
y
.
s32
 = ()
tmp
; ;

1514 64: 
y
.
s64
 = ()
tmp
; ;

1515 : 
	`as£π
(0); ;

1517 } i‡–
to_sign
 == 0 ) {

1518 
tmp
 = 
	`ßtuøãd2i
—mp, ((1<<(
to_width
 - 1)) - 1), 0);

1519  
to_width
 ) {

1520 8: 
y
.
u8
 = ()
tmp
; ;

1521 16: 
y
.
u16
 = ()
tmp
; ;

1522 32: 
y
.
u32
 = ()
tmp
; ;

1523 64: 
y
.
u64
 = ()
tmp
; ;

1524 : 
	`as£π
(0); ;

1527  
to_width
 ) {

1528 16: 
	`as£π
(0); ;

1530 
y
.
f32
 = 
x
.
f64
;

1533 
y
.
f64
 = 
x
.f64;

1535 : 
	`as£π
(0); ;

1538  
y
;

1539 
	}
}

1541 
±x_ªg_t
 
	$s2f
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1543 
±x_ªg_t
 
y
;

1545 i‡(
‰om_width
 < 64) {

1546 
y
 = 
	`£xt
(
x
,
‰om_width
,32,0,
roundög_mode
,
ßtuøti⁄_mode
);

1548  
to_width
 ) {

1549 16: 
	`as£π
(0); ;

1551 
roundög_mode
) {

1552 
RZ_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__öt2Êﬂt_rz
(y.
s32
); ;

1553 
RN_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__öt2Êﬂt_∫
(y.
s32
); ;

1554 
RM_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__öt2Êﬂt_rd
(y.
s32
); ;

1555 
RP_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__öt2Êﬂt_ru
(y.
s32
); ;

1559 64: 
y
.
f64
 = y.
s32
; ;

1560 : 
	`as£π
(0); ;

1563  
to_width
 ) {

1564 16: 
	`as£π
(0); ;

1566 
roundög_mode
) {

1567 
RZ_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__Œ2Êﬂt_rz
(y.
s64
); ;

1568 
RN_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__Œ2Êﬂt_∫
(y.
s64
); ;

1569 
RM_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__Œ2Êﬂt_rd
(y.
s64
); ;

1570 
RP_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__Œ2Êﬂt_ru
(y.
s64
); ;

1574 64: 
y
.
f64
 = y.
s64
; ;

1575 : 
	`as£π
(0); ;

1580  
y
;

1581 
	}
}

1583 
±x_ªg_t
 
	$u2f
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1585 
±x_ªg_t
 
y
;

1587 i‡(
‰om_width
 < 64) {

1588 
y
 = 
	`zext
(
x
,
‰om_width
,32,0,
roundög_mode
,
ßtuøti⁄_mode
);

1590  
to_width
 ) {

1591 16: 
	`as£π
(0); ;

1593 
roundög_mode
) {

1594 
RZ_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uöt2Êﬂt_rz
(y.
u32
); ;

1595 
RN_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uöt2Êﬂt_∫
(y.
u32
); ;

1596 
RM_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uöt2Êﬂt_rd
(y.
u32
); ;

1597 
RP_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uöt2Êﬂt_ru
(y.
u32
); ;

1601 64: 
y
.
f64
 = y.
u32
; ;

1602 : 
	`as£π
(0); ;

1605  
to_width
 ) {

1606 16: 
	`as£π
(0); ;

1608 
roundög_mode
) {

1609 
RZ_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uŒ2Êﬂt_∫
(y.
u64
); ;

1610 
RN_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uŒ2Êﬂt_∫
(y.
u64
); ;

1611 
RM_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uŒ2Êﬂt_∫
(y.
u64
); ;

1612 
RP_OPTION
: 
y
.
f32
 = 
cuda_m©h
::
	`__uŒ2Êﬂt_∫
(y.
u64
); ;

1616 64: 
y
.
f64
 = y.
u64
; ;

1617 : 
	`as£π
(0); ;

1622  
y
;

1623 
	}
}

1625 
±x_ªg_t
 
	$f2f
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1627 
±x_ªg_t
 
y
;

1628  
roundög_mode
 ) {

1629 
RZI_OPTION
:

1630 
y
.
f32
 = 
	`åuncf
(
x
.f32);

1632 
RNI_OPTION
:

1633 #i‡
CUDART_VERSION
 >= 3000

1634 
y
.
f32
 = 
	`√¨byötf
(
x
.f32);

1636 
y
.
f32
 = 
cuda_m©h
::
	`__öã∫Æ_√¨byötf
(
x
.f32);

1639 
RMI_OPTION
:

1640 i‡((
x
.
u32
 & 0x7f800000) == 0) {

1641 
y
.
u32
 = 
x
.u32 & 0x80000000;

1643 
y
.
f32
 = 
	`Êo‹f
(
x
.f32);

1646 
RPI_OPTION
:

1647 i‡((
x
.
u32
 & 0x7f800000) == 0) {

1648 
y
.
u32
 = 
x
.u32 & 0x80000000;

1650 
y
.
f32
 = 
	`˚ûf
(
x
.f32);

1654 i‡((
x
.
u32
 & 0x7f800000) == 0) {

1655 
y
.
u32
 = 
x
.u32 & 0x80000000;

1657 
y
.
f32
 = 
x
.f32;

1661 #i‡
CUDART_VERSION
 >= 3000

1662 i‡(
	`i¢™f
(
y
.
f32
))

1664 i‡(
cuda_m©h
::
	`__cuda___i¢™f
(
y
.
f32
))

1667 
y
.
u32
 = 0x7fffffff;

1668 } i‡(
ßtuøti⁄_mode
) {

1669 
y
.
f32
 = 
cuda_m©h
::
	`__ßtuøãf
(y.f32);

1672  
y
;

1673 
	}
}

1675 
±x_ªg_t
 
	$d2d
–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
 )

1677 
±x_ªg_t
 
y
;

1678  
roundög_mode
 ) {

1679 
RZI_OPTION
:

1680 
y
.
f64
 = 
	`åunc
(
x
.f64);

1682 
RNI_OPTION
:

1683 #i‡
CUDART_VERSION
 >= 3000

1684 
y
.
f64
 = 
	`√¨byöt
(
x
.f64);

1686 
y
.
f64
 = 
cuda_m©h
::
	`__öã∫Æ_√¨byötf
(
x
.f64);

1689 
RMI_OPTION
:

1690 
y
.
f64
 = 
	`Êo‹
(
x
.f64);

1692 
RPI_OPTION
:

1693 
y
.
f64
 = 
	`˚û
(
x
.f64);

1696 
y
.
f64
 = 
x
.f64;

1699 i‡(
	`i¢™
(
y
.
f64
)) {

1700 
y
.
u64
 = 0xfff8000000000000ull;

1701 } i‡(
ßtuøti⁄_mode
) {

1702 
y
.
f64
 = 
cuda_m©h
::
	`__ßtuøãf
(y.f64);

1704  
y
;

1705 
	}
}

1707 
	$±x_ªg_t
 (*
g_cvt_‚
[11][11])–
±x_ªg_t
 
x
, 
‰om_width
, 
to_width
, 
to_sign
,

1708 
roundög_mode
, 
ßtuøti⁄_mode
 ) = {

1709 { 
NULL
, 
£xt
, sext, sext, NULL, sext, sext, sext, 
s2f
, s2f, s2f},

1710 { 
ch›
, 
NULL
, 
£xt
, sext, ch›, NULL, sext, sext, 
s2f
, s2f, s2f},

1711 { 
ch›
, ch›, 
NULL
, 
£xt
, ch›, ch›, NULL, sext, 
s2f
, s2f, s2f},

1712 { 
ch›
, ch›, ch›, 
NULL
, ch›, ch›, ch›, NULL, 
s2f
, s2f, s2f},

1713 { 
NULL
, 
zext
, zext, zext, NULL, zext, zext, zext, 
u2f
, u2f, u2f},

1714 { 
ch›
, 
NULL
, 
zext
, zext, ch›, NULL, zext, zext, 
u2f
, u2f, u2f},

1715 { 
ch›
, ch›, 
NULL
, 
zext
, ch›, ch›, NULL, zext, 
u2f
, u2f, u2f},

1716 { 
ch›
, ch›, ch›, 
NULL
, ch›, ch›, ch›, NULL, 
u2f
, u2f, u2f},

1717 { 
f2x
 , f2x , f2x , f2x , f2x , f2x , f2x , f2x , 
NULL
,f2x, f2x},

1718 { 
f2x
 , f2x , f2x , f2x , f2x , f2x , f2x , f2x , f2x, 
f2f
, f2x},

1719 { 
d2x
 , d2x , d2x , d2x , d2x , d2x , d2x , d2x , d2x, d2x, 
d2d
}

1720 
	}
};

1722 
	$±x_round
(
±x_ªg_t
& 
d©a
, 
roundög_mode
, 
ty≥
)

1724 i‡(
roundög_mode
 =
RN_OPTION
) {

1727  
roundög_mode
 ) {

1728 
RZI_OPTION
:

1729  
ty≥
 ) {

1730 
S8_TYPE
:

1731 
S16_TYPE
:

1732 
S32_TYPE
:

1733 
S64_TYPE
:

1734 
U8_TYPE
:

1735 
U16_TYPE
:

1736 
U32_TYPE
:

1737 
U64_TYPE
:

1738 
	`¥ötf
("TryögÅÿroundá¿öãgî??\n"); 
	`as£π
(0); ;

1739 
F16_TYPE
: 
	`as£π
(0); ;

1740 
F32_TYPE
:

1741 
d©a
.
f32
 = 
	`åuncf
(data.f32);

1743 
F64_TYPE
:

1744 
FF64_TYPE
:

1745 i‡(
d©a
.
f64
 < 0Ëd©a.f64 = 
	`˚û
(data.f64);

1746 
d©a
.
f64
 = 
	`Êo‹
(data.f64);

1748 : 
	`as£π
(0); ;

1751 
RNI_OPTION
:

1752  
ty≥
 ) {

1753 
S8_TYPE
:

1754 
S16_TYPE
:

1755 
S32_TYPE
:

1756 
S64_TYPE
:

1757 
U8_TYPE
:

1758 
U16_TYPE
:

1759 
U32_TYPE
:

1760 
U64_TYPE
:

1761 
	`¥ötf
("TryögÅÿroundá¿öãgî??\n"); 
	`as£π
(0); ;

1762 
F16_TYPE
: 
	`as£π
(0); ;

1763 
F32_TYPE
:

1764 #i‡
CUDART_VERSION
 >= 3000

1765 
d©a
.
f32
 = 
	`√¨byötf
(data.f32);

1767 
d©a
.
f32
 = 
cuda_m©h
::
	`__cuda_√¨byötf
(data.f32);

1770 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
	`round
(data.f64); ;

1771 : 
	`as£π
(0); ;

1774 
RMI_OPTION
:

1775  
ty≥
 ) {

1776 
S8_TYPE
:

1777 
S16_TYPE
:

1778 
S32_TYPE
:

1779 
S64_TYPE
:

1780 
U8_TYPE
:

1781 
U16_TYPE
:

1782 
U32_TYPE
:

1783 
U64_TYPE
:

1784 
	`¥ötf
("TryögÅÿroundá¿öãgî??\n"); 
	`as£π
(0); ;

1785 
F16_TYPE
: 
	`as£π
(0); ;

1786 
F32_TYPE
:

1787 
d©a
.
f32
 = 
	`Êo‹f
(data.f32);

1789 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
	`Êo‹
(data.f64); ;

1790 : 
	`as£π
(0); ;

1793 
RPI_OPTION
:

1794  
ty≥
 ) {

1795 
S8_TYPE
:

1796 
S16_TYPE
:

1797 
S32_TYPE
:

1798 
S64_TYPE
:

1799 
U8_TYPE
:

1800 
U16_TYPE
:

1801 
U32_TYPE
:

1802 
U64_TYPE
:

1803 
	`¥ötf
("TryögÅÿroundá¿öãgî??\n"); 
	`as£π
(0); ;

1804 
F16_TYPE
: 
	`as£π
(0); ;

1805 
F32_TYPE
: 
d©a
.
f32
 = 
	`˚ûf
(data.f32); ;

1806 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
	`˚û
(data.f64); ;

1807 : 
	`as£π
(0); ;

1813 i‡(
ty≥
 =
F32_TYPE
) {

1814 #i‡
CUDART_VERSION
 >= 3000

1815 i‡(
	`i¢™f
(
d©a
.
f32
))

1817 i‡(
cuda_m©h
::
	`__cuda___i¢™f
(
d©a
.
f32
))

1820 
d©a
.
u32
 = 0x7fffffff;

1823 i‡((
ty≥
 =
F64_TYPE
)||—y≥ =
FF64_TYPE
)) {

1824 i‡(
	`i¢™
(
d©a
.
f64
)) {

1825 
d©a
.
u64
 = 0xfff8000000000000ull;

1828 
	}
}

1830 
	$±x_ßtuøã
(
±x_ªg_t
& 
d©a
, 
ßtuøti⁄_mode
, 
ty≥
)

1832 i‡(!
ßtuøti⁄_mode
) {

1835  
ty≥
 ) {

1836 
S8_TYPE
:

1837 
S16_TYPE
:

1838 
S32_TYPE
:

1839 
S64_TYPE
:

1840 
U8_TYPE
:

1841 
U16_TYPE
:

1842 
U32_TYPE
:

1843 
U64_TYPE
:

1844 
	`¥ötf
("TryögÅÿ˛am∞™ i¡egîÅÿ1??\n"); 
	`as£π
(0); ;

1845 
F16_TYPE
: 
	`as£π
(0); ;

1846 
F32_TYPE
:

1847 i‡(
d©a
.
f32
 > 1.0f) data.f32 = 1.0f;

1848 i‡(
d©a
.
f32
 < 0.0f) data.f32 = 0.0f;

1850 
F64_TYPE
:

1851 
FF64_TYPE
:

1852 i‡(
d©a
.
f64
 > 1.0f) data.f64 = 1.0f;

1853 i‡(
d©a
.
f64
 < 0.0f) data.f64 = 0.0f;

1855 : 
	`as£π
(0); ;

1858 
	}
}

1860 
	$cvt_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1862 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1863 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1864 
to_ty≥
 = 
pI
->
	`gë_ty≥
();

1865 
‰om_ty≥
 = 
pI
->
	`gë_ty≥2
();

1866 
roundög_mode
 = 
pI
->
	`roundög_mode
();

1867 
ßtuøti⁄_mode
 = 
pI
->
	`ßtuøti⁄_mode
();

1869 i‡–
to_ty≥
 =
F16_TYPE
 || 
‰om_ty≥
 == F16_TYPE )

1870 
	`ab‹t
();

1872 
to_sign
, 
‰om_sign
;

1873 
size_t
 
‰om_width
, 
to_width
;

1874 
§c_fmt
 = 
ty≥_öfo_key
::
	`ty≥_decode
(
‰om_ty≥
, 
‰om_width
, 
‰om_sign
);

1875 
d°_fmt
 = 
ty≥_öfo_key
::
	`ty≥_decode
(
to_ty≥
, 
to_width
, 
to_sign
);

1877 
±x_ªg_t
 
d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
‰om_ty≥
,Åhread, 1);

1879 if(
pI
->
	`is_√g
()){

1881  
‰om_ty≥
 ) {

1883 
S8_TYPE
:

1884 
U8_TYPE
:

1885 
B8_TYPE
:

1886 
d©a
.
s8
 = -data.s8;

1888 
S16_TYPE
:

1889 
U16_TYPE
:

1890 
B16_TYPE
:

1891 
d©a
.
s16
 = -data.s16;

1893 
S32_TYPE
:

1894 
U32_TYPE
:

1895 
B32_TYPE
:

1896 
d©a
.
s32
 = -data.s32;

1898 
S64_TYPE
:

1899 
U64_TYPE
:

1900 
B64_TYPE
:

1901 
d©a
.
s64
 = -data.s64;

1903 
F16_TYPE
:

1904 
d©a
.
f16
 = -data.f16;

1906 
F32_TYPE
:

1907 
d©a
.
f32
 = -data.f32;

1909 
F64_TYPE
:

1910 
FF64_TYPE
:

1911 
d©a
.
f64
 = -data.f64;

1914 
	`as£π
(0);

1920 i‡–
g_cvt_‚
[
§c_fmt
][
d°_fmt
] !
NULL
 ) {

1921 
±x_ªg_t
 
ªsu…
 = 
g_cvt_‚
[
§c_fmt
][
d°_fmt
](
d©a
,
‰om_width
,
to_width
,
to_sign
, 
roundög_mode
, 
ßtuøti⁄_mode
);

1922 
d©a
 = 
ªsu…
;

1925 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
to_ty≥
,Åhªad, 
pI
 );

1926 
	}
}

1928 
	$cvè_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1930 
±x_ªg_t
 
d©a
;

1932 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1933 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1934 
mem‹y_•a˚_t
 
•a˚
 = 
pI
->
	`gë_•a˚
();

1935 
boﬁ
 
to_n⁄_gíîic
 = 
pI
->
	`is_to
();

1937 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

1938 
±x_ªg_t
 
‰om_addr
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
,
d°
,
i_ty≥
,thread,1);

1939 
addr_t
 
‰om_addr_hw
 = (addr_t)
‰om_addr
.
u64
;

1940 
addr_t
 
to_addr_hw
 = 0;

1941 
smid
 = 
thªad
->
	`gë_hw_sid
();

1942 
hwtid
 = 
thªad
->
	`gë_hw_tid
();

1944 if–
to_n⁄_gíîic
 ) {

1945  
•a˚
.
	`gë_ty≥
() ) {

1946 
sh¨ed_•a˚
: 
to_addr_hw
 = 
	`gíîic_to_sh¨ed
–
smid
, 
‰om_addr_hw
 ); ;

1947 
loˇl_•a˚
: 
to_addr_hw
 = 
	`gíîic_to_loˇl
–
smid
, 
hwtid
, 
‰om_addr_hw
 ); ;

1948 
globÆ_•a˚
: 
to_addr_hw
 = 
	`gíîic_to_globÆ
(
‰om_addr_hw
 ); ;

1949 : 
	`ab‹t
();

1952  
•a˚
.
	`gë_ty≥
() ) {

1953 
sh¨ed_•a˚
: 
to_addr_hw
 = 
	`sh¨ed_to_gíîic
–
smid
, 
‰om_addr_hw
 ); ;

1954 
loˇl_•a˚
: 
to_addr_hw
 = 
	`loˇl_to_gíîic
–
smid
, 
hwtid
, 
‰om_addr_hw
 )

1955 + 
thªad
->
	`gë_loˇl_mem_°ack_poöãr
(); ;

1956 
globÆ_•a˚
: 
to_addr_hw
 = 
	`globÆ_to_gíîic
–
‰om_addr_hw
 ); ;

1957 : 
	`ab‹t
();

1961 
±x_ªg_t
 
to_addr
;

1962 
to_addr
.
u64
 = 
to_addr_hw
;

1963 
thªad
->
	`£t_ªg
(
d°
.
	`gë_symbﬁ
(),
to_addr
);

1964 
	}
}

1966 
	$div_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

1968 
±x_ªg_t
 
d©a
;

1970 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

1971 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

1972 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

1974 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

1976 
±x_ªg_t
 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

1977 
±x_ªg_t
 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

1980  
i_ty≥
 ) {

1981 
S8_TYPE
:

1982 
d©a
.
s8
 = 
§c1_d©a
.s8 / 
§c2_d©a
.s8 ; ;

1983 
S16_TYPE
:

1984 
d©a
.
s16
 = 
§c1_d©a
.s16 / 
§c2_d©a
.s16; ;

1985 
S32_TYPE
:

1986 
d©a
.
s32
 = 
§c1_d©a
.s32 / 
§c2_d©a
.s32; ;

1987 
S64_TYPE
:

1988 
d©a
.
s64
 = 
§c1_d©a
.s64 / 
§c2_d©a
.s64; ;

1989 
U8_TYPE
:

1990 
d©a
.
u8
 = 
§c1_d©a
.u8 / 
§c2_d©a
.u8 ; ;

1991 
U16_TYPE
:

1992 
d©a
.
u16
 = 
§c1_d©a
.u16 / 
§c2_d©a
.u16; ;

1993 
U32_TYPE
:

1994 
d©a
.
u32
 = 
§c1_d©a
.u32 / 
§c2_d©a
.u32; ;

1995 
U64_TYPE
:

1996 
d©a
.
u64
 = 
§c1_d©a
.u64 / 
§c2_d©a
.u64; ;

1997 
B8_TYPE
:

1998 
d©a
.
u8
 = 
§c1_d©a
.u8 / 
§c2_d©a
.u8 ; ;

1999 
B16_TYPE
:

2000 
d©a
.
u16
 = 
§c1_d©a
.u16 / 
§c2_d©a
.u16; ;

2001 
B32_TYPE
:

2002 
d©a
.
u32
 = 
§c1_d©a
.u32 / 
§c2_d©a
.u32; ;

2003 
B64_TYPE
:

2004 
d©a
.
u64
 = 
§c1_d©a
.u64 / 
§c2_d©a
.u64; ;

2005 
F16_TYPE
: 
	`as£π
(0); ;

2006 
F32_TYPE
: 
d©a
.
f32
 = 
§c1_d©a
.f32 / 
§c2_d©a
.f32; ;

2007 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
§c1_d©a
.f64 / 
§c2_d©a
.f64; ;

2008 : 
	`as£π
(0); ;

2010 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad,
pI
);

2011 
	}
}

2013 
	$ex2_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2015 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2016 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2017 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2019 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2021 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2024  
i_ty≥
 ) {

2025 
F32_TYPE
:

2026 
d©a
.
f32
 = 
cuda_m©h
::
	`__powf
(2.0, 
§c1_d©a
.f32);

2029 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2030 
	`as£π
(0);

2034 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad,
pI
);

2035 
	}
}

2037 
	$exô_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2039 
thªad
->
	`£t_d⁄e
();

2040 
thªad
->
	`exôC‹e
();

2041 
thªad
->
	`ªgi°îExô
();

2042 
	}
}

2044 
mad_def
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 );

2046 
	$fma_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2048 
	`mad_def
(
pI
,
thªad
);

2049 
	}
}

2051 
	$is•a˚p_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2053 
±x_ªg_t
 
a
;

2054 
boﬁ
 
t
=
Ál£
;

2056 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2057 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2058 
mem‹y_•a˚_t
 
•a˚
 = 
pI
->
	`gë_•a˚
();

2060 
a
 = 
thªad
->
	`gë_ªg
(
§c1
.
	`gë_symbﬁ
());

2061 
addr_t
 
addr
 = (addr_t)
a
.
u64
;

2062 
smid
 = 
thªad
->
	`gë_hw_sid
();

2063 
hwtid
 = 
thªad
->
	`gë_hw_tid
();

2065  
•a˚
.
	`gë_ty≥
() ) {

2066 
sh¨ed_•a˚
: 
t
 = 
	`is•a˚_sh¨ed
–
smid
, 
addr
 );

2067 
loˇl_•a˚
: 
t
 = 
	`is•a˚_loˇl
–
smid
, 
hwtid
, 
addr
 );

2068 
globÆ_•a˚
: 
t
 = 
	`is•a˚_globÆ
–
addr
 );

2069 : 
	`ab‹t
();

2072 
±x_ªg_t
 
p
;

2073 
p
.
¥ed
 = 
t
?1:0;

2075 
thªad
->
	`£t_ªg
(
d°
.
	`gë_symbﬁ
(),
p
);

2076 
	}
}

2078 
	$decode_•a˚
–
mem‹y_•a˚_t
 &
•a˚
, 
±x_thªad_öfo
 *
thªad
, c⁄° 
›î™d_öfo
 &
›
, 
mem‹y_•a˚
 *&
mem
, 
addr_t
 &
addr
)

2080 
smid
 = 
thªad
->
	`gë_hw_sid
();

2081 
hwtid
 = 
thªad
->
	`gë_hw_tid
();

2083 if–
•a˚
 =
∑øm_•a˚_un˛assifõd
 ) {

2085 c⁄° 
symbﬁ
 *
s
 = 
›
.
	`gë_symbﬁ
();

2086 c⁄° 
ty≥_öfo
 *
t
 = 
s
->
	`ty≥
();

2087 
ty≥_öfo_key
 
ti
 = 
t
->
	`gë_key
();

2088 if–
ti
.
	`is_∑øm_kî√l
() )

2089 
•a˚
 = 
∑øm_•a˚_kî√l
;

2090 if–
ti
.
	`is_∑øm_loˇl
() ) {

2091 
•a˚
 = 
∑øm_•a˚_loˇl
;

2093 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** c™nŸÑesﬁvê.∑øm s∑˚ f‹ '%s'\n", 
s
->
	`«me
().
	`c_°r
() );

2094 
	`ab‹t
();

2097  
•a˚
.
	`gë_ty≥
() ) {

2098 
globÆ_•a˚
: 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
(); ;

2099 
∑øm_•a˚_loˇl
:

2100 
loˇl_•a˚
:

2101 
mem
 = 
thªad
->
m_loˇl_mem
;

2102 
addr
 +
thªad
->
	`gë_loˇl_mem_°ack_poöãr
();

2104 
ãx_•a˚
:

2106 
mem
 = 
thªad
->
	`gë_ãx_mem‹y
();

2109 
surf_•a˚
: 
mem
 = 
thªad
->
	`gë_surf_mem‹y
(); ;

2110 
∑øm_•a˚_kî√l
: 
mem
 = 
thªad
->
	`gë_∑øm_mem‹y
(); ;

2111 
sh¨ed_•a˚
: 
mem
 = 
thªad
->
m_sh¨ed_mem
; ;

2112 
c⁄°_•a˚
: 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
(); ;

2113 
gíîic_•a˚
:

2114 if–
thªad
->
	`gë_±x_vîsi⁄
().
	`vî
() >= 2.0 ) {

2116 
•a˚
 = 
	`which•a˚
(
addr
);

2117  
•a˚
.
	`gë_ty≥
() ) {

2118 
globÆ_•a˚
: 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
(); 
addr
 = 
	`gíîic_to_globÆ
(addr); ;

2119 
loˇl_•a˚
: 
mem
 = 
thªad
->
m_loˇl_mem
; 
addr
 = 
	`gíîic_to_loˇl
(
smid
,
hwtid
,addr); ;

2120 
sh¨ed_•a˚
: 
mem
 = 
thªad
->
m_sh¨ed_mem
; 
addr
 = 
	`gíîic_to_sh¨ed
(
smid
,addr); ;

2121 : 
	`ab‹t
();

2124 
	`ab‹t
();

2127 
∑øm_•a˚_un˛assifõd
:

2128 
undeföed_•a˚
:

2130 
	`ab‹t
();

2132 
	}
}

2134 
	$ld_exec
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2136 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2137 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2139 
ty≥
 = 
pI
->
	`gë_ty≥
();

2141 
±x_ªg_t
 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
ty≥
,Åhread, 1);

2142 
±x_ªg_t
 
d©a
;

2143 
mem‹y_•a˚_t
 
•a˚
 = 
pI
->
	`gë_•a˚
();

2144 
ve˘‹_•ec
 = 
pI
->
	`gë_ve˘‹
();

2146 
mem‹y_•a˚
 *
mem
 = 
NULL
;

2147 
addr_t
 
addr
 = 
§c1_d©a
.
u32
;

2149 
	`decode_•a˚
(
•a˚
,
thªad
,
§c1
,
mem
,
addr
);

2151 
	`as£π
(
mem
 !
NULL
);

2154 
size_t
 
size
;

2155 
t
;

2156 
d©a
.
u64
=0;

2157 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

2158 i‡(!
ve˘‹_•ec
) {

2159 
mem
->
	`ªad
(
addr
,
size
/8,&
d©a
.
s64
);

2160 if–
ty≥
 =
S16_TYPE
 ||Åy≥ =
S32_TYPE
 )

2161 
	`sign_exãnd
(
d©a
,
size
,
d°
);

2162 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
ty≥
,Åhªad, 
pI
);

2164 
±x_ªg_t
 
d©a1
, 
d©a2
, 
d©a3
, 
d©a4
;

2165 
mem
->
	`ªad
(
addr
,
size
/8,&
d©a1
.
s64
);

2166 
mem
->
	`ªad
(
addr
+
size
/8,size/8,&
d©a2
.
s64
);

2167 i‡(
ve˘‹_•ec
 !
V2_TYPE
) {

2168 
mem
->
	`ªad
(
addr
+2*
size
/8,size/8,&
d©a3
.
s64
);

2169 i‡(
ve˘‹_•ec
 !
V3_TYPE
) {

2170 
mem
->
	`ªad
(
addr
+3*
size
/8,size/8,&
d©a4
.
s64
);

2171 
thªad
->
	`£t_ve˘‹_›î™d_vÆues
(
d°
,
d©a1
,
d©a2
,
d©a3
,
d©a4
);

2173 
thªad
->
	`£t_ve˘‹_›î™d_vÆues
(
d°
,
d©a1
,
d©a2
,
d©a3
,data3);

2175 
thªad
->
	`£t_ve˘‹_›î™d_vÆues
(
d°
,
d©a1
,
d©a2
,data2,data2);

2177 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
addr
;

2178 
thªad
->
m_œ°_mem‹y_•a˚
 = 
•a˚
;

2179 
	}
}

2181 
	$ld_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2183 
	`ld_exec
(
pI
,
thªad
);

2184 
	}
}

2185 
	$ldu_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2187 
	`ld_exec
(
pI
,
thªad
);

2188 
	}
}

2190 
	$lg2_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2192 
±x_ªg_t
 
a
, 
d
;

2193 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2194 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2196 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2198 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2201  
i_ty≥
 ) {

2202 
F32_TYPE
:

2203 
d
.
f32
 = 
	`log
(
a
.f32)/log(2);

2206 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2207 
	`as£π
(0);

2211 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

2212 
	}
}

2214 
	$mad24_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2216 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2217 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2218 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2219 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c3
();

2220 
±x_ªg_t
 
d
, 
t
;

2222 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2223 
±x_ªg_t
 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2224 
±x_ªg_t
 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2225 
±x_ªg_t
 
c
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
i_ty≥
,Åhread, 1);

2227 
ßt_mode
 = 
pI
->
	`ßtuøti⁄_mode
();

2229 
	`as£π
–!
pI
->
	`is_wide
() );

2231  
i_ty≥
 ) {

2232 
S32_TYPE
:

2233 
t
.
s64
 = 
a
.
s32
 * 
b
.s32;

2234 i‡–
pI
->
	`is_hi
() ) {

2235 
d
.
s64
 = (
t
.s64>>16Ë+ 
c
.
s32
;

2236 i‡–
ßt_mode
 ) {

2237 i‡–
d
.
s64
 > ()0x7FFFFFFF )

2238 
d
.
s64
 = ()0x7FFFFFFF;

2239 i‡–
d
.
s64
 < ()0x80000000 )

2240 
d
.
s64
 = ()0x80000000;

2242 } i‡–
pI
->
	`is_lo
(ËË
d
.
s64
 = 
t
.
s32
 + 
c
.s32;

2243 
	`as£π
(0);

2245 
U32_TYPE
:

2246 
t
.
u64
 = 
a
.
u32
 * 
b
.u32;

2247 i‡–
pI
->
	`is_hi
(ËË
d
.
u64
 = (
t
.u64>>16Ë+ 
c
.
u32
;

2248 i‡–
pI
->
	`is_lo
(ËË
d
.
u64
 = 
t
.
u32
 + 
c
.u32;

2249 
	`as£π
(0);

2252 
	`as£π
(0);

2256 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d
, 
i_ty≥
,Åhªad, 
pI
);

2257 
	}
}

2259 
	$mad_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2261 
	`mad_def
(
pI
,
thªad
);

2262 
	}
}

2264 
	$mad_def
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2266 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2267 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2268 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2269 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c3
();

2270 
±x_ªg_t
 
d
, 
t
;

2272 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2273 
±x_ªg_t
 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2274 
±x_ªg_t
 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2275 
±x_ªg_t
 
c
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
i_ty≥
,Åhread, 1);

2277 
roundög_mode
 = 
pI
->
	`roundög_mode
();

2279  
i_ty≥
 ) {

2280 
S16_TYPE
:

2281 
t
.
s32
 = 
a
.
s16
 * 
b
.s16;

2282 i‡–
pI
->
	`is_wide
(ËË
d
.
s32
 = 
t
.s32 + 
c
.s32;

2283 i‡–
pI
->
	`is_hi
(ËË
d
.
s16
 = (
t
.
s32
>>16Ë+ 
c
.s16;

2284 i‡–
pI
->
	`is_lo
(ËË
d
.
s16
 = 
t
.s16 + 
c
.s16;

2285 
	`as£π
(0);

2287 
S32_TYPE
:

2288 
t
.
s64
 = 
a
.
s32
 * 
b
.s32;

2289 i‡–
pI
->
	`is_wide
(ËË
d
.
s64
 = 
t
.s64 + 
c
.s64;

2290 i‡–
pI
->
	`is_hi
(ËË
d
.
s32
 = (
t
.
s64
>>32Ë+ 
c
.s32;

2291 i‡–
pI
->
	`is_lo
(ËË
d
.
s32
 = 
t
.s32 + 
c
.s32;

2292 
	`as£π
(0);

2294 
S64_TYPE
:

2295 
t
.
s64
 = 
a
.s64 * 
b
.s64;

2296 
	`as£π
–!
pI
->
	`is_wide
() );

2297 
	`as£π
–!
pI
->
	`is_hi
() );

2298 i‡–
pI
->
	`is_lo
(ËË
d
.
s64
 = 
t
.s64 + 
c
.s64;

2299 
	`as£π
(0);

2301 
U16_TYPE
:

2302 
t
.
u32
 = 
a
.
u16
 * 
b
.u16;

2303 i‡–
pI
->
	`is_wide
(ËË
d
.
u32
 = 
t
.u32 + 
c
.u32;

2304 i‡–
pI
->
	`is_hi
(ËË
d
.
u16
 = (
t
.
u32
>>16Ë+ 
c
.u16;

2305 i‡–
pI
->
	`is_lo
(ËË
d
.
u16
 = 
t
.u16 + 
c
.u16;

2306 
	`as£π
(0);

2308 
U32_TYPE
:

2309 
t
.
u64
 = 
a
.
u32
 * 
b
.u32;

2310 i‡–
pI
->
	`is_wide
(ËË
d
.
u64
 = 
t
.u64 + 
c
.u64;

2311 i‡–
pI
->
	`is_hi
(ËË
d
.
u32
 = (
t
.
u64
>>32Ë+ 
c
.u32;

2312 i‡–
pI
->
	`is_lo
(ËË
d
.
u32
 = 
t
.u32 + 
c
.u32;

2313 
	`as£π
(0);

2315 
U64_TYPE
:

2316 
t
.
u64
 = 
a
.u64 * 
b
.u64;

2317 
	`as£π
–!
pI
->
	`is_wide
() );

2318 
	`as£π
–!
pI
->
	`is_hi
() );

2319 i‡–
pI
->
	`is_lo
(ËË
d
.
u64
 = 
t
.u64 + 
c
.u64;

2320 
	`as£π
(0);

2322 
F16_TYPE
:

2323 
	`as£π
(0);

2325 
F32_TYPE
: {

2326 
‹ig_rm
 = 
	`„gëround
();

2327  
roundög_mode
 ) {

2328 
RN_OPTION
: ;

2329 
RZ_OPTION
: 
	`„£åound
–
FE_TOWARDZERO
 ); ;

2330 : 
	`as£π
(0); ;

2332 
d
.
f32
 = 
a
.f32 * 
b
.f32 + 
c
.f32;

2333 i‡–
pI
->
	`ßtuøti⁄_mode
() ) {

2334 i‡–
d
.
f32
 < 0 ) d.f32 = 0;

2335 i‡–
d
.
f32
 > 1.0f ) d.f32 = 1.0f;

2337 
	`„£åound
–
‹ig_rm
 );

2340 
F64_TYPE
: 
FF64_TYPE
: {

2341 
‹ig_rm
 = 
	`„gëround
();

2342  
roundög_mode
 ) {

2343 
RN_OPTION
: ;

2344 
RZ_OPTION
: 
	`„£åound
–
FE_TOWARDZERO
 ); ;

2345 : 
	`as£π
(0); ;

2347 
d
.
f64
 = 
a
.f64 * 
b
.f64 + 
c
.f64;

2348 i‡–
pI
->
	`ßtuøti⁄_mode
() ) {

2349 i‡–
d
.
f64
 < 0 ) d.f64 = 0;

2350 i‡–
d
.
f64
 > 1.0f ) d.f64 = 1.0;

2352 
	`„£åound
–
‹ig_rm
 );

2356 
	`as£π
(0);

2359 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d
, 
i_ty≥
,Åhªad, 
pI
);

2360 
	}
}

2362 
boﬁ
 
	$isNaN
(
x
)

2364  
	`i¢™
(
x
);

2365 
	}
}

2367 
boﬁ
 
	$isNaN
(
x
)

2369  
	`i¢™
(
x
);

2370 
	}
}

2372 
	$max_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2374 
±x_ªg_t
 
a
, 
b
, 
d
;

2375 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2376 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2377 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2379 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2380 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2381 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2384  
i_ty≥
 ) {

2385 
U16_TYPE
: 
d
.
u16
 = 
	`MY_MAX_I
(
a
.u16,
b
.u16); ;

2386 
U32_TYPE
: 
d
.
u32
 = 
	`MY_MAX_I
(
a
.u32,
b
.u32); ;

2387 
U64_TYPE
: 
d
.
u64
 = 
	`MY_MAX_I
(
a
.u64,
b
.u64); ;

2388 
S16_TYPE
: 
d
.
s16
 = 
	`MY_MAX_I
(
a
.s16,
b
.s16); ;

2389 
S32_TYPE
: 
d
.
s32
 = 
	`MY_MAX_I
(
a
.s32,
b
.s32); ;

2390 
S64_TYPE
: 
d
.
s64
 = 
	`MY_MAX_I
(
a
.s64,
b
.s64); ;

2391 
F32_TYPE
: 
d
.
f32
 = 
	`MY_MAX_F
(
a
.f32,
b
.f32); ;

2392 
F64_TYPE
: 
FF64_TYPE
: 
d
.
f64
 = 
	`MY_MAX_F
(
a
.f64,
b
.f64); ;

2394 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2395 
	`as£π
(0);

2399 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

2400 
	}
}

2402 
	$memb¨_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2405 
	}
}

2407 
	$mö_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2409 
±x_ªg_t
 
a
, 
b
, 
d
;

2410 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2411 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2412 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2414 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2415 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2416 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2419  
i_ty≥
 ) {

2420 
U16_TYPE
: 
d
.
u16
 = 
	`MY_MIN_I
(
a
.u16,
b
.u16); ;

2421 
U32_TYPE
: 
d
.
u32
 = 
	`MY_MIN_I
(
a
.u32,
b
.u32); ;

2422 
U64_TYPE
: 
d
.
u64
 = 
	`MY_MIN_I
(
a
.u64,
b
.u64); ;

2423 
S16_TYPE
: 
d
.
s16
 = 
	`MY_MIN_I
(
a
.s16,
b
.s16); ;

2424 
S32_TYPE
: 
d
.
s32
 = 
	`MY_MIN_I
(
a
.s32,
b
.s32); ;

2425 
S64_TYPE
: 
d
.
s64
 = 
	`MY_MIN_I
(
a
.s64,
b
.s64); ;

2426 
F32_TYPE
: 
d
.
f32
 = 
	`MY_MIN_F
(
a
.f32,
b
.f32); ;

2427 
F64_TYPE
: 
FF64_TYPE
: 
d
.
f64
 = 
	`MY_MIN_F
(
a
.f64,
b
.f64); ;

2429 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2430 
	`as£π
(0);

2434 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

2435 
	}
}

2437 
	$mov_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2439 
±x_ªg_t
 
d©a
;

2441 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2442 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2443 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2445 if–(
§c1
.
	`is_ve˘‹
(Ë|| 
d°
.is_ve˘‹()Ë&& (
i_ty≥
 !
BB64_TYPE
Ë&& (i_ty≥ !
BB128_TYPE
Ë&& (i_ty≥ !
FF64_TYPE
) ) {

2447 
nbôs_to_move
;

2448 
±x_ªg_t
 
tmp_bôs
;

2450  
pI
->
	`gë_ty≥
() ) {

2451 
B16_TYPE
: 
nbôs_to_move
 = 16; ;

2452 
B32_TYPE
: 
nbôs_to_move
 = 32; ;

2453 
B64_TYPE
: 
nbôs_to_move
 = 64; ;

2454 : 
	`¥ötf
("Executi⁄Éº‹: movÖack/u≈ack wôh unsuµ‹ãdÅy≥ quÆifõr\n"); 
	`as£π
(0); ;

2457 if–
§c1
.
	`is_ve˘‹
() ) {

2458 
√Àm
 = 
§c1
.
	`gë_ve˘_√Àm
();

2459 
±x_ªg_t
 
v
[4];

2460 
thªad
->
	`gë_ve˘‹_›î™d_vÆues
(
§c1
, 
v
, 
√Àm
 );

2462 
bôs_≥r_§c_ñem
 = 
nbôs_to_move
 / 
√Àm
;

2463  
i
=0; i < 
√Àm
; i++ ) {

2464 
bôs_≥r_§c_ñem
) {

2465 8: 
tmp_bôs
.
u64
 |(()(
v
[
i
].
u8
) << (8*i)); ;

2466 16: 
tmp_bôs
.
u64
 |(()(
v
[
i
].
u16
) << (16*i)); ;

2467 32: 
tmp_bôs
.
u64
 |(()(
v
[
i
].
u32
) << (32*i)); ;

2468 : 
	`¥ötf
("Executi⁄Éº‹: movÖack/u≈ack wôh unsuµ‹ãd sour˚/d° sizêøtiÿ(§c)\n"); 
	`as£π
(0); ;

2472 
d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2474  
pI
->
	`gë_ty≥
() ) {

2475 
B16_TYPE
: 
tmp_bôs
.
u16
 = 
d©a
.u16; ;

2476 
B32_TYPE
: 
tmp_bôs
.
u32
 = 
d©a
.u32; ;

2477 
B64_TYPE
: 
tmp_bôs
.
u64
 = 
d©a
.u64; ;

2478 : 
	`as£π
(0); ;

2482 if–
d°
.
	`is_ve˘‹
() ) {

2483 
√Àm
 = 
d°
.
	`gë_ve˘_√Àm
();

2484 
±x_ªg_t
 
v
[4];

2485 
bôs_≥r_d°_ñem
 = 
nbôs_to_move
 / 
√Àm
;

2486  
i
=0; i < 
√Àm
; i++ ) {

2487 
bôs_≥r_d°_ñem
) {

2488 8: 
v
[
i
].
u8
 = (
tmp_bôs
.
u64
 >> (8*i)) & (() 0xFF); ;

2489 16: 
v
[
i
].
u16
 = (
tmp_bôs
.
u64
 >> (16*i)) & (() 0xFFFF); ;

2490 32: 
v
[
i
].
u32
 = (
tmp_bôs
.
u64
 >> (32*i)) & (() 0xFFFFFFFF); ;

2492 
	`¥ötf
("ExecutionÉrror: movÖack/unpack with unsupported source/dst sizeÑatio (dst)\n");

2493 
	`as£π
(0);

2497 
thªad
->
	`£t_ve˘‹_›î™d_vÆues
(
d°
,
v
[0],v[1],v[2],v[3]);

2499 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
tmp_bôs
, 
i_ty≥
,Åhªad, 
pI
);

2503 
d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2505 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2508 
	}
}

2510 
	$mul24_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2512 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2514 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2515 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2516 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2518 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2519 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2520 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2526 
§c1_d©a
.
	`mask_™d
(0,0x00FFFFFF);

2527 
§c2_d©a
.
	`mask_™d
(0,0x00FFFFFF);

2529  
i_ty≥
 ) {

2530 
S32_TYPE
:

2531 if–
§c1_d©a
.
	`gë_bô
(23) )

2532 
§c1_d©a
.
	`mask_‹
(0xFFFFFFFF,0xFF000000);

2533 if–
§c2_d©a
.
	`gë_bô
(23) )

2534 
§c2_d©a
.
	`mask_‹
(0xFFFFFFFF,0xFF000000);

2535 
d©a
.
s64
 = 
§c1_d©a
.s64 * 
§c2_d©a
.s64;

2537 
U32_TYPE
:

2538 
d©a
.
u64
 = 
§c1_d©a
.u64 * 
§c2_d©a
.u64;

2541 
	`¥ötf
("GPGPU-Sim PTX: ExecutionÉrror -Åype mismatch with instruction\n");

2542 
	`as£π
(0);

2546 i‡–
pI
->
	`is_hi
() ) {

2547 
d©a
.
u64
 = data.u64 >> 16;

2548 
d©a
.
	`mask_™d
(0,0xFFFFFFFF);

2549 } i‡(
pI
->
	`is_lo
()) {

2550 
d©a
.
	`mask_™d
(0,0xFFFFFFFF);

2553 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2554 
	}
}

2556 
	$mul_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2558 
±x_ªg_t
 
d©a
;

2560 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2561 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2562 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2563 
±x_ªg_t
 
d
, 
t
;

2565 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2566 
±x_ªg_t
 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2567 
±x_ªg_t
 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2569 
roundög_mode
 = 
pI
->
	`roundög_mode
();

2571  
i_ty≥
 ) {

2572 
S16_TYPE
:

2573 
t
.
s32
 = (()
a
.
s16
Ë* (()
b
.s16);

2574 i‡–
pI
->
	`is_wide
(ËË
d
.
s32
 = 
t
.s32;

2575 i‡–
pI
->
	`is_hi
(ËË
d
.
s16
 = (
t
.
s32
>>16);

2576 i‡–
pI
->
	`is_lo
(ËË
d
.
s16
 = 
t
.s16;

2577 
	`as£π
(0);

2579 
S32_TYPE
:

2580 
t
.
s64
 = (()
a
.
s32
Ë* (()
b
.s32);

2581 i‡–
pI
->
	`is_wide
(ËË
d
.
s64
 = 
t
.s64;

2582 i‡–
pI
->
	`is_hi
(ËË
d
.
s32
 = (
t
.
s64
>>32);

2583 i‡–
pI
->
	`is_lo
(ËË
d
.
s32
 = 
t
.s32;

2584 
	`as£π
(0);

2586 
S64_TYPE
:

2587 
t
.
s64
 = 
a
.s64 * 
b
.s64;

2588 
	`as£π
–!
pI
->
	`is_wide
() );

2589 
	`as£π
–!
pI
->
	`is_hi
() );

2590 i‡–
pI
->
	`is_lo
(ËË
d
.
s64
 = 
t
.s64;

2591 
	`as£π
(0);

2593 
U16_TYPE
:

2594 
t
.
u32
 = (()
a
.
u16
Ë* (()
b
.u16);

2595 i‡–
pI
->
	`is_wide
(ËË
d
.
u32
 = 
t
.u32;

2596 i‡–
pI
->
	`is_lo
(ËË
d
.
u16
 = 
t
.u16;

2597 i‡–
pI
->
	`is_hi
(ËË
d
.
u16
 = (
t
.
u32
>>16);

2598 
	`as£π
(0);

2600 
U32_TYPE
:

2601 
t
.
u64
 = (()
a
.
u32
Ë* (()
b
.u32);

2602 i‡–
pI
->
	`is_wide
(ËË
d
.
u64
 = 
t
.u64;

2603 i‡–
pI
->
	`is_lo
(ËË
d
.
u32
 = 
t
.u32;

2604 i‡–
pI
->
	`is_hi
(ËË
d
.
u32
 = (
t
.
u64
>>32);

2605 
	`as£π
(0);

2607 
U64_TYPE
:

2608 
t
.
u64
 = 
a
.u64 * 
b
.u64;

2609 
	`as£π
–!
pI
->
	`is_wide
() );

2610 
	`as£π
–!
pI
->
	`is_hi
() );

2611 i‡–
pI
->
	`is_lo
(ËË
d
.
u64
 = 
t
.u64;

2612 
	`as£π
(0);

2614 
F16_TYPE
:

2615 
	`as£π
(0);

2617 
F32_TYPE
: {

2618 
‹ig_rm
 = 
	`„gëround
();

2619  
roundög_mode
 ) {

2620 
RN_OPTION
: ;

2621 
RZ_OPTION
: 
	`„£åound
–
FE_TOWARDZERO
 ); ;

2622 : 
	`as£π
(0); ;

2625 
d
.
f32
 = 
a
.f32 * 
b
.f32;

2627 i‡–
pI
->
	`ßtuøti⁄_mode
() ) {

2628 i‡–
d
.
f32
 < 0 ) d.f32 = 0;

2629 i‡–
d
.
f32
 > 1.0f ) d.f32 = 1.0f;

2631 
	`„£åound
–
‹ig_rm
 );

2634 
F64_TYPE
: 
FF64_TYPE
:{

2635 
‹ig_rm
 = 
	`„gëround
();

2636  
roundög_mode
 ) {

2637 
RN_OPTION
: ;

2638 
RZ_OPTION
: 
	`„£åound
–
FE_TOWARDZERO
 ); ;

2639 : 
	`as£π
(0); ;

2641 
d
.
f64
 = 
a
.f64 * 
b
.f64;

2642 i‡–
pI
->
	`ßtuøti⁄_mode
() ) {

2643 i‡–
d
.
f64
 < 0 ) d.f64 = 0;

2644 i‡–
d
.
f64
 > 1.0f ) d.f64 = 1.0;

2646 
	`„£åound
–
‹ig_rm
 );

2650 
	`as£π
(0);

2654 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d
, 
i_ty≥
,Åhªad, 
pI
);

2655 
	}
}

2657 
	$√g_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2659 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2661 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2662 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2664 
to_ty≥
 = 
pI
->
	`gë_ty≥
();

2665 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
to_ty≥
,Åhread, 1);

2668  
to_ty≥
 ) {

2669 
S8_TYPE
:

2670 
S16_TYPE
:

2671 
S32_TYPE
:

2672 
S64_TYPE
:

2673 
d©a
.
s64
 = 0 - 
§c1_d©a
.s64; ;

2674 
U8_TYPE
:

2675 
U16_TYPE
:

2676 
U32_TYPE
:

2677 
U64_TYPE
:

2678 
	`as£π
(0); ;

2679 
F16_TYPE
: 
	`as£π
(0); ;

2680 
F32_TYPE
: 
d©a
.
f32
 = 0.0‡- 
§c1_d©a
.f32; ;

2681 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 0.0‡- 
§c1_d©a
.f64; ;

2682 : 
	`as£π
(0); ;

2685 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
to_ty≥
,Åhªad, 
pI
);

2686 
	}
}

2689 
	$«ndn_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2691 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2693 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2694 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2695 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2697 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2698 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2699 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2703 if(
i_ty≥
 =
PRED_TYPE
)

2704 
d©a
.
¥ed
 = (~
§c1_d©a
.¥ed & 
§c2_d©a
.pred);

2706 
d©a
.
u64
 = ~(
§c1_d©a
.u64 & ~
§c2_d©a
.u64);

2708 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2710 
	}
}

2713 
	$n‹n_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2715 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2717 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2718 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2719 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2721 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2722 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2723 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2727 if(
i_ty≥
 =
PRED_TYPE
)

2728 
d©a
.
¥ed
 = ~(
§c1_d©a
.¥ed & ~(
§c2_d©a
.pred));

2730 
d©a
.
u64
 = ~(
§c1_d©a
.u64Ë& 
§c2_d©a
.u64;

2732 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2734 
	}
}

2736 
	$nŸ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2738 
±x_ªg_t
 
a
, 
b
, 
d
;

2739 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2740 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2742 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2743 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2746  
i_ty≥
 ) {

2747 
PRED_TYPE
: 
d
.
¥ed
 = (~(
a
.pred) & 0x000F); ;

2748 
B16_TYPE
: 
d
.
u16
 = ~
a
.u16; ;

2749 
B32_TYPE
: 
d
.
u32
 = ~
a
.u32; ;

2750 
B64_TYPE
: 
d
.
u64
 = ~
a
.u64; ;

2752 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2753 
	`as£π
(0);

2757 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

2758 
	}
}

2760 
	$‹_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2762 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2763 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2764 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2765 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2767 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2768 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2769 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2772 if(
i_ty≥
 =
PRED_TYPE
)

2773 
d©a
.
¥ed
 = ~(~(
§c1_d©a
.¥edË| ~(
§c2_d©a
.pred));

2775 
d©a
.
u64
 = 
§c1_d©a
.u64 | 
§c2_d©a
.u64;

2777 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2778 
	}
}

2780 
	$‹n_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2782 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2783 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2784 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2785 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2787 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2788 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2789 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2792 if(
i_ty≥
 =
PRED_TYPE
)

2793 
d©a
.
¥ed
 = ~(~(
§c1_d©a
.¥edË| (
§c2_d©a
.pred));

2795 
d©a
.
u64
 = 
§c1_d©a
.u64 | ~
§c2_d©a
.u64;

2797 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2798 
	}
}

2800 
	$pmevít_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

2801 
	$p›c_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

2802 
	$¥e„tch_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

2803 
	$¥e„tchu_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

2804 
	$¥mt_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

2806 
	$r˝_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2808 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2809 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2810 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2812 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2813 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2816  
i_ty≥
 ) {

2817 
F32_TYPE
:

2818 
d©a
.
f32
 = 1.0‡/ 
§c1_d©a
.f32;

2820 
F64_TYPE
:

2821 
FF64_TYPE
:

2822 
d©a
.
f64
 = 1.0‡/ 
§c1_d©a
.f64;

2825 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2826 
	`as£π
(0);

2830 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2831 
	}
}

2833 
	$ªd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

2835 
	$ªm_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2837 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

2839 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2840 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2841 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2843 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2844 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2845 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2847 
d©a
.
u64
 = 
§c1_d©a
.u64 % 
§c2_d©a
.u64;

2849 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

2850 
	}
}

2852 
	$ªt_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2854 
boﬁ
 
em±y
 = 
thªad
->
	`ˇŒ°ack_p›
();

2855 if–
em±y
 ) {

2856 
thªad
->
	`£t_d⁄e
();

2857 
thªad
->
	`exôC‹e
();

2858 
thªad
->
	`ªgi°îExô
();

2860 
	}
}

2863 
	$ªç_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2865 
boﬁ
 
em±y
 = 
thªad
->
	`ˇŒ°ack_p›_∂us
();

2866 if–
em±y
 ) {

2867 
thªad
->
	`£t_d⁄e
();

2868 
thªad
->
	`exôC‹e
();

2869 
thªad
->
	`ªgi°îExô
();

2871 
	}
}

2873 
	$rsqπ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2875 
±x_ªg_t
 
a
, 
d
;

2876 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2877 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2879 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2880 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2883  
i_ty≥
 ) {

2884 
F32_TYPE
:

2885 i‡–
a
.
f32
 < 0 ) {

2886 
d
.
u64
 = 0;

2887 
d
.
u64
 = 0x7fc00000;

2888 } i‡–
a
.
f32
 == 0 ) {

2889 
d
.
u64
 = 0;

2890 
d
.
u32
 = 0x7f800000;

2892 
d
.
f32
 = 
cuda_m©h
::
	`__öã∫Æ_accuøã_fdividef
(1.0f, 
	`sqπf
(
a
.f32));

2894 
F64_TYPE
:

2895 
FF64_TYPE
:

2896 i‡–
a
.
f32
 < 0 ) {

2897 
d
.
u64
 = 0;

2898 
d
.
u32
 = 0x7fc00000;

2899 
x
 = 
d
.
f32
;

2900 
d
.
f64
 = ()
x
;

2901 } i‡–
a
.
f32
 == 0 ) {

2902 
d
.
u64
 = 0;

2903 
d
.
u32
 = 0x7f800000;

2904 
x
 = 
d
.
f32
;

2905 
d
.
f64
 = ()
x
;

2907 
d
.
f64
 = 1.0 / 
	`sqπ
(
a
.f64);

2910 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2911 
	`as£π
(0);

2915 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

2916 
	}
}

2918 
	#SAD
(
d
,
a
,
b
,
c
Ëd = c + (◊<bË? (b-aË: (a-b))

	)

2920 
	$ßd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2922 
±x_ªg_t
 
a
, 
b
, 
c
, 
d
;

2923 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2924 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2925 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c1
();

2926 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c1
();

2928 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2929 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2930 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2931 
c
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
i_ty≥
,Åhread, 1);

2934  
i_ty≥
 ) {

2935 
U16_TYPE
: 
	`SAD
(
d
.
u16
,
a
.u16,
b
.u16,
c
.u16); ;

2936 
U32_TYPE
: 
	`SAD
(
d
.
u32
,
a
.u32,
b
.u32,
c
.u32); ;

2937 
U64_TYPE
: 
	`SAD
(
d
.
u64
,
a
.u64,
b
.u64,
c
.u64); ;

2938 
S16_TYPE
: 
	`SAD
(
d
.
s16
,
a
.s16,
b
.s16,
c
.s16); ;

2939 
S32_TYPE
: 
	`SAD
(
d
.
s32
,
a
.s32,
b
.s32,
c
.s32); ;

2940 
S64_TYPE
: 
	`SAD
(
d
.
s64
,
a
.s64,
b
.s64,
c
.s64); ;

2941 
F32_TYPE
: 
	`SAD
(
d
.
f32
,
a
.f32,
b
.f32,
c
.f32); ;

2942 
F64_TYPE
: 
FF64_TYPE
: 
	`SAD
(
d
.
f64
,
a
.f64,
b
.f64,
c
.f64); ;

2944 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

2945 
	`as£π
(0);

2949 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

2950 
	}
}

2952 
	$£Õ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

2954 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

2955 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

2956 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

2957 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c3
();

2959 
±x_ªg_t
 
a
, 
b
, 
c
, 
d
;

2961 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

2962 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

2963 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

2964 
c
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
i_ty≥
,Åhread, 1);

2968 
d
 = (!(
c
.
¥ed
 & 0x0001))?
a
:
b
;

2970 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
PRED_TYPE
,Åhªad, 
pI
);

2971 
	}
}

2973 
boﬁ
 
	$isFlﬂt
(
ty≥
)

2975  
ty≥
 ) {

2976 
F16_TYPE
:

2977 
F32_TYPE
:

2978 
F64_TYPE
:

2979 
FF64_TYPE
:

2980  
åue
;

2982  
Ál£
;

2984 
	}
}

2986 
boﬁ
 
	$CmpOp
–
ty≥
, 
±x_ªg_t
 
a
,Ötx_ªg_à
b
, 
cmp›
 )

2988 
boﬁ
 
t
 = 
Ál£
;

2990  
ty≥
 ) {

2991 
B16_TYPE
:

2992 
cmp›
) {

2993 
EQ_OPTION
: 
t
 = (
a
.
u16
 =
b
.u16); ;

2994 
NE_OPTION
: 
t
 = (
a
.
u16
 !
b
.u16); ;

2996 
	`as£π
(0);

2999 
B32_TYPE
:

3000 
cmp›
) {

3001 
EQ_OPTION
: 
t
 = (
a
.
u32
 =
b
.u32); ;

3002 
NE_OPTION
: 
t
 = (
a
.
u32
 !
b
.u32); ;

3004 
	`as£π
(0);

3006 
B64_TYPE
:

3007 
cmp›
) {

3008 
EQ_OPTION
: 
t
 = (
a
.
u64
 =
b
.u64); ;

3009 
NE_OPTION
: 
t
 = (
a
.
u64
 !
b
.u64); ;

3011 
	`as£π
(0);

3014 
S8_TYPE
:

3015 
S16_TYPE
:

3016 
cmp›
) {

3017 
EQ_OPTION
: 
t
 = (
a
.
s16
 =
b
.s16); ;

3018 
NE_OPTION
: 
t
 = (
a
.
s16
 !
b
.s16); ;

3019 
LT_OPTION
: 
t
 = (
a
.
s16
 < 
b
.s16); ;

3020 
LE_OPTION
: 
t
 = (
a
.
s16
 <
b
.s16); ;

3021 
GT_OPTION
: 
t
 = (
a
.
s16
 > 
b
.s16); ;

3022 
GE_OPTION
: 
t
 = (
a
.
s16
 >
b
.s16); ;

3024 
	`as£π
(0);

3027 
S32_TYPE
:

3028 
cmp›
) {

3029 
EQ_OPTION
: 
t
 = (
a
.
s32
 =
b
.s32); ;

3030 
NE_OPTION
: 
t
 = (
a
.
s32
 !
b
.s32); ;

3031 
LT_OPTION
: 
t
 = (
a
.
s32
 < 
b
.s32); ;

3032 
LE_OPTION
: 
t
 = (
a
.
s32
 <
b
.s32); ;

3033 
GT_OPTION
: 
t
 = (
a
.
s32
 > 
b
.s32); ;

3034 
GE_OPTION
: 
t
 = (
a
.
s32
 >
b
.s32); ;

3036 
	`as£π
(0);

3039 
S64_TYPE
:

3040 
cmp›
) {

3041 
EQ_OPTION
: 
t
 = (
a
.
s64
 =
b
.s64); ;

3042 
NE_OPTION
: 
t
 = (
a
.
s64
 !
b
.s64); ;

3043 
LT_OPTION
: 
t
 = (
a
.
s64
 < 
b
.s64); ;

3044 
LE_OPTION
: 
t
 = (
a
.
s64
 <
b
.s64); ;

3045 
GT_OPTION
: 
t
 = (
a
.
s64
 > 
b
.s64); ;

3046 
GE_OPTION
: 
t
 = (
a
.
s64
 >
b
.s64); ;

3048 
	`as£π
(0);

3051 
U8_TYPE
:

3052 
U16_TYPE
:

3053 
cmp›
) {

3054 
EQ_OPTION
: 
t
 = (
a
.
u16
 =
b
.u16); ;

3055 
NE_OPTION
: 
t
 = (
a
.
u16
 !
b
.u16); ;

3056 
LT_OPTION
: 
t
 = (
a
.
u16
 < 
b
.u16); ;

3057 
LE_OPTION
: 
t
 = (
a
.
u16
 <
b
.u16); ;

3058 
GT_OPTION
: 
t
 = (
a
.
u16
 > 
b
.u16); ;

3059 
GE_OPTION
: 
t
 = (
a
.
u16
 >
b
.u16); ;

3060 
LO_OPTION
: 
t
 = (
a
.
u16
 < 
b
.u16); ;

3061 
LS_OPTION
: 
t
 = (
a
.
u16
 <
b
.u16); ;

3062 
HI_OPTION
: 
t
 = (
a
.
u16
 > 
b
.u16); ;

3063 
HS_OPTION
: 
t
 = (
a
.
u16
 >
b
.u16); ;

3065 
	`as£π
(0);

3068 
U32_TYPE
:

3069 
cmp›
) {

3070 
EQ_OPTION
: 
t
 = (
a
.
u32
 =
b
.u32); ;

3071 
NE_OPTION
: 
t
 = (
a
.
u32
 !
b
.u32); ;

3072 
LT_OPTION
: 
t
 = (
a
.
u32
 < 
b
.u32); ;

3073 
LE_OPTION
: 
t
 = (
a
.
u32
 <
b
.u32); ;

3074 
GT_OPTION
: 
t
 = (
a
.
u32
 > 
b
.u32); ;

3075 
GE_OPTION
: 
t
 = (
a
.
u32
 >
b
.u32); ;

3076 
LO_OPTION
: 
t
 = (
a
.
u32
 < 
b
.u32); ;

3077 
LS_OPTION
: 
t
 = (
a
.
u32
 <
b
.u32); ;

3078 
HI_OPTION
: 
t
 = (
a
.
u32
 > 
b
.u32); ;

3079 
HS_OPTION
: 
t
 = (
a
.
u32
 >
b
.u32); ;

3081 
	`as£π
(0);

3084 
U64_TYPE
:

3085 
cmp›
) {

3086 
EQ_OPTION
: 
t
 = (
a
.
u64
 =
b
.u64); ;

3087 
NE_OPTION
: 
t
 = (
a
.
u64
 !
b
.u64); ;

3088 
LT_OPTION
: 
t
 = (
a
.
u64
 < 
b
.u64); ;

3089 
LE_OPTION
: 
t
 = (
a
.
u64
 <
b
.u64); ;

3090 
GT_OPTION
: 
t
 = (
a
.
u64
 > 
b
.u64); ;

3091 
GE_OPTION
: 
t
 = (
a
.
u64
 >
b
.u64); ;

3092 
LO_OPTION
: 
t
 = (
a
.
u64
 < 
b
.u64); ;

3093 
LS_OPTION
: 
t
 = (
a
.
u64
 <
b
.u64); ;

3094 
HI_OPTION
: 
t
 = (
a
.
u64
 > 
b
.u64); ;

3095 
HS_OPTION
: 
t
 = (
a
.
u64
 >
b
.u64); ;

3097 
	`as£π
(0);

3100 
F16_TYPE
: 
	`as£π
(0); ;

3101 
F32_TYPE
:

3102 
cmp›
) {

3103 
EQ_OPTION
: 
t
 = (
a
.
f32
 =
b
.f32Ë&& !
	`isNaN
(a.f32) && !isNaN(b.f32); ;

3104 
NE_OPTION
: 
t
 = (
a
.
f32
 !
b
.f32Ë&& !
	`isNaN
(a.f32) && !isNaN(b.f32); ;

3105 
LT_OPTION
: 
t
 = (
a
.
f32
 < 
b
.f32 ) && !
	`isNaN
(a.f32) && !isNaN(b.f32); ;

3106 
LE_OPTION
: 
t
 = (
a
.
f32
 <
b
.f32Ë&& !
	`isNaN
(a.f32) && !isNaN(b.f32); ;

3107 
GT_OPTION
: 
t
 = (
a
.
f32
 > 
b
.f32 ) && !
	`isNaN
(a.f32) && !isNaN(b.f32); ;

3108 
GE_OPTION
: 
t
 = (
a
.
f32
 >
b
.f32Ë&& !
	`isNaN
(a.f32) && !isNaN(b.f32); ;

3109 
EQU_OPTION
: 
t
 = (
a
.
f32
 =
b
.f32Ë|| 
	`isNaN
(a.f32) || isNaN(b.f32); ;

3110 
NEU_OPTION
: 
t
 = (
a
.
f32
 !
b
.f32Ë|| 
	`isNaN
(a.f32) || isNaN(b.f32); ;

3111 
LTU_OPTION
: 
t
 = (
a
.
f32
 < 
b
.f32 ) || 
	`isNaN
(a.f32) || isNaN(b.f32); ;

3112 
LEU_OPTION
: 
t
 = (
a
.
f32
 <
b
.f32Ë|| 
	`isNaN
(a.f32) || isNaN(b.f32); ;

3113 
GTU_OPTION
: 
t
 = (
a
.
f32
 > 
b
.f32 ) || 
	`isNaN
(a.f32) || isNaN(b.f32); ;

3114 
GEU_OPTION
: 
t
 = (
a
.
f32
 >
b
.f32Ë|| 
	`isNaN
(a.f32) || isNaN(b.f32); ;

3115 
NUM_OPTION
: 
t
 = !
	`isNaN
(
a
.
f32
Ë&& !isNaN(
b
.f32); ;

3116 
NAN_OPTION
: 
t
 = 
	`isNaN
(
a
.
f32
Ë|| isNaN(
b
.f32); ;

3118 
	`as£π
(0);

3121 
F64_TYPE
:

3122 
FF64_TYPE
:

3123 
cmp›
) {

3124 
EQ_OPTION
: 
t
 = (
a
.
f64
 =
b
.f64Ë&& !
	`isNaN
(a.f64) && !isNaN(b.f64); ;

3125 
NE_OPTION
: 
t
 = (
a
.
f64
 !
b
.f64Ë&& !
	`isNaN
(a.f64) && !isNaN(b.f64); ;

3126 
LT_OPTION
: 
t
 = (
a
.
f64
 < 
b
.f64 ) && !
	`isNaN
(a.f64) && !isNaN(b.f64); ;

3127 
LE_OPTION
: 
t
 = (
a
.
f64
 <
b
.f64Ë&& !
	`isNaN
(a.f64) && !isNaN(b.f64); ;

3128 
GT_OPTION
: 
t
 = (
a
.
f64
 > 
b
.f64 ) && !
	`isNaN
(a.f64) && !isNaN(b.f64); ;

3129 
GE_OPTION
: 
t
 = (
a
.
f64
 >
b
.f64Ë&& !
	`isNaN
(a.f64) && !isNaN(b.f64); ;

3130 
EQU_OPTION
: 
t
 = (
a
.
f64
 =
b
.f64Ë|| 
	`isNaN
(a.f64) || isNaN(b.f64); ;

3131 
NEU_OPTION
: 
t
 = (
a
.
f64
 !
b
.f64Ë|| 
	`isNaN
(a.f64) || isNaN(b.f64); ;

3132 
LTU_OPTION
: 
t
 = (
a
.
f64
 < 
b
.f64 ) || 
	`isNaN
(a.f64) || isNaN(b.f64); ;

3133 
LEU_OPTION
: 
t
 = (
a
.
f64
 <
b
.f64Ë|| 
	`isNaN
(a.f64) || isNaN(b.f64); ;

3134 
GTU_OPTION
: 
t
 = (
a
.
f64
 > 
b
.f64 ) || 
	`isNaN
(a.f64) || isNaN(b.f64); ;

3135 
GEU_OPTION
: 
t
 = (
a
.
f64
 >
b
.f64Ë|| 
	`isNaN
(a.f64) || isNaN(b.f64); ;

3136 
NUM_OPTION
: 
t
 = !
	`isNaN
(
a
.
f64
Ë&& !isNaN(
b
.f64); ;

3137 
NAN_OPTION
: 
t
 = 
	`isNaN
(
a
.
f64
Ë|| isNaN(
b
.f64); ;

3139 
	`as£π
(0);

3142 : 
	`as£π
(0); ;

3145  
t
;

3146 
	}
}

3148 
	$£ç_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3150 
±x_ªg_t
 
a
, 
b
;

3152 
t
=0;

3153 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3154 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3155 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3157 
	`as£π
–
pI
->
	`gë_num_›î™ds
() < 4 );

3159 
ty≥
 = 
pI
->
	`gë_ty≥
();

3160 
cmp›
 = 
pI
->
	`gë_cmp›
();

3161 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
ty≥
,Åhread, 1);

3162 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
ty≥
,Åhread, 1);

3164 
t
 = 
	`CmpOp
(
ty≥
,
a
,
b
,
cmp›
);

3166 
±x_ªg_t
 
d©a
;

3169 
d©a
.
¥ed
 = (
t
==0);

3171 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
PRED_TYPE
,Åhªad, 
pI
);

3172 
	}
}

3174 
	$£t_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3176 
±x_ªg_t
 
a
, 
b
;

3178 
t
=0;

3179 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3180 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3181 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3183 
	`as£π
–
pI
->
	`gë_num_›î™ds
() < 4 );

3185 
§c_ty≥
 = 
pI
->
	`gë_ty≥2
();

3186 
cmp›
 = 
pI
->
	`gë_cmp›
();

3188 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
§c_ty≥
,Åhread, 1);

3189 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
§c_ty≥
,Åhread, 1);

3192 if(
pI
->
	`is_abs
()) {

3193  
§c_ty≥
 ) {

3194 
S16_TYPE
: 
a
.
s16
 = 
	`my_abs
(a.s16); ;

3195 
S32_TYPE
: 
a
.
s32
 = 
	`my_abs
(a.s32); ;

3196 
S64_TYPE
: 
a
.
s64
 = 
	`my_abs
(a.s64); ;

3197 
U16_TYPE
: 
a
.
u16
 =á.u16; ;

3198 
U32_TYPE
: 
a
.
u32
 = 
	`my_abs
(a.u32); ;

3199 
U64_TYPE
: 
a
.
u64
 = 
	`my_abs
(a.u64); ;

3200 
F32_TYPE
: 
a
.
f32
 = 
	`my_abs
(a.f32); ;

3201 
F64_TYPE
: 
FF64_TYPE
: 
a
.
f64
 = 
	`my_abs
(a.f64); ;

3203 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

3204 
	`as£π
(0);

3209 
t
 = 
	`CmpOp
(
§c_ty≥
,
a
,
b
,
cmp›
);

3211 
±x_ªg_t
 
d©a
;

3212 i‡–
	`isFlﬂt
(
pI
->
	`gë_ty≥
()) ) {

3213 
d©a
.
f32
 = (
t
!=0)?1.0f:0.0f;

3215 
d©a
.
u32
 = (
t
!=0)?0xFFFFFFFF:0;

3218 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d©a
, 
pI
->
	`gë_ty≥
(),Åhread,ÖI);

3220 
	}
}

3222 
	$shl_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3224 
±x_ªg_t
 
a
, 
b
, 
d
;

3225 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3226 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3227 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3229 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3230 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3231 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

3233  
i_ty≥
 ) {

3234 
B16_TYPE
:

3235 
U16_TYPE
:

3236 i‡–
b
.
u16
 >= 16 )

3237 
d
.
u16
 = 0;

3239 
d
.
u16
 = (Ë((
a
.u16 << 
b
.u16) & 0xFFFF);

3241 
B32_TYPE
:

3242 
U32_TYPE
:

3243 i‡–
b
.
u32
 >= 32 )

3244 
d
.
u32
 = 0;

3246 
d
.
u32
 = (Ë((
a
.u32 << 
b
.u32) & 0xFFFFFFFF);

3248 
B64_TYPE
:

3249 
U64_TYPE
:

3250 i‡–
b
.
u32
 >= 64 )

3251 
d
.
u64
 = 0;

3253 
d
.
u64
 = (
a
.u64 << 
b
.u64);

3256 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

3257 
	`as£π
(0);

3261 
thªad
->
	`£t_›î™d_vÆue
(
d°
, 
d
, 
i_ty≥
,Åhªad, 
pI
);

3262 
	}
}

3264 
	$shr_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3266 
±x_ªg_t
 
a
, 
b
, 
d
;

3267 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3268 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3269 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3271 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3272 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3273 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

3276  
i_ty≥
 ) {

3277 
U16_TYPE
:

3278 
B16_TYPE
:

3279 i‡–
b
.
u16
 < 16 )

3280 
d
.
u16
 = (Ë((
a
.u16 >> 
b
.u16) & 0xFFFF);

3282 
d
.
u16
 = 0;

3284 
U32_TYPE
:

3285 
B32_TYPE
:

3286 i‡–
b
.
u32
 < 32 )

3287 
d
.
u32
 = (Ë((
a
.u32 >> 
b
.u32) & 0xFFFFFFFF);

3289 
d
.
u32
 = 0;

3291 
U64_TYPE
:

3292 
B64_TYPE
:

3293 i‡–
b
.
u32
 < 64 )

3294 
d
.
u64
 = (
a
.u64 >> 
b
.u64);

3296 
d
.
u64
 = 0;

3298 
S16_TYPE
:

3299 i‡–
b
.
u16
 < 16 )

3300 
d
.
s64
 = (
a
.
s16
 >> 
b
.s16);

3302 i‡–
a
.
s16
 < 0 ) {

3303 
d
.
s64
 = -1;

3305 
d
.
s64
 = 0;

3309 
S32_TYPE
:

3310 i‡–
b
.
u32
 < 32 )

3311 
d
.
s64
 = (
a
.
s32
 >> 
b
.s32);

3313 i‡–
a
.
s32
 < 0 ) {

3314 
d
.
s64
 = -1;

3316 
d
.
s64
 = 0;

3320 
S64_TYPE
:

3321 i‡–
b
.
u64
 < 64 )

3322 
d
.
s64
 = (
a
.s64 >> 
b
.
u64
);

3324 i‡–
a
.
s64
 < 0 ) {

3325 i‡–
b
.
s32
 < 0 ) {

3326 
d
.
u64
 = -1;

3327 
d
.
s32
 = 0;

3329 
d
.
s64
 = -1;

3332 
d
.
s64
 = 0;

3337 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

3338 
	`as£π
(0);

3342 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

3343 
	}
}

3345 
	$sö_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3347 
±x_ªg_t
 
a
, 
d
;

3348 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3349 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3351 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3352 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3355  
i_ty≥
 ) {

3356 
F32_TYPE
:

3357 
d
.
f32
 = 
	`sö
(
a
.f32);

3360 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

3361 
	`as£π
(0);

3365 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

3366 
	}
}

3368 
	$¶˘_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3370 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3371 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3372 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3373 c⁄° 
›î™d_öfo
 &
§c3
 = 
pI
->
	`§c3
();

3375 
±x_ªg_t
 
a
, 
b
, 
c
, 
d
;

3377 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3378 
c_ty≥
 = 
pI
->
	`gë_ty≥2
();

3379 
boﬁ
 
t
 = 
Ál£
;

3380 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3381 
b
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

3382 
c
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c3
, 
d°
, 
c_ty≥
,Åhread, 1);

3384  
c_ty≥
 ) {

3385 
S32_TYPE
: 
t
 = 
c
.
s32
 >= 0; ;

3386 
F32_TYPE
: 
t
 = 
c
.
f32
 >= 0; ;

3387 : 
	`as£π
(0);

3390  
i_ty≥
 ) {

3391 
B16_TYPE
:

3392 
U16_TYPE
: 
d
.
u16
 = 
t
?
a
.u16:
b
.u16; ;

3393 
F32_TYPE
:

3394 
B32_TYPE
:

3395 
U32_TYPE
: 
d
.
u32
 = 
t
?
a
.u32:
b
.u32; ;

3396 
F64_TYPE
:

3397 
FF64_TYPE
:

3398 
B64_TYPE
:

3399 
U64_TYPE
: 
d
.
u64
 = 
t
?
a
.u64:
b
.u64; ;

3400 : 
	`as£π
(0);

3403 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

3404 
	}
}

3406 
	$sqπ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3408 
±x_ªg_t
 
a
, 
d
;

3409 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3410 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3412 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3413 
a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3416  
i_ty≥
 ) {

3417 
F32_TYPE
:

3418 i‡–
a
.
f32
 < 0 )

3419 
d
.
f32
 = 
	`«nf
("");

3421 
d
.
f32
 = 
	`sqπ
(
a
.f32); ;

3422 
F64_TYPE
:

3423 
FF64_TYPE
:

3424 i‡–
a
.
f64
 < 0 )

3425 
d
.
f64
 = 
	`«n
("");

3427 
d
.
f64
 = 
	`sqπ
(
a
.f64); ;

3429 
	`¥ötf
("ExecutionÉrror:Åype mismatch with instruction\n");

3430 
	`as£π
(0);

3434 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d
, 
i_ty≥
,Åhªad, 
pI
);

3435 
	}
}

3437 
	$°_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3439 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3440 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3441 
ty≥
 = 
pI
->
	`gë_ty≥
();

3442 
±x_ªg_t
 
addr_ªg
 = 
thªad
->
	`gë_›î™d_vÆue
(
d°
, d°, 
ty≥
,Åhread, 1);

3443 
±x_ªg_t
 
d©a
;

3444 
mem‹y_•a˚_t
 
•a˚
 = 
pI
->
	`gë_•a˚
();

3445 
ve˘‹_•ec
 = 
pI
->
	`gë_ve˘‹
();

3447 
mem‹y_•a˚
 *
mem
 = 
NULL
;

3448 
addr_t
 
addr
 = 
addr_ªg
.
u32
;

3450 
	`decode_•a˚
(
•a˚
,
thªad
,
d°
,
mem
,
addr
);

3452 
	`as£π
(
mem
 !
NULL
);

3455 
size_t
 
size
;

3456 
t
;

3457 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

3459 i‡(!
ve˘‹_•ec
) {

3460 
d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
ty≥
,Åhread, 1);

3461 
mem
->
	`wrôe
(
addr
,
size
/8,&
d©a
.
s64
,
thªad
,
pI
);

3463 i‡(
ve˘‹_•ec
 =
V2_TYPE
) {

3464 
±x_ªg_t
* 
±x_ªgs
 = 
√w
Ötx_reg_t[2];

3465 
thªad
->
	`gë_ve˘‹_›î™d_vÆues
(
§c1
, 
±x_ªgs
, 2);

3466 
mem
->
	`wrôe
(
addr
,
size
/8,&
±x_ªgs
[0].
s64
,
thªad
,
pI
);

3467 
mem
->
	`wrôe
(
addr
+
size
/8,size/8,&
±x_ªgs
[1].
s64
,
thªad
,
pI
);

3468 
dñëe
 [] 
±x_ªgs
;

3470 i‡(
ve˘‹_•ec
 =
V3_TYPE
) {

3471 
±x_ªg_t
* 
±x_ªgs
 = 
√w
Ötx_reg_t[3];

3472 
thªad
->
	`gë_ve˘‹_›î™d_vÆues
(
§c1
, 
±x_ªgs
, 3);

3473 
mem
->
	`wrôe
(
addr
,
size
/8,&
±x_ªgs
[0].
s64
,
thªad
,
pI
);

3474 
mem
->
	`wrôe
(
addr
+
size
/8,size/8,&
±x_ªgs
[1].
s64
,
thªad
,
pI
);

3475 
mem
->
	`wrôe
(
addr
+2*
size
/8,size/8,&
±x_ªgs
[2].
s64
,
thªad
,
pI
);

3476 
dñëe
 [] 
±x_ªgs
;

3478 i‡(
ve˘‹_•ec
 =
V4_TYPE
) {

3479 
±x_ªg_t
* 
±x_ªgs
 = 
√w
Ötx_reg_t[4];

3480 
thªad
->
	`gë_ve˘‹_›î™d_vÆues
(
§c1
, 
±x_ªgs
, 4);

3481 
mem
->
	`wrôe
(
addr
,
size
/8,&
±x_ªgs
[0].
s64
,
thªad
,
pI
);

3482 
mem
->
	`wrôe
(
addr
+
size
/8,size/8,&
±x_ªgs
[1].
s64
,
thªad
,
pI
);

3483 
mem
->
	`wrôe
(
addr
+2*
size
/8,size/8,&
±x_ªgs
[2].
s64
,
thªad
,
pI
);

3484 
mem
->
	`wrôe
(
addr
+3*
size
/8,size/8,&
±x_ªgs
[3].
s64
,
thªad
,
pI
);

3485 
dñëe
 [] 
±x_ªgs
;

3488 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
addr
;

3489 
thªad
->
m_œ°_mem‹y_•a˚
 = 
•a˚
;

3490 
	}
}

3492 
	$sub_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3494 
±x_ªg_t
 
d©a
;

3495 
ovîÊow
 = 0;

3496 
ˇºy
 = 0;

3498 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3499 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3500 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3502 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3503 
±x_ªg_t
 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3504 
±x_ªg_t
 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

3508  
i_ty≥
 ) {

3509 
S8_TYPE
:

3510 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0xFFË- (
§c2_d©a
.s64 & 0xFF) + 0x100;

3511 if(((
§c1_d©a
.
s64
 & 0x80)-(
§c2_d©a
.s64 & 0x80)Ë!0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x80)-(
d©a
.s64 & 0x80))==0?0:1; }

3512 
ˇºy
 = (
d©a
.
s32
 & 0x100)>>8;

3514 
S16_TYPE
:

3515 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0xFFFFË- (
§c2_d©a
.s64 & 0xFFFF) + 0x10000;

3516 if(((
§c1_d©a
.
s64
 & 0x8000)-(
§c2_d©a
.s64 & 0x8000)Ë!0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x8000)-(
d©a
.s64 & 0x8000))==0?0:1; }

3517 
ˇºy
 = (
d©a
.
s32
 & 0x10000)>>16;

3519 
S32_TYPE
:

3520 
d©a
.
s64
 = (
§c1_d©a
.s64 & 0xFFFFFFFFË- (
§c2_d©a
.s64 & 0xFFFFFFFF) + 0x100000000;

3521 if(((
§c1_d©a
.
s64
 & 0x80000000)-(
§c2_d©a
.s64 & 0x80000000)Ë!0Ë{
ovîÊow
=((§c1_d©a.s64 & 0x80000000)-(
d©a
.s64 & 0x80000000))==0?0:1; }

3522 
ˇºy
 = ((
d©a
.
u64
)>>32) & 0x0001;

3524 
S64_TYPE
:

3525 
d©a
.
s64
 = 
§c1_d©a
.s64 - 
§c2_d©a
.s64; ;

3526 
B8_TYPE
:

3527 
U8_TYPE
:

3528 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFË- (
§c2_d©a
.u64 & 0xFF) + 0x100;

3529 
ˇºy
 = (
d©a
.
u64
 & 0x100)>>8;

3531 
B16_TYPE
:

3532 
U16_TYPE
:

3533 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFFFË- (
§c2_d©a
.u64 & 0xFFFF) + 0x10000;

3534 
ˇºy
 = (
d©a
.
u64
 & 0x10000)>>16;

3536 
B32_TYPE
:

3537 
U32_TYPE
:

3538 
d©a
.
u64
 = (
§c1_d©a
.u64 & 0xFFFFFFFFË- (
§c2_d©a
.u64 & 0xFFFFFFFF) + 0x100000000;

3539 
ˇºy
 = (
d©a
.
u64
 & 0x100000000)>>32;

3541 
B64_TYPE
:

3542 
U64_TYPE
:

3543 
d©a
.
u64
 = 
§c1_d©a
.u64 - 
§c2_d©a
.u64; ;

3544 
F16_TYPE
: 
	`as£π
(0); ;

3545 
F32_TYPE
: 
d©a
.
f32
 = 
§c1_d©a
.f32 - 
§c2_d©a
.f32; ;

3546 
F64_TYPE
: 
FF64_TYPE
: 
d©a
.
f64
 = 
§c1_d©a
.f64 - 
§c2_d©a
.f64; ;

3547 : 
	`as£π
(0); ;

3550 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
, 
ovîÊow
, 
ˇºy
);

3551 
	}
}

3553 
	$n›_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3556 
	}
}

3558 
	$subc_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3559 
	$suld_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3560 
	$suªd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3561 
	$su°_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3562 
	$suq_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3565 
±x_ªg_t
* 
	g±x_ãx_ªgs_kaö
[
Thªad_Num
];

3567 
	uötÊﬂt
 {

3568 
	ma
;

3569 
	mb
;

3572 
	$ªdu˚_¥ecisi⁄
–
x
, 
bôs
 )

3574 
ötÊﬂt
 
tmp
;

3575 
tmp
.
b
 = 
x
;

3576 
v
 = 
tmp
.
a
;

3577 
m™
 = 
v
 & ((1<<23)-1);

3578 
mask
 = ((1<<
bôs
)-1) << (23-bits);

3579 
nv
 = (
v
 & ((-1)-((1<<23)-1))Ë| (
mask
&
m™
);

3580 
tmp
.
a
 = 
nv
;

3581 
ªsu…
 = 
tmp
.
b
;

3582  
ªsu…
;

3583 
	}
}

3585 
	$wøp
–
x
, 
y
, 
mx
, 
my
, 
size_t
 
ñem_size
 )

3587 
nx
 = (
mx
+
x
)%mx;

3588 
ny
 = (
my
+
y
)%my;

3589  
nx
 + 
mx
*
ny
;

3590 
	}
}

3592 
	$˛amp
–
x
, 
y
, 
mx
, 
my
, 
size_t
 
ñem_size
 )

3594 
nx
 = 
x
;

3595 
nx
 >
mx
Ënx -
ñem_size
;

3596 
ny
 = (
y
 >
my
)? my - 1 : y;

3597  
nx
 + 
mx
*
ny
;

3598 
	}
}

3600 (*
	tãxAddr_t
Ë(
	tx
, 
	ty
, 
	tmx
, 
	tmy
, 
	tsize_t
 
	tñem_size
);

3601 
	$ãx_löf_ßm∂ög
(
mem‹y_•a˚
* 
mem
, 
ãx_¨øy_ba£
,

3602 
x
, 
y
, 
width
, 
height
, 
size_t
 
ñem_size
,

3603 
Æpha
, 
bëa
, 
ãxAddr_t
 
b_lim
)

3605 
Tij
;

3606 
Ti1j
;

3607 
Tij1
;

3608 
Ti1j1
;

3610 
mem
->
	`ªad
(
ãx_¨øy_ba£
 + 
	`b_lim
(
x
,
y
,
width
,
height
,
ñem_size
), 4, &
Tij
);

3611 
mem
->
	`ªad
(
ãx_¨øy_ba£
 + 
	`b_lim
(
x
+
ñem_size
,
y
,
width
,
height
,ñem_size), 4, &
Ti1j
);

3612 
mem
->
	`ªad
(
ãx_¨øy_ba£
 + 
	`b_lim
(
x
,
y
+1,
width
,
height
,
ñem_size
), 4, &
Tij1
);

3613 
mem
->
	`ªad
(
ãx_¨øy_ba£
 + 
	`b_lim
(
x
+
ñem_size
,
y
+1,
width
,
height
,ñem_size), 4, &
Ti1j1
);

3615 
ßm∂e
 = (1-
Æpha
)*(1-
bëa
)*
Tij
 +

3616 
Æpha
*(1-
bëa
)*
Ti1j
 +

3617 (1-
Æpha
)*
bëa
*
Tij1
 +

3618 
Æpha
*
bëa
*
Ti1j1
;

3620  
ßm∂e
;

3621 
	}
}

3623 
	$ãx_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3626 
öô_⁄˚_kaö
 = 0;

3627 if(
öô_⁄˚_kaö
 == 0)

3629 
öô_⁄˚_kaö
 = 1;

3630 
i
 = 0; i < 
Thªad_Num
; i++)

3632 
±x_ãx_ªgs_kaö
[
i
] = 
NULL
;

3639 
dimísi⁄
 = 
pI
->
	`dimísi⁄
();

3640 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3641 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3642 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3644 
°d
::
°rög
 
ãx«me
 = 
§c1
.
	`«me
();

3645 
to_ty≥
 = 
pI
->
	`gë_ty≥
();

3646 
	`fÊush
(
°dout
);

3647 
±x_ªg_t
 
d©a1
, 
d©a2
, 
d©a3
, 
d©a4
;

3650 
ThªadID_KAIN
 = 
thªad
->
	`gë_ThªadID_kaö
();

3651 i‡(!
±x_ãx_ªgs_kaö
[
ThªadID_KAIN
]Ë±x_ãx_ªgs_kaö[ThªadID_KAIN] = 
√w
 
±x_ªg_t
[4];

3652 
±x_ªg_t
* 
±x_ãx_ªgs
 = 
±x_ãx_ªgs_kaö
[
ThªadID_KAIN
];

3656 
√Àm
 = 
§c2
.
	`gë_ve˘_√Àm
();

3657 
thªad
->
	`gë_ve˘‹_›î™d_vÆues
(
§c2
, 
±x_ãx_ªgs
, 
√Àm
);

3659 
gpgpu_t
 *
gpu
 = 
thªad
->
	`gë_gpu
();

3660 c⁄° 
ãxtuªRe„ªn˚
* 
ãxªf
 = 
gpu
->
	`gë_ãxªf
(
ãx«me
);

3661 c⁄° 
cudaAºay
* 
cuAºay
 = 
gpu
->
	`gë_ãx¨øy
(
ãxªf
);

3662 c⁄° 
ãxtuªInfo
* 
ãxInfo
 = 
gpu
->
	`gë_ãxöfo
(
ãxªf
);

3666 
mem‹y_•a˚
 *
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
();

3667 
x_f32
, 
y_f32
;

3668 
size_t
 
size
;

3669 
t
;

3670 
ãx_¨øy_ba£
;

3671 
width
 = 0, 
height
 = 0;

3672 
x
 = 0;

3673 
y
 = 0;

3674 
ãx_¨øy_ödex
;

3675 
Æpha
=0, 
bëa
=0;

3677 
ty≥_öfo_key
::
	`ty≥_decode
(
to_ty≥
,
size
,
t
);

3679 
ãx_¨øy_ba£
 = 
cuAºay
->
devPå32
;

3682 
dimísi⁄
) {

3683 
GEOM_MODIFIER_1D
:

3684 
width
 = 
cuAºay
->width;

3685 
height
 = 
cuAºay
->height;

3686 i‡(
ãxªf
->
n‹mÆized
) {

3687 
x_f32
 = 
±x_ãx_ªgs
[0].
f32
;

3688 i‡(
ãxªf
->
addªssMode
[0] =
cudaAddªssModeCœmp
) {

3689 
x_f32
 = (x_f32 > 1.0)? 1.0 : x_f32;

3690 
x_f32
 = (x_f32 < 0.0)? 0.0 : x_f32;

3691 } i‡(
ãxªf
->
addªssMode
[0] =
cudaAddªssModeWøp
) {

3692 
x_f32
 = x_f32 - 
	`Êo‹
(x_f32);

3695 if–
ãxªf
->
fûãrMode
 =
cudaFûãrModeLöór
 ) {

3696 
xb
 = 
x_f32
 * 
width
 - 0.5;

3697 
Æpha
 = 
xb
 - 
	`Êo‹
(xb);

3698 
Æpha
 = 
	`ªdu˚_¥ecisi⁄
(alpha,9);

3699 
bëa
 = 0.0;

3701 
x
 = ()
	`Êo‹
(
xb
);

3702 
y
 = 0;

3704 
x
 = (Ë
	`Êo‹
(
x_f32
 * 
width
);

3705 
y
 = 0;

3708 
x
 = 
±x_ãx_ªgs
[0].
u64
;

3710 
width
 *(
cuAºay
->
desc
.
w
+cuAºay->desc.
x
+cuAºay->desc.
y
+cuAºay->desc.
z
)/8;

3711 
x
 *(
cuAºay
->
desc
.
w
+cuAºay->desc.x+cuAºay->desc.
y
+cuAºay->desc.
z
)/8;

3712 
ãx_¨øy_ödex
 = 
ãx_¨øy_ba£
 + 
x
;

3715 
GEOM_MODIFIER_2D
:

3717 
width
 = 
cuAºay
->width;

3718 
height
 = 
cuAºay
->height;

3719 i‡(
ãxªf
->
n‹mÆized
) {

3720 
x_f32
 = 
	`ªdu˚_¥ecisi⁄
(
±x_ãx_ªgs
[0].
f32
,16);

3721 
y_f32
 = 
	`ªdu˚_¥ecisi⁄
(
±x_ãx_ªgs
[1].
f32
,15);

3723 i‡(
ãxªf
->
addªssMode
[0]) {

3724 i‡(
x_f32
<0) x_f32 = 0;

3725 i‡(
x_f32
>=1) x_f32 = 1 - 1/x_f32;

3727 
x_f32
 = x_f32 - 
	`Êo‹
(x_f32);

3729 i‡(
ãxªf
->
addªssMode
[1]) {

3730 i‡(
y_f32
<0) y_f32 = 0;

3731 i‡(
y_f32
>=1) y_f32 = 1 - 1/y_f32;

3733 
y_f32
 = y_f32 - 
	`Êo‹
(y_f32);

3736 if–
ãxªf
->
fûãrMode
 =
cudaFûãrModeLöór
 ) {

3737 
xb
 = 
x_f32
 * 
width
 - 0.5;

3738 
yb
 = 
y_f32
 * 
height
 - 0.5;

3739 
Æpha
 = 
xb
 - 
	`Êo‹
(xb);

3740 
bëa
 = 
yb
 - 
	`Êo‹
(yb);

3741 
Æpha
 = 
	`ªdu˚_¥ecisi⁄
(alpha,9);

3742 
bëa
 = 
	`ªdu˚_¥ecisi⁄
(beta,9);

3744 
x
 = ()
	`Êo‹
(
xb
);

3745 
y
 = ()
	`Êo‹
(
yb
);

3747 
x
 = (Ë
	`Êo‹
(
x_f32
 * 
width
);

3748 
y
 = (Ë
	`Êo‹
(
y_f32
 * 
height
);

3751 
x_f32
 = 
±x_ãx_ªgs
[0].
f32
;

3752 
y_f32
 = 
±x_ãx_ªgs
[1].
f32
;

3754 
Æpha
 = 
x_f32
 - 
	`Êo‹
(x_f32);

3755 
bëa
 = 
y_f32
 - 
	`Êo‹
(y_f32);

3757 
x
 = (Ë
x_f32
;

3758 
y
 = (Ë
y_f32
;

3759 i‡(
ãxªf
->
addªssMode
[0]) {

3760 i‡(
x
<0) x = 0;

3761 i‡(
x
>()
width
) x = width-1;

3763 
x
 = x % 
width
;

3764 i‡(
x
 < 0) x*= -1;

3766 i‡(
ãxªf
->
addªssMode
[1]) {

3767 i‡(
y
<0) y = 0;

3768 i‡(
y
>()
height
) y = height -1;

3770 
y
 = y % 
height
;

3771 i‡(
y
 < 0) y *= -1;

3775 
width
 *(
cuAºay
->
desc
.
w
+cuAºay->desc.
x
+cuAºay->desc.
y
+cuAºay->desc.
z
)/8;

3776 
x
 *(
cuAºay
->
desc
.
w
+cuAºay->desc.x+cuAºay->desc.
y
+cuAºay->desc.
z
)/8;

3777 
ãx_¨øy_ödex
 = 
ãx_¨øy_ba£
 + (
x
 + 
width
*
y
);

3780 
	`as£π
(0); ;

3784  
to_ty≥
 ) {

3785 
U8_TYPE
:

3786 
U16_TYPE
:

3787 
U32_TYPE
:

3788 
B8_TYPE
:

3789 
B16_TYPE
:

3790 
B32_TYPE
:

3791 
S8_TYPE
:

3792 
S16_TYPE
:

3793 
S32_TYPE
:

3794 
mem
->
	`ªad
–
ãx_¨øy_ödex
, 
cuAºay
->
desc
.
x
/8, &
d©a1
.
u32
);

3795 i‡(
cuAºay
->
desc
.
y
) {

3796 
mem
->
	`ªad
–
ãx_¨øy_ödex
+4, 
cuAºay
->
desc
.
y
/8, &
d©a2
.
u32
);

3797 i‡(
cuAºay
->
desc
.
z
) {

3798 
mem
->
	`ªad
–
ãx_¨øy_ödex
+8, 
cuAºay
->
desc
.
z
/8, &
d©a3
.
u32
);

3799 i‡(
cuAºay
->
desc
.
w
)

3800 
mem
->
	`ªad
–
ãx_¨øy_ödex
+12, 
cuAºay
->
desc
.
w
/8, &
d©a4
.
u32
);

3804 
B64_TYPE
:

3805 
U64_TYPE
:

3806 
S64_TYPE
:

3807 
mem
->
	`ªad
–
ãx_¨øy_ödex
, 8, &
d©a1
.
u64
);

3808 i‡(
cuAºay
->
desc
.
y
) {

3809 
mem
->
	`ªad
–
ãx_¨øy_ödex
+4, 8, &
d©a2
.
u64
);

3810 i‡(
cuAºay
->
desc
.
z
) {

3811 
mem
->
	`ªad
–
ãx_¨øy_ödex
+8, 8, &
d©a3
.
u64
);

3812 i‡(
cuAºay
->
desc
.
w
)

3813 
mem
->
	`ªad
–
ãx_¨øy_ödex
+12, 8, &
d©a4
.
u64
);

3817 
F16_TYPE
: 
	`as£π
(0); ;

3818 
F32_TYPE
: {

3819 if–
ãxªf
->
fûãrMode
 =
cudaFûãrModeLöór
 ) {

3820 
ãxAddr_t
 
b_lim
 = 
wøp
;

3821 i‡–
ãxªf
->
addªssMode
[0] =
cudaAddªssModeCœmp
 ) {

3822 
b_lim
 = 
˛amp
;

3824 
size_t
 
ñem_size
 = (
cuAºay
->
desc
.
x
 + cuAºay->desc.
y
 + cuAºay->desc.
z
 + cuAºay->desc.
w
) / 8;

3825 
size_t
 
ñem_of°
 = 0;

3827 
d©a1
.
f32
 = 
	`ãx_löf_ßm∂ög
(
mem
, 
ãx_¨øy_ba£
, 
x
 + 
ñem_of°
, 
y
, 
width
, 
height
, 
ñem_size
, 
Æpha
, 
bëa
, 
b_lim
);

3828 
ñem_of°
 +
cuAºay
->
desc
.
x
 / 8;

3829 i‡(
cuAºay
->
desc
.
y
) {

3830 
d©a2
.
f32
 = 
	`ãx_löf_ßm∂ög
(
mem
, 
ãx_¨øy_ba£
, 
x
 + 
ñem_of°
, 
y
, 
width
, 
height
, 
ñem_size
, 
Æpha
, 
bëa
, 
b_lim
);

3831 
ñem_of°
 +
cuAºay
->
desc
.
y
 / 8;

3832 i‡(
cuAºay
->
desc
.
z
) {

3833 
d©a3
.
f32
 = 
	`ãx_löf_ßm∂ög
(
mem
, 
ãx_¨øy_ba£
, 
x
 + 
ñem_of°
, 
y
, 
width
, 
height
, 
ñem_size
, 
Æpha
, 
bëa
, 
b_lim
);

3834 
ñem_of°
 +
cuAºay
->
desc
.
z
 / 8;

3835 i‡(
cuAºay
->
desc
.
w
)

3836 
d©a4
.
f32
 = 
	`ãx_löf_ßm∂ög
(
mem
, 
ãx_¨øy_ba£
, 
x
 + 
ñem_of°
, 
y
, 
width
, 
height
, 
ñem_size
, 
Æpha
, 
bëa
, 
b_lim
);

3840 
mem
->
	`ªad
–
ãx_¨øy_ödex
, 
cuAºay
->
desc
.
x
/8, &
d©a1
.
f32
);

3841 i‡(
cuAºay
->
desc
.
y
) {

3842 
mem
->
	`ªad
–
ãx_¨øy_ödex
+4, 
cuAºay
->
desc
.
y
/8, &
d©a2
.
f32
);

3843 i‡(
cuAºay
->
desc
.
z
) {

3844 
mem
->
	`ªad
–
ãx_¨øy_ödex
+8, 
cuAºay
->
desc
.
z
/8, &
d©a3
.
f32
);

3845 i‡(
cuAºay
->
desc
.
w
)

3846 
mem
->
	`ªad
–
ãx_¨øy_ödex
+12, 
cuAºay
->
desc
.
w
/8, &
d©a4
.
f32
);

3851 
F64_TYPE
:

3852 
FF64_TYPE
:

3853 
mem
->
	`ªad
–
ãx_¨øy_ödex
, 8, &
d©a1
.
f64
);

3854 i‡(
cuAºay
->
desc
.
y
) {

3855 
mem
->
	`ªad
–
ãx_¨øy_ödex
+8, 8, &
d©a2
.
f64
);

3856 i‡(
cuAºay
->
desc
.
z
) {

3857 
mem
->
	`ªad
–
ãx_¨øy_ödex
+16, 8, &
d©a3
.
f64
);

3858 i‡(
cuAºay
->
desc
.
w
)

3859 
mem
->
	`ªad
–
ãx_¨øy_ödex
+24, 8, &
d©a4
.
f64
);

3863 : 
	`as£π
(0); ;

3865 
x_block_co‹d
, 
y_block_co‹d
, 
memªqödex
, 
blockoff£t
;

3867 
dimísi⁄
) {

3868 
GEOM_MODIFIER_1D
:

3869 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
ãx_¨øy_ödex
;

3871 
GEOM_MODIFIER_2D
:

3872 
x_block_co‹d
 = 
x
 >> (
ãxInfo
->
Tx_numbôs
 +ÅexInfo->
ãxñ_size_numbôs
);

3873 
y_block_co‹d
 = 
y
 >> 
ãxInfo
->
Ty_numbôs
;

3875 
memªqödex
 = ((
y_block_co‹d
*
cuAºay
->
width
/
ãxInfo
->
Tx
)+
x_block_co‹d
)<<6;

3877 
blockoff£t
 = (
x
%(
ãxInfo
->
Tx
*ãxInfo->
ãxñ_size
Ë+ (
y
%—exInfo->
Ty
)<<—exInfo->
Tx_numbôs
 +ÅexInfo->
ãxñ_size_numbôs
)));

3878 
memªqödex
 +
blockoff£t
;

3879 
thªad
->
m_œ°_ef„˘ive_addªss
 = 
ãx_¨øy_ba£
 + 
memªqödex
;

3882 
	`as£π
(0);

3884 
thªad
->
m_œ°_mem‹y_•a˚
 = 
ãx_•a˚
;

3885 
thªad
->
	`£t_ve˘‹_›î™d_vÆues
(
d°
,
d©a1
,
d©a2
,
d©a3
,
d©a4
);

3888 
	}
}

3890 
	$txq_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3891 
	$å≠_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3892 
	$vabsdiff_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3893 
	$vadd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3894 
	$vmad_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3895 
	$vmax_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3896 
	$vmö_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3897 
	$v£t_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3898 
	$vshl_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3899 
	$vshr_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3900 
	$vsub_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) { 
	`ö°_nŸ_im∂emíãd
’I); 
	}
}

3902 
	$vŸe_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3904 
boﬁ
 
fú°_ö_w¨p
 = 
åue
;

3905 
boﬁ
 
™d_Æl
;

3906 
boﬁ
 
‹_Æl
;

3907 
°d
::
li°
<
±x_thªad_öfo
*> 
thªads_ö_w¨p
;

3908 
œ°_tid
;

3910 if–
fú°_ö_w¨p
 ) {

3911 
fú°_ö_w¨p
 = 
Ál£
;

3912 
thªads_ö_w¨p
.
	`˛ór
();

3913 
™d_Æl
 = 
åue
;

3914 
‹_Æl
 = 
Ál£
;

3915 
off£t
=31;

3916  (
off£t
>=0Ë&& !
pI
->
	`a˘ive
(offset) )

3917 
off£t
--;

3918 
	`as£π
–
off£t
 >= 0 );

3919 
œ°_tid
 = (
thªad
->
	`gë_hw_tid
(Ë- (thªad->gë_hw_tid()%
pI
->
	`w¨p_size
())Ë+ 
off£t
;

3922 
±x_ªg_t
 
§c1_d©a
;

3923 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3924 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
pI
->
	`d°
(), 
PRED_TYPE
,Åhread, 1);

3928 
boﬁ
 
¥ed_vÆue
 = !(
§c1_d©a
.
¥ed
 & 0x0001);

3929 
boﬁ
 
övît
 = 
§c1
.
	`is_√g_¥ed
();

3931 
thªads_ö_w¨p
.
	`push_back
(
thªad
);

3932 
™d_Æl
 &(
övît
 ^ 
¥ed_vÆue
);

3933 
‹_Æl
 |(
övît
 ^ 
¥ed_vÆue
);

3935 if–
thªad
->
	`gë_hw_tid
(Ë=
œ°_tid
 ) {

3936 
boﬁ
 
¥ed_vÆue
 = 
Ál£
;

3938  
pI
->
	`vŸe_mode
() ) {

3939 
±x_ö°ru˘i⁄
::
vŸe_™y
: 
¥ed_vÆue
 = 
‹_Æl
; ;

3940 
±x_ö°ru˘i⁄
::
vŸe_Æl
: 
¥ed_vÆue
 = 
™d_Æl
; ;

3941 
±x_ö°ru˘i⁄
::
vŸe_uni
: 
¥ed_vÆue
 = (
‹_Æl
 ^ 
™d_Æl
); ;

3943 
	`ab‹t
();

3945 
±x_ªg_t
 
d©a
;

3946 
d©a
.
¥ed
 = 
¥ed_vÆue
?0:1;

3948  
°d
::
li°
<
±x_thªad_öfo
*>::
ôî©‹
 
t
=
thªads_ö_w¨p
.
	`begö
();Å!Òhªads_ö_w¨p.
	`íd
(); ++t ) {

3949 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3950 (*
t
)->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
PRED_TYPE
, (*t), 
pI
);

3952 
fú°_ö_w¨p
 = 
åue
;

3954 
	}
}

3956 
	$x‹_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 )

3958 
±x_ªg_t
 
§c1_d©a
, 
§c2_d©a
, 
d©a
;

3960 c⁄° 
›î™d_öfo
 &
d°
 = 
pI
->
	`d°
();

3961 c⁄° 
›î™d_öfo
 &
§c1
 = 
pI
->
	`§c1
();

3962 c⁄° 
›î™d_öfo
 &
§c2
 = 
pI
->
	`§c2
();

3964 
i_ty≥
 = 
pI
->
	`gë_ty≥
();

3965 
§c1_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c1
, 
d°
, 
i_ty≥
,Åhread, 1);

3966 
§c2_d©a
 = 
thªad
->
	`gë_›î™d_vÆue
(
§c2
, 
d°
, 
i_ty≥
,Åhread, 1);

3969 if(
i_ty≥
 =
PRED_TYPE
)

3970 
d©a
.
¥ed
 = ~(~(
§c1_d©a
.¥edË^ ~(
§c2_d©a
.pred));

3972 
d©a
.
u64
 = 
§c1_d©a
.u64 ^ 
§c2_d©a
.u64;

3974 
thªad
->
	`£t_›î™d_vÆue
(
d°
,
d©a
, 
i_ty≥
,Åhªad, 
pI
);

3975 
	}
}

3977 
	$ö°_nŸ_im∂emíãd
–c⁄° 
±x_ö°ru˘i⁄
 * 
pI
 )

3979 
	`¥ötf
("GPGPU-Sim PTX: ERROR (%s:%u) instruction \"%s\"Çot (yet) implemented\n",

3980 
pI
->
	`sour˚_fûe
(),

3981 
pI
->
	`sour˚_löe
(),

3982 
pI
->
	`gë_›code_c°r
() );

3983 
	`ab‹t
();

3984 
	}
}

3986 
±x_ªg_t
 
	$§cO≥øndModifõrs
(
±x_ªg_t
 
›D©a
, 
›î™d_öfo
 
›Info
, o≥ønd_öfÿ
d°Info
, 
ty≥
, 
±x_thªad_öfo
 *
thªad
)

3988 
±x_ªg_t
 
ªsu…
;

3989 
mem‹y_•a˚
 *
mem
 = 
NULL
;

3990 
size_t
 
size
;

3991 
t
;

3992 
ªsu…
.
u64
=0;

3995 if(
›Info
.
	`gë_addr_•a˚
(Ë=
globÆ_•a˚
)

3997 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
();

3998 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

3999 
mem
->
	`ªad
(
›D©a
.
u32
,
size
/8,&
ªsu…
.
u64
);

4000 if–
ty≥
 =
S16_TYPE
 ||Åy≥ =
S32_TYPE
 )

4001 
	`sign_exãnd
(
ªsu…
,
size
,
d°Info
);

4003 if(
›Info
.
	`gë_addr_•a˚
(Ë=
sh¨ed_•a˚
)

4005 
mem
 = 
thªad
->
m_sh¨ed_mem
;

4006 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

4007 
mem
->
	`ªad
(
›D©a
.
u32
,
size
/8,&
ªsu…
.
u64
);

4009 if–
ty≥
 =
S16_TYPE
 ||Åy≥ =
S32_TYPE
 )

4010 
	`sign_exãnd
(
ªsu…
,
size
,
d°Info
);

4013 if(
›Info
.
	`gë_addr_•a˚
(Ë=
c⁄°_•a˚
)

4015 
mem
 = 
thªad
->
	`gë_globÆ_mem‹y
();

4016 
ty≥_öfo_key
::
	`ty≥_decode
(
ty≥
,
size
,
t
);

4018 
mem
->
	`ªad
((
›D©a
.
u32
 + 
›Info
.
	`gë_c⁄°_mem_off£t
()),
size
/8,&
ªsu…
.
u64
);

4020 if–
ty≥
 =
S16_TYPE
 ||Åy≥ =
S32_TYPE
 )

4021 
	`sign_exãnd
(
ªsu…
,
size
,
d°Info
);

4025 
ªsu…
 = 
›D©a
;

4028 if(
›Info
.
	`gë_›î™d_lohi
() == 1)

4030 
ªsu…
.
u64
 =Ñesult.u64 & 0xFFFF;

4032 if(
›Info
.
	`gë_›î™d_lohi
() == 2)

4034 
ªsu…
.
u64
 = (result.u64>>16) & 0xFFFF;

4037 if(
›Info
.
	`gë_›î™d_√g
(Ë=
åue
) {

4038 
ªsu…
.
f32
 = -result.f32;

4041  
ªsu…
;

4042 
	}
}

	@src/cuda-sim/instructions.h

2 
	~"±x_ú.h
"

3 #i‚de‡
ö°ru˘i⁄s_h_ö˛uded


4 
	#ö°ru˘i⁄s_h_ö˛uded


	)

5 #ifde‡
__˝lu•lus


8 
abs_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

9 
addp_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

10 
add_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

11 
addc_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

12 
™d_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

13 
™dn_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

14 
©om_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

15 
b¨_sync_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

16 
b„_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

17 
bfi_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

18 
bföd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

19 
bø_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

20 
bªak_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

21 
bªakaddr_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

22 
bªv_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

23 
brk±_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

24 
ˇŒ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

25 
ˇŒp_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

26 
˛z_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

27 
˙Ÿ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

28 
cos_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

29 
cvt_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

30 
cvè_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

31 
div_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

32 
ex2_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

33 
exô_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

34 
fma_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

35 
is•a˚p_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

36 
ld_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

37 
ldu_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

38 
lg2_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

39 
mad24_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

40 
mad_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

41 
max_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

42 
memb¨_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

43 
mö_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

44 
mov_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

45 
mul24_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

46 
mul_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

47 
√g_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

48 
«ndn_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

49 
n‹n_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

50 
nŸ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

51 
‹_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

52 
‹n_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

53 
pmevít_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

54 
p›c_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

55 
¥e„tch_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

56 
¥e„tchu_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

57 
¥mt_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

58 
r˝_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

59 
ªd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

60 
ªm_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

61 
ªt_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

62 
ªç_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

63 
rsqπ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

64 
ßd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

65 
£Õ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

66 
£ç_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

67 
£t_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

68 
shl_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

69 
shr_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

70 
sö_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

71 
¶˘_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

72 
sqπ_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

73 
°_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

74 
sub_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

75 
n›_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

76 
subc_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

77 
suld_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

78 
suªd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

79 
su°_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

80 
suq_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

81 
ãx_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

82 
txq_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

83 
å≠_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

84 
vabsdiff_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

85 
vadd_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

86 
vmad_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

87 
vmax_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

88 
vmö_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

89 
v£t_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

90 
vshl_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

91 
vshr_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

92 
vsub_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

93 
vŸe_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

94 
x‹_im∂
–c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
±x_thªad_öfo
 *
thªad
 ) ;

95 #ifde‡
__˝lu•lus


	@src/cuda-sim/lex.ptx_.c

4 
	#YY_INT_ALIGNED
 

	)

8 
	#yy_¸óã_buf„r
 
±x__¸óã_buf„r


	)

9 
	#yy_dñëe_buf„r
 
±x__dñëe_buf„r


	)

10 
	#yy_Êex_debug
 
±x__Êex_debug


	)

11 
	#yy_öô_buf„r
 
±x__öô_buf„r


	)

12 
	#yy_Êush_buf„r
 
±x__Êush_buf„r


	)

13 
	#yy_lﬂd_buf„r_°©e
 
±x__lﬂd_buf„r_°©e


	)

14 
	#yy_swôch_to_buf„r
 
±x__swôch_to_buf„r


	)

15 
	#yyö
 
±x_ö


	)

16 
	#yyÀng
 
±x_Àng


	)

17 
	#yyÀx
 
±x_Àx


	)

18 
	#yylöío
 
±x_löío


	)

19 
	#yyout
 
±x_out


	)

20 
	#yyª°¨t
 
±x_ª°¨t


	)

21 
	#yyãxt
 
±x_ãxt


	)

22 
	#yywøp
 
±x_wøp


	)

23 
	#yyÆloc
 
±x_Æloc


	)

24 
	#yyªÆloc
 
±x_ªÆloc


	)

25 
	#yy‰ì
 
±x_‰ì


	)

27 
	#FLEX_SCANNER


	)

28 
	#YY_FLEX_MAJOR_VERSION
 2

	)

29 
	#YY_FLEX_MINOR_VERSION
 5

	)

30 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

31 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

32 
	#FLEX_BETA


	)

38 
	~<°dio.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<°dlib.h
>

47 #i‚de‡
FLEXINT_H


48 
	#FLEXINT_H


	)

52 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

57 #i‚de‡
__STDC_LIMIT_MACROS


58 
	#__STDC_LIMIT_MACROS
 1

	)

61 
	~<öây≥s.h
>

62 
öt8_t
 
	tÊex_öt8_t
;

63 
uöt8_t
 
	tÊex_uöt8_t
;

64 
öt16_t
 
	tÊex_öt16_t
;

65 
uöt16_t
 
	tÊex_uöt16_t
;

66 
öt32_t
 
	tÊex_öt32_t
;

67 
uöt32_t
 
	tÊex_uöt32_t
;

69 sig√d 
	tÊex_öt8_t
;

70 
	tÊex_öt16_t
;

71 
	tÊex_öt32_t
;

72 
	tÊex_uöt8_t
;

73 
	tÊex_uöt16_t
;

74 
	tÊex_uöt32_t
;

78 #i‚de‡
INT8_MIN


79 
	#INT8_MIN
 (-128)

	)

81 #i‚de‡
INT16_MIN


82 
	#INT16_MIN
 (-32767-1)

	)

84 #i‚de‡
INT32_MIN


85 
	#INT32_MIN
 (-2147483647-1)

	)

87 #i‚de‡
INT8_MAX


88 
	#INT8_MAX
 (127)

	)

90 #i‚de‡
INT16_MAX


91 
	#INT16_MAX
 (32767)

	)

93 #i‚de‡
INT32_MAX


94 
	#INT32_MAX
 (2147483647)

	)

96 #i‚de‡
UINT8_MAX


97 
	#UINT8_MAX
 (255U)

	)

99 #i‚de‡
UINT16_MAX


100 
	#UINT16_MAX
 (65535U)

	)

102 #i‚de‡
UINT32_MAX


103 
	#UINT32_MAX
 (4294967295U)

	)

108 #ifde‡
__˝lu•lus


111 
	#YY_USE_CONST


	)

116 #i‡
deföed
 (
__STDC__
)

118 
	#YY_USE_CONST


	)

123 #ifde‡
YY_USE_CONST


124 
	#yyc⁄°
 c⁄°

	)

126 
	#yyc⁄°


	)

130 
	#YY_NULL
 0

	)

137 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

143 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

149 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

150 
	#YYSTATE
 
YY_START


	)

153 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

156 
	#YY_NEW_FILE
 
	`±x_ª°¨t
(
±x_ö
 )

	)

158 
	#YY_END_OF_BUFFER_CHAR
 0

	)

161 #i‚de‡
YY_BUF_SIZE


162 
	#YY_BUF_SIZE
 16384

	)

167 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

169 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


170 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

171 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

174 
±x_Àng
;

176 
FILE
 *
±x_ö
, *
±x_out
;

178 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

179 
	#EOB_ACT_END_OF_FILE
 1

	)

180 
	#EOB_ACT_LAST_MATCH
 2

	)

189 
	#YY_LESS_LINENO
(
n
) \

191 
yyl
;\

192  
yyl
 = 
n
; yy»< 
±x_Àng
; ++yyl )\

193 i‡–
±x_ãxt
[
yyl
] == '\n' )\

194 --
±x_löío
;\

195 }0)

	)

198 
	#yyÀss
(
n
) \

202 
yyÀss_ma¸o_¨g
 = (
n
); \

203 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

204 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

205 
YY_RESTORE_YY_MORE_OFFSET
 \

206 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

207 
YY_DO_BEFORE_ACTION
; \

209  0 )

	)

211 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

213 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


214 
	#YY_TYPEDEF_YY_SIZE_T


	)

215 
size_t
 
	tyy_size_t
;

218 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


219 
	#YY_STRUCT_YY_BUFFER_STATE


	)

220 
	syy_buf„r_°©e


222 
FILE
 *
	myy_öput_fûe
;

224 *
	myy_ch_buf
;

225 *
	myy_buf_pos
;

230 
yy_size_t
 
	myy_buf_size
;

235 
	myy_n_ch¨s
;

241 
	myy_is_our_buf„r
;

248 
	myy_is_öãø˘ive
;

254 
	myy_©_bﬁ
;

256 
	myy_bs_löío
;

257 
	myy_bs_cﬁumn
;

262 
	myy_fûl_buf„r
;

264 
	myy_buf„r_°©us
;

266 
	#YY_BUFFER_NEW
 0

	)

267 
	#YY_BUFFER_NORMAL
 1

	)

278 
	#YY_BUFFER_EOF_PENDING
 2

	)

284 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

285 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

286 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

294 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

295 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

296 : 
NULL
)

	)

301 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

304 
	gyy_hﬁd_ch¨
;

305 
	gyy_n_ch¨s
;

306 
	g±x_Àng
;

309 *
	gyy_c_buf_p
 = (*) 0;

310 
	gyy_öô
 = 0;

311 
	gyy_°¨t
 = 0;

316 
	gyy_did_buf„r_swôch_⁄_eof
;

318 
±x_ª°¨t
 (
FILE
 *
öput_fûe
 );

319 
±x__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

320 
YY_BUFFER_STATE
 
±x__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

321 
±x__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

322 
±x__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
±x_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

324 
±x_p›_buf„r_°©e
 ();

326 
±x_ísuª_buf„r_°ack
 ();

327 
±x__lﬂd_buf„r_°©e
 ();

328 
±x__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

330 
	#YY_FLUSH_BUFFER
 
	`±x__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

332 
YY_BUFFER_STATE
 
±x__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

333 
YY_BUFFER_STATE
 
±x__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

334 
YY_BUFFER_STATE
 
±x__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

336 *
±x_Æloc
 (
yy_size_t
 );

337 *
±x_ªÆloc
 (*,
yy_size_t
 );

338 
±x_‰ì
 (* );

340 
	#yy_√w_buf„r
 
±x__¸óã_buf„r


	)

342 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

344 i‡–! 
YY_CURRENT_BUFFER
 ){ \

345 
	`±x_ísuª_buf„r_°ack
 (); \

346 
YY_CURRENT_BUFFER_LVALUE
 = \

347 
	`±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 ); \

349 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

350 }

	)

352 
	#yy_£t_bﬁ
(
©_bﬁ
) \

354 i‡–! 
YY_CURRENT_BUFFER
 ){\

355 
	`±x_ísuª_buf„r_°ack
 (); \

356 
YY_CURRENT_BUFFER_LVALUE
 = \

357 
	`±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 ); \

359 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

360 }

	)

362 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

366 
	#±x_wøp
(
n
Ë1

	)

367 
	#YY_SKIP_YYWRAP


	)

369 
	tYY_CHAR
;

371 
FILE
 *
	g±x_ö
 = (FILE *Ë0, *
	g±x_out
 = (FILE *) 0;

373 
	tyy_°©e_ty≥
;

375 
±x_löío
;

377 
	g±x_löío
 = 1;

379 *
±x_ãxt
;

380 
	#yyãxt_±r
 
±x_ãxt


	)

382 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

383 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

384 
yy_gë_√xt_buf„r
 ();

385 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

390 
	#YY_DO_BEFORE_ACTION
 \

391 (
yyãxt_±r
Ë
yy_bp
; \

392 
±x_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

393 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

394 *
yy_˝
 = '\0'; \

395 (
yy_c_buf_p
Ë
yy_˝
;

	)

397 
	#YY_NUM_RULES
 283

	)

398 
	#YY_END_OF_BUFFER
 284

	)

401 
	syy_å™s_öfo


403 
Êex_öt32_t
 
	myy_vîify
;

404 
Êex_öt32_t
 
	myy_nxt
;

406 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[1267] =

549 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

581 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[76] =

593 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[1312] =

742 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[1312] =

891 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[1711] =

1083 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[1711] =

1276 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[284] =

1294 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

1295 *
	gyy_œ°_ac˚±ög_˝os
;

1297 
±x__Êex_debug
;

1298 
	g±x__Êex_debug
 = 0;

1303 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1304 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1305 
	#YY_MORE_ADJ
 0

	)

1306 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1307 *
	g±x_ãxt
;

1338 
	~"›codes.h
"

1339 
	~"±x.èb.h
"

1340 
	~<°rög.h
>

1342 
	glöebuf
[1024];

1343 
	gcﬁ
 = 0;

1344 
	#TC
 
cﬁ
+=
	`°æí
(
±x_ãxt
);

	)

1345 
	#CHECK_UNSIGNED
 \

	)

1346 if–
	g±x_ãxt
[
°æí
(
±x_ãxt
)-1]=='U' ) { \

1347 
¥ötf
("GPGPU-Sim: ERROR ** U modifierÇot implemented\n"); \

1348 
ab‹t
(); \

1350 
±x_îr‹
–c⁄° *
s
 );

1356 
	#INITIAL
 0

	)

1357 
	#IN_STRING
 1

	)

1358 
	#IN_COMMENT
 2

	)

1359 
	#NOT_OPCODE
 3

	)

1361 #i‚de‡
YY_NO_UNISTD_H


1366 
	~<uni°d.h
>

1369 #i‚de‡
YY_EXTRA_TYPE


1370 
	#YY_EXTRA_TYPE
 *

	)

1373 
yy_öô_globÆs
 ();

1378 
±x_Àx_de°roy
 ();

1380 
±x_gë_debug
 ();

1382 
±x_£t_debug
 (
debug_Êag
 );

1384 
YY_EXTRA_TYPE
 
±x_gë_exåa
 ();

1386 
±x_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

1388 
FILE
 *
±x_gë_ö
 ();

1390 
±x_£t_ö
 (
FILE
 * 
ö_°r
 );

1392 
FILE
 *
±x_gë_out
 ();

1394 
±x_£t_out
 (
FILE
 * 
out_°r
 );

1396 
±x_gë_Àng
 ();

1398 *
±x_gë_ãxt
 ();

1400 
±x_gë_löío
 ();

1402 
±x_£t_löío
 (
löe_numbî
 );

1408 #i‚de‡
YY_SKIP_YYWRAP


1409 #ifde‡
__˝lu•lus


1410 "C" 
±x_wøp
 ();

1412 
±x_wøp
 ();

1416 #i‚de‡
yyãxt_±r


1417 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

1420 #ifde‡
YY_NEED_STRLEN


1421 
yy_Êex_°æí
 (
yyc⁄°
 * );

1424 #i‚de‡
YY_NO_INPUT


1426 #ifde‡
__˝lu•lus


1427 
yyöput
 ();

1429 
öput
 ();

1435 #i‚de‡
YY_READ_BUF_SIZE


1436 
	#YY_READ_BUF_SIZE
 8192

	)

1440 #i‚de‡
ECHO


1444 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
±x_ãxt
, 
±x_Àng
, 1, 
±x_out
 )Ë{} } 0)

	)

1450 #i‚de‡
YY_INPUT


1451 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

1452 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

1454 
c
 = '*'; \

1455 
n
; \

1456  
n
 = 0;Ç < 
max_size
 && \

1457 (
c
 = 
	`gëc
–
±x_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

1458 
buf
[
n
] = (Ë
c
; \

1459 i‡–
c
 == '\n' ) \

1460 
buf
[
n
++] = (Ë
c
; \

1461 i‡–
c
 =
EOF
 && 
	`„º‹
–
±x_ö
 ) ) \

1462 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1463 
ªsu…
 = 
n
; \

1467 
î∫o
=0; \

1468  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
±x_ö
))==0 && 
	`„º‹
(ptx_in)) \

1470 if–
î∫o
 !
EINTR
) \

1472 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1475 
î∫o
=0; \

1476 
	`˛óªº
(
±x_ö
); \

1480 

	)

1487 #i‚de‡
yyãrmö©e


1488 
	#yyãrmö©e
(Ë 
YY_NULL


	)

1492 #i‚de‡
YY_START_STACK_INCR


1493 
	#YY_START_STACK_INCR
 25

	)

1497 #i‚de‡
YY_FATAL_ERROR


1498 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

1506 #i‚de‡
YY_DECL


1507 
	#YY_DECL_IS_OURS
 1

	)

1509 
±x_Àx
 ();

1511 
	#YY_DECL
 
	`±x_Àx
 ()

	)

1517 #i‚de‡
YY_USER_ACTION


1518 
	#YY_USER_ACTION


	)

1522 #i‚de‡
YY_BREAK


1523 
	#YY_BREAK
 ;

	)

1526 
	#YY_RULE_SETUP
 \

1527 
YY_USER_ACTION


	)

1531 
	gYY_DECL


1533 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1534 *
	gyy_˝
, *
	gyy_bp
;

1535 
	gyy_a˘
;

1542 i‡–!(
	gyy_öô
) )

1544 (
	gyy_öô
) = 1;

1546 #ifde‡
YY_USER_INIT


1547 
	gYY_USER_INIT
;

1550 i‡–! (
	gyy_°¨t
) )

1551 (
	gyy_°¨t
) = 1;

1553 i‡–! 
	g±x_ö
 )

1554 
	g±x_ö
 = 
°dö
;

1556 i‡–! 
	g±x_out
 )

1557 
	g±x_out
 = 
°dout
;

1559 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1560 
±x_ísuª_buf„r_°ack
 ();

1561 
	gYY_CURRENT_BUFFER_LVALUE
 =

1562 
±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 );

1565 
±x__lﬂd_buf„r_°©e
( );

1570 
	gyy_˝
 = (
yy_c_buf_p
);

1573 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1578 
	gyy_bp
 = 
yy_˝
;

1580 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

1581 
	gyy_m©ch
:

1584 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1585 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1587 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1588 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1590  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1592 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1593 i‡–
	gyy_cuºít_°©e
 >= 1267 )

1594 
yy_c
 = 
yy_mëa
[() yy_c];

1596 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1597 ++
	gyy_˝
;

1599  
	gyy_ba£
[
yy_cuºít_°©e
] != 1635 );

1601 
	gyy_föd_a˘i⁄
:

1602 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1603 i‡–
	gyy_a˘
 == 0 )

1605 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1606 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1607 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1610 
	gYY_DO_BEFORE_ACTION
;

1612 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

1614 
yyl
;

1615  
	gyyl
 = 0; yy»< 
	g±x_Àng
; ++yyl )

1616 i‡–
	g±x_ãxt
[
yyl
] == '\n' )

1618 
±x_löío
++;

1622 
	gdo_a˘i⁄
:

1624  
yy_a˘
 )

1628 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1629 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1630 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1631 
	gyy_föd_a˘i⁄
;

1634 
YY_RULE_SETUP


1636 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ABS_OP
;  
	gOPCODE
;

1637 
YY_BREAK


1639 
YY_RULE_SETUP


1641 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ADD_OP
;  
	gOPCODE
;

1642 
YY_BREAK


1644 
YY_RULE_SETUP


1646 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ADDP_OP
;  
	gOPCODE
;

1647 
YY_BREAK


1649 
YY_RULE_SETUP


1651 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ADDC_OP
;  
	gOPCODE
;

1652 
YY_BREAK


1654 
YY_RULE_SETUP


1656 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
AND_OP
;  
	gOPCODE
;

1657 
YY_BREAK


1659 
YY_RULE_SETUP


1661 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ANDN_OP
;  
	gOPCODE
;

1662 
YY_BREAK


1664 
YY_RULE_SETUP


1666 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ATOM_OP
;  
	gOPCODE
;

1667 
YY_BREAK


1669 
YY_RULE_SETUP


1671 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BAR_OP
;  
	gOPCODE
;

1672 
YY_BREAK


1674 
YY_RULE_SETUP


1676 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BFE_OP
;  
	gOPCODE
;

1677 
YY_BREAK


1679 
YY_RULE_SETUP


1681 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BFI_OP
;  
	gOPCODE
;

1682 
YY_BREAK


1684 
YY_RULE_SETUP


1686 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BFIND_OP
;  
	gOPCODE
;

1687 
YY_BREAK


1689 
YY_RULE_SETUP


1691 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BRA_OP
;  
	gOPCODE
;

1692 
YY_BREAK


1694 
YY_RULE_SETUP


1696 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BREV_OP
;  
	gOPCODE
;

1697 
YY_BREAK


1699 
YY_RULE_SETUP


1701 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BRKPT_OP
;  
	gOPCODE
;

1702 
YY_BREAK


1704 
YY_RULE_SETUP


1706 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CALL_OP
;  
	gOPCODE
;

1707 
YY_BREAK


1709 
YY_RULE_SETUP


1711 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CALLP_OP
;  
	gOPCODE
;

1712 
YY_BREAK


1714 
YY_RULE_SETUP


1716 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CLZ_OP
;  
	gOPCODE
;

1717 
YY_BREAK


1719 
YY_RULE_SETUP


1721 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CNOT_OP
;  
	gOPCODE
;

1722 
YY_BREAK


1724 
YY_RULE_SETUP


1726 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
COS_OP
;  
	gOPCODE
;

1727 
YY_BREAK


1729 
YY_RULE_SETUP


1731 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CVT_OP
;  
	gOPCODE
;

1732 
YY_BREAK


1734 
YY_RULE_SETUP


1736 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CVTA_OP
;  
	gOPCODE
;

1737 
YY_BREAK


1739 
YY_RULE_SETUP


1741 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
DIV_OP
;  
	gOPCODE
;

1742 
YY_BREAK


1744 
YY_RULE_SETUP


1746 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
EX2_OP
;  
	gOPCODE
;

1747 
YY_BREAK


1749 
YY_RULE_SETUP


1751 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
EXIT_OP
;  
	gOPCODE
;

1752 
YY_BREAK


1754 
YY_RULE_SETUP


1756 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
FMA_OP
;  
	gOPCODE
;

1757 
YY_BREAK


1759 
YY_RULE_SETUP


1761 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ISSPACEP_OP
;  
	gOPCODE
;

1762 
YY_BREAK


1764 
YY_RULE_SETUP


1766 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LD_OP
;  
	gOPCODE
;

1767 
YY_BREAK


1769 
YY_RULE_SETUP


1771 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LD_OP
;  
	gOPCODE
;

1772 
YY_BREAK


1774 
YY_RULE_SETUP


1776 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LDU_OP
;  
	gOPCODE
;

1777 
YY_BREAK


1779 
YY_RULE_SETUP


1781 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LG2_OP
;  
	gOPCODE
;

1782 
YY_BREAK


1784 
YY_RULE_SETUP


1786 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MAD24_OP
;  
	gOPCODE
;

1787 
YY_BREAK


1789 
YY_RULE_SETUP


1791 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MAD_OP
;  
	gOPCODE
;

1792 
YY_BREAK


1794 
YY_RULE_SETUP


1796 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MAX_OP
;  
	gOPCODE
;

1797 
YY_BREAK


1799 
YY_RULE_SETUP


1801 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MEMBAR_OP
;  
	gOPCODE
;

1802 
YY_BREAK


1804 
YY_RULE_SETUP


1806 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MIN_OP
;  
	gOPCODE
;

1807 
YY_BREAK


1809 
YY_RULE_SETUP


1811 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MOV_OP
;  
	gOPCODE
;

1812 
YY_BREAK


1814 
YY_RULE_SETUP


1816 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MUL24_OP
;  
	gOPCODE
;

1817 
YY_BREAK


1819 
YY_RULE_SETUP


1821 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
MUL_OP
;  
	gOPCODE
;

1822 
YY_BREAK


1824 
YY_RULE_SETUP


1826 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NEG_OP
;  
	gOPCODE
;

1827 
YY_BREAK


1829 
YY_RULE_SETUP


1831 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NANDN_OP
;  
	gOPCODE
;

1832 
YY_BREAK


1834 
YY_RULE_SETUP


1836 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NORN_OP
;  
	gOPCODE
;

1837 
YY_BREAK


1839 
YY_RULE_SETUP


1841 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NOT_OP
;  
	gOPCODE
;

1842 
YY_BREAK


1844 
YY_RULE_SETUP


1846 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
OR_OP
;  
	gOPCODE
;

1847 
YY_BREAK


1849 
YY_RULE_SETUP


1851 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ORN_OP
;  
	gOPCODE
;

1852 
YY_BREAK


1854 
YY_RULE_SETUP


1856 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PMEVENT_OP
;  
	gOPCODE
;

1857 
YY_BREAK


1859 
YY_RULE_SETUP


1861 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
POPC_OP
;  
	gOPCODE
;

1862 
YY_BREAK


1864 
YY_RULE_SETUP


1866 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PREFETCH_OP
;  
	gOPCODE
;

1867 
YY_BREAK


1869 
YY_RULE_SETUP


1871 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PREFETCHU_OP
;  
	gOPCODE
;

1872 
YY_BREAK


1874 
YY_RULE_SETUP


1876 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
PRMT_OP
;  
	gOPCODE
;

1877 
YY_BREAK


1879 
YY_RULE_SETUP


1881 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RCP_OP
;  
	gOPCODE
;

1882 
YY_BREAK


1884 
YY_RULE_SETUP


1886 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RED_OP
;  
	gOPCODE
;

1887 
YY_BREAK


1889 
YY_RULE_SETUP


1891 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
REM_OP
;  
	gOPCODE
;

1892 
YY_BREAK


1894 
YY_RULE_SETUP


1896 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RET_OP
;  
	gOPCODE
;

1897 
YY_BREAK


1899 
YY_RULE_SETUP


1901 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RETP_OP
;  
	gOPCODE
;

1902 
YY_BREAK


1904 
YY_RULE_SETUP


1906 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
RSQRT_OP
;  
	gOPCODE
;

1907 
YY_BREAK


1909 
YY_RULE_SETUP


1911 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SAD_OP
;  
	gOPCODE
;

1912 
YY_BREAK


1914 
YY_RULE_SETUP


1916 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SELP_OP
;  
	gOPCODE
;

1917 
YY_BREAK


1919 
YY_RULE_SETUP


1921 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SETP_OP
;  
	gOPCODE
;

1922 
YY_BREAK


1924 
YY_RULE_SETUP


1926 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SET_OP
;  
	gOPCODE
;

1927 
YY_BREAK


1929 
YY_RULE_SETUP


1931 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SHL_OP
;  
	gOPCODE
;

1932 
YY_BREAK


1934 
YY_RULE_SETUP


1936 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SHR_OP
;  
	gOPCODE
;

1937 
YY_BREAK


1939 
YY_RULE_SETUP


1941 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SIN_OP
;  
	gOPCODE
;

1942 
YY_BREAK


1944 
YY_RULE_SETUP


1946 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SLCT_OP
;  
	gOPCODE
;

1947 
YY_BREAK


1949 
YY_RULE_SETUP


1951 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SQRT_OP
;  
	gOPCODE
;

1952 
YY_BREAK


1954 
YY_RULE_SETUP


1956 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ST_OP
;  
	gOPCODE
;

1957 
YY_BREAK


1959 
YY_RULE_SETUP


1961 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
ST_OP
;  
	gOPCODE
;

1962 
YY_BREAK


1964 
YY_RULE_SETUP


1966 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUB_OP
;  
	gOPCODE
;

1967 
YY_BREAK


1969 
YY_RULE_SETUP


1971 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUBC_OP
;  
	gOPCODE
;

1972 
YY_BREAK


1974 
YY_RULE_SETUP


1976 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SULD_OP
;  
	gOPCODE
;

1977 
YY_BREAK


1979 
YY_RULE_SETUP


1981 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SURED_OP
;  
	gOPCODE
;

1982 
YY_BREAK


1984 
YY_RULE_SETUP


1986 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUST_OP
;  
	gOPCODE
;

1987 
YY_BREAK


1989 
YY_RULE_SETUP


1991 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SUQ_OP
;  
	gOPCODE
;

1992 
YY_BREAK


1994 
YY_RULE_SETUP


1996 
TC
; 
BEGIN
(
NOT_OPCODE
); 
	g±x_lvÆ
.
	göt_vÆue
 = 
TEX_OP
;  
	gOPCODE
;

1997 
YY_BREAK


1999 
YY_RULE_SETUP


2001 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
TEX_OP
;  
	gOPCODE
;

2002 
YY_BREAK


2004 
YY_RULE_SETUP


2006 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
TRAP_OP
;  
	gOPCODE
;

2007 
YY_BREAK


2009 
YY_RULE_SETUP


2011 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VABSDIFF_OP
;  
	gOPCODE
;

2012 
YY_BREAK


2014 
YY_RULE_SETUP


2016 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VADD_OP
;  
	gOPCODE
;

2017 
YY_BREAK


2019 
YY_RULE_SETUP


2021 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VMAD_OP
;  
	gOPCODE
;

2022 
YY_BREAK


2024 
YY_RULE_SETUP


2026 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VMAX_OP
;  
	gOPCODE
;

2027 
YY_BREAK


2029 
YY_RULE_SETUP


2031 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VMIN_OP
;  
	gOPCODE
;

2032 
YY_BREAK


2034 
YY_RULE_SETUP


2036 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSET_OP
;  
	gOPCODE
;

2037 
YY_BREAK


2039 
YY_RULE_SETUP


2041 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSHL_OP
;  
	gOPCODE
;

2042 
YY_BREAK


2044 
YY_RULE_SETUP


2046 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSHR_OP
;  
	gOPCODE
;

2047 
YY_BREAK


2049 
YY_RULE_SETUP


2051 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VSUB_OP
;  
	gOPCODE
;

2052 
YY_BREAK


2054 
YY_RULE_SETUP


2056 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
VOTE_OP
;  
	gOPCODE
;

2057 
YY_BREAK


2059 
YY_RULE_SETUP


2061 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
XOR_OP
;  
	gOPCODE
;

2062 
YY_BREAK


2064 
YY_RULE_SETUP


2066 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NOP_OP
;  
	gOPCODE
;

2067 
YY_BREAK


2069 
YY_RULE_SETUP


2071 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BREAK_OP
;  
	gOPCODE
;

2072 
YY_BREAK


2074 
YY_RULE_SETUP


2076 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
BREAKADDR_OP
;  
	gOPCODE
;

2077 
YY_BREAK


2080 
YY_RULE_SETUP


2082 
TC
;  
	gALIGN_DIRECTIVE
;

2083 
YY_BREAK


2085 
YY_RULE_SETUP


2087 
TC
;  
	gBRANCHTARGETS_DIRECTIVE
;

2088 
YY_BREAK


2090 
YY_RULE_SETUP


2092 
TC
;  
	gBYTE_DIRECTIVE
;

2093 
YY_BREAK


2095 
YY_RULE_SETUP


2097 
TC
;  
	gCALLPROTOTYPE_DIRECTIVE
;

2098 
YY_BREAK


2100 
YY_RULE_SETUP


2102 
TC
;  
	gCALLTARGETS_DIRECTIVE
;

2103 
YY_BREAK


2105 
YY_RULE_SETUP


2107 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
©oi
(
±x_ãxt
+7);  
	gCONST_DIRECTIVE
;

2108 
YY_BREAK


2110 
YY_RULE_SETUP


2112 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 0;  
	gCONST_DIRECTIVE
;

2113 
YY_BREAK


2115 
YY_RULE_SETUP


2117 
TC
;  
	gENTRY_DIRECTIVE
;

2118 
YY_BREAK


2120 
YY_RULE_SETUP


2122 
TC
;  
	gEXTERN_DIRECTIVE
;

2123 
YY_BREAK


2125 
YY_RULE_SETUP


2127 
TC
; 
BEGIN
(
INITIAL
);  
	gFILE_DIRECTIVE
;

2128 
YY_BREAK


2130 
YY_RULE_SETUP


2132 
TC
; 
BEGIN
(
NOT_OPCODE
);  
	gFUNC_DIRECTIVE
;

2133 
YY_BREAK


2135 
YY_RULE_SETUP


2137 
TC
;  
	gGLOBAL_DIRECTIVE
;

2138 
YY_BREAK


2140 
YY_RULE_SETUP


2142 
TC
;  
	gLOCAL_DIRECTIVE
;

2143 
YY_BREAK


2145 
YY_RULE_SETUP


2147 
TC
;  
	gLOC_DIRECTIVE
;

2148 
YY_BREAK


2150 
YY_RULE_SETUP


2152 
TC
;  
	gMAXNCTAPERSM_DIRECTIVE
;

2153 
YY_BREAK


2155 
YY_RULE_SETUP


2157 
TC
;  
	gMAXNNREG_DIRECTIVE
;

2158 
YY_BREAK


2160 
YY_RULE_SETUP


2162 
TC
;  
	gMAXNTID_DIRECTIVE
;

2163 
YY_BREAK


2165 
YY_RULE_SETUP


2167 
TC
;  
	gMINNCTAPERSM_DIRECTIVE
;

2168 
YY_BREAK


2170 
YY_RULE_SETUP


2172 
TC
;  
	gPARAM_DIRECTIVE
;

2173 
YY_BREAK


2175 
YY_RULE_SETUP


2177 
TC
;  
	gPRAGMA_DIRECTIVE
;

2178 
YY_BREAK


2180 
YY_RULE_SETUP


2182 
TC
;  
	gREG_DIRECTIVE
;

2183 
YY_BREAK


2185 
YY_RULE_SETUP


2187 
TC
;  
	gREQNTID_DIRECTIVE
;

2188 
YY_BREAK


2190 
YY_RULE_SETUP


2192 
TC
;  
	gSECTION_DIRECTIVE
;

2193 
YY_BREAK


2195 
YY_RULE_SETUP


2197 
TC
;  
	gSHARED_DIRECTIVE
;

2198 
YY_BREAK


2200 
YY_RULE_SETUP


2202 
TC
;  
	gSREG_DIRECTIVE
;

2203 
YY_BREAK


2205 
YY_RULE_SETUP


2207 
TC
;  
	gSTRUCT_DIRECTIVE
;

2208 
YY_BREAK


2210 
YY_RULE_SETUP


2212 
TC
;  
	gSURF_DIRECTIVE
;

2213 
YY_BREAK


2215 
YY_RULE_SETUP


2217 
TC
;  
	gTARGET_DIRECTIVE
;

2218 
YY_BREAK


2220 
YY_RULE_SETUP


2222 
TC
; 
BEGIN
(
NOT_OPCODE
);  
	gTEX_DIRECTIVE
;

2223 
YY_BREAK


2225 
YY_RULE_SETUP


2227 
TC
;  
	gUNION_DIRECTIVE
;

2228 
YY_BREAK


2230 
YY_RULE_SETUP


2232 
TC
;  
	gVERSION_DIRECTIVE
;

2233 
YY_BREAK


2235 
YY_RULE_SETUP


2237 
TC
;  
	gVISIBLE_DIRECTIVE
;

2238 
YY_BREAK


2240 
YY_RULE_SETUP


2242 
TC
;  
	gADDRESS_SIZE_DIRECTIVE
;

2243 
YY_BREAK


2245 
YY_RULE_SETUP


2247 
TC
;  
	gCONSTPTR_DIRECTIVE
;

2248 
YY_BREAK


2250 
YY_RULE_SETUP


2252 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CLOCK_REG
;  
	gSPECIAL_REGISTER
;

2253 
YY_BREAK


2255 
YY_RULE_SETUP


2257 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
HALFCLOCK_ID
;  
	gSPECIAL_REGISTER
;

2258 
YY_BREAK


2260 
YY_RULE_SETUP


2262 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CLOCK64_REG
;  
	gSPECIAL_REGISTER
;

2263 
YY_BREAK


2265 
YY_RULE_SETUP


2267 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
CTAID_REG
;  
	gSPECIAL_REGISTER
;

2268 
YY_BREAK


2270 
YY_RULE_SETUP


2272 
TC
; 
ssˇnf
(
±x_ãxt
+7,"%u",&
±x_lvÆ
.
öt_vÆue
); 
	g±x_lvÆ
.
	göt_vÆue
<<=16;Ötx_lvÆ.öt_vÆuê+
ENVREG_REG
;  
	gSPECIAL_REGISTER
;

2273 
YY_BREAK


2275 
YY_RULE_SETUP


2277 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
GRIDID_REG
;  
	gSPECIAL_REGISTER
;

2278 
YY_BREAK


2280 
YY_RULE_SETUP


2282 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEID_REG
;  
	gSPECIAL_REGISTER
;

2283 
YY_BREAK


2285 
YY_RULE_SETUP


2287 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_EQ_REG
;  
	gSPECIAL_REGISTER
;

2288 
YY_BREAK


2290 
YY_RULE_SETUP


2292 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_LE_REG
;  
	gSPECIAL_REGISTER
;

2293 
YY_BREAK


2295 
YY_RULE_SETUP


2297 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_LT_REG
;  
	gSPECIAL_REGISTER
;

2298 
YY_BREAK


2300 
YY_RULE_SETUP


2302 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_GE_REG
;  
	gSPECIAL_REGISTER
;

2303 
YY_BREAK


2305 
YY_RULE_SETUP


2307 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
LANEMASK_GT_REG
;  
	gSPECIAL_REGISTER
;

2308 
YY_BREAK


2310 
YY_RULE_SETUP


2312 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NCTAID_REG
;  
	gSPECIAL_REGISTER
;

2313 
YY_BREAK


2315 
YY_RULE_SETUP


2317 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NTID_REG
;  
	gSPECIAL_REGISTER
;

2318 
YY_BREAK


2320 
YY_RULE_SETUP


2322 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NSMID_REG
;  
	gSPECIAL_REGISTER
;

2323 
YY_BREAK


2325 
YY_RULE_SETUP


2327 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
NWARPID_REG
;  
	gSPECIAL_REGISTER
;

2328 
YY_BREAK


2330 
YY_RULE_SETUP


2332 
TC
; 
ssˇnf
(
±x_ãxt
+3,"%u",&
±x_lvÆ
.
öt_vÆue
); 
	g±x_lvÆ
.
	göt_vÆue
<<=16;Ötx_lvÆ.öt_vÆuê+
PM_REG
;  
	gSPECIAL_REGISTER
;

2333 
YY_BREAK


2335 
YY_RULE_SETUP


2337 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
SMID_REG
;  
	gSPECIAL_REGISTER
;

2338 
YY_BREAK


2340 
YY_RULE_SETUP


2342 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
TID_REG
;  
	gSPECIAL_REGISTER
;

2343 
YY_BREAK


2345 
YY_RULE_SETUP


2347 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
WARPID_REG
;  
	gSPECIAL_REGISTER
;

2348 
YY_BREAK


2350 
YY_RULE_SETUP


2352 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
WARPSZ_REG
;  
	gSPECIAL_REGISTER
;

2353 
YY_BREAK


2355 
YY_RULE_SETUP


2357 
TC
; 
	g±x_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±x_ãxt
);  
	gIDENTIFIER
;

2358 
YY_BREAK


2360 
YY_RULE_SETUP


2362 
TC
; 
	g±x_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±x_ãxt
);  
	gIDENTIFIER
;

2363 
YY_BREAK


2365 
YY_RULE_SETUP


2367 
TC
; 
ssˇnf
(
±x_ãxt
,"%lf", &
±x_lvÆ
.
doubÀ_vÆue
);  
	gDOUBLE_OPERAND
;

2368 
YY_BREAK


2370 
YY_RULE_SETUP


2372 
TC
; 
	gCHECK_UNSIGNED
; 
ssˇnf
(
±x_ãxt
,"%x", &
±x_lvÆ
.
öt_vÆue
);  
	gINT_OPERAND
;

2373 
YY_BREAK


2375 
YY_RULE_SETUP


2377 
TC
; 
¥ötf
("GPGPU-Sim: ERROR **Ö¨sög o˘ÆÇŸ (yëËim∂emíãd\n"); 
ab‹t
();  
	gINT_OPERAND
;

2378 
YY_BREAK


2380 
YY_RULE_SETUP


2382 
TC
; 
¥ötf
("GPGPU-Sim: ERROR **Ö¨sög bö¨yÇŸ (yëËim∂emíãd\n"); 
ab‹t
();  
	gINT_OPERAND
;

2383 
YY_BREAK


2385 
YY_RULE_SETUP


2387 
TC
; 
	gCHECK_UNSIGNED
; 
	g±x_lvÆ
.
	göt_vÆue
 = 
©oi
(
±x_ãxt
);  
	gINT_OPERAND
;

2388 
YY_BREAK


2390 
YY_RULE_SETUP


2392 
TC
; 
ssˇnf
(
±x_ãxt
+2,"%x", (*)(*)&
±x_lvÆ
.
Êﬂt_vÆue
);  
	gFLOAT_OPERAND
;

2393 
YY_BREAK


2395 
YY_RULE_SETUP


2397 
TC
; 
ssˇnf
(
±x_ãxt
+2,"%Lx", (*)(*)&
±x_lvÆ
.
doubÀ_vÆue
);  
	gDOUBLE_OPERAND
;

2398 
YY_BREAK


2400 
YY_RULE_SETUP


2402 
TC
;  
	gS8_TYPE
;

2403 
YY_BREAK


2405 
YY_RULE_SETUP


2407 
TC
;  
	gS16_TYPE
;

2408 
YY_BREAK


2410 
YY_RULE_SETUP


2412 
TC
;  
	gS32_TYPE
;

2413 
YY_BREAK


2415 
YY_RULE_SETUP


2417 
TC
;  
	gS64_TYPE
;

2418 
YY_BREAK


2420 
YY_RULE_SETUP


2422 
TC
;  
	gU8_TYPE
;

2423 
YY_BREAK


2425 
YY_RULE_SETUP


2427 
TC
;  
	gU16_TYPE
;

2428 
YY_BREAK


2430 
YY_RULE_SETUP


2432 
TC
;  
	gU32_TYPE
;

2433 
YY_BREAK


2435 
YY_RULE_SETUP


2437 
TC
;  
	gU64_TYPE
;

2438 
YY_BREAK


2440 
YY_RULE_SETUP


2442 
TC
;  
	gF16_TYPE
;

2443 
YY_BREAK


2445 
YY_RULE_SETUP


2447 
TC
;  
	gF32_TYPE
;

2448 
YY_BREAK


2450 
YY_RULE_SETUP


2452 
TC
;  
	gF64_TYPE
;

2453 
YY_BREAK


2455 
YY_RULE_SETUP


2457 
TC
;  
	gFF64_TYPE
;

2458 
YY_BREAK


2460 
YY_RULE_SETUP


2462 
TC
;  
	gB8_TYPE
;

2463 
YY_BREAK


2465 
YY_RULE_SETUP


2467 
TC
;  
	gB16_TYPE
;

2468 
YY_BREAK


2470 
YY_RULE_SETUP


2472 
TC
;  
	gB32_TYPE
;

2473 
YY_BREAK


2475 
YY_RULE_SETUP


2477 
TC
;  
	gB64_TYPE
;

2478 
YY_BREAK


2480 
YY_RULE_SETUP


2482 
TC
;  
	gBB64_TYPE
;

2483 
YY_BREAK


2485 
YY_RULE_SETUP


2487 
TC
;  
	gBB128_TYPE
;

2488 
YY_BREAK


2490 
YY_RULE_SETUP


2492 
TC
;  
	gPRED_TYPE
;

2493 
YY_BREAK


2495 
YY_RULE_SETUP


2497 
TC
; 
BEGIN
(
NOT_OPCODE
);  
	gTEXREF_TYPE
;

2498 
YY_BREAK


2500 
YY_RULE_SETUP


2502 
TC
;  
	gSAMPLERREF_TYPE
;

2503 
YY_BREAK


2505 
YY_RULE_SETUP


2507 
TC
;  
	gSURFREF_TYPE
;

2508 
YY_BREAK


2510 
YY_RULE_SETUP


2512 
TC
;  
	gV2_TYPE
;

2513 
YY_BREAK


2515 
YY_RULE_SETUP


2517 
TC
;  
	gV3_TYPE
;

2518 
YY_BREAK


2520 
YY_RULE_SETUP


2522 
TC
;  
	gV4_TYPE
;

2523 
YY_BREAK


2525 
YY_RULE_SETUP


2527 
TC
;  
	gHALF_OPTION
;

2528 
YY_BREAK


2530 
YY_RULE_SETUP


2532 
TC
;  
	gEQU_OPTION
;

2533 
YY_BREAK


2535 
YY_RULE_SETUP


2537 
TC
;  
	gNEU_OPTION
;

2538 
YY_BREAK


2540 
YY_RULE_SETUP


2542 
TC
;  
	gLTU_OPTION
;

2543 
YY_BREAK


2545 
YY_RULE_SETUP


2547 
TC
;  
	gLEU_OPTION
;

2548 
YY_BREAK


2550 
YY_RULE_SETUP


2552 
TC
;  
	gGTU_OPTION
;

2553 
YY_BREAK


2555 
YY_RULE_SETUP


2557 
TC
;  
	gGEU_OPTION
;

2558 
YY_BREAK


2560 
YY_RULE_SETUP


2562 
TC
;  
	gNUM_OPTION
;

2563 
YY_BREAK


2565 
YY_RULE_SETUP


2567 
TC
;  
	gNAN_OPTION
;

2568 
YY_BREAK


2570 
YY_RULE_SETUP


2572 
TC
;  
	gSAT_OPTION
;

2573 
YY_BREAK


2575 
YY_RULE_SETUP


2577 
TC
;  
	gEQ_OPTION
;

2578 
YY_BREAK


2580 
YY_RULE_SETUP


2582 
TC
;  
	gNE_OPTION
;

2583 
YY_BREAK


2585 
YY_RULE_SETUP


2587 
TC
;  
	gLT_OPTION
;

2588 
YY_BREAK


2590 
YY_RULE_SETUP


2592 
TC
;  
	gLE_OPTION
;

2593 
YY_BREAK


2595 
YY_RULE_SETUP


2597 
TC
;  
	gGT_OPTION
;

2598 
YY_BREAK


2600 
YY_RULE_SETUP


2602 
TC
;  
	gGE_OPTION
;

2603 
YY_BREAK


2605 
YY_RULE_SETUP


2607 
TC
;  
	gCF_OPTION
;

2608 
YY_BREAK


2610 
YY_RULE_SETUP


2612 
TC
;  
	gSF_OPTION
;

2613 
YY_BREAK


2615 
YY_RULE_SETUP


2617 
TC
;  
	gNSF_OPTION
;

2618 
YY_BREAK


2620 
YY_RULE_SETUP


2622 
TC
;  
	gLO_OPTION
;

2623 
YY_BREAK


2625 
YY_RULE_SETUP


2627 
TC
;  
	gLS_OPTION
;

2628 
YY_BREAK


2630 
YY_RULE_SETUP


2632 
TC
;  
	gHI_OPTION
;

2633 
YY_BREAK


2635 
YY_RULE_SETUP


2637 
TC
;  
	gHS_OPTION
;

2638 
YY_BREAK


2640 
YY_RULE_SETUP


2642 
TC
;  
	gRNI_OPTION
;

2643 
YY_BREAK


2645 
YY_RULE_SETUP


2647 
TC
;  
	gRZI_OPTION
;

2648 
YY_BREAK


2650 
YY_RULE_SETUP


2652 
TC
;  
	gRMI_OPTION
;

2653 
YY_BREAK


2655 
YY_RULE_SETUP


2657 
TC
;  
	gRPI_OPTION
;

2658 
YY_BREAK


2660 
YY_RULE_SETUP


2662 
TC
;  
	gRN_OPTION
;

2663 
YY_BREAK


2665 
YY_RULE_SETUP


2667 
TC
;  
	gRZ_OPTION
;

2668 
YY_BREAK


2670 
YY_RULE_SETUP


2672 
TC
;  
	gRM_OPTION
;

2673 
YY_BREAK


2675 
YY_RULE_SETUP


2677 
TC
;  
	gRP_OPTION
;

2678 
YY_BREAK


2680 
YY_RULE_SETUP


2682 
TC
;  
	gFTZ_OPTION
;

2683 
YY_BREAK


2685 
YY_RULE_SETUP


2687 
TC
;  
	gNEG_OPTION
;

2688 
YY_BREAK


2690 
YY_RULE_SETUP


2692 
TC
;  
	gWIDE_OPTION
;

2693 
YY_BREAK


2695 
YY_RULE_SETUP


2697 
TC
;  
	gUNI_OPTION
;

2698 
YY_BREAK


2700 
YY_RULE_SETUP


2702 
TC
;  
	gAPPROX_OPTION
;

2703 
YY_BREAK


2705 
YY_RULE_SETUP


2707 
TC
;  
	gFULL_OPTION
;

2708 
YY_BREAK


2710 
YY_RULE_SETUP


2712 
TC
;  
	gANY_OPTION
;

2713 
YY_BREAK


2715 
YY_RULE_SETUP


2717 
TC
;  
	gALL_OPTION
;

2718 
YY_BREAK


2720 
YY_RULE_SETUP


2722 
TC
;  
	gGLOBAL_OPTION
;

2723 
YY_BREAK


2725 
YY_RULE_SETUP


2727 
TC
;  
	gCTA_OPTION
;

2728 
YY_BREAK


2730 
YY_RULE_SETUP


2732 
TC
;  
	gSYS_OPTION
;

2733 
YY_BREAK


2735 
YY_RULE_SETUP


2737 
TC
;  
	gEXIT_OPTION
;

2738 
YY_BREAK


2740 
YY_RULE_SETUP


2742 
TC
;  
	gABS_OPTION
;

2743 
YY_BREAK


2745 
YY_RULE_SETUP


2747 
TC
;  
	gTO_OPTION
;

2748 
YY_BREAK


2750 
YY_RULE_SETUP


2752 
TC
;  
	gCA_OPTION
;

2753 
YY_BREAK


2755 
YY_RULE_SETUP


2757 
TC
;  
	gCG_OPTION
;

2758 
YY_BREAK


2760 
YY_RULE_SETUP


2762 
TC
;  
	gCS_OPTION
;

2763 
YY_BREAK


2765 
YY_RULE_SETUP


2767 
TC
;  
	gLU_OPTION
;

2768 
YY_BREAK


2770 
YY_RULE_SETUP


2772 
TC
;  
	gCV_OPTION
;

2773 
YY_BREAK


2775 
YY_RULE_SETUP


2777 
TC
;  
	gWB_OPTION
;

2778 
YY_BREAK


2780 
YY_RULE_SETUP


2782 
TC
;  
	gWT_OPTION
;

2783 
YY_BREAK


2785 
YY_RULE_SETUP


2787 
TC
;  
	gATOMIC_AND
;

2788 
YY_BREAK


2790 
YY_RULE_SETUP


2792 
TC
;  
	gATOMIC_OR
;

2793 
YY_BREAK


2795 
YY_RULE_SETUP


2797 
TC
;  
	gATOMIC_XOR
;

2798 
YY_BREAK


2800 
YY_RULE_SETUP


2802 
TC
;  
	gATOMIC_CAS
;

2803 
YY_BREAK


2805 
YY_RULE_SETUP


2807 
TC
;  
	gATOMIC_EXCH
;

2808 
YY_BREAK


2810 
YY_RULE_SETUP


2812 
TC
;  
	gATOMIC_ADD
;

2813 
YY_BREAK


2815 
YY_RULE_SETUP


2817 
TC
;  
	gATOMIC_INC
;

2818 
YY_BREAK


2820 
YY_RULE_SETUP


2822 
TC
;  
	gATOMIC_DEC
;

2823 
YY_BREAK


2825 
YY_RULE_SETUP


2827 
TC
;  
	gATOMIC_MIN
;

2828 
YY_BREAK


2830 
YY_RULE_SETUP


2832 
TC
;  
	gATOMIC_MAX
;

2833 
YY_BREAK


2835 
YY_RULE_SETUP


2837 
TC
;  
	gGEOM_MODIFIER_1D
;

2838 
YY_BREAK


2840 
YY_RULE_SETUP


2842 
TC
;  
	gGEOM_MODIFIER_2D
;

2843 
YY_BREAK


2845 
YY_RULE_SETUP


2847 
TC
;  
	gGEOM_MODIFIER_3D
;

2848 
YY_BREAK


2850 
YY_RULE_SETUP


2852 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 0;  
	gDIMENSION_MODIFIER
;

2853 
YY_BREAK


2855 
YY_RULE_SETUP


2857 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 1;  
	gDIMENSION_MODIFIER
;

2858 
YY_BREAK


2860 
YY_RULE_SETUP


2862 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 2;  
	gDIMENSION_MODIFIER
;

2863 
YY_BREAK


2865 
YY_RULE_SETUP


2867 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 0;  
	gDIMENSION_MODIFIER
;

2868 
YY_BREAK


2870 
YY_RULE_SETUP


2872 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 1;  
	gDIMENSION_MODIFIER
;

2873 
YY_BREAK


2875 
YY_RULE_SETUP


2877 
TC
; 
	g±x_lvÆ
.
	göt_vÆue
 = 2;  
	gDIMENSION_MODIFIER
;

2878 
YY_BREAK


2880 
YY_RULE_SETUP


2882 
TC
;  
	gMINUS
;

2883 
YY_BREAK


2885 
YY_RULE_SETUP


2887 
TC
;  
	gPLUS
;

2888 
YY_BREAK


2890 
YY_RULE_SETUP


2892 
TC
;  
	gCOMMA
;

2893 
YY_BREAK


2895 
YY_RULE_SETUP


2897 
TC
;  
	gPRED
;

2898 
YY_BREAK


2900 
YY_RULE_SETUP


2902 
TC
;  
	gPIPE
;

2903 
YY_BREAK


2905 
YY_RULE_SETUP


2907 
TC
;  
	gLEFT_SQUARE_BRACKET
;

2908 
YY_BREAK


2910 
YY_RULE_SETUP


2912 
TC
;  
	gRIGHT_SQUARE_BRACKET
;

2913 
YY_BREAK


2915 
YY_RULE_SETUP


2917 
TC
;  
	gLEFT_ANGLE_BRACKET
;

2918 
YY_BREAK


2920 
YY_RULE_SETUP


2922 
TC
;  
	gRIGHT_ANGLE_BRACKET
;

2923 
YY_BREAK


2925 
YY_RULE_SETUP


2927 
TC
;  
	gLEFT_PAREN
;

2928 
YY_BREAK


2930 
YY_RULE_SETUP


2932 
TC
;  
	gRIGHT_PAREN
;

2933 
YY_BREAK


2935 
YY_RULE_SETUP


2937 
TC
; 
BEGIN
(
INITIAL
);  
	gCOLON
;

2938 
YY_BREAK


2940 
YY_RULE_SETUP


2942 
TC
; 
BEGIN
(
INITIAL
);  
	gSEMI_COLON
;

2943 
YY_BREAK


2945 
YY_RULE_SETUP


2947 
TC
;  
	gEXCLAMATION
;

2948 
YY_BREAK


2950 
YY_RULE_SETUP


2952 
TC
;  
	gEQUALS
;

2953 
YY_BREAK


2955 
YY_RULE_SETUP


2957 
TC
;  
	gLEFT_BRACE
;

2958 
YY_BREAK


2960 
YY_RULE_SETUP


2962 
TC
;  
	gRIGHT_BRACE
;

2963 
YY_BREAK


2965 
YY_RULE_SETUP


2967 
TC
;  
	gPERIOD
;

2968 
YY_BREAK


2970 
YY_RULE_SETUP


2972 
TC
;  
	gBACKSLASH
;

2973 
YY_BREAK


2975 
YY_RULE_SETUP


2977 
TC
;

2978 
YY_BREAK


2981 
YY_RULE_SETUP


2983 
cﬁ
=0; 
°∫˝y
(
löebuf
, 
±x_ãxt
 + 1, 1024); 
yyÀss
( 1 );

2984 
YY_BREAK


2986 
YY_RULE_SETUP


2988 
TC
;

2989 
YY_BREAK


2991 
YY_RULE_SETUP


2993 
TC
;

2994 
YY_BREAK


2998 
YY_RULE_SETUP


3000 
BEGIN
(
IN_COMMENT
);

3001 
YY_BREAK


3005 
YY_RULE_SETUP


3007 
BEGIN
(
INITIAL
);

3008 
YY_BREAK


3010 
YY_RULE_SETUP


3013 
YY_BREAK


3015 
YY_RULE_SETUP


3018 
YY_BREAK


3021 
YY_RULE_SETUP


3023 
TC
;

3024 
YY_BREAK


3028 
YY_RULE_SETUP


3030 
BEGIN
(
IN_STRING
);

3031 
YY_BREAK


3035 
YY_RULE_SETUP


3037 
TC
; 
BEGIN
(
INITIAL
);  
	gSTRING
;

3038 
YY_BREAK


3041 
YY_RULE_SETUP


3043 
TC
; 
	g±x_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±x_ãxt
);

3044 
YY_BREAK


3048 
YY_RULE_SETUP


3051 
YY_BREAK


3053 
YY_RULE_SETUP


3055 
TC
; 
±x_îr‹
((c⁄° *)
NULL
);

3056 
YY_BREAK


3058 
YY_RULE_SETUP


3060 
ECHO
;

3061 
	gYY_BREAK


3063 
YY_STATE_EOF
(
INITIAL
):

3064 
YY_STATE_EOF
(
IN_STRING
):

3065 
YY_STATE_EOF
(
IN_COMMENT
):

3066 
YY_STATE_EOF
(
NOT_OPCODE
):

3067 
yyãrmö©e
();

3069 
	gYY_END_OF_BUFFER
:

3072 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

3075 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

3076 
YY_RESTORE_YY_MORE_OFFSET


3078 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

3089 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

3090 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
±x_ö
;

3091 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

3101 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

3103 
yy_°©e_ty≥
 
yy_√xt_°©e
;

3105 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

3107 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

3118 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

3120 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3122 i‡–
	gyy_√xt_°©e
 )

3125 
	gyy_˝
 = ++(
yy_c_buf_p
);

3126 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

3127 
	gyy_m©ch
;

3132 
	gyy_˝
 = (
yy_c_buf_p
);

3133 
	gyy_föd_a˘i⁄
;

3137  
yy_gë_√xt_buf„r
( ) )

3139 
	gEOB_ACT_END_OF_FILE
:

3141 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

3143 i‡–
±x_wøp
( ) )

3154 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3156 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

3157 
	gdo_a˘i⁄
;

3162 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

3163 
	gYY_NEW_FILE
;

3168 
	gEOB_ACT_CONTINUE_SCAN
:

3169 (
yy_c_buf_p
) =

3170 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

3172 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

3174 
	gyy_˝
 = (
yy_c_buf_p
);

3175 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3176 
	gyy_m©ch
;

3178 
	gEOB_ACT_LAST_MATCH
:

3179 (
yy_c_buf_p
) =

3180 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

3182 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

3184 
	gyy_˝
 = (
yy_c_buf_p
);

3185 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

3186 
	gyy_föd_a˘i⁄
;

3192 
YY_FATAL_ERROR
(

3205 
	$yy_gë_√xt_buf„r
 ()

3207 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

3208 *
sour˚
 = (
yyãxt_±r
);

3209 
numbî_to_move
, 
i
;

3210 
ªt_vÆ
;

3212 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

3213 
	`YY_FATAL_ERROR
(

3216 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

3218 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

3223  
EOB_ACT_END_OF_FILE
;

3231  
EOB_ACT_LAST_MATCH
;

3238 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

3240  
i
 = 0; i < 
numbî_to_move
; ++i )

3241 *(
de°
++Ë*(
sour˚
++);

3243 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

3247 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

3251 
num_to_ªad
 =

3252 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

3254  
num_to_ªad
 <= 0 )

3258 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

3260 
yy_c_buf_p_off£t
 =

3261 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

3263 i‡–
b
->
yy_is_our_buf„r
 )

3265 
√w_size
 = 
b
->
yy_buf_size
 * 2;

3267 i‡–
√w_size
 <= 0 )

3268 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

3270 
b
->
yy_buf_size
 *= 2;

3272 
b
->
yy_ch_buf
 = (*)

3274 
	`±x_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

3278 
b
->
yy_ch_buf
 = 0;

3280 i‡–! 
b
->
yy_ch_buf
 )

3281 
	`YY_FATAL_ERROR
(

3284 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

3286 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

3287 
numbî_to_move
 - 1;

3291 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

3292 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

3295 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

3296 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

3298 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3301 i‡–(
yy_n_ch¨s
) == 0 )

3303 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

3305 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

3306 
	`±x_ª°¨t
(
±x_ö
 );

3311 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

3312 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

3313 
YY_BUFFER_EOF_PENDING
;

3318 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

3320 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

3322 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

3323 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`±x_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

3324 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

3325 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

3328 (
yy_n_ch¨s
Ë+
numbî_to_move
;

3329 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

3330 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

3332 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

3334  
ªt_vÆ
;

3335 
	}
}

3339 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

3341 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

3342 *
yy_˝
;

3344 
yy_cuºít_°©e
 = (
yy_°¨t
);

3346  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

3348 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

3349 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

3351 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

3352 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

3354  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

3356 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

3357 i‡–
yy_cuºít_°©e
 >= 1267 )

3358 
yy_c
 = 
yy_mëa
[() yy_c];

3360 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

3363  
yy_cuºít_°©e
;

3364 
	}
}

3371 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

3373 
yy_is_jam
;

3374 *
yy_˝
 = (
yy_c_buf_p
);

3376 
YY_CHAR
 
yy_c
 = 1;

3377 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

3379 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

3380 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

3382  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

3384 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

3385 i‡–
yy_cuºít_°©e
 >= 1267 )

3386 
yy_c
 = 
yy_mëa
[() yy_c];

3388 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

3389 
yy_is_jam
 = (
yy_cuºít_°©e
 == 1266);

3391  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

3392 
	}
}

3394 #i‚de‡
YY_NO_INPUT


3395 #ifde‡
__˝lu•lus


3396 
	$yyöput
 ()

3398 
	$öput
 ()

3402 
c
;

3404 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3406 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

3412 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

3414 *(
yy_c_buf_p
) = '\0';

3418 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

3419 ++(
yy_c_buf_p
);

3421  
	`yy_gë_√xt_buf„r
( ) )

3423 
EOB_ACT_LAST_MATCH
:

3435 
	`±x_ª°¨t
(
±x_ö
 );

3439 
EOB_ACT_END_OF_FILE
:

3441 i‡–
	`±x_wøp
( ) )

3442  
EOF
;

3444 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

3445 
YY_NEW_FILE
;

3446 #ifde‡
__˝lu•lus


3447  
	`yyöput
();

3449  
	`öput
();

3453 
EOB_ACT_CONTINUE_SCAN
:

3454 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

3460 
c
 = *(*Ë(
yy_c_buf_p
);

3461 *(
yy_c_buf_p
) = '\0';

3462 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

3464 i‡–
c
 == '\n' )

3466 
±x_löío
++;

3469  
c
;

3470 
	}
}

3478 
	$±x_ª°¨t
 (
FILE
 * 
öput_fûe
 )

3481 i‡–! 
YY_CURRENT_BUFFER
 ){

3482 
	`±x_ísuª_buf„r_°ack
 ();

3483 
YY_CURRENT_BUFFER_LVALUE
 =

3484 
	`±x__¸óã_buf„r
(
±x_ö
,
YY_BUF_SIZE
 );

3487 
	`±x__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

3488 
	`±x__lﬂd_buf„r_°©e
( );

3489 
	}
}

3495 
	$±x__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3503 
	`±x_ísuª_buf„r_°ack
 ();

3504 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

3507 i‡–
YY_CURRENT_BUFFER
 )

3510 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3511 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3512 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3515 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3516 
	`±x__lﬂd_buf„r_°©e
( );

3523 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3524 
	}
}

3526 
	$±x__lﬂd_buf„r_°©e
 ()

3528 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

3529 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

3530 
±x_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

3531 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

3532 
	}
}

3540 
YY_BUFFER_STATE
 
	$±x__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

3542 
YY_BUFFER_STATE
 
b
;

3544 
b
 = (
YY_BUFFER_STATE
Ë
	`±x_Æloc
(–
yy_buf„r_°©e
 ) );

3545 i‡–! 
b
 )

3546 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__create_buffer()" );

3548 
b
->
yy_buf_size
 = 
size
;

3553 
b
->
yy_ch_buf
 = (*Ë
	`±x_Æloc
(b->
yy_buf_size
 + 2 );

3554 i‡–! 
b
->
yy_ch_buf
 )

3555 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__create_buffer()" );

3557 
b
->
yy_is_our_buf„r
 = 1;

3559 
	`±x__öô_buf„r
(
b
,
fûe
 );

3561  
b
;

3562 
	}
}

3568 
	$±x__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3571 i‡–! 
b
 )

3574 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3575 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

3577 i‡–
b
->
yy_is_our_buf„r
 )

3578 
	`±x_‰ì
((*Ë
b
->
yy_ch_buf
 );

3580 
	`±x_‰ì
((*Ë
b
 );

3581 
	}
}

3583 #i‚de‡
__˝lu•lus


3584 
ißây
 ();

3591 
	$±x__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

3594 
€ºno
 = 
î∫o
;

3596 
	`±x__Êush_buf„r
(
b
 );

3598 
b
->
yy_öput_fûe
 = 
fûe
;

3599 
b
->
yy_fûl_buf„r
 = 1;

3605 i‡(
b
 !
YY_CURRENT_BUFFER
){

3606 
b
->
yy_bs_löío
 = 1;

3607 
b
->
yy_bs_cﬁumn
 = 0;

3610 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

3612 
î∫o
 = 
€ºno
;

3613 
	}
}

3619 
	$±x__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3621 i‡–! 
b
 )

3624 
b
->
yy_n_ch¨s
 = 0;

3630 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

3631 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

3633 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

3635 
b
->
yy_©_bﬁ
 = 1;

3636 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3638 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3639 
	`±x__lﬂd_buf„r_°©e
( );

3640 
	}
}

3648 
	$±x_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3650 i‡(
√w_buf„r
 =
NULL
)

3653 
	`±x_ísuª_buf„r_°ack
();

3656 i‡–
YY_CURRENT_BUFFER
 )

3659 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3660 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3661 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3665 i‡(
YY_CURRENT_BUFFER
)

3666 (
yy_buf„r_°ack_t›
)++;

3667 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3670 
	`±x__lﬂd_buf„r_°©e
( );

3671 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3672 
	}
}

3678 
	$±x_p›_buf„r_°©e
 ()

3680 i‡(!
YY_CURRENT_BUFFER
)

3683 
	`±x__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3684 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3685 i‡((
yy_buf„r_°ack_t›
) > 0)

3686 --(
yy_buf„r_°ack_t›
);

3688 i‡(
YY_CURRENT_BUFFER
) {

3689 
	`±x__lﬂd_buf„r_°©e
( );

3690 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3692 
	}
}

3697 
	$±x_ísuª_buf„r_°ack
 ()

3699 
num_to_Æloc
;

3701 i‡(!(
yy_buf„r_°ack
)) {

3707 
num_to_Æloc
 = 1;

3708 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
±x_Æloc


3709 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3711 i‡–! (
yy_buf„r_°ack
) )

3712 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx_ensure_buffer_stack()" );

3714 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

3716 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3717 (
yy_buf„r_°ack_t›
) = 0;

3721 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

3724 
grow_size
 = 8 ;

3726 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

3727 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
±x_ªÆloc


3728 ((
yy_buf„r_°ack
),

3729 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3731 i‡–! (
yy_buf„r_°ack
) )

3732 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx_ensure_buffer_stack()" );

3735 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

3736 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3738 
	}
}

3746 
YY_BUFFER_STATE
 
	$±x__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

3748 
YY_BUFFER_STATE
 
b
;

3750 i‡–
size
 < 2 ||

3751 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

3752 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

3756 
b
 = (
YY_BUFFER_STATE
Ë
	`±x_Æloc
(–
yy_buf„r_°©e
 ) );

3757 i‡–! 
b
 )

3758 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__scan_buffer()" );

3760 
b
->
yy_buf_size
 = 
size
 - 2;

3761 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

3762 
b
->
yy_is_our_buf„r
 = 0;

3763 
b
->
yy_öput_fûe
 = 0;

3764 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

3765 
b
->
yy_is_öãø˘ive
 = 0;

3766 
b
->
yy_©_bﬁ
 = 1;

3767 
b
->
yy_fûl_buf„r
 = 0;

3768 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3770 
	`±x__swôch_to_buf„r
(
b
 );

3772  
b
;

3773 
	}
}

3783 
YY_BUFFER_STATE
 
	$±x__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

3786  
	`±x__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

3787 
	}
}

3796 
YY_BUFFER_STATE
 
	$±x__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

3798 
YY_BUFFER_STATE
 
b
;

3799 *
buf
;

3800 
yy_size_t
 
n
;

3801 
i
;

3804 
n
 = 
_yybyãs_Àn
 + 2;

3805 
buf
 = (*Ë
	`±x_Æloc
(
n
 );

3806 i‡–! 
buf
 )

3807 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtx__scan_bytes()" );

3809  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

3810 
buf
[
i
] = 
yybyãs
[i];

3812 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

3814 
b
 = 
	`±x__sˇn_buf„r
(
buf
,
n
 );

3815 i‡–! 
b
 )

3816 
	`YY_FATAL_ERROR
( "bad buffer inÖtx__scan_bytes()" );

3821 
b
->
yy_is_our_buf„r
 = 1;

3823  
b
;

3824 
	}
}

3826 #i‚de‡
YY_EXIT_FAILURE


3827 
	#YY_EXIT_FAILURE
 2

	)

3830 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

3832 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

3833 
	`exô
–
YY_EXIT_FAILURE
 );

3834 
	}
}

3838 #unde‡
yyÀss


3839 
	#yyÀss
(
n
) \

3843 
yyÀss_ma¸o_¨g
 = (
n
); \

3844 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

3845 
±x_ãxt
[
±x_Àng
] = (
yy_hﬁd_ch¨
); \

3846 (
yy_c_buf_p
Ë
±x_ãxt
 + 
yyÀss_ma¸o_¨g
; \

3847 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

3848 *(
yy_c_buf_p
) = '\0'; \

3849 
±x_Àng
 = 
yyÀss_ma¸o_¨g
; \

3851  0 )

	)

3858 
	$±x_gë_löío
 ()

3861  
±x_löío
;

3862 
	}
}

3867 
FILE
 *
	$±x_gë_ö
 ()

3869  
±x_ö
;

3870 
	}
}

3875 
FILE
 *
	$±x_gë_out
 ()

3877  
±x_out
;

3878 
	}
}

3883 
	$±x_gë_Àng
 ()

3885  
±x_Àng
;

3886 
	}
}

3892 *
	$±x_gë_ãxt
 ()

3894  
±x_ãxt
;

3895 
	}
}

3901 
	$±x_£t_löío
 (
löe_numbî
 )

3904 
±x_löío
 = 
löe_numbî
;

3905 
	}
}

3913 
	$±x_£t_ö
 (
FILE
 * 
ö_°r
 )

3915 
±x_ö
 = 
ö_°r
 ;

3916 
	}
}

3918 
	$±x_£t_out
 (
FILE
 * 
out_°r
 )

3920 
±x_out
 = 
out_°r
 ;

3921 
	}
}

3923 
	$±x_gë_debug
 ()

3925  
±x__Êex_debug
;

3926 
	}
}

3928 
	$±x_£t_debug
 (
bdebug
 )

3930 
±x__Êex_debug
 = 
bdebug
 ;

3931 
	}
}

3933 
	$yy_öô_globÆs
 ()

3940 
±x_löío
 = 1;

3942 (
yy_buf„r_°ack
) = 0;

3943 (
yy_buf„r_°ack_t›
) = 0;

3944 (
yy_buf„r_°ack_max
) = 0;

3945 (
yy_c_buf_p
) = (*) 0;

3946 (
yy_öô
) = 0;

3947 (
yy_°¨t
) = 0;

3950 #ifde‡
YY_STDINIT


3951 
±x_ö
 = 
°dö
;

3952 
±x_out
 = 
°dout
;

3954 
±x_ö
 = (
FILE
 *) 0;

3955 
±x_out
 = (
FILE
 *) 0;

3962 
	}
}

3965 
	$±x_Àx_de°roy
 ()

3969 
YY_CURRENT_BUFFER
){

3970 
	`±x__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3971 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3972 
	`±x_p›_buf„r_°©e
();

3976 
	`±x_‰ì
((
yy_buf„r_°ack
) );

3977 (
yy_buf„r_°ack
Ë
NULL
;

3981 
	`yy_öô_globÆs
( );

3984 
	}
}

3990 #i‚de‡
yyãxt_±r


3991 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

3993 
i
;

3994  
i
 = 0; i < 
n
; ++i )

3995 
s1
[
i
] = 
s2
[i];

3996 
	}
}

3999 #ifde‡
YY_NEED_STRLEN


4000 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

4002 
n
;

4003  
n
 = 0; 
s
[n]; ++n )

4006  
n
;

4007 
	}
}

4010 *
	$±x_Æloc
 (
yy_size_t
 
size
 )

4012  (*Ë
	`mÆloc
–
size
 );

4013 
	}
}

4015 *
	$±x_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

4024  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

4025 
	}
}

4027 
	$±x_‰ì
 (* 
±r
 )

4029 
	`‰ì
–(*Ë
±r
 );

4030 
	}
}

4032 
	#YYTABLES_NAME
 "yyèbÀs"

	)

4038 
g_îr‹_dëe˘ed
;

4039 c⁄° *
g_fûíame
;

4041 
	$±x_îr‹
–c⁄° *
s
 )

4043 
i
;

4044 
g_îr‹_dëe˘ed
 = 1;

4045 
	`fÊush
(
°dout
);

4046 if–
s
 !
NULL
 )

4047 
	`¥ötf
("%s:%u: Sy¡axÉº‹:\n\n", 
g_fûíame
, 
±x_löío
 );

4048 
	`¥ötf
(" %s\n", 
löebuf
 );

4049 
	`¥ötf
(" ");

4050  
i
=0; i < 
cﬁ
-1; i++ ) {

4051 if–
löebuf
[
i
] ='\t' ) 
	`¥ötf
("\t");

4052 
	`¥ötf
(" ");

4055 
	`¥ötf
("^\n\n");

4056 
	`fÊush
(
°dout
);

4059 
	}
}

	@src/cuda-sim/lex.ptxinfo_.c

4 
	#YY_INT_ALIGNED
 

	)

8 
	#yy_¸óã_buf„r
 
±xöfo__¸óã_buf„r


	)

9 
	#yy_dñëe_buf„r
 
±xöfo__dñëe_buf„r


	)

10 
	#yy_Êex_debug
 
±xöfo__Êex_debug


	)

11 
	#yy_öô_buf„r
 
±xöfo__öô_buf„r


	)

12 
	#yy_Êush_buf„r
 
±xöfo__Êush_buf„r


	)

13 
	#yy_lﬂd_buf„r_°©e
 
±xöfo__lﬂd_buf„r_°©e


	)

14 
	#yy_swôch_to_buf„r
 
±xöfo__swôch_to_buf„r


	)

15 
	#yyö
 
±xöfo_ö


	)

16 
	#yyÀng
 
±xöfo_Àng


	)

17 
	#yyÀx
 
±xöfo_Àx


	)

18 
	#yylöío
 
±xöfo_löío


	)

19 
	#yyout
 
±xöfo_out


	)

20 
	#yyª°¨t
 
±xöfo_ª°¨t


	)

21 
	#yyãxt
 
±xöfo_ãxt


	)

22 
	#yywøp
 
±xöfo_wøp


	)

23 
	#yyÆloc
 
±xöfo_Æloc


	)

24 
	#yyªÆloc
 
±xöfo_ªÆloc


	)

25 
	#yy‰ì
 
±xöfo_‰ì


	)

27 
	#FLEX_SCANNER


	)

28 
	#YY_FLEX_MAJOR_VERSION
 2

	)

29 
	#YY_FLEX_MINOR_VERSION
 5

	)

30 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

31 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

32 
	#FLEX_BETA


	)

38 
	~<°dio.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<°dlib.h
>

47 #i‚de‡
FLEXINT_H


48 
	#FLEXINT_H


	)

52 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

57 #i‚de‡
__STDC_LIMIT_MACROS


58 
	#__STDC_LIMIT_MACROS
 1

	)

61 
	~<öây≥s.h
>

62 
öt8_t
 
	tÊex_öt8_t
;

63 
uöt8_t
 
	tÊex_uöt8_t
;

64 
öt16_t
 
	tÊex_öt16_t
;

65 
uöt16_t
 
	tÊex_uöt16_t
;

66 
öt32_t
 
	tÊex_öt32_t
;

67 
uöt32_t
 
	tÊex_uöt32_t
;

69 sig√d 
	tÊex_öt8_t
;

70 
	tÊex_öt16_t
;

71 
	tÊex_öt32_t
;

72 
	tÊex_uöt8_t
;

73 
	tÊex_uöt16_t
;

74 
	tÊex_uöt32_t
;

78 #i‚de‡
INT8_MIN


79 
	#INT8_MIN
 (-128)

	)

81 #i‚de‡
INT16_MIN


82 
	#INT16_MIN
 (-32767-1)

	)

84 #i‚de‡
INT32_MIN


85 
	#INT32_MIN
 (-2147483647-1)

	)

87 #i‚de‡
INT8_MAX


88 
	#INT8_MAX
 (127)

	)

90 #i‚de‡
INT16_MAX


91 
	#INT16_MAX
 (32767)

	)

93 #i‚de‡
INT32_MAX


94 
	#INT32_MAX
 (2147483647)

	)

96 #i‚de‡
UINT8_MAX


97 
	#UINT8_MAX
 (255U)

	)

99 #i‚de‡
UINT16_MAX


100 
	#UINT16_MAX
 (65535U)

	)

102 #i‚de‡
UINT32_MAX


103 
	#UINT32_MAX
 (4294967295U)

	)

108 #ifde‡
__˝lu•lus


111 
	#YY_USE_CONST


	)

116 #i‡
deföed
 (
__STDC__
)

118 
	#YY_USE_CONST


	)

123 #ifde‡
YY_USE_CONST


124 
	#yyc⁄°
 c⁄°

	)

126 
	#yyc⁄°


	)

130 
	#YY_NULL
 0

	)

137 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

143 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

149 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

150 
	#YYSTATE
 
YY_START


	)

153 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

156 
	#YY_NEW_FILE
 
	`±xöfo_ª°¨t
(
±xöfo_ö
 )

	)

158 
	#YY_END_OF_BUFFER_CHAR
 0

	)

161 #i‚de‡
YY_BUF_SIZE


162 
	#YY_BUF_SIZE
 16384

	)

167 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

169 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


170 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

171 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

174 
±xöfo_Àng
;

176 
FILE
 *
±xöfo_ö
, *
±xöfo_out
;

178 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

179 
	#EOB_ACT_END_OF_FILE
 1

	)

180 
	#EOB_ACT_LAST_MATCH
 2

	)

189 
	#YY_LESS_LINENO
(
n
) \

191 
yyl
;\

192  
yyl
 = 
n
; yy»< 
±xöfo_Àng
; ++yyl )\

193 i‡–
±xöfo_ãxt
[
yyl
] == '\n' )\

194 --
±xöfo_löío
;\

195 }0)

	)

198 
	#yyÀss
(
n
) \

202 
yyÀss_ma¸o_¨g
 = (
n
); \

203 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

204 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

205 
YY_RESTORE_YY_MORE_OFFSET
 \

206 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

207 
YY_DO_BEFORE_ACTION
; \

209  0 )

	)

211 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

213 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


214 
	#YY_TYPEDEF_YY_SIZE_T


	)

215 
size_t
 
	tyy_size_t
;

218 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


219 
	#YY_STRUCT_YY_BUFFER_STATE


	)

220 
	syy_buf„r_°©e


222 
FILE
 *
	myy_öput_fûe
;

224 *
	myy_ch_buf
;

225 *
	myy_buf_pos
;

230 
yy_size_t
 
	myy_buf_size
;

235 
	myy_n_ch¨s
;

241 
	myy_is_our_buf„r
;

248 
	myy_is_öãø˘ive
;

254 
	myy_©_bﬁ
;

256 
	myy_bs_löío
;

257 
	myy_bs_cﬁumn
;

262 
	myy_fûl_buf„r
;

264 
	myy_buf„r_°©us
;

266 
	#YY_BUFFER_NEW
 0

	)

267 
	#YY_BUFFER_NORMAL
 1

	)

278 
	#YY_BUFFER_EOF_PENDING
 2

	)

284 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

285 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

286 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

294 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

295 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

296 : 
NULL
)

	)

301 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

304 
	gyy_hﬁd_ch¨
;

305 
	gyy_n_ch¨s
;

306 
	g±xöfo_Àng
;

309 *
	gyy_c_buf_p
 = (*) 0;

310 
	gyy_öô
 = 0;

311 
	gyy_°¨t
 = 0;

316 
	gyy_did_buf„r_swôch_⁄_eof
;

318 
±xöfo_ª°¨t
 (
FILE
 *
öput_fûe
 );

319 
±xöfo__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

320 
YY_BUFFER_STATE
 
±xöfo__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

321 
±xöfo__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

322 
±xöfo__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

323 
±xöfo_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

324 
±xöfo_p›_buf„r_°©e
 ();

326 
±xöfo_ísuª_buf„r_°ack
 ();

327 
±xöfo__lﬂd_buf„r_°©e
 ();

328 
±xöfo__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

330 
	#YY_FLUSH_BUFFER
 
	`±xöfo__Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

332 
YY_BUFFER_STATE
 
±xöfo__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

333 
YY_BUFFER_STATE
 
±xöfo__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

334 
YY_BUFFER_STATE
 
±xöfo__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

336 *
±xöfo_Æloc
 (
yy_size_t
 );

337 *
±xöfo_ªÆloc
 (*,
yy_size_t
 );

338 
±xöfo_‰ì
 (* );

340 
	#yy_√w_buf„r
 
±xöfo__¸óã_buf„r


	)

342 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

344 i‡–! 
YY_CURRENT_BUFFER
 ){ \

345 
	`±xöfo_ísuª_buf„r_°ack
 (); \

346 
YY_CURRENT_BUFFER_LVALUE
 = \

347 
	`±xöfo__¸óã_buf„r
(
±xöfo_ö
,
YY_BUF_SIZE
 ); \

349 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

350 }

	)

352 
	#yy_£t_bﬁ
(
©_bﬁ
) \

354 i‡–! 
YY_CURRENT_BUFFER
 ){\

355 
	`±xöfo_ísuª_buf„r_°ack
 (); \

356 
YY_CURRENT_BUFFER_LVALUE
 = \

357 
	`±xöfo__¸óã_buf„r
(
±xöfo_ö
,
YY_BUF_SIZE
 ); \

359 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

360 }

	)

362 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

366 
	#±xöfo_wøp
(
n
Ë1

	)

367 
	#YY_SKIP_YYWRAP


	)

369 
	tYY_CHAR
;

371 
FILE
 *
	g±xöfo_ö
 = (FILE *Ë0, *
	g±xöfo_out
 = (FILE *) 0;

373 
	tyy_°©e_ty≥
;

375 
±xöfo_löío
;

377 
	g±xöfo_löío
 = 1;

379 *
±xöfo_ãxt
;

380 
	#yyãxt_±r
 
±xöfo_ãxt


	)

382 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

383 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

384 
yy_gë_√xt_buf„r
 ();

385 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

390 
	#YY_DO_BEFORE_ACTION
 \

391 (
yyãxt_±r
Ë
yy_bp
; \

392 
±xöfo_Àng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

393 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

394 *
yy_˝
 = '\0'; \

395 (
yy_c_buf_p
Ë
yy_˝
;

	)

397 
	#YY_NUM_RULES
 26

	)

398 
	#YY_END_OF_BUFFER
 27

	)

401 
	syy_å™s_öfo


403 
Êex_öt32_t
 
	myy_vîify
;

404 
Êex_öt32_t
 
	myy_nxt
;

406 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[137] =

425 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

457 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[39] =

465 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[143] =

485 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[143] =

505 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[219] =

533 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[219] =

562 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[27] =

567 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

568 *
	gyy_œ°_ac˚±ög_˝os
;

570 
±xöfo__Êex_debug
;

571 
	g±xöfo__Êex_debug
 = 0;

576 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

577 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

578 
	#YY_MORE_ADJ
 0

	)

579 
	#YY_RESTORE_YY_MORE_OFFSET


	)

580 *
	g±xöfo_ãxt
;

611 
	~"±xöfo.èb.h
"

612 
	~<°rög.h
>

614 
	#LINEBUF_SIZE
 1024

	)

615 
	g±xöfo_löebuf
[
LINEBUF_SIZE
];

616 
	g±xöfo_cﬁ
 = 0;

617 
	#TC
 if–(
±xöfo_löío
 =1Ë&& ((
±xöfo_cﬁ
 + 
	`°æí
(
±xöfo_ãxt
)Ë< 
LINEBUF_SIZE
ËË{ \

	)

618 
°∫˝y
(
±xöfo_löebuf
+
±xöfo_cﬁ
,
±xöfo_ãxt
,
°æí
(ptxinfo_text)); \

620 
	g±xöfo_cﬁ
+=
°æí
(
±xöfo_ãxt
);

623 
	#INITIAL
 0

	)

625 #i‚de‡
YY_NO_UNISTD_H


630 
	~<uni°d.h
>

633 #i‚de‡
YY_EXTRA_TYPE


634 
	#YY_EXTRA_TYPE
 *

	)

637 
yy_öô_globÆs
 ();

642 
±xöfo_Àx_de°roy
 ();

644 
±xöfo_gë_debug
 ();

646 
±xöfo_£t_debug
 (
debug_Êag
 );

648 
YY_EXTRA_TYPE
 
±xöfo_gë_exåa
 ();

650 
±xöfo_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

652 
FILE
 *
±xöfo_gë_ö
 ();

654 
±xöfo_£t_ö
 (
FILE
 * 
ö_°r
 );

656 
FILE
 *
±xöfo_gë_out
 ();

658 
±xöfo_£t_out
 (
FILE
 * 
out_°r
 );

660 
±xöfo_gë_Àng
 ();

662 *
±xöfo_gë_ãxt
 ();

664 
±xöfo_gë_löío
 ();

666 
±xöfo_£t_löío
 (
löe_numbî
 );

672 #i‚de‡
YY_SKIP_YYWRAP


673 #ifde‡
__˝lu•lus


674 "C" 
±xöfo_wøp
 ();

676 
±xöfo_wøp
 ();

680 
yyu≈ut
 (
c
,*
buf_±r
 );

682 #i‚de‡
yyãxt_±r


683 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

686 #ifde‡
YY_NEED_STRLEN


687 
yy_Êex_°æí
 (
yyc⁄°
 * );

690 #i‚de‡
YY_NO_INPUT


692 #ifde‡
__˝lu•lus


693 
yyöput
 ();

695 
öput
 ();

701 #i‚de‡
YY_READ_BUF_SIZE


702 
	#YY_READ_BUF_SIZE
 8192

	)

706 #i‚de‡
ECHO


710 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
±xöfo_ãxt
, 
±xöfo_Àng
, 1, 
±xöfo_out
 )Ë{} } 0)

	)

716 #i‚de‡
YY_INPUT


717 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

718 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

720 
c
 = '*'; \

721 
n
; \

722  
n
 = 0;Ç < 
max_size
 && \

723 (
c
 = 
	`gëc
–
±xöfo_ö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

724 
buf
[
n
] = (Ë
c
; \

725 i‡–
c
 == '\n' ) \

726 
buf
[
n
++] = (Ë
c
; \

727 i‡–
c
 =
EOF
 && 
	`„º‹
–
±xöfo_ö
 ) ) \

728 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

729 
ªsu…
 = 
n
; \

733 
î∫o
=0; \

734  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
±xöfo_ö
))==0 && 
	`„º‹
(ptxinfo_in)) \

736 if–
î∫o
 !
EINTR
) \

738 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

741 
î∫o
=0; \

742 
	`˛óªº
(
±xöfo_ö
); \

746 

	)

753 #i‚de‡
yyãrmö©e


754 
	#yyãrmö©e
(Ë 
YY_NULL


	)

758 #i‚de‡
YY_START_STACK_INCR


759 
	#YY_START_STACK_INCR
 25

	)

763 #i‚de‡
YY_FATAL_ERROR


764 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

772 #i‚de‡
YY_DECL


773 
	#YY_DECL_IS_OURS
 1

	)

775 
±xöfo_Àx
 ();

777 
	#YY_DECL
 
	`±xöfo_Àx
 ()

	)

783 #i‚de‡
YY_USER_ACTION


784 
	#YY_USER_ACTION


	)

788 #i‚de‡
YY_BREAK


789 
	#YY_BREAK
 ;

	)

792 
	#YY_RULE_SETUP
 \

793 
YY_USER_ACTION


	)

797 
	gYY_DECL


799 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

800 *
	gyy_˝
, *
	gyy_bp
;

801 
	gyy_a˘
;

807 i‡–!(
	gyy_öô
) )

809 (
	gyy_öô
) = 1;

811 #ifde‡
YY_USER_INIT


812 
	gYY_USER_INIT
;

815 i‡–! (
	gyy_°¨t
) )

816 (
	gyy_°¨t
) = 1;

818 i‡–! 
	g±xöfo_ö
 )

819 
	g±xöfo_ö
 = 
°dö
;

821 i‡–! 
	g±xöfo_out
 )

822 
	g±xöfo_out
 = 
°dout
;

824 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

825 
±xöfo_ísuª_buf„r_°ack
 ();

826 
	gYY_CURRENT_BUFFER_LVALUE
 =

827 
±xöfo__¸óã_buf„r
(
±xöfo_ö
,
YY_BUF_SIZE
 );

830 
±xöfo__lﬂd_buf„r_°©e
( );

835 
	gyy_˝
 = (
yy_c_buf_p
);

838 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

843 
	gyy_bp
 = 
yy_˝
;

845 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

846 
	gyy_m©ch
:

849 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

850 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

852 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

853 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

855  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

857 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

858 i‡–
	gyy_cuºít_°©e
 >= 137 )

859 
yy_c
 = 
yy_mëa
[() yy_c];

861 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

862 ++
	gyy_˝
;

864  
	gyy_ba£
[
yy_cuºít_°©e
] != 180 );

866 
	gyy_föd_a˘i⁄
:

867 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

868 i‡–
	gyy_a˘
 == 0 )

870 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

871 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

872 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

875 
	gYY_DO_BEFORE_ACTION
;

877 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

879 
yyl
;

880  
	gyyl
 = 0; yy»< 
	g±xöfo_Àng
; ++yyl )

881 i‡–
	g±xöfo_ãxt
[
yyl
] == '\n' )

883 
±xöfo_löío
++;

887 
	gdo_a˘i⁄
:

889  
yy_a˘
 )

893 *
yy_˝
 = (
yy_hﬁd_ch¨
);

894 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

895 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

896 
	gyy_föd_a˘i⁄
;

900 
YY_RULE_SETUP


903 
YY_BREAK


905 
YY_RULE_SETUP


907 
TC
;  
	gWARNING
;

908 
YY_BREAK


910 
YY_RULE_SETUP


912 
TC
;  
	gHEADER
;

913 
YY_BREAK


915 
YY_RULE_SETUP


917 
TC
;  
	gINFO
;

918 
YY_BREAK


920 
YY_RULE_SETUP


922 
TC
;  
	gFUNC
;

923 
YY_BREAK


925 
YY_RULE_SETUP


927 
TC
;  
	gUSED
;

928 
YY_BREAK


930 
YY_RULE_SETUP


932 
TC
;  
	gREGS
;

933 
YY_BREAK


935 
YY_RULE_SETUP


937 
TC
;  
	gBYTES
;

938 
YY_BREAK


940 
YY_RULE_SETUP


942 
TC
;  
	gLMEM
;

943 
YY_BREAK


945 
YY_RULE_SETUP


947 
TC
;  
	gSMEM
;

948 
YY_BREAK


950 
YY_RULE_SETUP


952 
TC
;  
	gCMEM
;

953 
YY_BREAK


955 
YY_RULE_SETUP


957 
TC
;  
	gLINE
;

958 
YY_BREAK


960 
YY_RULE_SETUP


962 
TC
;  
	gFOR
;

963 
YY_BREAK


965 
YY_RULE_SETUP


967 
TC
; 
	g±xöfo_lvÆ
.
	g°rög_vÆue
 = 
°rdup
(
±xöfo_ãxt
);  
	gIDENTIFIER
;

968 
YY_BREAK


970 
YY_RULE_SETUP


972 
TC
; 
	g±xöfo_lvÆ
.
	göt_vÆue
 = 
©oi
(
±xöfo_ãxt
);  
	gINT_OPERAND
;

973 
YY_BREAK


975 
YY_RULE_SETUP


977 
TC
;  
	gPLUS
;

978 
YY_BREAK


980 
YY_RULE_SETUP


982 
TC
;  
	gCOMMA
;

983 
YY_BREAK


985 
YY_RULE_SETUP


987 
TC
;  
	gLEFT_SQUARE_BRACKET
;

988 
YY_BREAK


990 
YY_RULE_SETUP


992 
TC
;  
	gRIGHT_SQUARE_BRACKET
;

993 
YY_BREAK


995 
YY_RULE_SETUP


997 
TC
;  
	gCOLON
;

998 
YY_BREAK


1000 
YY_RULE_SETUP


1002 
TC
;  
	gSEMICOLON
;

1003 
YY_BREAK


1005 
YY_RULE_SETUP


1007 
TC
;  
	gQUOTE
;

1008 
YY_BREAK


1010 
YY_RULE_SETUP


1012 
TC
;

1013 
YY_BREAK


1015 
YY_RULE_SETUP


1017 
TC
;

1018 
YY_BREAK


1021 
YY_RULE_SETUP


1023 
±xöfo_cﬁ
=0; 
°∫˝y
(
±xöfo_löebuf
, 
±xöfo_ãxt
 + 1, 1024); 
yyÀss
( 1 );

1024 
YY_BREAK


1026 
YY_RULE_SETUP


1028 
ECHO
;

1029 
	gYY_BREAK


1031 
YY_STATE_EOF
(
INITIAL
):

1032 
yyãrmö©e
();

1034 
	gYY_END_OF_BUFFER
:

1037 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1040 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1041 
YY_RESTORE_YY_MORE_OFFSET


1043 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1054 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1055 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
±xöfo_ö
;

1056 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1066 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1068 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1070 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1072 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1083 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1085 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1087 i‡–
	gyy_√xt_°©e
 )

1090 
	gyy_˝
 = ++(
yy_c_buf_p
);

1091 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1092 
	gyy_m©ch
;

1097 
	gyy_˝
 = (
yy_c_buf_p
);

1098 
	gyy_föd_a˘i⁄
;

1102  
yy_gë_√xt_buf„r
( ) )

1104 
	gEOB_ACT_END_OF_FILE
:

1106 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1108 i‡–
±xöfo_wøp
( ) )

1119 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1121 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1122 
	gdo_a˘i⁄
;

1127 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1128 
	gYY_NEW_FILE
;

1133 
	gEOB_ACT_CONTINUE_SCAN
:

1134 (
yy_c_buf_p
) =

1135 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1137 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1139 
	gyy_˝
 = (
yy_c_buf_p
);

1140 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1141 
	gyy_m©ch
;

1143 
	gEOB_ACT_LAST_MATCH
:

1144 (
yy_c_buf_p
) =

1145 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1147 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1149 
	gyy_˝
 = (
yy_c_buf_p
);

1150 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1151 
	gyy_föd_a˘i⁄
;

1157 
YY_FATAL_ERROR
(

1170 
	$yy_gë_√xt_buf„r
 ()

1172 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1173 *
sour˚
 = (
yyãxt_±r
);

1174 
numbî_to_move
, 
i
;

1175 
ªt_vÆ
;

1177 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1178 
	`YY_FATAL_ERROR
(

1181 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1183 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1188  
EOB_ACT_END_OF_FILE
;

1196  
EOB_ACT_LAST_MATCH
;

1203 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

1205  
i
 = 0; i < 
numbî_to_move
; ++i )

1206 *(
de°
++Ë*(
sour˚
++);

1208 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1212 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1216 
num_to_ªad
 =

1217 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1219  
num_to_ªad
 <= 0 )

1223 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

1225 
yy_c_buf_p_off£t
 =

1226 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1228 i‡–
b
->
yy_is_our_buf„r
 )

1230 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1232 i‡–
√w_size
 <= 0 )

1233 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1235 
b
->
yy_buf_size
 *= 2;

1237 
b
->
yy_ch_buf
 = (*)

1239 
	`±xöfo_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

1243 
b
->
yy_ch_buf
 = 0;

1245 i‡–! 
b
->
yy_ch_buf
 )

1246 
	`YY_FATAL_ERROR
(

1249 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1251 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1252 
numbî_to_move
 - 1;

1256 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1257 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1260 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1261 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

1263 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1266 i‡–(
yy_n_ch¨s
) == 0 )

1268 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1270 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1271 
	`±xöfo_ª°¨t
(
±xöfo_ö
 );

1276 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1277 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1278 
YY_BUFFER_EOF_PENDING
;

1283 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1285 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1287 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1288 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`±xöfo_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

1289 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1290 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1293 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1294 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1295 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1297 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1299  
ªt_vÆ
;

1300 
	}
}

1304 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1306 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1307 *
yy_˝
;

1309 
yy_cuºít_°©e
 = (
yy_°¨t
);

1311  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1313 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1314 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1316 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1317 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1319  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1321 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1322 i‡–
yy_cuºít_°©e
 >= 137 )

1323 
yy_c
 = 
yy_mëa
[() yy_c];

1325 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1328  
yy_cuºít_°©e
;

1329 
	}
}

1336 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1338 
yy_is_jam
;

1339 *
yy_˝
 = (
yy_c_buf_p
);

1341 
YY_CHAR
 
yy_c
 = 1;

1342 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1344 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1345 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1347  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1349 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1350 i‡–
yy_cuºít_°©e
 >= 137 )

1351 
yy_c
 = 
yy_mëa
[() yy_c];

1353 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1354 
yy_is_jam
 = (
yy_cuºít_°©e
 == 136);

1356  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1357 
	}
}

1359 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

1361 *
yy_˝
;

1363 
yy_˝
 = (
yy_c_buf_p
);

1366 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1368 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1371 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

1372 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

1373 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

1374 *
sour˚
 =

1375 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

1377  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1378 *--
de°
 = *--
sour˚
;

1380 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1381 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1382 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

1383 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

1385 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1386 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1389 *--
yy_˝
 = (Ë
c
;

1391 i‡–
c
 == '\n' ){

1392 --
±xöfo_löío
;

1395 (
yyãxt_±r
Ë
yy_bp
;

1396 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

1397 (
yy_c_buf_p
Ë
yy_˝
;

1398 
	}
}

1400 #i‚de‡
YY_NO_INPUT


1401 #ifde‡
__˝lu•lus


1402 
	$yyöput
 ()

1404 
	$öput
 ()

1408 
c
;

1410 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1412 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1418 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1420 *(
yy_c_buf_p
) = '\0';

1424 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

1425 ++(
yy_c_buf_p
);

1427  
	`yy_gë_√xt_buf„r
( ) )

1429 
EOB_ACT_LAST_MATCH
:

1441 
	`±xöfo_ª°¨t
(
±xöfo_ö
 );

1445 
EOB_ACT_END_OF_FILE
:

1447 i‡–
	`±xöfo_wøp
( ) )

1448  
EOF
;

1450 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1451 
YY_NEW_FILE
;

1452 #ifde‡
__˝lu•lus


1453  
	`yyöput
();

1455  
	`öput
();

1459 
EOB_ACT_CONTINUE_SCAN
:

1460 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1466 
c
 = *(*Ë(
yy_c_buf_p
);

1467 *(
yy_c_buf_p
) = '\0';

1468 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1470 i‡–
c
 == '\n' )

1472 
±xöfo_löío
++;

1475  
c
;

1476 
	}
}

1484 
	$±xöfo_ª°¨t
 (
FILE
 * 
öput_fûe
 )

1487 i‡–! 
YY_CURRENT_BUFFER
 ){

1488 
	`±xöfo_ísuª_buf„r_°ack
 ();

1489 
YY_CURRENT_BUFFER_LVALUE
 =

1490 
	`±xöfo__¸óã_buf„r
(
±xöfo_ö
,
YY_BUF_SIZE
 );

1493 
	`±xöfo__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

1494 
	`±xöfo__lﬂd_buf„r_°©e
( );

1495 
	}
}

1501 
	$±xöfo__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1509 
	`±xöfo_ísuª_buf„r_°ack
 ();

1510 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1513 i‡–
YY_CURRENT_BUFFER
 )

1516 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1517 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1518 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1521 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1522 
	`±xöfo__lﬂd_buf„r_°©e
( );

1529 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1530 
	}
}

1532 
	$±xöfo__lﬂd_buf„r_°©e
 ()

1534 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1535 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1536 
±xöfo_ö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1537 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1538 
	}
}

1546 
YY_BUFFER_STATE
 
	$±xöfo__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1548 
YY_BUFFER_STATE
 
b
;

1550 
b
 = (
YY_BUFFER_STATE
Ë
	`±xöfo_Æloc
(–
yy_buf„r_°©e
 ) );

1551 i‡–! 
b
 )

1552 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtxinfo__create_buffer()" );

1554 
b
->
yy_buf_size
 = 
size
;

1559 
b
->
yy_ch_buf
 = (*Ë
	`±xöfo_Æloc
(b->
yy_buf_size
 + 2 );

1560 i‡–! 
b
->
yy_ch_buf
 )

1561 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtxinfo__create_buffer()" );

1563 
b
->
yy_is_our_buf„r
 = 1;

1565 
	`±xöfo__öô_buf„r
(
b
,
fûe
 );

1567  
b
;

1568 
	}
}

1574 
	$±xöfo__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1577 i‡–! 
b
 )

1580 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1581 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1583 i‡–
b
->
yy_is_our_buf„r
 )

1584 
	`±xöfo_‰ì
((*Ë
b
->
yy_ch_buf
 );

1586 
	`±xöfo_‰ì
((*Ë
b
 );

1587 
	}
}

1589 #i‚de‡
__˝lu•lus


1590 
ißây
 ();

1597 
	$±xöfo__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1600 
€ºno
 = 
î∫o
;

1602 
	`±xöfo__Êush_buf„r
(
b
 );

1604 
b
->
yy_öput_fûe
 = 
fûe
;

1605 
b
->
yy_fûl_buf„r
 = 1;

1611 i‡(
b
 !
YY_CURRENT_BUFFER
){

1612 
b
->
yy_bs_löío
 = 1;

1613 
b
->
yy_bs_cﬁumn
 = 0;

1616 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1618 
î∫o
 = 
€ºno
;

1619 
	}
}

1625 
	$±xöfo__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1627 i‡–! 
b
 )

1630 
b
->
yy_n_ch¨s
 = 0;

1636 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1637 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1639 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1641 
b
->
yy_©_bﬁ
 = 1;

1642 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1644 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1645 
	`±xöfo__lﬂd_buf„r_°©e
( );

1646 
	}
}

1654 
	$±xöfo_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1656 i‡(
√w_buf„r
 =
NULL
)

1659 
	`±xöfo_ísuª_buf„r_°ack
();

1662 i‡–
YY_CURRENT_BUFFER
 )

1665 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1666 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1667 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1671 i‡(
YY_CURRENT_BUFFER
)

1672 (
yy_buf„r_°ack_t›
)++;

1673 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1676 
	`±xöfo__lﬂd_buf„r_°©e
( );

1677 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1678 
	}
}

1684 
	$±xöfo_p›_buf„r_°©e
 ()

1686 i‡(!
YY_CURRENT_BUFFER
)

1689 
	`±xöfo__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1690 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1691 i‡((
yy_buf„r_°ack_t›
) > 0)

1692 --(
yy_buf„r_°ack_t›
);

1694 i‡(
YY_CURRENT_BUFFER
) {

1695 
	`±xöfo__lﬂd_buf„r_°©e
( );

1696 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1698 
	}
}

1703 
	$±xöfo_ísuª_buf„r_°ack
 ()

1705 
num_to_Æloc
;

1707 i‡(!(
yy_buf„r_°ack
)) {

1713 
num_to_Æloc
 = 1;

1714 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
±xöfo_Æloc


1715 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1717 i‡–! (
yy_buf„r_°ack
) )

1718 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtxinfo_ensure_buffer_stack()" );

1720 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1722 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1723 (
yy_buf„r_°ack_t›
) = 0;

1727 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1730 
grow_size
 = 8 ;

1732 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1733 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
±xöfo_ªÆloc


1734 ((
yy_buf„r_°ack
),

1735 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1737 i‡–! (
yy_buf„r_°ack
) )

1738 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtxinfo_ensure_buffer_stack()" );

1741 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1742 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1744 
	}
}

1752 
YY_BUFFER_STATE
 
	$±xöfo__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1754 
YY_BUFFER_STATE
 
b
;

1756 i‡–
size
 < 2 ||

1757 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1758 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1762 
b
 = (
YY_BUFFER_STATE
Ë
	`±xöfo_Æloc
(–
yy_buf„r_°©e
 ) );

1763 i‡–! 
b
 )

1764 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtxinfo__scan_buffer()" );

1766 
b
->
yy_buf_size
 = 
size
 - 2;

1767 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1768 
b
->
yy_is_our_buf„r
 = 0;

1769 
b
->
yy_öput_fûe
 = 0;

1770 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1771 
b
->
yy_is_öãø˘ive
 = 0;

1772 
b
->
yy_©_bﬁ
 = 1;

1773 
b
->
yy_fûl_buf„r
 = 0;

1774 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1776 
	`±xöfo__swôch_to_buf„r
(
b
 );

1778  
b
;

1779 
	}
}

1789 
YY_BUFFER_STATE
 
	$±xöfo__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

1792  
	`±xöfo__sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

1793 
	}
}

1802 
YY_BUFFER_STATE
 
	$±xöfo__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

1804 
YY_BUFFER_STATE
 
b
;

1805 *
buf
;

1806 
yy_size_t
 
n
;

1807 
i
;

1810 
n
 = 
_yybyãs_Àn
 + 2;

1811 
buf
 = (*Ë
	`±xöfo_Æloc
(
n
 );

1812 i‡–! 
buf
 )

1813 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖtxinfo__scan_bytes()" );

1815  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1816 
buf
[
i
] = 
yybyãs
[i];

1818 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1820 
b
 = 
	`±xöfo__sˇn_buf„r
(
buf
,
n
 );

1821 i‡–! 
b
 )

1822 
	`YY_FATAL_ERROR
( "bad buffer inÖtxinfo__scan_bytes()" );

1827 
b
->
yy_is_our_buf„r
 = 1;

1829  
b
;

1830 
	}
}

1832 #i‚de‡
YY_EXIT_FAILURE


1833 
	#YY_EXIT_FAILURE
 2

	)

1836 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

1838 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1839 
	`exô
–
YY_EXIT_FAILURE
 );

1840 
	}
}

1844 #unde‡
yyÀss


1845 
	#yyÀss
(
n
) \

1849 
yyÀss_ma¸o_¨g
 = (
n
); \

1850 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1851 
±xöfo_ãxt
[
±xöfo_Àng
] = (
yy_hﬁd_ch¨
); \

1852 (
yy_c_buf_p
Ë
±xöfo_ãxt
 + 
yyÀss_ma¸o_¨g
; \

1853 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1854 *(
yy_c_buf_p
) = '\0'; \

1855 
±xöfo_Àng
 = 
yyÀss_ma¸o_¨g
; \

1857  0 )

	)

1864 
	$±xöfo_gë_löío
 ()

1867  
±xöfo_löío
;

1868 
	}
}

1873 
FILE
 *
	$±xöfo_gë_ö
 ()

1875  
±xöfo_ö
;

1876 
	}
}

1881 
FILE
 *
	$±xöfo_gë_out
 ()

1883  
±xöfo_out
;

1884 
	}
}

1889 
	$±xöfo_gë_Àng
 ()

1891  
±xöfo_Àng
;

1892 
	}
}

1898 *
	$±xöfo_gë_ãxt
 ()

1900  
±xöfo_ãxt
;

1901 
	}
}

1907 
	$±xöfo_£t_löío
 (
löe_numbî
 )

1910 
±xöfo_löío
 = 
löe_numbî
;

1911 
	}
}

1919 
	$±xöfo_£t_ö
 (
FILE
 * 
ö_°r
 )

1921 
±xöfo_ö
 = 
ö_°r
 ;

1922 
	}
}

1924 
	$±xöfo_£t_out
 (
FILE
 * 
out_°r
 )

1926 
±xöfo_out
 = 
out_°r
 ;

1927 
	}
}

1929 
	$±xöfo_gë_debug
 ()

1931  
±xöfo__Êex_debug
;

1932 
	}
}

1934 
	$±xöfo_£t_debug
 (
bdebug
 )

1936 
±xöfo__Êex_debug
 = 
bdebug
 ;

1937 
	}
}

1939 
	$yy_öô_globÆs
 ()

1946 
±xöfo_löío
 = 1;

1948 (
yy_buf„r_°ack
) = 0;

1949 (
yy_buf„r_°ack_t›
) = 0;

1950 (
yy_buf„r_°ack_max
) = 0;

1951 (
yy_c_buf_p
) = (*) 0;

1952 (
yy_öô
) = 0;

1953 (
yy_°¨t
) = 0;

1956 #ifde‡
YY_STDINIT


1957 
±xöfo_ö
 = 
°dö
;

1958 
±xöfo_out
 = 
°dout
;

1960 
±xöfo_ö
 = (
FILE
 *) 0;

1961 
±xöfo_out
 = (
FILE
 *) 0;

1968 
	}
}

1971 
	$±xöfo_Àx_de°roy
 ()

1975 
YY_CURRENT_BUFFER
){

1976 
	`±xöfo__dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1977 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1978 
	`±xöfo_p›_buf„r_°©e
();

1982 
	`±xöfo_‰ì
((
yy_buf„r_°ack
) );

1983 (
yy_buf„r_°ack
Ë
NULL
;

1987 
	`yy_öô_globÆs
( );

1990 
	}
}

1996 #i‚de‡
yyãxt_±r


1997 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

1999 
i
;

2000  
i
 = 0; i < 
n
; ++i )

2001 
s1
[
i
] = 
s2
[i];

2002 
	}
}

2005 #ifde‡
YY_NEED_STRLEN


2006 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

2008 
n
;

2009  
n
 = 0; 
s
[n]; ++n )

2012  
n
;

2013 
	}
}

2016 *
	$±xöfo_Æloc
 (
yy_size_t
 
size
 )

2018  (*Ë
	`mÆloc
–
size
 );

2019 
	}
}

2021 *
	$±xöfo_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

2030  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2031 
	}
}

2033 
	$±xöfo_‰ì
 (* 
±r
 )

2035 
	`‰ì
–(*Ë
±r
 );

2036 
	}
}

2038 
	#YYTABLES_NAME
 "yyèbÀs"

	)

2044 
g_±xöfo_îr‹_dëe˘ed
;

2045 c⁄° *
g_fûíame
;

2046 c⁄° *
g_±xöfo_fûíame
;

2048 
	$±xöfo_îr‹
–c⁄° *
s
 )

2050 
i
;

2051 
g_±xöfo_îr‹_dëe˘ed
 = 1;

2052 
	`fÊush
(
°dout
);

2053 
	`¥ötf
("GPGPU-Sim: ERROR whileÖarsing output ofÖtxas (usedÅo captureÑesource usage information)\n");

2054 if–
s
 !
NULL
 )

2055 
	`¥ötf
("GPGPU-Sim: %†(%s:%uËSy¡axÉº‹:\n\n", 
g_fûíame
, 
g_±xöfo_fûíame
, 
±xöfo_löío
 );

2056 
	`¥ötf
(" %s\n", 
±xöfo_löebuf
 );

2057 
	`¥ötf
(" ");

2058  
i
=0; i < 
±xöfo_cﬁ
-1; i++ ) {

2059 if–
±xöfo_löebuf
[
i
] ='\t' ) 
	`¥ötf
("\t");

2060 
	`¥ötf
(" ");

2063 
	`¥ötf
("^\n\n");

2064 
	`fÊush
(
°dout
);

2065 
	`exô
(43);

2067 
	}
}

	@src/cuda-sim/memory.cc

28 
	~"mem‹y.h
"

29 
	~<°dlib.h
>

30 
	~"../debug.h
"

32 
	gãm∂©e
<
	gBSIZE
> 
	gmem‹y_•a˚_im∂
<BSIZE>::
mem‹y_•a˚_im∂
–
°d
::
°rög
 
«me
, 
hash_size
 )

34 
	gm_«me
 = 
«me
;

35 
MEM_MAP_RESIZE
(
hash_size
);

37 
	gm_log2_block_size
 = -1;

38  
	gn
=0, 
	gmask
=1; mask != 0; mask <<= 1,Ç++ ) {

39 if–
	gBSIZE
 & 
	gmask
 ) {

40 
as£π
–
m_log2_block_size
 == ()-1 );

41 
	gm_log2_block_size
 = 
n
;

44 
as£π
–
m_log2_block_size
 != ()-1 );

47 
	gãm∂©e
<
	gBSIZE
> 
	gmem‹y_•a˚_im∂
<BSIZE>::
	$wrôe
–
mem_addr_t
 
addr
, 
size_t
 
Àngth
, c⁄° *
d©a
, 
˛ass
 
±x_thªad_öfo
 *
thd
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
)

50 
±hªad_muãx_t
 
kaö_fuck
;;

51 
	`±hªad_muãx_lock
(&
kaö_fuck
);

52 
mem_addr_t
 
ödex
 = 
addr
 >> 
m_log2_block_size
;

53 i‡–(
addr
+
Àngth
Ë<(
ödex
+1)*
BSIZE
 ) {

55 
off£t
 = 
addr
 & (
BSIZE
-1);

56 
nbyãs
 = 
Àngth
;

57 
m_d©a
[
ödex
].
	`wrôe
(
off£t
,
nbyãs
,(c⁄° *)
d©a
);

60 
nbyãs_ªmaö
 = 
Àngth
;

61 
§c_off£t
 = 0;

62 
mem_addr_t
 
cuºít_addr
 = 
addr
;

64 
nbyãs_ªmaö
 > 0) {

65 
off£t
 = 
cuºít_addr
 & (
BSIZE
-1);

66 
mem_addr_t
 
∑ge
 = 
cuºít_addr
 >> 
m_log2_block_size
;

67 
mem_addr_t
 
ac˚ss_limô
 = 
off£t
 + 
nbyãs_ªmaö
;

68 i‡(
ac˚ss_limô
 > 
BSIZE
) {

69 
ac˚ss_limô
 = 
BSIZE
;

72 
size_t
 
tx_byãs
 = 
ac˚ss_limô
 - 
off£t
;

73 
m_d©a
[
∑ge
].
	`wrôe
(
off£t
, 
tx_byãs
, &((c⁄° *)
d©a
)[
§c_off£t
]);

76 
§c_off£t
 +
tx_byãs
;

77 
cuºít_addr
 +
tx_byãs
;

78 
nbyãs_ªmaö
 -
tx_byãs
;

80 
	`as£π
(
nbyãs_ªmaö
 == 0);

82 if–!
m_w©chpoöts
.
	`em±y
() ) {

83 
°d
::
m≠
<,
mem_addr_t
>::
ôî©‹
 
i
;

84  
i
=
m_w©chpoöts
.
	`begö
(); i!=m_w©chpoöts.
	`íd
(); i++ ) {

85 
mem_addr_t
 
wa
 = 
i
->
£c⁄d
;

86 if–((
addr
<=
wa
Ë&& (◊ddr+
Àngth
)>wa)) || ((addr>wa) && (addr < (wa+4))) )

87 
	`hô_w©chpoöt
(
i
->
fú°
,
thd
,
pI
);

91 
	`±hªad_muãx_u∆ock
(&
kaö_fuck
);

92 
	}
}

94 
	gãm∂©e
<
	gBSIZE
> 
	gmem‹y_•a˚_im∂
<BSIZE>::
	$ªad_sögÀ_block
–
mem_addr_t
 
blk_idx
, mem_addr_à
addr
, 
size_t
 
Àngth
, *
d©a
) const

96 i‡((
addr
 + 
Àngth
Ë> (
blk_idx
 + 1Ë* 
BSIZE
) {

97 
	`¥ötf
("GPGPU-Sim PTX: ERROR *áccessÅo memory \'%s\' is unaligned :áddr=0x%x,Üength=%zu\n",

98 
m_«me
.
	`c_°r
(), 
addr
, 
Àngth
);

99 
	`¥ötf
("GPGPU-Sim PTX: (addr+length)=0x%lx > 0x%x=(index+1)*BSIZE, index=0x%x, BSIZE=0x%x\n",

100 (
addr
+
Àngth
),(
blk_idx
+1)*
BSIZE
, blk_idx, BSIZE);

101 
throw
 1;

103 
ty≥«me
 
m≠_t
::
c⁄°_ôî©‹
 
i
 = 
m_d©a
.
	`föd
(
blk_idx
);

104 if–
i
 =
m_d©a
.
	`íd
() ) {

105  
size_t
 
n
=0;Ç < 
Àngth
;Ç++ )

106 ((*)
d©a
)[
n
] = () 0;

109 
off£t
 = 
addr
 & (
BSIZE
-1);

110 
nbyãs
 = 
Àngth
;

111 
i
->
£c⁄d
.
	`ªad
(
off£t
,
nbyãs
,(*)
d©a
);

113 
	}
}

115 
	gãm∂©e
<
	gBSIZE
> 
	gmem‹y_•a˚_im∂
<BSIZE>::
	$ªad
–
mem_addr_t
 
addr
, 
size_t
 
Àngth
, *
d©a
 ) const

120 
mem_addr_t
 
ödex
 = 
addr
 >> 
m_log2_block_size
;

121 i‡((
addr
+
Àngth
Ë<(
ödex
+1)*
BSIZE
 ) {

123 
	`ªad_sögÀ_block
(
ödex
, 
addr
, 
Àngth
, 
d©a
);

126 
nbyãs_ªmaö
 = 
Àngth
;

127 
d°_off£t
 = 0;

128 
mem_addr_t
 
cuºít_addr
 = 
addr
;

130 
nbyãs_ªmaö
 > 0) {

131 
off£t
 = 
cuºít_addr
 & (
BSIZE
-1);

132 
mem_addr_t
 
∑ge
 = 
cuºít_addr
 >> 
m_log2_block_size
;

133 
mem_addr_t
 
ac˚ss_limô
 = 
off£t
 + 
nbyãs_ªmaö
;

134 i‡(
ac˚ss_limô
 > 
BSIZE
) {

135 
ac˚ss_limô
 = 
BSIZE
;

138 
size_t
 
tx_byãs
 = 
ac˚ss_limô
 - 
off£t
;

139 
	`ªad_sögÀ_block
(
∑ge
, 
cuºít_addr
, 
tx_byãs
, &((*)
d©a
)[
d°_off£t
]);

142 
d°_off£t
 +
tx_byãs
;

143 
cuºít_addr
 +
tx_byãs
;

144 
nbyãs_ªmaö
 -
tx_byãs
;

146 
	`as£π
(
nbyãs_ªmaö
 == 0);

150 
	}
}

152 
	gãm∂©e
<
	gBSIZE
> 
	gmem‹y_•a˚_im∂
<BSIZE>::
	$¥öt
–c⁄° *
f‹m©
, 
FILE
 *
fout
 ) const

154 
ty≥«me
 
m≠_t
::
c⁄°_ôî©‹
 
i_∑ge
;

155 
i_∑ge
 = 
m_d©a
.
	`begö
(); i_∑gê!m_d©a.
	`íd
(); ++i_page) {

156 
	`Ârötf
(
fout
, "%†- %#x:", 
m_«me
.
	`c_°r
(), 
i_∑ge
->
fú°
);

157 
i_∑ge
->
£c⁄d
.
	`¥öt
(
f‹m©
, 
fout
);

159 
	}
}

161 
	gãm∂©e
<
	gBSIZE
> 
	gmem‹y_•a˚_im∂
<BSIZE>::
	$£t_w©ch
–
addr_t
 
addr
, 
w©chpoöt
 )

163 
m_w©chpoöts
[
w©chpoöt
]=
addr
;

164 
	}
}

166 
ãm∂©e
 
˛ass
 
	gmem‹y_•a˚_im∂
<32>;

167 
ãm∂©e
 
˛ass
 
	gmem‹y_•a˚_im∂
<64>;

168 
ãm∂©e
 
˛ass
 
	gmem‹y_•a˚_im∂
<8192>;

169 
ãm∂©e
 
˛ass
 
	gmem‹y_•a˚_im∂
<16*1024>;

171 
g_¥öt_mem‹y_•a˚
(
mem‹y_•a˚
 *
mem
, c⁄° *
f‹m©
 = "%08x", 
FILE
 *
fout
 = 
°dout
)

173 
mem
->
¥öt
(
f‹m©
,
fout
);

176 #ifde‡
UNIT_TEST


178 
	$maö
(
¨gc
, *
¨gv
[] )

180 
îr‹s_found
=0;

181 
mem‹y_•a˚
 *
mem
 = 
√w
 
mem‹y_•a˚_im∂
<32>("test",4);

183  
mem_addr_t
 
addr
=0;áddr < 16*1024;áddr+=4)

184 
mem
->
	`wrôe
(
addr
,4,&addr,
NULL
,NULL);

186  
mem_addr_t
 
addr
=0;áddr < 16*1024;áddr+=4) {

187 
tmp
=0;

188 
mem
->
	`ªad
(
addr
,4,&
tmp
);

189 if–
tmp
 !
addr
 ) {

190 
îr‹s_found
=1;

191 
	`¥ötf
("ERROR ** mem[0x%x] = 0x%x,Éx≥˘ed 0x%x\n", 
addr
, 
tmp
,áddr );

195  
mem_addr_t
 
addr
=0;áddr < 16*1024;áddr+=1) {

196 
vÆ
 = (
addr
 + 128) % 256;

197 
mem
->
	`wrôe
(
addr
,1,&
vÆ
,
NULL
,NULL);

200  
mem_addr_t
 
addr
=0;áddr < 16*1024;áddr+=1) {

201 
tmp
=0;

202 
mem
->
	`ªad
(
addr
,1,&
tmp
);

203 
vÆ
 = (
addr
 + 128) % 256;

204 if–
tmp
 !
vÆ
 ) {

205 
îr‹s_found
=1;

206 
	`¥ötf
("ERROR ** mem[0x%x] = 0x%x,Éx≥˘ed 0x%x\n", 
addr
, 
tmp
, ()
vÆ
 );

210 if–
îr‹s_found
 ) {

211 
	`¥ötf
("SUMMARY: ERRORS FOUND\n");

213 
	`¥ötf
("SUMMARY: UNIT TEST PASSED\n");

215 
	}
}

	@src/cuda-sim/memory.h

28 #i‚de‡
mem‹y_h_INCLUDED


29 
	#mem‹y_h_INCLUDED


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

33 #ifde‡
__GNUC__


34 #i‡
__GNUC__
 >4 && 
__GNUC_MINOR__
 >= 3

35 
	~<un‹dîed_m≠
>

36 
	#mem_m≠
 
°d
::
un‹dîed_m≠


	)

37 
	#MEM_MAP_RESIZE
(
hash_size
Ë
m_d©a
.
	`ªhash
(hash_size)

	)

39 
	~<ext/hash_m≠
>

40 
«me•a˚
 
	g°d
 {

41 
usög
 
«me•a˚
 
	g__gnu_cxx
;

43 
	#mem_m≠
 
°d
::
hash_m≠


	)

44 
	#MEM_MAP_RESIZE
(
hash_size
Ë
m_d©a
.
	`ªsize
(hash_size)

	)

47 
	~<m≠
>

48 
	#mem_m≠
 
°d
::
m≠


	)

49 
	#MEM_MAP_RESIZE
(
hash_size
)

	)

52 
	~<as£π.h
>

53 
	~<°rög.h
>

54 
	~<°dio.h
>

55 
	~<°rög
>

56 
	~<m≠
>

57 
	~<°dlib.h
>

59 
addªss_ty≥
 
	tmem_addr_t
;

61 
	#MEM_BLOCK_SIZE
 (4*1024)

	)

63 
	gãm∂©e
<
	gBSIZE
> cœs†
	cmem_°‹age
 {

64 
	mpublic
:

65 
	$mem_°‹age
–c⁄° 
mem_°‹age
 &
™Ÿhî
 )

67 
m_d©a
 = (*)
	`ˇŒoc
(1,
BSIZE
);

68 
	`mem˝y
(
m_d©a
,
™Ÿhî
.m_d©a,
BSIZE
);

70 
	$mem_°‹age
()

72 
m_d©a
 = (*)
	`ˇŒoc
(1,
BSIZE
);

73 
	}
}

74 ~
	$mem_°‹age
()

76 
	`‰ì
(
m_d©a
);

77 
	}
}

79 
	$wrôe
–
off£t
, 
size_t
 
Àngth
, c⁄° *
d©a
 )

81 
	`as£π
–
off£t
 + 
Àngth
 <
BSIZE
 );

82 
	`mem˝y
(
m_d©a
+
off£t
,
d©a
,
Àngth
);

83 
	}
}

85 
	$ªad
–
off£t
, 
size_t
 
Àngth
, *
d©a
 ) const

87 
	`as£π
–
off£t
 + 
Àngth
 <
BSIZE
 );

88 
	`mem˝y
(
d©a
,
m_d©a
+
off£t
,
Àngth
);

89 
	}
}

91 
	$¥öt
–c⁄° *
f‹m©
, 
FILE
 *
fout
 ) const

93 *
i_d©a
 = (*)
m_d©a
;

94 
d
 = 0; d < (
BSIZE
 / ()); d++) {

95 i‡(
d
 % 8 == 0) {

96 
	`Ârötf
(
fout
, "\n");

98 
	`Ârötf
(
fout
, 
f‹m©
, 
i_d©a
[
d
]);

99 
	`Ârötf
(
fout
, " ");

101 
	`Ârötf
(
fout
, "\n");

102 
	`fÊush
(
fout
);

103 
	}
}

105 
	g¥iv©e
:

106 
m_nbyãs
;

107 *
	gm_d©a
;

110 
˛ass
 
	g±x_thªad_öfo
;

111 
˛ass
 
	g±x_ö°ru˘i⁄
;

113 ˛as†
	cmem‹y_•a˚


115 
	mpublic
:

116 
vútuÆ
 ~
	$mem‹y_•a˚
() {}

117 
vútuÆ
 
	`wrôe
–
mem_addr_t
 
addr
, 
size_t
 
Àngth
, c⁄° *
d©a
, 
±x_thªad_öfo
 *
thd
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
 ) = 0;

118 
vútuÆ
 
	$ªad
–
mem_addr_t
 
addr
, 
size_t
 
Àngth
, *
d©a
 ) const = 0;

119 
vútuÆ
 
	$¥öt
–c⁄° *
f‹m©
, 
FILE
 *
fout
 ) const = 0;

120 
vútuÆ
 
	`£t_w©ch
–
addr_t
 
addr
, 
w©chpoöt
 ) = 0;

121 
	}
};

123 
	gãm∂©e
<
	gBSIZE
> cœs†
	cmem‹y_•a˚_im∂
 : 
public
 
mem‹y_•a˚
 {

124 
public
:

125 
mem‹y_•a˚_im∂
–
°d
::
°rög
 
«me
, 
hash_size
 );

127 
vútuÆ
 
wrôe
–
mem_addr_t
 
addr
, 
size_t
 
Àngth
, c⁄° *
d©a
, 
±x_thªad_öfo
 *
thd
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
 );

128 
vútuÆ
 
	$ªad
–
mem_addr_t
 
addr
, 
size_t
 
Àngth
, *
d©a
 ) const;

129 
vútuÆ
 
	$¥öt
–c⁄° *
f‹m©
, 
FILE
 *
fout
 ) const;

130 
vútuÆ
 
	`£t_w©ch
–
addr_t
 
addr
, 
w©chpoöt
 );

132 
¥iv©e
:

133 
	$ªad_sögÀ_block
–
mem_addr_t
 
blk_idx
, mem_addr_à
addr
, 
size_t
 
Àngth
, *
d©a
) const;

134 
°d
::
°rög
 
m_«me
;

135 
m_log2_block_size
;

136 
mem_m≠
<
	tmem_addr_t
,
	tmem_°‹age
<
	tBSIZE
> > 
	tm≠_t
;

137 
m≠_t
 
m_d©a
;

138 
°d
::
m≠
<,
mem_addr_t
> 
m_w©chpoöts
;

	@src/cuda-sim/opcodes.h

28 #i‚de‡
›codes_h_ö˛uded


29 
	#›codes_h_ö˛uded


	)

31 
	e›code_t
 {

32 
	#OP_DEF
(
OP
,
FUNC
,
STR
,
DST
,
CLASSIFICATION
ËOP,

	)

33 
	~"›codes.def
"

34 
	mNUM_OPCODES


35 #unde‡
OP_DEF


38 
	e•ecül_ªgs
 {

39 
	mCLOCK_REG
,

40 
	mHALFCLOCK_ID
,

41 
	mCLOCK64_REG
,

42 
	mCTAID_REG
,

43 
	mENVREG_REG
,

44 
	mGRIDID_REG
,

45 
	mLANEID_REG
,

46 
	mLANEMASK_EQ_REG
,

47 
	mLANEMASK_LE_REG
,

48 
	mLANEMASK_LT_REG
,

49 
	mLANEMASK_GE_REG
,

50 
	mLANEMASK_GT_REG
,

51 
	mNCTAID_REG
,

52 
	mNTID_REG
,

53 
	mNSMID_REG
,

54 
	mNWARPID_REG
,

55 
	mPM_REG
,

56 
	mSMID_REG
,

57 
	mTID_REG
,

58 
	mWARPID_REG
,

59 
	mWARPSZ_REG


	@src/cuda-sim/ptx-stats.cc

28 
	~"±x_ú.h
"

29 
	~"±x_sim.h
"

30 
	~"±x-°©s.h
"

31 
	~"../›ti⁄_∑r£r.h
"

32 
	~<°dio.h
>

33 
	~<m≠
>

34 
	~"../å1_hash_m≠.h
"

37 
boﬁ
 
	gíabÀ_±x_fûe_löe_°©s
;

38 * 
	g±x_löe_°©s_fûíame
 = 
NULL
;

40 
	$±x_fûe_löe_°©s_›ti⁄s
(
›ti⁄_∑r£r_t
 
›p
)

42 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-íabÀ_±x_fûe_löe_°©s", 
OPT_BOOL
,

43 &
íabÀ_±x_fûe_löe_°©s
,

45 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-±x_löe_°©s_fûíame", 
OPT_CSTR
,

46 &
±x_löe_°©s_fûíame
,

48 
	}
}

53 ˛as†
	c±x_fûe_löe


55 
	mpublic
:

56 
	$±x_fûe_löe
(c⁄° * 
s
, 
l
) {

57 if–
s
 =
NULL
 )

58 
°
 = "NULL_NAME";

60 
°
 = 
s
;

61 
löe
 = 
l
;

64 
boﬁ
 
›î©‹
<(c⁄° 
±x_fûe_löe
 &
Ÿhî
) const {

65 if–
°
 =
Ÿhî
.st ) {

66 if–
löe
 < 
Ÿhî
.line )

67  
åue
;

69  
Ál£
;

71  
°
 < 
Ÿhî
.st;

73 
	}
}

75 
boﬁ
 
	g›î©‹
==(c⁄° 
±x_fûe_löe
 &
Ÿhî
) const {

76  (
löe
==
Ÿhî
.löeË&& (
°
==other.st);

79 
	g°d
::
°rög
 
°
;

80 
	glöe
;

83 
	shash_±x_fûe_löe


85 
	m°d
::
size_t
 
›î©‹
()(c⁄° 
±x_fûe_löe
 & 
pÊöe
) const {

86 
°d
::
hash
<> 
hash_löe
;

87  
hash_löe
(
pÊöe
.
löe
);

92 ˛as†
	c±x_fûe_löe_°©s


94 
	mpublic
:

95 
	$±x_fûe_löe_°©s
()

96 : 
	`exec_cou¡
(0), 
	`œãncy
(0), 
	`døm_åaffic
(0),

97 
	`smem_n_way_b™k_c⁄Êi˘_tŸÆ
(0), 
	`smem_w¨p_cou¡
(0),

98 
	`gmem_n_ac˚ss_tŸÆ
(0), 
	`gmem_w¨p_cou¡
(0), 
	`expo£d_œãncy
(0),

99 
	$w¨p_divîgí˚
(0)

102 
exec_cou¡
;

103 
œãncy
;

104 
døm_åaffic
;

105 
smem_n_way_b™k_c⁄Êi˘_tŸÆ
;

106 
smem_w¨p_cou¡
;

107 
gmem_n_ac˚ss_tŸÆ
;

108 
gmem_w¨p_cou¡
;

109 
expo£d_œãncy
;

110 
w¨p_divîgí˚
;

111 
	}
};

113 #i‡(
å1_hash_m≠_ism≠
 == 1)

114 
	gå1_hash_m≠
<
	t±x_fûe_löe
, 
	t±x_fûe_löe_°©s
> 
	t±x_fûe_löe_°©s_m≠_t
;

116 
	gå1_hash_m≠
<
	t±x_fûe_löe
, 
	t±x_fûe_löe_°©s
, 
	thash_±x_fûe_löe
> 
	t±x_fûe_löe_°©s_m≠_t
;

119 
±x_fûe_löe_°©s_m≠_t
 
	g±x_fûe_löe_°©s_åackî
;

122 
	$±x_fûe_löe_°©s_wrôe_fûe
()

125 i‡(
íabÀ_±x_fûe_löe_°©s
 == 0) ;

127 
±x_fûe_löe_°©s_m≠_t
::
ôî©‹
 
ô
;

128 
FILE
 * 
pfûe
;

130 
pfûe
 = 
	`f›í
(
±x_löe_°©s_fûíame
, "w");

131 
	`Ârötf
(
pfûe
,"kernelÜine : countÜatency dram_traffic smem_bk_conflicts smem_warp gmem_access_generated gmem_warpÉxposed_latency warp_divergence\n");

132  
ô
=
±x_fûe_löe_°©s_åackî
.
	`begö
(); ià!±x_fûe_löe_°©s_åackî.
	`íd
(); it++ ) {

133 
	`Ârötf
(
pfûe
, "%†%ò: ", 
ô
->
fú°
.
°
.
	`c_°r
(), it->fú°.
löe
);

134 
	`Ârötf
(
pfûe
, "%lu ", 
ô
->
£c⁄d
.
exec_cou¡
);

135 
	`Ârötf
(
pfûe
, "%Œu ", 
ô
->
£c⁄d
.
œãncy
);

136 
	`Ârötf
(
pfûe
, "%Œu ", 
ô
->
£c⁄d
.
døm_åaffic
);

137 
	`Ârötf
(
pfûe
, "%Œu ", 
ô
->
£c⁄d
.
smem_n_way_b™k_c⁄Êi˘_tŸÆ
);

138 
	`Ârötf
(
pfûe
, "%lu ", 
ô
->
£c⁄d
.
smem_w¨p_cou¡
);

139 
	`Ârötf
(
pfûe
, "%Œu ", 
ô
->
£c⁄d
.
gmem_n_ac˚ss_tŸÆ
);

140 
	`Ârötf
(
pfûe
, "%lu ", 
ô
->
£c⁄d
.
gmem_w¨p_cou¡
);

141 
	`Ârötf
(
pfûe
, "%Œu ", 
ô
->
£c⁄d
.
expo£d_œãncy
);

142 
	`Ârötf
(
pfûe
, "%Œu ", 
ô
->
£c⁄d
.
w¨p_divîgí˚
);

143 
	`Ârötf
(
pfûe
, "\n");

145 
	`fÊush
(
pfûe
);

146 
	`f˛o£
(
pfûe
);

147 
	}
}

151 
	$±x_fûe_löe_°©s_add_exec_cou¡
(c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
)

153 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())].
exec_cou¡
 += 1;

154 
	}
}

158 
	$±x_fûe_löe_°©s_add_œãncy
(
pc
, 
œãncy
)

160 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

162 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())].
œãncy
 +=Üatency;

163 
	}
}

167 
	$±x_fûe_löe_°©s_add_døm_åaffic
(
pc
, 
døm_åaffic
)

169 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

171 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())].
døm_åaffic
 += dram_traffic;

172 
	}
}

176 
	$±x_fûe_löe_°©s_add_smem_b™k_c⁄Êi˘
(
pc
, 
n_way_bkc⁄Êi˘
)

178 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

180 
±x_fûe_löe_°©s
& 
löe_°©s
 = 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())];

181 
löe_°©s
.
smem_n_way_b™k_c⁄Êi˘_tŸÆ
 +
n_way_bkc⁄Êi˘
;

182 
löe_°©s
.
smem_w¨p_cou¡
 += 1;

183 
	}
}

187 
	$±x_fûe_löe_°©s_add_uncﬂÀs˚d_gmem
(
pc
, 
n_ac˚ss
)

189 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

191 
±x_fûe_löe_°©s
& 
löe_°©s
 = 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())];

192 
löe_°©s
.
gmem_n_ac˚ss_tŸÆ
 +
n_ac˚ss
;

193 
löe_°©s
.
gmem_w¨p_cou¡
 += 1;

194 
	}
}

198 ˛as†
	c±x_öÊight_mem‹y_ö¢_åackî


200 
	mpublic
:

201 
°d
::
	tm≠
<c⁄° 
	t±x_ö°ru˘i⁄
 *, > 
	tö¢_cou¡_m≠
;

203 
	$add_cou¡
(c⁄° 
±x_ö°ru˘i⁄
 * 
pIn¢
, 
cou¡
 = 1)

205 
±x_öÊight_mem‹y_ö¢s
[
pIn¢
] +
cou¡
;

208 
	$sub_cou¡
(c⁄° 
±x_ö°ru˘i⁄
 * 
pIn¢
, 
cou¡
 = 1)

210 
ö¢_cou¡_m≠
::
ôî©‹
 
i_ö¢cou¡
;

211 
i_ö¢cou¡
 = 
±x_öÊight_mem‹y_ö¢s
.
	`föd
(
pIn¢
);

213 
	`as£π
(
i_ö¢cou¡
 !
±x_öÊight_mem‹y_ö¢s
.
	`íd
());

215 
i_ö¢cou¡
->
£c⁄d
 -
cou¡
;

217 i‡(
i_ö¢cou¡
->
£c⁄d
 <= 0) {

218 
±x_öÊight_mem‹y_ö¢s
.
	`îa£
(
i_ö¢cou¡
);

220 
	}
}

222 
	$©åibuã_expo£d_œãncy
(
cou¡
 = 1)

224 
ö¢_cou¡_m≠
 &
exœt_ö¢m≠
 = 
±x_öÊight_mem‹y_ö¢s
;

225 
ö¢_cou¡_m≠
::
c⁄°_ôî©‹
 
i_exœtö¢
;

227 
i_exœtö¢
 = 
exœt_ö¢m≠
.
	`begö
();

228 ; 
i_exœtö¢
 !
exœt_ö¢m≠
.
	`íd
(); ++i_exlatinsn) {

229 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
i_exœtö¢
->
fú°
;

230 
±x_fûe_löe_°©s
& 
löe_°©s
 = 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())];

231 
löe_°©s
.
expo£d_œãncy
 +
cou¡
;

233 
	}
}

235 
ö¢_cou¡_m≠
 
	g±x_öÊight_mem‹y_ö¢s
;

238 
±x_öÊight_mem‹y_ö¢_åackî
 *
	göÊight_mem_åackî
 = 
NULL
;

240 
	$±x_fûe_löe_°©s_¸óã_expo£d_œãncy_åackî
(
n_shadî_c‹es
)

242 
öÊight_mem_åackî
 = 
√w
 
±x_öÊight_mem‹y_ö¢_åackî
[
n_shadî_c‹es
];

243 
	}
}

246 
	$±x_fûe_löe_°©s_add_öÊight_mem‹y_ö¢
(
sc_id
, 
pc
)

248 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

250 
öÊight_mem_åackî
[
sc_id
].
	`add_cou¡
(
pIn¢
);

251 
	}
}

254 
	$±x_fûe_löe_°©s_sub_öÊight_mem‹y_ö¢
(
sc_id
, 
pc
)

256 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

258 
öÊight_mem_åackî
[
sc_id
].
	`sub_cou¡
(
pIn¢
);

259 
	}
}

262 
	$±x_fûe_löe_°©s_commô_expo£d_œãncy
(
sc_id
, 
expo£d_œãncy
)

264 
	`as£π
(
expo£d_œãncy
 > 0);

265 
öÊight_mem_åackî
[
sc_id
].
	`©åibuã_expo£d_œãncy
(
expo£d_œãncy
);

266 
	}
}

269 
	$±x_fûe_löe_°©s_add_w¨p_divîgí˚
(
pc
, 
n_way_divîgí˚
)

271 c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
 = 
fun˘i⁄_öfo
::
	`pc_to_ö°ru˘i⁄
(
pc
);

273 
±x_fûe_löe_°©s
& 
löe_°©s
 = 
±x_fûe_löe_°©s_åackî
[
	`±x_fûe_löe
(
pIn¢
->
	`sour˚_fûe
(),ÖIn¢->
	`sour˚_löe
())];

274 
löe_°©s
.
w¨p_divîgí˚
 +
n_way_divîgí˚
;

275 
	}
}

	@src/cuda-sim/ptx-stats.h

28 #¥agm®
⁄˚


30 
	~"../›ti⁄_∑r£r.h
"

32 
boﬁ
 
íabÀ_±x_fûe_löe_°©s
;

35 
±x_fûe_löe_°©s_›ti⁄s
(
›ti⁄_∑r£r_t
 
›p
);

38 
±x_fûe_löe_°©s_wrôe_fûe
();

40 #ifde‡
__˝lu•lus


42 
˛ass
 
	g±x_ö°ru˘i⁄
;

43 
±x_fûe_löe_°©s_add_exec_cou¡
(c⁄° 
±x_ö°ru˘i⁄
 *
pIn¢
);

47 
±x_fûe_löe_°©s_add_œãncy
(
pc
, 
œãncy
);

48 
±x_fûe_löe_°©s_add_døm_åaffic
(
pc
, 
døm_åaffic
);

49 
±x_fûe_löe_°©s_add_smem_b™k_c⁄Êi˘
(
pc
, 
n_way_bkc⁄Êi˘
);

50 
±x_fûe_löe_°©s_add_uncﬂÀs˚d_gmem
(
pc
, 
n_ac˚ss
);

52 
±x_fûe_löe_°©s_¸óã_expo£d_œãncy_åackî
(
n_shadî_c‹es
);

53 
±x_fûe_löe_°©s_add_öÊight_mem‹y_ö¢
(
sc_id
, 
pc
);

54 
±x_fûe_löe_°©s_sub_öÊight_mem‹y_ö¢
(
sc_id
, 
pc
);

55 
±x_fûe_löe_°©s_commô_expo£d_œãncy
(
sc_id
, 
expo£d_œãncy
);

57 
±x_fûe_löe_°©s_add_w¨p_divîgí˚
(
pc
, 
n_way_divîgí˚
);

	@src/cuda-sim/ptx.l

30 %
›ti⁄
 
nou≈ut


31 %
›ti⁄
 
noyywøp


32 %
›ti⁄
 
yylöío


33 %
›ti⁄
 
¥efix
="ptx_"

35 
	~"›codes.h
"

36 
	~"±x.èb.h
"

37 
	~<°rög.h
>

39 
	glöebuf
[1024];

40 
	gcﬁ
 = 0;

41 
	#TC
 
cﬁ
+=
	`°æí
(
±x_ãxt
);

	)

42 
	#CHECK_UNSIGNED
 \

	)

43 if–
	gyyãxt
[
°æí
(
yyãxt
)-1]=='U' ) { \

44 
¥ötf
("GPGPU-Sim: ERROR ** U modifierÇot implemented\n"); \

45 
ab‹t
(); \

47 
±x_îr‹
–c⁄° *
s
 );

50 %
s
 
IN_STRING


51 %
s
 
IN_COMMENT


52 %
x
 
NOT_OPCODE


53 %% /* 
	$yyÀx
 */

55 
abs
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ABS_OP
;  
OPCODE
;

56 
add
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ADD_OP
;  
OPCODE
;

57 
addp
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ADDP_OP
;  
OPCODE
;

58 
addc
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ADDC_OP
;  
OPCODE
;

59 
™d
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
AND_OP
;  
OPCODE
;

60 
™dn
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ANDN_OP
;  
OPCODE
;

61 
©om
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ATOM_OP
;  
OPCODE
;

62 
b¨
.
sync
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BAR_OP
;  
OPCODE
;

63 
b„
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BFE_OP
;  
OPCODE
;

64 
bfi
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BFI_OP
;  
OPCODE
;

65 
bföd
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BFIND_OP
;  
OPCODE
;

66 
bø
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BRA_OP
;  
OPCODE
;

67 
bªv
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BREV_OP
;  
OPCODE
;

68 
brk±
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BRKPT_OP
;  
OPCODE
;

69 
ˇŒ
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CALL_OP
;  
OPCODE
;

70 
ˇŒp
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CALLP_OP
;  
OPCODE
;

71 
˛z
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CLZ_OP
;  
OPCODE
;

72 
˙Ÿ
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CNOT_OP
;  
OPCODE
;

73 
cos
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
COS_OP
;  
OPCODE
;

74 
cvt
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CVT_OP
;  
OPCODE
;

75 
cvè
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CVTA_OP
;  
OPCODE
;

76 
div
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
DIV_OP
;  
OPCODE
;

77 
ex2
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
EX2_OP
;  
OPCODE
;

78 
exô
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
EXIT_OP
;  
OPCODE
;

79 
fma
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
FMA_OP
;  
OPCODE
;

80 
is•a˚p
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ISSPACEP_OP
;  
OPCODE
;

81 
ld
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LD_OP
;  
OPCODE
;

82 
ld
.vﬁ©ûê
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LD_OP
;  
OPCODE
;

83 
ldu
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LDU_OP
;  
OPCODE
;

84 
lg2
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LG2_OP
;  
OPCODE
;

85 
mad24
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MAD24_OP
;  
OPCODE
;

86 
mad
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MAD_OP
;  
OPCODE
;

87 
max
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MAX_OP
;  
OPCODE
;

88 
memb¨
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MEMBAR_OP
;  
OPCODE
;

89 
mö
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MIN_OP
;  
OPCODE
;

90 
mov
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MOV_OP
;  
OPCODE
;

91 
mul24
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MUL24_OP
;  
OPCODE
;

92 
mul
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
MUL_OP
;  
OPCODE
;

93 
√g
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NEG_OP
;  
OPCODE
;

94 
«ndn
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NANDN_OP
;  
OPCODE
;

95 
n‹n
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NORN_OP
;  
OPCODE
;

96 
nŸ
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NOT_OP
;  
OPCODE
;

97 
‹
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
OR_OP
;  
OPCODE
;

98 
‹n
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ORN_OP
;  
OPCODE
;

99 
pmevít
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
PMEVENT_OP
;  
OPCODE
;

100 
p›c
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
POPC_OP
;  
OPCODE
;

101 
¥e„tch
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
PREFETCH_OP
;  
OPCODE
;

102 
¥e„tchu
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
PREFETCHU_OP
;  
OPCODE
;

103 
¥mt
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
PRMT_OP
;  
OPCODE
;

104 
r˝
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
RCP_OP
;  
OPCODE
;

105 
ªd
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
RED_OP
;  
OPCODE
;

106 
ªm
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
REM_OP
;  
OPCODE
;

107 
ªt
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
RET_OP
;  
OPCODE
;

108 
ªç
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
RETP_OP
;  
OPCODE
;

109 
rsqπ
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
RSQRT_OP
;  
OPCODE
;

110 
ßd
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SAD_OP
;  
OPCODE
;

111 
£Õ
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SELP_OP
;  
OPCODE
;

112 
£ç
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SETP_OP
;  
OPCODE
;

113 
£t
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SET_OP
;  
OPCODE
;

114 
shl
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SHL_OP
;  
OPCODE
;

115 
shr
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SHR_OP
;  
OPCODE
;

116 
sö
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SIN_OP
;  
OPCODE
;

117 
¶˘
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SLCT_OP
;  
OPCODE
;

118 
sqπ
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SQRT_OP
;  
OPCODE
;

119 
°
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ST_OP
;  
OPCODE
;

120 
°
.vﬁ©ûê
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
ST_OP
;  
OPCODE
;

121 
sub
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SUB_OP
;  
OPCODE
;

122 
subc
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SUBC_OP
;  
OPCODE
;

123 
suld
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SULD_OP
;  
OPCODE
;

124 
suªd
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SURED_OP
;  
OPCODE
;

125 
sur°
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SUST_OP
;  
OPCODE
;

126 
suq
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SUQ_OP
;  
OPCODE
;

127 
ãx
 
TC
; 
	`BEGIN
(
NOT_OPCODE
); 
±x_lvÆ
.
öt_vÆue
 = 
TEX_OP
;  
OPCODE
;

128 
txq
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
TEX_OP
;  
OPCODE
;

129 
å≠
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
TRAP_OP
;  
OPCODE
;

130 
vabsdiff
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VABSDIFF_OP
;  
OPCODE
;

131 
vadd
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VADD_OP
;  
OPCODE
;

132 
vmad
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VMAD_OP
;  
OPCODE
;

133 
vmax
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VMAX_OP
;  
OPCODE
;

134 
vmö
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VMIN_OP
;  
OPCODE
;

135 
v£t
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VSET_OP
;  
OPCODE
;

136 
vshl
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VSHL_OP
;  
OPCODE
;

137 
vshr
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VSHR_OP
;  
OPCODE
;

138 
vsub
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VSUB_OP
;  
OPCODE
;

139 
vŸe
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
VOTE_OP
;  
OPCODE
;

140 
x‹
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
XOR_OP
;  
OPCODE
;

141 
n›
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NOP_OP
;  
OPCODE
;

142  
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BREAK_OP
;  
OPCODE
;

143 
bªakaddr
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
BREAKADDR_OP
;  
OPCODE
;

145 <
INITIAL
,
NOT_OPCODE
>{

147 \.
Æign
 
TC
;  
ALIGN_DIRECTIVE
;

148 \.
bønchèrgës
 
TC
;  
BRANCHTARGETS_DIRECTIVE
;

149 \.
byã
 
TC
;  
BYTE_DIRECTIVE
;

150 \.
ˇŒ¥ŸŸy≥
 
TC
;  
CALLPROTOTYPE_DIRECTIVE
;

151 \.
ˇŒèrgës
 
TC
;  
CALLTARGETS_DIRECTIVE
;

152 \.c⁄°\[[0-9]+\] 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
	`©oi
(
yyãxt
+7);  
CONST_DIRECTIVE
;

153 \.c⁄° 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 0;  
CONST_DIRECTIVE
;

154 \.
íåy
 
TC
;  
ENTRY_DIRECTIVE
;

155 \.
TC
;  
EXTERN_DIRECTIVE
;

156 \.
fûe
 
TC
; 
	`BEGIN
(
INITIAL
);  
FILE_DIRECTIVE
;

157 \.
func
 
TC
; 
	`BEGIN
(
NOT_OPCODE
);  
FUNC_DIRECTIVE
;

158 \.
globÆ
 
TC
;  
GLOBAL_DIRECTIVE
;

159 \.
loˇl
 
TC
;  
LOCAL_DIRECTIVE
;

160 \.
loc
 
TC
;  
LOC_DIRECTIVE
;

161 \.
maxn˘≠îsm
 
TC
;  
MAXNCTAPERSM_DIRECTIVE
;

162 \.
maxƒeg
 
TC
;  
MAXNNREG_DIRECTIVE
;

163 \.
max¡id
 
TC
;  
MAXNTID_DIRECTIVE
;

164 \.
mön˘≠îsm
 
TC
;  
MINNCTAPERSM_DIRECTIVE
;

165 \.
∑øm
 
TC
;  
PARAM_DIRECTIVE
;

166 \.
¥agma
 
TC
;  
PRAGMA_DIRECTIVE
;

167 \.
ªg
 
TC
;  
REG_DIRECTIVE
;

168 \.
ªq¡id
 
TC
;  
REQNTID_DIRECTIVE
;

169 \.
£˘i⁄
 
TC
;  
SECTION_DIRECTIVE
;

170 \.
sh¨ed
 
TC
;  
SHARED_DIRECTIVE
;

171 \.
§eg
 
TC
;  
SREG_DIRECTIVE
;

172 \.
TC
;  
STRUCT_DIRECTIVE
;

173 \.
surf
 
TC
;  
SURF_DIRECTIVE
;

174 \.
èrgë
 
TC
;  
TARGET_DIRECTIVE
;

175 \.
ãx
 
TC
; 
	`BEGIN
(
NOT_OPCODE
);  
TEX_DIRECTIVE
;

176 \.
TC
;  
UNION_DIRECTIVE
;

177 \.
vîsi⁄
 
TC
;  
VERSION_DIRECTIVE
;

178 \.
visibÀ
 
TC
;  
VISIBLE_DIRECTIVE
;

179 \.
addªss_size
 
TC
;  
ADDRESS_SIZE_DIRECTIVE
;

181 \.
c⁄°±r
 
TC
;  
CONSTPTR_DIRECTIVE
;

184 "%˛ock" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CLOCK_REG
;  
SPECIAL_REGISTER
;

185 "%hÆf˛ock" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
HALFCLOCK_ID
;  
SPECIAL_REGISTER
;

186 "%˛ock64" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CLOCK64_REG
;  
SPECIAL_REGISTER
;

187 "%˘aid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
CTAID_REG
;  
SPECIAL_REGISTER
;

188 "%ívªg"[0-9]+ 
TC
; 
	`ssˇnf
(
yyãxt
+7,"%u",&
±x_lvÆ
.
öt_vÆue
);Ötx_lvÆ.öt_vÆue<<=16;Ötx_lvÆ.öt_vÆuê+
ENVREG_REG
;  
SPECIAL_REGISTER
;

189 "%gridid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
GRIDID_REG
;  
SPECIAL_REGISTER
;

190 "%œ√id" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LANEID_REG
;  
SPECIAL_REGISTER
;

191 "%œ√mask_eq" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LANEMASK_EQ_REG
;  
SPECIAL_REGISTER
;

192 "%œ√mask_À" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LANEMASK_LE_REG
;  
SPECIAL_REGISTER
;

193 "%œ√mask_…" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LANEMASK_LT_REG
;  
SPECIAL_REGISTER
;

194 "%œ√mask_ge" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LANEMASK_GE_REG
;  
SPECIAL_REGISTER
;

195 "%œ√mask_gt" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
LANEMASK_GT_REG
;  
SPECIAL_REGISTER
;

196 "%n˘aid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NCTAID_REG
;  
SPECIAL_REGISTER
;

197 "%¡id" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NTID_REG
;  
SPECIAL_REGISTER
;

198 "%nsmid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NSMID_REG
;  
SPECIAL_REGISTER
;

199 "%nw¨pid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
NWARPID_REG
;  
SPECIAL_REGISTER
;

200 "%pm"[0-3] 
TC
; 
	`ssˇnf
(
yyãxt
+3,"%u",&
±x_lvÆ
.
öt_vÆue
);Ötx_lvÆ.öt_vÆue<<=16;Ötx_lvÆ.öt_vÆuê+
PM_REG
;  
SPECIAL_REGISTER
;

201 "%smid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
SMID_REG
;  
SPECIAL_REGISTER
;

202 "%tid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
TID_REG
;  
SPECIAL_REGISTER
;

203 "%w¨pid" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
WARPID_REG
;  
SPECIAL_REGISTER
;

204 "WARP_SZ" 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 
WARPSZ_REG
;  
SPECIAL_REGISTER
;

206 [
a
-
zA
-
Z_
][a-zA-
Z0
-9
_$
]* 
TC
; 
±x_lvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IDENTIFIER
;

207 [
$
%][
a
-
zA
-
Z0
-9
_$
]+ 
TC
; 
±x_lvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IDENTIFIER
;

209 [0-9]+\.[0-9]+ 
TC
; 
	`ssˇnf
(
yyãxt
,"%lf", &
±x_lvÆ
.
doubÀ_vÆue
);  
DOUBLE_OPERAND
;

211 0[
xX
][0-9a-
fA
-
F
]+
U
? 
TC
; 
CHECK_UNSIGNED
; 
	`ssˇnf
(
yyãxt
,"%x", &
±x_lvÆ
.
öt_vÆue
);  
INT_OPERAND
;

212 0[0-7]+
U
? 
TC
; 
	`¥ötf
("GPGPU-Sim: ERROR **Ö¨sög o˘ÆÇŸ (yëËim∂emíãd\n"); 
	`ab‹t
();  
INT_OPERAND
;

213 0[
bB
][01]+
U
? 
TC
; 
	`¥ötf
("GPGPU-Sim: ERROR **Ö¨sög bö¨yÇŸ (yëËim∂emíãd\n"); 
	`ab‹t
();  
INT_OPERAND
;

214 [-]?[0-9]+
U
? 
TC
; 
CHECK_UNSIGNED
; 
±x_lvÆ
.
öt_vÆue
 = 
	`©oi
(
yyãxt
);  
INT_OPERAND
;

216 0[
fF
][0-9a-
fA
-
F
]{8} 
TC
; 
	`ssˇnf
(
yyãxt
+2,"%x", (*)(*)&
±x_lvÆ
.
Êﬂt_vÆue
);  
FLOAT_OPERAND
;

217 0[
dD
][0-9a-
fA
-
F
]{16} 
TC
; 
	`ssˇnf
(
yyãxt
+2,"%Lx", (*)(*)&
±x_lvÆ
.
doubÀ_vÆue
);  
DOUBLE_OPERAND
;

219 \.
s8
 
TC
;  
S8_TYPE
;

220 \.
s16
 
TC
;  
S16_TYPE
;

221 \.
s32
 
TC
;  
S32_TYPE
;

222 \.
s64
 
TC
;  
S64_TYPE
;

223 \.
u8
 
TC
;  
U8_TYPE
;

224 \.
u16
 
TC
;  
U16_TYPE
;

225 \.
u32
 
TC
;  
U32_TYPE
;

226 \.
u64
 
TC
;  
U64_TYPE
;

227 \.
f16
 
TC
;  
F16_TYPE
;

228 \.
f32
 
TC
;  
F32_TYPE
;

229 \.
f64
 
TC
;  
F64_TYPE
;

230 \.
ff64
 
TC
;  
FF64_TYPE
;

231 \.
b8
 
TC
;  
B8_TYPE
;

232 \.
b16
 
TC
;  
B16_TYPE
;

233 \.
b32
 
TC
;  
B32_TYPE
;

234 \.
b64
 
TC
;  
B64_TYPE
;

235 \.
bb64
 
TC
;  
BB64_TYPE
;

236 \.
bb128
 
TC
;  
BB128_TYPE
;

237 \.
¥ed
 
TC
;  
PRED_TYPE
;

239 \.
ãxªf
 
TC
; 
	`BEGIN
(
NOT_OPCODE
);  
TEXREF_TYPE
;

240 \.
ßm∂îªf
 
TC
;  
SAMPLERREF_TYPE
;

241 \.
sur‰ef
 
TC
;  
SURFREF_TYPE
;

243 \.
v2
 
TC
;  
V2_TYPE
;

244 \.
v3
 
TC
;  
V3_TYPE
;

245 \.
v4
 
TC
;  
V4_TYPE
;

247 \.
hÆf
 
TC
;  
HALF_OPTION
;

249 \.
equ
 
TC
;  
EQU_OPTION
;

250 \.
√u
 
TC
;  
NEU_OPTION
;

251 \.
…u
 
TC
;  
LTU_OPTION
;

252 \.
Àu
 
TC
;  
LEU_OPTION
;

253 \.
gtu
 
TC
;  
GTU_OPTION
;

254 \.
geu
 
TC
;  
GEU_OPTION
;

255 \.
num
 
TC
;  
NUM_OPTION
;

256 \.
«n
 
TC
;  
NAN_OPTION
;

258 \.
ßt
 
TC
;  
SAT_OPTION
;

260 \.
eq
 
TC
;  
EQ_OPTION
;

261 \.
√
 
TC
;  
NE_OPTION
;

262 \.
…
 
TC
;  
LT_OPTION
;

263 \.
À
 
TC
;  
LE_OPTION
;

264 \.
gt
 
TC
;  
GT_OPTION
;

265 \.
ge
 
TC
;  
GE_OPTION
;

266 \.
cf
 
TC
;  
CF_OPTION
;

267 \.
sf
 
TC
;  
SF_OPTION
;

268 \.
nsf
 
TC
;  
NSF_OPTION
;

270 \.
lo
 
TC
;  
LO_OPTION
;

271 \.
ls
 
TC
;  
LS_OPTION
;

272 \.
hi
 
TC
;  
HI_OPTION
;

273 \.
hs
 
TC
;  
HS_OPTION
;

276 \.
∫i
 
TC
;  
RNI_OPTION
;

277 \.
rzi
 
TC
;  
RZI_OPTION
;

278 \.
rmi
 
TC
;  
RMI_OPTION
;

279 \.
Ωi
 
TC
;  
RPI_OPTION
;

281 \.
∫
 
TC
;  
RN_OPTION
;

282 \.
rz
 
TC
;  
RZ_OPTION
;

283 \.
rm
 
TC
;  
RM_OPTION
;

284 \.
Ω
 
TC
;  
RP_OPTION
;

286 \.
·z
 
TC
;  
FTZ_OPTION
;

288 \.
√g
 
TC
;  
NEG_OPTION
;

290 \.
wide
 
TC
;  
WIDE_OPTION
;

291 \.
uni
 
TC
;  
UNI_OPTION
;

293 \.
≠¥ox
 
TC
;  
APPROX_OPTION
;

294 \.
fuŒ
 
TC
;  
FULL_OPTION
;

296 \.
™y
 
TC
;  
ANY_OPTION
;

297 \.
Æl
 
TC
;  
ALL_OPTION
;

298 \.
gl
 
TC
;  
GLOBAL_OPTION
;

299 \.
˘a
 
TC
;  
CTA_OPTION
;

300 \.
sys
 
TC
;  
SYS_OPTION
;

302 \.
exô
 
TC
;  
EXIT_OPTION
;

304 \.
abs
 
TC
;  
ABS_OPTION
;

306 \.
to
 
TC
;  
TO_OPTION
;

308 \.
ˇ
 
TC
;  
CA_OPTION
;

309 \.
cg
 
TC
;  
CG_OPTION
;

310 \.
cs
 
TC
;  
CS_OPTION
;

311 \.
lu
 
TC
;  
LU_OPTION
;

312 \.
cv
 
TC
;  
CV_OPTION
;

314 \.
wb
 
TC
;  
WB_OPTION
;

315 \.
wt
 
TC
;  
WT_OPTION
;

317 \.
™d
 
TC
;  
ATOMIC_AND
;

318 \.
‹
 
TC
;  
ATOMIC_OR
;

319 \.
x‹
 
TC
;  
ATOMIC_XOR
;

320 \.
ˇs
 
TC
;  
ATOMIC_CAS
;

321 \.
exch
 
TC
;  
ATOMIC_EXCH
;

322 \.
add
 
TC
;  
ATOMIC_ADD
;

323 \.
öc
 
TC
;  
ATOMIC_INC
;

324 \.
dec
 
TC
;  
ATOMIC_DEC
;

325 \.
mö
 
TC
;  
ATOMIC_MIN
;

326 \.
max
 
TC
;  
ATOMIC_MAX
;

328 \.1d 
TC
;  
GEOM_MODIFIER_1D
;

329 \.2d 
TC
;  
GEOM_MODIFIER_2D
;

330 \.3d 
TC
;  
GEOM_MODIFIER_3D
;

332 \.0 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 0;  
DIMENSION_MODIFIER
;

333 \.1 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 1;  
DIMENSION_MODIFIER
;

334 \.2 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 2;  
DIMENSION_MODIFIER
;

335 \.
x
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 0;  
DIMENSION_MODIFIER
;

336 \.
y
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 1;  
DIMENSION_MODIFIER
;

337 \.
z
 
TC
; 
±x_lvÆ
.
öt_vÆue
 = 2;  
DIMENSION_MODIFIER
;

339 "-" 
TC
;  
MINUS
;

340 "+" 
TC
;  
PLUS
;

341 "," 
TC
;  
COMMA
;

342 "@" 
TC
;  
PRED
;

343 "|" 
TC
;  
PIPE
;

344 "[" 
TC
;  
LEFT_SQUARE_BRACKET
;

345 "]" 
TC
;  
RIGHT_SQUARE_BRACKET
;

346 "<" 
TC
;  
LEFT_ANGLE_BRACKET
;

347 ">" 
TC
;  
RIGHT_ANGLE_BRACKET
;

348 "(" 
TC
;  
LEFT_PAREN
;

349 ")" 
TC
;  
RIGHT_PAREN
;

350 ":" 
TC
; 
	`BEGIN
(
INITIAL
);  
COLON
;

351 ";" 
TC
; 
	`BEGIN
(
INITIAL
);  
SEMI_COLON
;

352 "!" 
TC
;  
EXCLAMATION
;

353 "=" 
TC
;  
EQUALS
;

354 "{" 
TC
;  
LEFT_BRACE
;

355 "}" 
TC
;  
RIGHT_BRACE
;

356 \. 
TC
;  
PERIOD
;

357 "/" 
TC
;  
BACKSLASH
;

359 "//"[^\
n
]* 
TC
;

361 \
n
.* 
cﬁ
=0; 
	`°∫˝y
(
löebuf
, 
yyãxt
 + 1, 1024); 
	`yyÀss
( 1 );

363 " " 
TC
;

364 "\t" 
TC
;

369 <
INITIAL
>{

370 "/*" 
	`BEGIN
(
IN_COMMENT
);

372 <
IN_COMMENT
>{

373 "*/" 
	`BEGIN
(
INITIAL
);

374 [^*\
n
]+

376 \
n
 
TC
;

379 <
INITIAL
>{

380 "\"" 
	`BEGIN
(
IN_STRING
);

382 <
IN_STRING
>{

383 "\"" 
TC
; 
	`BEGIN
(
INITIAL
);  
STRING
;

387 <*>\
t
@@
DWARF
.*\
n


389 <
INITIAL
,
NOT_OPCODE
>. 
TC
; 
	`±x_îr‹
((c⁄° *)
NULL
);

390 
	}
%%

392 
g_îr‹_dëe˘ed
;

393 c⁄° *
g_fûíame
;

395 
	$±x_îr‹
–c⁄° *
s
 )

397 
i
;

398 
g_îr‹_dëe˘ed
 = 1;

399 
	`fÊush
(
°dout
);

400 if–
s
 !
NULL
 )

401 
	`¥ötf
("%s:%u: Sy¡axÉº‹:\n\n", 
g_fûíame
, 
±x_löío
 );

402 
	`¥ötf
(" %s\n", 
löebuf
 );

403 
	`¥ötf
(" ");

404  
i
=0; i < 
cﬁ
-1; i++ ) {

405 if–
löebuf
[
i
] ='\t' ) 
	`¥ötf
("\t");

406 
	`¥ötf
(" ");

409 
	`¥ötf
("^\n\n");

410 
	`fÊush
(
°dout
);

413 
	}
}

	@src/cuda-sim/ptx.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
±x_∑r£


	)

68 
	#yyÀx
 
±x_Àx


	)

69 
	#yyîr‹
 
±x_îr‹


	)

70 
	#yylvÆ
 
±x_lvÆ


	)

71 
	#yych¨
 
±x_ch¨


	)

72 
	#yydebug
 
±x_debug


	)

73 
	#yy√ºs
 
±x_√ºs


	)

83 #i‚de‡
YYDEBUG


84 
	#YYDEBUG
 0

	)

88 #ifde‡
YYERROR_VERBOSE


89 #unde‡
YYERROR_VERBOSE


90 
	#YYERROR_VERBOSE
 1

	)

92 
	#YYERROR_VERBOSE
 0

	)

96 #i‚de‡
YYTOKEN_TABLE


97 
	#YYTOKEN_TABLE
 0

	)

102 #i‚de‡
YYTOKENTYPE


103 
	#YYTOKENTYPE


	)

106 
	eyytokíty≥
 {

107 
	mSTRING
 = 258,

108 
	mOPCODE
 = 259,

109 
	mALIGN_DIRECTIVE
 = 260,

110 
	mBRANCHTARGETS_DIRECTIVE
 = 261,

111 
	mBYTE_DIRECTIVE
 = 262,

112 
	mCALLPROTOTYPE_DIRECTIVE
 = 263,

113 
	mCALLTARGETS_DIRECTIVE
 = 264,

114 
	mCONST_DIRECTIVE
 = 265,

115 
	mCONSTPTR_DIRECTIVE
 = 266,

116 
	mENTRY_DIRECTIVE
 = 267,

117 
	mEXTERN_DIRECTIVE
 = 268,

118 
	mFILE_DIRECTIVE
 = 269,

119 
	mFUNC_DIRECTIVE
 = 270,

120 
	mGLOBAL_DIRECTIVE
 = 271,

121 
	mLOCAL_DIRECTIVE
 = 272,

122 
	mLOC_DIRECTIVE
 = 273,

123 
	mMAXNCTAPERSM_DIRECTIVE
 = 274,

124 
	mMAXNNREG_DIRECTIVE
 = 275,

125 
	mMAXNTID_DIRECTIVE
 = 276,

126 
	mMINNCTAPERSM_DIRECTIVE
 = 277,

127 
	mPARAM_DIRECTIVE
 = 278,

128 
	mPRAGMA_DIRECTIVE
 = 279,

129 
	mREG_DIRECTIVE
 = 280,

130 
	mREQNTID_DIRECTIVE
 = 281,

131 
	mSECTION_DIRECTIVE
 = 282,

132 
	mSHARED_DIRECTIVE
 = 283,

133 
	mSREG_DIRECTIVE
 = 284,

134 
	mSTRUCT_DIRECTIVE
 = 285,

135 
	mSURF_DIRECTIVE
 = 286,

136 
	mTARGET_DIRECTIVE
 = 287,

137 
	mTEX_DIRECTIVE
 = 288,

138 
	mUNION_DIRECTIVE
 = 289,

139 
	mVERSION_DIRECTIVE
 = 290,

140 
	mADDRESS_SIZE_DIRECTIVE
 = 291,

141 
	mVISIBLE_DIRECTIVE
 = 292,

142 
	mIDENTIFIER
 = 293,

143 
	mINT_OPERAND
 = 294,

144 
	mFLOAT_OPERAND
 = 295,

145 
	mDOUBLE_OPERAND
 = 296,

146 
	mS8_TYPE
 = 297,

147 
	mS16_TYPE
 = 298,

148 
	mS32_TYPE
 = 299,

149 
	mS64_TYPE
 = 300,

150 
	mU8_TYPE
 = 301,

151 
	mU16_TYPE
 = 302,

152 
	mU32_TYPE
 = 303,

153 
	mU64_TYPE
 = 304,

154 
	mF16_TYPE
 = 305,

155 
	mF32_TYPE
 = 306,

156 
	mF64_TYPE
 = 307,

157 
	mFF64_TYPE
 = 308,

158 
	mB8_TYPE
 = 309,

159 
	mB16_TYPE
 = 310,

160 
	mB32_TYPE
 = 311,

161 
	mB64_TYPE
 = 312,

162 
	mBB64_TYPE
 = 313,

163 
	mBB128_TYPE
 = 314,

164 
	mPRED_TYPE
 = 315,

165 
	mTEXREF_TYPE
 = 316,

166 
	mSAMPLERREF_TYPE
 = 317,

167 
	mSURFREF_TYPE
 = 318,

168 
	mV2_TYPE
 = 319,

169 
	mV3_TYPE
 = 320,

170 
	mV4_TYPE
 = 321,

171 
	mCOMMA
 = 322,

172 
	mPRED
 = 323,

173 
	mHALF_OPTION
 = 324,

174 
	mEQ_OPTION
 = 325,

175 
	mNE_OPTION
 = 326,

176 
	mLT_OPTION
 = 327,

177 
	mLE_OPTION
 = 328,

178 
	mGT_OPTION
 = 329,

179 
	mGE_OPTION
 = 330,

180 
	mLO_OPTION
 = 331,

181 
	mLS_OPTION
 = 332,

182 
	mHI_OPTION
 = 333,

183 
	mHS_OPTION
 = 334,

184 
	mEQU_OPTION
 = 335,

185 
	mNEU_OPTION
 = 336,

186 
	mLTU_OPTION
 = 337,

187 
	mLEU_OPTION
 = 338,

188 
	mGTU_OPTION
 = 339,

189 
	mGEU_OPTION
 = 340,

190 
	mNUM_OPTION
 = 341,

191 
	mNAN_OPTION
 = 342,

192 
	mCF_OPTION
 = 343,

193 
	mSF_OPTION
 = 344,

194 
	mNSF_OPTION
 = 345,

195 
	mLEFT_SQUARE_BRACKET
 = 346,

196 
	mRIGHT_SQUARE_BRACKET
 = 347,

197 
	mWIDE_OPTION
 = 348,

198 
	mSPECIAL_REGISTER
 = 349,

199 
	mMINUS
 = 350,

200 
	mPLUS
 = 351,

201 
	mCOLON
 = 352,

202 
	mSEMI_COLON
 = 353,

203 
	mEXCLAMATION
 = 354,

204 
	mPIPE
 = 355,

205 
	mRIGHT_BRACE
 = 356,

206 
	mLEFT_BRACE
 = 357,

207 
	mEQUALS
 = 358,

208 
	mPERIOD
 = 359,

209 
	mBACKSLASH
 = 360,

210 
	mDIMENSION_MODIFIER
 = 361,

211 
	mRN_OPTION
 = 362,

212 
	mRZ_OPTION
 = 363,

213 
	mRM_OPTION
 = 364,

214 
	mRP_OPTION
 = 365,

215 
	mRNI_OPTION
 = 366,

216 
	mRZI_OPTION
 = 367,

217 
	mRMI_OPTION
 = 368,

218 
	mRPI_OPTION
 = 369,

219 
	mUNI_OPTION
 = 370,

220 
	mGEOM_MODIFIER_1D
 = 371,

221 
	mGEOM_MODIFIER_2D
 = 372,

222 
	mGEOM_MODIFIER_3D
 = 373,

223 
	mSAT_OPTION
 = 374,

224 
	mFTZ_OPTION
 = 375,

225 
	mNEG_OPTION
 = 376,

226 
	mATOMIC_AND
 = 377,

227 
	mATOMIC_OR
 = 378,

228 
	mATOMIC_XOR
 = 379,

229 
	mATOMIC_CAS
 = 380,

230 
	mATOMIC_EXCH
 = 381,

231 
	mATOMIC_ADD
 = 382,

232 
	mATOMIC_INC
 = 383,

233 
	mATOMIC_DEC
 = 384,

234 
	mATOMIC_MIN
 = 385,

235 
	mATOMIC_MAX
 = 386,

236 
	mLEFT_ANGLE_BRACKET
 = 387,

237 
	mRIGHT_ANGLE_BRACKET
 = 388,

238 
	mLEFT_PAREN
 = 389,

239 
	mRIGHT_PAREN
 = 390,

240 
	mAPPROX_OPTION
 = 391,

241 
	mFULL_OPTION
 = 392,

242 
	mANY_OPTION
 = 393,

243 
	mALL_OPTION
 = 394,

244 
	mGLOBAL_OPTION
 = 395,

245 
	mCTA_OPTION
 = 396,

246 
	mSYS_OPTION
 = 397,

247 
	mEXIT_OPTION
 = 398,

248 
	mABS_OPTION
 = 399,

249 
	mTO_OPTION
 = 400,

250 
	mCA_OPTION
 = 401,

251 
	mCG_OPTION
 = 402,

252 
	mCS_OPTION
 = 403,

253 
	mLU_OPTION
 = 404,

254 
	mCV_OPTION
 = 405,

255 
	mWB_OPTION
 = 406,

256 
	mWT_OPTION
 = 407

262 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


263 
	uYYSTYPE


269 
	mdoubÀ_vÆue
;

270 
	mÊﬂt_vÆue
;

271 
	möt_vÆue
;

272 * 
	m°rög_vÆue
;

273 * 
	m±r_vÆue
;

279 } 
	tYYSTYPE
;

280 
	#YYSTYPE_IS_TRIVIAL
 1

	)

281 
	#yy°y≥
 
YYSTYPE


	)

282 
	#YYSTYPE_IS_DECLARED
 1

	)

291 
	~"±x_∑r£r.h
"

292 
	~<°dlib.h
>

293 
	~<°rög.h
>

294 
	~<m©h.h
>

295 
sy¡ax_nŸ_im∂emíãd
();

296 
g_func_de˛
;

297 
±x_Àx
();

298 
±x_îr‹
(const *);

308 #ifde‡
YYTYPE_UINT8


309 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

311 
	tyyty≥_uöt8
;

314 #ifde‡
YYTYPE_INT8


315 
YYTYPE_INT8
 
	tyyty≥_öt8
;

316 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

317 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

318 sig√d 
	tyyty≥_öt8
;

320 
	tyyty≥_öt8
;

323 #ifde‡
YYTYPE_UINT16


324 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

326 
	tyyty≥_uöt16
;

329 #ifde‡
YYTYPE_INT16


330 
YYTYPE_INT16
 
	tyyty≥_öt16
;

332 
	tyyty≥_öt16
;

335 #i‚de‡
YYSIZE_T


336 #ifde‡
__SIZE_TYPE__


337 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

338 #ñi‡
deföed
 
size_t


339 
	#YYSIZE_T
 
size_t


	)

340 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

341 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

342 
	~<°ddef.h
>

343 
	#YYSIZE_T
 
size_t


	)

345 
	#YYSIZE_T
 

	)

349 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

351 #i‚de‡
YY_


352 #i‡
YYENABLE_NLS


353 #i‡
ENABLE_NLS


354 
	~<liböé.h
>

355 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

358 #i‚de‡
YY_


359 
	#YY_
(
msgid
Ë
	)
msgid

364 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


365 
	#YYUSE
(
e
Ë((Ë”))

	)

367 
	#YYUSE
(
e
Ë

	)

371 #i‚de‡
löt


372 
	#YYID
(
n
Ë“)

	)

374 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

375 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

377 
	$YYID
 (
yyi
)

380 
	$YYID
 (
yyi
)

381 
yyi
;

384  
yyi
;

385 
	}
}

388 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


392 #ifde‡
YYSTACK_USE_ALLOCA


393 #i‡
YYSTACK_USE_ALLOCA


394 #ifde‡
__GNUC__


395 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

396 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


397 
	~<Æloˇ.h
>

398 #ñi‡
deföed
 
_AIX


399 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

400 #ñi‡
deföed
 
_MSC_VER


401 
	~<mÆloc.h
>

402 
	#Æloˇ
 
_Æloˇ


	)

404 
	#YYSTACK_ALLOC
 
Æloˇ


	)

405 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

406 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

407 
	~<°dlib.h
>

408 #i‚de‡
_STDLIB_H


409 
	#_STDLIB_H
 1

	)

416 #ifde‡
YYSTACK_ALLOC


418 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

419 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


424 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

427 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

428 
	#YYSTACK_FREE
 
YYFREE


	)

429 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


430 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

432 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

433 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

434 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

435 
	~<°dlib.h
>

436 #i‚de‡
_STDLIB_H


437 
	#_STDLIB_H
 1

	)

440 #i‚de‡
YYMALLOC


441 
	#YYMALLOC
 
mÆloc


	)

442 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

443 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

444 *
mÆloc
 (
YYSIZE_T
);

447 #i‚de‡
YYFREE


448 
	#YYFREE
 
‰ì


	)

449 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

450 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

451 
‰ì
 (*);

458 #i‡(! 
deföed
 
yyovîÊow
 \

459 && (! 
deföed
 
	g__˝lu•lus
 \

460 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

463 
	uyyÆloc


465 
yyty≥_öt16
 
	myyss_Æloc
;

466 
YYSTYPE
 
	myyvs_Æloc
;

470 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

474 
	#YYSTACK_BYTES
(
N
) \

475 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

476 + 
YYSTACK_GAP_MAXIMUM
)

	)

480 #i‚de‡
YYCOPY


481 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

482 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

483 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

485 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

488 
YYSIZE_T
 
yyi
; \

489 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

490 (
To
)[
yyi
] = (
From
)[yyi]; \

492 
	`YYID
 (0))

	)

501 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

504 
YYSIZE_T
 
yy√wbyãs
; \

505 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

506 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

507 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

508 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

510 
	`YYID
 (0))

	)

515 
	#YYFINAL
 2

	)

517 
	#YYLAST
 582

	)

520 
	#YYNTOKENS
 153

	)

522 
	#YYNNTS
 60

	)

524 
	#YYNRULES
 252

	)

526 
	#YYNSTATES
 351

	)

529 
	#YYUNDEFTOK
 2

	)

530 
	#YYMAXUTOK
 407

	)

532 
	#YYTRANSLATE
(
YYX
) \

533 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

536 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

581 #i‡
YYDEBUG


584 c⁄° 
yyty≥_uöt16
 
	gyy¥hs
[] =

615 c⁄° 
yyty≥_öt16
 
	gyyrhs
[] =

693 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

724 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


727 c⁄° *c⁄° 
	gyyäame
[] =

780 #ifde‡
YYPRINT


783 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

805 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

836 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

869 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

910 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

922 
	#YYPACT_NINF
 -242

	)

923 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

964 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

978 
	#YYTABLE_NINF
 -122

	)

979 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1042 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1107 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1147 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1148 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1149 
	#YYEMPTY
 (-2)

	)

1150 
	#YYEOF
 0

	)

1152 
	#YYACCEPT
 
yyac˚±œb


	)

1153 
	#YYABORT
 
yyab‹éab


	)

1154 
	#YYERROR
 
yyîr‹œb


	)

1161 
	#YYFAIL
 
yyîæab


	)

1163 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1165 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1167 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1169 
yych¨
 = (
Tokí
); \

1170 
yylvÆ
 = (
VÆue
); \

1171 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

1172 
	`YYPOPSTACK
 (1); \

1173 
yybackup
; \

1177 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1178 
YYERROR
; \

1180 
	`YYID
 (0))

	)

1183 
	#YYTERROR
 1

	)

1184 
	#YYERRCODE
 256

	)

1191 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

1192 #i‚de‡
YYLLOC_DEFAULT


1193 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

1195 i‡(
	`YYID
 (
N
)) \

1197 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

1198 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

1199 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

1200 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

1204 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

1205 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

1206 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

1207 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

1209 
	`YYID
 (0))

	)

1217 #i‚de‡
YY_LOCATION_PRINT


1218 #i‡
YYLTYPE_IS_TRIVIAL


1219 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

1220 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

1221 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

1222 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

1224 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1231 #ifde‡
YYLEX_PARAM


1232 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

1234 
	#YYLEX
 
	`yyÀx
 ()

	)

1238 #i‡
YYDEBUG


1240 #i‚de‡
YYFPRINTF


1241 
	~<°dio.h
>

1242 
	#YYFPRINTF
 
Ârötf


	)

1245 
	#YYDPRINTF
(
Args
) \

1247 i‡(
yydebug
) \

1248 
YYFPRINTF
 
Args
; \

1249 } 
	`YYID
 (0))

	)

1251 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1253 i‡(
yydebug
) \

1255 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1256 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1257 
Ty≥
, 
VÆue
); \

1258 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1260 } 
	`YYID
 (0))

	)

1268 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1269 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1271 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1274 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1275 
FILE
 *
yyouçut
;

1276 
yyty≥
;

1277 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1280 i‡(!
yyvÆuï
)

1282 #ifde‡
YYPRINT


1283 i‡(
yyty≥
 < 
YYNTOKENS
)

1284 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1286 
	`YYUSE
 (
yyouçut
);

1288 
yyty≥
)

1293 
	}
}

1300 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1301 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1303 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1306 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1307 
FILE
 *
yyouçut
;

1308 
yyty≥
;

1309 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1312 i‡(
yyty≥
 < 
YYNTOKENS
)

1313 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

1315 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

1317 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1318 
	`YYFPRINTF
 (
yyouçut
, ")");

1319 
	}
}

1326 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1327 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1329 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1332 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

1333 
yyty≥_öt16
 *
yybŸtom
;

1334 
yyty≥_öt16
 *
yyt›
;

1337 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1338 ; 
yybŸtom
 <
yyt›
; yybottom++)

1340 
yybŸ
 = *
yybŸtom
;

1341 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1343 
	`YYFPRINTF
 (
°dîr
, "\n");

1344 
	}
}

1346 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1348 i‡(
yydebug
) \

1349 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1350 } 
	`YYID
 (0))

	)

1357 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1358 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1360 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1363 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

1364 
YYSTYPE
 *
yyv•
;

1365 
yyruÀ
;

1368 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1369 
yyi
;

1370 
yy o
 = 
yyæöe
[
yyruÀ
];

1371 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1372 
yyruÀ
 - 1, 
yy o
);

1374 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1376 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1377 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

1378 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1380 
	`YYFPRINTF
 (
°dîr
, "\n");

1382 
	}
}

1384 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1386 i‡(
yydebug
) \

1387 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

1388 } 
	`YYID
 (0))

	)

1392 
	gyydebug
;

1394 
	#YYDPRINTF
(
Args
)

	)

1395 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1396 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1397 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1402 #i‚def 
YYINITDEPTH


1403 
	#YYINITDEPTH
 200

	)

1413 #i‚de‡
YYMAXDEPTH


1414 
	#YYMAXDEPTH
 10000

	)

1419 #i‡
YYERROR_VERBOSE


1421 #i‚de‡
yy°æí


1422 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1423 
	#yy°æí
 
°æí


	)

1426 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1427 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1428 
YYSIZE_T


1429 
	$yy°æí
 (c⁄° *
yy°r
)

1431 
YYSIZE_T


1432 
	$yy°æí
 (
yy°r
)

1433 c⁄° *
yy°r
;

1436 
YYSIZE_T
 
yyÀn
;

1437 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1439  
yyÀn
;

1440 
	}
}

1444 #i‚de‡
yy°p˝y


1445 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1446 
	#yy°p˝y
 
°p˝y


	)

1450 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1451 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1453 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1456 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1457 *
yyde°
;

1458 c⁄° *
yy§c
;

1461 *
yyd
 = 
yyde°
;

1462 c⁄° *
yys
 = 
yy§c
;

1464 (*
yyd
++ = *
yys
++) != '\0')

1467  
yyd
 - 1;

1468 
	}
}

1472 #i‚de‡
yyäamîr


1480 
YYSIZE_T


1481 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1483 i‡(*
yy°r
 == '"')

1485 
YYSIZE_T
 
yyn
 = 0;

1486 c⁄° *
yyp
 = 
yy°r
;

1489 *++
yyp
)

1493 
do_nŸ_°rù_quŸes
;

1496 i‡(*++
yyp
 != '\\')

1497 
do_nŸ_°rù_quŸes
;

1500 i‡(
yyªs
)

1501 
yyªs
[
yyn
] = *
yyp
;

1502 
yyn
++;

1506 i‡(
yyªs
)

1507 
yyªs
[
yyn
] = '\0';

1508  
yyn
;

1510 
do_nŸ_°rù_quŸes
: ;

1513 i‡(! 
yyªs
)

1514  
	`yy°æí
 (
yy°r
);

1516  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1517 
	}
}

1527 
YYSIZE_T


1528 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

1530 
yyn
 = 
yy∑˘
[
yy°©e
];

1532 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

1536 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1537 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

1538 
YYSIZE_T
 
yysize
 = 
yysize0
;

1539 
YYSIZE_T
 
yysize1
;

1540 
yysize_ovîÊow
 = 0;

1541 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1542 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1543 
yyx
;

1548 
	`YY_
("syntaxÉrror, unexpected %s");

1549 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

1550 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

1551 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

1552 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

1554 *
yyfmt
;

1555 c⁄° *
yyf
;

1556 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

1557 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

1558 c⁄° 
yy‹
[] = " or %s";

1559 
yyf‹m©
[ 
yyu√x≥˘ed


1560 +  
yyex≥˘ög
 - 1

1561 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1562 * ( 
yy‹
 - 1))];

1563 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1567 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1570 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1571 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1572 
yycou¡
 = 1;

1574 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1575 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1577 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1578 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1580 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1582 
yycou¡
 = 1;

1583 
yysize
 = 
yysize0
;

1584 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1587 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1588 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1589 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1590 
yysize
 = 
yysize1
;

1591 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1592 
yy¥efix
 = 
yy‹
;

1595 
yyf
 = 
	`YY_
(
yyf‹m©
);

1596 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1597 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1598 
yysize
 = 
yysize1
;

1600 i‡(
yysize_ovîÊow
)

1601  
YYSIZE_MAXIMUM
;

1603 i‡(
yyªsu…
)

1608 *
yyp
 = 
yyªsu…
;

1609 
yyi
 = 0;

1610 (*
yyp
 = *
yyf
) != '\0')

1612 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1614 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1615 
yyf
 += 2;

1619 
yyp
++;

1620 
yyf
++;

1624  
yysize
;

1626 
	}
}

1635 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1636 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1638 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1641 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1642 c⁄° *
yymsg
;

1643 
yyty≥
;

1644 
YYSTYPE
 *
yyvÆuï
;

1647 
	`YYUSE
 (
yyvÆuï
);

1649 i‡(!
yymsg
)

1650 
yymsg
 = "Deleting";

1651 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1653 
yyty≥
)

1659 
	}
}

1662 #ifde‡
YYPARSE_PARAM


1663 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1664 
yy∑r£
 (*
YYPARSE_PARAM
);

1666 
yy∑r£
 ();

1669 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1670 
yy∑r£
 ();

1672 
yy∑r£
 ();

1678 
	gyych¨
;

1681 
YYSTYPE
 
	gyylvÆ
;

1684 
	gyy√ºs
;

1692 #ifde‡
YYPARSE_PARAM


1693 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1694 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1696 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1699 
	$yy∑r£
 (
YYPARSE_PARAM
)

1700 *
YYPARSE_PARAM
;

1703 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1704 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1706 
	$yy∑r£
 ()

1709 
	$yy∑r£
 ()

1716 
yy°©e
;

1718 
yyîr°©us
;

1728 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1729 
yyty≥_öt16
 *
yyss
;

1730 
yyty≥_öt16
 *
yys•
;

1733 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1734 
YYSTYPE
 *
yyvs
;

1735 
YYSTYPE
 *
yyv•
;

1737 
YYSIZE_T
 
yy°acksize
;

1739 
yyn
;

1740 
yyªsu…
;

1742 
yytokí
;

1745 
YYSTYPE
 
yyvÆ
;

1747 #i‡
YYERROR_VERBOSE


1749 
yymsgbuf
[128];

1750 *
yymsg
 = 
yymsgbuf
;

1751 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1754 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1758 
yyÀn
 = 0;

1760 
yytokí
 = 0;

1761 
yyss
 = 
yysß
;

1762 
yyvs
 = 
yyvß
;

1763 
yy°acksize
 = 
YYINITDEPTH
;

1765 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1767 
yy°©e
 = 0;

1768 
yyîr°©us
 = 0;

1769 
yy√ºs
 = 0;

1770 
yych¨
 = 
YYEMPTY
;

1776 
yys•
 = 
yyss
;

1777 
yyv•
 = 
yyvs
;

1779 
yy£t°©e
;

1784 
yy√w°©e
:

1787 
yys•
++;

1789 
yy£t°©e
:

1790 *
yys•
 = 
yy°©e
;

1792 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1795 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1797 #ifde‡
yyovîÊow


1802 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1803 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1809 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1810 &
yyss1
, 
yysize
 *  (*
yys•
),

1811 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1812 &
yy°acksize
);

1814 
yyss
 = 
yyss1
;

1815 
yyvs
 = 
yyvs1
;

1818 #i‚de‡
YYSTACK_RELOCATE


1819 
yyexhau°edœb
;

1822 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1823 
yyexhau°edœb
;

1824 
yy°acksize
 *= 2;

1825 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1826 
yy°acksize
 = 
YYMAXDEPTH
;

1829 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1830 
yyÆloc
 *
yy±r
 =

1831 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1832 i‡(! 
yy±r
)

1833 
yyexhau°edœb
;

1834 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1835 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1836 #unde‡
YYSTACK_RELOCATE


1837 i‡(
yyss1
 !
yysß
)

1838 
	`YYSTACK_FREE
 (
yyss1
);

1843 
yys•
 = 
yyss
 + 
yysize
 - 1;

1844 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1846 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1847 (Ë
yy°acksize
));

1849 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1850 
YYABORT
;

1853 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1855 i‡(
yy°©e
 =
YYFINAL
)

1856 
YYACCEPT
;

1858 
yybackup
;

1863 
yybackup
:

1869 
yyn
 = 
yy∑˘
[
yy°©e
];

1870 i‡(
yyn
 =
YYPACT_NINF
)

1871 
yydeÁu…
;

1876 i‡(
yych¨
 =
YYEMPTY
)

1878 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1879 
yych¨
 = 
YYLEX
;

1882 i‡(
yych¨
 <
YYEOF
)

1884 
yych¨
 = 
yytokí
 = 
YYEOF
;

1885 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1889 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1890 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1895 
yyn
 +
yytokí
;

1896 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1897 
yydeÁu…
;

1898 
yyn
 = 
yyèbÀ
[yyn];

1899 i‡(
yyn
 <= 0)

1901 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1902 
yyîæab
;

1903 
yyn
 = -yyn;

1904 
yyªdu˚
;

1909 i‡(
yyîr°©us
)

1910 
yyîr°©us
--;

1913 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1916 
yych¨
 = 
YYEMPTY
;

1918 
yy°©e
 = 
yyn
;

1919 *++
yyv•
 = 
yylvÆ
;

1921 
yy√w°©e
;

1927 
yydeÁu…
:

1928 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1929 i‡(
yyn
 == 0)

1930 
yyîæab
;

1931 
yyªdu˚
;

1937 
yyªdu˚
:

1939 
yyÀn
 = 
yyr2
[
yyn
];

1949 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1952 
	`YY_REDUCE_PRINT
 (
yyn
);

1953 
yyn
)

1959 { 
	`£t_symèb
((
yyv•
[(1Ë- (1)].
±r_vÆue
)); 
	`func_hódî
(".skip"); ;}

1966 { 
	`íd_fun˘i⁄
(); ;}

1973 { 
	`£t_symèb
((
yyv•
[(1Ë- (1)].
±r_vÆue
)); ;}

1980 { 
	`func_hódî
(".skip"); ;}

1987 { 
	`íd_fun˘i⁄
(); ;}

1994 {
	`func_hódî_öfo_öt
(".max¡id", (
yyv•
[(2Ë- (6)].
öt_vÆue
));

1995 
	`func_hódî_öfo_öt
(",", (
yyv•
[(4Ë- (6)].
öt_vÆue
));

1996 
	`func_hódî_öfo_öt
(",", (
yyv•
[(6Ë- (6)].
öt_vÆue
)); ;}

2003 { 
	`°¨t_fun˘i⁄
((
yyv•
[(1Ë- (2)].
öt_vÆue
)); 
	`func_hódî_öfo
("(");;}

2010 {
	`func_hódî_öfo
(")");;}

2017 { (
yyvÆ
.
±r_vÆue
Ë
	`ª£t_symèb
(); ;}

2024 { 
	`°¨t_fun˘i⁄
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2031 { (
yyvÆ
.
±r_vÆue
Ë
	`ª£t_symèb
(); ;}

2038 { 
	`°¨t_fun˘i⁄
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); 
	`add_fun˘i⁄_«me
(""); 
g_func_de˛
=0; (
yyvÆ
.
±r_vÆue
Ë
	`ª£t_symèb
(); ;}

2045 { 
	`add_fun˘i⁄_«me
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); ;}

2052 {
	`func_hódî_öfo
("(");;}

2059 { 
g_func_de˛
=0; 
	`func_hódî_öfo
(")"); ;}

2066 { 
	`add_fun˘i⁄_«me
((
yyv•
[(1Ë- (1)].
°rög_vÆue
)); 
g_func_de˛
=0; ;}

2073 { (
yyvÆ
.
öt_vÆue
Ë1; 
g_func_de˛
=1; 
	`func_hódî
(".entry"); ;}

2080 { (
yyvÆ
.
öt_vÆue
Ë0; 
g_func_de˛
=1; 
	`func_hódî
(".func"); ;}

2087 { (
yyvÆ
.
öt_vÆue
Ë0; 
g_func_de˛
=1; 
	`func_hódî
(".func"); ;}

2094 { (
yyvÆ
.
öt_vÆue
Ë2; 
g_func_de˛
=1; 
	`func_hódî
(".func"); ;}

2101 { 
	`add_dúe˘ive
(); ;}

2108 {
	`func_hódî_öfo
(",");;}

2115 { 
	`add_dúe˘ive
(); ;}

2122 { 
	`add_•a˚_•ec
(
∑øm_•a˚_un˛assifõd
,0); ;}

2129 { 
	`add_fun˘i⁄_¨g
(); ;}

2136 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); ;}

2143 { 
	`add_fun˘i⁄_¨g
(); ;}

2150 { 
	`add_dúe˘ive
(); ;}

2157 { 
	`add_ö°ru˘i⁄
(); ;}

2164 { 
	`add_dúe˘ive
(); ;}

2171 { 
	`add_ö°ru˘i⁄
(); ;}

2178 { 
	`add_vîsi⁄_öfo
((
yyv•
[(2Ë- (2)].
doubÀ_vÆue
), 0); ;}

2185 { 
	`add_vîsi⁄_öfo
((
yyv•
[(2Ë- (3)].
doubÀ_vÆue
),1); ;}

2199 { 
	`èrgë_hódî2
((
yyv•
[(2Ë- (4)].
°rög_vÆue
),(yyvsp[(4) - (4)].string_value)); ;}

2206 { 
	`èrgë_hódî3
((
yyv•
[(2Ë- (6)].
°rög_vÆue
),(yyvsp[(4) - (6)].string_value),(yyvsp[(6) - (6)].string_value)); ;}

2213 { 
	`èrgë_hódî
((
yyv•
[(2Ë- (2)].
°rög_vÆue
)); ;}

2220 { 
	`add_fûe
((
yyv•
[(2Ë- (3)].
öt_vÆue
),(yyv•[(3Ë- (3)].
°rög_vÆue
)); ;}

2227 { 
	`add_¥agma
((
yyv•
[(2Ë- (3)].
°rög_vÆue
)); ;}

2234 { 
	`add_v¨übÀs
(); ;}

2241 { 
	`add_v¨übÀs
(); ;}

2248 { 
	`add_v¨übÀs
(); ;}

2255 { 
	`add_c⁄°±r
((
yyv•
[(2Ë- (6)].
°rög_vÆue
), (yyv•[(4Ë- (6)].°rög_vÆue), (yyv•[(6Ë- (6)].
öt_vÆue
)); ;}

2262 { 
	`£t_v¨übÀ_ty≥
(); ;}

2269 { 
	`add_idítifõr
((
yyv•
[(1Ë- (1)].
°rög_vÆue
),0,
NON_ARRAY_IDENTIFIER
); 
	`func_hódî_öfo
((yyvsp[(1) - (1)].string_value));;}

2276 { 
	`func_hódî_öfo
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); 
	`func_hódî_öfo_öt
("<", (yyv•[(3Ë- (4)].
öt_vÆue
)); func_header_info(">");

2277 
i
,
lba£
,
l
;

2278 *
id
 = 
NULL
;

2279 
lba£
 = 
	`°æí
((
yyv•
[(1Ë- (4)].
°rög_vÆue
));

2280  
i
=0; i < (
yyv•
[(3Ë- (4)].
öt_vÆue
); i++ ) {

2281 
l
 = 
lba£
 + ()
	`log10
(
i
+1)+10;

2282 
id
 = (*Ë
	`mÆloc
(
l
);

2283 
	`¢¥ötf
(
id
,
l
,"%s%u",(
yyv•
[(1Ë- (4)].
°rög_vÆue
),
i
);

2284 
	`add_idítifõr
(
id
,0,
NON_ARRAY_IDENTIFIER
);

2286 
	`‰ì
((
yyv•
[(1Ë- (4)].
°rög_vÆue
));

2294 { 
	`add_idítifõr
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),0,
ARRAY_IDENTIFIER_NO_DIM
); 
	`func_hódî_öfo
((yyvsp[(1) - (3)].string_value)); func_header_info("["); func_header_info("]");;}

2301 { 
	`add_idítifõr
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].
öt_vÆue
),
ARRAY_IDENTIFIER
); 
	`func_hódî_öfo
((yyv•[(1Ë- (4)].°rög_vÆue)); 
	`func_hódî_öfo_öt
("[",(yyvsp[(3) - (4)].int_value)); func_header_info("]");;}

2308 { 
	`add_exã∫_•ec
(); ;}

2315 { 
	`add_Æignmít_•ec
((
yyv•
[(2Ë- (2)].
öt_vÆue
)); ;}

2322 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); ;}

2329 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); ;}

2336 { 
	`add_•a˚_•ec
(
c⁄°_•a˚
,(
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2343 { 
	`add_•a˚_•ec
(
globÆ_•a˚
,0); ;}

2350 { 
	`add_•a˚_•ec
(
loˇl_•a˚
,0); ;}

2357 { 
	`add_•a˚_•ec
(
∑øm_•a˚_un˛assifõd
,0); ;}

2364 { 
	`add_•a˚_•ec
(
sh¨ed_•a˚
,0); ;}

2371 { 
	`add_•a˚_•ec
(
surf_•a˚
,0); ;}

2378 { 
	`add_•a˚_•ec
(
ãx_•a˚
,0); ;}

2385 { 
	`add_›ti⁄
(
V2_TYPE
); 
	`func_hódî_öfo
(".v2");;}

2392 { 
	`add_›ti⁄
(
V3_TYPE
); 
	`func_hódî_öfo
(".v3");;}

2399 { 
	`add_›ti⁄
(
V4_TYPE
); 
	`func_hódî_öfo
(".v4");;}

2406 { 
	`add_sˇœr_ty≥_•ec
–
S8_TYPE
 ); ;}

2413 { 
	`add_sˇœr_ty≥_•ec
–
S16_TYPE
 ); ;}

2420 { 
	`add_sˇœr_ty≥_•ec
–
S32_TYPE
 ); ;}

2427 { 
	`add_sˇœr_ty≥_•ec
–
S64_TYPE
 ); ;}

2434 { 
	`add_sˇœr_ty≥_•ec
–
U8_TYPE
 ); ;}

2441 { 
	`add_sˇœr_ty≥_•ec
–
U16_TYPE
 ); ;}

2448 { 
	`add_sˇœr_ty≥_•ec
–
U32_TYPE
 ); ;}

2455 { 
	`add_sˇœr_ty≥_•ec
–
U64_TYPE
 ); ;}

2462 { 
	`add_sˇœr_ty≥_•ec
–
F16_TYPE
 ); ;}

2469 { 
	`add_sˇœr_ty≥_•ec
–
F32_TYPE
 ); ;}

2476 { 
	`add_sˇœr_ty≥_•ec
–
F64_TYPE
 ); ;}

2483 { 
	`add_sˇœr_ty≥_•ec
–
FF64_TYPE
 ); ;}

2490 { 
	`add_sˇœr_ty≥_•ec
–
B8_TYPE
 ); ;}

2497 { 
	`add_sˇœr_ty≥_•ec
–
B16_TYPE
 ); ;}

2504 { 
	`add_sˇœr_ty≥_•ec
–
B32_TYPE
 ); ;}

2511 { 
	`add_sˇœr_ty≥_•ec
–
B64_TYPE
 ); ;}

2518 { 
	`add_sˇœr_ty≥_•ec
–
BB64_TYPE
 ); ;}

2525 { 
	`add_sˇœr_ty≥_•ec
–
BB128_TYPE
 ); ;}

2532 { 
	`add_sˇœr_ty≥_•ec
–
PRED_TYPE
 ); ;}

2539 { 
	`add_sˇœr_ty≥_•ec
–
TEXREF_TYPE
 ); ;}

2546 { 
	`add_sˇœr_ty≥_•ec
–
SAMPLERREF_TYPE
 ); ;}

2553 { 
	`add_sˇœr_ty≥_•ec
–
SURFREF_TYPE
 ); ;}

2560 { 
	`add_¨øy_öôülizî
(); ;}

2567 { 
	`sy¡ax_nŸ_im∂emíãd
(); ;}

2574 { 
	`add_œbñ
((
yyv•
[(1Ë- (2)].
°rög_vÆue
)); ;}

2581 { 
	`£t_ªtu∫
(); ;}

2588 { 
	`add_›code
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2595 { 
	`add_›code
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

2602 { 
	`add_¥ed
((
yyv•
[(2Ë- (2)].
°rög_vÆue
),0, -1); ;}

2609 { 
	`add_¥ed
((
yyv•
[(3Ë- (3)].
°rög_vÆue
),1, -1); ;}

2616 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,2); ;}

2623 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,3); ;}

2630 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,5); ;}

2637 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,6); ;}

2644 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,10); ;}

2651 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,12); ;}

2658 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,13); ;}

2665 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,17); ;}

2672 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,19); ;}

2679 { 
	`add_¥ed
((
yyv•
[(2Ë- (3)].
°rög_vÆue
),0,28); ;}

2686 { 
	`add_›ti⁄
(
UNI_OPTION
); ;}

2693 { 
	`add_›ti⁄
(
WIDE_OPTION
); ;}

2700 { 
	`add_›ti⁄
(
ANY_OPTION
); ;}

2707 { 
	`add_›ti⁄
(
ALL_OPTION
); ;}

2714 { 
	`add_›ti⁄
(
GLOBAL_OPTION
); ;}

2721 { 
	`add_›ti⁄
(
CTA_OPTION
); ;}

2728 { 
	`add_›ti⁄
(
SYS_OPTION
); ;}

2735 { 
	`add_›ti⁄
(
GEOM_MODIFIER_1D
); ;}

2742 { 
	`add_›ti⁄
(
GEOM_MODIFIER_2D
); ;}

2749 { 
	`add_›ti⁄
(
GEOM_MODIFIER_3D
); ;}

2756 { 
	`add_›ti⁄
(
SAT_OPTION
); ;}

2763 { 
	`add_›ti⁄
(
FTZ_OPTION
); ;}

2770 { 
	`add_›ti⁄
(
NEG_OPTION
); ;}

2777 { 
	`add_›ti⁄
(
APPROX_OPTION
); ;}

2784 { 
	`add_›ti⁄
(
FULL_OPTION
); ;}

2791 { 
	`add_›ti⁄
(
EXIT_OPTION
); ;}

2798 { 
	`add_›ti⁄
(
ABS_OPTION
); ;}

2805 { 
	`add_›ti⁄
(
TO_OPTION
); ;}

2812 { 
	`add_›ti⁄
(
HALF_OPTION
); ;}

2819 { 
	`add_›ti⁄
(
CA_OPTION
); ;}

2826 { 
	`add_›ti⁄
(
CG_OPTION
); ;}

2833 { 
	`add_›ti⁄
(
CS_OPTION
); ;}

2840 { 
	`add_›ti⁄
(
LU_OPTION
); ;}

2847 { 
	`add_›ti⁄
(
CV_OPTION
); ;}

2854 { 
	`add_›ti⁄
(
WB_OPTION
); ;}

2861 { 
	`add_›ti⁄
(
WT_OPTION
); ;}

2868 { 
	`add_›ti⁄
(
ATOMIC_AND
); ;}

2875 { 
	`add_›ti⁄
(
ATOMIC_OR
); ;}

2882 { 
	`add_›ti⁄
(
ATOMIC_XOR
); ;}

2889 { 
	`add_›ti⁄
(
ATOMIC_CAS
); ;}

2896 { 
	`add_›ti⁄
(
ATOMIC_EXCH
); ;}

2903 { 
	`add_›ti⁄
(
ATOMIC_ADD
); ;}

2910 { 
	`add_›ti⁄
(
ATOMIC_INC
); ;}

2917 { 
	`add_›ti⁄
(
ATOMIC_DEC
); ;}

2924 { 
	`add_›ti⁄
(
ATOMIC_MIN
); ;}

2931 { 
	`add_›ti⁄
(
ATOMIC_MAX
); ;}

2938 { 
	`add_›ti⁄
(
RN_OPTION
); ;}

2945 { 
	`add_›ti⁄
(
RZ_OPTION
); ;}

2952 { 
	`add_›ti⁄
(
RM_OPTION
); ;}

2959 { 
	`add_›ti⁄
(
RP_OPTION
); ;}

2966 { 
	`add_›ti⁄
(
RNI_OPTION
); ;}

2973 { 
	`add_›ti⁄
(
RZI_OPTION
); ;}

2980 { 
	`add_›ti⁄
(
RMI_OPTION
); ;}

2987 { 
	`add_›ti⁄
(
RPI_OPTION
); ;}

2994 { 
	`add_›ti⁄
(
EQ_OPTION
); ;}

3001 { 
	`add_›ti⁄
(
NE_OPTION
); ;}

3008 { 
	`add_›ti⁄
(
LT_OPTION
); ;}

3015 { 
	`add_›ti⁄
(
LE_OPTION
); ;}

3022 { 
	`add_›ti⁄
(
GT_OPTION
); ;}

3029 { 
	`add_›ti⁄
(
GE_OPTION
); ;}

3036 { 
	`add_›ti⁄
(
LO_OPTION
); ;}

3043 { 
	`add_›ti⁄
(
LS_OPTION
); ;}

3050 { 
	`add_›ti⁄
(
HI_OPTION
); ;}

3057 { 
	`add_›ti⁄
(
HS_OPTION
); ;}

3064 { 
	`add_›ti⁄
(
EQU_OPTION
); ;}

3071 { 
	`add_›ti⁄
(
NEU_OPTION
); ;}

3078 { 
	`add_›ti⁄
(
LTU_OPTION
); ;}

3085 { 
	`add_›ti⁄
(
LEU_OPTION
); ;}

3092 { 
	`add_›ti⁄
(
GTU_OPTION
); ;}

3099 { 
	`add_›ti⁄
(
GEU_OPTION
); ;}

3106 { 
	`add_›ti⁄
(
NUM_OPTION
); ;}

3113 { 
	`add_›ti⁄
(
NAN_OPTION
); ;}

3120 { 
	`add_sˇœr_›î™d
–(
yyv•
[(1Ë- (1)].
°rög_vÆue
) ); ;}

3127 { 
	`add_√g_¥ed_›î™d
–(
yyv•
[(2Ë- (2)].
°rög_vÆue
) ); ;}

3134 { 
	`add_sˇœr_›î™d
–(
yyv•
[(2Ë- (2)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_√g
(); ;}

3141 { 
	`ch™ge_›î™d_√g
(); ;}

3148 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].
öt_vÆue
)); ;}

3155 { 
	`add_sˇœr_›î™d
–(
yyv•
[(1Ë- (2)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(1);;}

3162 { 
	`add_sˇœr_›î™d
–(
yyv•
[(2Ë- (3)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(1); 
	`ch™ge_›î™d_√g
();;}

3169 { 
	`add_sˇœr_›î™d
–(
yyv•
[(1Ë- (2)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(2);;}

3176 { 
	`add_sˇœr_›î™d
–(
yyv•
[(2Ë- (3)].
°rög_vÆue
Ë); 
	`ch™ge_›î™d_lohi
(2); 
	`ch™ge_›î™d_√g
();;}

3183 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1);;}

3190 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1); 
	`ch™ge_›î™d_lohi
(1);;}

3197 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1); 
	`ch™ge_›î™d_lohi
(2);;}

3204 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3);;}

3211 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3); 
	`ch™ge_›î™d_lohi
(1);;}

3218 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3); 
	`ch™ge_›î™d_lohi
(2);;}

3225 { 
	`add_2ve˘‹_›î™d
((
yyv•
[(2Ë- (5)].
°rög_vÆue
),(yyvsp[(4) - (5)].string_value)); ;}

3232 { 
	`add_3ve˘‹_›î™d
((
yyv•
[(2Ë- (7)].
°rög_vÆue
),(yyvsp[(4) - (7)].string_value),(yyvsp[(6) - (7)].string_value)); ;}

3239 { 
	`add_4ve˘‹_›î™d
((
yyv•
[(2Ë- (9)].
°rög_vÆue
),(yyvsp[(4) - (9)].string_value),(yyvsp[(6) - (9)].string_value),(yyvsp[(8) - (9)].string_value)); ;}

3246 { 
	`add_sˇœr_›î™d
((
yyv•
[(2Ë- (3)].
°rög_vÆue
)); ;}

3253 { 
	`add_buûtö_›î™d
((
yyv•
[(1Ë- (2)].
öt_vÆue
),(yyvsp[(2) - (2)].int_value)); ;}

3260 { 
	`add_buûtö_›î™d
((
yyv•
[(1Ë- (1)].
öt_vÆue
),-1); ;}

3267 { 
	`add_mem‹y_›î™d
(); ;}

3274 { 
	`add_mem‹y_›î™d
(); 
	`ch™ge_mem‹y_addr_•a˚
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); ;}

3281 { 
	`ch™ge_mem‹y_addr_•a˚
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); ;}

3288 { 
	`ch™ge_mem‹y_addr_•a˚
((
yyv•
[(1Ë- (4)].
°rög_vÆue
)); 
	`add_mem‹y_›î™d
();;}

3295 { 
	`ch™ge_›î™d_√g
(); ;}

3302 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); ;}

3309 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); 
	`ch™ge_›î™d_lohi
(1); ;}

3316 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(3Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); 
	`ch™ge_›î™d_lohi
(2); ;}

3323 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(4Ë- (4)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); ;}

3330 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (5)].
°rög_vÆue
),(yyv•[(4Ë- (5)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); 
	`ch™ge_›î™d_lohi
(1); ;}

3337 { 
	`add_doubÀ_›î™d
((
yyv•
[(1Ë- (5)].
°rög_vÆue
),(yyv•[(4Ë- (5)].°rög_vÆue)); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); 
	`ch™ge_›î™d_lohi
(2); ;}

3344 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (4)].
°rög_vÆue
),(yyv•[(4Ë- (4)].
öt_vÆue
)); 
	`ch™ge_doubÀ_›î™d_ty≥
(3); ;}

3351 { 
	`add_lôîÆ_öt
((
yyv•
[(1Ë- (1)].
öt_vÆue
)); ;}

3358 { 
	`add_lôîÆ_Êﬂt
((
yyv•
[(1Ë- (1)].
Êﬂt_vÆue
)); ;}

3365 { 
	`add_lôîÆ_doubÀ
((
yyv•
[(1Ë- (1)].
doubÀ_vÆue
)); ;}

3372 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (1)].
°rög_vÆue
),0); ;}

3379 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (2)].
°rög_vÆue
),0); 
	`ch™ge_›î™d_lohi
(1);;}

3386 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (2)].
°rög_vÆue
),0); 
	`ch™ge_›î™d_lohi
(2); ;}

3393 { 
	`add_addªss_›î™d
((
yyv•
[(1Ë- (3)].
°rög_vÆue
),(yyv•[(3Ë- (3)].
öt_vÆue
)); ;}

3402 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

3404 
	`YYPOPSTACK
 (
yyÀn
);

3405 
yyÀn
 = 0;

3406 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3408 *++
yyv•
 = 
yyvÆ
;

3414 
yyn
 = 
yyr1
[yyn];

3416 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

3417 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

3418 
yy°©e
 = 
yyèbÀ
[yystate];

3420 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

3422 
yy√w°©e
;

3428 
yyîæab
:

3430 i‡(!
yyîr°©us
)

3432 ++
yy√ºs
;

3433 #i‡! 
YYERROR_VERBOSE


3434 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

3437 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

3438 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

3440 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

3441 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

3442 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

3443 i‡(
yymsg
 !
yymsgbuf
)

3444 
	`YYSTACK_FREE
 (
yymsg
);

3445 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

3446 i‡(
yymsg
)

3447 
yymsg_Æloc
 = 
yyÆloc
;

3450 
yymsg
 = 
yymsgbuf
;

3451 
yymsg_Æloc
 =  
yymsgbuf
;

3455 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

3457 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

3458 
	`yyîr‹
 (
yymsg
);

3462 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

3463 i‡(
yysize
 != 0)

3464 
yyexhau°edœb
;

3472 i‡(
yyîr°©us
 == 3)

3477 i‡(
yych¨
 <
YYEOF
)

3480 i‡(
yych¨
 =
YYEOF
)

3481 
YYABORT
;

3485 
	`yyde°ru˘
 ("Error: discarding",

3486 
yytokí
, &
yylvÆ
);

3487 
yych¨
 = 
YYEMPTY
;

3493 
yyîæab1
;

3499 
yyîr‹œb
:

3505 
yyîr‹œb
;

3509 
	`YYPOPSTACK
 (
yyÀn
);

3510 
yyÀn
 = 0;

3511 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3512 
yy°©e
 = *
yys•
;

3513 
yyîæab1
;

3519 
yyîæab1
:

3520 
yyîr°©us
 = 3;

3524 
yyn
 = 
yy∑˘
[
yy°©e
];

3525 i‡(
yyn
 !
YYPACT_NINF
)

3527 
yyn
 +
YYTERROR
;

3528 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

3530 
yyn
 = 
yyèbÀ
[yyn];

3531 i‡(0 < 
yyn
)

3537 i‡(
yys•
 =
yyss
)

3538 
YYABORT
;

3541 
	`yyde°ru˘
 ("Error:Öopping",

3542 
yy°os
[
yy°©e
], 
yyv•
);

3543 
	`YYPOPSTACK
 (1);

3544 
yy°©e
 = *
yys•
;

3545 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3548 *++
yyv•
 = 
yylvÆ
;

3552 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

3554 
yy°©e
 = 
yyn
;

3555 
yy√w°©e
;

3561 
yyac˚±œb
:

3562 
yyªsu…
 = 0;

3563 
yyªtu∫
;

3568 
yyab‹éab
:

3569 
yyªsu…
 = 1;

3570 
yyªtu∫
;

3572 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


3576 
yyexhau°edœb
:

3577 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

3578 
yyªsu…
 = 2;

3582 
yyªtu∫
:

3583 i‡(
yych¨
 !
YYEMPTY
)

3584 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

3585 
yytokí
, &
yylvÆ
);

3588 
	`YYPOPSTACK
 (
yyÀn
);

3589 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3590 
yys•
 !
yyss
)

3592 
	`yyde°ru˘
 ("Cleanup:Öopping",

3593 
yy°os
[*
yys•
], 
yyv•
);

3594 
	`YYPOPSTACK
 (1);

3596 #i‚de‡
yyovîÊow


3597 i‡(
yyss
 !
yysß
)

3598 
	`YYSTACK_FREE
 (
yyss
);

3600 #i‡
YYERROR_VERBOSE


3601 i‡(
yymsg
 !
yymsgbuf
)

3602 
	`YYSTACK_FREE
 (
yymsg
);

3605  
	`YYID
 (
yyªsu…
);

3606 
	}
}

3614 
±x_löío
;

3615 c⁄° *
g_fûíame
;

3617 
	$sy¡ax_nŸ_im∂emíãd
()

3619 
	`¥ötf
("P¨£Éº‹ (%s:%u):Åhi†sy¡ax i†nŸ (yëËim∂emíãd:\n",
g_fûíame
,
±x_löío
);

3620 
	`±x_îr‹
(
NULL
);

3621 
	`ab‹t
();

3622 
	}
}

	@src/cuda-sim/ptx.tab.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mSTRING
 = 258,

43 
	mOPCODE
 = 259,

44 
	mALIGN_DIRECTIVE
 = 260,

45 
	mBRANCHTARGETS_DIRECTIVE
 = 261,

46 
	mBYTE_DIRECTIVE
 = 262,

47 
	mCALLPROTOTYPE_DIRECTIVE
 = 263,

48 
	mCALLTARGETS_DIRECTIVE
 = 264,

49 
	mCONST_DIRECTIVE
 = 265,

50 
	mCONSTPTR_DIRECTIVE
 = 266,

51 
	mENTRY_DIRECTIVE
 = 267,

52 
	mEXTERN_DIRECTIVE
 = 268,

53 
	mFILE_DIRECTIVE
 = 269,

54 
	mFUNC_DIRECTIVE
 = 270,

55 
	mGLOBAL_DIRECTIVE
 = 271,

56 
	mLOCAL_DIRECTIVE
 = 272,

57 
	mLOC_DIRECTIVE
 = 273,

58 
	mMAXNCTAPERSM_DIRECTIVE
 = 274,

59 
	mMAXNNREG_DIRECTIVE
 = 275,

60 
	mMAXNTID_DIRECTIVE
 = 276,

61 
	mMINNCTAPERSM_DIRECTIVE
 = 277,

62 
	mPARAM_DIRECTIVE
 = 278,

63 
	mPRAGMA_DIRECTIVE
 = 279,

64 
	mREG_DIRECTIVE
 = 280,

65 
	mREQNTID_DIRECTIVE
 = 281,

66 
	mSECTION_DIRECTIVE
 = 282,

67 
	mSHARED_DIRECTIVE
 = 283,

68 
	mSREG_DIRECTIVE
 = 284,

69 
	mSTRUCT_DIRECTIVE
 = 285,

70 
	mSURF_DIRECTIVE
 = 286,

71 
	mTARGET_DIRECTIVE
 = 287,

72 
	mTEX_DIRECTIVE
 = 288,

73 
	mUNION_DIRECTIVE
 = 289,

74 
	mVERSION_DIRECTIVE
 = 290,

75 
	mADDRESS_SIZE_DIRECTIVE
 = 291,

76 
	mVISIBLE_DIRECTIVE
 = 292,

77 
	mIDENTIFIER
 = 293,

78 
	mINT_OPERAND
 = 294,

79 
	mFLOAT_OPERAND
 = 295,

80 
	mDOUBLE_OPERAND
 = 296,

81 
	mS8_TYPE
 = 297,

82 
	mS16_TYPE
 = 298,

83 
	mS32_TYPE
 = 299,

84 
	mS64_TYPE
 = 300,

85 
	mU8_TYPE
 = 301,

86 
	mU16_TYPE
 = 302,

87 
	mU32_TYPE
 = 303,

88 
	mU64_TYPE
 = 304,

89 
	mF16_TYPE
 = 305,

90 
	mF32_TYPE
 = 306,

91 
	mF64_TYPE
 = 307,

92 
	mFF64_TYPE
 = 308,

93 
	mB8_TYPE
 = 309,

94 
	mB16_TYPE
 = 310,

95 
	mB32_TYPE
 = 311,

96 
	mB64_TYPE
 = 312,

97 
	mBB64_TYPE
 = 313,

98 
	mBB128_TYPE
 = 314,

99 
	mPRED_TYPE
 = 315,

100 
	mTEXREF_TYPE
 = 316,

101 
	mSAMPLERREF_TYPE
 = 317,

102 
	mSURFREF_TYPE
 = 318,

103 
	mV2_TYPE
 = 319,

104 
	mV3_TYPE
 = 320,

105 
	mV4_TYPE
 = 321,

106 
	mCOMMA
 = 322,

107 
	mPRED
 = 323,

108 
	mHALF_OPTION
 = 324,

109 
	mEQ_OPTION
 = 325,

110 
	mNE_OPTION
 = 326,

111 
	mLT_OPTION
 = 327,

112 
	mLE_OPTION
 = 328,

113 
	mGT_OPTION
 = 329,

114 
	mGE_OPTION
 = 330,

115 
	mLO_OPTION
 = 331,

116 
	mLS_OPTION
 = 332,

117 
	mHI_OPTION
 = 333,

118 
	mHS_OPTION
 = 334,

119 
	mEQU_OPTION
 = 335,

120 
	mNEU_OPTION
 = 336,

121 
	mLTU_OPTION
 = 337,

122 
	mLEU_OPTION
 = 338,

123 
	mGTU_OPTION
 = 339,

124 
	mGEU_OPTION
 = 340,

125 
	mNUM_OPTION
 = 341,

126 
	mNAN_OPTION
 = 342,

127 
	mCF_OPTION
 = 343,

128 
	mSF_OPTION
 = 344,

129 
	mNSF_OPTION
 = 345,

130 
	mLEFT_SQUARE_BRACKET
 = 346,

131 
	mRIGHT_SQUARE_BRACKET
 = 347,

132 
	mWIDE_OPTION
 = 348,

133 
	mSPECIAL_REGISTER
 = 349,

134 
	mMINUS
 = 350,

135 
	mPLUS
 = 351,

136 
	mCOLON
 = 352,

137 
	mSEMI_COLON
 = 353,

138 
	mEXCLAMATION
 = 354,

139 
	mPIPE
 = 355,

140 
	mRIGHT_BRACE
 = 356,

141 
	mLEFT_BRACE
 = 357,

142 
	mEQUALS
 = 358,

143 
	mPERIOD
 = 359,

144 
	mBACKSLASH
 = 360,

145 
	mDIMENSION_MODIFIER
 = 361,

146 
	mRN_OPTION
 = 362,

147 
	mRZ_OPTION
 = 363,

148 
	mRM_OPTION
 = 364,

149 
	mRP_OPTION
 = 365,

150 
	mRNI_OPTION
 = 366,

151 
	mRZI_OPTION
 = 367,

152 
	mRMI_OPTION
 = 368,

153 
	mRPI_OPTION
 = 369,

154 
	mUNI_OPTION
 = 370,

155 
	mGEOM_MODIFIER_1D
 = 371,

156 
	mGEOM_MODIFIER_2D
 = 372,

157 
	mGEOM_MODIFIER_3D
 = 373,

158 
	mSAT_OPTION
 = 374,

159 
	mFTZ_OPTION
 = 375,

160 
	mNEG_OPTION
 = 376,

161 
	mATOMIC_AND
 = 377,

162 
	mATOMIC_OR
 = 378,

163 
	mATOMIC_XOR
 = 379,

164 
	mATOMIC_CAS
 = 380,

165 
	mATOMIC_EXCH
 = 381,

166 
	mATOMIC_ADD
 = 382,

167 
	mATOMIC_INC
 = 383,

168 
	mATOMIC_DEC
 = 384,

169 
	mATOMIC_MIN
 = 385,

170 
	mATOMIC_MAX
 = 386,

171 
	mLEFT_ANGLE_BRACKET
 = 387,

172 
	mRIGHT_ANGLE_BRACKET
 = 388,

173 
	mLEFT_PAREN
 = 389,

174 
	mRIGHT_PAREN
 = 390,

175 
	mAPPROX_OPTION
 = 391,

176 
	mFULL_OPTION
 = 392,

177 
	mANY_OPTION
 = 393,

178 
	mALL_OPTION
 = 394,

179 
	mGLOBAL_OPTION
 = 395,

180 
	mCTA_OPTION
 = 396,

181 
	mSYS_OPTION
 = 397,

182 
	mEXIT_OPTION
 = 398,

183 
	mABS_OPTION
 = 399,

184 
	mTO_OPTION
 = 400,

185 
	mCA_OPTION
 = 401,

186 
	mCG_OPTION
 = 402,

187 
	mCS_OPTION
 = 403,

188 
	mLU_OPTION
 = 404,

189 
	mCV_OPTION
 = 405,

190 
	mWB_OPTION
 = 406,

191 
	mWT_OPTION
 = 407

197 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


198 
	uYYSTYPE


204 
	mdoubÀ_vÆue
;

205 
	mÊﬂt_vÆue
;

206 
	möt_vÆue
;

207 * 
	m°rög_vÆue
;

208 * 
	m±r_vÆue
;

214 } 
	tYYSTYPE
;

215 
	#YYSTYPE_IS_TRIVIAL
 1

	)

216 
	#yy°y≥
 
YYSTYPE


	)

217 
	#YYSTYPE_IS_DECLARED
 1

	)

220 
YYSTYPE
 
±x_lvÆ
;

	@src/cuda-sim/ptx.y

31 
doubÀ_vÆue
;

32 
Êﬂt_vÆue
;

33 
öt_vÆue
;

34 * 
°rög_vÆue
;

35 * 
±r_vÆue
;

38 %
tokí
 <
°rög_vÆue
> 
STRING


39 %
tokí
 <
öt_vÆue
> 
OPCODE


40 %
tokí
 
ALIGN_DIRECTIVE


41 %
tokí
 
BRANCHTARGETS_DIRECTIVE


42 %
tokí
 
BYTE_DIRECTIVE


43 %
tokí
 
CALLPROTOTYPE_DIRECTIVE


44 %
tokí
 
CALLTARGETS_DIRECTIVE


45 %
tokí
 <
öt_vÆue
> 
CONST_DIRECTIVE


46 %
tokí
 
CONSTPTR_DIRECTIVE


47 %
tokí
 
ENTRY_DIRECTIVE


48 %
tokí
 
EXTERN_DIRECTIVE


49 %
tokí
 
FILE_DIRECTIVE


50 %
tokí
 
FUNC_DIRECTIVE


51 %
tokí
 
GLOBAL_DIRECTIVE


52 %
tokí
 
LOCAL_DIRECTIVE


53 %
tokí
 
LOC_DIRECTIVE


54 %
tokí
 
MAXNCTAPERSM_DIRECTIVE


55 %
tokí
 
MAXNNREG_DIRECTIVE


56 %
tokí
 
MAXNTID_DIRECTIVE


57 %
tokí
 
MINNCTAPERSM_DIRECTIVE


58 %
tokí
 
PARAM_DIRECTIVE


59 %
tokí
 
PRAGMA_DIRECTIVE


60 %
tokí
 
REG_DIRECTIVE


61 %
tokí
 
REQNTID_DIRECTIVE


62 %
tokí
 
SECTION_DIRECTIVE


63 %
tokí
 
SHARED_DIRECTIVE


64 %
tokí
 
SREG_DIRECTIVE


65 %
tokí
 
STRUCT_DIRECTIVE


66 %
tokí
 
SURF_DIRECTIVE


67 %
tokí
 
TARGET_DIRECTIVE


68 %
tokí
 
TEX_DIRECTIVE


69 %
tokí
 
UNION_DIRECTIVE


70 %
tokí
 
VERSION_DIRECTIVE


71 %
tokí
 
ADDRESS_SIZE_DIRECTIVE


72 %
tokí
 
VISIBLE_DIRECTIVE


73 %
tokí
 <
°rög_vÆue
> 
IDENTIFIER


74 %
tokí
 <
öt_vÆue
> 
INT_OPERAND


75 %
tokí
 <
Êﬂt_vÆue
> 
FLOAT_OPERAND


76 %
tokí
 <
doubÀ_vÆue
> 
DOUBLE_OPERAND


77 %
tokí
 
S8_TYPE


78 %
tokí
 
S16_TYPE


79 %
tokí
 
S32_TYPE


80 %
tokí
 
S64_TYPE


81 %
tokí
 
U8_TYPE


82 %
tokí
 
U16_TYPE


83 %
tokí
 
U32_TYPE


84 %
tokí
 
U64_TYPE


85 %
tokí
 
F16_TYPE


86 %
tokí
 
F32_TYPE


87 %
tokí
 
F64_TYPE


88 %
tokí
 
FF64_TYPE


89 %
tokí
 
B8_TYPE


90 %
tokí
 
B16_TYPE


91 %
tokí
 
B32_TYPE


92 %
tokí
 
B64_TYPE


93 %
tokí
 
BB64_TYPE


94 %
tokí
 
BB128_TYPE


95 %
tokí
 
PRED_TYPE


96 %
tokí
 
TEXREF_TYPE


97 %
tokí
 
SAMPLERREF_TYPE


98 %
tokí
 
SURFREF_TYPE


99 %
tokí
 
V2_TYPE


100 %
tokí
 
V3_TYPE


101 %
tokí
 
V4_TYPE


102 %
tokí
 
COMMA


103 %
tokí
 
PRED


104 %
tokí
 
HALF_OPTION


105 %
tokí
 
EQ_OPTION


106 %
tokí
 
NE_OPTION


107 %
tokí
 
LT_OPTION


108 %
tokí
 
LE_OPTION


109 %
tokí
 
GT_OPTION


110 %
tokí
 
GE_OPTION


111 %
tokí
 
LO_OPTION


112 %
tokí
 
LS_OPTION


113 %
tokí
 
HI_OPTION


114 %
tokí
 
HS_OPTION


115 %
tokí
 
EQU_OPTION


116 %
tokí
 
NEU_OPTION


117 %
tokí
 
LTU_OPTION


118 %
tokí
 
LEU_OPTION


119 %
tokí
 
GTU_OPTION


120 %
tokí
 
GEU_OPTION


121 %
tokí
 
NUM_OPTION


122 %
tokí
 
NAN_OPTION


123 %
tokí
 
CF_OPTION


124 %
tokí
 
SF_OPTION


125 %
tokí
 
NSF_OPTION


126 %
tokí
 
LEFT_SQUARE_BRACKET


127 %
tokí
 
RIGHT_SQUARE_BRACKET


128 %
tokí
 
WIDE_OPTION


129 %
tokí
 <
öt_vÆue
> 
SPECIAL_REGISTER


130 %
tokí
 
MINUS


131 %
tokí
 
PLUS


132 %
tokí
 
COLON


133 %
tokí
 
SEMI_COLON


134 %
tokí
 
EXCLAMATION


135 %
tokí
 
PIPE


136 %
tokí
 
RIGHT_BRACE


137 %
tokí
 
LEFT_BRACE


138 %
tokí
 
EQUALS


139 %
tokí
 
PERIOD


140 %
tokí
 
BACKSLASH


141 %
tokí
 <
öt_vÆue
> 
DIMENSION_MODIFIER


142 %
tokí
 
RN_OPTION


143 %
tokí
 
RZ_OPTION


144 %
tokí
 
RM_OPTION


145 %
tokí
 
RP_OPTION


146 %
tokí
 
RNI_OPTION


147 %
tokí
 
RZI_OPTION


148 %
tokí
 
RMI_OPTION


149 %
tokí
 
RPI_OPTION


150 %
tokí
 
UNI_OPTION


151 %
tokí
 
GEOM_MODIFIER_1D


152 %
tokí
 
GEOM_MODIFIER_2D


153 %
tokí
 
GEOM_MODIFIER_3D


154 %
tokí
 
SAT_OPTION


155 %
tokí
 
FTZ_OPTION


156 %
tokí
 
NEG_OPTION


157 %
tokí
 
ATOMIC_AND


158 %
tokí
 
ATOMIC_OR


159 %
tokí
 
ATOMIC_XOR


160 %
tokí
 
ATOMIC_CAS


161 %
tokí
 
ATOMIC_EXCH


162 %
tokí
 
ATOMIC_ADD


163 %
tokí
 
ATOMIC_INC


164 %
tokí
 
ATOMIC_DEC


165 %
tokí
 
ATOMIC_MIN


166 %
tokí
 
ATOMIC_MAX


167 %
tokí
 
LEFT_ANGLE_BRACKET


168 %
tokí
 
RIGHT_ANGLE_BRACKET


169 %
tokí
 
LEFT_PAREN


170 %
tokí
 
RIGHT_PAREN


171 %
tokí
 
APPROX_OPTION


172 %
tokí
 
FULL_OPTION


173 %
tokí
 
ANY_OPTION


174 %
tokí
 
ALL_OPTION


175 %
tokí
 
GLOBAL_OPTION


176 %
tokí
 
CTA_OPTION


177 %
tokí
 
SYS_OPTION


178 %
tokí
 
EXIT_OPTION


179 %
tokí
 
ABS_OPTION


180 %
tokí
 
TO_OPTION


181 %
tokí
 
CA_OPTION
;

182 %
tokí
 
CG_OPTION
;

183 %
tokí
 
CS_OPTION
;

184 %
tokí
 
LU_OPTION
;

185 %
tokí
 
CV_OPTION
;

186 %
tokí
 
WB_OPTION
;

187 %
tokí
 
WT_OPTION
;

189 %
ty≥
 <
öt_vÆue
> 
fun˘i⁄_de˛_hódî


190 %
ty≥
 <
±r_vÆue
> 
fun˘i⁄_de˛


193 
	~"±x_∑r£r.h
"

194 
	~<°dlib.h
>

195 
	~<°rög.h
>

196 
	~<m©h.h
>

197 
sy¡ax_nŸ_im∂emíãd
();

198 
g_func_de˛
;

199 
±x_Àx
();

200 
±x_îr‹
(const *);

203 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

205 
öput
:

206 | 
öput
 
dúe˘ive_°©emít


207 | 
öput
 
fun˘i⁄_de‚


208 | 
öput
 
fun˘i⁄_de˛


211 
fun˘i⁄_de‚
: 
fun˘i⁄_de˛
 { 
	`£t_symèb
(
$1
); 
	`func_hódî
(".skù"); } 
°©emít_block
 { 
	`íd_fun˘i⁄
(); }

212 | 
fun˘i⁄_de˛
 { 
	`£t_symèb
(
$1
); } 
block_•ec
 { 
	`func_hódî
(".skù"); } 
°©emít_block
 { 
	`íd_fun˘i⁄
(); }

215 
block_•ec
: 
MAXNTID_DIRECTIVE
 
INT_OPERAND
 
COMMA
 INT_OPERAND COMMA INT_OPERAND {
	`func_hódî_öfo_öt
(".max¡id", 
$2
);

216 
	`func_hódî_öfo_öt
(",", 
$4
);

217 
	`func_hódî_öfo_öt
(",", 
$6
); }

220 
fun˘i⁄_de˛
: 
fun˘i⁄_de˛_hódî
 
LEFT_PAREN
 { 
	`°¨t_fun˘i⁄
(
$1
); 
	`func_hódî_öfo
("(");} 
∑øm_íåy
 
RIGHT_PAREN
 {func_hódî_öfo(")");} 
fun˘i⁄_idít_∑øm
 { 
$$
 = 
	`ª£t_symèb
(); }

221 | 
fun˘i⁄_de˛_hódî
 { 
	`°¨t_fun˘i⁄
(
$1
); } 
fun˘i⁄_idít_∑øm
 { 
$$
 = 
	`ª£t_symèb
(); }

222 | 
fun˘i⁄_de˛_hódî
 { 
	`°¨t_fun˘i⁄
(
$1
); 
	`add_fun˘i⁄_«me
(""); 
g_func_de˛
=0; 
$$
 = 
	`ª£t_symèb
(); }

225 
fun˘i⁄_idít_∑øm
: 
IDENTIFIER
 { 
	`add_fun˘i⁄_«me
(
$1
); } 
LEFT_PAREN
 {
	`func_hódî_öfo
("(");} 
∑øm_li°
 
RIGHT_PAREN
 { 
g_func_de˛
=0; func_header_info(")"); }

226 | 
IDENTIFIER
 { 
	`add_fun˘i⁄_«me
(
$1
); 
g_func_de˛
=0; }

229 
fun˘i⁄_de˛_hódî
: 
ENTRY_DIRECTIVE
 { 
$$
 = 1; 
g_func_de˛
=1; 
	`func_hódî
(".entry"); }

230 | 
FUNC_DIRECTIVE
 { 
$$
 = 0; 
g_func_de˛
=1; 
	`func_hódî
(".func"); }

231 | 
VISIBLE_DIRECTIVE
 
FUNC_DIRECTIVE
 { 
$$
 = 0; 
g_func_de˛
=1; 
	`func_hódî
(".func"); }

232 | 
EXTERN_DIRECTIVE
 
FUNC_DIRECTIVE
 { 
$$
 = 2; 
g_func_de˛
=1; 
	`func_hódî
(".func"); }

235 
∑øm_li°
:

236 | 
∑øm_íåy
 { 
	`add_dúe˘ive
(); }

237 | 
∑øm_li°
 
COMMA
 {
	`func_hódî_öfo
(",");} 
∑øm_íåy
 { 
	`add_dúe˘ive
(); }

239 
∑øm_íåy
: 
PARAM_DIRECTIVE
 { 
	`add_•a˚_•ec
(
∑øm_•a˚_un˛assifõd
,0); } 
v¨übÀ_•ec
 
idítifõr_•ec
 { 
	`add_fun˘i⁄_¨g
(); }

240 | 
REG_DIRECTIVE
 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); } 
v¨übÀ_•ec
 
idítifõr_•ec
 { 
	`add_fun˘i⁄_¨g
(); }

242 
°©emít_block
: 
LEFT_BRACE
 
°©emít_li°
 
RIGHT_BRACE


244 
°©emít_li°
: 
dúe˘ive_°©emít
 { 
	`add_dúe˘ive
(); }

245 | 
ö°ru˘i⁄_°©emít
 { 
	`add_ö°ru˘i⁄
(); }

246 | 
°©emít_li°
 
dúe˘ive_°©emít
 { 
	`add_dúe˘ive
(); }

247 | 
°©emít_li°
 
ö°ru˘i⁄_°©emít
 { 
	`add_ö°ru˘i⁄
(); }

248 | 
°©emít_li°
 
°©emít_block


249 | 
°©emít_block


252 
dúe˘ive_°©emít
: 
v¨übÀ_de˛¨©i⁄
 
SEMI_COLON


253 | 
VERSION_DIRECTIVE
 
DOUBLE_OPERAND
 { 
	`add_vîsi⁄_öfo
(
$2
, 0); }

254 | 
VERSION_DIRECTIVE
 
DOUBLE_OPERAND
 
PLUS
 { 
	`add_vîsi⁄_öfo
(
$2
,1); }

255 | 
ADDRESS_SIZE_DIRECTIVE
 
INT_OPERAND
 { }

256 | 
TARGET_DIRECTIVE
 
IDENTIFIER
 
COMMA
 IDENTIFIER { 
	`èrgë_hódî2
(
$2
,
$4
); }

257 | 
TARGET_DIRECTIVE
 
IDENTIFIER
 
COMMA
 IDENTIFIER COMMA IDENTIFIER { 
	`èrgë_hódî3
(
$2
,
$4
,
$6
); }

258 | 
TARGET_DIRECTIVE
 
IDENTIFIER
 { 
	`èrgë_hódî
(
$2
); }

259 | 
FILE_DIRECTIVE
 
INT_OPERAND
 
STRING
 { 
	`add_fûe
(
$2
,
$3
); }

260 | 
LOC_DIRECTIVE
 
INT_OPERAND
 INT_OPERAND INT_OPERAND

261 | 
PRAGMA_DIRECTIVE
 
STRING
 
SEMI_COLON
 { 
	`add_¥agma
(
$2
); }

264 
v¨übÀ_de˛¨©i⁄
: 
v¨übÀ_•ec
 
idítifõr_li°
 { 
	`add_v¨übÀs
(); }

265 | 
v¨übÀ_•ec
 
idítifõr_•ec
 
EQUALS
 
öôülizî_li°
 { 
	`add_v¨übÀs
(); }

266 | 
v¨übÀ_•ec
 
idítifõr_•ec
 
EQUALS
 
lôîÆ_›î™d
 { 
	`add_v¨übÀs
(); }

267 | 
CONSTPTR_DIRECTIVE
 
IDENTIFIER
 
COMMA
 IDENTIFIER COMMA 
INT_OPERAND
 { 
	`add_c⁄°±r
(
$2
, 
$4
, 
$6
); }

270 
v¨übÀ_•ec
: 
v¨_•ec_li°
 { 
	`£t_v¨übÀ_ty≥
(); }

272 
idítifõr_li°
: 
idítifõr_•ec


273 | 
idítifõr_li°
 
COMMA
 
idítifõr_•ec
;

275 
idítifõr_•ec
: 
IDENTIFIER
 { 
	`add_idítifõr
(
$1
,0,
NON_ARRAY_IDENTIFIER
); 
	`func_hódî_öfo
($1);}

276 | 
IDENTIFIER
 
LEFT_ANGLE_BRACKET
 
INT_OPERAND
 
RIGHT_ANGLE_BRACKET
 { 
	`func_hódî_öfo
(
$1
); 
	`func_hódî_öfo_öt
("<", 
$3
); func_header_info(">");

277 
i
,
lba£
,
l
;

278 *
id
 = 
NULL
;

279 
lba£
 = 
	`°æí
(
$1
);

280  
i
=0; i < 
$3
; i++ ) {

281 
l
 = 
lba£
 + ()
	`log10
(
i
+1)+10;

282 
id
 = (*Ë
	`mÆloc
(
l
);

283 
	`¢¥ötf
(
id
,
l
,"%s%u",
$1
,
i
);

284 
	`add_idítifõr
(
id
,0,
NON_ARRAY_IDENTIFIER
);

286 
	`‰ì
(
$1
);

288 | 
IDENTIFIER
 
LEFT_SQUARE_BRACKET
 
RIGHT_SQUARE_BRACKET
 { 
	`add_idítifõr
(
$1
,0,
ARRAY_IDENTIFIER_NO_DIM
); 
	`func_hódî_öfo
($1); func_header_info("["); func_header_info("]");}

289 | 
IDENTIFIER
 
LEFT_SQUARE_BRACKET
 
INT_OPERAND
 
RIGHT_SQUARE_BRACKET
 { 
	`add_idítifõr
(
$1
,
$3
,
ARRAY_IDENTIFIER
); 
	`func_hódî_öfo
($1); 
	`func_hódî_öfo_öt
("[",$3); func_header_info("]");}

292 
v¨_•ec_li°
: 
v¨_•ec


293 | 
v¨_•ec_li°
 
v¨_•ec
;

295 
v¨_•ec
: 
•a˚_•ec


296 | 
ty≥_•ec


297 | 
Æign_•ec


298 | 
EXTERN_DIRECTIVE
 { 
	`add_exã∫_•ec
(); }

301 
Æign_•ec
: 
ALIGN_DIRECTIVE
 
INT_OPERAND
 { 
	`add_Æignmít_•ec
(
$2
); }

303 
•a˚_•ec
: 
REG_DIRECTIVE
 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); }

304 | 
SREG_DIRECTIVE
 { 
	`add_•a˚_•ec
(
ªg_•a˚
,0); }

305 | 
addªsßbÀ_•ec


308 
addªsßbÀ_•ec
: 
CONST_DIRECTIVE
 { 
	`add_•a˚_•ec
(
c⁄°_•a˚
,
$1
); }

309 | 
GLOBAL_DIRECTIVE
 { 
	`add_•a˚_•ec
(
globÆ_•a˚
,0); }

310 | 
LOCAL_DIRECTIVE
 { 
	`add_•a˚_•ec
(
loˇl_•a˚
,0); }

311 | 
PARAM_DIRECTIVE
 { 
	`add_•a˚_•ec
(
∑øm_•a˚_un˛assifõd
,0); }

312 | 
SHARED_DIRECTIVE
 { 
	`add_•a˚_•ec
(
sh¨ed_•a˚
,0); }

313 | 
SURF_DIRECTIVE
 { 
	`add_•a˚_•ec
(
surf_•a˚
,0); }

314 | 
TEX_DIRECTIVE
 { 
	`add_•a˚_•ec
(
ãx_•a˚
,0); }

317 
ty≥_•ec
: 
sˇœr_ty≥


318 | 
ve˘‹_•ec
 
sˇœr_ty≥


321 
ve˘‹_•ec
: 
V2_TYPE
 { 
	`add_›ti⁄
(V2_TYPE); 
	`func_hódî_öfo
(".v2");}

322 | 
V3_TYPE
 { 
	`add_›ti⁄
(V3_TYPE); 
	`func_hódî_öfo
(".v3");}

323 | 
V4_TYPE
 { 
	`add_›ti⁄
(V4_TYPE); 
	`func_hódî_öfo
(".v4");}

326 
sˇœr_ty≥
: 
S8_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( S8_TYPE ); }

327 | 
S16_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( S16_TYPE ); }

328 | 
S32_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( S32_TYPE ); }

329 | 
S64_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( S64_TYPE ); }

330 | 
U8_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( U8_TYPE ); }

331 | 
U16_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( U16_TYPE ); }

332 | 
U32_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( U32_TYPE ); }

333 | 
U64_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( U64_TYPE ); }

334 | 
F16_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( F16_TYPE ); }

335 | 
F32_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( F32_TYPE ); }

336 | 
F64_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( F64_TYPE ); }

337 | 
FF64_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( FF64_TYPE ); }

338 | 
B8_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( B8_TYPE ); }

339 | 
B16_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( B16_TYPE ); }

340 | 
B32_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( B32_TYPE ); }

341 | 
B64_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( B64_TYPE ); }

342 | 
BB64_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( BB64_TYPE ); }

343 | 
BB128_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( BB128_TYPE ); }

344 | 
PRED_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( PRED_TYPE ); }

345 | 
TEXREF_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( TEXREF_TYPE ); }

346 | 
SAMPLERREF_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( SAMPLERREF_TYPE ); }

347 | 
SURFREF_TYPE
 { 
	`add_sˇœr_ty≥_•ec
( SURFREF_TYPE ); }

350 
öôülizî_li°
: 
LEFT_BRACE
 
lôîÆ_li°
 
RIGHT_BRACE
 { 
	`add_¨øy_öôülizî
(); }

351 | 
LEFT_BRACE
 
öôülizî_li°
 
RIGHT_BRACE
 { 
	`sy¡ax_nŸ_im∂emíãd
(); }

353 
lôîÆ_li°
: 
lôîÆ_›î™d


354 | 
lôîÆ_li°
 
COMMA
 
lôîÆ_›î™d
;

356 
ö°ru˘i⁄_°©emít
: 
ö°ru˘i⁄
 
SEMI_COLON


357 | 
IDENTIFIER
 
COLON
 { 
	`add_œbñ
(
$1
); }

358 | 
¥ed_•ec
 
ö°ru˘i⁄
 
SEMI_COLON
;

360 
ö°ru˘i⁄
: 
›code_•ec
 
LEFT_PAREN
 
›î™d
 
RIGHT_PAREN
 { 
	`£t_ªtu∫
(); } 
COMMA
 o≥ønd COMMA LEFT_PAREN 
›î™d_li°
 RIGHT_PAREN

361 | 
›code_•ec
 
›î™d
 
COMMA
 
LEFT_PAREN
 
›î™d_li°
 
RIGHT_PAREN


362 | 
›code_•ec
 
›î™d
 
COMMA
 
LEFT_PAREN
 
RIGHT_PAREN


363 | 
›code_•ec
 
›î™d_li°


364 | 
›code_•ec


367 
›code_•ec
: 
OPCODE
 { 
	`add_›code
(
$1
); } 
›ti⁄_li°


368 | 
OPCODE
 { 
	`add_›code
(
$1
); }

370 
¥ed_•ec
: 
PRED
 
IDENTIFIER
 { 
	`add_¥ed
(
$2
,0, -1); }

371 | 
PRED
 
EXCLAMATION
 
IDENTIFIER
 { 
	`add_¥ed
(
$3
,1, -1); }

372 | 
PRED
 
IDENTIFIER
 
EQ_OPTION
 { 
	`add_¥ed
(
$2
,0,2); }

373 | 
PRED
 
IDENTIFIER
 
LE_OPTION
 { 
	`add_¥ed
(
$2
,0,3); }

374 | 
PRED
 
IDENTIFIER
 
NE_OPTION
 { 
	`add_¥ed
(
$2
,0,5); }

375 | 
PRED
 
IDENTIFIER
 
GE_OPTION
 { 
	`add_¥ed
(
$2
,0,6); }

376 | 
PRED
 
IDENTIFIER
 
EQU_OPTION
 { 
	`add_¥ed
(
$2
,0,10); }

377 | 
PRED
 
IDENTIFIER
 
GTU_OPTION
 { 
	`add_¥ed
(
$2
,0,12); }

378 | 
PRED
 
IDENTIFIER
 
NEU_OPTION
 { 
	`add_¥ed
(
$2
,0,13); }

379 | 
PRED
 
IDENTIFIER
 
CF_OPTION
 { 
	`add_¥ed
(
$2
,0,17); }

380 | 
PRED
 
IDENTIFIER
 
SF_OPTION
 { 
	`add_¥ed
(
$2
,0,19); }

381 | 
PRED
 
IDENTIFIER
 
NSF_OPTION
 { 
	`add_¥ed
(
$2
,0,28); }

384 
›ti⁄_li°
: 
›ti⁄


385 | 
›ti⁄
 
›ti⁄_li°
 ;

387 
›ti⁄
: 
ty≥_•ec


388 | 
com∑ª_•ec


389 | 
addªsßbÀ_•ec


390 | 
roundög_mode


391 | 
UNI_OPTION
 { 
	`add_›ti⁄
(UNI_OPTION); }

392 | 
WIDE_OPTION
 { 
	`add_›ti⁄
(WIDE_OPTION); }

393 | 
ANY_OPTION
 { 
	`add_›ti⁄
(ANY_OPTION); }

394 | 
ALL_OPTION
 { 
	`add_›ti⁄
(ALL_OPTION); }

395 | 
GLOBAL_OPTION
 { 
	`add_›ti⁄
(GLOBAL_OPTION); }

396 | 
CTA_OPTION
 { 
	`add_›ti⁄
(CTA_OPTION); }

397 | 
SYS_OPTION
 { 
	`add_›ti⁄
(SYS_OPTION); }

398 | 
GEOM_MODIFIER_1D
 { 
	`add_›ti⁄
(GEOM_MODIFIER_1D); }

399 | 
GEOM_MODIFIER_2D
 { 
	`add_›ti⁄
(GEOM_MODIFIER_2D); }

400 | 
GEOM_MODIFIER_3D
 { 
	`add_›ti⁄
(GEOM_MODIFIER_3D); }

401 | 
SAT_OPTION
 { 
	`add_›ti⁄
(SAT_OPTION); }

402 | 
FTZ_OPTION
 { 
	`add_›ti⁄
(FTZ_OPTION); }

403 | 
NEG_OPTION
 { 
	`add_›ti⁄
(NEG_OPTION); }

404 | 
APPROX_OPTION
 { 
	`add_›ti⁄
(APPROX_OPTION); }

405 | 
FULL_OPTION
 { 
	`add_›ti⁄
(FULL_OPTION); }

406 | 
EXIT_OPTION
 { 
	`add_›ti⁄
(EXIT_OPTION); }

407 | 
ABS_OPTION
 { 
	`add_›ti⁄
(ABS_OPTION); }

408 | 
©omic_›î©i⁄_•ec
 ;

409 | 
TO_OPTION
 { 
	`add_›ti⁄
(TO_OPTION); }

410 | 
HALF_OPTION
 { 
	`add_›ti⁄
(HALF_OPTION); }

411 | 
CA_OPTION
 { 
	`add_›ti⁄
(CA_OPTION); }

412 | 
CG_OPTION
 { 
	`add_›ti⁄
(CG_OPTION); }

413 | 
CS_OPTION
 { 
	`add_›ti⁄
(CS_OPTION); }

414 | 
LU_OPTION
 { 
	`add_›ti⁄
(LU_OPTION); }

415 | 
CV_OPTION
 { 
	`add_›ti⁄
(CV_OPTION); }

416 | 
WB_OPTION
 { 
	`add_›ti⁄
(WB_OPTION); }

417 | 
WT_OPTION
 { 
	`add_›ti⁄
(WT_OPTION); }

420 
©omic_›î©i⁄_•ec
: 
ATOMIC_AND
 { 
	`add_›ti⁄
(ATOMIC_AND); }

421 | 
ATOMIC_OR
 { 
	`add_›ti⁄
(ATOMIC_OR); }

422 | 
ATOMIC_XOR
 { 
	`add_›ti⁄
(ATOMIC_XOR); }

423 | 
ATOMIC_CAS
 { 
	`add_›ti⁄
(ATOMIC_CAS); }

424 | 
ATOMIC_EXCH
 { 
	`add_›ti⁄
(ATOMIC_EXCH); }

425 | 
ATOMIC_ADD
 { 
	`add_›ti⁄
(ATOMIC_ADD); }

426 | 
ATOMIC_INC
 { 
	`add_›ti⁄
(ATOMIC_INC); }

427 | 
ATOMIC_DEC
 { 
	`add_›ti⁄
(ATOMIC_DEC); }

428 | 
ATOMIC_MIN
 { 
	`add_›ti⁄
(ATOMIC_MIN); }

429 | 
ATOMIC_MAX
 { 
	`add_›ti⁄
(ATOMIC_MAX); }

432 
roundög_mode
: 
Êﬂtög_poöt_roundög_mode


433 | 
öãgî_roundög_mode
;

435 
Êﬂtög_poöt_roundög_mode
: 
RN_OPTION
 { 
	`add_›ti⁄
(RN_OPTION); }

436 | 
RZ_OPTION
 { 
	`add_›ti⁄
(RZ_OPTION); }

437 | 
RM_OPTION
 { 
	`add_›ti⁄
(RM_OPTION); }

438 | 
RP_OPTION
 { 
	`add_›ti⁄
(RP_OPTION); }

441 
öãgî_roundög_mode
: 
RNI_OPTION
 { 
	`add_›ti⁄
(RNI_OPTION); }

442 | 
RZI_OPTION
 { 
	`add_›ti⁄
(RZI_OPTION); }

443 | 
RMI_OPTION
 { 
	`add_›ti⁄
(RMI_OPTION); }

444 | 
RPI_OPTION
 { 
	`add_›ti⁄
(RPI_OPTION); }

447 
com∑ª_•ec
:
EQ_OPTION
 { 
	`add_›ti⁄
(EQ_OPTION); }

448 | 
NE_OPTION
 { 
	`add_›ti⁄
(NE_OPTION); }

449 | 
LT_OPTION
 { 
	`add_›ti⁄
(LT_OPTION); }

450 | 
LE_OPTION
 { 
	`add_›ti⁄
(LE_OPTION); }

451 | 
GT_OPTION
 { 
	`add_›ti⁄
(GT_OPTION); }

452 | 
GE_OPTION
 { 
	`add_›ti⁄
(GE_OPTION); }

453 | 
LO_OPTION
 { 
	`add_›ti⁄
(LO_OPTION); }

454 | 
LS_OPTION
 { 
	`add_›ti⁄
(LS_OPTION); }

455 | 
HI_OPTION
 { 
	`add_›ti⁄
(HI_OPTION); }

456 | 
HS_OPTION
 { 
	`add_›ti⁄
(HS_OPTION); }

457 | 
EQU_OPTION
 { 
	`add_›ti⁄
(EQU_OPTION); }

458 | 
NEU_OPTION
 { 
	`add_›ti⁄
(NEU_OPTION); }

459 | 
LTU_OPTION
 { 
	`add_›ti⁄
(LTU_OPTION); }

460 | 
LEU_OPTION
 { 
	`add_›ti⁄
(LEU_OPTION); }

461 | 
GTU_OPTION
 { 
	`add_›ti⁄
(GTU_OPTION); }

462 | 
GEU_OPTION
 { 
	`add_›ti⁄
(GEU_OPTION); }

463 | 
NUM_OPTION
 { 
	`add_›ti⁄
(NUM_OPTION); }

464 | 
NAN_OPTION
 { 
	`add_›ti⁄
(NAN_OPTION); }

467 
›î™d_li°
: 
›î™d


468 | 
›î™d
 
COMMA
 
›î™d_li°
;

470 
›î™d
: 
IDENTIFIER
 { 
	`add_sˇœr_›î™d
–
$1
 ); }

471 | 
EXCLAMATION
 
IDENTIFIER
 { 
	`add_√g_¥ed_›î™d
–
$2
 ); }

472 | 
MINUS
 
IDENTIFIER
 { 
	`add_sˇœr_›î™d
–
$2
 ); 
	`ch™ge_›î™d_√g
(); }

473 | 
mem‹y_›î™d


474 | 
lôîÆ_›î™d


475 | 
buûtö_›î™d


476 | 
ve˘‹_›î™d


477 | 
MINUS
 
ve˘‹_›î™d
 { 
	`ch™ge_›î™d_√g
(); }

478 | 
ãx_›î™d


479 | 
IDENTIFIER
 
PLUS
 
INT_OPERAND
 { 
	`add_addªss_›î™d
(
$1
,
$3
); }

480 | 
IDENTIFIER
 
LO_OPTION
 { 
	`add_sˇœr_›î™d
–
$1
 ); 
	`ch™ge_›î™d_lohi
(1);}

481 | 
MINUS
 
IDENTIFIER
 
LO_OPTION
 { 
	`add_sˇœr_›î™d
–
$2
 ); 
	`ch™ge_›î™d_lohi
(1); 
	`ch™ge_›î™d_√g
();}

482 | 
IDENTIFIER
 
HI_OPTION
 { 
	`add_sˇœr_›î™d
–
$1
 ); 
	`ch™ge_›î™d_lohi
(2);}

483 | 
MINUS
 
IDENTIFIER
 
HI_OPTION
 { 
	`add_sˇœr_›î™d
–
$2
 ); 
	`ch™ge_›î™d_lohi
(2); 
	`ch™ge_›î™d_√g
();}

484 | 
IDENTIFIER
 
PIPE
 IDENTIFIER { 
	`add_2ve˘‹_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1);}

485 | 
IDENTIFIER
 
PIPE
 IDENTIFIER 
LO_OPTION
 { 
	`add_2ve˘‹_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1); 
	`ch™ge_›î™d_lohi
(1);}

486 | 
IDENTIFIER
 
PIPE
 IDENTIFIER 
HI_OPTION
 { 
	`add_2ve˘‹_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(-1); 
	`ch™ge_›î™d_lohi
(2);}

487 | 
IDENTIFIER
 
BACKSLASH
 IDENTIFIER { 
	`add_2ve˘‹_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3);}

488 | 
IDENTIFIER
 
BACKSLASH
 IDENTIFIER 
LO_OPTION
 { 
	`add_2ve˘‹_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3); 
	`ch™ge_›î™d_lohi
(1);}

489 | 
IDENTIFIER
 
BACKSLASH
 IDENTIFIER 
HI_OPTION
 { 
	`add_2ve˘‹_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(-3); 
	`ch™ge_›î™d_lohi
(2);}

492 
ve˘‹_›î™d
: 
LEFT_BRACE
 
IDENTIFIER
 
COMMA
 IDENTIFIER 
RIGHT_BRACE
 { 
	`add_2ve˘‹_›î™d
(
$2
,
$4
); }

493 | 
LEFT_BRACE
 
IDENTIFIER
 
COMMA
 IDENTIFIER COMMA IDENTIFIER 
RIGHT_BRACE
 { 
	`add_3ve˘‹_›î™d
(
$2
,
$4
,
$6
); }

494 | 
LEFT_BRACE
 
IDENTIFIER
 
COMMA
 IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER 
RIGHT_BRACE
 { 
	`add_4ve˘‹_›î™d
(
$2
,
$4
,
$6
,
$8
); }

497 
ãx_›î™d
: 
LEFT_SQUARE_BRACKET
 
IDENTIFIER
 
COMMA
 { 
	`add_sˇœr_›î™d
(
$2
); }

498 
ve˘‹_›î™d


499 
RIGHT_SQUARE_BRACKET


501 
buûtö_›î™d
: 
SPECIAL_REGISTER
 
DIMENSION_MODIFIER
 { 
	`add_buûtö_›î™d
(
$1
,
$2
); }

502 | 
SPECIAL_REGISTER
 { 
	`add_buûtö_›î™d
(
$1
,-1); }

505 
mem‹y_›î™d
 : 
LEFT_SQUARE_BRACKET
 
addªss_ex¥essi⁄
 
RIGHT_SQUARE_BRACKET
 { 
	`add_mem‹y_›î™d
(); }

506 | 
IDENTIFIER
 
LEFT_SQUARE_BRACKET
 
addªss_ex¥essi⁄
 
RIGHT_SQUARE_BRACKET
 { 
	`add_mem‹y_›î™d
(); 
	`ch™ge_mem‹y_addr_•a˚
(
$1
); }

507 | 
IDENTIFIER
 
LEFT_SQUARE_BRACKET
 
lôîÆ_›î™d
 
RIGHT_SQUARE_BRACKET
 { 
	`ch™ge_mem‹y_addr_•a˚
(
$1
); }

508 | 
IDENTIFIER
 
LEFT_SQUARE_BRACKET
 
twö_›î™d
 
RIGHT_SQUARE_BRACKET
 { 
	`ch™ge_mem‹y_addr_•a˚
(
$1
); 
	`add_mem‹y_›î™d
();}

509 | 
MINUS
 
mem‹y_›î™d
 { 
	`ch™ge_›î™d_√g
(); }

512 
twö_›î™d
 : 
IDENTIFIER
 
PLUS
 IDENTIFIER { 
	`add_doubÀ_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); }

513 | 
IDENTIFIER
 
PLUS
 IDENTIFIER 
LO_OPTION
 { 
	`add_doubÀ_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); 
	`ch™ge_›î™d_lohi
(1); }

514 | 
IDENTIFIER
 
PLUS
 IDENTIFIER 
HI_OPTION
 { 
	`add_doubÀ_›î™d
(
$1
,
$3
); 
	`ch™ge_doubÀ_›î™d_ty≥
(1); 
	`ch™ge_›î™d_lohi
(2); }

515 | 
IDENTIFIER
 
PLUS
 
EQUALS
 IDENTIFIER { 
	`add_doubÀ_›î™d
(
$1
,
$4
); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); }

516 | 
IDENTIFIER
 
PLUS
 
EQUALS
 IDENTIFIER 
LO_OPTION
 { 
	`add_doubÀ_›î™d
(
$1
,
$4
); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); 
	`ch™ge_›î™d_lohi
(1); }

517 | 
IDENTIFIER
 
PLUS
 
EQUALS
 IDENTIFIER 
HI_OPTION
 { 
	`add_doubÀ_›î™d
(
$1
,
$4
); 
	`ch™ge_doubÀ_›î™d_ty≥
(2); 
	`ch™ge_›î™d_lohi
(2); }

518 | 
IDENTIFIER
 
PLUS
 
EQUALS
 
INT_OPERAND
 { 
	`add_addªss_›î™d
(
$1
,
$4
); 
	`ch™ge_doubÀ_›î™d_ty≥
(3); }

521 
lôîÆ_›î™d
 : 
INT_OPERAND
 { 
	`add_lôîÆ_öt
(
$1
); }

522 | 
FLOAT_OPERAND
 { 
	`add_lôîÆ_Êﬂt
(
$1
); }

523 | 
DOUBLE_OPERAND
 { 
	`add_lôîÆ_doubÀ
(
$1
); }

526 
addªss_ex¥essi⁄
: 
IDENTIFIER
 { 
	`add_addªss_›î™d
(
$1
,0); }

527 | 
IDENTIFIER
 
LO_OPTION
 { 
	`add_addªss_›î™d
(
$1
,0); 
	`ch™ge_›î™d_lohi
(1);}

528 | 
IDENTIFIER
 
HI_OPTION
 { 
	`add_addªss_›î™d
(
$1
,0); 
	`ch™ge_›î™d_lohi
(2); }

529 | 
IDENTIFIER
 
PLUS
 
INT_OPERAND
 { 
	`add_addªss_›î™d
(
$1
,
$3
); }

532 
	}
%%

534 
±x_löío
;

535 c⁄° *
g_fûíame
;

537 
	$sy¡ax_nŸ_im∂emíãd
()

539 
	`¥ötf
("P¨£Éº‹ (%s:%u):Åhi†sy¡ax i†nŸ (yëËim∂emíãd:\n",
g_fûíame
,
±x_löío
);

540 
	`±x_îr‹
(
NULL
);

541 
	`ab‹t
();

542 
	}
}

	@src/cuda-sim/ptx_ir.cc

29 
	~"±x_∑r£r.h
"

30 
	~"±x_ú.h
"

31 
	~"±x.èb.h
"

32 
	~"›codes.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<li°
>

36 
	~<as£π.h
>

37 
	~<Æg‹ôhm
>

39 
	~"cuda-sim.h
"

41 
	gsymbﬁ
::
sm_√xt_uid
 = 1;

43 
	gsymbﬁ
::
	$gë_uid
()

45 
ªsu…
 = 
sm_√xt_uid
++;

46  
ªsu…
;

47 
	}
}

49 
	gsymbﬁ
::
add_öôülizî
–c⁄° 
°d
::
li°
<
›î™d_öfo
> &
öô
 )

51 
m_öôülizî
 = 
öô
;

54 
	gsymbﬁ
::
	$¥öt_öfo
(
FILE
 *
Â
) const

56 
	`Ârötf
(
Â
,"uid:%u, de˛:%s,Åy≥:%p, ", 
m_uid
, 
m_de˛_loˇti⁄
.
	`c_°r
(), 
m_ty≥
 );

57 if–
m_addªss_vÆid
 )

58 
	`Ârötf
(
Â
,"<address valid>, ");

59 if–
m_is_œbñ
 )

60 
	`Ârötf
(
Â
," is_label ");

61 if–
m_is_sh¨ed
 )

62 
	`Ârötf
(
Â
," is_shared ");

63 if–
m_is_c⁄°
 )

64 
	`Ârötf
(
Â
," is_const ");

65 if–
m_is_globÆ
 )

66 
	`Ârötf
(
Â
," is_global ");

67 if–
m_is_loˇl
 )

68 
	`Ârötf
(
Â
," is_local ");

69 if–
m_is_ãx
 )

70 
	`Ârötf
(
Â
," is_tex ");

71 if–
m_is_func_addr
 )

72 
	`Ârötf
(
Â
," is_func_addr ");

73 if–
m_fun˘i⁄
 )

74 
	`Ârötf
(
Â
," %∞", 
m_fun˘i⁄
 );

75 
	}
}

77 
	gsymbﬁ_èbÀ
::
	$symbﬁ_èbÀ
()

79 
	`as£π
(0);

80 
	}
}

82 
	gsymbﬁ_èbÀ
::
	$symbﬁ_èbÀ
–c⁄° *
sc›e_«me
, 
íåy_poöt
, 
symbﬁ_èbÀ
 *
∑ª¡
 )

84 
m_sc›e_«me
 = 
°d
::
	`°rög
(
sc›e_«me
);

85 
m_ªg_Æloˇt‹
=0;

86 
m_sh¨ed_√xt
 = 0;

87 
m_c⁄°_√xt
 = 0;

88 
m_globÆ_√xt
 = 0x100;

89 
m_loˇl_√xt
 = 0;

90 
m_∑ª¡
 = 
∑ª¡
;

91 i‡–
m_∑ª¡
 ) {

92 
m_sh¨ed_√xt
 = 
m_∑ª¡
->m_shared_next;

93 
m_globÆ_√xt
 = 
m_∑ª¡
->m_global_next;

95 
	}
}

97 
	gsymbﬁ_èbÀ
::
	$£t_«me
–c⁄° *
«me
 )

99 
m_sc›e_«me
 = 
°d
::
	`°rög
(
«me
);

100 
	}
}

102 c⁄° 
	g±x_vîsi⁄
 &
	gsymbﬁ_èbÀ
::
	$gë_±x_vîsi⁄
() const

104 if–
m_∑ª¡
 =
NULL
 )  
m_±x_vîsi⁄
;

105  
m_∑ª¡
->
	`gë_±x_vîsi⁄
();

106 
	}
}

108 
	gsymbﬁ_èbÀ
::
	$gë_sm_èrgë
() const

110 if–
m_∑ª¡
 =
NULL
 )

111  
m_±x_vîsi⁄
.
	`èrgë
();

112  
m_∑ª¡
->
	`gë_sm_èrgë
();

113 
	}
}

115 
	gsymbﬁ_èbÀ
::
	$£t_±x_vîsi⁄
–
vî
, 
ext
 )

117 
m_±x_vîsi⁄
 = 
	`±x_vîsi⁄
(
vî
,
ext
);

118 
	`as£π
–
m_±x_vîsi⁄
.
	`vî
() < 3 );

119 
	}
}

121 
	gsymbﬁ_èbÀ
::
	$£t_sm_èrgë
–c⁄° *
èrgë
, c⁄° *
ext
, c⁄° *
ext2
 )

123 
m_±x_vîsi⁄
.
	`£t_èrgë
(
èrgë
,
ext
,
ext2
);

124 
	}
}

126 
symbﬁ
 *
	gsymbﬁ_èbÀ
::
	$lookup
–c⁄° *
idítifõr
 )

128 
°d
::
°rög
 
	`key
(
idítifõr
);

129 
°d
::
m≠
<°d::
°rög
, 
symbﬁ
 *>::
ôî©‹
 
i
 = 
m_symbﬁs
.
	`föd
(
key
);

130 i‡–
i
 !
m_symbﬁs
.
	`íd
() ) {

131  
i
->
£c⁄d
;

133 i‡–
m_∑ª¡
 ) {

134  
m_∑ª¡
->
	`lookup
(
idítifõr
);

136  
NULL
;

137 
	}
}

139 
symbﬁ
 *
	gsymbﬁ_èbÀ
::
	$add_v¨übÀ
–c⁄° *
idítifõr
, c⁄° 
ty≥_öfo
 *
ty≥
, 
size
, c⁄° *
fûíame
, 
löe
 )

141 
buf
[1024];

142 
°d
::
°rög
 
	`key
(
idítifõr
);

143 
	`as£π
–
m_symbﬁs
.
	`föd
(
key
Ë=m_symbﬁs.
	`íd
() );

144 
	`¢¥ötf
(
buf
,1024,"%s:%u",
fûíame
,
löe
);

145 
symbﬁ
 *
s
 = 
√w
 
	`symbﬁ
(
idítifõr
,
ty≥
,
buf
,
size
);

146 
m_symbﬁs
[ 
key
 ] = 
s
;

148 i‡–
ty≥
 !
NULL
 &&Åy≥->
	`gë_key
().
	`is_globÆ
() ) {

149 
m_globÆs
.
	`push_back
(
s
);

151 i‡–
ty≥
 !
NULL
 &&Åy≥->
	`gë_key
().
	`is_c⁄°
() ) {

152 
m_c⁄°s
.
	`push_back
(
s
);

155  
s
;

156 
	}
}

158 
	gsymbﬁ_èbÀ
::
	$add_fun˘i⁄
–
fun˘i⁄_öfo
 *
func
, c⁄° *
fûíame
, 
löíumbî
 )

160 
°d
::
m≠
<°d::
°rög
, 
symbﬁ
 *>::
ôî©‹
 
i
 = 
m_symbﬁs
.
	`föd
–
func
->
	`gë_«me
() );

161 if–
i
 !
m_symbﬁs
.
	`íd
() )

163 
buf
[1024];

164 
	`¢¥ötf
(
buf
,1024,"%s:%u",
fûíame
,
löíumbî
);

165 
ty≥_öfo
 *
ty≥
 = 
	`add_ty≥
–
func
 );

166 
symbﬁ
 *
s
 = 
√w
 
	`symbﬁ
(
func
->
	`gë_«me
().
	`c_°r
(),
ty≥
,
buf
,0);

167 
s
->
	`£t_fun˘i⁄
(
func
);

168 
m_symbﬁs
[ 
func
->
	`gë_«me
(Ë] = 
s
;

169 
	}
}

171 
ªgi°î_±x_fun˘i⁄
–c⁄° *
«me
, 
fun˘i⁄_öfo
 *
im∂
 );

173 
boﬁ
 
	gsymbﬁ_èbÀ
::
	$add_fun˘i⁄_de˛
–c⁄° *
«me
, 
íåy_poöt
, 
fun˘i⁄_öfo
 **
func_öfo
, 
symbﬁ_èbÀ
 **
sym_èbÀ
 )

175 
°d
::
°rög
 
key
 = std::
	`°rög
(
«me
);

176 
boﬁ
 
¥i‹_de˛
 = 
Ál£
;

177 if–
m_fun˘i⁄_öfo_lookup
.
	`föd
(
key
Ë!m_fun˘i⁄_öfo_lookup.
	`íd
() ) {

178 *
func_öfo
 = 
m_fun˘i⁄_öfo_lookup
[
key
];

179 
¥i‹_de˛
 = 
åue
;

181 *
func_öfo
 = 
√w
 
	`fun˘i⁄_öfo
(
íåy_poöt
);

182 (*
func_öfo
)->
	`£t_«me
(
«me
);

183 
m_fun˘i⁄_öfo_lookup
[
key
] = *
func_öfo
;

186 if–
m_fun˘i⁄_symèb_lookup
.
	`föd
(
key
Ë!m_fun˘i⁄_symèb_lookup.
	`íd
() ) {

187 
	`as£π
–
¥i‹_de˛
 );

188 *
sym_èbÀ
 = 
m_fun˘i⁄_symèb_lookup
[
key
];

190 
	`as£π
–!
¥i‹_de˛
 );

191 *
sym_èbÀ
 = 
√w
 
	`symbﬁ_èbÀ
–"", 
íåy_poöt
, 
this
 );

192 
symbﬁ
 *
nuŒ_ªg
 = (*
sym_èbÀ
)->
	`add_v¨übÀ
("_",
NULL
,0,"",0);

193 
nuŒ_ªg
->
	`£t_ªgno
(0, 0);

194 (*
sym_èbÀ
)->
	`£t_«me
(
«me
);

195 (*
func_öfo
)->
	`£t_symèb
(*
sym_èbÀ
);

196 
m_fun˘i⁄_symèb_lookup
[
key
] = *
sym_èbÀ
;

197 
	`as£π
–(*
func_öfo
)->
	`gë_symèb
(Ë=*
sym_èbÀ
 );

198 
	`ªgi°î_±x_fun˘i⁄
(
«me
,*
func_öfo
);

200  
¥i‹_de˛
;

201 
	}
}

203 
ty≥_öfo
 *
	gsymbﬁ_èbÀ
::
	$add_ty≥
–
mem‹y_•a˚_t
 
•a˚_•ec
, 
sˇœr_ty≥_•ec
, 
ve˘‹_•ec
, 
Æignmít_•ec
, 
exã∫_•ec
 )

205 if–
•a˚_•ec
 =
∑øm_•a˚_un˛assifõd
 )

206 
•a˚_•ec
 = 
∑øm_•a˚_loˇl
;

207 
ty≥_öfo_key
 
	`t
(
•a˚_•ec
,
sˇœr_ty≥_•ec
,
ve˘‹_•ec
,
Æignmít_•ec
,
exã∫_•ec
,0);

208 
ty≥_öfo
 *
±
;

209 
±
 = 
√w
 
	`ty≥_öfo
(
this
,
t
);

210  
±
;

211 
	}
}

213 
ty≥_öfo
 *
	gsymbﬁ_èbÀ
::
	$add_ty≥
–
fun˘i⁄_öfo
 *
func
 )

215 
ty≥_öfo_key
 
t
;

216 
ty≥_öfo
 *
±
;

217 
t
.
	`£t_is_func
();

218 
±
 = 
√w
 
	`ty≥_öfo
(
this
,
t
);

219  
±
;

220 
	}
}

222 
ty≥_öfo
 *
	gsymbﬁ_èbÀ
::
	$gë_¨øy_ty≥
–
ty≥_öfo
 *
ba£_ty≥
, 
¨øy_dim
 )

224 
ty≥_öfo_key
 
t
 = 
ba£_ty≥
->
	`gë_key
();

225 
t
.
	`£t_¨øy_dim
(
¨øy_dim
);

226 
ty≥_öfo
 *
±
;

227 
±
 = 
m_ty≥s
[
t
] = 
√w
 
	`ty≥_öfo
(
this
,t);

228  
±
;

229 
	}
}

231 
	gsymbﬁ_èbÀ
::
	$£t_œbñ_addªss
–c⁄° 
symbﬁ
 *
œbñ
, 
addr
 )

233 
°d
::
m≠
<°d::
°rög
, 
symbﬁ
 *>::
ôî©‹
 
i
=
m_symbﬁs
.
	`föd
(
œbñ
->
	`«me
());

234 
	`as£π
–
i
 !
m_symbﬁs
.
	`íd
() );

235 
symbﬁ
 *
s
 = 
i
->
£c⁄d
;

236 
s
->
	`£t_œbñ_addªss
(
addr
);

237 
	}
}

239 
	gsymbﬁ_èbÀ
::
	$dump
()

241 
	`¥ötf
("\n\n");

242 
	`¥ötf
("SymbﬁÅabÀ f‹ \"%s\":\n", 
m_sc›e_«me
.
	`c_°r
() );

243 
°d
::
m≠
<°d::
°rög
, 
symbﬁ
 *>::
ôî©‹
 
i
;

244  
i
=
m_symbﬁs
.
	`begö
(); i!=m_symbﬁs.
	`íd
(); i++ ) {

245 
	`¥ötf
("%30†: ", 
i
->
fú°
.
	`c_°r
() );

246 if–
i
->
£c⁄d
 )

247 
i
->
£c⁄d
->
	`¥öt_öfo
(
°dout
);

249 
	`¥ötf
(" <no symbol object> ");

250 
	`¥ötf
("\n");

252 
	`¥ötf
("\n");

253 
	}
}

255 
	g›î™d_öfo
::
sm_√xt_uid
=1;

257 
	g›î™d_öfo
::
	$gë_uid
()

259 
ªsu…
 = 
sm_√xt_uid
++;

260  
ªsu…
;

261 
	}
}

263 
	g°d
::
li°
<
±x_ö°ru˘i⁄
*>::
ôî©‹
 
fun˘i⁄_öfo
::
föd_√xt_ªÆ_ö°ru˘i⁄
–
°d
::li°<±x_ö°ru˘i⁄*>::ôî©‹ 
i
)

265  (
i
 !
m_ö°ru˘i⁄s
.
íd
()Ë&& (*i)->
is_œbñ
() )

266 
i
++;

267  
	gi
;

270 
	gfun˘i⁄_öfo
::
	$¸óã_basic_blocks
()

272 
°d
::
li°
<
±x_ö°ru˘i⁄
*> 
Àadîs
;

273 
°d
::
li°
<
±x_ö°ru˘i⁄
*>::
ôî©‹
 
i
, 
l
;

276 
i
=
m_ö°ru˘i⁄s
.
	`begö
();

277 
Àadîs
.
	`push_back
(*
i
);

278 
i
++;

279  
i
!=
m_ö°ru˘i⁄s
.
	`íd
() ) {

280 
±x_ö°ru˘i⁄
 *
pI
 = *
i
;

281 if–
pI
->
	`is_œbñ
() ) {

282 
Àadîs
.
	`push_back
(
pI
);

283 
i
 = 
	`föd_√xt_ªÆ_ö°ru˘i⁄
(++i);

285  
pI
->
	`gë_›code
() ) {

286 
BRA_OP
: 
RET_OP
: 
EXIT_OP
: 
RETP_OP
: 
BREAK_OP
:

287 
i
++;

288 if–
i
 !
m_ö°ru˘i⁄s
.
	`íd
() )

289 
Àadîs
.
	`push_back
(*
i
);

290 
i
 = 
	`föd_√xt_ªÆ_ö°ru˘i⁄
(i);

292 
CALL_OP
: 
CALLP_OP
:

293 if–
pI
->
	`has_¥ed
() ) {

294 
	`¥ötf
("GPGPU-Sim PTX: Warning foundÖredicated call\n");

295 
i
++;

296 if–
i
 !
m_ö°ru˘i⁄s
.
	`íd
() )

297 
Àadîs
.
	`push_back
(*
i
);

298 
i
 = 
	`föd_√xt_ªÆ_ö°ru˘i⁄
(i);

299 } 
i
++;

302 
i
++;

307 if–
Àadîs
.
	`em±y
() ) {

308 
	`¥ötf
("GPGPU-Sim PTX: Fun˘i⁄ \'%s\' ha†nÿbasi¯blocks\n", 
m_«me
.
	`c_°r
());

312 
bb_id
 = 0;

313 
l
=
Àadîs
.
	`begö
();

314 
i
=
m_ö°ru˘i⁄s
.
	`begö
();

315 
m_basic_blocks
.
	`push_back
–
√w
 
	`basic_block_t
(
bb_id
++,*
	`föd_√xt_ªÆ_ö°ru˘i⁄
(
i
),
NULL
,1,0) );

316 
±x_ö°ru˘i⁄
 *
œ°_ªÆ_ö°
=*(
l
++);

318  ; 
i
!=
m_ö°ru˘i⁄s
.
	`íd
(); i++ ) {

319 
±x_ö°ru˘i⁄
 *
pI
 = *
i
;

320 if–
l
 !
Àadîs
.
	`íd
(Ë&& *
i
 == *l ) {

322 
m_basic_blocks
.
	`back
()->
±x_íd
 = 
œ°_ªÆ_ö°
;

323 if–
	`föd_√xt_ªÆ_ö°ru˘i⁄
(
i
Ë!
m_ö°ru˘i⁄s
.
	`íd
() ) {

324 
m_basic_blocks
.
	`push_back
–
√w
 
	`basic_block_t
(
bb_id
++,*
	`föd_√xt_ªÆ_ö°ru˘i⁄
(
i
),
NULL
,0,0) );

325 
œ°_ªÆ_ö°
 = *
	`föd_√xt_ªÆ_ö°ru˘i⁄
(
i
);

328 
l
++;

330 
pI
->
	`assign_bb
–
m_basic_blocks
.
	`back
() );

331 if–!
pI
->
	`is_œbñ
(ËË
œ°_ªÆ_ö°
 =ÖI;

333 
m_basic_blocks
.
	`back
()->
±x_íd
 = 
œ°_ªÆ_ö°
;

334 
m_basic_blocks
.
	`push_back
– 
√w
 
	`basic_block_t
(
bb_id
,
NULL
,NULL,0,1) );

335 
	}
}

337 
	gfun˘i⁄_öfo
::
	$¥öt_basic_blocks
()

339 
	`¥ötf
("Prötög basi¯block†f‹ fun˘i⁄ \'%s\':\n", 
m_«me
.
	`c_°r
() );

340 
°d
::
li°
<
±x_ö°ru˘i⁄
*>::
ôî©‹
 
±x_ôr
;

341 
œ°_bb
=0;

342 
±x_ôr
 = 
m_ö°ru˘i⁄s
.
	`begö
();±x_ô∏!m_ö°ru˘i⁄s.
	`íd
();Ötx_itr++) {

343 if–(*
±x_ôr
)->
	`gë_bb
() ) {

344 if–(*
±x_ôr
)->
	`gë_bb
()->
bb_id
 !
œ°_bb
 ) {

345 
	`¥ötf
("\n");

346 
œ°_bb
 = (*
±x_ôr
)->
	`gë_bb
()->
bb_id
;

348 
	`¥ötf
("bb_%02u\t: ", (*
±x_ôr
)->
	`gë_bb
()->
bb_id
);

349 (*
±x_ôr
)->
	`¥öt_ö¢
();

350 
	`¥ötf
("\n");

353 
	`¥ötf
("\nSumm¨y o‡basi¯block†f‹ \'%s\':\n", 
m_«me
.
	`c_°r
() );

354 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_ôr
;

355 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();bb_ô∏!m_basic_blocks.
	`íd
(); bb_itr++) {

356 
	`¥ötf
("bb_%02u\t:", (*
bb_ôr
)->
bb_id
);

357 i‡((*
bb_ôr
)->
±x_begö
)

358 
	`¥ötf
(" fú°: %s\t", ((*
bb_ôr
)->
±x_begö
)->
	`gë_›code_c°r
());

359 
	`¥ötf
(" first: NULL\t");

360 i‡((*
bb_ôr
)->
±x_íd
) {

361 
	`¥ötf
("Üa°: %s\t", ((*
bb_ôr
)->
±x_íd
)->
	`gë_›code_c°r
());

362 } 
	`¥ötf
("Üast: NULL\t");

363 
	`¥ötf
("\n");

365 
	`¥ötf
("\n");

366 
	}
}

368 
	gfun˘i⁄_öfo
::
	$¥öt_basic_block_löks
()

370 
	`¥ötf
("Prötög basi¯block†lök†f‹ fun˘i⁄ \'%s\':\n", 
m_«me
.
	`c_°r
() );

371 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_ôr
;

372 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();bb_ô∏!m_basic_blocks.
	`íd
(); bb_itr++) {

373 
	`¥ötf
("ID: %d\t:", (*
bb_ôr
)->
bb_id
);

374 i‡–!(*
bb_ôr
)->
¥ede˚ss‹_ids
.
	`em±y
() ) {

375 
	`¥ötf
("Predecessors:");

376 
°d
::
£t
<>::
ôî©‹
 
p
;

377 
p
(*
bb_ôr
)->
¥ede˚ss‹_ids
.
	`begö
();∞!(*bb_ôr)->¥ede˚ss‹_ids.
	`íd
();p++) {

378 
	`¥ötf
(" %d", *
p
);

380 
	`¥ötf
("\t");

382 i‡–!(*
bb_ôr
)->
suc˚ss‹_ids
.
	`em±y
() ) {

383 
	`¥ötf
("Successors:");

384 
°d
::
£t
<>::
ôî©‹
 
s
;

385 
s
(*
bb_ôr
)->
suc˚ss‹_ids
.
	`begö
();†!(*bb_ôr)->suc˚ss‹_ids.
	`íd
();s++) {

386 
	`¥ötf
(" %d", *
s
);

389 
	`¥ötf
("\n");

391 
	}
}

392 
›î™d_öfo
* 
	gfun˘i⁄_öfo
::
	$föd_bªak_èrgë
–
±x_ö°ru˘i⁄
 * 
p_bªak_ö¢
 )

394 c⁄° 
basic_block_t
 *
bªak_bb
 = 
p_bªak_ö¢
->
	`gë_bb
();

396 c⁄° 
basic_block_t
 *
p_bb
 = 
bªak_bb
;

397 
p_bb
->
immedüãdomö©‹_id
 != -1;

398 
p_bb
 = 
m_basic_blocks
[p_bb->
immedüãdomö©‹_id
])

401 
ö¢_addr
 = 
p_bb
->
±x_íd
->
	`gë_m_ö°r_mem_ödex
();

402 
ö¢_addr
 >
p_bb
->
±x_begö
->
	`gë_m_ö°r_mem_ödex
()) {

403 
±x_ö°ru˘i⁄
 *
pI
 = 
m_ö°r_mem
[
ö¢_addr
];

404 
ö¢_addr
 -= 1;

405 i‡(
pI
 =
NULL
) ;

406 i‡(
pI
->
	`gë_›code
(Ë=
BREAKADDR_OP
) {

407  &(
pI
->
	`d°
());

412 
	`as£π
(0);

415 
ö¢_addr
 = 
p_bªak_ö¢
->
	`gë_m_ö°r_mem_ödex
();

416 
ö¢_addr
 >= 0; insn_addr--)

418 
±x_ö°ru˘i⁄
 *
pI
 = 
m_ö°r_mem
[
ö¢_addr
];

419 i‡(
pI
->
	`gë_›code
(Ë=
BREAKADDR_OP
) {

420  &(
pI
->
	`d°
());

424  
NULL
;

425 
	}
}

426 
	gfun˘i⁄_öfo
::
	$c⁄√˘_basic_blocks
( )

428 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_ôr
;

429 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_èrgë_ôr
;

430 
basic_block_t
* 
exô_bb
 = 
m_basic_blocks
.
	`back
();

433 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();

434 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();bb_ô∏!m_basic_blocks.
	`íd
(); bb_itr++) {

435 
±x_ö°ru˘i⁄
 *
pI
 = (*
bb_ôr
)->
±x_íd
;

436 i‡((*
bb_ôr
)->
is_exô
)

438 i‡(
pI
->
	`gë_›code
(Ë=
RETP_OP
 ||ÖI->gë_›code(Ë=
RET_OP
 ||ÖI->gë_›code(Ë=
EXIT_OP
 ) {

439 (*
bb_ôr
)->
suc˚ss‹_ids
.
	`ö£π
(
exô_bb
->
bb_id
);

440 
exô_bb
->
¥ede˚ss‹_ids
.
	`ö£π
((*
bb_ôr
)->
bb_id
);

441 if–
pI
->
	`has_¥ed
() ) {

442 
	`¥ötf
("GPGPU-Sim PTX: Warning detectedÖredicatedÑeturn/exit.\n");

444 
√xt_addr
 = 
pI
->
	`gë_m_ö°r_mem_ödex
() + 1;

445 if–
√xt_addr
 < 
m_ö°r_mem_size
 && 
m_ö°r_mem
[next_addr] ) {

446 
basic_block_t
 *
√xt_bb
 = 
m_ö°r_mem
[
√xt_addr
]->
	`gë_bb
();

447 (*
bb_ôr
)->
suc˚ss‹_ids
.
	`ö£π
(
√xt_bb
->
bb_id
);

448 
√xt_bb
->
¥ede˚ss‹_ids
.
	`ö£π
((*
bb_ôr
)->
bb_id
);

452 } i‡(
pI
->
	`gë_›code
(Ë=
BRA_OP
) {

454 
›î™d_öfo
 &
èrgë
 = 
pI
->
	`d°
();

455 
addr
 = 
œbñs
[ 
èrgë
.
	`«me
() ];

456 
±x_ö°ru˘i⁄
 *
èrgë_pI
 = 
m_ö°r_mem
[
addr
];

457 
basic_block_t
 *
èrgë_bb
 = 
èrgë_pI
->
	`gë_bb
();

458 (*
bb_ôr
)->
suc˚ss‹_ids
.
	`ö£π
(
èrgë_bb
->
bb_id
);

459 
èrgë_bb
->
¥ede˚ss‹_ids
.
	`ö£π
((*
bb_ôr
)->
bb_id
);

462 i‡–!(
pI
->
	`gë_›code
()==
BRA_OP
 && (!pI->
	`has_¥ed
())) ) {

466 
√xt_addr
 = 
pI
->
	`gë_m_ö°r_mem_ödex
(Ë+ÖI->
	`ö°_size
();

467 
basic_block_t
 *
√xt_bb
 = 
m_ö°r_mem
[
√xt_addr
]->
	`gë_bb
();

468 (*
bb_ôr
)->
suc˚ss‹_ids
.
	`ö£π
(
√xt_bb
->
bb_id
);

469 
√xt_bb
->
¥ede˚ss‹_ids
.
	`ö£π
((*
bb_ôr
)->
bb_id
);

471 
	`as£π
(
pI
->
	`gë_›code
(Ë=
BRA_OP
);

473 
	}
}

474 
boﬁ
 
	gfun˘i⁄_öfo
::
	$c⁄√˘_bªak_èrgës
()

476 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_ôr
;

477 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_èrgë_ôr
;

478 
boﬁ
 
modifõd
 = 
Ál£
;

481 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();

482 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();bb_ô∏!m_basic_blocks.
	`íd
(); bb_itr++) {

483 
basic_block_t
 *
p_bb
 = *
bb_ôr
;

484 
±x_ö°ru˘i⁄
 *
pI
 = 
p_bb
->
±x_íd
;

485 i‡(
p_bb
->
is_exô
)

487 i‡(
pI
->
	`gë_›code
(Ë=
BREAK_OP
) {

489 
°d
::
£t
<> 
‹ig_suc˚ss‹_ids
 = 
p_bb
->
suc˚ss‹_ids
;

492 
°d
::
£t
<>::
ôî©‹
 
succ_ids
 = 
p_bb
->
suc˚ss‹_ids
.
	`begö
(); succ_id†!p_bb->suc˚ss‹_ids.
	`íd
(); ++succ_ids) {

493 
basic_block_t
 *
suc˚ss‹_bb
 = 
m_basic_blocks
[*
succ_ids
];

494 
suc˚ss‹_bb
->
¥ede˚ss‹_ids
.
	`îa£
(
p_bb
->
bb_id
);

496 
p_bb
->
suc˚ss‹_ids
.
	`˛ór
();

500 
›î™d_öfo
 *
èrgë
 = 
	`föd_bªak_èrgë
(
pI
);

501 
addr
 = 
œbñs
[ 
èrgë
->
	`«me
() ];

502 
±x_ö°ru˘i⁄
 *
èrgë_pI
 = 
m_ö°r_mem
[
addr
];

503 
basic_block_t
 *
èrgë_bb
 = 
èrgë_pI
->
	`gë_bb
();

504 
p_bb
->
suc˚ss‹_ids
.
	`ö£π
(
èrgë_bb
->
bb_id
);

505 
èrgë_bb
->
¥ede˚ss‹_ids
.
	`ö£π
(
p_bb
->
bb_id
);

507 i‡(
pI
->
	`has_¥ed
()) {

509 
√xt_addr
 = 
pI
->
	`gë_m_ö°r_mem_ödex
(Ë+ÖI->
	`ö°_size
();

510 
basic_block_t
 *
√xt_bb
 = 
m_ö°r_mem
[
√xt_addr
]->
	`gë_bb
();

511 
p_bb
->
suc˚ss‹_ids
.
	`ö£π
(
√xt_bb
->
bb_id
);

512 
√xt_bb
->
¥ede˚ss‹_ids
.
	`ö£π
(
p_bb
->
bb_id
);

515 
modifõd
 = modifõd || (
‹ig_suc˚ss‹_ids
 !
p_bb
->
suc˚ss‹_ids
);

519  
modifõd
;

520 
	}
}

521 
öãr£˘
–
°d
::
£t
<> &
A
, c⁄° std::£t<> &
B
 )

524  
°d
::
£t
<>::
ôî©‹
 
a
=
A
.
begö
(); 
	ga
!=A.
íd
(); ) {

525 
	g°d
::
£t
<>::
ôî©‹
 
a_√xt
 = 
a
;

526 
	ga_√xt
++;

527 if–
	gB
.
föd
(*
a
Ë=
B
.
íd
() ) {

528 
A
.
îa£
(*
a
);

529 
	ga
 = 
a_√xt
;

531 
	ga
++;

535 
boﬁ
 
is_equÆ
–c⁄° 
°d
::
£t
<> &
A
, c⁄° std::£t<> &
B
 )

537 if–
A
.
size
(Ë!
B
.size() )

538  
Ál£
;

539  
	g°d
::
£t
<>::
ôî©‹
 
b
=
B
.
begö
(); 
	gb
!=B.
íd
(); b++ )

540 if–
	gA
.
föd
(*
b
Ë=
A
.
íd
() )

541  
Ál£
;

542  
	gåue
;

545 
¥öt_£t
(c⁄° 
°d
::
£t
<> &
A
)

547 
°d
::
£t
<>::
ôî©‹
 
a
;

548 
	ga

A
.
begö
();á !A.
íd
();á++) {

549 
¥ötf
("%d ", (*
a
));

551 
¥ötf
("\n");

554 
	gfun˘i⁄_öfo
::
	$föd_domö©‹s
( )

557 
	`¥ötf
("GPGPU-Sim PTX: Födög domö©‹†f‹ \'%s\'...\n", 
m_«me
.
	`c_°r
() );

558 
	`fÊush
(
°dout
);

559 
	`as£π
–
m_basic_blocks
.
	`size
() >= 2 );

560 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();

561 (*
bb_ôr
)->
domö©‹_ids
.
	`ö£π
((*bb_ôr)->
bb_id
);

563 ++
bb_ôr
;bb_ô∏!
m_basic_blocks
.
	`íd
(); bb_itr++) {

564 
i
 = 0; i < 
m_basic_blocks
.
	`size
(); i++)

565 (*
bb_ôr
)->
domö©‹_ids
.
	`ö£π
(
i
);

567 
boﬁ
 
ch™ge
 = 
åue
;

568 
ch™ge
) {

569 
ch™ge
 = 
Ál£
;

570  
h
 = 1 ; h < 
m_basic_blocks
.
	`size
(); ++h ) {

571 
	`as£π
–
m_basic_blocks
[
h
]->
bb_id
 == ()h );

572 
°d
::
£t
<> 
T
;

573 
i
=0;i< 
m_basic_blocks
.
	`size
();i++)

574 
T
.
	`ö£π
(
i
);

575  
°d
::
£t
<>::
ôî©‹
 
s
 = 
m_basic_blocks
[
h
]->
¥ede˚ss‹_ids
.
	`begö
();†!m_basic_blocks[h]->¥ede˚ss‹_ids.
	`íd
();s++)

576 
	`öãr£˘
(
T
, 
m_basic_blocks
[*
s
]->
domö©‹_ids
);

577 
T
.
	`ö£π
(
h
);

578 i‡(!
	`is_equÆ
(
T
, 
m_basic_blocks
[
h
]->
domö©‹_ids
)) {

579 
ch™ge
 = 
åue
;

580 
m_basic_blocks
[
h
]->
domö©‹_ids
 = 
T
;

585 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();

586 ++
bb_ôr
;bb_ô∏!
m_basic_blocks
.
	`íd
(); bb_itr++) {

587 i‡((*
bb_ôr
)->
¥ede˚ss‹_ids
.
	`em±y
())

588 (*
bb_ôr
)->
domö©‹_ids
.
	`˛ór
();

590 
	}
}

592 
	gfun˘i⁄_öfo
::
	$föd_po°domö©‹s
( )

595 
	`¥ötf
("GPGPU-Sim PTX: FödögÖo°domö©‹†f‹ \'%s\'...\n", 
m_«me
.
	`c_°r
() );

596 
	`fÊush
(
°dout
);

597 
	`as£π
–
m_basic_blocks
.
	`size
() >= 2 );

598 
°d
::
ve˘‹
<
basic_block_t
*>::
ªvî£_ôî©‹
 
bb_ôr
 = 
m_basic_blocks
.
	`rbegö
();

599 (*
bb_ôr
)->
po°domö©‹_ids
.
	`ö£π
((*bb_ôr)->
bb_id
);

600 ++
bb_ôr
;bb_ô∏!
m_basic_blocks
.
	`ªnd
();bb_itr++) {

601 
i
=0; i<
m_basic_blocks
.
	`size
(); i++)

602 (*
bb_ôr
)->
po°domö©‹_ids
.
	`ö£π
(
i
);

604 
boﬁ
 
ch™ge
 = 
åue
;

605 
ch™ge
) {

606 
ch™ge
 = 
Ál£
;

607  
h
 = 
m_basic_blocks
.
	`size
()-2 ; h >= 0 ; --h ) {

608 
	`as£π
–
m_basic_blocks
[
h
]->
bb_id
 == ()h );

609 
°d
::
£t
<> 
T
;

610 
i
=0;i< 
m_basic_blocks
.
	`size
();i++)

611 
T
.
	`ö£π
(
i
);

612  
°d
::
£t
<>::
ôî©‹
 
s
 = 
m_basic_blocks
[
h
]->
suc˚ss‹_ids
.
	`begö
();†!m_basic_blocks[h]->suc˚ss‹_ids.
	`íd
();s++)

613 
	`öãr£˘
(
T
, 
m_basic_blocks
[*
s
]->
po°domö©‹_ids
);

614 
T
.
	`ö£π
(
h
);

615 i‡(!
	`is_equÆ
(
T
,
m_basic_blocks
[
h
]->
po°domö©‹_ids
)) {

616 
ch™ge
 = 
åue
;

617 
m_basic_blocks
[
h
]->
po°domö©‹_ids
 = 
T
;

621 
	}
}

623 
	gfun˘i⁄_öfo
::
	$föd_ùo°domö©‹s
( )

627 
	`¥ötf
("GPGPU-Sim PTX: Födög immedüãÖo°domö©‹†f‹ \'%s\'...\n", 
m_«me
.
	`c_°r
() );

628 
	`fÊush
(
°dout
);

629 
	`as£π
–
m_basic_blocks
.
	`size
() >= 2 );

630 
i
=0; i<
m_basic_blocks
.
	`size
(); i++) {

631 
m_basic_blocks
[
i
]->
Tmp_ids
 = m_basic_blocks[i]->
po°domö©‹_ids
;

632 
	`as£π
–
m_basic_blocks
[
i
]->
bb_id
 == i );

633 
m_basic_blocks
[
i
]->
Tmp_ids
.
	`îa£
(i);

635  
n
 = 
m_basic_blocks
.
	`size
()-2;Ç >=0;--n) {

637  
°d
::
£t
<>::
ôî©‹
 
s
=
m_basic_blocks
[
n
]->
Tmp_ids
.
	`begö
(); s !m_basic_blocks[n]->Tmp_ids.
	`íd
(); s++ ) {

638 
bb_s
 = *
s
;

639  
°d
::
£t
<>::
ôî©‹
 
t
=
m_basic_blocks
[
n
]->
Tmp_ids
.
	`begö
();Å !m_basic_blocks[n]->Tmp_ids.
	`íd
(); ) {

640 
°d
::
£t
<>::
ôî©‹
 
t_√xt
 = 
t
;Å_next++;

641 if–*
s
 =*
t
 ) {

642 
t
 = 
t_√xt
;

645 
bb_t
 = *
t
;

646 if–
m_basic_blocks
[
bb_s
]->
po°domö©‹_ids
.
	`föd
(
bb_t
Ë!m_basic_blocks[bb_s]->po°domö©‹_ids.
	`íd
() )

647 
m_basic_blocks
[
n
]->
Tmp_ids
.
	`îa£
(
bb_t
);

648 
t
 = 
t_√xt
;

652 
num_ùdoms
=0;

653  
n
 = 
m_basic_blocks
.
	`size
()-1;Ç >=0;--n) {

654 
	`as£π
–
m_basic_blocks
[
n
]->
Tmp_ids
.
	`size
() <= 1 );

657 if–!
m_basic_blocks
[
n
]->
Tmp_ids
.
	`em±y
() ) {

658 
m_basic_blocks
[
n
]->
immedüãpo°domö©‹_id
 = *m_basic_blocks[n]->
Tmp_ids
.
	`begö
();

659 
num_ùdoms
++;

662 
	`as£π
–
num_ùdoms
 =
m_basic_blocks
.
	`size
()-1 );

664 
	}
}

666 
	gfun˘i⁄_öfo
::
	$föd_idomö©‹s
( )

670 
	`¥ötf
("GPGPU-Sim PTX: Födög immedüã domö©‹†f‹ \'%s\'...\n", 
m_«me
.
	`c_°r
() );

671 
	`fÊush
(
°dout
);

672 
	`as£π
–
m_basic_blocks
.
	`size
() >= 2 );

673 
i
=0; i<
m_basic_blocks
.
	`size
(); i++) {

674 
m_basic_blocks
[
i
]->
Tmp_ids
 = m_basic_blocks[i]->
domö©‹_ids
;

675 
	`as£π
–
m_basic_blocks
[
i
]->
bb_id
 == i );

676 
m_basic_blocks
[
i
]->
Tmp_ids
.
	`îa£
(i);

678  
n
 = 0;Ç < 
m_basic_blocks
.
	`size
(); ++n) {

680  
°d
::
£t
<>::
ôî©‹
 
s
=
m_basic_blocks
[
n
]->
Tmp_ids
.
	`begö
(); s !m_basic_blocks[n]->Tmp_ids.
	`íd
(); s++ ) {

681 
bb_s
 = *
s
;

682  
°d
::
£t
<>::
ôî©‹
 
t
=
m_basic_blocks
[
n
]->
Tmp_ids
.
	`begö
();Å !m_basic_blocks[n]->Tmp_ids.
	`íd
(); ) {

683 
°d
::
£t
<>::
ôî©‹
 
t_√xt
 = 
t
;Å_next++;

684 if–*
s
 =*
t
 ) {

685 
t
 = 
t_√xt
;

688 
bb_t
 = *
t
;

689 if–
m_basic_blocks
[
bb_s
]->
domö©‹_ids
.
	`föd
(
bb_t
Ë!m_basic_blocks[bb_s]->domö©‹_ids.
	`íd
() )

690 
m_basic_blocks
[
n
]->
Tmp_ids
.
	`îa£
(
bb_t
);

691 
t
 = 
t_√xt
;

695 
num_idoms
=0;

696 
num_n›ªd
 = 0;

697  
n
 = 0;Ç < 
m_basic_blocks
.
	`size
(); ++n) {

701 if–!
m_basic_blocks
[
n
]->
Tmp_ids
.
	`em±y
() ) {

702 
m_basic_blocks
[
n
]->
immedüãdomö©‹_id
 = *m_basic_blocks[n]->
Tmp_ids
.
	`begö
();

703 
num_idoms
++;

704 } i‡(
m_basic_blocks
[
n
]->
¥ede˚ss‹_ids
.
	`em±y
()) {

705 
num_n›ªd
 += 1;

708 
	`as£π
–
num_idoms
 =
m_basic_blocks
.
	`size
()-
num_n›ªd
 );

710 
	}
}

712 
	gfun˘i⁄_öfo
::
	$¥öt_domö©‹s
()

714 
	`¥ötf
("Prötög domö©‹†f‹ fun˘i⁄ \'%s\':\n", 
m_«me
.
	`c_°r
() );

715 
°d
::
ve˘‹
<>::
ôî©‹
 
bb_ôr
;

716 
i
 = 0; i < 
m_basic_blocks
.
	`size
(); i++) {

717 
	`¥ötf
("ID: %d\t:", 
i
);

718  
°d
::
£t
<>::
ôî©‹
 
j
=
m_basic_blocks
[
i
]->
domö©‹_ids
.
	`begö
(); j!=m_basic_blocks[i]->domö©‹_ids.
	`íd
(); j++)

719 
	`¥ötf
(" %d", *
j
 );

720 
	`¥ötf
("\n");

722 
	}
}

724 
	gfun˘i⁄_öfo
::
	$¥öt_po°domö©‹s
()

726 
	`¥ötf
("PrötögÖo°domö©‹†f‹ fun˘i⁄ \'%s\':\n", 
m_«me
.
	`c_°r
() );

727 
°d
::
ve˘‹
<>::
ôî©‹
 
bb_ôr
;

728 
i
 = 0; i < 
m_basic_blocks
.
	`size
(); i++) {

729 
	`¥ötf
("ID: %d\t:", 
i
);

730  
°d
::
£t
<>::
ôî©‹
 
j
=
m_basic_blocks
[
i
]->
po°domö©‹_ids
.
	`begö
(); j!=m_basic_blocks[i]->po°domö©‹_ids.
	`íd
(); j++)

731 
	`¥ötf
(" %d", *
j
 );

732 
	`¥ötf
("\n");

734 
	}
}

736 
	gfun˘i⁄_öfo
::
	$¥öt_ùo°domö©‹s
()

738 
	`¥ötf
("Prötög immedüãÖo°domö©‹†f‹ fun˘i⁄ \'%s\':\n", 
m_«me
.
	`c_°r
() );

739 
°d
::
ve˘‹
<>::
ôî©‹
 
bb_ôr
;

740 
i
 = 0; i < 
m_basic_blocks
.
	`size
(); i++) {

741 
	`¥ötf
("ID: %d\t:", 
i
);

742 
	`¥ötf
("%d\n", 
m_basic_blocks
[
i
]->
immedüãpo°domö©‹_id
);

744 
	}
}

746 
	gfun˘i⁄_öfo
::
	$¥öt_idomö©‹s
()

748 
	`¥ötf
("Prötög immedüã domö©‹†f‹ fun˘i⁄ \'%s\':\n", 
m_«me
.
	`c_°r
() );

749 
°d
::
ve˘‹
<>::
ôî©‹
 
bb_ôr
;

750 
i
 = 0; i < 
m_basic_blocks
.
	`size
(); i++) {

751 
	`¥ötf
("ID: %d\t:", 
i
);

752 
	`¥ötf
("%d\n", 
m_basic_blocks
[
i
]->
immedüãdomö©‹_id
);

754 
	}
}

756 
	gfun˘i⁄_öfo
::
	$gë_num_ªc⁄vîgí˚_∑ús
()

758 i‡(!
num_ªc⁄vîgí˚_∑ús
) {

759 if–
m_basic_blocks
.
	`size
() == 0 )

761 
i
=0; i< (
m_basic_blocks
.
	`size
()-1); i++) {

762 i‡(
m_basic_blocks
[
i
]->
±x_íd
->
	`gë_›code
(Ë=
BRA_OP
) {

763 
num_ªc⁄vîgí˚_∑ús
++;

767  
num_ªc⁄vîgí˚_∑ús
;

768 
	}
}

770 
	gfun˘i⁄_öfo
::
	$gë_ªc⁄vîgí˚_∑ús
(
gpgpu_ªc⁄_t
* 
ªc⁄_poöts
)

772 
idx
=0;

773 if–
m_basic_blocks
.
	`size
() == 0 )

775 
i
=0; i< (
m_basic_blocks
.
	`size
()-1); i++) {

776 #ifde‡
DEBUG_GET_RECONVERG_PAIRS


777 
	`¥ötf
("i=%d\n", 
i
); 
	`fÊush
(
°dout
);

779 i‡(
m_basic_blocks
[
i
]->
±x_íd
->
	`gë_›code
(Ë=
BRA_OP
) {

780 #ifde‡
DEBUG_GET_RECONVERG_PAIRS


781 
	`¥ötf
("\tbranch!\n");

782 
	`¥ötf
("\tbb_id=%d; ipdom=%d\n", 
m_basic_blocks
[
i
]->
bb_id
, m_basic_blocks[i]->
immedüãpo°domö©‹_id
);

783 
	`¥ötf
("\tm_ö°r_mem index=%d\n", 
m_basic_blocks
[
i
]->
±x_íd
->
	`gë_m_ö°r_mem_ödex
());

784 
	`fÊush
(
°dout
);

786 
ªc⁄_poöts
[
idx
].
sour˚_pc
 = 
m_basic_blocks
[
i
]->
±x_íd
->
	`gë_PC
();

787 #ifde‡
DEBUG_GET_RECONVERG_PAIRS


788 
	`¥ötf
("\åec⁄_poöts[idx].sour˚_pc=%d\n", 
ªc⁄_poöts
[
idx
].
sour˚_pc
);

790 if–
m_basic_blocks
[m_basic_blocks[
i
]->
immedüãpo°domö©‹_id
]->
±x_begö
 ) {

791 
ªc⁄_poöts
[
idx
].
èrgë_pc
 = 
m_basic_blocks
[m_basic_blocks[
i
]->
immedüãpo°domö©‹_id
]->
±x_begö
->
	`gë_PC
();

794 
ªc⁄_poöts
[
idx
].
èrgë_pc
 = -2;

796 #ifde‡
DEBUG_GET_RECONVERG_PAIRS


797 
m_basic_blocks
[m_basic_blocks[
i
]->
immedüãpo°domö©‹_id
]->
±x_begö
->
	`¥öt_ö¢
();

798 
	`¥ötf
("\åec⁄_poöts[idx].èrgë_pc=%d\n", 
ªc⁄_poöts
[
idx
].
èrgë_pc
); 
	`fÊush
(
°dout
);

800 
idx
++;

803 
	}
}

806 
	gfun˘i⁄_öfo
::
	$¥öt_basic_block_dŸ
()

808 
	`¥ötf
("Basic Block in DOT\n");

809 
	`¥ötf
("digøph %†{\n", 
m_«me
.
	`c_°r
());

810 
°d
::
ve˘‹
<
basic_block_t
*>::
ôî©‹
 
bb_ôr
;

811 
bb_ôr
 = 
m_basic_blocks
.
	`begö
();bb_ô∏!m_basic_blocks.
	`íd
(); bb_itr++) {

812 
	`¥ötf
("\t");

813 
°d
::
£t
<>::
ôî©‹
 
s
;

814 
s
 = (*
bb_ôr
)->
suc˚ss‹_ids
.
	`begö
();†!(*bb_ôr)->suc˚ss‹_ids.
	`íd
();s++) {

815 
succ_bb
 = *
s
;

816 
	`¥ötf
("%d -> %d; ", (*
bb_ôr
)->
bb_id
, 
succ_bb
 );

818 
	`¥ötf
("\n");

820 
	`¥ötf
("}\n");

821 
	}
}

823 
	$±x_kî√l_shmem_size
–*
kî√l_im∂
 )

825 
fun˘i⁄_öfo
 *
f
 = (fun˘i⁄_öfo*)
kî√l_im∂
;

826 c⁄° 
gpgpu_±x_sim_kî√l_öfo
 *
kî√l_öfo
 = 
f
->
	`gë_kî√l_öfo
();

827  
kî√l_öfo
->
smem
;

828 
	}
}

830 
	$±x_kî√l_ƒegs
–*
kî√l_im∂
 )

832 
fun˘i⁄_öfo
 *
f
 = (fun˘i⁄_öfo*)
kî√l_im∂
;

833 c⁄° 
gpgpu_±x_sim_kî√l_öfo
 *
kî√l_öfo
 = 
f
->
	`gë_kî√l_öfo
();

834  
kî√l_öfo
->
ªgs
;

835 
	}
}

837 
	gty≥_öfo_key
::
	$ty≥_decode
–
size_t
 &
size
, &
basic_ty≥
 ) const

839 
ty≥
 = 
	`sˇœr_ty≥
();

840  
	`ty≥_decode
(
ty≥
,
size
,
basic_ty≥
);

841 
	}
}

843 
	gty≥_öfo_key
::
	$ty≥_decode
–
ty≥
, 
size_t
 &
size
, &
basic_ty≥
 )

845  
ty≥
 ) {

846 
S8_TYPE
: 
size
=8; 
basic_ty≥
=1;  0;

847 
S16_TYPE
: 
size
=16; 
basic_ty≥
=1;  1;

848 
S32_TYPE
: 
size
=32; 
basic_ty≥
=1;  2;

849 
S64_TYPE
: 
size
=64; 
basic_ty≥
=1;  3;

850 
U8_TYPE
: 
size
=8; 
basic_ty≥
=0;  4;

851 
U16_TYPE
: 
size
=16; 
basic_ty≥
=0;  5;

852 
U32_TYPE
: 
size
=32; 
basic_ty≥
=0;  6;

853 
U64_TYPE
: 
size
=64; 
basic_ty≥
=0;  7;

854 
F16_TYPE
: 
size
=16; 
basic_ty≥
=-1;  8;

855 
F32_TYPE
: 
size
=32; 
basic_ty≥
=-1;  9;

856 
F64_TYPE
: 
size
=64; 
basic_ty≥
=-1;  10;

857 
FF64_TYPE
: 
size
=64; 
basic_ty≥
=-1;  10;

858 
PRED_TYPE
: 
size
=1; 
basic_ty≥
=2;  11;

859 
B8_TYPE
: 
size
=8; 
basic_ty≥
=0;  12;

860 
B16_TYPE
: 
size
=16; 
basic_ty≥
=0;  13;

861 
B32_TYPE
: 
size
=32; 
basic_ty≥
=0;  14;

862 
B64_TYPE
: 
size
=64; 
basic_ty≥
=0;  15;

863 
BB64_TYPE
: 
size
=64; 
basic_ty≥
=0;  15;

864 
BB128_TYPE
: 
size
=128; 
basic_ty≥
=0;  16;

865 
TEXREF_TYPE
: 
SAMPLERREF_TYPE
: 
SURFREF_TYPE
:

866 
size
=32; 
basic_ty≥
=3;  16;

868 
	`¥ötf
("ERROR **Åy≥_decode(Ëd€†nŸ knowábouà\"%s\"\n", 
	`decode_tokí
(
ty≥
) );

869 
	`as£π
(0);

872 
	}
}

874 
¨g_buf„r_t
 
	$c›y_¨g_to_buf„r
(
±x_thªad_öfo
 * 
thªad
, 
›î™d_öfo
 
a˘uÆ_∑øm_›
, c⁄° 
symbﬁ
 * 
f‹mÆ_∑øm
)

876 if–
a˘uÆ_∑øm_›
.
	`is_ªg
() ) {

877 
±x_ªg_t
 
vÆue
 = 
thªad
->
	`gë_ªg
(
a˘uÆ_∑øm_›
.
	`gë_symbﬁ
());

878  
	`¨g_buf„r_t
(
f‹mÆ_∑øm
,
a˘uÆ_∑øm_›
,
vÆue
);

879 } i‡–
a˘uÆ_∑øm_›
.
	`is_∑øm_loˇl
() ) {

880 
size
=
f‹mÆ_∑øm
->
	`gë_size_ö_byãs
();

881 
addr_t
 
‰ame_off£t
 = 
a˘uÆ_∑øm_›
.
	`gë_symbﬁ
()->
	`gë_addªss
();

882 
addr_t
 
‰om_addr
 = 
thªad
->
	`gë_loˇl_mem_°ack_poöãr
(Ë+ 
‰ame_off£t
;

883 
buf„r
[1024];

884 
	`as£π
(
size
<1024);

885 
thªad
->
m_loˇl_mem
->
	`ªad
(
‰om_addr
,
size
,
buf„r
);

886  
	`¨g_buf„r_t
(
f‹mÆ_∑øm
,
a˘uÆ_∑øm_›
,
buf„r
,
size
);

888 
	`¥ötf
("GPGPU-Sim PTX: ERROR **ÇeedÅoádd support forÅhis operandÅype in call/return\n");

889 
	`ab‹t
();

891 
	}
}

893 
	$c›y_¨gs_öto_buf„r_li°
–c⁄° 
±x_ö°ru˘i⁄
 * 
pI
,

894 
±x_thªad_öfo
 * 
thªad
,

895 c⁄° 
fun˘i⁄_öfo
 * 
èrgë_func
,

896 
¨g_buf„r_li°_t
 &
¨g_vÆues
 )

898 
n_ªtu∫
 = 
èrgë_func
->
	`has_ªtu∫
();

899 
n_¨gs
 = 
èrgë_func
->
	`num_¨gs
();

900  
¨g
=0;árg < 
n_¨gs
;árg ++ ) {

901 c⁄° 
›î™d_öfo
 &
a˘uÆ_∑øm_›
 = 
pI
->
	`›î™d_lookup
(
n_ªtu∫
+1+
¨g
);

902 c⁄° 
symbﬁ
 *
f‹mÆ_∑øm
 = 
èrgë_func
->
	`gë_¨g
(
¨g
);

903 
¨g_vÆues
.
	`push_back
–
	`c›y_¨g_to_buf„r
(
thªad
, 
a˘uÆ_∑øm_›
, 
f‹mÆ_∑øm
) );

905 
	}
}

907 
	$c›y_buf„r_to_‰ame
(
±x_thªad_öfo
 * 
thªad
, c⁄° 
¨g_buf„r_t
 &
a
)

909 if–
a
.
	`is_ªg
() ) {

910 
±x_ªg_t
 
vÆue
 = 
a
.
	`gë_ªg
();

911 
›î™d_öfo
 
d°_ªg
 = 
	`›î™d_öfo
(
a
.
	`gë_d°
());

912 
thªad
->
	`£t_ªg
(
d°_ªg
.
	`gë_symbﬁ
(),
vÆue
);

914 c⁄° *
buf„r
 = 
a
.
	`gë_∑øm_buf„r
();

915 
size_t
 
size
 = 
a
.
	`gë_∑øm_buf„r_size
();

916 c⁄° 
symbﬁ
 *
d°
 = 
a
.
	`gë_d°
();

917 
addr_t
 
‰ame_off£t
 = 
d°
->
	`gë_addªss
();

918 
addr_t
 
to_addr
 = 
thªad
->
	`gë_loˇl_mem_°ack_poöãr
(Ë+ 
‰ame_off£t
;

919 
thªad
->
m_loˇl_mem
->
	`wrôe
(
to_addr
,
size
,
buf„r
,
NULL
,NULL);

921 
	}
}

923 
	$c›y_buf„r_li°_öto_‰ame
(
±x_thªad_öfo
 * 
thªad
, 
¨g_buf„r_li°_t
 &
¨g_vÆues
)

925 
¨g_buf„r_li°_t
::
ôî©‹
 
a
;

926  
a
=
¨g_vÆues
.
	`begö
();á !¨g_vÆues.
	`íd
();á++ ) {

927 
	`c›y_buf„r_to_‰ame
(
thªad
, *
a
);

929 
	}
}

933 
	g°d
::
li°
<
›î™d_öfo
> 
check_›î™ds
–
›code
,

934 c⁄° 
°d
::
li°
<> &
sˇœr_ty≥
,

935 c⁄° 
°d
::
li°
<
›î™d_öfo
> &
›î™ds
 )

937 
g_w¨n_lôîÆ_›î™ds_two_ty≥_ö°
;

938 if–(
	g›code
 =
CVT_OP
Ë|| (
›code
 =
SET_OP
Ë|| (›codê=
SLCT_OP
Ë|| (›codê=
TEX_OP
) ) {

940 if–!
g_w¨n_lôîÆ_›î™ds_two_ty≥_ö°
 ) {

941 
°d
::
li°
<
›î™d_öfo
>::
c⁄°_ôî©‹
 
o
;

942  
	go
 = 
›î™ds
.
begö
(); o !›î™ds.
íd
(); o++ ) {

943 c⁄° 
	g›î™d_öfo
 &
	g›
 = *
o
;

944 if–
	g›
.
is_lôîÆ
() ) {

945 
¥ötf
("GPGPU-Sim PTX: PTX usesÅwo scalarÅype intruction withÜiteral operand.\n");

946 
	gg_w¨n_lôîÆ_›î™ds_two_ty≥_ö°
 = 1;

951 
as£π
–
sˇœr_ty≥
.
size
() < 2 );

952 if–
	gsˇœr_ty≥
.
size
() == 1 ) {

953 
°d
::
li°
<
›î™d_öfo
> 
ªsu…
;

954 
	gö°_ty≥
 = 
sˇœr_ty≥
.
‰⁄t
();

955 
	g°d
::
li°
<
›î™d_öfo
>::
c⁄°_ôî©‹
 
o
;

956  
	go
 = 
›î™ds
.
begö
(); o !›î™ds.
íd
(); o++ ) {

957 c⁄° 
	g›î™d_öfo
 &
	g›
 = *
o
;

958 if–
	g›
.
is_lôîÆ
() ) {

959 if–(
	g›
.
gë_ty≥
(Ë=
doubÀ_›_t
Ë&& (
ö°_ty≥
 =
F32_TYPE
) ) {

960 
±x_ªg_t
 
v
 = 
›
.
gë_lôîÆ_vÆue
();

961 
	gu
 = ()
v
.
f64
;

962 
›î™d_öfo
 
n
(
u
);

963 
	gªsu…
.
push_back
(
n
);

965 
	gªsu…
.
push_back
(
›
);

968 
	gªsu…
.
push_back
(
›
);

971  
	gªsu…
;

974  
	g›î™ds
;

978 
	g±x_ö°ru˘i⁄
::
±x_ö°ru˘i⁄
–
›code
,

979 c⁄° 
symbﬁ
 *
¥ed
,

980 
√g_¥ed
,

981 
¥ed_mod
,

982 
symbﬁ
 *
œbñ
,

983 c⁄° 
°d
::
li°
<
›î™d_öfo
> &
›î™ds
,

984 c⁄° 
›î™d_öfo
 &
ªtu∫_v¨
,

985 c⁄° 
°d
::
li°
<> &
›ti⁄s
,

986 c⁄° 
°d
::
li°
<> &
sˇœr_ty≥
,

987 
mem‹y_•a˚_t
 
•a˚_•ec
,

988 c⁄° *
fûe
,

989 
löe
,

990 c⁄° *
sour˚
,

991 c⁄° 
c‹e_c⁄fig
 *
c⁄fig
 ) : 
	$w¨p_ö°_t
(
c⁄fig
)

993 
m_uid
 = ++
g_num_±x_ö°_uid
;

994 
m_PC
 = 0;

995 
m_›code
 = 
›code
;

996 
m_¥ed
 = 
¥ed
;

997 
m_√g_¥ed
 = 
√g_¥ed
;

998 
m_¥ed_mod
 = 
¥ed_mod
;

999 
m_œbñ
 = 
œbñ
;

1000 c⁄° 
°d
::
li°
<
›î™d_öfo
> 
checked_›î™ds
 = 
	`check_›î™ds
(
›code
,
sˇœr_ty≥
,
›î™ds
);

1001 
m_›î™ds
.
	`ö£π
(m_›î™ds.
	`begö
(), 
checked_›î™ds
.begö(), checked_›î™ds.
	`íd
() );

1002 
m_ªtu∫_v¨
 = 
ªtu∫_v¨
;

1003 
m_›ti⁄s
 = 
›ti⁄s
;

1004 
m_wide
 = 
Ál£
;

1005 
m_hi
 = 
Ál£
;

1006 
m_lo
 = 
Ál£
;

1007 
m_uni
 = 
Ál£
;

1008 
m_exô
 = 
Ál£
;

1009 
m_abs
 = 
Ál£
;

1010 
m_√g
 = 
Ál£
;

1011 
m_to_›ti⁄
 = 
Ál£
;

1012 
m_ˇche_›ti⁄
 = 0;

1013 
m_roundög_mode
 = 
RN_OPTION
;

1014 
m_com∑ª_›
 = -1;

1015 
m_ßtuøti⁄_mode
 = 0;

1016 
m_geom_•ec
 = 0;

1017 
m_ve˘‹_•ec
 = 0;

1018 
m_©omic_•ec
 = 0;

1019 
m_memb¨_Àvñ
 = 0;

1020 
m_ö°_size
 = 8;

1022 
°d
::
li°
<>::
c⁄°_ôî©‹
 
i
;

1023 
n
=1;

1024  
i
=
›ti⁄s
.
	`begö
(); i!›ti⁄s.
	`íd
(); i++, 
n
++ ) {

1025 
œ°_±x_ö°_›ti⁄
 = *
i
;

1026  
œ°_±x_ö°_›ti⁄
 ) {

1027 
EQU_OPTION
:

1028 
NEU_OPTION
:

1029 
LTU_OPTION
:

1030 
LEU_OPTION
:

1031 
GTU_OPTION
:

1032 
GEU_OPTION
:

1033 
EQ_OPTION
:

1034 
NE_OPTION
:

1035 
LT_OPTION
:

1036 
LE_OPTION
:

1037 
GT_OPTION
:

1038 
GE_OPTION
:

1039 
LS_OPTION
:

1040 
HS_OPTION
:

1041 
m_com∑ª_›
 = 
œ°_±x_ö°_›ti⁄
;

1043 
NUM_OPTION
:

1044 
NAN_OPTION
:

1045 
m_com∑ª_›
 = 
œ°_±x_ö°_›ti⁄
;

1048 
SAT_OPTION
:

1049 
m_ßtuøti⁄_mode
 = 1;

1051 
RNI_OPTION
:

1052 
RZI_OPTION
:

1053 
RMI_OPTION
:

1054 
RPI_OPTION
:

1055 
RN_OPTION
:

1056 
RZ_OPTION
:

1057 
RM_OPTION
:

1058 
RP_OPTION
:

1059 
m_roundög_mode
 = 
œ°_±x_ö°_›ti⁄
;

1061 
HI_OPTION
:

1062 
m_com∑ª_›
 = 
œ°_±x_ö°_›ti⁄
;

1063 
m_hi
 = 
åue
;

1064 
	`as£π
–!
m_lo
 );

1065 
	`as£π
–!
m_wide
 );

1067 
LO_OPTION
:

1068 
m_com∑ª_›
 = 
œ°_±x_ö°_›ti⁄
;

1069 
m_lo
 = 
åue
;

1070 
	`as£π
–!
m_hi
 );

1071 
	`as£π
–!
m_wide
 );

1073 
WIDE_OPTION
:

1074 
m_wide
 = 
åue
;

1075 
	`as£π
–!
m_lo
 );

1076 
	`as£π
–!
m_hi
 );

1078 
UNI_OPTION
:

1079 
m_uni
 = 
åue
;

1081 
GEOM_MODIFIER_1D
:

1082 
GEOM_MODIFIER_2D
:

1083 
GEOM_MODIFIER_3D
:

1084 
m_geom_•ec
 = 
œ°_±x_ö°_›ti⁄
;

1086 
V2_TYPE
:

1087 
V3_TYPE
:

1088 
V4_TYPE
:

1089 
m_ve˘‹_•ec
 = 
œ°_±x_ö°_›ti⁄
;

1091 
ATOMIC_AND
:

1092 
ATOMIC_OR
:

1093 
ATOMIC_XOR
:

1094 
ATOMIC_CAS
:

1095 
ATOMIC_EXCH
:

1096 
ATOMIC_ADD
:

1097 
ATOMIC_INC
:

1098 
ATOMIC_DEC
:

1099 
ATOMIC_MIN
:

1100 
ATOMIC_MAX
:

1101 
m_©omic_•ec
 = 
œ°_±x_ö°_›ti⁄
;

1103 
APPROX_OPTION
:

1105 
FULL_OPTION
:

1107 
ANY_OPTION
:

1108 
m_vŸe_mode
 = 
vŸe_™y
;

1110 
ALL_OPTION
:

1111 
m_vŸe_mode
 = 
vŸe_Æl
;

1113 
GLOBAL_OPTION
:

1114 
m_memb¨_Àvñ
 = 
GLOBAL_OPTION
;

1116 
CTA_OPTION
:

1117 
m_memb¨_Àvñ
 = 
CTA_OPTION
;

1119 
SYS_OPTION
:

1120 
m_memb¨_Àvñ
 = 
SYS_OPTION
;

1122 
FTZ_OPTION
:

1124 
EXIT_OPTION
:

1125 
m_exô
 = 
åue
;

1127 
ABS_OPTION
:

1128 
m_abs
 = 
åue
;

1130 
NEG_OPTION
:

1131 
m_√g
 = 
åue
;

1133 
TO_OPTION
:

1134 
m_to_›ti⁄
 = 
åue
;

1136 
CA_OPTION
: 
CG_OPTION
: 
CS_OPTION
: 
LU_OPTION
: 
CV_OPTION
:

1137 
m_ˇche_›ti⁄
 = 
œ°_±x_ö°_›ti⁄
;

1139 
HALF_OPTION
:

1140 
m_ö°_size
 = 4;

1143 
	`as£π
(0);

1147 
m_sˇœr_ty≥
 = 
sˇœr_ty≥
;

1148 
m_•a˚_•ec
 = 
•a˚_•ec
;

1149 if––
›code
 =
ST_OP
 || opcodê=
LD_OP
 ) && (
•a˚_•ec
 =
undeföed_•a˚
) ) {

1150 
m_•a˚_•ec
 = 
gíîic_•a˚
;

1152  
°d
::
ve˘‹
<
›î™d_öfo
>::
c⁄°_ôî©‹
 
i
=
m_›î™ds
.
	`begö
(); i!=m_›î™ds.
	`íd
(); ++i) {

1153 c⁄° 
›î™d_öfo
 &
›
 = *
i
;

1154 if–
›
.
	`gë_addr_•a˚
(Ë!
undeföed_•a˚
 )

1155 
m_•a˚_•ec
 = 
›
.
	`gë_addr_•a˚
();

1157 if–
›code
 =
TEX_OP
 )

1158 
m_•a˚_•ec
 = 
ãx_•a˚
;

1160 
m_sour˚_fûe
 = 
fûe
?file:"<unknown>";

1161 
m_sour˚_löe
 = 
löe
;

1162 
m_sour˚
 = 
sour˚
;

1163 
	}
}

1165 
	g±x_ö°ru˘i⁄
::
	$¥öt_ö¢
() const

1167 
	`¥öt_ö¢
(
°dout
);

1168 
	`fÊush
(
°dout
);

1169 
	}
}

1171 
	g±x_ö°ru˘i⁄
::
	$¥öt_ö¢
–
FILE
 *
Â
 ) const

1173 
buf
[1024], *
p
;

1174 
	`¢¥ötf
(
buf
,1024,"%s", 
m_sour˚
.
	`c_°r
());

1175 
p
 = 
	`°πok
(
buf
,";");

1176 if–!
	`is_œbñ
() )

1177 
	`Ârötf
(
Â
," PC=0x%03x ", 
m_PC
 );

1179 
	`Ârötf
(
Â
," " );

1180 
	`Ârötf
(
Â
,"(%s:%uË%s", 
m_sour˚_fûe
.
	`c_°r
(), 
m_sour˚_löe
, 
p
 );

1181 
	}
}

1183 
	gfun˘i⁄_öfo
::
sm_√xt_uid
 = 1;

1185 
	gfun˘i⁄_öfo
::
	$fun˘i⁄_öfo
(
íåy_poöt
 )

1187 
m_uid
 = 
sm_√xt_uid
++;

1188 
m_íåy_poöt
 = (
íåy_poöt
==1)?
åue
:
Ál£
;

1189 
m_exã∫
 = (
íåy_poöt
==2)?
åue
:
Ál£
;

1190 
num_ªc⁄vîgí˚_∑ús
 = 0;

1191 
m_symèb
 = 
NULL
;

1192 
m_as£mbÀd
 = 
Ál£
;

1193 
m_ªtu∫_v¨_sym
 = 
NULL
;

1194 
m_kî√l_öfo
.
cmem
 = 0;

1195 
m_kî√l_öfo
.
lmem
 = 0;

1196 
m_kî√l_öfo
.
ªgs
 = 0;

1197 
m_kî√l_öfo
.
smem
 = 0;

1198 
m_loˇl_mem_‰amesize
 = 0;

1199 
	}
}

1201 
	gfun˘i⁄_öfo
::
	$¥öt_ö¢
–
pc
, 
FILE
 * 
Â
 ) const

1203 
ö°_size
=1;

1204 
ödex
 = 
pc
 - 
m_°¨t_PC
;

1205 
comm™d
[1024];

1206 
buf„r
[1024];

1207 
	`¢¥ötf
(
comm™d
,1024,"c++fûà-∞%s",
m_«me
.
	`c_°r
());

1208 
FILE
 *
p
 = 
	`p›í
(
comm™d
,"r");

1209 
buf„r
[0]=0;

1210 
	`fsˇnf
(
p
,"%1023s",
buf„r
);

1211 
	`Ârötf
(
Â
,"%s",
buf„r
);

1212 i‡–
ödex
 >
m_ö°r_mem_size
 ) {

1213 
	`Ârötf
(
Â
, "<∑°Üa° in°ru˘i⁄ (maxÖc=%u)>", 
m_°¨t_PC
 + 
m_ö°r_mem_size
 - 1 );

1215 i‡–
m_ö°r_mem
[
ödex
] !
NULL
 ) {

1216 
m_ö°r_mem
[
ödex
]->
	`¥öt_ö¢
(
Â
);

1217 
ö°_size
 = 
m_ö°r_mem
[
ödex
]->
isize
;

1219 
	`Ârötf
(
Â
, "<nÿö°ru˘i⁄áàp¯%u>", 
pc
 );

1221 
	`p˛o£
(
p
);

1222  
ö°_size
;

1223 
	}
}

1225 
gpgpu_±x_as£mbÀ
–
°d
::
°rög
 
k«me
, *
köfo
 )

1227 
fun˘i⁄_öfo
 *
	gfunc_öfo
 = (fun˘i⁄_öfÿ*)
köfo
;

1228 if((
	gfun˘i⁄_öfo
 *)
	gköfo
 =
NULL
) {

1229 
¥ötf
("GPGPU-Sim PTX: W¨nög - missög fun˘i⁄ deföôi⁄ \'%s\'\n", 
k«me
.
c_°r
());

1232 if–
	gfunc_öfo
->
is_exã∫
() ) {

1233 
¥ötf
("GPGPU-Sim PTX: skùpögás£mbly f‹Éxã∫ de˛¨ed fun˘i⁄ \'%s\'\n", 
func_öfo
->
gë_«me
().
c_°r
() );

1236 
	gfunc_öfo
->
±x_as£mbÀ
();

	@src/cuda-sim/ptx_ir.h

28 #i‚de‡
±x_ú_INCLUDED


29 
	#±x_ú_INCLUDED


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

33 
	~<c°dlib
>

34 
	~<c°rög
>

35 
	~<°rög
>

36 
	~<li°
>

37 
	~<m≠
>

38 
	~<ve˘‹
>

39 
	~<as£π.h
>

41 
	~"±x.èb.h
"

42 
	~"±x_sim.h
"

44 
	~"mem‹y.h
"

46 ˛as†
	cty≥_öfo_key
 {

47 
	mpublic
:

48 
	$ty≥_öfo_key
()

50 
m_öô
 = 
Ál£
;

52 
	$ty≥_öfo_key
–
mem‹y_•a˚_t
 
•a˚_•ec
, 
sˇœr_ty≥_•ec
, 
ve˘‹_•ec
, 
Æignmít_•ec
, 
exã∫_•ec
, 
¨øy_dim
 )

54 
m_öô
 = 
åue
;

55 
m_•a˚_•ec
 = 
•a˚_•ec
;

56 
m_sˇœr_ty≥_•ec
 = 
sˇœr_ty≥_•ec
;

57 
m_ve˘‹_•ec
 = 
ve˘‹_•ec
;

58 
m_Æignmít_•ec
 = 
Æignmít_•ec
;

59 
m_exã∫_•ec
 = 
exã∫_•ec
;

60 
m_¨øy_dim
 = 
¨øy_dim
;

61 
m_is_fun˘i⁄
 = 0;

62 
	}
}

63 
	$£t_is_func
()

65 
	`as£π
(!
m_öô
);

66 
m_öô
 = 
åue
;

67 
m_•a˚_•ec
 = 
undeföed_•a˚
;

68 
m_sˇœr_ty≥_•ec
 = 0;

69 
m_ve˘‹_•ec
 = 0;

70 
m_Æignmít_•ec
 = 0;

71 
m_exã∫_•ec
 = 0;

72 
m_¨øy_dim
 = 0;

73 
m_is_fun˘i⁄
 = 1;

74 
	}
}

76 
	$£t_¨øy_dim
–
¨øy_dim
 ) { 
m_¨øy_dim
 =áºay_dim; 
	}
}

77 
	$gë_¨øy_dim
(Ëc⁄° { 
	`as£π
(
m_öô
);  
m_¨øy_dim
; 
	}
}

79 
boﬁ
 
	$is_ªg
(Ëc⁄° {  
m_•a˚_•ec
 =
ªg_•a˚
;
	}
}

80 
boﬁ
 
	$is_∑øm_kî√l
(Ëc⁄° {  
m_•a˚_•ec
 =
∑øm_•a˚_kî√l
;
	}
}

81 
boﬁ
 
	$is_∑øm_loˇl
(Ëc⁄° {  
m_•a˚_•ec
 =
∑øm_•a˚_loˇl
; 
	}
}

82 
boﬁ
 
	$is_∑øm_un˛assifõd
(Ëc⁄° {  
m_•a˚_•ec
 =
∑øm_•a˚_un˛assifõd
; 
	}
}

83 
boﬁ
 
	$is_globÆ
(Ëc⁄° {  
m_•a˚_•ec
 =
globÆ_•a˚
;
	}
}

84 
boﬁ
 
	$is_loˇl
(Ëc⁄° {  
m_•a˚_•ec
 =
loˇl_•a˚
;
	}
}

85 
boﬁ
 
	$is_sh¨ed
(Ëc⁄° {  
m_•a˚_•ec
 =
sh¨ed_•a˚
;
	}
}

86 
boﬁ
 
	$is_c⁄°
(Ëc⁄° {  
m_•a˚_•ec
.
	`gë_ty≥
(Ë=
c⁄°_•a˚
;
	}
}

87 
boﬁ
 
	$is_ãx
(Ëc⁄° {  
m_•a˚_•ec
 =
ãx_•a˚
;
	}
}

88 
boﬁ
 
	$is_func_addr
(Ëc⁄° {  
m_is_fun˘i⁄
?
åue
:
Ál£
; 
	}
}

89 
	$sˇœr_ty≥
(Ëc⁄° {  
m_sˇœr_ty≥_•ec
;
	}
}

90 
	$ty≥_decode
–
size_t
 &
size
, &
t
 ) const;

91 
	`ty≥_decode
–
ty≥
, 
size_t
 &
size
, &
t
 );

92 
mem‹y_•a˚_t
 
	$gë_mem‹y_•a˚
(Ëc⁄° {  
m_•a˚_•ec
; 
	}
}

93 
	g¥iv©e
:

94 
boﬁ
 
m_öô
;

95 
mem‹y_•a˚_t
 
	gm_•a˚_•ec
;

96 
	gm_sˇœr_ty≥_•ec
;

97 
	gm_ve˘‹_•ec
;

98 
	gm_Æignmít_•ec
;

99 
	gm_exã∫_•ec
;

100 
	gm_¨øy_dim
;

101 
	gm_is_fun˘i⁄
;

103 
‰õnd
 
˛ass
 
	gty≥_öfo_key_com∑ª
;

106 
˛ass
 
	gsymbﬁ_èbÀ
;

108 
	sty≥_öfo_key_com∑ª
 {

109 
boﬁ
 
›î©‹
()–c⁄° 
	mty≥_öfo_key
 &
	ma
, c⁄°Åy≥_öfo_key &
	mb
 ) const

111 
as£π
–
a
.
m_öô
 && 
b
.m_init );

112 i‡–
	ma
.
	mm_•a˚_•ec
 < 
	mb
.m_•a˚_•e¯Ë 
	måue
;

113 i‡–
	ma
.
	mm_sˇœr_ty≥_•ec
 < 
	mb
.m_sˇœr_ty≥_•e¯Ë 
	måue
;

114 i‡–
	ma
.
	mm_ve˘‹_•ec
 < 
	mb
.m_ve˘‹_•e¯Ë 
	måue
;

115 i‡–
	ma
.
	mm_Æignmít_•ec
 < 
	mb
.m_Æignmít_•e¯Ë 
	måue
;

116 i‡–
	ma
.
	mm_exã∫_•ec
 < 
	mb
.m_exã∫_•e¯Ë 
	måue
;

117 i‡–
	ma
.
	mm_¨øy_dim
 < 
	mb
.m_¨øy_dim )  
	måue
;

118 i‡–
	ma
.
	mm_is_fun˘i⁄
 < 
	mb
.m_is_fun˘i⁄ )  
	måue
;

120  
	mÁl£
;

124 ˛as†
	cty≥_öfo
 {

125 
	mpublic
:

126 
	$ty≥_öfo
–
symbﬁ_èbÀ
 *
sc›e
, 
ty≥_öfo_key
 
t
 )

128 
m_ty≥_öfo
 = 
t
;

130 c⁄° 
ty≥_öfo_key
 &
	$gë_key
(Ëc⁄° {  
m_ty≥_öfo
;
	}
}

132 
	g¥iv©e
:

133 
symbﬁ_èbÀ
 *
m_sc›e
;

134 
ty≥_öfo_key
 
	gm_ty≥_öfo
;

137 
	e›î™d_ty≥
 {

138 
	mªg_t
, 
	mve˘‹_t
, 
	mbuûtö_t
, 
	maddªss_t
, 
	mmem‹y_t
, 
	mÊﬂt_›_t
, 
	mdoubÀ_›_t
, 
	möt_t
,

139 
	munsig√d_t
, 
	msymbﬁic_t
, 
	mœbñ_t
, 
	mv_ªg_t
, 
	mv_Êﬂt_›_t
, 
	mv_doubÀ_›_t
,

140 
	mv_öt_t
, 
	mv_unsig√d_t


143 
˛ass
 
	g›î™d_öfo
;

145 ˛as†
	csymbﬁ
 {

146 
	mpublic
:

147 
	$symbﬁ
–c⁄° *
«me
, c⁄° 
ty≥_öfo
 *
ty≥
, c⁄° *
loˇti⁄
, 
size
 )

149 
m_uid
 = 
	`gë_uid
();

150 
m_«me
 = 
«me
;

151 
m_de˛_loˇti⁄
 = 
loˇti⁄
;

152 
m_ty≥
 = 
ty≥
;

153 
m_size
 = 
size
;

154 
m_addªss_vÆid
 = 
Ál£
;

155 
m_is_œbñ
 = 
Ál£
;

156 
m_is_sh¨ed
 = 
Ál£
;

157 
m_is_c⁄°
 = 
Ál£
;

158 
m_is_globÆ
 = 
Ál£
;

159 
m_is_loˇl
 = 
Ál£
;

160 
m_is_∑øm_loˇl
 = 
Ál£
;

161 
m_is_ãx
 = 
Ál£
;

162 
m_is_func_addr
 = 
Ál£
;

163 
m_ªg_num_vÆid
 = 
Ál£
;

164 
m_fun˘i⁄
 = 
NULL
;

165 i‡–
ty≥
 ) 
m_is_sh¨ed
 =Åy≥->
	`gë_key
().
	`is_sh¨ed
();

166 i‡–
ty≥
 ) 
m_is_c⁄°
 =Åy≥->
	`gë_key
().
	`is_c⁄°
();

167 i‡–
ty≥
 ) 
m_is_globÆ
 =Åy≥->
	`gë_key
().
	`is_globÆ
();

168 i‡–
ty≥
 ) 
m_is_loˇl
 =Åy≥->
	`gë_key
().
	`is_loˇl
();

169 i‡–
ty≥
 ) 
m_is_∑øm_loˇl
 =Åy≥->
	`gë_key
().
	`is_∑øm_loˇl
();

170 i‡–
ty≥
 ) 
m_is_ãx
 =Åy≥->
	`gë_key
().
	`is_ãx
();

171 i‡–
ty≥
 ) 
m_is_func_addr
 =Åy≥->
	`gë_key
().
	`is_func_addr
();

173 
	$gë_size_ö_byãs
() const

175  
m_size
;

176 
	}
}

177 c⁄° 
	g°d
::
°rög
 &
	$«me
(Ëc⁄° {  
m_«me
;
	}
}

178 c⁄° 
	g°d
::
°rög
 &
	$de˛_loˇti⁄
(Ëc⁄° {  
m_de˛_loˇti⁄
;
	}
}

179 c⁄° 
ty≥_öfo
 *
	$ty≥
(Ëc⁄° {  
m_ty≥
;
	}
}

180 
addr_t
 
	$gë_addªss
() const

182 
	`as£π
–
m_is_œbñ
 || !
m_ty≥
->
	`gë_key
().
	`is_ªg
() );

183 
	`as£π
–
m_addªss_vÆid
 );

184  
m_addªss
;

185 
	}
}

186 
fun˘i⁄_öfo
 *
	$gë_pc
() const

188  
m_fun˘i⁄
;

189 
	}
}

190 
	$£t_ªgno
–
ªgno
, 
¨ch_ªgno
 )

192 
m_ªg_num_vÆid
 = 
åue
;

193 
m_ªg_num
 = 
ªgno
;

194 
m_¨ch_ªg_num
 = 
¨ch_ªgno
;

195 
	}
}

197 
	$£t_addªss
–
addr_t
 
addr
 )

199 
m_addªss_vÆid
 = 
åue
;

200 
m_addªss
 = 
addr
;

201 
	}
}

202 
	$£t_œbñ_addªss
–
addr_t
 
addr
)

204 
m_addªss_vÆid
 = 
åue
;

205 
m_addªss
 = 
addr
;

206 
m_is_œbñ
 = 
åue
;

207 
	}
}

208 
	$£t_fun˘i⁄
–
fun˘i⁄_öfo
 *
func
 )

210 
m_fun˘i⁄
 = 
func
;

211 
m_is_func_addr
 = 
åue
;

212 
	}
}

214 
boﬁ
 
	$is_œbñ
(Ëc⁄° {  
m_is_œbñ
;
	}
}

215 
boﬁ
 
	$is_sh¨ed
(Ëc⁄° {  
m_is_sh¨ed
;
	}
}

216 
boﬁ
 
	$is_c⁄°
(Ëc⁄° {  
m_is_c⁄°
;
	}
}

217 
boﬁ
 
	$is_globÆ
(Ëc⁄° {  
m_is_globÆ
;
	}
}

218 
boﬁ
 
	$is_loˇl
(Ëc⁄° {  
m_is_loˇl
;
	}
}

219 
boﬁ
 
	$is_∑øm_loˇl
(Ëc⁄° {  
m_is_∑øm_loˇl
; 
	}
}

220 
boﬁ
 
	$is_ãx
(Ëc⁄° {  
m_is_ãx
;
	}
}

221 
boﬁ
 
	$is_func_addr
(Ëc⁄° {  
m_is_func_addr
; 
	}
}

222 
boﬁ
 
	$is_ªg
() const {

223 if–
m_ty≥
 =
NULL
 )

224  
Ál£
;

225  
m_ty≥
->
	`gë_key
().
	`is_ªg
();

226 
	}
}

228 
add_öôülizî
–c⁄° 
°d
::
li°
<
›î™d_öfo
> &
öô
 );

229 
boﬁ
 
	$has_öôülizî
() const

231  
m_öôülizî
.
	`size
() > 0;

232 
	}
}

233 
	g°d
::
li°
<
›î™d_öfo
> 
	$gë_öôülizî
() const

235  
m_öôülizî
;

236 
	}
}

237 
	$ªg_num
() const

239 
	`as£π
–
m_ªg_num_vÆid
 );

240  
m_ªg_num
;

241 
	}
}

242 
	$¨ch_ªg_num
() const

244 
	`as£π
–
m_ªg_num_vÆid
 );

245  
m_¨ch_ªg_num
;

246 
	}
}

247 
	$¥öt_öfo
(
FILE
 *
Â
) const;

248 
	$uid
(Ëc⁄° {  
m_uid
; 
	}
}

250 
	g¥iv©e
:

251 
gë_uid
();

252 
	gm_uid
;

253 c⁄° 
ty≥_öfo
 *
	gm_ty≥
;

254 
	gm_size
;

255 
	g°d
::
°rög
 
m_«me
;

256 
	g°d
::
°rög
 
m_de˛_loˇti⁄
;

258 
	gm_addªss
;

259 
fun˘i⁄_öfo
 *
	gm_fun˘i⁄
;

261 
boﬁ
 
	gm_addªss_vÆid
;

262 
boﬁ
 
	gm_is_œbñ
;

263 
boﬁ
 
	gm_is_sh¨ed
;

264 
boﬁ
 
	gm_is_c⁄°
;

265 
boﬁ
 
	gm_is_globÆ
;

266 
boﬁ
 
	gm_is_loˇl
;

267 
boﬁ
 
	gm_is_∑øm_loˇl
;

268 
boﬁ
 
	gm_is_ãx
;

269 
boﬁ
 
	gm_is_func_addr
;

270 
	gm_ªg_num
;

271 
	gm_¨ch_ªg_num
;

272 
boﬁ
 
	gm_ªg_num_vÆid
;

274 
	g°d
::
li°
<
›î™d_öfo
> 
m_öôülizî
;

275 
	gsm_√xt_uid
;

278 ˛as†
	csymbﬁ_èbÀ
 {

279 
	mpublic
:

280 
symbﬁ_èbÀ
();

281 
symbﬁ_èbÀ
–c⁄° *
sc›e_«me
, 
íåy_poöt
, symbﬁ_èbÀ *
∑ª¡
 );

282 
£t_«me
–c⁄° *
«me
 );

283 c⁄° 
	m±x_vîsi⁄
 &
	$gë_±x_vîsi⁄
() const;

284 
	$gë_sm_èrgë
() const;

285 
	`£t_±x_vîsi⁄
–
vî
, 
ext
 );

286 
	`£t_sm_èrgë
–c⁄° *
èrgë
, c⁄° *
ext
, c⁄° *
ext2
 );

287 
symbﬁ
* 
	`lookup
–c⁄° *
idítifõr
 );

288 
°d
::
°rög
 
	$gë_sc›e_«me
(Ëc⁄° {  
m_sc›e_«me
; }

289 
symbﬁ
 *
	`add_v¨übÀ
–c⁄° *
idítifõr
, c⁄° 
ty≥_öfo
 *
ty≥
, 
size
, c⁄° *
fûíame
, 
löe
 );

290 
	`add_fun˘i⁄
–
fun˘i⁄_öfo
 *
func
, c⁄° *
fûíame
, 
löíumbî
 );

291 
boﬁ
 
	`add_fun˘i⁄_de˛
–c⁄° *
«me
, 
íåy_poöt
, 
fun˘i⁄_öfo
 **
func_öfo
, 
symbﬁ_èbÀ
 **symbol_table );

292 
ty≥_öfo
 *
	`add_ty≥
–
mem‹y_•a˚_t
 
•a˚_•ec
, 
sˇœr_ty≥_•ec
, 
ve˘‹_•ec
, 
Æignmít_•ec
, 
exã∫_•ec
 );

293 
ty≥_öfo
 *
	`add_ty≥
–
fun˘i⁄_öfo
 *
func
 );

294 
ty≥_öfo
 *
	`gë_¨øy_ty≥
–ty≥_öfÿ*
ba£_ty≥
, 
¨øy_dim
 );

295 
	`£t_œbñ_addªss
–c⁄° 
symbﬁ
 *
œbñ
, 
addr
 );

296 
	$√xt_ªg_num
(Ë{  ++
m_ªg_Æloˇt‹
;
	}
}

297 
addr_t
 
	$gë_sh¨ed_√xt
(Ë{  
m_sh¨ed_√xt
;
	}
}

298 
addr_t
 
	$gë_globÆ_√xt
(Ë{  
m_globÆ_√xt
;
	}
}

299 
addr_t
 
	$gë_loˇl_√xt
(Ë{  
m_loˇl_√xt
;
	}
}

300 
addr_t
 
	$gë_ãx_√xt
(Ë{  
m_ãx_√xt
;
	}
}

301 
	$Æloc_sh¨ed
–
num_byãs
 ) { 
m_sh¨ed_√xt
 +num_byãs;
	}
}

302 
	$Æloc_globÆ
–
num_byãs
 ) { 
m_globÆ_√xt
 +num_byãs;
	}
}

303 
	$Æloc_loˇl
–
num_byãs
 ) { 
m_loˇl_√xt
 +num_byãs;
	}
}

304 
	$Æloc_ãx
–
num_byãs
 ) { 
m_ãx_√xt
 +num_byãs;
	}
}

306 
	g°d
::
	tli°
<
	tsymbﬁ
*>::
	tôî©‹
 iterator;

308 
ôî©‹
 
	$globÆ_ôî©‹_begö
(Ë{  
m_globÆs
.
	`begö
();
	}
}

309 
ôî©‹
 
	$globÆ_ôî©‹_íd
(Ë{  
m_globÆs
.
	`íd
();
	}
}

311 
ôî©‹
 
	$c⁄°_ôî©‹_begö
(Ë{  
m_c⁄°s
.
	`begö
();
	}
}

312 
ôî©‹
 
	$c⁄°_ôî©‹_íd
(Ë{  
m_c⁄°s
.
	`íd
();
	}
}

314 
dump
();

315 
	g¥iv©e
:

316 
m_ªg_Æloˇt‹
;

317 
	gm_sh¨ed_√xt
;

318 
	gm_c⁄°_√xt
;

319 
	gm_globÆ_√xt
;

320 
	gm_loˇl_√xt
;

321 
	gm_ãx_√xt
;

323 
symbﬁ_èbÀ
 *
	gm_∑ª¡
;

324 
±x_vîsi⁄
 
	gm_±x_vîsi⁄
;

325 
	g°d
::
°rög
 
m_sc›e_«me
;

326 
	g°d
::
m≠
<
°d
::
°rög
, 
	gsymbﬁ
 *> 
	gm_symbﬁs
;

327 
	g°d
::
m≠
<
ty≥_öfo_key
,
	gty≥_öfo
*,
	gty≥_öfo_key_com∑ª
> 
	gm_ty≥s
;

328 
	g°d
::
li°
<
symbﬁ
*> 
m_globÆs
;

329 
	g°d
::
li°
<
symbﬁ
*> 
m_c⁄°s
;

330 
	g°d
::
m≠
<
°d
::
°rög
,
	gfun˘i⁄_öfo
*> 
	gm_fun˘i⁄_öfo_lookup
;

331 
	g°d
::
m≠
<
°d
::
°rög
,
	gsymbﬁ_èbÀ
*> 
	gm_fun˘i⁄_symèb_lookup
;

334 ˛as†
	c›î™d_öfo
 {

335 
	mpublic
:

336 
	$›î™d_öfo
()

338 
m_addr_•a˚
 = 
undeföed_•a˚
;

339 
m_›î™d_lohi
 = 0;

340 
m_doubÀ_›î™d_ty≥
 = 0;

341 
m_›î™d_√g
 = 
Ál£
;

342 
m_c⁄°_mem_off£t
 = 0;

343 
m_uid
 = 
	`gë_uid
();

344 
m_vÆid
 = 
Ál£
;

346 
	$›î™d_öfo
–c⁄° 
symbﬁ
 *
addr
 )

348 
m_addr_•a˚
 = 
undeföed_•a˚
;

349 
m_›î™d_lohi
 = 0;

350 
m_doubÀ_›î™d_ty≥
 = 0;

351 
m_›î™d_√g
 = 
Ál£
;

352 
m_c⁄°_mem_off£t
 = 0;

353 
m_uid
 = 
	`gë_uid
();

354 
m_vÆid
 = 
åue
;

355 i‡–
addr
->
	`is_œbñ
() ) {

356 
m_ty≥
 = 
œbñ_t
;

357 } i‡–
addr
->
	`is_sh¨ed
() ) {

358 
m_ty≥
 = 
symbﬁic_t
;

359 } i‡–
addr
->
	`is_c⁄°
() ) {

360 
m_ty≥
 = 
symbﬁic_t
;

361 } i‡–
addr
->
	`is_globÆ
() ) {

362 
m_ty≥
 = 
symbﬁic_t
;

363 } i‡–
addr
->
	`is_loˇl
() ) {

364 
m_ty≥
 = 
symbﬁic_t
;

365 } i‡–
addr
->
	`is_∑øm_loˇl
() ) {

366 
m_ty≥
 = 
symbﬁic_t
;

367 } i‡–
addr
->
	`is_ãx
() ) {

368 
m_ty≥
 = 
symbﬁic_t
;

369 } i‡–
addr
->
	`is_func_addr
() ) {

370 
m_ty≥
 = 
symbﬁic_t
;

372 
m_ty≥
 = 
ªg_t
;

374 
m_vÆue
.
m_symbﬁic
 = 
addr
;

375 
m_addr_off£t
 = 0;

376 
m_ve˘‹
 = 
Ál£
;

377 
m_√g_¥ed
 = 
Ál£
;

378 
m_is_ªtu∫_v¨
 = 
Ál£
;

379 
	}
}

380 
	$›î™d_öfo
–c⁄° 
symbﬁ
 *
addr1
, c⁄° symbﬁ *
addr2
 )

382 
m_addr_•a˚
 = 
undeföed_•a˚
;

383 
m_›î™d_lohi
 = 0;

384 
m_doubÀ_›î™d_ty≥
 = 0;

385 
m_›î™d_√g
 = 
Ál£
;

386 
m_c⁄°_mem_off£t
 = 0;

387 
m_uid
 = 
	`gë_uid
();

388 
m_vÆid
 = 
åue
;

389 
m_ty≥
 = 
mem‹y_t
;

390 
m_vÆue
.
m_ve˘‹_symbﬁic
 = 
√w
 c⁄° 
symbﬁ
*[4];

391 
m_vÆue
.
m_ve˘‹_symbﬁic
[0] = 
addr1
;

392 
m_vÆue
.
m_ve˘‹_symbﬁic
[1] = 
addr2
;

393 
m_vÆue
.
m_ve˘‹_symbﬁic
[2] = 
NULL
;

394 
m_vÆue
.
m_ve˘‹_symbﬁic
[3] = 
NULL
;

395 
m_addr_off£t
 = 0;

396 
m_ve˘‹
 = 
Ál£
;

397 
m_√g_¥ed
 = 
Ál£
;

398 
m_is_ªtu∫_v¨
 = 
Ál£
;

399 
	}
}

400 
	$›î™d_öfo
–
buûtö_id
, 
dim_mod
 )

402 
m_addr_•a˚
 = 
undeföed_•a˚
;

403 
m_›î™d_lohi
 = 0;

404 
m_doubÀ_›î™d_ty≥
 = 0;

405 
m_›î™d_√g
 = 
Ál£
;

406 
m_c⁄°_mem_off£t
 = 0;

407 
m_uid
 = 
	`gë_uid
();

408 
m_vÆid
 = 
åue
;

409 
m_ve˘‹
 = 
Ál£
;

410 
m_ty≥
 = 
buûtö_t
;

411 
m_vÆue
.
m_öt
 = 
buûtö_id
;

412 
m_addr_off£t
 = 
dim_mod
;

413 
m_√g_¥ed
 = 
Ál£
;

414 
m_is_ªtu∫_v¨
 = 
Ál£
;

415 
	}
}

416 
	$›î™d_öfo
–c⁄° 
symbﬁ
 *
addr
, 
off£t
 )

418 
m_addr_•a˚
 = 
undeföed_•a˚
;

419 
m_›î™d_lohi
 = 0;

420 
m_doubÀ_›î™d_ty≥
 = 0;

421 
m_›î™d_√g
 = 
Ál£
;

422 
m_c⁄°_mem_off£t
 = 0;

423 
m_uid
 = 
	`gë_uid
();

424 
m_vÆid
 = 
åue
;

425 
m_ve˘‹
 = 
Ál£
;

426 
m_ty≥
 = 
addªss_t
;

427 
m_vÆue
.
m_symbﬁic
 = 
addr
;

428 
m_addr_off£t
 = 
off£t
;

429 
m_√g_¥ed
 = 
Ál£
;

430 
m_is_ªtu∫_v¨
 = 
Ál£
;

431 
	}
}

432 
	$›î™d_öfo
–
x
 )

434 
m_addr_•a˚
 = 
undeföed_•a˚
;

435 
m_›î™d_lohi
 = 0;

436 
m_doubÀ_›î™d_ty≥
 = 0;

437 
m_›î™d_√g
 = 
Ál£
;

438 
m_c⁄°_mem_off£t
 = 0;

439 
m_uid
 = 
	`gë_uid
();

440 
m_vÆid
 = 
åue
;

441 
m_ve˘‹
 = 
Ál£
;

442 
m_ty≥
 = 
unsig√d_t
;

443 
m_vÆue
.
m_unsig√d
 = 
x
;

444 
m_addr_off£t
 = 0;

445 
m_√g_¥ed
 = 
Ál£
;

446 
m_is_ªtu∫_v¨
 = 
Ál£
;

447 
	}
}

448 
	$›î™d_öfo
–
x
 )

450 
m_addr_•a˚
 = 
undeföed_•a˚
;

451 
m_›î™d_lohi
 = 0;

452 
m_doubÀ_›î™d_ty≥
 = 0;

453 
m_›î™d_√g
 = 
Ál£
;

454 
m_c⁄°_mem_off£t
 = 0;

455 
m_uid
 = 
	`gë_uid
();

456 
m_vÆid
 = 
åue
;

457 
m_ve˘‹
 = 
Ál£
;

458 
m_ty≥
 = 
öt_t
;

459 
m_vÆue
.
m_öt
 = 
x
;

460 
m_addr_off£t
 = 0;

461 
m_√g_¥ed
 = 
Ál£
;

462 
m_is_ªtu∫_v¨
 = 
Ál£
;

463 
	}
}

464 
	$›î™d_öfo
–
x
 )

466 
m_addr_•a˚
 = 
undeföed_•a˚
;

467 
m_›î™d_lohi
 = 0;

468 
m_doubÀ_›î™d_ty≥
 = 0;

469 
m_›î™d_√g
 = 
Ál£
;

470 
m_c⁄°_mem_off£t
 = 0;

471 
m_uid
 = 
	`gë_uid
();

472 
m_vÆid
 = 
åue
;

473 
m_ve˘‹
 = 
Ál£
;

474 
m_ty≥
 = 
Êﬂt_›_t
;

475 
m_vÆue
.
m_Êﬂt
 = 
x
;

476 
m_addr_off£t
 = 0;

477 
m_√g_¥ed
 = 
Ál£
;

478 
m_is_ªtu∫_v¨
 = 
Ál£
;

479 
	}
}

480 
	$›î™d_öfo
–
x
 )

482 
m_addr_•a˚
 = 
undeföed_•a˚
;

483 
m_›î™d_lohi
 = 0;

484 
m_doubÀ_›î™d_ty≥
 = 0;

485 
m_›î™d_√g
 = 
Ál£
;

486 
m_c⁄°_mem_off£t
 = 0;

487 
m_uid
 = 
	`gë_uid
();

488 
m_vÆid
 = 
åue
;

489 
m_ve˘‹
 = 
Ál£
;

490 
m_ty≥
 = 
doubÀ_›_t
;

491 
m_vÆue
.
m_doubÀ
 = 
x
;

492 
m_addr_off£t
 = 0;

493 
m_√g_¥ed
 = 
Ál£
;

494 
m_is_ªtu∫_v¨
 = 
Ál£
;

495 
	}
}

496 
	$›î™d_öfo
–c⁄° 
symbﬁ
 *
s1
, c⁄° symbﬁ *
s2
, c⁄° symbﬁ *
s3
, c⁄° symbﬁ *
s4
 )

498 
m_addr_•a˚
 = 
undeföed_•a˚
;

499 
m_›î™d_lohi
 = 0;

500 
m_doubÀ_›î™d_ty≥
 = 0;

501 
m_›î™d_√g
 = 
Ál£
;

502 
m_c⁄°_mem_off£t
 = 0;

503 
m_uid
 = 
	`gë_uid
();

504 
m_vÆid
 = 
åue
;

505 
m_ve˘‹
 = 
åue
;

506 
m_ty≥
 = 
ve˘‹_t
;

507 
m_vÆue
.
m_ve˘‹_symbﬁic
 = 
√w
 c⁄° 
symbﬁ
*[4];

508 
m_vÆue
.
m_ve˘‹_symbﬁic
[0] = 
s1
;

509 
m_vÆue
.
m_ve˘‹_symbﬁic
[1] = 
s2
;

510 
m_vÆue
.
m_ve˘‹_symbﬁic
[2] = 
s3
;

511 
m_vÆue
.
m_ve˘‹_symbﬁic
[3] = 
s4
;

512 
m_addr_off£t
 = 0;

513 
m_√g_¥ed
 = 
Ál£
;

514 
m_is_ªtu∫_v¨
 = 
Ál£
;

515 
	}
}

517 
	$make_mem‹y_›î™d
(Ë{ 
m_ty≥
 = 
mem‹y_t
;
	}
}

518 
	$£t_ªtu∫
(Ë{ 
m_is_ªtu∫_v¨
 = 
åue
; 
	}
}

520 c⁄° 
	g°d
::
°rög
 &
	$«me
() const

522 
	`as£π
–
m_ty≥
 =
symbﬁic_t
 || m_ty≥ =
ªg_t
 || m_ty≥ =
addªss_t
 || m_ty≥ =
mem‹y_t
 || m_ty≥ =
œbñ_t
);

523  
m_vÆue
.
m_symbﬁic
->
	`«me
();

524 
	}
}

526 
	$gë_ve˘_√Àm
() const

528 
	`as£π
–
	`is_ve˘‹
() );

529 if–!
m_vÆue
.
m_ve˘‹_symbﬁic
[0] )  0;

530 if–!
m_vÆue
.
m_ve˘‹_symbﬁic
[1] )  1;

531 if–!
m_vÆue
.
m_ve˘‹_symbﬁic
[2] )  2;

532 if–!
m_vÆue
.
m_ve˘‹_symbﬁic
[3] )  3;

534 
	}
}

536 c⁄° 
symbﬁ
* 
	$vec_symbﬁ
(
idx
) const

538 
	`as£π
(
idx
 < 4);

539 c⁄° 
symbﬁ
 *
ªsu…
 = 
m_vÆue
.
m_ve˘‹_symbﬁic
[
idx
];

540 
	`as£π
–
ªsu…
 !
NULL
 );

541  
ªsu…
;

542 
	}
}

544 c⁄° 
	g°d
::
°rög
 &
	$vec_«me1
() const

546 
	`as£π
–
m_ty≥
 =
ve˘‹_t
);

547  
m_vÆue
.
m_ve˘‹_symbﬁic
[0]->
	`«me
();

548 
	}
}

550 c⁄° 
	g°d
::
°rög
 &
	$vec_«me2
() const

552 
	`as£π
–
m_ty≥
 =
ve˘‹_t
);

553  
m_vÆue
.
m_ve˘‹_symbﬁic
[1]->
	`«me
();

554 
	}
}

556 c⁄° 
	g°d
::
°rög
 &
	$vec_«me3
() const

558 
	`as£π
–
m_ty≥
 =
ve˘‹_t
);

559  
m_vÆue
.
m_ve˘‹_symbﬁic
[2]->
	`«me
();

560 
	}
}

562 c⁄° 
	g°d
::
°rög
 &
	$vec_«me4
() const

564 
	`as£π
–
m_ty≥
 =
ve˘‹_t
);

565  
m_vÆue
.
m_ve˘‹_symbﬁic
[3]->
	`«me
();

566 
	}
}

568 
boﬁ
 
	$is_ªg
() const

570 i‡–
m_ty≥
 =
ªg_t
 ) {

571  
åue
;

573 i‡–
m_ty≥
 !
symbﬁic_t
 ) {

574  
Ál£
;

576  
m_vÆue
.
m_symbﬁic
->
	`ty≥
()->
	`gë_key
().
	`is_ªg
();

577 
	}
}

578 
boﬁ
 
	$is_∑øm_loˇl
() const

580 i‡–
m_ty≥
 !
symbﬁic_t
 )

581  
Ál£
;

582  
m_vÆue
.
m_symbﬁic
->
	`ty≥
()->
	`gë_key
().
	`is_∑øm_loˇl
();

583 
	}
}

585 
boﬁ
 
	$is_ve˘‹
() const

587 i‡–
m_ve˘‹
Ë 
åue
;

588  
Ál£
;

589 
	}
}

590 
	$ªg_num
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
->
	`ªg_num
();
	}
}

591 
	$ªg1_num
(Ëc⁄° {  
m_vÆue
.
m_ve˘‹_symbﬁic
[0]->
	`ªg_num
();
	}
}

592 
	$ªg2_num
(Ëc⁄° {  
m_vÆue
.
m_ve˘‹_symbﬁic
[1]->
	`ªg_num
();
	}
}

593 
	$ªg3_num
(Ëc⁄° {  
m_vÆue
.
m_ve˘‹_symbﬁic
[2]?m_vÆue.m_ve˘‹_symbﬁic[2]->
	`ªg_num
():0; 
	}
}

594 
	$ªg4_num
(Ëc⁄° {  
m_vÆue
.
m_ve˘‹_symbﬁic
[3]?m_vÆue.m_ve˘‹_symbﬁic[3]->
	`ªg_num
():0; 
	}
}

595 
	$¨ch_ªg_num
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
->
	`¨ch_ªg_num
(); 
	}
}

596 
	$¨ch_ªg_num
(
n
Ëc⁄° {  (
m_vÆue
.
m_ve˘‹_symbﬁic
[n])? m_vÆue.m_ve˘‹_symbﬁic[n]->
	`¨ch_ªg_num
(Ë: -1; 
	}
}

597 
boﬁ
 
	$is_œbñ
(Ëc⁄° {  
m_ty≥
 =
œbñ_t
;
	}
}

598 
boﬁ
 
	$is_buûtö
(Ëc⁄° {  
m_ty≥
 =
buûtö_t
;
	}
}

601 
boﬁ
 
	$is_mem‹y_›î™d
(Ëc⁄° {  
m_ty≥
 =
mem‹y_t
;
	}
}

605 
boﬁ
 
	$is_mem‹y_›î™d2
() const {

606  (
m_addr_•a˚
!=
undeföed_•a˚
);

607 
	}
}

609 
boﬁ
 
	$is_lôîÆ
(Ëc⁄° {  
m_ty≥
 =
öt_t
 ||

610 
m_ty≥
 =
Êﬂt_›_t
 ||

611 
m_ty≥
 =
doubÀ_›_t
 ||

612 
m_ty≥
 =
unsig√d_t
;
	}
}

613 
boﬁ
 
	$is_sh¨ed
() const {

614 i‡–!(
m_ty≥
 =
symbﬁic_t
 || m_ty≥ =
addªss_t
 || m_ty≥ =
mem‹y_t
) ) {

615  
Ál£
;

617  
m_vÆue
.
m_symbﬁic
->
	`is_sh¨ed
();

618 
	}
}

619 
boﬁ
 
	$is_c⁄°
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
->
	`is_c⁄°
();
	}
}

620 
boﬁ
 
	$is_globÆ
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
->
	`is_globÆ
();
	}
}

621 
boﬁ
 
	$is_loˇl
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
->
	`is_loˇl
();
	}
}

622 
boﬁ
 
	$is_ãx
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
->
	`is_ãx
();
	}
}

623 
boﬁ
 
	$is_ªtu∫_v¨
(Ëc⁄° {  
m_is_ªtu∫_v¨
; 
	}
}

625 
boﬁ
 
	$is_fun˘i⁄_addªss
() const

627 if–
m_ty≥
 !
symbﬁic_t
 ) {

628  
Ál£
;

630  
m_vÆue
.
m_symbﬁic
->
	`is_func_addr
();

631 
	}
}

633 
±x_ªg_t
 
	$gë_lôîÆ_vÆue
() const

635 
±x_ªg_t
 
ªsu…
;

636  
m_ty≥
 ) {

637 
öt_t
: 
ªsu…
.
s32
 = 
m_vÆue
.
m_öt
; ;

638 
Êﬂt_›_t
: 
ªsu…
.
f32
 = 
m_vÆue
.
m_Êﬂt
; ;

639 
doubÀ_›_t
: 
ªsu…
.
f64
 = 
m_vÆue
.
m_doubÀ
; ;

640 
unsig√d_t
: 
ªsu…
.
u32
 = 
m_vÆue
.
m_unsig√d
; ;

642 
	`as£π
(0);

645  
ªsu…
;

646 
	}
}

647 
	$gë_öt
(Ëc⁄° {  
m_vÆue
.
m_öt
;
	}
}

648 
	$gë_addr_off£t
(Ëc⁄° {  
m_addr_off£t
;
	}
}

649 c⁄° 
symbﬁ
 *
	$gë_symbﬁ
(Ëc⁄° {  
m_vÆue
.
m_symbﬁic
;
	}
}

650 
	$£t_ty≥
–
›î™d_ty≥
 
ty≥
 )

652 
m_ty≥
 = 
ty≥
;

653 
	}
}

654 
›î™d_ty≥
 
	$gë_ty≥
() const {

655  
m_ty≥
;

656 
	}
}

657 
	$£t_√g_¥ed
()

659 
	`as£π
–
m_vÆid
 );

660 
m_√g_¥ed
 = 
åue
;

661 
	}
}

662 
boﬁ
 
	$is_√g_¥ed
(Ëc⁄° {  
m_√g_¥ed
; 
	}
}

663 
boﬁ
 
	$is_vÆid
(Ëc⁄° {  
m_vÆid
; 
	}
}

665 
	$£t_addr_•a˚
(
_mem‹y_•a˚_t
 
£t_vÆue
Ë{ 
m_addr_•a˚
 = së_vÆue; 
	}
}

666 
_mem‹y_•a˚_t
 
	$gë_addr_•a˚
(Ëc⁄° {  
m_addr_•a˚
; 
	}
}

667 
	$£t_›î™d_lohi
(
£t_vÆue
Ë{ 
m_›î™d_lohi
 = së_vÆue; 
	}
}

668 
	$gë_›î™d_lohi
(Ëc⁄° {  
m_›î™d_lohi
; 
	}
}

669 
	$£t_doubÀ_›î™d_ty≥
(
£t_vÆue
Ë{ 
m_doubÀ_›î™d_ty≥
 = së_vÆue; 
	}
}

670 
	$gë_doubÀ_›î™d_ty≥
(Ëc⁄° {  
m_doubÀ_›î™d_ty≥
; 
	}
}

671 
	$£t_›î™d_√g
(Ë{ 
m_›î™d_√g
 = 
åue
; 
	}
}

672 
boﬁ
 
	$gë_›î™d_√g
(Ëc⁄° {  
m_›î™d_√g
; 
	}
}

673 
	$£t_c⁄°_mem_off£t
(
addr_t
 
£t_vÆue
Ë{ 
m_c⁄°_mem_off£t
 = së_vÆue; 
	}
}

674 
addr_t
 
	$gë_c⁄°_mem_off£t
(Ëc⁄° {  
m_c⁄°_mem_off£t
; 
	}
}

676 
	g¥iv©e
:

677 
m_uid
;

678 
boﬁ
 
	gm_vÆid
;

679 
boﬁ
 
	gm_ve˘‹
;

680 
›î™d_ty≥
 
	gm_ty≥
;

682 
_mem‹y_•a˚_t
 
	gm_addr_•a˚
;

683 
	gm_›î™d_lohi
;

684 
	gm_doubÀ_›î™d_ty≥
;

685 
boﬁ
 
	gm_›î™d_√g
;

686 
addr_t
 
	gm_c⁄°_mem_off£t
;

688 
	gm_öt
;

689 
	gm_unsig√d
;

690 
	gm_Êﬂt
;

691 
	gm_doubÀ
;

692 
	gm_vöt
[4];

693 
	gm_vunsig√d
[4];

694 
	gm_vÊﬂt
[4];

695 
	gm_vdoubÀ
[4];

696 c⁄° 
symbﬁ
* 
	gm_symbﬁic
;

697 c⁄° 
symbﬁ
** 
	gm_ve˘‹_symbﬁic
;

698 } 
	gm_vÆue
;

700 
	gm_addr_off£t
;

702 
boﬁ
 
	gm_√g_¥ed
;

703 
boﬁ
 
	gm_is_ªtu∫_v¨
;

705 
	gsm_√xt_uid
;

706 
gë_uid
();

709 c⁄° *
g_›code_°rög
[];

710 
g_num_±x_ö°_uid
;

711 
	sbasic_block_t
 {

712 
basic_block_t
–
ID
, 
±x_ö°ru˘i⁄
 *
begö
,Ötx_ö°ru˘i⁄ *
íd
, 
boﬁ
 
íåy
, boﬁ 
ex
)

714 
	mbb_id
 = 
ID
;

715 
	m±x_begö
 = 
begö
;

716 
	m±x_íd
 = 
íd
;

717 
	mis_íåy
=
íåy
;

718 
	mis_exô
=
ex
;

719 
	mimmedüãpo°domö©‹_id
 = -1;

720 
	mimmedüãdomö©‹_id
 = -1;

723 
±x_ö°ru˘i⁄
* 
	m±x_begö
;

724 
±x_ö°ru˘i⁄
* 
	m±x_íd
;

725 
	m°d
::
£t
<> 
¥ede˚ss‹_ids
;

726 
	m°d
::
£t
<> 
suc˚ss‹_ids
;

727 
	m°d
::
£t
<> 
po°domö©‹_ids
;

728 
	m°d
::
£t
<> 
domö©‹_ids
;

729 
	m°d
::
£t
<> 
Tmp_ids
;

730 
	mimmedüãpo°domö©‹_id
;

731 
	mimmedüãdomö©‹_id
;

732 
boﬁ
 
	mis_íåy
;

733 
boﬁ
 
	mis_exô
;

734 
	mbb_id
;

737 
boﬁ
 
dom
(c⁄° 
basic_block_t
 *
B
) {

738  (
	mB
->
	mdomö©‹_ids
.
föd
(
this
->
bb_id
Ë!
B
->
domö©‹_ids
.
íd
());

742 
boﬁ
 
pdom
(c⁄° 
basic_block_t
 *
B
) {

743  (
	mB
->
	mpo°domö©‹_ids
.
föd
(
this
->
bb_id
Ë!
B
->
po°domö©‹_ids
.
íd
());

747 
	sgpgpu_ªc⁄_t
 {

748 
addªss_ty≥
 
	msour˚_pc
;

749 
addªss_ty≥
 
	mèrgë_pc
;

752 ˛as†
	c±x_ö°ru˘i⁄
 : 
public
 
w¨p_ö°_t
 {

753 
public
:

754 
±x_ö°ru˘i⁄
–
›code
,

755 c⁄° 
symbﬁ
 *
¥ed
,

756 
√g_¥ed
,

757 
¥ed_mod
,

758 
symbﬁ
 *
œbñ
,

759 c⁄° 
°d
::
li°
<
›î™d_öfo
> &
›î™ds
,

760 c⁄° 
›î™d_öfo
 &
ªtu∫_v¨
,

761 c⁄° 
°d
::
li°
<> &
›ti⁄s
,

762 c⁄° 
°d
::
li°
<> &
sˇœr_ty≥
,

763 
mem‹y_•a˚_t
 
•a˚_•ec
,

764 c⁄° *
fûe
,

765 
löe
,

766 c⁄° *
sour˚
,

767 c⁄° 
c‹e_c⁄fig
 *
c⁄fig
 );

769 
	$¥öt_ö¢
() const;

770 
vútuÆ
 
	$¥öt_ö¢
–
FILE
 *
Â
 ) const;

771 
	$ö°_size
(Ëc⁄° {  
m_ö°_size
; }

772 
	$uid
(Ëc⁄° {  
m_uid
;
	}
}

773 
	$gë_›code
(Ëc⁄° {  
m_›code
;
	}
}

774 c⁄° *
	$gë_›code_c°r
() const

776 i‡–
m_›code
 != -1 ) {

777  
g_›code_°rög
[
m_›code
];

781 
	}
}

782 c⁄° *
	$sour˚_fûe
(Ëc⁄° {  
m_sour˚_fûe
.
	`c_°r
();
	}
}

783 
	$sour˚_löe
(Ëc⁄° {  
m_sour˚_löe
;
	}
}

784 
	$gë_num_›î™ds
(Ëc⁄° {  
m_›î™ds
.
	`size
();
	}
}

785 
boﬁ
 
	$has_¥ed
(Ëc⁄° {  
m_¥ed
 !
NULL
;
	}
}

786 
›î™d_öfo
 
	$gë_¥ed
(Ëc⁄° {  
	`›î™d_öfo
–
m_¥ed
 );
	}
}

787 
boﬁ
 
	$gë_¥ed_√g
(Ëc⁄° {  
m_√g_¥ed
;
	}
}

788 
	$gë_¥ed_mod
(Ëc⁄° {  
m_¥ed_mod
;
	}
}

789 c⁄° *
	$gë_sour˚
(Ëc⁄° {  
m_sour˚
.
	`c_°r
();
	}
}

791 
	g°d
::
	tve˘‹
<
	t›î™d_öfo
>::
	tc⁄°_ôî©‹
 const_iterator;

793 
c⁄°_ôî©‹
 
	$›_ôî_begö
() const

795  
m_›î™ds
.
	`begö
();

796 
	}
}

798 
c⁄°_ôî©‹
 
	$›_ôî_íd
() const

800  
m_›î™ds
.
	`íd
();

801 
	}
}

803 c⁄° 
	g›î™d_öfo
 &
	$d°
() const

805 
	`as£π
–!
m_›î™ds
.
	`em±y
() );

806  
m_›î™ds
[0];

807 
	}
}

809 c⁄° 
	g›î™d_öfo
 &
	$func_addr
() const

811 
	`as£π
–!
m_›î™ds
.
	`em±y
() );

812 if–!
m_›î™ds
[0].
	`is_ªtu∫_v¨
() ) {

813  
m_›î™ds
[0];

815 
	`as£π
–
m_›î™ds
.
	`size
() >= 2 );

816  
m_›î™ds
[1];

818 
	}
}

820 
	g›î™d_öfo
 &
	$d°
()

822 
	`as£π
–!
m_›î™ds
.
	`em±y
() );

823  
m_›î™ds
[0];

824 
	}
}

826 c⁄° 
	g›î™d_öfo
 &
	$§c1
() const

828 
	`as£π
–
m_›î™ds
.
	`size
() > 1 );

829  
m_›î™ds
[1];

830 
	}
}

832 c⁄° 
	g›î™d_öfo
 &
	$§c2
() const

834 
	`as£π
–
m_›î™ds
.
	`size
() > 2 );

835  
m_›î™ds
[2];

836 
	}
}

838 c⁄° 
	g›î™d_öfo
 &
	$§c3
() const

840 
	`as£π
–
m_›î™ds
.
	`size
() > 3 );

841  
m_›î™ds
[3];

842 
	}
}

844 c⁄° 
	g›î™d_öfo
 &
	$›î™d_lookup
–
n
 ) const

846 
	`as£π
–
n
 < 
m_›î™ds
.
	`size
() );

847  
m_›î™ds
[
n
];

848 
	}
}

849 
boﬁ
 
	$has_ªtu∫
() const

851  
m_ªtu∫_v¨
.
	`is_vÆid
();

852 
	}
}

854 
mem‹y_•a˚_t
 
	$gë_•a˚
(Ëc⁄° {  
m_•a˚_•ec
;
	}
}

855 
	$gë_ve˘‹
(Ëc⁄° {  
m_ve˘‹_•ec
;
	}
}

856 
	$gë_©omic
(Ëc⁄° {  
m_©omic_•ec
;
	}
}

858 
	$gë_ty≥
() const

860 
	`as£π
–!
m_sˇœr_ty≥
.
	`em±y
() );

861  
m_sˇœr_ty≥
.
	`‰⁄t
();

862 
	}
}

864 
	$gë_ty≥2
() const

866 
	`as£π
–
m_sˇœr_ty≥
.
	`size
()==2 );

867  
m_sˇœr_ty≥
.
	`back
();

868 
	}
}

870 
	$assign_bb
(
basic_block_t
* 
basic_block
)

872 
m_basic_block
 = 
basic_block
;

873 
	}
}

874 
basic_block_t
* 
	$gë_bb
(Ë{  
m_basic_block
;
	}
}

875 
	$£t_m_ö°r_mem_ödex
(
ödex
) {

876 
m_ö°r_mem_ödex
 = 
ödex
;

877 
	}
}

878 
	$£t_PC
–
addr_t
 
PC
 )

880 
m_PC
 = 
PC
;

881 
	}
}

882 
addr_t
 
	$gë_PC
() const

884  
m_PC
;

885 
	}
}

887 
	$gë_m_ö°r_mem_ödex
(Ë{  
m_ö°r_mem_ödex
;
	}
}

888 
	$gë_cmp›
(Ëc⁄° {  
m_com∑ª_›
;
	}
}

889 c⁄° 
symbﬁ
 *
	$gë_œbñ
(Ëc⁄° {  
m_œbñ
;
	}
}

890 
boﬁ
 
	$is_œbñ
(Ëc⁄° { if(
m_œbñ
){ 
	`as£π
(
m_›code
==-1); 
åue
;}  
Ál£
;
	}
}

891 
boﬁ
 
	$is_hi
(Ëc⁄° {  
m_hi
;
	}
}

892 
boﬁ
 
	$is_lo
(Ëc⁄° {  
m_lo
;
	}
}

893 
boﬁ
 
	$is_wide
(Ëc⁄° {  
m_wide
;
	}
}

894 
boﬁ
 
	$is_uni
(Ëc⁄° {  
m_uni
;
	}
}

895 
boﬁ
 
	$is_exô
(Ëc⁄° {  
m_exô
;
	}
}

896 
boﬁ
 
	$is_abs
(Ëc⁄° {  
m_abs
;
	}
}

897 
boﬁ
 
	$is_√g
(Ëc⁄° {  
m_√g
;
	}
}

898 
boﬁ
 
	$is_to
(Ëc⁄° {  
m_to_›ti⁄
; 
	}
}

899 
	$ˇche_›ti⁄
(Ëc⁄° {  
m_ˇche_›ti⁄
; 
	}
}

900 
	$roundög_mode
(Ëc⁄° {  
m_roundög_mode
;
	}
}

901 
	$ßtuøti⁄_mode
(Ëc⁄° {  
m_ßtuøti⁄_mode
;
	}
}

902 
	$dimísi⁄
(Ëc⁄° {  
m_geom_•ec
;
	}
}

903 
	evŸe_mode_t
 { 
	gvŸe_™y
, 
	gvŸe_Æl
, 
	gvŸe_uni
 };

904 
vŸe_mode_t
 
	$vŸe_mode
(Ëc⁄° {  
m_vŸe_mode
; 
	}
}

906 
	$memb¨_Àvñ
(Ëc⁄° {  
m_memb¨_Àvñ
; 
	}
}

908 
boﬁ
 
	$has_mem‹y_ªad
() const {

909 if–
m_›code
 =
LD_OP
 || m_›codê=
TEX_OP
 )

910  
åue
;

913 
±x_ö°ru˘i⁄
::
c⁄°_ôî©‹
 
›
=
	`›_ôî_begö
();

914  
n
=0; 
›
 !
	`›_ôî_íd
(); op++,Ç++ ) {

915 if–
n
 > 0 && 
›
->
	`is_mem‹y_›î™d2
())

916  
åue
;

918  
Ál£
;

919 
	}
}

920 
boﬁ
 
	$has_mem‹y_wrôe
() const {

921 if–
m_›code
 =
ST_OP
 )  
åue
;

924 
±x_ö°ru˘i⁄
::
c⁄°_ôî©‹
 
›
=
	`›_ôî_begö
();

925  
n
=0; (
›
!=
	`›_ôî_íd
() &&Ç<1); op++,Ç++ ) {

926 if–
n
==0 && 
›
->
	`is_mem‹y_›î™d2
())

927  
åue
;

929  
Ál£
;

930 
	}
}

932 
	g¥iv©e
:

933 
£t_›code_™d_œãncy
();

935 
basic_block_t
 *
	gm_basic_block
;

936 
	gm_uid
;

937 
addr_t
 
	gm_PC
;

938 
	g°d
::
°rög
 
m_sour˚_fûe
;

939 
	gm_sour˚_löe
;

940 
	g°d
::
°rög
 
m_sour˚
;

942 c⁄° 
symbﬁ
 *
	gm_¥ed
;

943 
boﬁ
 
	gm_√g_¥ed
;

944 
	gm_¥ed_mod
;

945 
	gm_›code
;

946 c⁄° 
symbﬁ
 *
	gm_œbñ
;

947 
	g°d
::
ve˘‹
<
›î™d_öfo
> 
m_›î™ds
;

948 
›î™d_öfo
 
	gm_ªtu∫_v¨
;

950 
	g°d
::
li°
<> 
m_›ti⁄s
;

951 
boﬁ
 
	gm_wide
;

952 
boﬁ
 
	gm_hi
;

953 
boﬁ
 
	gm_lo
;

954 
boﬁ
 
	gm_exô
;

955 
boﬁ
 
	gm_abs
;

956 
boﬁ
 
	gm_√g
;

957 
boﬁ
 
	gm_uni
;

958 
boﬁ
 
	gm_to_›ti⁄
;

959 
	gm_ˇche_›ti⁄
;

960 
	gm_roundög_mode
;

961 
	gm_com∑ª_›
;

962 
	gm_ßtuøti⁄_mode
;

964 
	g°d
::
li°
<> 
m_sˇœr_ty≥
;

965 
mem‹y_•a˚_t
 
	gm_•a˚_•ec
;

966 
	gm_geom_•ec
;

967 
	gm_ve˘‹_•ec
;

968 
	gm_©omic_•ec
;

969 
vŸe_mode_t
 
	gm_vŸe_mode
;

970 
	gm_memb¨_Àvñ
;

971 
	gm_ö°r_mem_ödex
;

972 
	gm_ö°_size
;

974 
vútuÆ
 
¥e_decode
();

975 
‰õnd
 
˛ass
 
	gfun˘i⁄_öfo
;

976 
	gg_num_±x_ö°_uid
;

979 ˛as†
	c∑øm_öfo
 {

980 
	mpublic
:

981 
	$∑øm_öfo
(Ë{ 
m_vÆid
 = 
Ál£
; 
m_vÆue_£t
=Ál£; 
m_size
 = 0; }

982 
	`∑øm_öfo
–
°d
::
°rög
 
«me
, 
ty≥
, 
size_t
 
size
 )

984 
m_vÆid
 = 
åue
;

985 
m_vÆue_£t
 = 
Ál£
;

986 
m_«me
 = 
«me
;

987 
m_ty≥
 = 
ty≥
;

988 
m_size
 = 
size
;

989 
	}
}

990 
	$add_d©a
–
∑øm_t
 
v
 ) {

991 
	`as£π
–(!
m_vÆue_£t
Ë|| (
m_vÆue
.
size
 =
v
.size) );

992 
m_vÆue_£t
 = 
åue
;

993 
m_vÆue
 = 
v
;

994 
	}
}

995 
	$add_off£t
–
off£t
 ) { 
m_off£t
 = off£t; 
	}
}

996 
	$gë_off£t
(Ë{ 
	`as£π
(
m_vÆid
);  
m_off£t
; 
	}
}

997 
	g°d
::
°rög
 
	$gë_«me
(Ëc⁄° { 
	`as£π
(
m_vÆid
);  
m_«me
; 
	}
}

998 
	$gë_ty≥
(Ëc⁄° { 
	`as£π
(
m_vÆid
);  
m_ty≥
; 
	}
}

999 
∑øm_t
 
	$gë_vÆue
(Ëc⁄° { 
	`as£π
(
m_vÆue_£t
);  
m_vÆue
; 
	}
}

1000 
size_t
 
	$gë_size
(Ëc⁄° { 
	`as£π
(
m_vÆid
);  
m_size
; 
	}
}

1001 
	g¥iv©e
:

1002 
boﬁ
 
m_vÆid
;

1003 
	g°d
::
°rög
 
m_«me
;

1004 
	gm_ty≥
;

1005 
size_t
 
	gm_size
;

1006 
boﬁ
 
	gm_vÆue_£t
;

1007 
∑øm_t
 
	gm_vÆue
;

1008 
	gm_off£t
;

1011 ˛as†
	cfun˘i⁄_öfo
 {

1012 
	mpublic
:

1013 
fun˘i⁄_öfo
(
íåy_poöt
 );

1014 c⁄° 
	m±x_vîsi⁄
 &
	$gë_±x_vîsi⁄
(Ëc⁄° {  
m_symèb
->
	`gë_±x_vîsi⁄
(); }

1015 
	$gë_sm_èrgë
(Ëc⁄° {  
m_symèb
->
	`gë_sm_èrgë
(); 
	}
}

1016 
boﬁ
 
	$is_exã∫
(Ëc⁄° {  
m_exã∫
; 
	}
}

1017 
	$£t_«me
(c⁄° *
«me
)

1019 
m_«me
 = 
«me
;

1020 
	}
}

1021 
	$£t_symèb
(
symbﬁ_èbÀ
 *
symèb
 )

1023 
m_symèb
 = 
symèb
;

1024 
	}
}

1025 
	g°d
::
°rög
 
	$gë_«me
() const

1027  
m_«me
;

1028 
	}
}

1029 
	$¥öt_ö¢
–
pc
, 
FILE
 * 
Â
 ) const;

1030 
	`add_ö°
–c⁄° 
°d
::
li°
<
±x_ö°ru˘i⁄
*> &
ö°ru˘i⁄s
 )

1032 
m_ö°ru˘i⁄s
 = 
ö°ru˘i⁄s
;

1033 
	}
}

1034 
	g°d
::
li°
<
±x_ö°ru˘i⁄
*>::
ôî©‹
 
föd_√xt_ªÆ_ö°ru˘i⁄
–
°d
::li°<±x_ö°ru˘i⁄*>::ôî©‹ 
i
 );

1035 
¸óã_basic_blocks
( );

1037 
¥öt_basic_blocks
();

1039 
¥öt_basic_block_löks
();

1040 
¥öt_basic_block_dŸ
();

1042 
›î™d_öfo
* 
föd_bªak_èrgë
–
±x_ö°ru˘i⁄
 * 
p_bªak_ö¢
 );

1043 
c⁄√˘_basic_blocks
( );

1044 
boﬁ
 
c⁄√˘_bªak_èrgës
();

1049 
föd_domö©‹s
( );

1050 
¥öt_domö©‹s
();

1051 
föd_idomö©‹s
();

1052 
¥öt_idomö©‹s
();

1057 
föd_po°domö©‹s
( );

1058 
¥öt_po°domö©‹s
();

1063 
föd_ùo°domö©‹s
( );

1064 
¥öt_ùo°domö©‹s
();

1067 
gë_num_ªc⁄vîgí˚_∑ús
();

1069 
gë_ªc⁄vîgí˚_∑ús
(
gpgpu_ªc⁄_t
* 
ªc⁄_poöts
);

1071 
	$gë_fun˘i⁄_size
(Ë{  
m_ö°ru˘i⁄s
.
	`size
();
	}
}

1073 
±x_as£mbÀ
();

1075 
±x_gë_ö°_›
–
±x_thªad_öfo
 *
thªad
 );

1076 
	$add_∑øm
–c⁄° *
«me
, 
∑øm_t
 
vÆue
 )

1078 
m_kî√l_∑øms
[ 
«me
 ] = 
vÆue
;

1079 
	}
}

1080 
add_∑øm_«me_ty≥_size
–
ödex
, 
°d
::
°rög
 
«me
, 
ty≥
, 
size_t
 
size
 );

1081 
add_∑øm_d©a
–
¨gn
, 
gpgpu_±x_sim_¨g
 *
¨gs
 );

1082 
	$add_ªtu∫_v¨
–c⁄° 
symbﬁ
 *
rv
 )

1084 
m_ªtu∫_v¨_sym
 = 
rv
;

1085 
	}
}

1086 
	$add_¨g
–c⁄° 
symbﬁ
 *
¨g
 )

1088 
	`as£π
–
¨g
 !
NULL
 );

1089 
m_¨gs
.
	`push_back
(
¨g
);

1090 
	}
}

1091 
	$ªmove_¨gs
()

1093 
m_¨gs
.
	`˛ór
();

1094 
	}
}

1095 
	$num_¨gs
() const

1097  
m_¨gs
.
	`size
();

1098 
	}
}

1099 c⁄° 
symbﬁ
* 
	$gë_¨g
–
n
 ) const

1101 
	`as£π
–
n
 < 
m_¨gs
.
	`size
() );

1102  
m_¨gs
[
n
];

1103 
	}
}

1104 
boﬁ
 
	$has_ªtu∫
() const

1106  
m_ªtu∫_v¨_sym
 !
NULL
;

1107 
	}
}

1108 c⁄° 
symbﬁ
 *
	$gë_ªtu∫_v¨
() const

1110  
m_ªtu∫_v¨_sym
;

1111 
	}
}

1112 c⁄° 
±x_ö°ru˘i⁄
 *
	$gë_ö°ru˘i⁄
–
PC
 ) const

1114 
ödex
 = 
PC
 - 
m_°¨t_PC
;

1115 if–
ödex
 < 
m_ö°r_mem_size
 )

1116  
m_ö°r_mem
[
ödex
];

1117  
NULL
;

1118 
	}
}

1119 
addr_t
 
	$gë_°¨t_PC
() const

1121  
m_°¨t_PC
;

1122 
	}
}

1124 
föÆize
–
mem‹y_•a˚
 *
∑øm_mem
 );

1125 
∑øm_to_sh¨ed
–
mem‹y_•a˚
 *
sh¨ed_mem
, 
symbﬁ_èbÀ
 *
symèb
 );

1126 
	$li°_∑øm
–
FILE
 *
fout
 ) const;

1128 c⁄° 
gpgpu_±x_sim_kî√l_öfo
* 
	$gë_kî√l_öfo
 () const

1130  &
m_kî√l_öfo
;

1131 
	}
}

1133 c⁄° 
	$£t_kî√l_öfo
 (c⁄° 
gpgpu_±x_sim_kî√l_öfo
 &
öfo
) {

1134 
m_kî√l_öfo
 = 
öfo
;

1135 
m_kî√l_öfo
.
±x_vîsi⁄
 = 10*
	`gë_±x_vîsi⁄
().
	`vî
();

1136 
m_kî√l_öfo
.
sm_èrgë
 = 
	`gë_±x_vîsi⁄
().
	`èrgë
();

1137 
	}
}

1138 
symbﬁ_èbÀ
 *
	$gë_symèb
()

1140  
m_symèb
;

1141 
	}
}

1143 c⁄° 
±x_ö°ru˘i⁄
* 
	$pc_to_ö°ru˘i⁄
(
pc
)

1145 if–
pc
 < 
s_g_pc_to_ö¢
.
	`size
() )

1146  
s_g_pc_to_ö¢
[
pc
];

1148  
NULL
;

1149 
	}
}

1150 
	$loˇl_mem_‰amesize
() const

1152  
m_loˇl_mem_‰amesize
;

1153 
	}
}

1154 
	$£t_‰amesize
–
sz
 )

1156 
m_loˇl_mem_‰amesize
 = 
sz
;

1157 
	}
}

1158 
boﬁ
 
	$is_íåy_poöt
(Ëc⁄° {  
m_íåy_poöt
; 
	}
}

1160 
	g¥iv©e
:

1161 
m_uid
;

1162 
	gm_loˇl_mem_‰amesize
;

1163 
boﬁ
 
	gm_íåy_poöt
;

1164 
boﬁ
 
	gm_exã∫
;

1165 
boﬁ
 
	gm_as£mbÀd
;

1166 
	g°d
::
°rög
 
m_«me
;

1167 
±x_ö°ru˘i⁄
 **
	gm_ö°r_mem
;

1168 
	gm_°¨t_PC
;

1169 
	gm_ö°r_mem_size
;

1170 
	g°d
::
m≠
<
°d
::
°rög
,
	g∑øm_t
> 
	gm_kî√l_∑øms
;

1171 
	g°d
::
m≠
<,
	g∑øm_öfo
> 
	gm_±x_kî√l_∑øm_öfo
;

1172 c⁄° 
symbﬁ
 *
	gm_ªtu∫_v¨_sym
;

1173 
	g°d
::
ve˘‹
<c⁄° 
symbﬁ
*> 
m_¨gs
;

1174 
	g°d
::
li°
<
±x_ö°ru˘i⁄
*> 
m_ö°ru˘i⁄s
;

1175 
	g°d
::
ve˘‹
<
basic_block_t
*> 
m_basic_blocks
;

1176 
	g°d
::
li°
<
°d
::
∑ú
<, > > 
	gm_back_edges
;

1177 
	g°d
::
m≠
<
°d
::
°rög
,> 
	gœbñs
;

1178 
	gnum_ªc⁄vîgí˚_∑ús
;

1181 
gpgpu_±x_sim_kî√l_öfo
 
	gm_kî√l_öfo
;

1183 
symbﬁ_èbÀ
 *
	gm_symèb
;

1185 
	g°d
::
ve˘‹
<
±x_ö°ru˘i⁄
*> 
s_g_pc_to_ö¢
;

1186 
	gsm_√xt_uid
;

1189 ˛as†
	c¨g_buf„r_t
 {

1190 
	mpublic
:

1191 
	$¨g_buf„r_t
()

1193 
m_is_ªg
=
Ál£
;

1194 
m_is_∑øm
=
Ál£
;

1195 
m_∑øm_vÆue
=
NULL
;

1197 
	$¨g_buf„r_t
–c⁄° 
¨g_buf„r_t
 &
™Ÿhî
 )

1199 
	`make_c›y
(
™Ÿhî
);

1200 
	}
}

1201 
	$make_c›y
–c⁄° 
¨g_buf„r_t
 &
™Ÿhî
 )

1203 
m_d°
 = 
™Ÿhî
.m_dst;

1204 
m_§c_›
 = 
™Ÿhî
.m_src_op;

1205 
m_is_ªg
 = 
™Ÿhî
.m_is_reg;

1206 
m_is_∑øm
 = 
™Ÿhî
.m_is_param;

1207 
m_ªg_vÆue
 = 
™Ÿhî
.m_reg_value;

1208 
m_∑øm_byãs
 = 
™Ÿhî
.m_param_bytes;

1209 if–
m_is_∑øm
 ) {

1210 
m_∑øm_vÆue
 = 
	`mÆloc
(
m_∑øm_byãs
);

1211 
	`mem˝y
(
m_∑øm_vÆue
,
™Ÿhî
.m_∑øm_vÆue,
m_∑øm_byãs
);

1213 
	}
}

1214 
	g›î©‹
=–c⁄° 
¨g_buf„r_t
 &
™Ÿhî
 )

1216 
make_c›y
(
™Ÿhî
);

1218 ~
	$¨g_buf„r_t
()

1220 if–
m_is_∑øm
 )

1221 
	`‰ì
(
m_∑øm_vÆue
);

1222 
	}
}

1223 
	$¨g_buf„r_t
–c⁄° 
symbﬁ
 *
d°_sym
, c⁄° 
›î™d_öfo
 &
§c_›
, 
±x_ªg_t
 
sour˚_vÆue
 ) : 
	$m_§c_›
(
§c_›
)

1225 
m_d°
 = 
d°_sym
;

1226 if–
d°_sym
->
	`is_ªg
() ) {

1227 
m_is_ªg
 = 
åue
;

1228 
m_is_∑øm
 = 
Ál£
;

1229 
	`as£π
–
§c_›
.
	`is_ªg
() );

1230 
m_ªg_vÆue
 = 
sour˚_vÆue
;

1232 
m_is_∑øm
 = 
åue
;

1233 
m_is_ªg
 = 
Ál£
;

1234 
m_∑øm_vÆue
 = 
	`ˇŒoc
((
±x_ªg_t
),1);

1236 
	`mem˝y
(
m_∑øm_vÆue
,&
sour˚_vÆue
,(
±x_ªg_t
));

1237 
m_∑øm_byãs
 = (
±x_ªg_t
);

1239 
	}
}

1240 
	$¨g_buf„r_t
–c⁄° 
symbﬁ
 *
d°_sym
, c⁄° 
›î™d_öfo
 &
§c_›
, *
sour˚_∑øm_vÆue_¨øy
, 
¨øy_size
 ) : 
	$m_§c_›
(
§c_›
)

1242 
m_d°
 = 
d°_sym
;

1243 if–
d°_sym
->
	`is_ªg
() ) {

1244 
m_is_ªg
 = 
åue
;

1245 
m_is_∑øm
 = 
Ál£
;

1246 
	`as£π
–
§c_›
.
	`is_∑øm_loˇl
() );

1247 
	`as£π
–
d°_sym
->
	`gë_size_ö_byãs
(Ë=
¨øy_size
 );

1248  
¨øy_size
 ) {

1249 1: 
m_ªg_vÆue
.
u8
 = *(*)
sour˚_∑øm_vÆue_¨øy
; ;

1250 2: 
m_ªg_vÆue
.
u16
 = *(*)
sour˚_∑øm_vÆue_¨øy
; ;

1251 4: 
m_ªg_vÆue
.
u32
 = *(*)
sour˚_∑øm_vÆue_¨øy
; ;

1252 8: 
m_ªg_vÆue
.
u64
 = *(*)
sour˚_∑øm_vÆue_¨øy
; ;

1254 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** sourceÖaram size doesÇot match knownÑegister sizes\n");

1259 
m_is_∑øm
 = 
åue
;

1260 
m_is_ªg
 = 
Ál£
;

1261 
m_∑øm_vÆue
 = 
	`ˇŒoc
(
¨øy_size
,1);

1262 
m_∑øm_byãs
 = 
¨øy_size
;

1263 
	`mem˝y
(
m_∑øm_vÆue
,
sour˚_∑øm_vÆue_¨øy
,
¨øy_size
);

1265 
	}
}

1267 
boﬁ
 
	$is_ªg
(Ëc⁄° {  
m_is_ªg
; 
	}
}

1268 
±x_ªg_t
 
	$gë_ªg
() const

1270 
	`as£π
(
m_is_ªg
);

1271  
m_ªg_vÆue
;

1272 
	}
}

1274 c⁄° *
	$gë_∑øm_buf„r
() const

1276 
	`as£π
(
m_is_∑øm
);

1277  
m_∑øm_vÆue
;

1278 
	}
}

1279 
size_t
 
	$gë_∑øm_buf„r_size
() const

1281 
	`as£π
(
m_is_∑øm
);

1282  
m_∑øm_byãs
;

1283 
	}
}

1285 c⁄° 
symbﬁ
 *
	$gë_d°
(Ëc⁄° {  
m_d°
; 
	}
}

1287 
	g¥iv©e
:

1289 c⁄° 
symbﬁ
 *
m_d°
;

1292 
›î™d_öfo
 
	gm_§c_›
;

1295 
boﬁ
 
	gm_is_ªg
;

1296 
boﬁ
 
	gm_is_∑øm
;

1299 
±x_ªg_t
 
	gm_ªg_vÆue
;

1302 *
	gm_∑øm_vÆue
;

1303 
	gm_∑øm_byãs
;

1306 
	g°d
::
	tli°
< 
	t¨g_buf„r_t
 > 
	t¨g_buf„r_li°_t
;

1307 
¨g_buf„r_t
 
c›y_¨g_to_buf„r
(
±x_thªad_öfo
 * 
thªad
, 
›î™d_öfo
 
a˘uÆ_∑øm_›
, c⁄° 
symbﬁ
 * 
f‹mÆ_∑øm
);

1308 
c›y_¨gs_öto_buf„r_li°
–c⁄° 
±x_ö°ru˘i⁄
 * 
pI
,

1309 
±x_thªad_öfo
 * 
thªad
,

1310 c⁄° 
fun˘i⁄_öfo
 * 
èrgë_func
,

1311 
¨g_buf„r_li°_t
 &
¨g_vÆues
 );

1312 
c›y_buf„r_li°_öto_‰ame
(
±x_thªad_öfo
 * 
thªad
, 
¨g_buf„r_li°_t
 &
¨g_vÆues
);

1313 
c›y_buf„r_to_‰ame
(
±x_thªad_öfo
 * 
thªad
, c⁄° 
¨g_buf„r_t
 &
a
);

1316 
	sãxtuªInfo
 {

1317 
	mãxñ_size
;

1318 
	mTx
,
	mTy
;

1319 
	mTx_numbôs
,
	mTy_numbôs
;

1320 
	mãxñ_size_numbôs
;

1323 
°d
::
m≠
<°d::
°rög
,
symbﬁ_èbÀ
*> 
g_sym_«me_to_symbﬁ_èbÀ
;

1326 
boﬁ
 
g_kìp_öãrmedüã_fûes
;

1328 
gpgpu_±x_as£mbÀ
–
°d
::
°rög
 
k«me
, *
köfo
 );

1329 
	~"../›ti⁄_∑r£r.h
"

1330 
±x_ªg_›ti⁄s
(
›ti⁄_∑r£r_t
 
›p
);

1331 
±x_kî√l_shmem_size
–*
kî√l_im∂
 );

1332 
±x_kî√l_ƒegs
–*
kî√l_im∂
 );

	@src/cuda-sim/ptx_loader.cc

28 
	~"±x_lﬂdî.h
"

29 
	~"±x_ú.h
"

30 
	~"cuda-sim.h
"

31 
	~"±x_∑r£r.h
"

32 
	~<uni°d.h
>

33 
	~<dúít.h
>

34 
	~<f°ªam
>

38 
mem‹y_•a˚
 *
	gg_globÆ_mem
;

39 
mem‹y_•a˚
 *
	gg_ãx_mem
;

40 
mem‹y_•a˚
 *
	gg_surf_mem
;

41 
mem‹y_•a˚
 *
	gg_∑øm_mem
;

42 
boﬁ
 
	gg_ovîride_embedded_±x
 = 
Ál£
;

46 "C" 
±x_∑r£
();

47 "C" 
±x__sˇn_°rög
(const *);

49 c⁄° *
	gg_±xöfo_fûíame
;

50 "C" 
±xöfo_∑r£
();

51 "C" 
±xöfo_debug
;

52 "C" 
FILE
 *
±xöfo_ö
;

54 
boﬁ
 
	gg_ßve_embedded_±x
;

55 
boﬁ
 
	gg_kìp_öãrmedüã_fûes
;

56 
boﬁ
 
	gm_±x_ßve_c⁄vîãd_±x∂us
;

58 
boﬁ
 
	$kìp_öãrmedüã_fûes
(Ë{ 
g_kìp_öãrmedüã_fûes
;
	}
}

60 
	$±x_ªg_›ti⁄s
(
›ti⁄_∑r£r_t
 
›p
)

62 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-ßve_embedded_±x", 
OPT_BOOL
, &
g_ßve_embedded_±x
,

65 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-kìp", 
OPT_BOOL
, &
g_kìp_öãrmedüã_fûes
,

68 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_ßve_c⁄vîãd_±x∂us", 
OPT_BOOL
,

69 &
m_±x_ßve_c⁄vîãd_±x∂us
,

72 
	}
}

74 
	$¥öt_±x_fûe
–c⁄° *
p
, 
sour˚_num
, c⁄° *
fûíame
 )

76 
	`¥ötf
("\nGPGPU-Sim PTX: fûê_%u.±x c⁄ã¡s:\n\n", 
sour˚_num
 );

77 *
s
 = 
	`°rdup
(
p
);

78 *
t
 = 
s
;

79 
n
=1;

80  *
t
 != '\0' ) {

81 *
u
 = 
t
;

82  (*
u
 != '\n') && (*u != '\0') ) u++;

83 
œ°
 = (*
u
 == '\0');

84 *
u
 = '\0';

85 c⁄° 
±x_ö°ru˘i⁄
 *
pI
 = 
	`±x_ö°ru˘i⁄_lookup
(
fûíame
,
n
);

86 
pc
[64];

87 if–
pI
 &&ÖI->
	`gë_PC
() )

88 
	`¢¥ötf
(
pc
,64,"%4u", 
pI
->
	`gë_PC
() );

90 
	`¢¥ötf
(
pc
,64," ");

91 
	`¥ötf
(" _%u.±x %4u (pc=%s): %s\n", 
sour˚_num
, 
n
, 
pc
, 
t
 );

92 i‡–
œ°
 ) ;

93 
t
 = 
u
+1;

94 
n
++;

96 
	`‰ì
(
s
);

97 
	`fÊush
(
°dout
);

98 
	}
}

100 * 
gpgpu_±x_sim_c⁄vît_±x_™d_ßss_to_±x∂us
(c⁄° 
°d
::
°rög
 
±xfûíame
, c⁄° std::°rög 
ñffûíame
, c⁄° std::°rög 
ßssfûíame
)

103 
¥ötf
("GPGPU-Sim PTX: converting EMBEDDED .ptx fileÅoÖtxplus \n");

105 
	g‚ame_±x∂us
[1024];

106 
¢¥ötf
(
‚ame_±x∂us
,1024,"_ptxplus_XXXXXX");

107 
	gfd4
=
mk°emp
(
‚ame_±x∂us
);

108 
˛o£
(
fd4
);

111 
	gcomm™dlöe
[1024];

112 
	gªsu…
;

113 
¢¥ötf
(
comm™dlöe
, 1024, "$GPGPUSIM_ROOT/cuobjdump_to_ptxplus/cuobjdump_to_ptxplus %s %s %s %s",

114 
±xfûíame
.
c_°r
(),

115 
ßssfûíame
.
c_°r
(),

116 
ñffûíame
.
c_°r
(),

117 
‚ame_±x∂us
);

118 
fÊush
(
°dout
);

119 
¥ötf
("GPGPU-Sim PTX: cÆlög cuobjdump_to_±x∂us\ncomm™dlöe: %s\n", 
comm™dlöe
);

120 
	gªsu…
 = 
sy°em
(
comm™dlöe
);

121 if(
	gªsu…
){
¥ötf
("GPGPU-Sim PTX: ERROR ** couldÇŸÉxecuã %s\n", 
comm™dlöe
); 
exô
(1);}

125 
	g°d
::
if°ªam
 
fûeSåóm
(
‚ame_±x∂us
, 
°d
::
ios
::
ö
);

126 
	g°d
::
°rög
 
ãxt
, 
	glöe
;

127 
gëlöe
(
fûeSåóm
,
löe
)) {

128 
	gãxt
 +(
löe
 + "\n");

130 
	gfûeSåóm
.
˛o£
();

132 * 
	g±x∂us_°r
 = 
√w
 [
°æí
(
ãxt
.
c_°r
())+1];

133 
°r˝y
(
±x∂us_°r
, 
ãxt
.
c_°r
());

135 i‡(!
	gm_±x_ßve_c⁄vîãd_±x∂us
){

136 
	grm_comm™dlöe
[1024];

138 
¢¥ötf
(
rm_comm™dlöe
,1024,"rm -‡%s", 
‚ame_±x∂us
);

140 
¥ötf
("GPGPU-Sim PTX:ÑemovögÅemp‹¨y fûe†usög \"%s\"\n", 
rm_comm™dlöe
);

141 
	grm_ªsu…
 = 
sy°em
(
rm_comm™dlöe
);

142 if–
	grm_ªsu…
 != 0 ) {

143 
¥ötf
("GPGPU-Sim PTX: ERROR ** whûêªmovögÅemp‹¨y fûe†%d\n", 
rm_ªsu…
);

144 
exô
(1);

147 
¥ötf
("GPGPU-Sim PTX: DONE converting EMBEDDED .ptx fileÅoÖtxplus \n");

149  
	g±x∂us_°r
;

153 
symbﬁ_èbÀ
 *
	$gpgpu_±x_sim_lﬂd_±x_‰om_°rög
–c⁄° *
p
, 
sour˚_num
 )

155 
buf
[1024];

156 
	`¢¥ötf
(
buf
,1024,"_%u.±x", 
sour˚_num
 );

157 if–
g_ßve_embedded_±x
 ) {

158 
FILE
 *
Â
 = 
	`f›í
(
buf
,"w");

159 
	`Ârötf
(
Â
,"%s",
p
);

160 
	`f˛o£
(
Â
);

162 
symbﬁ_èbÀ
 *
symèb
=
	`öô_∑r£r
(
buf
);

163 
	`±x__sˇn_°rög
(
p
);

164 
îr‹s
 = 
	`±x_∑r£
 ();

165 i‡–
îr‹s
 ) {

166 
‚ame
[1024];

167 
	`¢¥ötf
(
‚ame
,1024,"_ptx_errors_XXXXXX");

168 
fd
=
	`mk°emp
(
‚ame
);

169 
	`˛o£
(
fd
);

170 
	`¥ötf
("GPGPU-Sim PTX:Ö¨£∏îr‹ dëe˘ed,Éxôög... buàfú°Éxåa˘ög .±xÅÿ\"%s\"\n", 
‚ame
);

171 
FILE
 *
±xfûe
 = 
	`f›í
(
‚ame
,"w");

172 
	`Ârötf
(
±xfûe
,"%s", 
p
 );

173 
	`f˛o£
(
±xfûe
);

174 
	`ab‹t
();

175 
	`exô
(40);

178 i‡–
g_debug_executi⁄
 >= 100 )

179 
	`¥öt_±x_fûe
(
p
,
sour˚_num
,
buf
);

181 
	`¥ötf
("GPGPU-Sim PTX: föishedÖ¨sög EMBEDDED .±x fûê%s\n",
buf
);

182  
symèb
;

183 
	}
}

185 
	$gpgpu_±xöfo_lﬂd_‰om_°rög
–c⁄° *
p_f‹_öfo
, 
sour˚_num
 )

187 
‚ame
[1024];

188 
	`¢¥ötf
(
‚ame
,1024,"_ptx_XXXXXX");

189 
fd
=
	`mk°emp
(
‚ame
);

190 
	`˛o£
(
fd
);

192 
	`¥ötf
("GPGPU-Sim PTX:Éxåa˘ögÉmbedded .±xÅÿãmp‹¨y fûê\"%s\"\n", 
‚ame
);

193 
FILE
 *
±xfûe
 = 
	`f›í
(
‚ame
,"w");

194 
	`Ârötf
(
±xfûe
,"%s", 
p_f‹_öfo
);

195 
	`f˛o£
(
±xfûe
);

197 
‚ame2
[1024];

198 
	`¢¥ötf
(
‚ame2
,1024,"_ptx2_XXXXXX");

199 
fd
=
	`mk°emp
(
‚ame2
);

200 
	`˛o£
(
fd
);

201 
comm™dlöe2
[4096];

202 
	`¢¥ötf
(
comm™dlöe2
,4096,"ˇà%†| sed 's/.vîsi⁄ 1.5/.vîsi⁄ 1.4/' | sed 's/,Åexmode_ödïídít//' | sed 's/\\(\\.exã∫ \\.c⁄°\\[1\\] .b8 \\w\\+\\)\\[\\]/\\1\\[1\\]/' | sed 's/c⁄°\\[.\\]/c⁄°\\[0\\]/g' > %s", 
‚ame
, 
‚ame2
);

203 
	`¥ötf
("Ru¬ög: %s\n", 
comm™dlöe2
);

204 
ªsu…
 = 
	`sy°em
(
comm™dlöe2
);

205 if–
ªsu…
 != 0 ) {

206 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** whûêlﬂdög PTX (aË%d\n", 
ªsu…
);

207 
	`¥ötf
(" Ensure you have writeáccessÅo simulation directory\n");

208 
	`¥ötf
("ánd have \'cat\'ánd \'sed\' in yourÖath.\n");

209 
	`exô
(1);

212 
ãmpfûe_±xöfo
[1024];

213 
	`¢¥ötf
(
ãmpfûe_±xöfo
,1024,"%söfo",
‚ame
);

214 
comm™dlöe
[1024];

215 
exåa_Êags
[1024];

216 
exåa_Êags
[0]=0;

218 #i‡
CUDART_VERSION
 >= 3000

219 
	`¢¥ötf
(
exåa_Êags
,1024,"--gpu-name=sm_20");

222 
	`¢¥ötf
(
comm™dlöe
,1024,"$CUDA_INSTALL_PATH/bin/ptxas %s -v %s --output-file /dev/null 2> %s",

223 
exåa_Êags
, 
‚ame2
, 
ãmpfûe_±xöfo
);

224 
	`¥ötf
("GPGPU-Sim PTX: gíî©ögÖtxöfÿusög \"%s\"\n", 
comm™dlöe
);

225 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

226 if–
ªsu…
 != 0 ) {

227 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** whûêlﬂdög PTX (bË%d\n", 
ªsu…
);

228 
	`¥ötf
(" EnsureÖtxas is in yourÖath.\n");

229 
	`exô
(1);

232 
±xöfo_ö
 = 
	`f›í
(
ãmpfûe_±xöfo
,"r");

233 
g_±xöfo_fûíame
 = 
ãmpfûe_±xöfo
;

234 
	`±xöfo_∑r£
();

235 
	`¢¥ötf
(
comm™dlöe
,1024,"rm -‡%†%†%s", 
‚ame
, 
‚ame2
, 
ãmpfûe_±xöfo
);

236 
	`¥ötf
("GPGPU-Sim PTX:ÑemovögÖtxöfÿusög \"%s\"\n", 
comm™dlöe
);

237 
ªsu…
 = 
	`sy°em
(
comm™dlöe
);

238 if–
ªsu…
 != 0 ) {

239 
	`¥ötf
("GPGPU-Sim PTX: ERROR ** whûêlﬂdög PTX (cË%d\n", 
ªsu…
);

240 
	`exô
(1);

242 
	}
}

	@src/cuda-sim/ptx_loader.h

28 #i‚de‡
PTX_LOADER_H_INCLUDED


29 
	#PTX_LOADER_H_INCLUDED


	)

30 
	~<°rög
>

32 
boﬁ
 
g_ovîride_embedded_±x
;

34 
˛ass
 
symbﬁ_èbÀ
 *
gpgpu_±x_sim_lﬂd_±x_‰om_°rög
–c⁄° *
p
, 
sour˚_num
 );

35 
gpgpu_±xöfo_lﬂd_‰om_°rög
–c⁄° *
p_f‹_öfo
, 
sour˚_num
 );

36 * 
gpgpu_±x_sim_c⁄vît_±x_™d_ßss_to_±x∂us
(c⁄° 
°d
::
°rög
 
±x_°r
, c⁄° std::°rög 
ßss_°r
, c⁄° std::°rög 
ñf_°r
);

37 
boﬁ
 
kìp_öãrmedüã_fûes
();

	@src/cuda-sim/ptx_parser.cc

28 
	~"±x_∑r£r.h
"

29 
	~"±x_ú.h
"

30 
	~<°d¨g.h
>

32 "C" 
±x_îr‹
–c⁄° *
s
 );

33 
±x_löío
;

35 c⁄° 
c‹e_c⁄fig
 *
	gg_shadî_c‹e_c⁄fig
;

36 
	$£t_±x_w¨p_size
(c⁄° 
c‹e_c⁄fig
 * 
w¨p_size
)

38 
g_shadî_c‹e_c⁄fig
=
w¨p_size
;

39 
	}
}

41 
boﬁ
 
	gg_debug_ú_gíî©i⁄
=
Ál£
;

42 c⁄° *
	gg_fûíame
;

43 
	gg_max_ªgs_≥r_thªad
 = 0;

46 
symbﬁ_èbÀ
 *
	gg_globÆ_Ælfûes_symbﬁ_èbÀ
 = 
NULL
;

47 
symbﬁ_èbÀ
 *
	gg_globÆ_symbﬁ_èbÀ
 = 
NULL
;

48 
	g°d
::
m≠
<
°d
::
°rög
,
	gsymbﬁ_èbÀ
*> 
	gg_sym_«me_to_symbﬁ_èbÀ
;

49 
symbﬁ_èbÀ
 *
	gg_cuºít_symbﬁ_èbÀ
 = 
NULL
;

50 
	g°d
::
li°
<
±x_ö°ru˘i⁄
*> 
g_ö°ru˘i⁄s
;

51 
symbﬁ
 *
	gg_œ°_symbﬁ
 = 
NULL
;

53 
	gg_îr‹_dëe˘ed
 = 0;

56 
mem‹y_•a˚_t
 
	gg_•a˚_•ec
 = 
undeföed_•a˚
;

57 
	gg_sˇœr_ty≥_•ec
 = -1;

58 
	gg_ve˘‹_•ec
 = -1;

59 
	gg_Æignmít_•ec
 = -1;

60 
	gg_exã∫_•ec
 = 0;

63 
ty≥_öfo
 *
	gg_v¨_ty≥
 = 
NULL
;

66 c⁄° 
symbﬁ
 *
	gg_¥ed
;

67 
	gg_√g_¥ed
;

68 
	gg_¥ed_mod
;

69 
symbﬁ
 *
	gg_œbñ
;

70 
	gg_›code
 = -1;

71 
	g°d
::
li°
<
›î™d_öfo
> 
g_›î™ds
;

72 
	g°d
::
li°
<> 
g_›ti⁄s
;

73 
	g°d
::
li°
<> 
g_sˇœr_ty≥
;

75 
	#DPRINTF
(...Ë\

	)

76 if–
	gg_debug_ú_gíî©i⁄
 ) { \

77 
¥ötf
(" %s:%u => ",
g_fûíame
,
±x_löío
); \

78 
¥ötf
(" (%s:%uË", 
__FILE__
, 
__LINE__
); \

79 
¥ötf
(
__VA_ARGS__
); \

80 
¥ötf
("\n"); \

81 
fÊush
(
°dout
); \

84 
	gg_íåy_func_∑øm_ödex
=0;

85 
fun˘i⁄_öfo
 *
	gg_func_öfo
 = 
NULL
;

86 
	g°d
::
m≠
<,°d::
°rög
> 
g_±x_tokí_decode
;

87 
›î™d_öfo
 
	gg_ªtu∫_v¨
;

89 c⁄° *
	$decode_tokí
–
ty≥
 )

91  
g_±x_tokí_decode
[
ty≥
].
	`c_°r
();

92 
	}
}

94 
	$ªad_∑r£r_ívú⁄mít_v¨übÀs
()

96 
g_fûíame
 = 
	`gëív
("PTX_SIM_KERNELFILE");

97 *
dbg_Àvñ
 = 
	`gëív
("PTX_SIM_DEBUG");

98 i‡–
dbg_Àvñ
 && 
	`°æí
(dbg_level) ) {

99 
debug_executi⁄
=0;

100 
	`ssˇnf
(
dbg_Àvñ
,"%d", &
debug_executi⁄
);

101 i‡–
debug_executi⁄
 >= 30 )

102 
g_debug_ú_gíî©i⁄
=
åue
;

104 
	}
}

106 
symbﬁ_èbÀ
 *
	$öô_∑r£r
–c⁄° *
±x_fûíame
 )

108 
g_fûíame
 = 
	`°rdup
(
±x_fûíame
);

109 i‡(
g_globÆ_Ælfûes_symbﬁ_èbÀ
 =
NULL
) {

110 
g_globÆ_Ælfûes_symbﬁ_èbÀ
 = 
√w
 
	`symbﬁ_èbÀ
("globÆ_Ælfûes", 0, 
NULL
);

111 
g_globÆ_symbﬁ_èbÀ
 = 
g_cuºít_symbﬁ_èbÀ
 = 
g_globÆ_Ælfûes_symbﬁ_èbÀ
;

114 
g_globÆ_symbﬁ_èbÀ
 = 
g_cuºít_symbﬁ_èbÀ
 = 
√w
 
	`symbﬁ_èbÀ
("globÆ",0,
g_globÆ_Ælfûes_symbﬁ_èbÀ
);

116 
±x_löío
 = 1;

118 
	#DEF
(
X
,
Y
Ë
g_±x_tokí_decode
[X] = Y;

	)

119 
	~"±x_∑r£r_decode.def
"

120 #unde‡
DEF


122  
g_globÆ_symbﬁ_èbÀ
;

123 
	}
}

125 
	$öô_dúe˘ive_°©e
()

127 
	`DPRINTF
("init_directive_state");

128 
g_•a˚_•ec
=
undeföed_•a˚
;

129 
g_sˇœr_ty≥_•ec
=-1;

130 
g_ve˘‹_•ec
=-1;

131 
g_›code
=-1;

132 
g_Æignmít_•ec
 = -1;

133 
g_exã∫_•ec
 = 0;

134 
g_sˇœr_ty≥
.
	`˛ór
();

135 
g_›î™ds
.
	`˛ór
();

136 
g_œ°_symbﬁ
 = 
NULL
;

137 
	}
}

139 
	$öô_ö°ru˘i⁄_°©e
()

141 
	`DPRINTF
("init_instruction_state");

142 
g_¥ed
 = 
NULL
;

143 
g_√g_¥ed
 = 0;

144 
g_¥ed_mod
 = -1;

145 
g_œbñ
 = 
NULL
;

146 
g_›code
 = -1;

147 
g_›ti⁄s
.
	`˛ór
();

148 
g_ªtu∫_v¨
 = 
	`›î™d_öfo
();

149 
	`öô_dúe˘ive_°©e
();

150 
	}
}

152 
	gg_íåy_poöt
;

154 
	$°¨t_fun˘i⁄
–
íåy_poöt
 )

156 
	`DPRINTF
("start_function");

157 
	`öô_dúe˘ive_°©e
();

158 
	`öô_ö°ru˘i⁄_°©e
();

159 
g_íåy_poöt
 = 
íåy_poöt
;

160 
g_func_öfo
 = 
NULL
;

161 
g_íåy_func_∑øm_ödex
=0;

162 
	}
}

164 *
	gg_add_idítifõr_ˇched__idítifõr
 = 
NULL
;

165 
	gg_add_idítifõr_ˇched__¨øy_dim
;

166 
	gg_add_idítifõr_ˇched__¨øy_idít
;

168 
	$add_fun˘i⁄_«me
–c⁄° *
«me
 )

170 
	`DPRINTF
("add_fun˘i⁄_«mê%†%s", 
«me
, ((
g_íåy_poöt
==1)?"(entrypoint)":((g_entry_point==2)?"(extern)":"")));

171 
boﬁ
 
¥i‹_de˛
 = 
g_globÆ_symbﬁ_èbÀ
->
	`add_fun˘i⁄_de˛
–
«me
, 
g_íåy_poöt
, &
g_func_öfo
, &
g_cuºít_symbﬁ_èbÀ
 );

172 if–
g_add_idítifõr_ˇched__idítifõr
 ) {

173 
	`add_idítifõr
–
g_add_idítifõr_ˇched__idítifõr
,

174 
g_add_idítifõr_ˇched__¨øy_dim
,

175 
g_add_idítifõr_ˇched__¨øy_idít
 );

176 
	`‰ì
–
g_add_idítifõr_ˇched__idítifõr
 );

177 
g_add_idítifõr_ˇched__idítifõr
 = 
NULL
;

178 
g_func_öfo
->
	`add_ªtu∫_v¨
–
g_œ°_symbﬁ
 );

179 
	`öô_dúe˘ive_°©e
();

181 if–
¥i‹_de˛
 ) {

182 
g_func_öfo
->
	`ªmove_¨gs
();

184 
g_globÆ_symbﬁ_èbÀ
->
	`add_fun˘i⁄
–
g_func_öfo
, 
g_fûíame
, 
±x_löío
 );

185 
	}
}

187 
	$add_dúe˘ive
()

189 
	`DPRINTF
("add_directive");

190 
	`öô_dúe˘ive_°©e
();

191 
	}
}

193 
	#mymax
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

195 
	$íd_fun˘i⁄
()

197 
	`DPRINTF
("end_function");

199 
	`öô_dúe˘ive_°©e
();

200 
	`öô_ö°ru˘i⁄_°©e
();

201 
g_max_ªgs_≥r_thªad
 = 
	`mymax
–g_max_ªgs_≥r_thªad, (
g_cuºít_symbﬁ_èbÀ
->
	`√xt_ªg_num
()-1));

202 
g_func_öfo
->
	`add_ö°
–
g_ö°ru˘i⁄s
 );

203 
g_ö°ru˘i⁄s
.
	`˛ór
();

204 
	`gpgpu_±x_as£mbÀ
–
g_func_öfo
->
	`gë_«me
(), g_func_info );

205 
g_cuºít_symbﬁ_èbÀ
 = 
g_globÆ_symbﬁ_èbÀ
;

207 
	`DPRINTF
("fun˘i⁄ %s, PC = %d\n", 
g_func_öfo
->
	`gë_«me
().
	`c_°r
(), g_func_öfo->
	`gë_°¨t_PC
());

208 
	}
}

210 
	#∑r£_îr‹
(
msg
, ...Ë
	`∑r£_îr‹_im∂
(
__FILE__
,
__LINE__
, msg, ##
__VA_ARGS__
)

	)

211 
	#∑r£_as£π
(
c⁄d
,
msg
, ...Ë
	`∑r£_as£π_im∂
((c⁄d),
__FILE__
,
__LINE__
, msg, ##
__VA_ARGS__
)

	)

213 
	$∑r£_îr‹_im∂
–c⁄° *
fûe
, 
löe
, c⁄° *
msg
, ... )

215 
va_li°
 
≠
;

216 
buf
[1024];

217 
	`va_°¨t
(
≠
,
msg
);

218 
	`v¢¥ötf
(
buf
,1024,
msg
,
≠
);

219 
	`va_íd
(
≠
);

221 
g_îr‹_dëe˘ed
 = 1;

222 
	`¥ötf
("%s:%u: P¨£Éº‹: %†(%s:%u)\n\n", 
g_fûíame
, 
±x_löío
, 
buf
, 
fûe
, 
löe
);

223 
	`±x_îr‹
(
NULL
);

224 
	`ab‹t
();

225 
	`exô
(1);

226 
	}
}

228 
	$∑r£_as£π_im∂
–
ã°_vÆue
, c⁄° *
fûe
, 
löe
, c⁄° *
msg
, ... )

230 
va_li°
 
≠
;

231 
buf
[1024];

232 
	`va_°¨t
(
≠
,
msg
);

233 
	`v¢¥ötf
(
buf
,1024,
msg
,
≠
);

234 
	`va_íd
(
≠
);

236 i‡–
ã°_vÆue
 == 0 )

237 
	`∑r£_îr‹_im∂
(
fûe
,
löe
, 
msg
);

238 
	}
}

240 "C" 
löebuf
[1024];

243 
	$£t_ªtu∫
()

245 
	`∑r£_as£π
–(
g_›code
 =
CALL_OP
 || g_›codê=
CALLP_OP
), "only call can haveÑeturn value");

246 
g_›î™ds
.
	`‰⁄t
().
	`£t_ªtu∫
();

247 
g_ªtu∫_v¨
 = 
g_›î™ds
.
	`‰⁄t
();

248 
	}
}

250 
	g°d
::
m≠
<
°d
::
°rög
,°d::m≠<,c⁄° 
	g±x_ö°ru˘i⁄
*> > 
	gg_ö°_lookup
;

252 c⁄° 
±x_ö°ru˘i⁄
 *
	$±x_ö°ru˘i⁄_lookup
–c⁄° *
fûíame
, 
löíumbî
 )

254 
°d
::
m≠
<°d::
°rög
,°d::m≠<,c⁄° 
±x_ö°ru˘i⁄
*> >::
ôî©‹
 
f
=
g_ö°_lookup
.
	`föd
(
fûíame
);

255 if–
f
 =
g_ö°_lookup
.
	`íd
() )

256  
NULL
;

257 
°d
::
m≠
<,c⁄° 
±x_ö°ru˘i⁄
*>::
ôî©‹
 
l
=
f
->
£c⁄d
.
	`föd
(
löíumbî
);

258 if–
l
 =
f
->
£c⁄d
.
	`íd
() )

259  
NULL
;

260  
l
->
£c⁄d
;

261 
	}
}

263 
	$add_ö°ru˘i⁄
()

265 
	`DPRINTF
("add_ö°ru˘i⁄: %s", ((
g_›code
>0)?
g_›code_°rög
[g_opcode]:"<label>") );

266 
	`as£π
–
g_shadî_c‹e_c⁄fig
 != 0 );

267 
±x_ö°ru˘i⁄
 *
i
 = 
√w
 
	`±x_ö°ru˘i⁄
–
g_›code
,

268 
g_¥ed
,

269 
g_√g_¥ed
,

270 
g_¥ed_mod
,

271 
g_œbñ
,

272 
g_›î™ds
,

273 
g_ªtu∫_v¨
,

274 
g_›ti⁄s
,

275 
g_sˇœr_ty≥
,

276 
g_•a˚_•ec
,

277 
g_fûíame
,

278 
±x_löío
,

279 
löebuf
,

280 
g_shadî_c‹e_c⁄fig
 );

281 
g_ö°ru˘i⁄s
.
	`push_back
(
i
);

282 
g_ö°_lookup
[
g_fûíame
][
±x_löío
] = 
i
;

283 
	`öô_ö°ru˘i⁄_°©e
();

284 
	}
}

286 
	$add_v¨übÀs
()

288 
	`DPRINTF
("add_variables");

289 i‡–!
g_›î™ds
.
	`em±y
() ) {

290 
	`as£π
–
g_œ°_symbﬁ
 !
NULL
 );

291 
g_œ°_symbﬁ
->
	`add_öôülizî
(
g_›î™ds
);

293 
	`öô_dúe˘ive_°©e
();

294 
	}
}

296 
	$£t_v¨übÀ_ty≥
()

298 
	`DPRINTF
("set_variable_type space_spec=%s scalar_type_spec=%s",

299 
g_±x_tokí_decode
[
g_•a˚_•ec
.
	`gë_ty≥
()].
	`c_°r
(),

300 
g_±x_tokí_decode
[
g_sˇœr_ty≥_•ec
].
	`c_°r
() );

301 
	`∑r£_as£π
–
g_•a˚_•ec
 !
undeföed_•a˚
, "variable hasÇo space specification" );

302 
	`∑r£_as£π
–
g_sˇœr_ty≥_•ec
 != -1, "variable hasÇoÅype information" );

303 
g_v¨_ty≥
 = 
g_cuºít_symbﬁ_èbÀ
->
	`add_ty≥
–
g_•a˚_•ec
,

304 
g_sˇœr_ty≥_•ec
,

305 
g_ve˘‹_•ec
,

306 
g_Æignmít_•ec
,

307 
g_exã∫_•ec
 );

308 
	}
}

310 
boﬁ
 
	$check_f‹_du∂iˇãs
–c⁄° *
idítifõr
 )

312 c⁄° 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

313  ( 
s
 !
NULL
 );

314 
	}
}

316 
°d
::
£t
<°d::
°rög
> 
g_globÆs
;

317 
°d
::
£t
<°d::
°rög
> 
g_c⁄°™ts
;

319 
	gg_func_de˛
 = 0;

320 
	gg_idít_add_uid
 = 0;

321 
	gg_c⁄°_Æloc
 = 1;

323 
	$add_idítifõr
–c⁄° *
idítifõr
, 
¨øy_dim
, 
¨øy_idít
 )

325 if–
g_func_de˛
 && (
g_func_öfo
 =
NULL
) ) {

327 
	`as£π
–
g_add_idítifõr_ˇched__idítifõr
 =
NULL
 );

328 
g_add_idítifõr_ˇched__idítifõr
 = 
	`°rdup
(
idítifõr
);

329 
g_add_idítifõr_ˇched__¨øy_dim
 = 
¨øy_dim
;

330 
g_add_idítifõr_ˇched__¨øy_idít
 = 
¨øy_idít
;

333 
	`DPRINTF
("add_idítifõ∏\"%s\" (%u)", 
idítifõr
, 
g_idít_add_uid
);

334 
g_idít_add_uid
++;

335 
ty≥_öfo
 *
ty≥
 = 
g_v¨_ty≥
;

336 
ty≥_öfo_key
 
ti
 = 
ty≥
->
	`gë_key
();

337 
basic_ty≥
;

338 
ªgnum
;

339 
size_t
 
num_bôs
;

340 
addr
, 
addr_∑d
;

341 
ti
.
	`ty≥_decode
(
num_bôs
,
basic_ty≥
);

343 
boﬁ
 
du∂iˇãs
 = 
	`check_f‹_du∂iˇãs
–
idítifõr
 );

344 if–
du∂iˇãs
 ) {

345 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

346 
g_œ°_symbﬁ
 = 
s
;

347 if–
g_func_de˛
 )

349 
°d
::
°rög
 
msg
 = std::
	`°rög
(
idítifõr
Ë+ " wa†dñˇªdÖªviou†© " + 
s
->
	`de˛_loˇti⁄
() + " skippingÇew declaration";

350 
	`¥ötf
("GPGPU-Sim PTX: W¨nög %s\n", 
msg
.
	`c_°r
());

354 
	`as£π
–
g_v¨_ty≥
 !
NULL
 );

355  
¨øy_idít
 ) {

356 
ARRAY_IDENTIFIER
:

357 
ty≥
 = 
g_cuºít_symbﬁ_èbÀ
->
	`gë_¨øy_ty≥
—y≥,
¨øy_dim
);

358 
num_bôs
 = 
¨øy_dim
 *Çum_bits;

360 
ARRAY_IDENTIFIER_NO_DIM
:

361 
ty≥
 = 
g_cuºít_symbﬁ_èbÀ
->
	`gë_¨øy_ty≥
(type,()-1);

362 
num_bôs
 = 0;

367 
g_œ°_symbﬁ
 = 
g_cuºít_symbﬁ_èbÀ
->
	`add_v¨übÀ
(
idítifõr
,
ty≥
,
num_bôs
/8,
g_fûíame
,
±x_löío
);

368  
ti
.
	`gë_mem‹y_•a˚
().
	`gë_ty≥
() ) {

369 
ªg_•a˚
: {

370 
ªgnum
 = 
g_cuºít_symbﬁ_èbÀ
->
	`√xt_ªg_num
();

371 
¨ch_ªgnum
 = -1;

372 
d
 = 0; d < 
	`°æí
(
idítifõr
); d++) {

373 i‡(
	`isdigô
(
idítifõr
[
d
])) {

374 
	`ssˇnf
(
idítifõr
 + 
d
, "%d", &
¨ch_ªgnum
);

378 i‡(
	`°rcmp
(
idítifõr
, "%sp") == 0) {

379 
¨ch_ªgnum
 = 0;

381 
g_œ°_symbﬁ
->
	`£t_ªgno
(
ªgnum
, 
¨ch_ªgnum
);

383 
sh¨ed_•a˚
:

384 
	`¥ötf
("GPGPU-Sim PTX:állocating sharedÑegion for \"%s\" from 0x%xÅo 0x%lx (shared memory space)\n",

385 
idítifõr
,

386 
g_cuºít_symbﬁ_èbÀ
->
	`gë_sh¨ed_√xt
(),

387 
g_cuºít_symbﬁ_èbÀ
->
	`gë_sh¨ed_√xt
(Ë+ 
num_bôs
/8 );

388 
	`fÊush
(
°dout
);

389 
	`as£π
–(
num_bôs
%8) == 0 );

390 
addr
 = 
g_cuºít_symbﬁ_èbÀ
->
	`gë_sh¨ed_√xt
();

391 
addr_∑d
 = 
num_bôs
 ? ((“um_bôs/8Ë- (
addr
 % (num_bits/8))) % (num_bits/8)) : 0;

392 
g_œ°_symbﬁ
->
	`£t_addªss
–
addr
+
addr_∑d
 );

393 
g_cuºít_symbﬁ_èbÀ
->
	`Æloc_sh¨ed
–
num_bôs
/8 + 
addr_∑d
 );

401 
c⁄°_•a˚
:

402 if–
¨øy_idít
 =
ARRAY_IDENTIFIER_NO_DIM
 ) {

403 
	`¥ötf
("GPGPU-Sim PTX: de„ºögáŒoˇti⁄ o‡c⁄°™àªgi⁄ f‹ \"%s\" (√ed sizêöf‹m©i⁄)\n", 
idítifõr
 );

405 
	`¥ötf
("GPGPU-Sim PTX:állocating constantÑegion for \"%s\" from 0x%xÅo 0x%lx (global memory space) %u\n",

406 
idítifõr
,

407 
g_cuºít_symbﬁ_èbÀ
->
	`gë_globÆ_√xt
(),

408 
g_cuºít_symbﬁ_èbÀ
->
	`gë_globÆ_√xt
(Ë+ 
num_bôs
/8,

409 
g_c⁄°_Æloc
++ );

410 
	`fÊush
(
°dout
);

411 
	`as£π
–(
num_bôs
%8) == 0 );

412 
addr
 = 
g_cuºít_symbﬁ_èbÀ
->
	`gë_globÆ_√xt
();

413 
addr_∑d
 = 
num_bôs
 ? ((“um_bôs/8Ë- (
addr
 % (num_bits/8))) % (num_bits/8)) : 0;

414 
g_œ°_symbﬁ
->
	`£t_addªss
–
addr
 + 
addr_∑d
 );

415 
g_cuºít_symbﬁ_èbÀ
->
	`Æloc_globÆ
–
num_bôs
/8 + 
addr_∑d
 );

417 if–
g_cuºít_symbﬁ_èbÀ
 =
g_globÆ_symbﬁ_èbÀ
 ) {

418 
g_c⁄°™ts
.
	`ö£π
–
idítifõr
 );

420 
	`as£π
–
g_cuºít_symbﬁ_èbÀ
 !
NULL
 );

421 
g_sym_«me_to_symbﬁ_èbÀ
[ 
idítifõr
 ] = 
g_cuºít_symbﬁ_èbÀ
;

423 
globÆ_•a˚
:

424 
	`¥ötf
("GPGPU-Sim PTX:állocating globalÑegion for \"%s\" from 0x%xÅo 0x%lx (global memory space)\n",

425 
idítifõr
,

426 
g_cuºít_symbﬁ_èbÀ
->
	`gë_globÆ_√xt
(),

427 
g_cuºít_symbﬁ_èbÀ
->
	`gë_globÆ_√xt
(Ë+ 
num_bôs
/8 );

428 
	`fÊush
(
°dout
);

429 
	`as£π
–(
num_bôs
%8) == 0 );

430 
addr
 = 
g_cuºít_symbﬁ_èbÀ
->
	`gë_globÆ_√xt
();

431 
addr_∑d
 = 
num_bôs
 ? ((“um_bôs/8Ë- (
addr
 % (num_bits/8))) % (num_bits/8)) : 0;

432 
g_œ°_symbﬁ
->
	`£t_addªss
–
addr
+
addr_∑d
 );

433 
g_cuºít_symbﬁ_èbÀ
->
	`Æloc_globÆ
–
num_bôs
/8 + 
addr_∑d
 );

434 
g_globÆs
.
	`ö£π
–
idítifõr
 );

435 
	`as£π
–
g_cuºít_symbﬁ_èbÀ
 !
NULL
 );

436 
g_sym_«me_to_symbﬁ_èbÀ
[ 
idítifõr
 ] = 
g_cuºít_symbﬁ_èbÀ
;

438 
loˇl_•a˚
:

439 if–
g_func_öfo
 =
NULL
 ) {

440 
	`¥ötf
("GPGPU-Sim PTX:állocatingÜocalÑegion for \"%s\" from 0x%xÅo 0x%lx (local memory space)\n",

441 
idítifõr
,

442 
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
(),

443 
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
(Ë+ 
num_bôs
/8 );

444 
	`fÊush
(
°dout
);

445 
	`as£π
–(
num_bôs
%8) == 0 );

446 
g_œ°_symbﬁ
->
	`£t_addªss
–
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
() );

447 
g_cuºít_symbﬁ_èbÀ
->
	`Æloc_loˇl
–
num_bôs
/8 );

450 
	`¥ötf
("GPGPU-Sim PTX:állocating stack frameÑegion for .local \"%s\" from 0x%xÅo 0x%lx\n",

451 
idítifõr
,

452 
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
(),

453 
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
(Ë+ 
num_bôs
/8 );

454 
	`fÊush
(
°dout
);

455 
	`as£π
–(
num_bôs
%8) == 0 );

456 
g_œ°_symbﬁ
->
	`£t_addªss
–
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
() );

457 
g_cuºít_symbﬁ_èbÀ
->
	`Æloc_loˇl
–
num_bôs
/8 );

458 
g_func_öfo
->
	`£t_‰amesize
–
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
() );

460 
ãx_•a˚
:

461 
	`¥ötf
("GPGPU-Sim PTX:Éncou¡îedÅextuª dúe˘ivê%s.\n", 
idítifõr
);

463 
∑øm_•a˚_loˇl
:

464 
	`¥ötf
("GPGPU-Sim PTX:állocating stack frameÑegion for .param \"%s\" from 0x%xÅo 0x%lx\n",

465 
idítifõr
,

466 
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
(),

467 
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
(Ë+ 
num_bôs
/8 );

468 
	`fÊush
(
°dout
);

469 
	`as£π
–(
num_bôs
%8) == 0 );

470 
g_œ°_symbﬁ
->
	`£t_addªss
–
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
() );

471 
g_cuºít_symbﬁ_èbÀ
->
	`Æloc_loˇl
–
num_bôs
/8 );

472 
g_func_öfo
->
	`£t_‰amesize
–
g_cuºít_symbﬁ_èbÀ
->
	`gë_loˇl_√xt
() );

474 
∑øm_•a˚_kî√l
:

477 
	`ab‹t
();

481 
	`as£π
–!
ti
.
	`is_∑øm_un˛assifõd
() );

482 i‡–
ti
.
	`is_∑øm_kî√l
() ) {

483 
g_func_öfo
->
	`add_∑øm_«me_ty≥_size
(
g_íåy_func_∑øm_ödex
,
idítifõr
, 
ti
.
	`sˇœr_ty≥
(), 
num_bôs
 );

484 
g_íåy_func_∑øm_ödex
++;

486 
	}
}

488 
	$add_c⁄°±r
(c⁄° * 
idítifõr1
, c⁄° * 
idítifõr2
, 
off£t
)

490 
symbﬁ
 *
s1
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr1
);

491 c⁄° 
symbﬁ
 *
s2
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr2
);

492 
	`∑r£_as£π
–
s1
 !
NULL
, "'from' constant identifier doesÇotÉxist.");

493 
	`∑r£_as£π
–
s1
 !
NULL
, "'to' constant identifier doesÇotÉxist.");

495 
addr
 = 
s2
->
	`gë_addªss
();

497 
	`¥ötf
("GPGPU-Sim PTX: moving \"%s\" from 0x%xÅo 0x%x (%s+%x)\n",

498 
idítifõr1
, 
s1
->
	`gë_addªss
(), 
addr
+
off£t
, 
idítifõr2
, offset);

500 
s1
->
	`£t_addªss
–
addr
 + 
off£t
 );

501 
	}
}

503 
	$add_fun˘i⁄_¨g
()

505 if–
g_func_öfo
 ) {

506 
	`DPRINTF
("add_fun˘i⁄_¨g \"%s\"", 
g_œ°_symbﬁ
->
	`«me
().
	`c_°r
() );

507 
g_func_öfo
->
	`add_¨g
(
g_œ°_symbﬁ
);

509 
	}
}

511 
	$add_exã∫_•ec
()

513 
	`DPRINTF
("add_extern_spec");

514 
g_exã∫_•ec
 = 1;

515 
	}
}

517 
	$add_Æignmít_•ec
–
•ec
 )

519 
	`DPRINTF
("add_alignment_spec");

520 
	`∑r£_as£π
–
g_Æignmít_•ec
 == -1, "multiple .align specifiersÖer variable declarationÇotállowed." );

521 
g_Æignmít_•ec
 = 
•ec
;

522 
	}
}

524 
	$add_•a˚_•ec
–
_mem‹y_•a˚_t
 
•ec
, 
vÆue
 )

526 
	`DPRINTF
("add_•a˚_•e¯\"%s\"", 
g_±x_tokí_decode
[
•ec
].
	`c_°r
() );

527 
	`∑r£_as£π
–
g_•a˚_•ec
 =
undeföed_•a˚
, "multiple space specifiersÇotállowed." );

528 if–
•ec
 =
∑øm_•a˚_un˛assifõd
 ) {

529 if–
g_func_de˛
 ) {

530 if–
g_íåy_poöt
 == 1)

531 
g_•a˚_•ec
 = 
∑øm_•a˚_kî√l
;

533 
g_•a˚_•ec
 = 
∑øm_•a˚_loˇl
;

535 
g_•a˚_•ec
 = 
∑øm_•a˚_un˛assifõd
;

537 
g_•a˚_•ec
 = 
•ec
;

538 if–
g_•a˚_•ec
 =
c⁄°_•a˚
 )

539 
g_•a˚_•ec
.
	`£t_b™k
(()
vÆue
);

541 
	}
}

543 
	$add_ve˘‹_•ec
(
•ec
 )

545 
	`DPRINTF
("add_vector_spec");

546 
	`∑r£_as£π
–
g_ve˘‹_•ec
 == -1, "multiple vector specifiersÇotállowed." );

547 
g_ve˘‹_•ec
 = 
•ec
;

548 
	}
}

550 
	$add_sˇœr_ty≥_•ec
–
ty≥_•ec
 )

552 
	`DPRINTF
("add_sˇœr_ty≥_•e¯\"%s\"", 
g_±x_tokí_decode
[
ty≥_•ec
].
	`c_°r
());

553 
g_sˇœr_ty≥
.
	`push_back
–
ty≥_•ec
 );

554 i‡–
g_sˇœr_ty≥
.
	`size
() > 1 ) {

555 
	`∑r£_as£π
–(
g_›code
 =-1Ë|| (g_›codê=
CVT_OP
Ë|| (g_›codê=
SET_OP
Ë|| (g_›codê=
SLCT_OP
)

556 || (
g_›code
 =
TEX_OP
),

559 
g_sˇœr_ty≥_•ec
 = 
ty≥_•ec
;

560 
	}
}

562 
	$add_œbñ
–c⁄° *
idítifõr
 )

564 
	`DPRINTF
("add_label");

565 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

566 i‡–
s
 !
NULL
 ) {

567 
g_œbñ
 = 
s
;

569 
g_œbñ
 = 
g_cuºít_symbﬁ_èbÀ
->
	`add_v¨übÀ
(
idítifõr
,
NULL
,0,
g_fûíame
,
±x_löío
);

571 
	}
}

573 
	$add_›code
–
›code
 )

575 
g_›code
 = 
›code
;

576 
	}
}

578 
	$add_¥ed
–c⁄° *
idítifõr
, 
√g
, 
¥edModifõr
 )

580 
	`DPRINTF
("add_pred");

581 c⁄° 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

582 i‡–
s
 =
NULL
 ) {

583 
°d
::
°rög
 
msg
 = std::
	`°rög
("¥ediˇã \""Ë+ 
idítifõr
 + "\" hasÇo declaration.";

584 
	`∑r£_îr‹
–
msg
.
	`c_°r
() );

586 
g_¥ed
 = 
s
;

587 
g_√g_¥ed
 = 
√g
;

588 
g_¥ed_mod
 = 
¥edModifõr
;

589 
	}
}

591 
	$add_›ti⁄
–
›ti⁄
 )

593 
	`DPRINTF
("add_option");

594 
g_›ti⁄s
.
	`push_back
–
›ti⁄
 );

595 
	}
}

597 
	$add_doubÀ_›î™d
–c⁄° *
d1
, c⁄° *
d2
 )

603 
	`DPRINTF
("add_double_operand");

604 c⁄° 
symbﬁ
 *
s1
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d1
);

605 c⁄° 
symbﬁ
 *
s2
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d2
);

606 
	`∑r£_as£π
–
s1
 !
NULL
 && 
s2
 != NULL, "component(s) missing declarations.");

607 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
s1
,
s2
) );

608 
	}
}

610 
	$add_2ve˘‹_›î™d
–c⁄° *
d1
, c⁄° *
d2
 )

612 
	`DPRINTF
("add_2vector_operand");

613 c⁄° 
symbﬁ
 *
s1
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d1
);

614 c⁄° 
symbﬁ
 *
s2
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d2
);

615 
	`∑r£_as£π
–
s1
 !
NULL
 && 
s2
 != NULL, "v2 component(s) missing declarations.");

616 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
s1
,
s2
,
NULL
,NULL) );

617 
	}
}

619 
	$add_3ve˘‹_›î™d
–c⁄° *
d1
, c⁄° *
d2
, c⁄° *
d3
 )

621 
	`DPRINTF
("add_3vector_operand");

622 c⁄° 
symbﬁ
 *
s1
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d1
);

623 c⁄° 
symbﬁ
 *
s2
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d2
);

624 c⁄° 
symbﬁ
 *
s3
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d3
);

625 
	`∑r£_as£π
–
s1
 !
NULL
 && 
s2
 !NULL && 
s3
 != NULL, "v3 component(s) missing declarations.");

626 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
s1
,
s2
,
s3
,
NULL
) );

627 
	}
}

629 
	$add_4ve˘‹_›î™d
–c⁄° *
d1
, c⁄° *
d2
, c⁄° *
d3
, c⁄° *
d4
 )

631 
	`DPRINTF
("add_4vector_operand");

632 c⁄° 
symbﬁ
 *
s1
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d1
);

633 c⁄° 
symbﬁ
 *
s2
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d2
);

634 c⁄° 
symbﬁ
 *
s3
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d3
);

635 c⁄° 
symbﬁ
 *
s4
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
d4
);

636 
	`∑r£_as£π
–
s1
 !
NULL
 && 
s2
 !NULL && 
s3
 !NULL && 
s4
 != NULL, "v4 component(s) missing declarations.");

637 c⁄° 
symbﬁ
 *
nuŒ_›
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
("_");

638 i‡–
s2
 =
nuŒ_›
 ) s2 = 
NULL
;

639 i‡–
s3
 =
nuŒ_›
 ) s3 = 
NULL
;

640 i‡–
s4
 =
nuŒ_›
 ) s4 = 
NULL
;

641 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
s1
,
s2
,
s3
,
s4
) );

642 
	}
}

644 
	$add_buûtö_›î™d
–
buûtö
, 
dim_modifõr
 )

646 
	`DPRINTF
("add_builtin_operand");

647 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
buûtö
,
dim_modifõr
) );

648 
	}
}

650 
	$add_mem‹y_›î™d
()

652 
	`DPRINTF
("add_memory_operand");

653 
	`as£π
–!
g_›î™ds
.
	`em±y
() );

654 
g_›î™ds
.
	`back
().
	`make_mem‹y_›î™d
();

655 
	}
}

658 
	$ch™ge_mem‹y_addr_•a˚
(c⁄° *
idítifõr
)

667 
boﬁ
 
ªcognizedTy≥
 = 
Ál£
;

669 
	`DPRINTF
("change_memory_addr_space");

670 
	`as£π
–!
g_›î™ds
.
	`em±y
() );

671 if(!
	`°rcmp
(
idítifõr
, "g"))

673 
g_›î™ds
.
	`back
().
	`£t_addr_•a˚
(
globÆ_•a˚
);

674 
ªcognizedTy≥
 = 
åue
;

676 if(!
	`°rcmp
(
idítifõr
, "s"))

678 
g_›î™ds
.
	`back
().
	`£t_addr_•a˚
(
sh¨ed_•a˚
);

679 
ªcognizedTy≥
 = 
åue
;

682 
c
[2];

683 
	`°∫˝y
(
c
, 
idítifõr
, 1); c[1] = '\0';

684 if(!
	`°rcmp
(
c
, "c"))

686 
g_›î™ds
.
	`back
().
	`£t_addr_•a˚
(
c⁄°_•a˚
);

687 
	`∑r£_as£π
(
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
Ë!
NULL
, "Constant wasÇot defined.");

688 
g_›î™ds
.
	`back
().
	`£t_c⁄°_mem_off£t
(
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
)->
	`gë_addªss
());

689 
ªcognizedTy≥
 = 
åue
;

692 
l
[2];

693 
	`°∫˝y
(
l
, 
idítifõr
, 1);Ü[1] = '\0';

694 if(!
	`°rcmp
(
l
, "l"))

696 
g_›î™ds
.
	`back
().
	`£t_addr_•a˚
(
loˇl_•a˚
);

697 
	`∑r£_as£π
(
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
Ë!
NULL
, "Local memory segment wasÇot defined.");

698 
g_›î™ds
.
	`back
().
	`£t_c⁄°_mem_off£t
(
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
)->
	`gë_addªss
());

699 
ªcognizedTy≥
 = 
åue
;

702 
	`∑r£_as£π
(
ªcognizedTy≥
, "Error: unrecognized memoryÅype.");

703 
	}
}

705 
	$ch™ge_›î™d_lohi
–
lohi
 )

712 
	`DPRINTF
("change_operand_lohi");

713 
	`as£π
–!
g_›î™ds
.
	`em±y
() );

715 
g_›î™ds
.
	`back
().
	`£t_›î™d_lohi
(
lohi
);

717 
	}
}

719 
	$ch™ge_doubÀ_›î™d_ty≥
–
›î™d_ty≥
 )

731 
	`DPRINTF
("change_double_operand_type");

732 
	`as£π
–!
g_›î™ds
.
	`em±y
() );

735 if–
›î™d_ty≥
 == -1 || operand_type == -2 ) {

736 if((
g_›code
 =
SET_OP
)||(g_›codê=
SETP_OP
))

737 
g_›î™ds
.
	`back
().
	`£t_doubÀ_›î™d_ty≥
(-1);

739 
g_›î™ds
.
	`back
().
	`£t_doubÀ_›î™d_ty≥
(-2);

740 } if–
›î™d_ty≥
 == -3 ) {

741 if(
g_›code
 =
SET_OP
)

742 
g_›î™ds
.
	`back
().
	`£t_doubÀ_›î™d_ty≥
(
›î™d_ty≥
);

744 
	`∑r£_as£π
(0, "Error: Unsupported use of double destination operand.");

746 
g_›î™ds
.
	`back
().
	`£t_doubÀ_›î™d_ty≥
(
›î™d_ty≥
);

749 
	}
}

751 
	$ch™ge_›î™d_√g
( )

753 
	`DPRINTF
("change_operand_neg");

754 
	`as£π
–!
g_›î™ds
.
	`em±y
() );

756 
g_›î™ds
.
	`back
().
	`£t_›î™d_√g
();

758 
	}
}

760 
	$add_lôîÆ_öt
–
vÆue
 )

762 
	`DPRINTF
("add_literal_int");

763 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
vÆue
) );

764 
	}
}

766 
	$add_lôîÆ_Êﬂt
–
vÆue
 )

768 
	`DPRINTF
("add_literal_float");

769 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
vÆue
) );

770 
	}
}

772 
	$add_lôîÆ_doubÀ
–
vÆue
 )

774 
	`DPRINTF
("add_literal_double");

775 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
vÆue
) );

776 
	}
}

778 
	$add_sˇœr_›î™d
–c⁄° *
idítifõr
 )

780 
	`DPRINTF
("add_scalar_operand");

781 c⁄° 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

782 i‡–
s
 =
NULL
 ) {

783 i‡–
g_›code
 =
BRA_OP
 || g_›codê=
CALLP_OP
) {

785 
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`add_v¨übÀ
(
idítifõr
,
NULL
,0,
g_fûíame
,
±x_löío
);

787 
°d
::
°rög
 
msg
 = std::
	`°rög
("›î™d \""Ë+ 
idítifõr
 + "\" hasÇo declaration.";

788 
	`∑r£_îr‹
–
msg
.
	`c_°r
() );

791 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
s
) );

792 
	}
}

794 
	$add_√g_¥ed_›î™d
–c⁄° *
idítifõr
 )

796 
	`DPRINTF
("add_neg_pred_operand");

797 c⁄° 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

798 i‡–
s
 =
NULL
 ) {

799 
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`add_v¨übÀ
(
idítifõr
,
NULL
,1,
g_fûíame
,
±x_löío
);

801 
›î™d_öfo
 
	`›
(
s
);

802 
›
.
	`£t_√g_¥ed
();

803 
g_›î™ds
.
	`push_back
–
›
 );

804 
	}
}

806 
	$add_addªss_›î™d
–c⁄° *
idítifõr
, 
off£t
 )

808 
	`DPRINTF
("add_address_operand");

809 c⁄° 
symbﬁ
 *
s
 = 
g_cuºít_symbﬁ_èbÀ
->
	`lookup
(
idítifõr
);

810 i‡–
s
 =
NULL
 ) {

811 
°d
::
°rög
 
msg
 = std::
	`°rög
("›î™d \""Ë+ 
idítifõr
 + "\" hasÇo declaration.";

812 
	`∑r£_îr‹
–
msg
.
	`c_°r
() );

814 
g_›î™ds
.
	`push_back
–
	`›î™d_öfo
(
s
,
off£t
) );

815 
	}
}

817 
	$add_¨øy_öôülizî
()

819 
g_œ°_symbﬁ
->
	`add_öôülizî
(
g_›î™ds
);

820 
	}
}

822 
	$add_vîsi⁄_öfo
–
vî
, 
ext
 )

824 
g_globÆ_symbﬁ_èbÀ
->
	`£t_±x_vîsi⁄
(
vî
,
ext
);

825 
	}
}

827 
	$add_fûe
–
num
, c⁄° *
fûíame
 )

829 if–
g_fûíame
 =
NULL
 ) {

830 *
b
 = 
	`°rdup
(
fûíame
);

831 *
l
=
b
;

832 *
n
=
b
;

833  *
n
 != '\0' ) {

834 if–*
n
 == '/' )

835 
l
 = 
n
+1;

836 
n
++;

839 *
p
 = 
	`°πok
(
l
,".");

840 
buf
[1024];

841 
	`¢¥ötf
(
buf
,1024,"%s.±x",
p
);

843 *
q
 = 
	`°πok
(
NULL
,".");

844 if–
q
 && !
	`°rcmp
(q,"cu") ) {

845 
g_fûíame
 = 
	`°rdup
(
buf
);

848 
	`‰ì
–
b
 );

851 
g_cuºít_symbﬁ_èbÀ
 = 
g_globÆ_symbﬁ_èbÀ
;

852 
	}
}

854 *
	$ª£t_symèb
()

856 *
ªsu…
 = 
g_cuºít_symbﬁ_èbÀ
;

857 
g_cuºít_symbﬁ_èbÀ
 = 
g_globÆ_symbﬁ_èbÀ
;

858  
ªsu…
;

859 
	}
}

861 
	$£t_symèb
(*
symèb
)

863 
g_cuºít_symbﬁ_èbÀ
 = (
symbﬁ_èbÀ
*)
symèb
;

864 
	}
}

866 
	$add_¥agma
–c⁄° *
°r
 )

868 
	`¥ötf
("GPGPU-Sim PTX: W¨nög -- ign‹ögÖøgm®'%s'\n", 
°r
 );

869 
	}
}

871 
	$vîsi⁄_hódî
(
a
Ë{
	}
}

873 
	$èrgë_hódî
(* 
a
)

875 
g_globÆ_symbﬁ_èbÀ
->
	`£t_sm_èrgë
(
a
,
NULL
,NULL);

876 
	}
}

878 
	$èrgë_hódî2
(* 
a
, * 
b
)

880 
g_globÆ_symbﬁ_èbÀ
->
	`£t_sm_èrgë
(
a
,
b
,
NULL
);

881 
	}
}

883 
	$èrgë_hódî3
(* 
a
, * 
b
, * 
c
)

885 
g_globÆ_symbﬁ_èbÀ
->
	`£t_sm_èrgë
(
a
,
b
,
c
);

886 
	}
}

888 
	$func_hódî
(c⁄° * 
a
Ë{
	}
}

889 
	$func_hódî_öfo
(c⁄° * 
a
Ë{
	}
}

890 
	$func_hódî_öfo_öt
(c⁄° * 
a
, 
b
Ë{
	}
}

	@src/cuda-sim/ptx_parser.h

28 #i‚de‡
±x_∑r£r_INCLUDED


29 
	#±x_∑r£r_INCLUDED


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

32 c⁄° *
g_fûíame
;

33 
g_îr‹_dëe˘ed
;

35 #ifde‡
__˝lu•lus


36 
˛ass
 
symbﬁ_èbÀ
* 
öô_∑r£r
(const *);

37 c⁄° 
˛ass
 
±x_ö°ru˘i⁄
 *
±x_ö°ru˘i⁄_lookup
–c⁄° *
fûíame
, 
löíumbî
 );

41 c⁄° *
decode_tokí
–
ty≥
 );

42 
ªad_∑r£r_ívú⁄mít_v¨übÀs
();

43 
°¨t_fun˘i⁄
–
íåy_poöt
 );

44 
add_fun˘i⁄_«me
–c⁄° *
‚ame
 );

45 
öô_dúe˘ive_°©e
();

46 
add_dúe˘ive
();

47 
íd_fun˘i⁄
();

48 
add_idítifõr
–c⁄° *
s
, 
¨øy_dim
, 
¨øy_idít
 );

49 
add_fun˘i⁄_¨g
();

50 
add_sˇœr_ty≥_•ec
–
ty≥_•ec
 );

51 
add_sˇœr_›î™d
–c⁄° *
idítifõr
 );

52 
add_√g_¥ed_›î™d
–c⁄° *
idítifõr
 );

53 
add_v¨übÀs
();

54 
£t_v¨übÀ_ty≥
();

55 
add_›code
–
›code
 );

56 
add_¥ed
–c⁄° *
idítifõr
, 
√g©e
, 
¥edModifõr
 );

57 
add_2ve˘‹_›î™d
–c⁄° *
d1
, c⁄° *
d2
 );

58 
add_3ve˘‹_›î™d
–c⁄° *
d1
, c⁄° *
d2
, c⁄° *
d3
 );

59 
add_4ve˘‹_›î™d
–c⁄° *
d1
, c⁄° *
d2
, c⁄° *
d3
, c⁄° *
d4
 );

60 
add_›ti⁄
(
›ti⁄
 );

61 
add_buûtö_›î™d
–
buûtö
, 
dim_modifõr
 );

62 
add_mem‹y_›î™d
( );

63 
add_lôîÆ_öt
–
vÆue
 );

64 
add_lôîÆ_Êﬂt
–
vÆue
 );

65 
add_lôîÆ_doubÀ
–
vÆue
 );

66 
add_addªss_›î™d
–c⁄° *
idítifõr
, 
off£t
 );

67 
add_œbñ
–c⁄° *
idífiõr
 );

68 
add_ve˘‹_•ec
(
•ec
 );

69 
add_•a˚_•ec
–
_mem‹y_•a˚_t
 
•ec
, 
vÆue
 );

70 
add_exã∫_•ec
();

71 
add_ö°ru˘i⁄
();

72 
£t_ªtu∫
();

73 
add_Æignmít_•ec
–
•ec
 );

74 
add_¨øy_öôülizî
();

75 
add_fûe
–
num
, c⁄° *
fûíame
 );

76 
add_vîsi⁄_öfo
–
vî
, 
ext
);

77 *
ª£t_symèb
();

78 
£t_symèb
(*);

79 
add_¥agma
–c⁄° *
°r
 );

80 
func_hódî
(c⁄° * 
a
);

81 
func_hódî_öfo
(c⁄° * 
a
);

82 
func_hódî_öfo_öt
(c⁄° * 
a
, 
b
);

83 
add_c⁄°±r
(c⁄° * 
idítifõr1
, c⁄° * 
idítifõr2
, 
off£t
);

84 
èrgë_hódî
(* 
a
);

85 
èrgë_hódî2
(* 
a
, * 
b
);

86 
èrgë_hódî3
(* 
a
, * 
b
, * 
c
);

87 
add_doubÀ_›î™d
–c⁄° *
d1
, c⁄° *
d2
 );

88 
ch™ge_mem‹y_addr_•a˚
–c⁄° *
idítifõr
 );

89 
ch™ge_›î™d_lohi
–
lohi
 );

90 
ch™ge_doubÀ_›î™d_ty≥
–
addr_ty≥
 );

91 
ch™ge_›î™d_√g
( );

92 
vîsi⁄_hódî
(
a
);

93 #ifde‡
__˝lu•lus


97 
	#NON_ARRAY_IDENTIFIER
 1

	)

98 
	#ARRAY_IDENTIFIER_NO_DIM
 2

	)

99 
	#ARRAY_IDENTIFIER
 3

	)

	@src/cuda-sim/ptx_sim.cc

28 
	~"±x_sim.h
"

29 
	~<°rög
>

30 
	~"±x_ú.h
"

31 
	~"../gpgpu-sim/gpu-sim.h
"

32 
	~"../gpgpu-sim/shadî.h
"

34 
„©uª_nŸ_im∂emíãd
–c⁄° *
f
 );

36 
	g°d
::
£t
<> 
g_±x_˘a_öfo_sm_idx_u£d_func
;

37 
	g°d
::
£t
<> 
g_±x_˘a_öfo_sm_idx_u£d_≥rfo
;

38 
	gg_±x_˘a_öfo_uid_func
 = 1;

39 
	gg_±x_˘a_öfo_uid_≥rfo
 = 1;

41 
	g±x_˘a_öfo
::
	$±x_˘a_öfo
–
sm_idx
,
boﬁ
 
fun˘i⁄Æ
 )

43 if(
fun˘i⁄Æ
 =
åue
)

47 
m_sm_idx
 = 
sm_idx
;

48 
m_uid
 = 
g_±x_˘a_öfo_uid_func
++;

52 
	`as£π
–
g_±x_˘a_öfo_sm_idx_u£d_≥rfo
.
	`föd
(
sm_idx
Ë=g_±x_˘a_öfo_sm_idx_u£d_≥rfo.
	`íd
() );

53 
g_±x_˘a_öfo_sm_idx_u£d_≥rfo
.
	`ö£π
(
sm_idx
);

54 
m_sm_idx
 = 
sm_idx
;

55 
m_uid
 = 
g_±x_˘a_öfo_uid_≥rfo
++;

58 
	}
}

60 
	g±x_˘a_öfo
::
	$add_thªad
–
±x_thªad_öfo
 *
thd
 )

62 
m_thªads_ö_˘a
.
	`ö£π
(
thd
);

63 
	}
}

65 
	g±x_˘a_öfo
::
	$num_thªads
() const

67  
m_thªads_ö_˘a
.
	`size
();

68 
	}
}

70 
	g±x_˘a_öfo
::
	$check_˘a_thªad_°©us_™d_ª£t
()

72 
boﬁ
 
Áû
 = 
Ál£
;

73 i‡–
m_thªads_th©_have_exôed
.
	`size
(Ë!
m_thªads_ö_˘a
.size() ) {

74 
	`¥ötf
("\n\n");

75 
	`¥ötf
("ExecutionÉrror: SomeÅhreads stillÑunning in CTA during CTAÑeallocation! (1)\n");

76 
	`¥ötf
(" CTA uid = %Lu (sm_idx = %u) : %luÑunning out of %zuÅotal\n",

77 
m_uid
,

78 
m_sm_idx
,

79 (
m_thªads_ö_˘a
.
	`size
(Ë- 
m_thªads_th©_have_exôed
.size()), m_threads_in_cta.size() );

80 
	`¥ötf
(" TheseáreÅheÅhreadsÅhatáre stillÑunning:\n");

81 
°d
::
£t
<
±x_thªad_öfo
*>::
ôî©‹
 
t_ôî
;

82  
t_ôî
=
m_thªads_ö_˘a
.
	`begö
();Å_ôî !m_thªads_ö_˘a.
	`íd
(); ++t_iter ) {

83 
±x_thªad_öfo
 *
t
 = *
t_ôî
;

84 i‡–
m_thªads_th©_have_exôed
.
	`föd
(
t
Ë=m_thªads_th©_have_exôed.
	`íd
() ) {

85 i‡–
m_d™glög_poöãrs
.
	`föd
(
t
Ë!m_d™glög_poöãrs.
	`íd
() ) {

86 
	`¥ötf
(" <thread deleted>\n");

88 
	`¥ötf
(" [d⁄e=%c] : ", (
t
->
	`is_d⁄e
()?'Y':'N') );

89 
t
->
	`¥öt_ö¢
–t->
	`gë_pc
(), 
°dout
 );

90 
	`¥ötf
("\n");

94 
	`¥ötf
("\n\n");

95 
Áû
 = 
åue
;

97 i‡–
Áû
 ) {

98 
	`ab‹t
();

101 
boﬁ
 
Áû2
 = 
Ál£
;

102 
°d
::
£t
<
±x_thªad_öfo
*>::
ôî©‹
 
t_ôî
;

103  
t_ôî
=
m_thªads_ö_˘a
.
	`begö
();Å_ôî !m_thªads_ö_˘a.
	`íd
(); ++t_iter ) {

104 
±x_thªad_öfo
 *
t
 = *
t_ôî
;

105 i‡–
m_d™glög_poöãrs
.
	`föd
(
t
Ë=m_d™glög_poöãrs.
	`íd
() ) {

106 i‡–!
t
->
	`is_d⁄e
() ) {

107 i‡–!
Áû2
 ) {

108 
	`¥ötf
("ExecutionÉrror: SomeÅhreads stillÑunning in CTA during CTAÑeallocation! (2)\n");

109 
	`¥ötf
(" CTA uid = %Lu (sm_idx = %uË:\n", 
m_uid
, 
m_sm_idx
 );

110 
Áû2
 = 
åue
;

112 
	`¥ötf
(" ");

113 
t
->
	`¥öt_ö¢
–t->
	`gë_pc
(), 
°dout
 );

114 
	`¥ötf
("\n");

118 i‡–
Áû2
 ) {

119 
	`ab‹t
();

121 
m_thªads_ö_˘a
.
	`˛ór
();

122 
m_thªads_th©_have_exôed
.
	`˛ór
();

123 
m_d™glög_poöãrs
.
	`˛ór
();

124 
	}
}

126 
	g±x_˘a_öfo
::
	$ªgi°î_thªad_exô
–
±x_thªad_öfo
 *
thd
 )

128 
	`as£π
–
m_thªads_th©_have_exôed
.
	`föd
(
thd
Ë=m_thªads_th©_have_exôed.
	`íd
() );

129 
m_thªads_th©_have_exôed
.
	`ö£π
(
thd
);

130 
	}
}

132 
	g±x_˘a_öfo
::
	$ªgi°î_dñëed_thªad
–
±x_thªad_öfo
 *
thd
 )

134 
m_d™glög_poöãrs
.
	`ö£π
(
thd
);

135 
	}
}

137 
	g±x_˘a_öfo
::
	$gë_sm_idx
() const

139  
m_sm_idx
;

140 
	}
}

142 
	gg_±x_thªad_öfo_uid_√xt
=1;

143 
	gg_±x_thªad_öfo_dñëe_cou¡
=0;

145 
	g±x_thªad_öfo
::~
	$±x_thªad_öfo
()

147 
g_±x_thªad_öfo_dñëe_cou¡
++;

148 
	}
}

150 
	g±x_thªad_öfo
::
	$±x_thªad_öfo
–
kî√l_öfo_t
 &
kî√l
 )

151 : 
	$m_kî√l
(
kî√l
)

153 
m_uid
 = 
g_±x_thªad_öfo_uid_√xt
++;

154 
m_c‹e
 = 
NULL
;

155 
m_b¨rõr_num
 = -1;

156 
m_©_b¨rõr
 = 
Ál£
;

157 
m_vÆid
 = 
Ál£
;

158 
m_gridid
 = 0;

159 
m_thªad_d⁄e
 = 
Ál£
;

160 
m_cy˛e_d⁄e
 = 0;

161 
m_PC
=0;

162 
m_icou¡
 = 0;

163 
m_œ°_ef„˘ive_addªss
 = 0;

164 
m_œ°_mem‹y_•a˚
 = 
undeföed_•a˚
;

165 
m_bønch_èkí
 = 0;

166 
m_sh¨ed_mem
 = 
NULL
;

167 
m_˘a_öfo
 = 
NULL
;

168 
m_loˇl_mem
 = 
NULL
;

169 
m_symbﬁ_èbÀ
 = 
NULL
;

170 
m_func_öfo
 = 
NULL
;

171 
m_hw_tid
 = -1;

172 
m_hw_wid
 = -1;

173 
m_hw_sid
 = -1;

174 
m_œ°_døm_ˇŒback
.
fun˘i⁄
 = 
NULL
;

175 
m_œ°_døm_ˇŒback
.
ö°ru˘i⁄
 = 
NULL
;

176 
m_ªgs
.
	`push_back
–
	`ªg_m≠_t
() );

177 
m_debug_åa˚_ªgs_modifõd
.
	`push_back
–
	`ªg_m≠_t
() );

178 
m_debug_åa˚_ªgs_ªad
.
	`push_back
–
	`ªg_m≠_t
() );

179 
m_ˇŒ°ack
.
	`push_back
–
	`°ack_íåy
() );

180 
m_RPC
 = -1;

181 
m_RPC_upd©ed
 = 
Ál£
;

182 
m_œ°_was_ˇŒ
 = 
Ál£
;

183 
m_íabÀ_debug_åa˚
 = 
Ál£
;

184 
m_loˇl_mem_°ack_poöãr
 = 0;

185 
m_gpu
 = 
NULL
;

186 
	}
}

188 c⁄° 
	g±x_vîsi⁄
 &
	g±x_thªad_öfo
::
	$gë_±x_vîsi⁄
() const

190  
m_func_öfo
->
	`gë_±x_vîsi⁄
();

191 
	}
}

193 
	g±x_thªad_öfo
::
	$£t_d⁄e
()

195 
	`as£π
–!
m_©_b¨rõr
 );

196 
m_thªad_d⁄e
 = 
åue
;

197 
m_cy˛e_d⁄e
 = 
gpu_sim_cy˛e
;

198 
	}
}

200 
	g±x_thªad_öfo
::
	$gë_buûtö
–
buûtö_id
, 
dim_mod
 )

202 
	`as£π
–
m_vÆid
 );

203 (
buûtö_id
&0xFFFF)) {

204 
CLOCK_REG
:

205  ()(
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
);

206 
CLOCK64_REG
:

207 
	`ab‹t
();

209  (
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
)*4;

210 
HALFCLOCK_ID
:

213  (
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
)*2;

214 
CTAID_REG
:

215 
	`as£π
–
dim_mod
 < 3 );

216 if–
dim_mod
 =0 )  
m_˘aid
.
x
;

217 if–
dim_mod
 =1 )  
m_˘aid
.
y
;

218 if–
dim_mod
 =2 )  
m_˘aid
.
z
;

219 
	`ab‹t
();

221 
ENVREG_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%envreg" );  0;

222 
GRIDID_REG
:

223  
m_gridid
;

224 
LANEID_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%laneid" );  0;

225 
LANEMASK_EQ_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%lanemask_eq" );  0;

226 
LANEMASK_LE_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%lanemask_le" );  0;

227 
LANEMASK_LT_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%lanemask_lt" );  0;

228 
LANEMASK_GE_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%lanemask_ge" );  0;

229 
LANEMASK_GT_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%lanemask_gt" );  0;

230 
NCTAID_REG
:

231 
	`as£π
–
dim_mod
 < 3 );

232 if–
dim_mod
 =0 )  
m_n˘aid
.
x
;

233 if–
dim_mod
 =1 )  
m_n˘aid
.
y
;

234 if–
dim_mod
 =2 )  
m_n˘aid
.
z
;

235 
	`ab‹t
();

237 
NTID_REG
:

238 
	`as£π
–
dim_mod
 < 3 );

239 if–
dim_mod
 =0 )  
m_¡id
.
x
;

240 if–
dim_mod
 =1 )  
m_¡id
.
y
;

241 if–
dim_mod
 =2 )  
m_¡id
.
z
;

242 
	`ab‹t
();

244 
NWARPID_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%nwarpid" );  0;

245 
PM_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%pm" );  0;

246 
SMID_REG
: 
	`„©uª_nŸ_im∂emíãd
( "%smid" );  0;

247 
TID_REG
:

248 
	`as£π
–
dim_mod
 < 3 );

249 if–
dim_mod
 =0 )  
m_tid
.
x
;

250 if–
dim_mod
 =1 )  
m_tid
.
y
;

251 if–
dim_mod
 =2 )  
m_tid
.
z
;

252 
	`ab‹t
();

254 
WARPSZ_REG
: 
	`„©uª_nŸ_im∂emíãd
( "WARP_SZ" );  0;

256 
	`as£π
(0);

259 
	}
}

261 
	g±x_thªad_öfo
::
	$£t_öfo
–
fun˘i⁄_öfo
 *
func
 )

263 
m_symbﬁ_èbÀ
 = 
func
->
	`gë_symèb
();

264 
m_func_öfo
 = 
func
;

265 
m_PC
 = 
func
->
	`gë_°¨t_PC
();

266 
	}
}

268 
	g±x_thªad_öfo
::
	$˝y_tid_to_ªg
–
dim3
 
tid
 )

271 
±x_ªg_t
 
d©a
;

272 
d©a
.
s64
=0;

274 
d©a
.
u32
=(
tid
.
x
 + (tid.
y
<<16Ë+ (tid.
z
<<26));

276 c⁄° 
symbﬁ
 *
r0
 = 
m_symbﬁ_èbÀ
->
	`lookup
("$r0");

277 i‡(
r0
){

279 
	`£t_ªg
(
r0
,
d©a
);

281 
	}
}

283 
	g±x_thªad_öfo
::
	$¥öt_ö¢
–
pc
, 
FILE
 * 
Â
 ) const

285 
m_func_öfo
->
	`¥öt_ö¢
(
pc
,
Â
);

286 
	}
}

288 
¥öt_ªg
–
FILE
 *
Â
, 
°d
::
°rög
 
«me
, 
±x_ªg_t
 
vÆue
, 
symbﬁ_èbÀ
 *
symèb
 )

290 c⁄° 
symbﬁ
 *
	gsym
 = 
symèb
->
lookup
(
«me
.
c_°r
());

291 
Ârötf
(
Â
," %8† ", 
«me
.
c_°r
() );

292 if–
	gsym
 =
NULL
 ) {

293 
Ârötf
(
Â
,"<unknow¿ty≥> 0x%Œx\n", (Ë
vÆue
.
u64
 );

296 c⁄° 
ty≥_öfo
 *
	gt
 = 
sym
->
ty≥
();

297 if–
	gt
 =
NULL
 ) {

298 
Ârötf
(
Â
,"<unknow¿ty≥> 0x%Œx\n", (Ë
vÆue
.
u64
 );

301 
ty≥_öfo_key
 
	gti
 = 
t
->
gë_key
();

303  
	gti
.
sˇœr_ty≥
() ) {

304 
	gS8_TYPE
: 
Ârötf
(
Â
,".s8 %d\n", 
vÆue
.
s8
 ); ;

305 
	gS16_TYPE
: 
Ârötf
(
Â
,".s16 %d\n", 
vÆue
.
s16
 ); ;

306 
	gS32_TYPE
: 
Ârötf
(
Â
,".s32 %d\n", 
vÆue
.
s32
 ); ;

307 
	gS64_TYPE
: 
Ârötf
(
Â
,".s64 %Ld\n", 
vÆue
.
s64
 ); ;

308 
	gU8_TYPE
: 
Ârötf
(
Â
,".u8 0x%02x\n", (Ë
vÆue
.
u8
 ); ;

309 
	gU16_TYPE
: 
Ârötf
(
Â
,".u16 0x%04x\n", (Ë
vÆue
.
u16
 ); ;

310 
	gU32_TYPE
: 
Ârötf
(
Â
,".u32 0x%08x\n", (Ë
vÆue
.
u32
 ); ;

311 
	gU64_TYPE
: 
Ârötf
(
Â
,".u64 0x%Œx\n", 
vÆue
.
u64
 ); ;

312 
	gF16_TYPE
: 
Ârötf
(
Â
,".f16 %‡[0x%04x]\n", 
vÆue
.
f16
, (ËvÆue.
u16
 ); ;

313 
	gF32_TYPE
: 
Ârötf
(
Â
,".f32 %.15l‡[0x%08x]\n", 
vÆue
.
f32
, vÆue.
u32
 ); ;

314 
	gF64_TYPE
: 
Ârötf
(
Â
,".f64 %.15À [0x%016Œx]\n", 
vÆue
.
f64
, vÆue.
u64
 ); ;

315 
	gB8_TYPE
: 
Ârötf
(
Â
,".b8 0x%02x\n", (Ë
vÆue
.
u8
 ); ;

316 
	gB16_TYPE
: 
Ârötf
(
Â
,".b16 0x%04x\n", (Ë
vÆue
.
u16
 ); ;

317 
	gB32_TYPE
: 
Ârötf
(
Â
,".b32 0x%08x\n", (Ë
vÆue
.
u32
 ); ;

318 
	gB64_TYPE
: 
Ârötf
(
Â
,".b64 0x%Œx\n", (Ë
vÆue
.
u64
 ); ;

319 
	gPRED_TYPE
: 
Ârötf
(
Â
,".¥ed %u\n", (Ë
vÆue
.
¥ed
 ); ;

321 
Ârötf
–
Â
, "non-scalarÅype\n" );

324 
fÊush
(
Â
);

327 
¥öt_ªg
–
°d
::
°rög
 
«me
, 
±x_ªg_t
 
vÆue
, 
symbﬁ_èbÀ
 *
symèb
 )

329 
¥öt_ªg
(
°dout
,
«me
,
vÆue
,
symèb
);

332 
	g±x_thªad_öfo
::
	$ˇŒ°ack_push
–
pc
, 
Ωc
, c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
, c⁄° symbﬁ *
ªtu∫_v¨_d°
, 
ˇŒ_uid
 )

334 
m_RPC
 = -1;

335 
m_RPC_upd©ed
 = 
åue
;

336 
m_œ°_was_ˇŒ
 = 
åue
;

337 
	`as£π
–
m_func_öfo
 !
NULL
 );

338 
m_ˇŒ°ack
.
	`push_back
–
	`°ack_íåy
(
m_symbﬁ_èbÀ
,
m_func_öfo
,
pc
,
Ωc
,
ªtu∫_v¨_§c
,
ªtu∫_v¨_d°
,
ˇŒ_uid
) );

339 
m_ªgs
.
	`push_back
–
	`ªg_m≠_t
() );

340 
m_debug_åa˚_ªgs_modifõd
.
	`push_back
–
	`ªg_m≠_t
() );

341 
m_debug_åa˚_ªgs_ªad
.
	`push_back
–
	`ªg_m≠_t
() );

342 
m_loˇl_mem_°ack_poöãr
 +
m_func_öfo
->
	`loˇl_mem_‰amesize
();

343 
	}
}

346 
	g±x_thªad_öfo
::
	$ˇŒ°ack_push_∂us
–
pc
, 
Ωc
, c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
, c⁄° symbﬁ *
ªtu∫_v¨_d°
, 
ˇŒ_uid
 )

348 
m_RPC
 = -1;

349 
m_RPC_upd©ed
 = 
åue
;

350 
m_œ°_was_ˇŒ
 = 
åue
;

351 
	`as£π
–
m_func_öfo
 !
NULL
 );

352 
m_ˇŒ°ack
.
	`push_back
–
	`°ack_íåy
(
m_symbﬁ_èbÀ
,
m_func_öfo
,
pc
,
Ωc
,
ªtu∫_v¨_§c
,
ªtu∫_v¨_d°
,
ˇŒ_uid
) );

356 
m_loˇl_mem_°ack_poöãr
 +
m_func_öfo
->
	`loˇl_mem_‰amesize
();

357 
	}
}

360 
boﬁ
 
	g±x_thªad_öfo
::
	$ˇŒ°ack_p›
()

362 c⁄° 
symbﬁ
 *
rv_§c
 = 
m_ˇŒ°ack
.
	`back
().
m_ªtu∫_v¨_§c
;

363 c⁄° 
symbﬁ
 *
rv_d°
 = 
m_ˇŒ°ack
.
	`back
().
m_ªtu∫_v¨_d°
;

364 
	`as£π
–!((
rv_§c
 !
NULL
Ë^ (
rv_d°
 != NULL)) );

367 
¨g_buf„r_t
 
buf„r
;

368 if–
rv_§c
 !
NULL
 )

369 
buf„r
 = 
	`c›y_¨g_to_buf„r
(
this
, 
	`›î™d_öfo
(
rv_§c
), 
rv_d°
 );

371 
m_symbﬁ_èbÀ
 = 
m_ˇŒ°ack
.
	`back
().m_symbol_table;

372 
m_NPC
 = 
m_ˇŒ°ack
.
	`back
().
m_PC
;

373 
m_RPC_upd©ed
 = 
åue
;

374 
m_œ°_was_ˇŒ
 = 
Ál£
;

375 
m_RPC
 = 
m_ˇŒ°ack
.
	`back
().m_RPC;

376 
m_func_öfo
 = 
m_ˇŒ°ack
.
	`back
().m_func_info;

377 if–
m_func_öfo
 ) {

378 
	`as£π
–
m_loˇl_mem_°ack_poöãr
 >
m_func_öfo
->
	`loˇl_mem_‰amesize
() );

379 
m_loˇl_mem_°ack_poöãr
 -
m_func_öfo
->
	`loˇl_mem_‰amesize
();

381 
m_ˇŒ°ack
.
	`p›_back
();

382 
m_ªgs
.
	`p›_back
();

383 
m_debug_åa˚_ªgs_modifõd
.
	`p›_back
();

384 
m_debug_åa˚_ªgs_ªad
.
	`p›_back
();

387 if–
rv_d°
 !
NULL
 )

388 
	`c›y_buf„r_to_‰ame
(
this
, 
buf„r
);

390  
m_ˇŒ°ack
.
	`em±y
();

391 
	}
}

394 
boﬁ
 
	g±x_thªad_öfo
::
	$ˇŒ°ack_p›_∂us
()

396 c⁄° 
symbﬁ
 *
rv_§c
 = 
m_ˇŒ°ack
.
	`back
().
m_ªtu∫_v¨_§c
;

397 c⁄° 
symbﬁ
 *
rv_d°
 = 
m_ˇŒ°ack
.
	`back
().
m_ªtu∫_v¨_d°
;

398 
	`as£π
–!((
rv_§c
 !
NULL
Ë^ (
rv_d°
 != NULL)) );

401 
¨g_buf„r_t
 
buf„r
;

402 if–
rv_§c
 !
NULL
 )

403 
buf„r
 = 
	`c›y_¨g_to_buf„r
(
this
, 
	`›î™d_öfo
(
rv_§c
), 
rv_d°
 );

405 
m_symbﬁ_èbÀ
 = 
m_ˇŒ°ack
.
	`back
().m_symbol_table;

406 
m_NPC
 = 
m_ˇŒ°ack
.
	`back
().
m_PC
;

407 
m_RPC_upd©ed
 = 
åue
;

408 
m_œ°_was_ˇŒ
 = 
Ál£
;

409 
m_RPC
 = 
m_ˇŒ°ack
.
	`back
().m_RPC;

410 
m_func_öfo
 = 
m_ˇŒ°ack
.
	`back
().m_func_info;

411 if–
m_func_öfo
 ) {

412 
	`as£π
–
m_loˇl_mem_°ack_poöãr
 >
m_func_öfo
->
	`loˇl_mem_‰amesize
() );

413 
m_loˇl_mem_°ack_poöãr
 -
m_func_öfo
->
	`loˇl_mem_‰amesize
();

415 
m_ˇŒ°ack
.
	`p›_back
();

421 if–
rv_d°
 !
NULL
 )

422 
	`c›y_buf„r_to_‰ame
(
this
, 
buf„r
);

424  
m_ˇŒ°ack
.
	`em±y
();

425 
	}
}

427 
	g±x_thªad_öfo
::
	$dump_ˇŒ°ack
() const

429 
°d
::
li°
<
°ack_íåy
>::
c⁄°_ôî©‹
 
c
=
m_ˇŒ°ack
.
	`begö
();

430 
°d
::
li°
<
ªg_m≠_t
>::
c⁄°_ôî©‹
 
r
=
m_ªgs
.
	`begö
();

432 
	`¥ötf
("\n\n");

433 
	`¥ötf
("CÆ»°ack f‹Åhªad uid = %u (sc=%u, hwtid=%u)\n", 
m_uid
, 
m_hw_sid
, 
m_hw_tid
 );

434  
c
 !
m_ˇŒ°ack
.
	`íd
(Ë&& 
r
 !
m_ªgs
.end() ) {

435 c⁄° 
°ack_íåy
 &
c_e
 = *
c
;

436 c⁄° 
ªg_m≠_t
 &
ªgs
 = *
r
;

437 if–!
c_e
.
m_vÆid
 ) {

438 
	`¥ötf
(" <íåy> #ªg†%zu\n", 
ªgs
.
	`size
() );

440 
	`¥ötf
(" %20s PC=%3u RV= (callee=\'%s\',caller=\'%s\') #regs = %zu\n",

441 
c_e
.
m_func_öfo
->
	`gë_«me
().
	`c_°r
(), c_e.
m_PC
,

442 
c_e
.
m_ªtu∫_v¨_§c
->
	`«me
().
	`c_°r
(),

443 
c_e
.
m_ªtu∫_v¨_d°
->
	`«me
().
	`c_°r
(),

444 
ªgs
.
	`size
() );

446 
c
++;

447 
r
++;

449 if–
c
 !
m_ˇŒ°ack
.
	`íd
(Ë|| 
r
 !
m_ªgs
.end() ) {

450 
	`¥ötf
(" *** mismatch in m_regsánd m_callstack sizes ***\n" );

452 
	`¥ötf
("\n\n");

453 
	}
}

455 
	g°d
::
°rög
 
±x_thªad_öfo
::
	$gë_loˇti⁄
() const

457 c⁄° 
±x_ö°ru˘i⁄
 *
pI
 = 
m_func_öfo
->
	`gë_ö°ru˘i⁄
(
m_PC
);

458 
buf
[1024];

459 
	`¢¥ötf
(
buf
,1024,"%s:%u", 
pI
->
	`sour˚_fûe
(),ÖI->
	`sour˚_löe
() );

460  
°d
::
	`°rög
(
buf
);

461 
	}
}

463 c⁄° 
±x_ö°ru˘i⁄
 *
	g±x_thªad_öfo
::
	$gë_ö°
() const

465  
m_func_öfo
->
	`gë_ö°ru˘i⁄
(
m_PC
);

466 
	}
}

468 c⁄° 
±x_ö°ru˘i⁄
 *
	g±x_thªad_öfo
::
	$gë_ö°
–
addr_t
 
pc
 ) const

470  
m_func_öfo
->
	`gë_ö°ru˘i⁄
(
pc
);

471 
	}
}

473 
	g±x_thªad_öfo
::
	$dump_ªgs
–
FILE
 *
Â
 )

475 if(
m_ªgs
.
	`em±y
()) ;

476 if(
m_ªgs
.
	`back
().
	`em±y
()) ;

477 
	`Ârötf
(
Â
,"Register File Contents:\n");

478 
	`fÊush
(
Â
);

479 
ªg_m≠_t
::
c⁄°_ôî©‹
 
r
;

480  
r
=
m_ªgs
.
	`back
().
	`begö
();Ñ !m_ªgs.back().
	`íd
(); ++r ) {

481 c⁄° 
symbﬁ
 *
sym
 = 
r
->
fú°
;

482 
±x_ªg_t
 
vÆue
 = 
r
->
£c⁄d
;

483 
°d
::
°rög
 
«me
 = 
sym
->
	`«me
();

484 
	`¥öt_ªg
(
Â
,
«me
,
vÆue
,
m_symbﬁ_èbÀ
);

486 
	}
}

488 
	g±x_thªad_öfo
::
	$dump_modifõdªgs
(
FILE
 *
Â
)

490 if–!(
m_debug_åa˚_ªgs_modifõd
.
	`em±y
() ||

491 
m_debug_åa˚_ªgs_modifõd
.
	`back
().
	`em±y
()) ) {

492 
	`Ârötf
(
Â
,"Output Registers:\n");

493 
	`fÊush
(
Â
);

494 
ªg_m≠_t
::
ôî©‹
 
r
;

495  
r
=
m_debug_åa˚_ªgs_modifõd
.
	`back
().
	`begö
();Ñ !m_debug_åa˚_ªgs_modifõd.back().
	`íd
(); ++r ) {

496 c⁄° 
symbﬁ
 *
sym
 = 
r
->
fú°
;

497 
°d
::
°rög
 
«me
 = 
sym
->
	`«me
();

498 
±x_ªg_t
 
vÆue
 = 
r
->
£c⁄d
;

499 
	`¥öt_ªg
(
Â
,
«me
,
vÆue
,
m_symbﬁ_èbÀ
);

502 if–!(
m_debug_åa˚_ªgs_ªad
.
	`em±y
() ||

503 
m_debug_åa˚_ªgs_ªad
.
	`back
().
	`em±y
()) ) {

504 
	`Ârötf
(
Â
,"Input Registers:\n");

505 
	`fÊush
(
Â
);

506 
ªg_m≠_t
::
ôî©‹
 
r
;

507  
r
=
m_debug_åa˚_ªgs_ªad
.
	`back
().
	`begö
();Ñ !m_debug_åa˚_ªgs_ªad.back().
	`íd
(); ++r ) {

508 c⁄° 
symbﬁ
 *
sym
 = 
r
->
fú°
;

509 
°d
::
°rög
 
«me
 = 
sym
->
	`«me
();

510 
±x_ªg_t
 
vÆue
 = 
r
->
£c⁄d
;

511 
	`¥öt_ªg
(
Â
,
«me
,
vÆue
,
m_symbﬁ_èbÀ
);

514 
	}
}

516 
	g±x_thªad_öfo
::
	$push_bªakaddr
(c⁄° 
›î™d_öfo
 &
bªakaddr
)

518 
m_bªakaddrs
.
	`push
(
bªakaddr
);

519 
	}
}

521 c⁄° 
	g›î™d_öfo
& 
	g±x_thªad_öfo
::
	$p›_bªakaddr
()

523 if(
m_bªakaddrs
.
	`em±y
()) {

524 
	`¥ötf
("empty breakaddrs stack");

525 
	`as£π
(0);

527 
›î™d_öfo
& 
bªakaddr
 = 
m_bªakaddrs
.
	`t›
();

528 
m_bªakaddrs
.
	`p›
();

529  
bªakaddr
;

530 
	}
}

532 
	g±x_thªad_öfo
::
	$£t_≈c
–c⁄° 
fun˘i⁄_öfo
 *
f
 )

534 
m_NPC
 = 
f
->
	`gë_°¨t_PC
();

535 
m_func_öfo
 = 
c⁄°_ˇ°
<
fun˘i⁄_öfo
*>–
f
 );

536 
m_symbﬁ_èbÀ
 = 
m_func_öfo
->
	`gë_symèb
();

537 
	}
}

540 
	$„©uª_nŸ_im∂emíãd
–c⁄° *
f
 )

542 
	`¥ötf
("GPGPU-Sim: fótuª '%s'ÇŸ suµ‹ãd\n", 
f
 );

543 
	`ab‹t
();

544 
	}
}

	@src/cuda-sim/ptx_sim.h

27 #i‚de‡
±x_sim_h_INCLUDED


28 
	#±x_sim_h_INCLUDED


	)

30 
	~<°dlib.h
>

32 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

33 
	~"../å1_hash_m≠.h
"

35 
	~<as£π.h
>

36 
	~"›codes.h
"

38 
	~<°rög
>

39 
	~<m≠
>

40 
	~<£t
>

41 
	~<li°
>

43 
	~"mem‹y.h
"

45 
	s∑øm_t
 {

46 c⁄° *
	mpd©a
;

47 
	mty≥
;

48 
size_t
 
	msize
;

49 
size_t
 
	moff£t
;

52 
	~<°ack
>

54 
	~"mem‹y.h
"

56 
	u±x_ªg_t
 {

57 
±x_ªg_t
() {

58 
	mbôs
.
	mms
 = 0;

59 
	mbôs
.
	mls
 = 0;

61 
±x_ªg_t
(
x
)

63 
	mbôs
.
	mms
 = 0;

64 
	mbôs
.
	mls
 = 0;

65 
	mu32
 = 
x
;

67 
›î©‹
 (Ë{  
	mu32
;}

68 
›î©‹
 (Ë{  
	mu16
;}

69 
›î©‹
 (Ë{  
	mu8
;}

70 
›î©‹
 (Ë{  
	mu64
;}

72 
mask_™d
–
ms
, 
ls
 )

74 
	mbôs
.
	mms
 &
ms
;

75 
	mbôs
.
	mls
 &
ls
;

78 
mask_‹
–
ms
, 
ls
 )

80 
	mbôs
.
	mms
 |
ms
;

81 
	mbôs
.
	mls
 |
ls
;

83 
gë_bô
–
bô
 )

85 i‡–
	mbô
 < 32 )

86 (
	mbôs
.
	mls
 >> 
	mbô
) & 1;

88 (
	mbôs
.
	mms
 >> (
	mbô
-32)) & 1;

91 sig√d 
	ms8
;

92 sig√d 
	ms16
;

93 sig√d 
	ms32
;

94 sig√d 
	ms64
;

95 
	mu8
;

96 
	mu16
;

97 
	mu32
;

98 
	mu64
;

99 
	mf16
;

100 
	mf32
;

101 
	mf64
;

103 
	mls
;

104 
	mms
;

105 } 
	mbôs
;

107 
	mlowe°
;

108 
	mlow
;

109 
	mhigh
;

110 
	mhighe°
;

111 } 
	mu128
;

112 
	m¥ed
 : 4;

116 
˛ass
 
	g±x_ö°ru˘i⁄
;

117 
˛ass
 
	g›î™d_öfo
;

118 
˛ass
 
	gsymbﬁ_èbÀ
;

119 
˛ass
 
	gfun˘i⁄_öfo
;

120 
˛ass
 
	g±x_thªad_öfo
;

122 ˛as†
	c±x_˘a_öfo
 {

123 
	mpublic
:

124 
±x_˘a_öfo
–
sm_idx
,
boﬁ
 
fun˘i⁄
 );

125 
add_thªad
–
±x_thªad_öfo
 *
thd
 );

126 
	$num_thªads
() const;

127 
	`check_˘a_thªad_°©us_™d_ª£t
();

128 
	`ªgi°î_thªad_exô
–
±x_thªad_öfo
 *
thd
 );

129 
	`ªgi°î_dñëed_thªad
–
±x_thªad_öfo
 *
thd
 );

130 
	$gë_sm_idx
() const;

132 
¥iv©e
:

133 
m_uid
;

134 
m_sm_idx
;

135 
°d
::
£t
<
±x_thªad_öfo
*> 
m_thªads_ö_˘a
;

136 
°d
::
£t
<
±x_thªad_öfo
*> 
m_thªads_th©_have_exôed
;

137 
°d
::
£t
<
±x_thªad_öfo
*> 
m_d™glög_poöãrs
;

140 
˛ass
 
symbﬁ
;

142 
	s°ack_íåy
 {

143 
	`°ack_íåy
() {

144 
m_symbﬁ_èbÀ
=
NULL
;

145 
m_func_öfo
=
NULL
;

146 
m_PC
=0;

147 
m_RPC
=-1;

148 
m_ªtu∫_v¨_§c
 = 
NULL
;

149 
m_ªtu∫_v¨_d°
 = 
NULL
;

150 
m_ˇŒ_uid
 = 0;

151 
m_vÆid
 = 
Ál£
;

153 
	`°ack_íåy
–
symbﬁ_èbÀ
 *
s
, 
fun˘i⁄_öfo
 *
f
, 
pc
, 
Ωc
, c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
, c⁄° symbﬁ *
ªtu∫_v¨_d°
, 
ˇŒ_uid
 )

155 
m_symbﬁ_èbÀ
=
s
;

156 
m_func_öfo
=
f
;

157 
m_PC
=
pc
;

158 
m_RPC
=
Ωc
;

159 
m_ªtu∫_v¨_§c
 = 
ªtu∫_v¨_§c
;

160 
m_ªtu∫_v¨_d°
 = 
ªtu∫_v¨_d°
;

161 
m_ˇŒ_uid
 = 
ˇŒ_uid
;

162 
m_vÆid
 = 
åue
;

165 
boﬁ
 
m_vÆid
;

166 
symbﬁ_èbÀ
 *
m_symbﬁ_èbÀ
;

167 
fun˘i⁄_öfo
 *
m_func_öfo
;

168 
m_PC
;

169 
m_RPC
;

170 c⁄° 
symbﬁ
 *
m_ªtu∫_v¨_§c
;

171 c⁄° 
symbﬁ
 *
m_ªtu∫_v¨_d°
;

172 
m_ˇŒ_uid
;

175 ˛as†
	c±x_vîsi⁄
 {

176 
public
:

177 
	$±x_vîsi⁄
()

179 
m_vÆid
 = 
Ál£
;

180 
m_±x_vîsi⁄
 = 0;

181 
m_±x_exãnsi⁄s
 = 0;

182 
m_sm_vîsi⁄_vÆid
=
Ál£
;

183 
m_ãxmode_unifõd
=
åue
;

184 
m_m≠_f64_to_f32
 = 
åue
;

186 
	$±x_vîsi⁄
(
vî
, 
exãnsi⁄s
)

188 
m_vÆid
 = 
åue
;

189 
m_±x_vîsi⁄
 = 
vî
;

190 
m_±x_exãnsi⁄s
 = 
exãnsi⁄s
;

191 
m_sm_vîsi⁄_vÆid
=
Ál£
;

192 
m_ãxmode_unifõd
=
åue
;

193 
	}
}

194 
	$£t_èrgë
–c⁄° *
sm_vî
, c⁄° *
ext
, c⁄° *
ext2
 )

196 
	`as£π
–
m_vÆid
 );

197 
m_sm_vîsi⁄_°r
 = 
sm_vî
;

198 
	`check_èrgë_exãnsi⁄
(
ext
);

199 
	`check_èrgë_exãnsi⁄
(
ext2
);

200 
	`ssˇnf
(
sm_vî
,"%u",&
m_sm_vîsi⁄
);

201 
m_sm_vîsi⁄_vÆid
=
åue
;

202 
	}
}

203 
	$vî
(Ëc⁄° { 
	`as£π
(
m_vÆid
);  
m_±x_vîsi⁄
; 
	}
}

204 
	$èrgë
(Ëc⁄° { 
	`as£π
(
m_vÆid
&&
m_sm_vîsi⁄_vÆid
);  
m_sm_vîsi⁄
; 
	}
}

205 
	$exãnsi⁄s
(Ëc⁄° { 
	`as£π
(
m_vÆid
);  
m_±x_exãnsi⁄s
; 
	}
}

206 
	g¥iv©e
:

207 
	$check_èrgë_exãnsi⁄
–c⁄° *
ext
 )

209 if–
ext
 ) {

210 if–!
	`°rcmp
(
ext
,"texmode_independent") )

211 
m_ãxmode_unifõd
=
Ál£
;

212 if–!
	`°rcmp
(
ext
,"texmode_unified") )

213 
m_ãxmode_unifõd
=
åue
;

214 if–!
	`°rcmp
(
ext
,"map_f64_to_f32") )

215 
m_m≠_f64_to_f32
 = 
åue
;

216 
	`ab‹t
();

218 
	}
}

220 
boﬁ
 
	gm_vÆid
;

221 
	gm_±x_vîsi⁄
;

222 
	gm_sm_vîsi⁄_vÆid
;

223 
	g°d
::
°rög
 
m_sm_vîsi⁄_°r
;

224 
boﬁ
 
	gm_ãxmode_unifõd
;

225 
boﬁ
 
	gm_m≠_f64_to_f32
;

226 
	gm_sm_vîsi⁄
;

227 
	gm_±x_exãnsi⁄s
;

230 ˛as†
	c±x_thªad_öfo
 {

231 
	mpublic
:

232 ~
±x_thªad_öfo
();

233 
±x_thªad_öfo
–
kî√l_öfo_t
 &
kî√l
 );

235 
	$öô
(
gpgpu_t
 *
gpu
, 
c‹e_t
 *
c‹e
, 
sid
, 
˘a_id
, 
wid
, 
tid
, 
boﬁ
 
fsim
)

237 
m_gpu
 = 
gpu
;

238 
m_c‹e
 = 
c‹e
;

239 
m_hw_sid
=
sid
;

240 
m_hw_˘aid
=
˘a_id
;

241 
m_hw_wid
=
wid
;

242 
m_hw_tid
=
tid
;

243 
m_fun˘i⁄ÆSimuœti⁄Mode
 = 
fsim
;

246 
	$±x_„tch_ö°
–
ö°_t
 &
ö°
 ) const;

247 
	`±x_exec_ö°
–
w¨p_ö°_t
 &
ö°
, 
œ√_id
 );

249 c⁄° 
±x_vîsi⁄
 &
	$gë_±x_vîsi⁄
() const;

250 
	`£t_ªg
–c⁄° 
symbﬁ
 *
ªg
, c⁄° 
±x_ªg_t
 &
vÆue
 );

251 
±x_ªg_t
 
	`gë_ªg
–c⁄° 
symbﬁ
 *
ªg
 );

252 
±x_ªg_t
 
	`gë_›î™d_vÆue
–c⁄° 
›î™d_öfo
 &
›
, o≥ønd_öfÿ
d°Info
, 
›Ty≥
, 
±x_thªad_öfo
 *
thªad
, 
dîefFœg
 );

253 
	`£t_›î™d_vÆue
–c⁄° 
›î™d_öfo
 &
d°
, c⁄° 
±x_ªg_t
 &
d©a
, 
ty≥
, 
±x_thªad_öfo
 *
thªad
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
 );

254 
	`£t_›î™d_vÆue
–c⁄° 
›î™d_öfo
 &
d°
, c⁄° 
±x_ªg_t
 &
d©a
, 
ty≥
, 
±x_thªad_öfo
 *
thªad
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
, 
ovîÊow
, 
ˇºy
 );

255 
	`gë_ve˘‹_›î™d_vÆues
–c⁄° 
›î™d_öfo
 &
›
, 
±x_ªg_t
* 
±x_ªgs
, 
num_ñemíts
 );

256 
	`£t_ve˘‹_›î™d_vÆues
–c⁄° 
›î™d_öfo
 &
d°
,

257 c⁄° 
±x_ªg_t
 &
d©a1
,

258 c⁄° 
±x_ªg_t
 &
d©a2
,

259 c⁄° 
±x_ªg_t
 &
d©a3
,

260 c⁄° 
±x_ªg_t
 &
d©a4
 );

262 
fun˘i⁄_öfo
 *
	$func_öfo
()

264  
m_func_öfo
;

265 
	}
}

266 
	$¥öt_ö¢
–
pc
, 
FILE
 * 
Â
 ) const;

267 
	`£t_öfo
–
fun˘i⁄_öfo
 *
func
 );

268 
	$gë_uid
() const

270  
m_uid
;

271 
	}
}

273 
dim3
 
	$gë_˘aid
(Ëc⁄° {  
m_˘aid
; 
	}
}

274 
dim3
 
	$gë_tid
(Ëc⁄° {  
m_tid
; 
	}
}

275 
˛ass
 
gpgpu_sim
 *
	$gë_gpu
(Ë{  (
gpgpu_sim
*)
m_gpu
;
	}
}

276 
	$gë_hw_tid
(Ëc⁄° {  
m_hw_tid
;
	}
}

277 
	$gë_hw_˘aid
(Ëc⁄° {  
m_hw_˘aid
;
	}
}

278 
	$gë_hw_wid
(Ëc⁄° {  
m_hw_wid
;
	}
}

279 
	$gë_hw_sid
(Ëc⁄° {  
m_hw_sid
;
	}
}

280 
c‹e_t
 *
	$gë_c‹e
(Ë{  
m_c‹e
; 
	}
}

282 
	$gë_icou¡
(Ëc⁄° {  
m_icou¡
;
	}
}

283 
	$£t_vÆid
(Ë{ 
m_vÆid
 = 
åue
;
	}
}

284 
addr_t
 
	$œ°_óddr
(Ëc⁄° {  
m_œ°_ef„˘ive_addªss
;
	}
}

285 
mem‹y_•a˚_t
 
	$œ°_•a˚
(Ëc⁄° {  
m_œ°_mem‹y_•a˚
;
	}
}

286 
døm_ˇŒback_t
 
	$œ°_ˇŒback
(Ëc⁄° {  
m_œ°_døm_ˇŒback
;
	}
}

287 
	$gë_˘a_uid
(Ë{  
m_˘a_öfo
->
	`gë_sm_idx
();
	}
}

289 
	$£t_sögÀ_thªad_sögÀ_block
()

291 
m_¡id
.
x
 = 1;

292 
m_¡id
.
y
 = 1;

293 
m_¡id
.
z
 = 1;

294 
m_˘aid
.
x
 = 0;

295 
m_˘aid
.
y
 = 0;

296 
m_˘aid
.
z
 = 0;

297 
m_tid
.
x
 = 0;

298 
m_tid
.
y
 = 0;

299 
m_tid
.
z
 = 0;

300 
m_n˘aid
.
x
 = 1;

301 
m_n˘aid
.
y
 = 1;

302 
m_n˘aid
.
z
 = 1;

303 
m_gridid
 = 0;

304 
m_vÆid
 = 
åue
;

305 
	}
}

309 
	$KAIN_gë_˘a_num
(
w¨p_size
,
pc
,*
BlockID
,*
W¨pID
){

310 
˘a_id
 = 
m_˘aid
.
x
 + m_˘aid.
y
 * 
m_n˘aid
.x + m_˘aid.
z
 * m_nctaid.x * m_nctaid.y;

311 
thªad_id
 = 
m_tid
.
x
 + 
m_¡id
.x*m_tid.
y
 + m_¡id.x*m_¡id.y*m_tid.
z
;

312 *
BlockID
 = 
˘a_id
;

313 *
W¨pID
 = 
thªad_id
/
w¨p_size
;

315 
	}
}

317 
	$£t_ThªadID_kaö
(
ID
)

319 
ThªadId_KAIN
 = 
ID
;

320 
	}
}

321 
	$gë_ThªadID_kaö
()

323  
ThªadId_KAIN
;

324 
	}
}

326 
	$£t_tid
–
dim3
 
tid
 ) { 
m_tid
 =Åid; 
	}
}

327 
˝y_tid_to_ªg
–
dim3
 
tid
 );

328 
	$£t_˘aid
–
dim3
 
˘aid
 ) { 
m_˘aid
 = cèid; 
	}
}

329 
	$£t_¡id
–
dim3
 
tid
 ) { 
m_¡id
 =Åid; 
	}
}

330 
	$£t_n˘aid
–
dim3
 
˘a_size
 ) { 
m_n˘aid
 = cè_size; 
	}
}

332 
gë_buûtö
–
buûtö_id
, 
dim_mod
 );

334 
£t_d⁄e
();

335 
boﬁ
 
	$is_d⁄e
(Ë{  
m_thªad_d⁄e
;
	}
}

336 
	$d⁄ecy˛e
(Ëc⁄° {  
m_cy˛e_d⁄e
; 
	}
}

338 
	$√xt_ö°r
()

340 
m_icou¡
++;

341 
m_bønch_èkí
 = 
Ál£
;

342  
m_PC
;

343 
	}
}

344 
boﬁ
 
	$bønch_èkí
() const

346  
m_bønch_èkí
;

347 
	}
}

348 
	$gë_pc
() const

350  
m_PC
;

351 
	}
}

352 
	$£t_≈c
–
≈c
 )

354 
m_NPC
 = 
≈c
;

355 
	}
}

356 
£t_≈c
–c⁄° 
fun˘i⁄_öfo
 *
f
 );

357 
ˇŒ°ack_push
–
≈c
, 
Ωc
, c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
, c⁄° symbﬁ *
ªtu∫_v¨_d°
, 
ˇŒ_uid
 );

358 
boﬁ
 
ˇŒ°ack_p›
();

359 
ˇŒ°ack_push_∂us
–
≈c
, 
Ωc
, c⁄° 
symbﬁ
 *
ªtu∫_v¨_§c
, c⁄° symbﬁ *
ªtu∫_v¨_d°
, 
ˇŒ_uid
 );

360 
boﬁ
 
ˇŒ°ack_p›_∂us
();

361 
	$dump_ˇŒ°ack
() const;

362 
°d
::
°rög
 
	$gë_loˇti⁄
() const;

363 c⁄° 
±x_ö°ru˘i⁄
 *
	$gë_ö°
() const;

364 c⁄° 
±x_ö°ru˘i⁄
 *
	$gë_ö°
–
addr_t
 
pc
 ) const;

365 
boﬁ
 
	$Ωc_upd©ed
(Ëc⁄° {  
m_RPC_upd©ed
; 
	}
}

366 
boﬁ
 
	$œ°_was_ˇŒ
(Ëc⁄° {  
m_œ°_was_ˇŒ
; 
	}
}

367 
	$gë_Ωc
(Ëc⁄° {  
m_RPC
; 
	}
}

368 
	$˛órRPC
()

370 
m_RPC
 = -1;

371 
m_RPC_upd©ed
 = 
Ál£
;

372 
m_œ°_was_ˇŒ
 = 
Ál£
;

373 
	}
}

374 
	$gë_ªtu∫_PC
()

376  
m_ˇŒ°ack
.
	`back
().
m_PC
;

377 
	}
}

378 
	$upd©e_pc
( )

380 
m_PC
 = 
m_NPC
;

381 
	}
}

382 
dump_ªgs
(
FILE
 * 
Â
);

383 
dump_modifõdªgs
(
FILE
 *
Â
);

384 
	$˛ór_modifõdªgs
(Ë{ 
m_debug_åa˚_ªgs_modifõd
.
	`back
().
	`˛ór
(); 
m_debug_åa˚_ªgs_ªad
.back().˛ór(); 
	}
}

385 
fun˘i⁄_öfo
 *
	$gë_föfo
(Ë{  
m_func_öfo
; 
	}
}

386 c⁄° 
fun˘i⁄_öfo
 *
	$gë_föfo
(Ëc⁄° {  
m_func_öfo
; 
	}
}

387 
push_bªakaddr
(c⁄° 
›î™d_öfo
 &
bªakaddr
);

388 c⁄° 
	g›î™d_öfo
& 
p›_bªakaddr
();

389 
	$íabÀ_debug_åa˚
(Ë{ 
m_íabÀ_debug_åa˚
 = 
åue
; 
	}
}

390 
	$gë_loˇl_mem_°ack_poöãr
(Ëc⁄° {  
m_loˇl_mem_°ack_poöãr
; 
	}
}

392 
mem‹y_•a˚
 *
	$gë_globÆ_mem‹y
(Ë{  
m_gpu
->
	`gë_globÆ_mem‹y
(); 
	}
}

393 
mem‹y_•a˚
 *
	$gë_ãx_mem‹y
(Ë{  
m_gpu
->
	`gë_ãx_mem‹y
(); 
	}
}

394 
mem‹y_•a˚
 *
	$gë_surf_mem‹y
(Ë{  
m_gpu
->
	`gë_surf_mem‹y
(); 
	}
}

395 
mem‹y_•a˚
 *
	$gë_∑øm_mem‹y
(Ë{  
m_kî√l
.
	`gë_∑øm_mem‹y
(); 
	}
}

396 c⁄° 
	ggpgpu_fun˘i⁄Æ_sim_c⁄fig
 &
	$gë_c⁄fig
(Ëc⁄° {  
m_gpu
->
	`gë_c⁄fig
(); 
	}
}

397 
boﬁ
 
	$isInFun˘i⁄ÆSimuœti⁄Mode
(){  
m_fun˘i⁄ÆSimuœti⁄Mode
;
	}
}

398 
	$exôC‹e
()

401 if(!
m_fun˘i⁄ÆSimuœti⁄Mode
)

402 
m_c‹e
->
	`w¨p_exô
(
m_hw_wid
);

403 
	}
}

405 
	$ªgi°îExô
(){
m_˘a_öfo
->
	`ªgi°î_thªad_exô
(
this
);
	}
}

407 
	gpublic
:

408 
addr_t
 
m_œ°_ef„˘ive_addªss
;

409 
boﬁ
 
	gm_bønch_èkí
;

410 
mem‹y_•a˚_t
 
	gm_œ°_mem‹y_•a˚
;

411 
døm_ˇŒback_t
 
	gm_œ°_døm_ˇŒback
;

412 
mem‹y_•a˚
 *
	gm_sh¨ed_mem
;

413 
mem‹y_•a˚
 *
	gm_loˇl_mem
;

414 
±x_˘a_öfo
 *
	gm_˘a_öfo
;

415 
±x_ªg_t
 
	gm_œ°_£t_›î™d_vÆue
;

417 
	g¥iv©e
:

418 
ThªadId_KAIN
;

420 
boﬁ
 
	gm_fun˘i⁄ÆSimuœti⁄Mode
;

421 
	gm_uid
;

422 
	gkî√l_öfo_t
 &
	gm_kî√l
;

423 
c‹e_t
 *
	gm_c‹e
;

424 
gpgpu_t
 *
	gm_gpu
;

425 
boﬁ
 
	gm_vÆid
;

426 
dim3
 
	gm_¡id
;

427 
dim3
 
	gm_tid
;

428 
dim3
 
	gm_n˘aid
;

429 
dim3
 
	gm_˘aid
;

430 
	gm_gridid
;

431 
boﬁ
 
	gm_thªad_d⁄e
;

432 
	gm_hw_sid
;

433 
	gm_hw_tid
;

434 
	gm_hw_wid
;

435 
	gm_hw_˘aid
;

437 
	gm_icou¡
;

438 
	gm_PC
;

439 
	gm_NPC
;

440 
	gm_RPC
;

441 
boﬁ
 
	gm_RPC_upd©ed
;

442 
boﬁ
 
	gm_œ°_was_ˇŒ
;

443 
	gm_cy˛e_d⁄e
;

445 
	gm_b¨rõr_num
;

446 
boﬁ
 
	gm_©_b¨rõr
;

448 
symbﬁ_èbÀ
 *
	gm_symbﬁ_èbÀ
;

449 
fun˘i⁄_öfo
 *
	gm_func_öfo
;

451 
	g°d
::
li°
<
°ack_íåy
> 
m_ˇŒ°ack
;

452 
	gm_loˇl_mem_°ack_poöãr
;

454 
	gå1_hash_m≠
<c⁄° 
	tsymbﬁ
*,
	t±x_ªg_t
> 
	tªg_m≠_t
;

455 
	g°d
::
li°
<
ªg_m≠_t
> 
m_ªgs
;

456 
	g°d
::
li°
<
ªg_m≠_t
> 
m_debug_åa˚_ªgs_modifõd
;

457 
	g°d
::
li°
<
ªg_m≠_t
> 
m_debug_åa˚_ªgs_ªad
;

458 
boﬁ
 
	gm_íabÀ_debug_åa˚
;

460 
	g°d
::
°ack
<
˛ass
 
›î™d_öfo
> 
m_bªakaddrs
;

463 
addr_t
 
gíîic_to_loˇl
–
smid
, 
hwtid
,áddr_à
addr
 );

464 
addr_t
 
gíîic_to_sh¨ed
–
smid
,áddr_à
addr
 );

465 
addr_t
 
gíîic_to_globÆ
–addr_à
addr
 );

466 
addr_t
 
loˇl_to_gíîic
–
smid
, 
hwtid
,áddr_à
addr
 );

467 
addr_t
 
sh¨ed_to_gíîic
–
smid
,áddr_à
addr
 );

468 
addr_t
 
globÆ_to_gíîic
–addr_à
addr
 );

469 
boﬁ
 
is•a˚_loˇl
–
smid
, 
hwtid
, 
addr_t
 
addr
 );

470 
boﬁ
 
is•a˚_sh¨ed
–
smid
, 
addr_t
 
addr
 );

471 
boﬁ
 
is•a˚_globÆ
–
addr_t
 
addr
 );

472 
mem‹y_•a˚_t
 
which•a˚
–
addr_t
 
addr
 );

474 
g_±x_thªad_öfo_uid_√xt
;

	@src/cuda-sim/ptxinfo.l

31 %
›ti⁄
 
noyywøp


32 %
›ti⁄
 
yylöío


33 %
›ti⁄
 
¥efix
="ptxinfo_"

35 
	~"±xöfo.èb.h
"

36 
	~<°rög.h
>

38 
	#LINEBUF_SIZE
 1024

	)

39 
	g±xöfo_löebuf
[
LINEBUF_SIZE
];

40 
	g±xöfo_cﬁ
 = 0;

41 
	#TC
 if–(
±xöfo_löío
 =1Ë&& ((
±xöfo_cﬁ
 + 
	`°æí
(
±xöfo_ãxt
)Ë< 
LINEBUF_SIZE
ËË{ \

	)

42 
°∫˝y
(
±xöfo_löebuf
+
±xöfo_cﬁ
,
±xöfo_ãxt
,
°æí
(ptxinfo_text)); \

44 
	g±xöfo_cﬁ
+=
°æí
(
±xöfo_ãxt
);

47 %% /* 
	$yyÀx
 */

48 "±xa†öfÿ : Fun˘i⁄Ör›îtõ†f‹"[^\
n
]*\n[^\n]*

49 "w¨nög"[^\
n
]* 
TC
;  
WARNING
;

50 "±xas" 
TC
;  
HEADER
;

51 "öfo" 
TC
;  
INFO
;

52 "CompûögÉ¡ry fun˘i⁄" 
TC
;  
FUNC
;

53 "U£d" 
TC
;  
USED
;

54 "ªgi°îs" 
TC
;  
REGS
;

55 "byãs" 
TC
;  
BYTES
;

56 "lmem" 
TC
;  
LMEM
;

57 "smem" 
TC
;  
SMEM
;

58 "cmem" 
TC
;  
CMEM
;

59 "löe" 
TC
;  
LINE
;

60 "f‹" 
TC
;  
FOR
;

62 [
_A
-
Za
-
z$
%][
_0
-9A-Za-z$]* 
TC
; 
±xöfo_lvÆ
.
°rög_vÆue
 = 
	`°rdup
(
yyãxt
);  
IDENTIFIER
;

63 [-]{0,1}[0-9]+ 
TC
; 
±xöfo_lvÆ
.
öt_vÆue
 = 
	`©oi
(
yyãxt
);  
INT_OPERAND
;

65 "+" 
TC
;  
PLUS
;

66 "," 
TC
;  
COMMA
;

67 "[" 
TC
;  
LEFT_SQUARE_BRACKET
;

68 "]" 
TC
;  
RIGHT_SQUARE_BRACKET
;

69 ":" 
TC
;  
COLON
;

70 ";" 
TC
;  
SEMICOLON
;

71 "'" 
TC
;  
QUOTE
;

72 " " 
TC
;

73 "\t" 
TC
;

75 \
n
.* 
±xöfo_cﬁ
=0; 
	`°∫˝y
(
±xöfo_löebuf
, 
yyãxt
 + 1, 1024); 
	`yyÀss
( 1 );

77 
	}
%%

79 
g_±xöfo_îr‹_dëe˘ed
;

80 c⁄° *
g_fûíame
;

81 c⁄° *
g_±xöfo_fûíame
;

83 
	$±xöfo_îr‹
–c⁄° *
s
 )

85 
i
;

86 
g_±xöfo_îr‹_dëe˘ed
 = 1;

87 
	`fÊush
(
°dout
);

88 
	`¥ötf
("GPGPU-Sim: ERROR whileÖarsing output ofÖtxas (usedÅo captureÑesource usage information)\n");

89 if–
s
 !
NULL
 )

90 
	`¥ötf
("GPGPU-Sim: %†(%s:%uËSy¡axÉº‹:\n\n", 
g_fûíame
, 
g_±xöfo_fûíame
, 
±xöfo_löío
 );

91 
	`¥ötf
(" %s\n", 
±xöfo_löebuf
 );

92 
	`¥ötf
(" ");

93  
i
=0; i < 
±xöfo_cﬁ
-1; i++ ) {

94 if–
±xöfo_löebuf
[
i
] ='\t' ) 
	`¥ötf
("\t");

95 
	`¥ötf
(" ");

98 
	`¥ötf
("^\n\n");

99 
	`fÊush
(
°dout
);

100 
	`exô
(43);

102 
	}
}

	@src/cuda-sim/ptxinfo.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
±xöfo_∑r£


	)

68 
	#yyÀx
 
±xöfo_Àx


	)

69 
	#yyîr‹
 
±xöfo_îr‹


	)

70 
	#yylvÆ
 
±xöfo_lvÆ


	)

71 
	#yych¨
 
±xöfo_ch¨


	)

72 
	#yydebug
 
±xöfo_debug


	)

73 
	#yy√ºs
 
±xöfo_√ºs


	)

83 #i‚de‡
YYDEBUG


84 
	#YYDEBUG
 0

	)

88 #ifde‡
YYERROR_VERBOSE


89 #unde‡
YYERROR_VERBOSE


90 
	#YYERROR_VERBOSE
 1

	)

92 
	#YYERROR_VERBOSE
 0

	)

96 #i‚de‡
YYTOKEN_TABLE


97 
	#YYTOKEN_TABLE
 0

	)

102 #i‚de‡
YYTOKENTYPE


103 
	#YYTOKENTYPE


	)

106 
	eyytokíty≥
 {

107 
	mINT_OPERAND
 = 258,

108 
	mHEADER
 = 259,

109 
	mINFO
 = 260,

110 
	mFUNC
 = 261,

111 
	mUSED
 = 262,

112 
	mREGS
 = 263,

113 
	mBYTES
 = 264,

114 
	mLMEM
 = 265,

115 
	mSMEM
 = 266,

116 
	mCMEM
 = 267,

117 
	mIDENTIFIER
 = 268,

118 
	mPLUS
 = 269,

119 
	mCOMMA
 = 270,

120 
	mLEFT_SQUARE_BRACKET
 = 271,

121 
	mRIGHT_SQUARE_BRACKET
 = 272,

122 
	mCOLON
 = 273,

123 
	mSEMICOLON
 = 274,

124 
	mQUOTE
 = 275,

125 
	mLINE
 = 276,

126 
	mWARNING
 = 277,

127 
	mFOR
 = 278

133 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


134 
	uYYSTYPE


140 
	möt_vÆue
;

141 * 
	m°rög_vÆue
;

147 } 
	tYYSTYPE
;

148 
	#YYSTYPE_IS_TRIVIAL
 1

	)

149 
	#yy°y≥
 
YYSTYPE


	)

150 
	#YYSTYPE_IS_DECLARED
 1

	)

159 
	~<°dlib.h
>

160 
	~<°rög.h
>

162 
	gg_de˛¨ed
;

163 
	gg_sy°em
;

164 
±xöfo_Àx
();

165 
±xöfo_addöfo
();

166 
±xöfo_fun˘i⁄
(c⁄° *
‚ame
 );

167 
±xöfo_ªgs
–
ƒegs
 );

168 
±xöfo_lmem
–
de˛¨ed
, 
sy°em
 );

169 
±xöfo_smem
–
de˛¨ed
, 
sy°em
 );

170 
±xöfo_cmem
–
nbyãs
, 
b™k
 );

171 
±xöfo_îr‹
(const *);

181 #ifde‡
YYTYPE_UINT8


182 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

184 
	tyyty≥_uöt8
;

187 #ifde‡
YYTYPE_INT8


188 
YYTYPE_INT8
 
	tyyty≥_öt8
;

189 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

190 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

191 sig√d 
	tyyty≥_öt8
;

193 
	tyyty≥_öt8
;

196 #ifde‡
YYTYPE_UINT16


197 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

199 
	tyyty≥_uöt16
;

202 #ifde‡
YYTYPE_INT16


203 
YYTYPE_INT16
 
	tyyty≥_öt16
;

205 
	tyyty≥_öt16
;

208 #i‚de‡
YYSIZE_T


209 #ifde‡
__SIZE_TYPE__


210 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

211 #ñi‡
deföed
 
size_t


212 
	#YYSIZE_T
 
size_t


	)

213 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

214 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

215 
	~<°ddef.h
>

216 
	#YYSIZE_T
 
size_t


	)

218 
	#YYSIZE_T
 

	)

222 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

224 #i‚de‡
YY_


225 #i‡
YYENABLE_NLS


226 #i‡
ENABLE_NLS


227 
	~<liböé.h
>

228 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

231 #i‚de‡
YY_


232 
	#YY_
(
msgid
Ë
	)
msgid

237 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


238 
	#YYUSE
(
e
Ë((Ë”))

	)

240 
	#YYUSE
(
e
Ë

	)

244 #i‚de‡
löt


245 
	#YYID
(
n
Ë“)

	)

247 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

248 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

250 
	$YYID
 (
yyi
)

253 
	$YYID
 (
yyi
)

254 
yyi
;

257  
yyi
;

258 
	}
}

261 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


265 #ifde‡
YYSTACK_USE_ALLOCA


266 #i‡
YYSTACK_USE_ALLOCA


267 #ifde‡
__GNUC__


268 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

269 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


270 
	~<Æloˇ.h
>

271 #ñi‡
deföed
 
_AIX


272 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

273 #ñi‡
deföed
 
_MSC_VER


274 
	~<mÆloc.h
>

275 
	#Æloˇ
 
_Æloˇ


	)

277 
	#YYSTACK_ALLOC
 
Æloˇ


	)

278 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

279 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

280 
	~<°dlib.h
>

281 #i‚de‡
_STDLIB_H


282 
	#_STDLIB_H
 1

	)

289 #ifde‡
YYSTACK_ALLOC


291 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

292 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


297 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

300 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

301 
	#YYSTACK_FREE
 
YYFREE


	)

302 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


303 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

305 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

306 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

307 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

308 
	~<°dlib.h
>

309 #i‚de‡
_STDLIB_H


310 
	#_STDLIB_H
 1

	)

313 #i‚de‡
YYMALLOC


314 
	#YYMALLOC
 
mÆloc


	)

315 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

316 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

317 *
mÆloc
 (
YYSIZE_T
);

320 #i‚de‡
YYFREE


321 
	#YYFREE
 
‰ì


	)

322 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

323 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

324 
‰ì
 (*);

331 #i‡(! 
deföed
 
yyovîÊow
 \

332 && (! 
deföed
 
	g__˝lu•lus
 \

333 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

336 
	uyyÆloc


338 
yyty≥_öt16
 
	myyss_Æloc
;

339 
YYSTYPE
 
	myyvs_Æloc
;

343 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

347 
	#YYSTACK_BYTES
(
N
) \

348 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

349 + 
YYSTACK_GAP_MAXIMUM
)

	)

353 #i‚de‡
YYCOPY


354 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

355 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

356 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

358 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

361 
YYSIZE_T
 
yyi
; \

362 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

363 (
To
)[
yyi
] = (
From
)[yyi]; \

365 
	`YYID
 (0))

	)

374 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

377 
YYSIZE_T
 
yy√wbyãs
; \

378 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

379 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

380 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

381 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

383 
	`YYID
 (0))

	)

388 
	#YYFINAL
 2

	)

390 
	#YYLAST
 49

	)

393 
	#YYNTOKENS
 24

	)

395 
	#YYNNTS
 8

	)

397 
	#YYNRULES
 20

	)

399 
	#YYNSTATES
 45

	)

402 
	#YYUNDEFTOK
 2

	)

403 
	#YYMAXUTOK
 278

	)

405 
	#YYTRANSLATE
(
YYX
) \

406 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

409 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

441 #i‡
YYDEBUG


444 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

452 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

466 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

474 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


477 c⁄° *c⁄° 
	gyyäame
[] =

487 #ifde‡
YYPRINT


490 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

499 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

507 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

517 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

527 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

534 
	#YYPACT_NINF
 -16

	)

535 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

545 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

554 
	#YYTABLE_NINF
 -1

	)

555 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

564 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

575 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

584 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

585 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

586 
	#YYEMPTY
 (-2)

	)

587 
	#YYEOF
 0

	)

589 
	#YYACCEPT
 
yyac˚±œb


	)

590 
	#YYABORT
 
yyab‹éab


	)

591 
	#YYERROR
 
yyîr‹œb


	)

598 
	#YYFAIL
 
yyîæab


	)

600 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

602 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

604 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

606 
yych¨
 = (
Tokí
); \

607 
yylvÆ
 = (
VÆue
); \

608 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

609 
	`YYPOPSTACK
 (1); \

610 
yybackup
; \

614 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

615 
YYERROR
; \

617 
	`YYID
 (0))

	)

620 
	#YYTERROR
 1

	)

621 
	#YYERRCODE
 256

	)

628 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

629 #i‚de‡
YYLLOC_DEFAULT


630 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

632 i‡(
	`YYID
 (
N
)) \

634 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

635 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

636 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

637 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

641 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

642 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

643 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

644 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

646 
	`YYID
 (0))

	)

654 #i‚de‡
YY_LOCATION_PRINT


655 #i‡
YYLTYPE_IS_TRIVIAL


656 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

657 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

658 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

659 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

661 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

668 #ifde‡
YYLEX_PARAM


669 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

671 
	#YYLEX
 
	`yyÀx
 ()

	)

675 #i‡
YYDEBUG


677 #i‚de‡
YYFPRINTF


678 
	~<°dio.h
>

679 
	#YYFPRINTF
 
Ârötf


	)

682 
	#YYDPRINTF
(
Args
) \

684 i‡(
yydebug
) \

685 
YYFPRINTF
 
Args
; \

686 } 
	`YYID
 (0))

	)

688 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

690 i‡(
yydebug
) \

692 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

693 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

694 
Ty≥
, 
VÆue
); \

695 
	`YYFPRINTF
 (
°dîr
, "\n"); \

697 } 
	`YYID
 (0))

	)

705 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

706 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

708 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

711 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

712 
FILE
 *
yyouçut
;

713 
yyty≥
;

714 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

717 i‡(!
yyvÆuï
)

719 #ifde‡
YYPRINT


720 i‡(
yyty≥
 < 
YYNTOKENS
)

721 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

723 
	`YYUSE
 (
yyouçut
);

725 
yyty≥
)

730 
	}
}

737 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

738 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

740 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

743 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

744 
FILE
 *
yyouçut
;

745 
yyty≥
;

746 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

749 i‡(
yyty≥
 < 
YYNTOKENS
)

750 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

752 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

754 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

755 
	`YYFPRINTF
 (
yyouçut
, ")");

756 
	}
}

763 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

764 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

766 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

769 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

770 
yyty≥_öt16
 *
yybŸtom
;

771 
yyty≥_öt16
 *
yyt›
;

774 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

775 ; 
yybŸtom
 <
yyt›
; yybottom++)

777 
yybŸ
 = *
yybŸtom
;

778 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

780 
	`YYFPRINTF
 (
°dîr
, "\n");

781 
	}
}

783 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

785 i‡(
yydebug
) \

786 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

787 } 
	`YYID
 (0))

	)

794 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

795 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

797 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

800 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

801 
YYSTYPE
 *
yyv•
;

802 
yyruÀ
;

805 
yyƒhs
 = 
yyr2
[
yyruÀ
];

806 
yyi
;

807 
yy o
 = 
yyæöe
[
yyruÀ
];

808 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

809 
yyruÀ
 - 1, 
yy o
);

811 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

813 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

814 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

815 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

817 
	`YYFPRINTF
 (
°dîr
, "\n");

819 
	}
}

821 
	#YY_REDUCE_PRINT
(
RuÀ
) \

823 i‡(
yydebug
) \

824 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

825 } 
	`YYID
 (0))

	)

829 
	gyydebug
;

831 
	#YYDPRINTF
(
Args
)

	)

832 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

833 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

834 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

839 #i‚def 
YYINITDEPTH


840 
	#YYINITDEPTH
 200

	)

850 #i‚de‡
YYMAXDEPTH


851 
	#YYMAXDEPTH
 10000

	)

856 #i‡
YYERROR_VERBOSE


858 #i‚de‡
yy°æí


859 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


860 
	#yy°æí
 
°æí


	)

863 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

864 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

865 
YYSIZE_T


866 
	$yy°æí
 (c⁄° *
yy°r
)

868 
YYSIZE_T


869 
	$yy°æí
 (
yy°r
)

870 c⁄° *
yy°r
;

873 
YYSIZE_T
 
yyÀn
;

874 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

876  
yyÀn
;

877 
	}
}

881 #i‚de‡
yy°p˝y


882 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


883 
	#yy°p˝y
 
°p˝y


	)

887 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

888 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

890 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

893 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

894 *
yyde°
;

895 c⁄° *
yy§c
;

898 *
yyd
 = 
yyde°
;

899 c⁄° *
yys
 = 
yy§c
;

901 (*
yyd
++ = *
yys
++) != '\0')

904  
yyd
 - 1;

905 
	}
}

909 #i‚de‡
yyäamîr


917 
YYSIZE_T


918 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

920 i‡(*
yy°r
 == '"')

922 
YYSIZE_T
 
yyn
 = 0;

923 c⁄° *
yyp
 = 
yy°r
;

926 *++
yyp
)

930 
do_nŸ_°rù_quŸes
;

933 i‡(*++
yyp
 != '\\')

934 
do_nŸ_°rù_quŸes
;

937 i‡(
yyªs
)

938 
yyªs
[
yyn
] = *
yyp
;

939 
yyn
++;

943 i‡(
yyªs
)

944 
yyªs
[
yyn
] = '\0';

945  
yyn
;

947 
do_nŸ_°rù_quŸes
: ;

950 i‡(! 
yyªs
)

951  
	`yy°æí
 (
yy°r
);

953  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

954 
	}
}

964 
YYSIZE_T


965 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

967 
yyn
 = 
yy∑˘
[
yy°©e
];

969 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

973 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

974 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

975 
YYSIZE_T
 
yysize
 = 
yysize0
;

976 
YYSIZE_T
 
yysize1
;

977 
yysize_ovîÊow
 = 0;

978 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

979 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

980 
yyx
;

985 
	`YY_
("syntaxÉrror, unexpected %s");

986 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

987 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

988 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

989 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

991 *
yyfmt
;

992 c⁄° *
yyf
;

993 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

994 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

995 c⁄° 
yy‹
[] = " or %s";

996 
yyf‹m©
[ 
yyu√x≥˘ed


997 +  
yyex≥˘ög
 - 1

998 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

999 * ( 
yy‹
 - 1))];

1000 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1004 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1007 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1008 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1009 
yycou¡
 = 1;

1011 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1012 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1014 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1015 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1017 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1019 
yycou¡
 = 1;

1020 
yysize
 = 
yysize0
;

1021 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1024 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1025 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1026 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1027 
yysize
 = 
yysize1
;

1028 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1029 
yy¥efix
 = 
yy‹
;

1032 
yyf
 = 
	`YY_
(
yyf‹m©
);

1033 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1034 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1035 
yysize
 = 
yysize1
;

1037 i‡(
yysize_ovîÊow
)

1038  
YYSIZE_MAXIMUM
;

1040 i‡(
yyªsu…
)

1045 *
yyp
 = 
yyªsu…
;

1046 
yyi
 = 0;

1047 (*
yyp
 = *
yyf
) != '\0')

1049 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1051 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1052 
yyf
 += 2;

1056 
yyp
++;

1057 
yyf
++;

1061  
yysize
;

1063 
	}
}

1072 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1073 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1075 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1078 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1079 c⁄° *
yymsg
;

1080 
yyty≥
;

1081 
YYSTYPE
 *
yyvÆuï
;

1084 
	`YYUSE
 (
yyvÆuï
);

1086 i‡(!
yymsg
)

1087 
yymsg
 = "Deleting";

1088 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1090 
yyty≥
)

1096 
	}
}

1099 #ifde‡
YYPARSE_PARAM


1100 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1101 
yy∑r£
 (*
YYPARSE_PARAM
);

1103 
yy∑r£
 ();

1106 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1107 
yy∑r£
 ();

1109 
yy∑r£
 ();

1115 
	gyych¨
;

1118 
YYSTYPE
 
	gyylvÆ
;

1121 
	gyy√ºs
;

1129 #ifde‡
YYPARSE_PARAM


1130 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1131 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1133 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1136 
	$yy∑r£
 (
YYPARSE_PARAM
)

1137 *
YYPARSE_PARAM
;

1140 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1141 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1143 
	$yy∑r£
 ()

1146 
	$yy∑r£
 ()

1153 
yy°©e
;

1155 
yyîr°©us
;

1165 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1166 
yyty≥_öt16
 *
yyss
;

1167 
yyty≥_öt16
 *
yys•
;

1170 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1171 
YYSTYPE
 *
yyvs
;

1172 
YYSTYPE
 *
yyv•
;

1174 
YYSIZE_T
 
yy°acksize
;

1176 
yyn
;

1177 
yyªsu…
;

1179 
yytokí
;

1182 
YYSTYPE
 
yyvÆ
;

1184 #i‡
YYERROR_VERBOSE


1186 
yymsgbuf
[128];

1187 *
yymsg
 = 
yymsgbuf
;

1188 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1191 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1195 
yyÀn
 = 0;

1197 
yytokí
 = 0;

1198 
yyss
 = 
yysß
;

1199 
yyvs
 = 
yyvß
;

1200 
yy°acksize
 = 
YYINITDEPTH
;

1202 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1204 
yy°©e
 = 0;

1205 
yyîr°©us
 = 0;

1206 
yy√ºs
 = 0;

1207 
yych¨
 = 
YYEMPTY
;

1213 
yys•
 = 
yyss
;

1214 
yyv•
 = 
yyvs
;

1216 
yy£t°©e
;

1221 
yy√w°©e
:

1224 
yys•
++;

1226 
yy£t°©e
:

1227 *
yys•
 = 
yy°©e
;

1229 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1232 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1234 #ifde‡
yyovîÊow


1239 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1240 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1246 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1247 &
yyss1
, 
yysize
 *  (*
yys•
),

1248 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1249 &
yy°acksize
);

1251 
yyss
 = 
yyss1
;

1252 
yyvs
 = 
yyvs1
;

1255 #i‚de‡
YYSTACK_RELOCATE


1256 
yyexhau°edœb
;

1259 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1260 
yyexhau°edœb
;

1261 
yy°acksize
 *= 2;

1262 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1263 
yy°acksize
 = 
YYMAXDEPTH
;

1266 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1267 
yyÆloc
 *
yy±r
 =

1268 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1269 i‡(! 
yy±r
)

1270 
yyexhau°edœb
;

1271 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1272 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1273 #unde‡
YYSTACK_RELOCATE


1274 i‡(
yyss1
 !
yysß
)

1275 
	`YYSTACK_FREE
 (
yyss1
);

1280 
yys•
 = 
yyss
 + 
yysize
 - 1;

1281 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1283 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1284 (Ë
yy°acksize
));

1286 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1287 
YYABORT
;

1290 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1292 i‡(
yy°©e
 =
YYFINAL
)

1293 
YYACCEPT
;

1295 
yybackup
;

1300 
yybackup
:

1306 
yyn
 = 
yy∑˘
[
yy°©e
];

1307 i‡(
yyn
 =
YYPACT_NINF
)

1308 
yydeÁu…
;

1313 i‡(
yych¨
 =
YYEMPTY
)

1315 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1316 
yych¨
 = 
YYLEX
;

1319 i‡(
yych¨
 <
YYEOF
)

1321 
yych¨
 = 
yytokí
 = 
YYEOF
;

1322 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1326 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1327 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1332 
yyn
 +
yytokí
;

1333 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1334 
yydeÁu…
;

1335 
yyn
 = 
yyèbÀ
[yyn];

1336 i‡(
yyn
 <= 0)

1338 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1339 
yyîæab
;

1340 
yyn
 = -yyn;

1341 
yyªdu˚
;

1346 i‡(
yyîr°©us
)

1347 
yyîr°©us
--;

1350 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1353 
yych¨
 = 
YYEMPTY
;

1355 
yy°©e
 = 
yyn
;

1356 *++
yyv•
 = 
yylvÆ
;

1358 
yy√w°©e
;

1364 
yydeÁu…
:

1365 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1366 i‡(
yyn
 == 0)

1367 
yyîæab
;

1368 
yyªdu˚
;

1374 
yyªdu˚
:

1376 
yyÀn
 = 
yyr2
[
yyn
];

1386 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1389 
	`YY_REDUCE_PRINT
 (
yyn
);

1390 
yyn
)

1396 { 
	`±xöfo_addöfo
(); ;}

1403 { 
	`±xöfo_fun˘i⁄
((
yyv•
[(3Ë- (4)].
°rög_vÆue
)); ;}

1410 { 
	`±xöfo_fun˘i⁄
((
yyv•
[(3Ë- (8)].
°rög_vÆue
)); ;}

1417 { 
	`±xöfo_ªgs
((
yyv•
[(2Ë- (3)].
öt_vÆue
)); ;}

1424 { 
	`±xöfo_lmem
(
g_de˛¨ed
,
g_sy°em
); ;}

1431 { 
	`±xöfo_smem
(
g_de˛¨ed
,
g_sy°em
); ;}

1438 { 
	`±xöfo_cmem
((
yyv•
[(1Ë- (6)].
öt_vÆue
),(yyvsp[(5) - (6)].int_value)); ;}

1445 { 
	`±xöfo_lmem
((
yyv•
[(1Ë- (3)].
öt_vÆue
),0); ;}

1452 { 
	`±xöfo_smem
((
yyv•
[(1Ë- (3)].
öt_vÆue
),0); ;}

1459 { 
	`±xöfo_cmem
((
yyv•
[(1Ë- (3)].
öt_vÆue
),0); ;}

1466 { 
	`±xöfo_ªgs
((
yyv•
[(1Ë- (2)].
öt_vÆue
)); ;}

1473 { 
g_de˛¨ed
=(
yyv•
[(1Ë- (4)].
öt_vÆue
); 
g_sy°em
=(yyvsp[(3) - (4)].int_value); ;}

1482 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1484 
	`YYPOPSTACK
 (
yyÀn
);

1485 
yyÀn
 = 0;

1486 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1488 *++
yyv•
 = 
yyvÆ
;

1494 
yyn
 = 
yyr1
[yyn];

1496 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1497 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1498 
yy°©e
 = 
yyèbÀ
[yystate];

1500 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1502 
yy√w°©e
;

1508 
yyîæab
:

1510 i‡(!
yyîr°©us
)

1512 ++
yy√ºs
;

1513 #i‡! 
YYERROR_VERBOSE


1514 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1517 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1518 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1520 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1521 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1522 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1523 i‡(
yymsg
 !
yymsgbuf
)

1524 
	`YYSTACK_FREE
 (
yymsg
);

1525 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1526 i‡(
yymsg
)

1527 
yymsg_Æloc
 = 
yyÆloc
;

1530 
yymsg
 = 
yymsgbuf
;

1531 
yymsg_Æloc
 =  
yymsgbuf
;

1535 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1537 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1538 
	`yyîr‹
 (
yymsg
);

1542 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1543 i‡(
yysize
 != 0)

1544 
yyexhau°edœb
;

1552 i‡(
yyîr°©us
 == 3)

1557 i‡(
yych¨
 <
YYEOF
)

1560 i‡(
yych¨
 =
YYEOF
)

1561 
YYABORT
;

1565 
	`yyde°ru˘
 ("Error: discarding",

1566 
yytokí
, &
yylvÆ
);

1567 
yych¨
 = 
YYEMPTY
;

1573 
yyîæab1
;

1579 
yyîr‹œb
:

1585 
yyîr‹œb
;

1589 
	`YYPOPSTACK
 (
yyÀn
);

1590 
yyÀn
 = 0;

1591 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1592 
yy°©e
 = *
yys•
;

1593 
yyîæab1
;

1599 
yyîæab1
:

1600 
yyîr°©us
 = 3;

1604 
yyn
 = 
yy∑˘
[
yy°©e
];

1605 i‡(
yyn
 !
YYPACT_NINF
)

1607 
yyn
 +
YYTERROR
;

1608 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1610 
yyn
 = 
yyèbÀ
[yyn];

1611 i‡(0 < 
yyn
)

1617 i‡(
yys•
 =
yyss
)

1618 
YYABORT
;

1621 
	`yyde°ru˘
 ("Error:Öopping",

1622 
yy°os
[
yy°©e
], 
yyv•
);

1623 
	`YYPOPSTACK
 (1);

1624 
yy°©e
 = *
yys•
;

1625 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1628 *++
yyv•
 = 
yylvÆ
;

1632 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1634 
yy°©e
 = 
yyn
;

1635 
yy√w°©e
;

1641 
yyac˚±œb
:

1642 
yyªsu…
 = 0;

1643 
yyªtu∫
;

1648 
yyab‹éab
:

1649 
yyªsu…
 = 1;

1650 
yyªtu∫
;

1652 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1656 
yyexhau°edœb
:

1657 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1658 
yyªsu…
 = 2;

1662 
yyªtu∫
:

1663 i‡(
yych¨
 !
YYEMPTY
)

1664 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1665 
yytokí
, &
yylvÆ
);

1668 
	`YYPOPSTACK
 (
yyÀn
);

1669 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1670 
yys•
 !
yyss
)

1672 
	`yyde°ru˘
 ("Cleanup:Öopping",

1673 
yy°os
[*
yys•
], 
yyv•
);

1674 
	`YYPOPSTACK
 (1);

1676 #i‚de‡
yyovîÊow


1677 i‡(
yyss
 !
yysß
)

1678 
	`YYSTACK_FREE
 (
yyss
);

1680 #i‡
YYERROR_VERBOSE


1681 i‡(
yymsg
 !
yymsgbuf
)

1682 
	`YYSTACK_FREE
 (
yymsg
);

1685  
	`YYID
 (
yyªsu…
);

1686 
	}
}

	@src/cuda-sim/ptxinfo.tab.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mINT_OPERAND
 = 258,

43 
	mHEADER
 = 259,

44 
	mINFO
 = 260,

45 
	mFUNC
 = 261,

46 
	mUSED
 = 262,

47 
	mREGS
 = 263,

48 
	mBYTES
 = 264,

49 
	mLMEM
 = 265,

50 
	mSMEM
 = 266,

51 
	mCMEM
 = 267,

52 
	mIDENTIFIER
 = 268,

53 
	mPLUS
 = 269,

54 
	mCOMMA
 = 270,

55 
	mLEFT_SQUARE_BRACKET
 = 271,

56 
	mRIGHT_SQUARE_BRACKET
 = 272,

57 
	mCOLON
 = 273,

58 
	mSEMICOLON
 = 274,

59 
	mQUOTE
 = 275,

60 
	mLINE
 = 276,

61 
	mWARNING
 = 277,

62 
	mFOR
 = 278

68 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


69 
	uYYSTYPE


75 
	möt_vÆue
;

76 * 
	m°rög_vÆue
;

82 } 
	tYYSTYPE
;

83 
	#YYSTYPE_IS_TRIVIAL
 1

	)

84 
	#yy°y≥
 
YYSTYPE


	)

85 
	#YYSTYPE_IS_DECLARED
 1

	)

88 
YYSTYPE
 
±xöfo_lvÆ
;

	@src/cuda-sim/ptxinfo.y

31 
öt_vÆue
;

32 * 
°rög_vÆue
;

35 %
tokí
 <
öt_vÆue
> 
INT_OPERAND


36 %
tokí
 
HEADER


37 %
tokí
 
INFO


38 %
tokí
 
FUNC


39 %
tokí
 
USED


40 %
tokí
 
REGS


41 %
tokí
 
BYTES


42 %
tokí
 
LMEM


43 %
tokí
 
SMEM


44 %
tokí
 
CMEM


45 %
tokí
 <
°rög_vÆue
> 
IDENTIFIER


46 %
tokí
 
PLUS


47 %
tokí
 
COMMA


48 %
tokí
 
LEFT_SQUARE_BRACKET


49 %
tokí
 
RIGHT_SQUARE_BRACKET


50 %
tokí
 
COLON


51 %
tokí
 
SEMICOLON


52 %
tokí
 
QUOTE


53 %
tokí
 
LINE


54 %
tokí
 
WARNING


55 %
tokí
 
FOR


58 
	~<°dlib.h
>

59 
	~<°rög.h
>

61 
	gg_de˛¨ed
;

62 
	gg_sy°em
;

63 
±xöfo_Àx
();

64 
±xöfo_addöfo
();

65 
±xöfo_fun˘i⁄
(c⁄° *
‚ame
 );

66 
±xöfo_ªgs
–
ƒegs
 );

67 
±xöfo_lmem
–
de˛¨ed
, 
sy°em
 );

68 
±xöfo_smem
–
de˛¨ed
, 
sy°em
 );

69 
±xöfo_cmem
–
nbyãs
, 
b™k
 );

70 
±xöfo_îr‹
(const *);

73 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

75 
öput
:

76 | 
öput
 
löe


79 
löe
: 
HEADER
 
INFO
 
COLON
 
löe_öfo


80 | 
HEADER
 
IDENTIFIER
 
COMMA
 
LINE
 
INT_OPERAND
 
SEMICOLON
 
WARNING


83 
löe_öfo
: 
fun˘i⁄_«me


84 | 
fun˘i⁄_öfo
 { 
	`±xöfo_addöfo
(); }

87 
fun˘i⁄_«me
: 
FUNC
 
QUOTE
 
IDENTIFIER
 QUOTE { 
	`±xöfo_fun˘i⁄
(
$3
); }

88 | 
FUNC
 
QUOTE
 
IDENTIFIER
 QUOTE 
FOR
 QUOTE IDENTIFIER QUOTE { 
	`±xöfo_fun˘i⁄
(
$3
); }

90 
fun˘i⁄_öfo
: 
öfo


91 | 
fun˘i⁄_öfo
 
COMMA
 
öfo


94 
öfo
: 
USED
 
INT_OPERAND
 
REGS
 { 
	`±xöfo_ªgs
(
$2
); }

95 | 
tu∂e
 
LMEM
 { 
	`±xöfo_lmem
(
g_de˛¨ed
,
g_sy°em
); }

96 | 
tu∂e
 
SMEM
 { 
	`±xöfo_smem
(
g_de˛¨ed
,
g_sy°em
); }

97 | 
INT_OPERAND
 
BYTES
 
CMEM
 
LEFT_SQUARE_BRACKET
 INT_OPERAND 
RIGHT_SQUARE_BRACKET
 { 
	`±xöfo_cmem
(
$1
,
$5
); }

98 | 
INT_OPERAND
 
BYTES
 
LMEM
 { 
	`±xöfo_lmem
(
$1
,0); }

99 | 
INT_OPERAND
 
BYTES
 
SMEM
 { 
	`±xöfo_smem
(
$1
,0); }

100 | 
INT_OPERAND
 
BYTES
 
CMEM
 { 
	`±xöfo_cmem
(
$1
,0); }

101 | 
INT_OPERAND
 
REGS
 { 
	`±xöfo_ªgs
(
$1
); }

104 
tu∂e
: 
INT_OPERAND
 
PLUS
 INT_OPERAND 
BYTES
 { 
g_de˛¨ed
=
$1
; 
g_sy°em
=
$3
; }

106 
	}
%%

	@src/debug.cc

28 
	~"debug.h
"

29 
	~"gpgpu-sim/shadî.h
"

30 
	~"gpgpu-sim/gpu-sim.h
"

31 
	~"cuda-sim/±x_sim.h
"

32 
	~"cuda-sim/cuda-sim.h
"

33 
	~"cuda-sim/±x_ú.h
"

35 
	~<m≠
>

36 
	~<°dio.h
>

37 
	~<°rög.h
>

39 ˛as†
	cw©chpoöt_evít
 {

40 
	mpublic
:

41 
	$w©chpoöt_evít
()

43 
m_thªad
=
NULL
;

44 
m_ö°
=
NULL
;

46 
	$w©chpoöt_evít
(c⁄° 
±x_thªad_öfo
 *
thd
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
)

48 
m_thªad
=
thd
;

49 
m_ö°
 = 
pI
;

50 
	}
}

51 c⁄° 
±x_thªad_öfo
 *
	$thªad
(Ëc⁄° {  
m_thªad
; 
	}
}

52 c⁄° 
±x_ö°ru˘i⁄
 *
	$ö°
(Ëc⁄° {  
m_ö°
; 
	}
}

53 
	g¥iv©e
:

54 c⁄° 
±x_thªad_öfo
 *
m_thªad
;

55 c⁄° 
±x_ö°ru˘i⁄
 *
	gm_ö°
;

58 
	g°d
::
m≠
<,
	gw©chpoöt_evít
> 
	gg_w©chpoöt_hôs
;

60 
	$hô_w©chpoöt
–
w©chpoöt_num
, 
±x_thªad_öfo
 *
thd
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
 )

62 
g_w©chpoöt_hôs
[
w©chpoöt_num
]=
	`w©chpoöt_evít
(
thd
,
pI
);

63 
	}
}

67 
	ggpgpu_sim
::
	$gpgpu_debug
()

69 
boﬁ
 
d⁄e
=
åue
;

71 
boﬁ
 
sögÀ_°ï
=
åue
;

72 
√xt_brk±
=1;

73 
°d
::
m≠
<,
brk_±
> 
bªakpoöts
;

77 if–
sögÀ_°ï
 )

78 
d⁄e
=
Ál£
;

81 c⁄° 
±x_thªad_öfo
 *
brk_thd
 = 
NULL
;

82 c⁄° 
±x_ö°ru˘i⁄
 *
brk_ö°
 = 
NULL
;

84  
°d
::
m≠
<,
brk_±
>::
ôî©‹
 
i
=
bªakpoöts
.
	`begö
(); i!=bªakpoöts.
	`íd
(); i++) {

85 
num
=
i
->
fú°
;

86 
brk_±
 &
b
=
i
->
£c⁄d
;

87 if–
b
.
	`is_w©chpoöt
() ) {

88 
addr
 = 
b
.
	`gë_addr
();

89 
√w_vÆue
;

90 
m_globÆ_mem
->
	`ªad
(
addr
,4,&
√w_vÆue
);

91 if–
√w_vÆue
 !
b
.
	`gë_vÆue
(Ë|| 
g_w©chpoöt_hôs
.
	`föd
(
num
Ë!g_w©chpoöt_hôs.
	`íd
() ) {

92 
	`¥ötf
( "GPGPU-Sim PTX DBG: watchÖoint %uÅriggered (old value=%x,Çew value=%x)\n",

93 
num
,
b
.
	`gë_vÆue
(),
√w_vÆue
 );

94 
°d
::
m≠
<,
w©chpoöt_evít
>::
ôî©‹
 
w
=
g_w©chpoöt_hôs
.
	`föd
(
num
);

95 if–
w
==
g_w©chpoöt_hôs
.
	`íd
() )

96 
	`¥ötf
( "GPGPU-Sim PTX DBG: memoryÅransfer modified value\n");

98 
w©chpoöt_evít
 
wa
 = 
w
->
£c⁄d
;

99 
brk_thd
 = 
wa
.
	`thªad
();

100 
brk_ö°
 = 
wa
.
	`ö°
();

101 
	`¥ötf
( "GPGPU-Sim PTX DBG: modified byÅhread uid=%u, sid=%u, hwtid=%u\n",

102 
brk_thd
->
	`gë_uid
(),brk_thd->
	`gë_hw_sid
(), brk_thd->
	`gë_hw_tid
() );

103 
	`¥ötf
( "GPGPU-Sim PTX DBG: ");

104 
brk_ö°
->
	`¥öt_ö¢
(
°dout
);

105 
	`¥ötf
( "\n" );

106 
g_w©chpoöt_hôs
.
	`îa£
(
w
);

108 
b
.
	`£t_vÆue
(
√w_vÆue
);

109 
d⁄e
 = 
Ál£
;

134 if–
d⁄e
 )

135 
	`as£π
–
g_w©chpoöt_hôs
.
	`em±y
() );

139 !
d⁄e
) {

140 
	`¥ötf
("(ptx debugger) ");

141 
	`fÊush
(
°dout
);

143 
löe
[1024];

144 
	`fgës
(
löe
,1024,
°dö
);

146 *
tok
 = 
	`°πok
(
löe
," \t\n");

147 if–!
	`°rcmp
(
tok
,"dp") ) {

148 
shadî_num
 = 0;

149 
tok
 = 
	`°πok
(
NULL
," \t\n");

150 
	`ssˇnf
(
tok
,"%d",&
shadî_num
);

151 
	`dump_pùñöe
((0x40|0x4|0x1),
shadî_num
,0);

152 
	`¥ötf
("\n");

153 
	`fÊush
(
°dout
);

154 } if–!
	`°rcmp
(
tok
,"q") || !strcmp(tok,"quit") ) {

155 
	`¥ötf
("\nreally quit GPGPU-Sim (y/n)?\n");

156 
	`fgës
(
löe
,1024,
°dö
);

157 
tok
 = 
	`°πok
(
löe
," \t\n");

158 if–!
	`°rcmp
(
tok
,"y") ) {

159 
	`exô
(0);

161 
	`¥ötf
("not quiting.\n");

163 } if–!
	`°rcmp
(
tok
,"b") ) {

164 
tok
 = 
	`°πok
(
NULL
," \t\n");

165 
brk±
[1024];

166 
	`ssˇnf
(
tok
,"%s",
brk±
);

167 
tok
 = 
	`°πok
(
NULL
," \t\n");

168 
uid
;

169 
	`ssˇnf
(
tok
,"%u",&
uid
);

170 
bªakpoöts
[
√xt_brk±
++] = 
	`brk_±
(
brk±
,
uid
);

171 } if–!
	`°rcmp
(
tok
,"d") ) {

172 
tok
 = 
	`°πok
(
NULL
," \t\n");

173 
uid
;

174 
	`ssˇnf
(
tok
,"%u",&
uid
);

175 
bªakpoöts
.
	`îa£
(
uid
);

176 } if–!
	`°rcmp
(
tok
,"s") ) {

177 
d⁄e
 = 
åue
;

178 } if–!
	`°rcmp
(
tok
,"c") ) {

179 
sögÀ_°ï
=
Ál£
;

180 
d⁄e
 = 
åue
;

181 } if–!
	`°rcmp
(
tok
,"w") ) {

182 
tok
 = 
	`°πok
(
NULL
," \t\n");

183 
addr
;

184 
	`ssˇnf
(
tok
,"%x",&
addr
);

185 
vÆue
;

186 
m_globÆ_mem
->
	`ªad
(
addr
,4,&
vÆue
);

187 
m_globÆ_mem
->
	`£t_w©ch
(
addr
,
√xt_brk±
);

188 
bªakpoöts
[
√xt_brk±
++] = 
	`brk_±
(
addr
,
vÆue
);

189 } if–!
	`°rcmp
(
tok
,"l") ) {

190 if–
brk_thd
 =
NULL
 ) {

191 
	`¥ötf
("noÅhread selected\n");

193 
addr_t
 
pc
 = 
brk_thd
->
	`gë_pc
();

194 
addr_t
 
°¨t_pc
 = (
pc
<5)?0:(pc-5);

195  
addr_t
 
p
=
°¨t_pc
;Ö <
pc
+5;Ö++ ) {

196 c⁄° 
±x_ö°ru˘i⁄
 *
i
 = 
brk_thd
->
	`gë_ö°
(
p
);

197 if–
i
 ) {

198 if–
p
 !
pc
 )

199 
	`¥ötf
( " " );

201 
	`¥ötf
( "==> " );

202 
i
->
	`¥öt_ö¢
(
°dout
);

203 
	`¥ötf
( "\n" );

207 } if–!
	`°rcmp
(
tok
,"h") ) {

208 
	`¥ötf
("commands:\n");

209 
	`¥ötf
(" q - quit GPGPU-Sim\n");

210 
	`¥ötf
(" b <file>:<line> <thead uid> - set breakpoint\n");

211 
	`¥ötf
(" w <globaláddress> - set watchpoint\n");

212 
	`¥ötf
(" del <n> - delete breakpoint\n");

213 
	`¥ötf
(" s - single step one shader cycle (all cores)\n");

214 
	`¥ötf
(" c - continue simulation without single stepping\n");

215 
	`¥ötf
("Ü -Üist PTXáround current breakpoint\n");

216 
	`¥ötf
(" dp <n> - displayÖipeline contents on SM <n>\n");

217 
	`¥ötf
(" h -ÖrintÅhis message\n");

219 
	`¥ötf
("\ncommandÇot understood.\n");

221 
	`fÊush
(
°dout
);

223 
	}
}

225 
boﬁ
 
	$thªad_©_brk±
–
±x_thªad_öfo
 *
thªad
, c⁄° 
brk_±
 &
b
 )

227  
b
.
	`is_equÆ
(
thªad
->
	`gë_loˇti⁄
(),thªad->
	`gë_uid
());

228 
	}
}

	@src/debug.h

28 #i‚de‡
PTX_DEBUG_INCLUDED


29 
	#PTX_DEBUG_INCLUDED


	)

31 
	~"ab°ø˘_h¨dw¨e_modñ.h
"

33 
	~<°rög
>

35 ˛as†
	cbrk_±
 {

36 
	mpublic
:

37 
	$brk_±
(Ë{ 
m_vÆid
=
Ál£
; }

38 
	$brk_±
–c⁄° *
fûñöe
, 
uid
 )

40 
m_vÆid
 = 
åue
;

41 
m_w©ch
 = 
Ál£
;

42 
m_fûñöe
 = 
°d
::
	`°rög
(
fûñöe
);

43 
m_thªad_uid
=
uid
;

44 
	}
}

45 
	$brk_±
–
addr
, 
vÆue
 )

47 
m_vÆid
 = 
åue
;

48 
m_w©ch
 = 
åue
;

49 
m_addr
 = 
addr
;

50 
m_vÆue
 = 
vÆue
;

51 
	}
}

53 
	$gë_vÆue
(Ëc⁄° {  
m_vÆue
; 
	}
}

54 
addr_t
 
	$gë_addr
(Ëc⁄° {  
m_addr
; 
	}
}

55 
boﬁ
 
	$is_vÆid
(Ëc⁄° {  
m_vÆid
; 
	}
}

56 
boﬁ
 
	$is_w©chpoöt
(Ëc⁄° {  
m_w©ch
; 
	}
}

57 
boﬁ
 
is_equÆ
–c⁄° 
°d
::
°rög
 &
fûñöe
, 
uid
 ) const

59 if–
	gm_w©ch
 )

60  
	gÁl£
;

61 if–(
	gm_thªad_uid
 !()-1Ë&& (
uid
 !
m_thªad_uid
) )

62  
Ál£
;

63  
	gm_fûñöe
 =
fûñöe
;

65 
	g°d
::
°rög
 
	$loˇti⁄
() const

67 
buf„r
[1024];

68 
	`•rötf
(
buf„r
,"%†thªad uid = %u", 
m_fûñöe
.
	`c_°r
(), 
m_thªad_uid
);

69  
buf„r
;

70 
	}
}

72 
	$£t_vÆue
–
vÆ
 ) {  
m_vÆue
=vÆ; 
	}
}

73 
	g¥iv©e
:

74 
boﬁ
 
m_vÆid
;

75 
boﬁ
 
	gm_w©ch
;

78 
	g°d
::
°rög
 
m_fûñöe
;

79 
	gm_thªad_uid
;

82 
	gm_addr
;

83 
	gm_vÆue
;

86 
gpgpu_±x_ö°ru˘i⁄_˛assifiˇti⁄
 ;

88 
˛ass
 
	g±x_thªad_öfo
;

89 
˛ass
 
	g±x_ö°ru˘i⁄
;

90 
boﬁ
 
thªad_©_brk±
–
±x_thªad_öfo
 *
thd_öfo
, c⁄° 
brk_±
 &
b
 );

91 
hô_w©chpoöt
–
w©chpoöt_num
, 
±x_thªad_öfo
 *
thd
, c⁄° 
±x_ö°ru˘i⁄
 *
pI
 );

	@src/gpgpu-sim/addrdec.cc

29 
	~<°rög.h
>

30 
	~"addrdec.h
"

31 
	~"gpu-sim.h
"

32 
	~"../›ti⁄_∑r£r.h
"

36 
powli
–
x
, 
y
 );

37 
LOGB2_32
–
v
 );

38 
√w_addr_ty≥
 
addrdec_∑ckbôs
–√w_addr_ty≥ 
mask
,Çew_addr_ty≥ 
vÆ
, 
high
, 
low
);

39 
addrdec_gëmasklimô
(
√w_addr_ty≥
 
mask
, *
high
, *
low
);

41 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$löór_to_øw_addªss_å™¶©i⁄
()

43 
addrdec_›ti⁄
 = 
NULL
;

44 
ADDR_CHIP_S
 = 10;

45 
	`mem£t
(
addrdec_mklow
,0,
N_ADDRDEC
);

46 
	`mem£t
(
addrdec_mkhigh
,64,
N_ADDRDEC
);

47 
addrdec_mask
[0] = 0x0000000000001C00;

48 
addrdec_mask
[1] = 0x0000000000000300;

49 
addrdec_mask
[2] = 0x000000000FFF0000;

50 
addrdec_mask
[3] = 0x000000000000E0FF;

51 
addrdec_mask
[4] = 0x000000000000000F;

52 
	}
}

54 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$addrdec_£t›ti⁄
(
›ti⁄_∑r£r_t
 
›p
)

56 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_mem_addr_m≠pög", 
OPT_CSTR
, &
addrdec_›ti⁄
,

58 
NULL
);

59 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_mem_addr_ã°", 
OPT_BOOL
, &
run_ã°
,

62 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_mem_addªss_mask", 
OPT_INT32
, &
gpgpu_mem_addªss_mask
,

65 
	}
}

67 
√w_addr_ty≥
 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$∑πôi⁄_addªss
–
√w_addr_ty≥
 
addr
 ) const

69 i‡(!
g≠
) {

70  
	`addrdec_∑ckbôs
–~
addrdec_mask
[
CHIP
], 
addr
, 64, 0 );

73 
∑πôi⁄_addr
;

74 
∑πôi⁄_addr
 = ( (
addr
>>
ADDR_CHIP_S
Ë/ 
Nchùs
) << ADDR_CHIP_S;

75 
∑πôi⁄_addr
 |
addr
 & ((1 << 
ADDR_CHIP_S
) - 1);

76  
∑πôi⁄_addr
;

78 
	}
}

80 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$addrdec_éx
(
√w_addr_ty≥
 
addr
, 
addrdec_t
 *
éx
) const

82 
addr_f‹_chù
,
ª°_of_addr
;

83 i‡(!
g≠
) {

84 
éx
->
chù
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
CHIP
], 
addr
, 
addrdec_mkhigh
[CHIP], 
addrdec_mklow
[CHIP]);

85 
éx
->
bk
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
BK
], 
addr
, 
addrdec_mkhigh
[BK], 
addrdec_mklow
[BK]);

86 
éx
->
row
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
ROW
], 
addr
, 
addrdec_mkhigh
[ROW], 
addrdec_mklow
[ROW]);

87 
éx
->
cﬁ
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
COL
], 
addr
, 
addrdec_mkhigh
[COL], 
addrdec_mklow
[COL]);

88 
éx
->
bur°

	`addrdec_∑ckbôs
(
addrdec_mask
[
BURST
], 
addr
, 
addrdec_mkhigh
[BURST], 
addrdec_mklow
[BURST]);

93 
addr_f‹_chù
 = (
addr
>>
ADDR_CHIP_S
Ë% 
Nchùs
;

94 
ª°_of_addr
 = ( (
addr
>>
ADDR_CHIP_S
Ë/ 
Nchùs
) << ADDR_CHIP_S;

95 
ª°_of_addr
 |
addr
 & ((1 << 
ADDR_CHIP_S
) - 1);

97 
éx
->
chù
 = 
addr_f‹_chù
;

98 
éx
->
bk
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
BK
], 
ª°_of_addr
, 
addrdec_mkhigh
[BK], 
addrdec_mklow
[BK]);

99 
éx
->
row
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
ROW
], 
ª°_of_addr
, 
addrdec_mkhigh
[ROW], 
addrdec_mklow
[ROW]);

100 
éx
->
cﬁ
 = 
	`addrdec_∑ckbôs
(
addrdec_mask
[
COL
], 
ª°_of_addr
, 
addrdec_mkhigh
[COL], 
addrdec_mklow
[COL]);

101 
éx
->
bur°

	`addrdec_∑ckbôs
(
addrdec_mask
[
BURST
], 
ª°_of_addr
, 
addrdec_mkhigh
[BURST], 
addrdec_mklow
[BURST]);

103 
	}
}

105 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$addrdec_∑r£›ti⁄
(c⁄° *
›ti⁄
)

107 
dømid_°¨t
 = 0;

108 
dømid_∑r£d
 = 
	`ssˇnf
(
›ti⁄
, "dømid@%d", &
dømid_°¨t
);

109 i‡(
dømid_∑r£d
 == 1) {

110 
ADDR_CHIP_S
 = 
dømid_°¨t
;

112 
ADDR_CHIP_S
 = -1;

115 c⁄° *
cm≠pög
 = 
	`°rchr
(
›ti⁄
, ';');

116 i‡(
cm≠pög
 =
NULL
) {

117 
cm≠pög
 = 
›ti⁄
;

119 
cm≠pög
 += 1;

122 
addrdec_mask
[
CHIP
] = 0x0;

123 
addrdec_mask
[
BK
] = 0x0;

124 
addrdec_mask
[
ROW
] = 0x0;

125 
addrdec_mask
[
COL
] = 0x0;

126 
addrdec_mask
[
BURST
]= 0x0;

128 
ofs
 = 63;

129 (*
cm≠pög
) != '\0') {

130 *
cm≠pög
) {

132 
	`as£π
(
dømid_∑r£d
 !1); 
addrdec_mask
[
CHIP
] |(1ULL << 
ofs
); ofs--; ;

133 'B': 'b': 
addrdec_mask
[
BK
] |(1ULL << 
ofs
); ofs--; ;

134 'R': 'r': 
addrdec_mask
[
ROW
] |(1ULL << 
ofs
); ofs--; ;

135 'C': 'c': 
addrdec_mask
[
COL
] |(1ULL << 
ofs
); ofs--; ;

136 'S': 's': 
addrdec_mask
[
BURST
] |(1ULL << 
ofs
);áddrdec_mask[
COL
] |= (1ULL << ofs); ofs--; ;

138 '0': 
ofs
--; ;

144 
	`Ârötf
(
°dîr
, "ERROR: InvÆidáddªs†m≠pög ch¨a˘î '%c' i¿›ti⁄ '%s'\n", *
cm≠pög
, 
›ti⁄
);

146 
cm≠pög
 += 1;

149 i‡(
ofs
 != -1) {

150 
	`Ârötf
(
°dîr
, "ERROR: InvÆidáddªs†m≠pögÜígth (%dËö o±i⁄ '%s'\n", 63 - 
ofs
, 
›ti⁄
);

151 
	`as£π
(
ofs
 == -1);

153 
	}
}

155 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$öô
(
nchùs
)

157 
i
;

158 
mask
;

159 
nchùbôs
 = ::
	`LOGB2_32
(
nchùs
);

160 
Nchùs
 = 
nchùs
;

162 
g≠
 = (
nchùs
 - ::
	`powli
(2,
nchùbôs
));

163 i‡(
g≠
) {

164 
nchùbôs
++;

166 
gpgpu_mem_addªss_mask
) {

169 
ADDR_CHIP_S
 = 10;

170 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

171 
addrdec_mask
[
BK
] = 0x0000000000000300;

172 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

173 
addrdec_mask
[
COL
] = 0x0000000000001CFF;

176 
ADDR_CHIP_S
 = 13;

177 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

178 
addrdec_mask
[
BK
] = 0x0000000000001800;

179 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

180 
addrdec_mask
[
COL
] = 0x00000000000007FF;

183 
ADDR_CHIP_S
 = 11;

184 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

185 
addrdec_mask
[
BK
] = 0x0000000000001800;

186 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

187 
addrdec_mask
[
COL
] = 0x00000000000007FF;

190 
ADDR_CHIP_S
 = 11;

191 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

192 
addrdec_mask
[
BK
] = 0x0000000000001800;

193 
addrdec_mask
[
ROW
] = 0x000000000FFFE000;

194 
addrdec_mask
[
COL
] = 0x00000000000007FF;

198 
ADDR_CHIP_S
 = 14;

199 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

200 
addrdec_mask
[
BK
] = 0x0000000000001800;

201 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

202 
addrdec_mask
[
COL
] = 0x00000000000007FF;

205 
ADDR_CHIP_S
 = 15;

206 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

207 
addrdec_mask
[
BK
] = 0x0000000000001800;

208 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

209 
addrdec_mask
[
COL
] = 0x00000000000007FF;

212 
ADDR_CHIP_S
 = 16;

213 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

214 
addrdec_mask
[
BK
] = 0x0000000000001800;

215 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

216 
addrdec_mask
[
COL
] = 0x00000000000007FF;

219 
ADDR_CHIP_S
 = 6;

220 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

221 
addrdec_mask
[
BK
] = 0x0000000000001800;

222 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

223 
addrdec_mask
[
COL
] = 0x00000000000007FF;

226 
ADDR_CHIP_S
 = 5;

227 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

228 
addrdec_mask
[
BK
] = 0x0000000000001800;

229 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

230 
addrdec_mask
[
COL
] = 0x00000000000007FF;

233 
ADDR_CHIP_S
 = 1;

234 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

235 
addrdec_mask
[
BK
] = 0x0000000000000003;

236 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

237 
addrdec_mask
[
COL
] = 0x0000000000001FFC;

240 
ADDR_CHIP_S
 = 3;

241 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

242 
addrdec_mask
[
BK
] = 0x0000000000000003;

243 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

244 
addrdec_mask
[
COL
] = 0x0000000000001FFC;

247 
ADDR_CHIP_S
 = 6;

248 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

249 
addrdec_mask
[
BK
] = 0x0000000000001800;

250 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

251 
addrdec_mask
[
COL
] = 0x00000000000007FF;

255 
ADDR_CHIP_S
 = 6;

256 
addrdec_mask
[
CHIP
] = 0x0000000000000000;

257 
addrdec_mask
[
BK
] = 0x0000000000000300;

258 
addrdec_mask
[
ROW
] = 0x0000000007FFE000;

259 
addrdec_mask
[
COL
] = 0x0000000000001CFF;

265 i‡(
addrdec_›ti⁄
 !
NULL
)

266 
	`addrdec_∑r£›ti⁄
(
addrdec_›ti⁄
);

268 i‡(
ADDR_CHIP_S
 != -1) {

269 i‡(!
g≠
) {

272 
mask
 = (()1 << 
ADDR_CHIP_S
) - 1;

273 
addrdec_mask
[
BK
] = (◊ddrdec_mask[BK] & ~
mask
Ë<< 
nchùbôs
) | (addrdec_mask[BK] & mask);

274 
addrdec_mask
[
ROW
] = (◊ddrdec_mask[ROW] & ~
mask
Ë<< 
nchùbôs
) | (addrdec_mask[ROW] & mask);

275 
addrdec_mask
[
COL
] = (◊ddrdec_mask[COL] & ~
mask
Ë<< 
nchùbôs
) | (addrdec_mask[COL] & mask);

277 
i
=
ADDR_CHIP_S
;i<(ADDR_CHIP_S+
nchùbôs
);i++) {

278 
mask
 = ()1 << 
i
;

279 
addrdec_mask
[
CHIP
] |
mask
;

284 
	`as£π
((
nchùs
 & (nchips - 1)) == 0);

287 
	`addrdec_gëmasklimô
(
addrdec_mask
[
CHIP
], &
addrdec_mkhigh
[CHIP], &
addrdec_mklow
[CHIP] );

288 
	`addrdec_gëmasklimô
(
addrdec_mask
[
BK
], &
addrdec_mkhigh
[BK], &
addrdec_mklow
[BK] );

289 
	`addrdec_gëmasklimô
(
addrdec_mask
[
ROW
], &
addrdec_mkhigh
[ROW], &
addrdec_mklow
[ROW] );

290 
	`addrdec_gëmasklimô
(
addrdec_mask
[
COL
], &
addrdec_mkhigh
[COL], &
addrdec_mklow
[COL] );

291 
	`addrdec_gëmasklimô
(
addrdec_mask
[
BURST
], &
addrdec_mkhigh
[BURST], &
addrdec_mklow
[BURST]);

293 
	`¥ötf
("addr_dec_mask[CHIP] = %016Œx \thigh:%dÜow:%d\n", 
addrdec_mask
[
CHIP
], 
addrdec_mkhigh
[CHIP], 
addrdec_mklow
[CHIP] );

294 
	`¥ötf
("addr_dec_mask[BK] = %016Œx \thigh:%dÜow:%d\n", 
addrdec_mask
[
BK
], 
addrdec_mkhigh
[BK], 
addrdec_mklow
[BK] );

295 
	`¥ötf
("addr_dec_mask[ROW] = %016Œx \thigh:%dÜow:%d\n", 
addrdec_mask
[
ROW
], 
addrdec_mkhigh
[ROW], 
addrdec_mklow
[ROW] );

296 
	`¥ötf
("addr_dec_mask[COL] = %016Œx \thigh:%dÜow:%d\n", 
addrdec_mask
[
COL
], 
addrdec_mkhigh
[COL], 
addrdec_mklow
[COL] );

297 
	`¥ötf
("addr_dec_mask[BURST] = %016Œx \thigh:%dÜow:%d\n", 
addrdec_mask
[
BURST
], 
addrdec_mkhigh
[BURST], 
addrdec_mklow
[BURST]);

299 i‡(
run_ã°
) {

300 
	`swìp_ã°
();

302 
	}
}

304 
	~"../å1_hash_m≠.h
"

306 
boﬁ
 
	g›î©‹
==(c⁄° 
addrdec_t
 &
x
, c⁄° 
	gaddrdec_t
 &
	gy
)

308  ( 
memcmp
(&
x
, &
y
, (
addrdec_t
)) == 0 );

311 
boﬁ
 
	g›î©‹
<(c⁄° 
	gaddrdec_t
 &
	gx
, c⁄°áddrdec_à&
	gy
)

313 i‡(
	gx
.
	gchù
 >
y
.
chù
Ë 
Ál£
;

314 i‡(
	gx
.
	gbk
 >
y
.
bk
Ë 
Ál£
;

315 i‡(
	gx
.
	grow
 >
y
.
row
Ë 
Ál£
;

316 i‡(
	gx
.
	gcﬁ
 >
y
.
cﬁ
Ë 
Ál£
;

317 i‡(
	gx
.
	gbur°
 >
y
.
bur°
Ë 
Ál£
;

318  
	gåue
;

321 ˛as†
	chash_addrdec_t


323 
	mpublic
:

324 
size_t
 
	$›î©‹
()(c⁄° 
addrdec_t
 &
x
) const {

325  (
x
.
chù
 ^ x.
bk
 ^ x.
row
 ^ x.
cﬁ
 ^ x.
bur°
);

327 
	}
};

330 
	glöór_to_øw_addªss_å™¶©i⁄
::
	$swìp_ã°
() const

332 
√w_addr_ty≥
 
swìp_ønge
 = 16 * 1024 * 1024;

334 
å1_hash_m≠
<
	taddrdec_t
, 
	t√w_addr_ty≥
, 
	thash_addrdec_t
> 
	thi°‹y_m≠_t
;

335 
hi°‹y_m≠_t
 
hi°‹y_m≠
;

337 
√w_addr_ty≥
 
øw_addr
 = 4;Ñaw_add∏< 
swìp_ønge
;Ñaw_addr += 4) {

338 
addrdec_t
 
éx
;

339 
	`addrdec_éx
(
øw_addr
, &
éx
);

341 
hi°‹y_m≠_t
::
ôî©‹
 
h
 = 
hi°‹y_m≠
.
	`föd
(
éx
);

343 i‡(
h
 !
hi°‹y_m≠
.
	`íd
()) {

344 
	`¥ötf
("[AddrDec] ** Eº‹:áddªs†decodög m≠pögálü£†twÿaddªs£†tÿßmê∑πôi⁄ wôh samêöåa-∑πôi⁄áddªss: %Œx %Œx\n", 
h
->
£c⁄d
, 
øw_addr
);

345 
	`ab‹t
();

347 
	`as£π
(()
éx
.
chù
 < 
Nchùs
);

349 i‡((
ADDR_CHIP_S
 !-1 
™d
 
øw_addr
 >(1ULL << ADDR_CHIP_S)Ë
‹


350 (
ADDR_CHIP_S
 =-1 
™d
 
øw_addr
 >(1ULL << 
addrdec_mklow
[
CHIP
]))) {

351 
	`as£π
(
øw_addr
 !
	`∑πôi⁄_addªss
(raw_addr));

353 
hi°‹y_m≠
[
éx
] = 
øw_addr
;

356 i‡((
øw_addr
 & 0xffffË=0Ë
	`¥ötf
("%llu scaned\n",Ñaw_addr);

358 
	}
}

360 
	gaddrdec_t
::
	$¥öt
–
FILE
 *
Â
 ) const

362 i‡(
chù
Ë
	`Ârötf
(
Â
,"\tchip:%x ", chip);

363 i‡(
row
Ë
	`Ârötf
(
Â
,"\trow:%x ",Ñow);

364 i‡(
cﬁ
Ë
	`Ârötf
(
Â
,"\tcol:%x ", col);

365 i‡(
bk
Ë
	`Ârötf
(
Â
,"\tbk:%x ", bk);

366 i‡(
bur°
Ë
	`Ârötf
(
Â
,"\tburst:%x ", burst);

367 
	}
}

370 
	$powli
–
x
, 
y
 )

372 
r
 = 1;

373 
i
;

374 
i
 = 0; i < 
y
; ++i ) {

375 
r
 *
x
;

377  
r
;

378 
	}
}

380 
	$LOGB2_32
–
v
 )

382 
shi·
;

383 
r
;

385 
r
 = 0;

387 
shi·
 = (–
v
 & 0xFFFF0000Ë!0 ) << 4; v >>shi·; 
r
 |= shift;

388 
shi·
 = (–
v
 & 0xFF00 ) !0 ) << 3; v >>shi·; 
r
 |= shift;

389 
shi·
 = (–
v
 & 0xF0 ) !0 ) << 2; v >>shi·; 
r
 |= shift;

390 
shi·
 = (–
v
 & 0xC ) !0 ) << 1; v >>shi·; 
r
 |= shift;

391 
shi·
 = (–
v
 & 0x2 ) !0 ) << 0; v >>shi·; 
r
 |= shift;

393  
r
;

394 
	}
}

396 
√w_addr_ty≥
 
	$addrdec_∑ckbôs
–
√w_addr_ty≥
 
mask
,Çew_addr_ty≥ 
vÆ
, 
high
, 
low
)

398 
pos
=0;

399 
√w_addr_ty≥
 
ªsu…
 = 0;

400 
i
=
low
;i<
high
;i++) {

401 i‡((
mask
 & (()1<<
i
)) != 0) {

402 
ªsu…
 |((
vÆ
 & (()1<<
i
)Ë>> iË<< 
pos
;

403 
pos
++;

406  
ªsu…
;

407 
	}
}

409 
	$addrdec_gëmasklimô
(
√w_addr_ty≥
 
mask
, *
high
, *
low
)

411 *
high
 = 64;

412 *
low
 = 0;

413 
i
;

414 
low_found
 = 0;

416 
i
=0;i<64;i++) {

417 i‡((
mask
 & (()1<<
i
)) != 0) {

418 i‡(
low_found
) {

419 *
high
 = 
i
 + 1;

421 *
high
 = 
i
 + 1;

422 *
low
 = 
i
;

423 
low_found
 = 1;

427 
	}
}

	@src/gpgpu-sim/addrdec.h

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<as£π.h
>

31 
	~"../›ti⁄_∑r£r.h
"

33 #i‚de‡
ADDRDEC_H


34 
	#ADDRDEC_H


	)

36 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

38 
	saddrdec_t
 {

39 
¥öt
–
FILE
 *
Â
 ) const;

41 
	mchù
;

42 
	mbk
;

43 
	mrow
;

44 
	mcﬁ
;

45 
	mbur°
;

48 ˛as†
	clöór_to_øw_addªss_å™¶©i⁄
 {

49 
	mpublic
:

50 
löór_to_øw_addªss_å™¶©i⁄
();

51 
addrdec_£t›ti⁄
(
›ti⁄_∑r£r_t
 
›p
);

52 
öô
(
nchùs
);

55 
	$addrdec_éx
(
√w_addr_ty≥
 
addr
, 
addrdec_t
 *
éx
) const;

56 
√w_addr_ty≥
 
	$∑πôi⁄_addªss
–
√w_addr_ty≥
 
addr
 ) const;

58 
¥iv©e
:

59 
	`addrdec_∑r£›ti⁄
(c⁄° *
›ti⁄
);

60 
	$swìp_ã°
() const;

63 
CHIP
 = 0,

64 
BK
 = 1,

65 
ROW
 = 2,

66 
COL
 = 3,

67 
BURST
 = 4,

68 
N_ADDRDEC


71 c⁄° *
addrdec_›ti⁄
;

72 
gpgpu_mem_addªss_mask
;

73 
boﬁ
 
run_ã°
;

75 
ADDR_CHIP_S
;

76 
addrdec_mklow
[
N_ADDRDEC
];

77 
addrdec_mkhigh
[
N_ADDRDEC
];

78 
√w_addr_ty≥
 
addrdec_mask
[
N_ADDRDEC
];

80 
g≠
;

81 
Nchùs
;

82 
	}
};

	@src/gpgpu-sim/delayqueue.h

28 
	~<°dio.h
>

29 
	~<as£π.h
>

30 
	~<°dlib.h
>

32 #i‚de‡
DELAYQUEUE_H


33 
	#DELAYQUEUE_H


	)

35 
	~"../öãrsim/°©wø≥r.h
"

36 
	~"gpu-misc.h
"

38 
	gãm∂©e
 <
˛ass
 
	gT
>

39 
	sfifo_d©a
 {

40 
T
 *
	mm_d©a
;

41 
fifo_d©a
 *
	mm_√xt
;

44 
	gãm∂©e
 <
˛ass
 
	gT
>

45 ˛as†
	cfifo_pùñöe
 {

46 
	mpublic
:

47 
	$fifo_pùñöe
(c⁄° * 
nm
, 
möÀn
, 
maxÀn
 )

49 
	`as£π
(
maxÀn
);

50 
m_«me
 = 
nm
;

51 
m_mö_Àn
 = 
möÀn
;

52 
m_max_Àn
 = 
maxÀn
;

53 
m_Àngth
 = 0;

54 
m_n_ñemít
 = 0;

55 
m_hód
 = 
NULL
;

56 
m_èû
 = 
NULL
;

57 
i
=0;i<
m_mö_Àn
;i++)

58 
	`push
(
NULL
);

61 ~
	$fifo_pùñöe
()

63 
m_hód
) {

64 
m_èû
 = 
m_hód
;

65 
m_hód
 = m_hód->
m_√xt
;

66 
dñëe
 
m_èû
;

68 
	}
}

70 
	$push
(
T
* 
d©a
 )

72 
	`as£π
(
m_Àngth
 < 
m_max_Àn
);

73 i‡(
m_hód
) {

74 i‡(
m_èû
->
m_d©a
 || 
m_Àngth
 < 
m_mö_Àn
) {

75 
m_èû
->
m_√xt
 = 
√w
 
fifo_d©a
<
T
>();

76 
m_èû
 = m_èû->
m_√xt
;

77 
m_Àngth
++;

78 
m_n_ñemít
++;

81 
m_hód
 = 
m_èû
 = 
√w
 
fifo_d©a
<
T
>();

82 
m_Àngth
++;

83 
m_n_ñemít
++;

85 
m_èû
->
m_√xt
 = 
NULL
;

86 
m_èû
->
m_d©a
 = 
d©a
;

87 
	}
}

89 
T
* 
	$p›
()

91 
fifo_d©a
<
T
>* 
√xt
;

92 
T
* 
d©a
;

93 i‡(
m_hód
) {

94 
√xt
 = 
m_hód
->
m_√xt
;

95 
d©a
 = 
m_hód
->
m_d©a
;

96 i‡–
m_hód
 =
m_èû
 ) {

97 
	`as£π
–
√xt
 =
NULL
 );

98 
m_èû
 = 
NULL
;

100 
dñëe
 
m_hód
;

101 
m_hód
 = 
√xt
;

102 
m_Àngth
--;

103 i‡(
m_Àngth
 == 0) {

104 
	`as£π
–
m_hód
 =
NULL
 );

105 
m_èû
 = 
m_hód
;

107 
m_n_ñemít
--;

108 i‡(
m_mö_Àn
 && 
m_Àngth
 < m_min_len) {

109 
	`push
(
NULL
);

110 
m_n_ñemít
--;

113 
d©a
 = 
NULL
;

115  
d©a
;

116 
	}
}

118 
T
* 
	$t›
() const

120 i‡(
m_hód
) {

121  
m_hód
->
m_d©a
;

123  
NULL
;

125 
	}
}

127 
	$£t_mö_Àngth
(
√w_mö_Àn
)

129 i‡(
√w_mö_Àn
 =
m_mö_Àn
) ;

131 i‡(
√w_mö_Àn
 > 
m_mö_Àn
) {

132 
m_mö_Àn
 = 
√w_mö_Àn
;

133 
m_Àngth
 < 
m_mö_Àn
) {

134 
	`push
(
NULL
);

135 
m_n_ñemít
--;

140 
	`as£π
(
m_hód
);

141 
m_mö_Àn
 = 
√w_mö_Àn
;

142 (
m_Àngth
 > 
m_mö_Àn
Ë&& (
m_èû
->
m_d©a
 == 0)) {

143 
fifo_d©a
<
T
> *
ôî
;

144 
ôî
 = 
m_hód
;

145 
ôî
 && (ôî->
m_√xt
 !
m_èû
))

146 
ôî
 = iãr->
m_√xt
;

147 i‡(!
ôî
) {

149 
	`as£π
(
m_hód
->
m_d©a
 == 0);

150 
	`p›
();

153 
	`as£π
(
ôî
->
m_√xt
 =
m_èû
);

154 
dñëe
 
m_èû
;

155 
m_èû
 = 
ôî
;

156 
m_èû
->
m_√xt
 = 0;

157 
m_Àngth
--;

161 
	}
}

163 
boﬁ
 
	$fuŒ
(Ëc⁄° {  (
m_max_Àn
 && 
m_Àngth
 >m_max_Àn); 
	}
}

164 
boﬁ
 
	$em±y
(Ëc⁄° {  
m_hód
 =
NULL
; 
	}
}

165 
	$gë_n_ñemít
(Ëc⁄° {  
m_n_ñemít
; 
	}
}

166 
	$gë_Àngth
(Ëc⁄° {  
m_Àngth
; 
	}
}

167 
	$gë_max_Àn
(Ëc⁄° {  
m_max_Àn
; 
	}
}

169 
	$¥öt
() const

171 
fifo_d©a
<
T
>* 
ddp
 = 
m_hód
;

172 
	`¥ötf
("%s(%d): ", 
m_«me
, 
m_Àngth
);

173 
ddp
) {

174 
	`¥ötf
("%∞", 
ddp
->
m_d©a
);

175 
ddp
 = ddp->
m_√xt
;

177 
	`¥ötf
("\n");

178 
	}
}

180 
	g¥iv©e
:

181 c⁄° * 
m_«me
;

183 
	gm_mö_Àn
;

184 
	gm_max_Àn
;

185 
	gm_Àngth
;

186 
	gm_n_ñemít
;

188 
	gfifo_d©a
<
	gT
> *
	gm_hód
;

189 
	gfifo_d©a
<
	gT
> *
	gm_èû
;

	@src/gpgpu-sim/dram.cc

29 
	~"gpu-sim.h
"

30 
	~"gpu-misc.h
"

31 
	~"døm.h
"

32 
	~"mem_œãncy_°©.h
"

33 
	~"døm_sched.h
"

34 
	~"mem_„tch.h
"

35 
	~"l2ˇche.h
"

37 #ifde‡
DRAM_VERIFY


38 
	gPRINT_CYCLE
 = 0;

41 
ãm∂©e
 
˛ass
 
	gfifo_pùñöe
<
	gmem_„tch
>;

42 
ãm∂©e
 
˛ass
 
	gfifo_pùñöe
<
	gdøm_ªq_t
>;

44 
	gdøm_t
::
	$døm_t
–
∑πôi⁄_id
, c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
, 
mem‹y_°©s_t
 *
°©s
,

45 
mem‹y_∑πôi⁄_unô
 *
mp
 )

47 
id
 = 
∑πôi⁄_id
;

48 
m_mem‹y_∑πôi⁄_unô
 = 
mp
;

49 
m_°©s
 = 
°©s
;

50 
m_c⁄fig
 = 
c⁄fig
;

52 
CCDc
 = 0;

53 
RRDc
 = 0;

54 
RTWc
 = 0;

55 
WTRc
 = 0;

57 
rw
 = 
READ
;

59 
bkgΩ
 = (
b™kgΩ_t
**Ë
	`ˇŒoc
((b™kgΩ_t*), 
m_c⁄fig
->
nbkgΩ
);

60 
bkgΩ
[0] = (
b™kgΩ_t
*Ë
	`ˇŒoc
((
b™k_t
), 
m_c⁄fig
->
nbkgΩ
);

61 
i
=1; i<
m_c⁄fig
->
nbkgΩ
; i++) {

62 
bkgΩ
[
i
] = bkgrp[0] + i;

64 
i
=0; i<
m_c⁄fig
->
nbkgΩ
; i++) {

65 
bkgΩ
[
i
]->
CCDLc
 = 0;

66 
bkgΩ
[
i
]->
RTPLc
 = 0;

69 
bk
 = (
b™k_t
**Ë
	`ˇŒoc
((b™k_t*),
m_c⁄fig
->
nbk
);

70 
bk
[0] = (
b™k_t
*Ë
	`ˇŒoc
((b™k_t),
m_c⁄fig
->
nbk
);

71 
i
=1;i<
m_c⁄fig
->
nbk
;i++)

72 
bk
[
i
] = bk[0] + i;

73 
i
=0;i<
m_c⁄fig
->
nbk
;i++) {

74 
bk
[
i
]->
°©e
 = 
BANK_IDLE
;

75 
bk
[
i
]->
bkgΩödex
 = i/(
m_c⁄fig
->
nbk
/m_c⁄fig->
nbkgΩ
);

77 
¥io
 = 0;

78 
rwq
 = 
√w
 
fifo_pùñöe
<
døm_ªq_t
>("rwq",
m_c⁄fig
->
CL
,m_config->CL+1);

79 
mrqq
 = 
√w
 
fifo_pùñöe
<
døm_ªq_t
>("mrqq",0,2);

80 
ªtu∫q
 = 
√w
 
fifo_pùñöe
<
mem_„tch
>("dømªtu∫q",0,
m_c⁄fig
->
gpgpu_døm_sched_queue_size
);

81 
m_‰fcfs_scheduÀr
 = 
NULL
;

82 i‡–
m_c⁄fig
->
scheduÀr_ty≥
 =
DRAM_FRFCFS
 )

83 
m_‰fcfs_scheduÀr
 = 
√w
 
	`‰fcfs_scheduÀr
(
m_c⁄fig
,
this
,
°©s
);

84 
n_cmd
 = 0;

85 
n_a˘ivôy
 = 0;

86 
n_n›
 = 0;

87 
n_a˘
 = 0;

88 
n_¥e
 = 0;

89 
n_rd
 = 0;

90 
n_wr
 = 0;

91 
n_ªq
 = 0;

92 
max_mrqs_ãmp
 = 0;

93 
bwutû
 = 0;

94 
max_mrqs
 = 0;

96 
i
=0;i<10;i++) {

97 
døm_utû_bös
[
i
]=0;

98 
døm_eff_bös
[
i
]=0;

100 
œ°_n_cmd
 = 
œ°_n_a˘ivôy
 = 
œ°_bwutû
 = 0;

102 
n_cmd_∑πül
 = 0;

103 
n_a˘ivôy_∑πül
 = 0;

104 
n_n›_∑πül
 = 0;

105 
n_a˘_∑πül
 = 0;

106 
n_¥e_∑πül
 = 0;

107 
n_ªq_∑πül
 = 0;

108 
ave_mrqs_∑πül
 = 0;

109 
bwutû_∑πül
 = 0;

111 i‡–
	`queue_limô
() )

112 
mrqq_Di°
 = 
	`SètCª©e
("mrqq_Àngth",1, 
	`queue_limô
());

114 
mrqq_Di°
 = 
	`SètCª©e
("mrqq_length",1,64);

115 
	}
}

117 
boﬁ
 
	gdøm_t
::
	$fuŒ
() const

119 if–
m_c⁄fig
->
gpgpu_døm_sched_queue_size
 == 0 )

120  
Ál£
;

121 if–
m_c⁄fig
->
scheduÀr_ty≥
 =
DRAM_FRFCFS
 )

122  
m_‰fcfs_scheduÀr
->
	`num_≥ndög
(Ë>
m_c⁄fig
->
gpgpu_døm_sched_queue_size
;

124  
mrqq
->
	`fuŒ
();

125 
	}
}

127 
	gdøm_t
::
	$que_Àngth
() const

129 
ƒeqs
 = 0;

130 i‡(
m_c⁄fig
->
scheduÀr_ty≥
 =
DRAM_FRFCFS
 ) {

131 
ƒeqs
 = 
m_‰fcfs_scheduÀr
->
	`num_≥ndög
();

133 
ƒeqs
 = 
mrqq
->
	`gë_Àngth
();

135  
ƒeqs
;

136 
	}
}

138 
boﬁ
 
	gdøm_t
::
	$ªtu∫q_fuŒ
() const

140  
ªtu∫q
->
	`fuŒ
();

141 
	}
}

143 
	gdøm_t
::
	$queue_limô
() const

145  
m_c⁄fig
->
gpgpu_døm_sched_queue_size
;

146 
	}
}

149 
	gdøm_ªq_t
::
	$døm_ªq_t
–
˛ass
 
mem_„tch
 *
mf
 )

151 
txbyãs
 = 0;

152 
dqbyãs
 = 0;

153 
d©a
 = 
mf
;

155 c⁄° 
addrdec_t
 &
éx
 = 
mf
->
	`gë_éx_addr
();

157 
bk
 = 
éx
.bk;

158 
row
 = 
éx
.row;

159 
cﬁ
 = 
éx
.col;

160 
nbyãs
 = 
mf
->
	`gë_d©a_size
();

162 
time°amp
 = 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
;

163 
addr
 = 
mf
->
	`gë_addr
();

164 
ö£πi⁄_time
 = (Ë
gpu_sim_cy˛e
;

165 
rw
 = 
d©a
->
	`gë_is_wrôe
()?
WRITE
:
READ
;

166 
	}
}

168 
	gdøm_t
::
	$push
–
˛ass
 
mem_„tch
 *
d©a
 )

170 
døm_ªq_t
 *
mrq
 = 
√w
 
	`døm_ªq_t
(
d©a
);

171 
d©a
->
	`£t_°©us
(
IN_PARTITION_MC_INTERFACE_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

172 
mrqq
->
	`push
(
mrq
);

175 
n_ªq
 += 1;

176 
n_ªq_∑πül
 += 1;

177 i‡–
m_c⁄fig
->
scheduÀr_ty≥
 =
DRAM_FRFCFS
 ) {

178 
ƒeqs
 = 
m_‰fcfs_scheduÀr
->
	`num_≥ndög
();

179 i‡–
ƒeqs
 > 
max_mrqs_ãmp
)

180 
max_mrqs_ãmp
 = 
ƒeqs
;

182 
max_mrqs_ãmp
 = (max_mrqs_ãm∞> 
mrqq
->
	`gë_Àngth
())? max_mrqs_temp : mrqq->get_length();

184 
m_°©s
->
	`memœt°©_døm_ac˚ss
(
d©a
);

185 
	}
}

187 
	gdøm_t
::
	$scheduÀr_fifo
()

189 i‡(!
mrqq
->
	`em±y
()) {

190 
bkn
;

191 
døm_ªq_t
 *
hód_mrqq
 = 
mrqq
->
	`t›
();

192 
hód_mrqq
->
d©a
->
	`£t_°©us
(
IN_PARTITION_MC_BANK_ARB_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

193 
bkn
 = 
hód_mrqq
->
bk
;

194 i‡(!
bk
[
bkn
]->
mrq
)

195 
bk
[
bkn
]->
mrq
 = 
mrqq
->
	`p›
();

197 
	}
}

200 
	#DEC2ZERO
(
x
Ëx = (x)? (x-1Ë: 0;

	)

201 
	#SWAP
(
a
,
b
Ë®^b; b ^a;á ^b;

	)

203 
	gdøm_t
::
	$cy˛e
()

206 if–!
ªtu∫q
->
	`fuŒ
() ) {

207 
døm_ªq_t
 *
cmd
 = 
rwq
->
	`p›
();

208 if–
cmd
 ) {

209 #ifde‡
DRAM_VIEWCMD


210 
	`¥ötf
("\tDQ: BK%d Row:%03x Cﬁ:%03x", 
cmd
->
bk
, cmd->
row
, cmd->
cﬁ
 + cmd->
dqbyãs
);

212 
cmd
->
dqbyãs
 +
m_c⁄fig
->
BL
 * m_c⁄fig->
busW
 * m_c⁄fig->
gpu_n_mem_≥r_˘ær
;

213 i‡(
cmd
->
dqbyãs
 >cmd->
nbyãs
) {

214 
mem_„tch
 *
d©a
 = 
cmd
->data;

215 
d©a
->
	`£t_°©us
(
IN_PARTITION_MC_RETURNQ
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

216 if–
d©a
->
	`gë_ac˚ss_ty≥
(Ë!
L1_WRBK_ACC
 && d©a->gë_ac˚ss_ty≥(Ë!
L2_WRBK_ACC
 ) {

217 
d©a
->
	`£t_ª∂y
();

218 
ªtu∫q
->
	`push
(
d©a
);

220 
m_mem‹y_∑πôi⁄_unô
->
	`£t_d⁄e
(
d©a
);

221 
dñëe
 
d©a
;

223 
dñëe
 
cmd
;

225 #ifde‡
DRAM_VIEWCMD


226 
	`¥ötf
("\n");

234 
m_c⁄fig
->
scheduÀr_ty≥
) {

235 
DRAM_FIFO
: 
	`scheduÀr_fifo
(); ;

236 
DRAM_FRFCFS
: 
	`scheduÀr_‰fcfs
(); ;

238 
	`¥ötf
("Error: Unknown DRAM schedulerÅype\n");

239 
	`as£π
(0);

241 i‡–
m_c⁄fig
->
scheduÀr_ty≥
 =
DRAM_FRFCFS
 ) {

242 
ƒeqs
 = 
m_‰fcfs_scheduÀr
->
	`num_≥ndög
();

243 i‡–
ƒeqs
 > 
max_mrqs
) {

244 
max_mrqs
 = 
ƒeqs
;

246 
ave_mrqs
 +
ƒeqs
;

247 
ave_mrqs_∑πül
 +
ƒeqs
;

249 i‡(
mrqq
->
	`gë_Àngth
(Ë> 
max_mrqs
) {

250 
max_mrqs
 = 
mrqq
->
	`gë_Àngth
();

252 
ave_mrqs
 +
mrqq
->
	`gë_Àngth
();

253 
ave_mrqs_∑πül
 +
mrqq
->
	`gë_Àngth
();

256 
k
=
m_c⁄fig
->
nbk
;

257 
boﬁ
 
issued
 = 
Ál£
;

260 
i
=0;i<
m_c⁄fig
->
nbk
;i++) {

261 
j
 = (
i
 + 
¥io
Ë% 
m_c⁄fig
->
nbk
;

262 
gΩ
 = 
j
>>
m_c⁄fig
->
bk_èg_Àngth
;

263 i‡(
bk
[
j
]->
mrq
) {

264 
bk
[
j
]->
mrq
->
d©a
->
	`£t_°©us
(
IN_PARTITION_DRAM
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

266 i‡–!
issued
 && !
CCDc
 && !
bk
[
j
]->
RCDc
 &&

267 !(
bkgΩ
[
gΩ
]->
CCDLc
) &&

268 (
bk
[
j
]->
cuº_row
 =bk[j]->
mrq
->
row
) &&

269 (
bk
[
j
]->
mrq
->
rw
 =
READ
Ë&& (
WTRc
 == 0 ) &&

270 (
bk
[
j
]->
°©e
 =
BANK_ACTIVE
) &&

271 !
rwq
->
	`fuŒ
() ) {

272 i‡(
rw
==
WRITE
) {

273 
rw
=
READ
;

274 
rwq
->
	`£t_mö_Àngth
(
m_c⁄fig
->
CL
);

276 
rwq
->
	`push
(
bk
[
j
]->
mrq
);

277 
bk
[
j
]->
mrq
->
txbyãs
 +
m_c⁄fig
->
BL
 * m_c⁄fig->
busW
 * m_c⁄fig->
gpu_n_mem_≥r_˘ær
;

278 
CCDc
 = 
m_c⁄fig
->
tCCD
;

279 
bkgΩ
[
gΩ
]->
CCDLc
 = 
m_c⁄fig
->
tCCDL
;

280 
RTWc
 = 
m_c⁄fig
->
tRTW
;

281 
bk
[
j
]->
RTPc
 = 
m_c⁄fig
->
BL
/2;

282 
bkgΩ
[
gΩ
]->
RTPLc
 = 
m_c⁄fig
->
tRTPL
;

283 
issued
 = 
åue
;

284 
n_rd
++;

285 
bwutû
+
m_c⁄fig
->
BL
/2;

286 
bwutû_∑πül
 +
m_c⁄fig
->
BL
/2;

287 
bk
[
j
]->
n_ac˚ss
++;

288 #ifde‡
DRAM_VERIFY


289 
PRINT_CYCLE
=1;

290 
	`¥ötf
("\tRD Bk:%d Row:%03x Col:%03x \n",

291 
j
, 
bk
[j]->
cuº_row
,

292 
bk
[
j
]->
mrq
->
cﬁ
+bk[j]->mrq->
txbyãs
-
m_c⁄fig
->
BL
*m_c⁄fig->
busW
);

295 i‡–!(
bk
[
j
]->
mrq
->
txbyãs
 < bk[j]->mrq->
nbyãs
) ) {

296 
bk
[
j
]->
mrq
 = 
NULL
;

300 i‡–!
issued
 && !
CCDc
 && !
bk
[
j
]->
RCDWRc
 &&

301 !(
bkgΩ
[
gΩ
]->
CCDLc
) &&

302 (
bk
[
j
]->
cuº_row
 =bk[j]->
mrq
->
row
) &&

303 (
bk
[
j
]->
mrq
->
rw
 =
WRITE
Ë&& (
RTWc
 == 0 ) &&

304 (
bk
[
j
]->
°©e
 =
BANK_ACTIVE
) &&

305 !
rwq
->
	`fuŒ
() ) {

306 i‡(
rw
==
READ
) {

307 
rw
=
WRITE
;

308 
rwq
->
	`£t_mö_Àngth
(
m_c⁄fig
->
WL
);

310 
rwq
->
	`push
(
bk
[
j
]->
mrq
);

312 
bk
[
j
]->
mrq
->
txbyãs
 +
m_c⁄fig
->
BL
 * m_c⁄fig->
busW
 * m_c⁄fig->
gpu_n_mem_≥r_˘ær
;

313 
CCDc
 = 
m_c⁄fig
->
tCCD
;

314 
bkgΩ
[
gΩ
]->
CCDLc
 = 
m_c⁄fig
->
tCCDL
;

315 
WTRc
 = 
m_c⁄fig
->
tWTR
;

316 
bk
[
j
]->
WTPc
 = 
m_c⁄fig
->
tWTP
;

317 
issued
 = 
åue
;

318 
n_wr
++;

319 
bwutû
+=2;

320 
bwutû_∑πül
 +
m_c⁄fig
->
BL
/2;

321 #ifde‡
DRAM_VERIFY


322 
PRINT_CYCLE
=1;

323 
	`¥ötf
("\tWR Bk:%d Row:%03x Col:%03x \n",

324 
j
, 
bk
[j]->
cuº_row
,

325 
bk
[
j
]->
mrq
->
cﬁ
+bk[j]->mrq->
txbyãs
-
m_c⁄fig
->
BL
*m_c⁄fig->
busW
);

328 i‡–!(
bk
[
j
]->
mrq
->
txbyãs
 < bk[j]->mrq->
nbyãs
) ) {

329 
bk
[
j
]->
mrq
 = 
NULL
;

335 i‡–!
issued
 && !
RRDc
 &&

336 (
bk
[
j
]->
°©e
 =
BANK_IDLE
) &&

337 !
bk
[
j
]->
RPc
 && !bk[j]->
RCc
 ) {

338 #ifde‡
DRAM_VERIFY


339 
PRINT_CYCLE
=1;

340 
	`¥ötf
("\tACT BK:%d NewRow:%03x From:%03x \n",

341 
j
,
bk
[j]->
mrq
->
row
,bk[j]->
cuº_row
);

344 
bk
[
j
]->
cuº_row
 = bk[j]->
mrq
->
row
;

345 
bk
[
j
]->
°©e
 = 
BANK_ACTIVE
;

346 
RRDc
 = 
m_c⁄fig
->
tRRD
;

347 
bk
[
j
]->
RCDc
 = 
m_c⁄fig
->
tRCD
;

348 
bk
[
j
]->
RCDWRc
 = 
m_c⁄fig
->
tRCDWR
;

349 
bk
[
j
]->
RASc
 = 
m_c⁄fig
->
tRAS
;

350 
bk
[
j
]->
RCc
 = 
m_c⁄fig
->
tRC
;

351 
¥io
 = (
j
 + 1Ë% 
m_c⁄fig
->
nbk
;

352 
issued
 = 
åue
;

353 
n_a˘_∑πül
++;

354 
n_a˘
++;

359 i‡–(!
issued
) &&

360 (
bk
[
j
]->
cuº_row
 !bk[j]->
mrq
->
row
) &&

361 (
bk
[
j
]->
°©e
 =
BANK_ACTIVE
) &&

362 (!
bk
[
j
]->
RASc
 && !bk[j]->
WTPc
 &&

363 !
bk
[
j
]->
RTPc
 &&

364 !
bkgΩ
[
gΩ
]->
RTPLc
) ) {

366 
bk
[
j
]->
°©e
 = 
BANK_IDLE
;

367 
bk
[
j
]->
RPc
 = 
m_c⁄fig
->
tRP
;

368 
¥io
 = (
j
 + 1Ë% 
m_c⁄fig
->
nbk
;

369 
issued
 = 
åue
;

370 
n_¥e
++;

371 
n_¥e_∑πül
++;

372 #ifde‡
DRAM_VERIFY


373 
PRINT_CYCLE
=1;

374 
	`¥ötf
("\tPRE BK:%d Row:%03x \n", 
j
,
bk
[j]->
cuº_row
);

378 i‡(!
CCDc
 && !
RRDc
 && !
RTWc
 && !
WTRc
 && !
bk
[
j
]->
RCDc
 && !bk[j]->
RASc


379 && !
bk
[
j
]->
RCc
 && !bk[j]->
RPc
 && !bk[j]->
RCDWRc
Ë
k
--;

380 
bk
[
i
]->
n_idÀ
++;

383 i‡(!
issued
) {

384 
n_n›
++;

385 
n_n›_∑πül
++;

386 #ifde‡
DRAM_VIEWCMD


387 
	`¥ötf
("\tNOP ");

390 i‡(
k
) {

391 
n_a˘ivôy
++;

392 
n_a˘ivôy_∑πül
++;

394 
n_cmd
++;

395 
n_cmd_∑πül
++;

398 
	`DEC2ZERO
(
RRDc
);

399 
	`DEC2ZERO
(
CCDc
);

400 
	`DEC2ZERO
(
RTWc
);

401 
	`DEC2ZERO
(
WTRc
);

402 
j
=0;j<
m_c⁄fig
->
nbk
;j++) {

403 
	`DEC2ZERO
(
bk
[
j
]->
RCDc
);

404 
	`DEC2ZERO
(
bk
[
j
]->
RASc
);

405 
	`DEC2ZERO
(
bk
[
j
]->
RCc
);

406 
	`DEC2ZERO
(
bk
[
j
]->
RPc
);

407 
	`DEC2ZERO
(
bk
[
j
]->
RCDWRc
);

408 
	`DEC2ZERO
(
bk
[
j
]->
WTPc
);

409 
	`DEC2ZERO
(
bk
[
j
]->
RTPc
);

411 
j
=0; j<
m_c⁄fig
->
nbkgΩ
; j++) {

412 
	`DEC2ZERO
(
bkgΩ
[
j
]->
CCDLc
);

413 
	`DEC2ZERO
(
bkgΩ
[
j
]->
RTPLc
);

416 #ifde‡
DRAM_VISUALIZE


417 
	`visuÆize
();

419 
	}
}

422 
˛ass
 
mem_„tch
* 
	gdøm_t
::
	$p›
()

424  
ªtu∫q
->
	`p›
();

425 
	}
}

427 
	gdøm_t
::
	$¥öt
–
FILE
* 
simFûe
) const

429 
i
;

430 
	`Ârötf
(
simFûe
,"DRAM[%d]: %d bks, busW=%d BL=%d CL=%d, ",

431 
id
, 
m_c⁄fig
->
nbk
, m_c⁄fig->
busW
, m_c⁄fig->
BL
, m_c⁄fig->
CL
 );

432 
	`Ârötf
(
simFûe
,"tRRD=%dÅCCD=%d,ÅRCD=%dÅRAS=%dÅRP=%dÅRC=%d\n",

433 
m_c⁄fig
->
tCCD
, m_c⁄fig->
tRRD
, m_c⁄fig->
tRCD
, m_c⁄fig->
tRAS
, m_c⁄fig->
tRP
, m_c⁄fig->
tRC
 );

434 
	`Ârötf
(
simFûe
,"n_cmd=%dÇ_nop=%dÇ_act=%dÇ_pre=%dÇ_req=%dÇ_rd=%dÇ_write=%d bw_util=%.4g\n",

435 
n_cmd
, 
n_n›
, 
n_a˘
, 
n_¥e
, 
n_ªq
, 
n_rd
, 
n_wr
,

436 ()
bwutû
/
n_cmd
);

437 
	`Ârötf
(
simFûe
,"n_activity=%d dram_eff=%.4g\n",

438 
n_a˘ivôy
, ()
bwutû
/n_activity);

439 
i
=0;i<
m_c⁄fig
->
nbk
;i++) {

440 
	`Ârötf
(
simFûe
, "bk%d: %d®%dò",
i
,
bk
[i]->
n_ac˚ss
,bk[i]->
n_idÀ
);

442 
	`Ârötf
(
simFûe
, "\n");

443 
	`Ârötf
(
simFûe
, "dram_util_bins:");

444 
i
=0;i<10;i++Ë
	`Ârötf
(
simFûe
, " %d", 
døm_utû_bös
[i]);

445 
	`Ârötf
(
simFûe
, "\ndram_eff_bins:");

446 
i
=0;i<10;i++Ë
	`Ârötf
(
simFûe
, " %d", 
døm_eff_bös
[i]);

447 
	`Ârötf
(
simFûe
, "\n");

448 
	`Ârötf
(
simFûe
, "mrqq: max=%dávg=%g\n", 
max_mrqs
, ()
ave_mrqs
/
n_cmd
);

449 
	}
}

451 
	gdøm_t
::
	$visuÆize
() const

453 
	`¥ötf
("RRDc=%d CCDc=%d mrqq.Length=%dÑwq.Length=%d\n",

454 
RRDc
, 
CCDc
, 
mrqq
->
	`gë_Àngth
(),
rwq
->get_length());

455 
i
=0;i<
m_c⁄fig
->
nbk
;i++) {

456 
	`¥ötf
("BK%d: state=%c curr_row=%03x, %2d %2d %2d %2d %p ",

457 
i
, 
bk
[i]->
°©e
, bk[i]->
cuº_row
,

458 
bk
[
i
]->
RCDc
, bk[i]->
RASc
,

459 
bk
[
i
]->
RPc
, bk[i]->
RCc
,

460 
bk
[
i
]->
mrq
 );

461 i‡(
bk
[
i
]->
mrq
)

462 
	`¥ötf
("txf: %d %d", 
bk
[
i
]->
mrq
->
nbyãs
, bk[i]->mrq->
txbyãs
);

463 
	`¥ötf
("\n");

465 i‡–
m_‰fcfs_scheduÀr
 )

466 
m_‰fcfs_scheduÀr
->
	`¥öt
(
°dout
);

467 
	}
}

469 
	gdøm_t
::
	$¥öt_°©
–
FILE
* 
simFûe
 )

471 
	`Ârötf
(
simFûe
,"DRAM (%d):Ç_cmd=%dÇ_nop=%dÇ_act=%dÇ_pre=%dÇ_req=%dÇ_rd=%dÇ_write=%d bw_util=%.4g ",

472 
id
, 
n_cmd
, 
n_n›
, 
n_a˘
, 
n_¥e
, 
n_ªq
, 
n_rd
, 
n_wr
,

473 ()
bwutû
/
n_cmd
);

474 
	`Ârötf
(
simFûe
, "mrqq: %d %.4g mrqsmax=%d ", 
max_mrqs
, ()
ave_mrqs
/
n_cmd
, 
max_mrqs_ãmp
);

475 
	`Ârötf
(
simFûe
, "\n");

476 
	`Ârötf
(
simFûe
, "dram_util_bins:");

477 
i
=0;i<10;i++Ë
	`Ârötf
(
simFûe
, " %d", 
døm_utû_bös
[i]);

478 
	`Ârötf
(
simFûe
, "\ndram_eff_bins:");

479 
i
=0;i<10;i++Ë
	`Ârötf
(
simFûe
, " %d", 
døm_eff_bös
[i]);

480 
	`Ârötf
(
simFûe
, "\n");

481 
max_mrqs_ãmp
 = 0;

482 
	}
}

484 
	gdøm_t
::
	$visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 )

487 
	`gz¥ötf
(
visuÆizî_fûe
,"dømncmd: %u %u\n",
id
, 
n_cmd_∑πül
);

488 
	`gz¥ötf
(
visuÆizî_fûe
,"dømn›: %u %u\n",
id
,
n_n›_∑πül
);

489 
	`gz¥ötf
(
visuÆizî_fûe
,"døm«˘: %u %u\n",
id
,
n_a˘_∑πül
);

490 
	`gz¥ötf
(
visuÆizî_fûe
,"døm≈ª: %u %u\n",
id
,
n_¥e_∑πül
);

491 
	`gz¥ötf
(
visuÆizî_fûe
,"dømƒeq: %u %u\n",
id
,
n_ªq_∑πül
);

492 
	`gz¥ötf
(
visuÆizî_fûe
,"dømavemrqs: %u %u\n",
id
,

493 
n_cmd_∑πül
?(
ave_mrqs_∑πül
/n_cmd_partial ):0);

496 
	`gz¥ötf
(
visuÆizî_fûe
,"dramutil: %u %u\n",

497 
id
,
n_cmd_∑πül
?100*
bwutû_∑πül
/n_cmd_partial:0);

498 
	`gz¥ötf
(
visuÆizî_fûe
,"drameff: %u %u\n",

499 
id
,
n_a˘ivôy_∑πül
?100*
bwutû_∑πül
/n_activity_partial:0);

502 
bwutû_∑πül
 = 0;

503 
n_a˘ivôy_∑πül
 = 0;

504 
ave_mrqs_∑πül
 = 0;

505 
n_cmd_∑πül
 = 0;

506 
n_n›_∑πül
 = 0;

507 
n_a˘_∑πül
 = 0;

508 
n_¥e_∑πül
 = 0;

509 
n_ªq_∑πül
 = 0;

512 
j
 = 0; j < 
m_c⁄fig
->
nbk
; j++) {

513 
	`gz¥ötf
(
visuÆizî_fûe
,"dømglobÆ_acc_r: %u %u %u\n", 
id
, 
j
,

514 
m_°©s
->
mem_ac˚ss_ty≥_°©s
[
GLOBAL_ACC_R
][
id
][
j
]);

515 
	`gz¥ötf
(
visuÆizî_fûe
,"dømglobÆ_acc_w: %u %u %u\n", 
id
, 
j
,

516 
m_°©s
->
mem_ac˚ss_ty≥_°©s
[
GLOBAL_ACC_W
][
id
][
j
]);

517 
	`gz¥ötf
(
visuÆizî_fûe
,"dømloˇl_acc_r: %u %u %u\n", 
id
, 
j
,

518 
m_°©s
->
mem_ac˚ss_ty≥_°©s
[
LOCAL_ACC_R
][
id
][
j
]);

519 
	`gz¥ötf
(
visuÆizî_fûe
,"dømloˇl_acc_w: %u %u %u\n", 
id
, 
j
,

520 
m_°©s
->
mem_ac˚ss_ty≥_°©s
[
LOCAL_ACC_W
][
id
][
j
]);

521 
	`gz¥ötf
(
visuÆizî_fûe
,"dømc⁄°_acc_r: %u %u %u\n", 
id
, 
j
,

522 
m_°©s
->
mem_ac˚ss_ty≥_°©s
[
CONST_ACC_R
][
id
][
j
]);

523 
	`gz¥ötf
(
visuÆizî_fûe
,"dømãxtuª_acc_r: %u %u %u\n", 
id
, 
j
,

524 
m_°©s
->
mem_ac˚ss_ty≥_°©s
[
TEXTURE_ACC_R
][
id
][
j
]);

526 
	}
}

	@src/gpgpu-sim/dram.h

29 #i‚de‡
DRAM_H


30 
	#DRAM_H


	)

32 
	~"dñayqueue.h
"

33 
	~<£t
>

34 
	~<zlib.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

38 
	#READ
 'R'

39 
	#WRITE
 'W'

	)

40 
	#BANK_IDLE
 'I'

	)

41 
	#BANK_ACTIVE
 'A'

	)

43 ˛as†
	cdøm_ªq_t
 {

44 
	mpublic
:

45 
døm_ªq_t
–
˛ass
 
mem_„tch
 *
d©a
 );

47 
	mrow
;

48 
	mcﬁ
;

49 
	mbk
;

50 
	mnbyãs
;

51 
	mtxbyãs
;

52 
	mdqbyãs
;

53 
	mage
;

54 
	mtime°amp
;

55 
	mrw
;

56 
	maddr
;

57 
	mö£πi⁄_time
;

58 
˛ass
 
mem_„tch
 * 
	md©a
;

61 
	sb™kgΩ_t


63 
	mCCDLc
;

64 
	mRTPLc
;

67 
	sb™k_t


69 
	mRCDc
;

70 
	mRCDWRc
;

71 
	mRASc
;

72 
	mRPc
;

73 
	mRCc
;

74 
	mWTPc
;

75 
	mRTPc
;

77 
	mrw
;

78 
	m°©e
;

79 
	mcuº_row
;

81 
døm_ªq_t
 *
	mmrq
;

83 
	mn_ac˚ss
;

84 
	mn_wrôes
;

85 
	mn_idÀ
;

87 
	mbkgΩödex
;

90 
	gmem_„tch
;

92 ˛as†
	cdøm_t


94 
	mpublic
:

95 
døm_t
–
∑rôi⁄_id
, c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
, 
˛ass
 
mem‹y_°©s_t
 *
°©s
,

96 
˛ass
 
mem‹y_∑πôi⁄_unô
 *
mp
 );

98 
boﬁ
 
	$fuŒ
() const;

99 
	$¥öt
–
FILE
* 
simFûe
 ) const;

100 
	$visuÆize
() const;

101 
	`¥öt_°©
–
FILE
* 
simFûe
 );

102 
	$que_Àngth
() const;

103 
boﬁ
 
	$ªtu∫q_fuŒ
() const;

104 
	$queue_limô
() const;

105 
	`visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 );

107 
˛ass
 
mem_„tch
* 
	`p›
();

108 
	`push
–
˛ass
 
mem_„tch
 *
d©a
 );

109 
	`cy˛e
();

110 
	`døm_log
 (
èsk
);

112 
˛ass
 
mem‹y_∑πôi⁄_unô
 *
m_mem‹y_∑πôi⁄_unô
;

113 
id
;

115 
¥iv©e
:

116 
	`scheduÀr_fifo
();

117 
	`scheduÀr_‰fcfs
();

119 c⁄° 
mem‹y_c⁄fig
 *
m_c⁄fig
;

121 
b™kgΩ_t
 **
bkgΩ
;

123 
b™k_t
 **
bk
;

124 
¥io
;

126 
RRDc
;

127 
CCDc
;

128 
RTWc
;

129 
WTRc
;

131 
rw
;

133 
≥ndög_wrôes
;

135 
fifo_pùñöe
<
døm_ªq_t
> *
rwq
;

136 
fifo_pùñöe
<
døm_ªq_t
> *
mrqq
;

139 
fifo_pùñöe
<
mem_„tch
> *
ªtu∫q
;

141 
døm_utû_bös
[10];

142 
døm_eff_bös
[10];

143 
œ°_n_cmd
, 
œ°_n_a˘ivôy
, 
œ°_bwutû
;

145 
n_cmd
;

146 
n_a˘ivôy
;

147 
n_n›
;

148 
n_a˘
;

149 
n_¥e
;

150 
n_rd
;

151 
n_wr
;

152 
n_ªq
;

153 
max_mrqs_ãmp
;

155 
bwutû
;

156 
max_mrqs
;

157 
ave_mrqs
;

159 
˛ass
 
‰fcfs_scheduÀr
* 
m_‰fcfs_scheduÀr
;

161 
n_cmd_∑πül
;

162 
n_a˘ivôy_∑πül
;

163 
n_n›_∑πül
;

164 
n_a˘_∑πül
;

165 
n_¥e_∑πül
;

166 
n_ªq_∑πül
;

167 
ave_mrqs_∑πül
;

168 
bwutû_∑πül
;

170 
mem‹y_°©s_t
 *
m_°©s
;

171 
˛ass
 
Sèts
* 
mrqq_Di°
;

173 
‰õnd
 
˛ass
 
‰fcfs_scheduÀr
;

	@src/gpgpu-sim/dram_sched.cc

28 
	~"døm_sched.h
"

29 
	~"gpu-misc.h
"

30 
	~"gpu-sim.h
"

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

32 
	~"mem_œãncy_°©.h
"

34 
	g‰fcfs_scheduÀr
::
	$‰fcfs_scheduÀr
–c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
, 
døm_t
 *
dm
, 
mem‹y_°©s_t
 *
°©s
 )

36 
m_c⁄fig
 = 
c⁄fig
;

37 
m_°©s
 = 
°©s
;

38 
m_num_≥ndög
 = 0;

39 
m_døm
 = 
dm
;

40 
m_queue
 = 
√w
 
°d
::
li°
<
døm_ªq_t
*>[
m_c⁄fig
->
nbk
];

41 
m_bös
 = 
√w
 
°d
::
m≠
<,°d::
li°
<°d::li°<
døm_ªq_t
*>::
ôî©‹
> >[ 
m_c⁄fig
->
nbk
 ];

42 
m_œ°_row
 = 
√w
 
°d
::
li°
<°d::li°<
døm_ªq_t
*>::
ôî©‹
>*[ 
m_c⁄fig
->
nbk
 ];

43 
cuº_row_£rvi˚_time
 = 
√w
 [
m_c⁄fig
->
nbk
];

44 
row_£rvi˚_time°amp
 = 
√w
 [
m_c⁄fig
->
nbk
];

45  
i
=0; i < 
m_c⁄fig
->
nbk
; i++ ) {

46 
m_queue
[
i
].
	`˛ór
();

47 
m_bös
[
i
].
	`˛ór
();

48 
m_œ°_row
[
i
] = 
NULL
;

49 
cuº_row_£rvi˚_time
[
i
] = 0;

50 
row_£rvi˚_time°amp
[
i
] = 0;

53 
	}
}

55 
	g‰fcfs_scheduÀr
::
	$add_ªq
–
døm_ªq_t
 *
ªq
 )

57 
m_num_≥ndög
++;

58 
m_queue
[
ªq
->
bk
].
	`push_‰⁄t
(req);

59 
°d
::
li°
<
døm_ªq_t
*>::
ôî©‹
 
±r
 = 
m_queue
[
ªq
->
bk
].
	`begö
();

60 
m_bös
[
ªq
->
bk
][ªq->
row
].
	`push_‰⁄t
–
±r
 );

61 
	}
}

63 
	g‰fcfs_scheduÀr
::
	$d©a_cﬁÀ˘i⁄
(
b™k
)

65 i‡(
gpu_sim_cy˛e
 > 
row_£rvi˚_time°amp
[
b™k
]) {

66 
cuº_row_£rvi˚_time
[
b™k
] = 
gpu_sim_cy˛e
 - 
row_£rvi˚_time°amp
[bank];

67 i‡(
cuº_row_£rvi˚_time
[
b™k
] > 
m_°©s
->
max_£rvi˚time2ßmîow
[
m_døm
->
id
][bank])

68 
m_°©s
->
max_£rvi˚time2ßmîow
[
m_døm
->
id
][
b™k
] = 
cuº_row_£rvi˚_time
[bank];

70 
cuº_row_£rvi˚_time
[
b™k
] = 0;

71 
row_£rvi˚_time°amp
[
b™k
] = 
gpu_sim_cy˛e
;

72 i‡(
m_°©s
->
c⁄cuºít_row_ac˚ss
[
m_døm
->
id
][
b™k
] > m_°©s->
max_c⁄c_ac˚ss2ßmîow
[m_dram->id][bank]) {

73 
m_°©s
->
max_c⁄c_ac˚ss2ßmîow
[
m_døm
->
id
][
b™k
] = m_°©s->
c⁄cuºít_row_ac˚ss
[m_dram->id][bank];

75 
m_°©s
->
c⁄cuºít_row_ac˚ss
[
m_døm
->
id
][
b™k
] = 0;

76 
m_°©s
->
num_a˘iv©es
[
m_døm
->
id
][
b™k
]++;

77 
	}
}

79 
døm_ªq_t
 *
	g‰fcfs_scheduÀr
::
	$scheduÀ
–
b™k
, 
cuº_row
 )

81 
row_hô
 = 0;

82 i‡–
m_œ°_row
[
b™k
] =
NULL
 ) {

83 i‡–
m_queue
[
b™k
].
	`em±y
() )

84  
NULL
;

86 
°d
::
m≠
<,°d::
li°
<°d::li°<
døm_ªq_t
*>::
ôî©‹
> >::ôî©‹ 
bö_±r
 = 
m_bös
[
b™k
].
	`föd
–
cuº_row
 );

87 i‡–
bö_±r
 =
m_bös
[
b™k
].
	`íd
()) {

88 
døm_ªq_t
 *
ªq
 = 
m_queue
[
b™k
].
	`back
();

89 
bö_±r
 = 
m_bös
[
b™k
].
	`föd
–
ªq
->
row
 );

90 
	`as£π
–
bö_±r
 !
m_bös
[
b™k
].
	`íd
() );

91 
m_œ°_row
[
b™k
] = &(
bö_±r
->
£c⁄d
);

92 
	`d©a_cﬁÀ˘i⁄
(
b™k
);

94 
m_œ°_row
[
b™k
] = &(
bö_±r
->
£c⁄d
);

98 
row_hô
=1;

99 
°d
::
li°
<
døm_ªq_t
*>::
ôî©‹
 
√xt
 = 
m_œ°_row
[
b™k
]->
	`back
();

100 
døm_ªq_t
 *
ªq
 = (*
√xt
);

102 
m_°©s
->
c⁄cuºít_row_ac˚ss
[
m_døm
->
id
][
b™k
]++;

103 
m_°©s
->
row_ac˚ss
[
m_døm
->
id
][
b™k
]++;

104 
m_œ°_row
[
b™k
]->
	`p›_back
();

106 
m_queue
[
b™k
].
	`îa£
(
√xt
);

107 i‡–
m_œ°_row
[
b™k
]->
	`em±y
() ) {

108 
m_bös
[
b™k
].
	`îa£
–
ªq
->
row
 );

109 
m_œ°_row
[
b™k
] = 
NULL
;

111 #ifde‡
DEBUG_FAST_IDEAL_SCHED


112 i‡–
ªq
 )

113 
	`¥ötf
("%08u : DRAM(%u) scheduling memoryÑequestÅo bank=%u,Ñow=%u\n",

114 ()
gpu_sim_cy˛e
, 
m_døm
->
id
, 
ªq
->
bk
,Ñeq->
row
 );

116 
	`as£π
–
ªq
 !
NULL
 && 
m_num_≥ndög
 != 0 );

117 
m_num_≥ndög
--;

119  
ªq
;

120 
	}
}

123 
	g‰fcfs_scheduÀr
::
	$¥öt
–
FILE
 *
Â
 )

125  
b
=0; b < 
m_c⁄fig
->
nbk
; b++ ) {

126 
	`¥ötf
(" %u: queuêÀngth = %u\n", 
b
, ()
m_queue
[b].
	`size
() );

128 
	}
}

130 
	gdøm_t
::
	$scheduÀr_‰fcfs
()

132 
mrq_œãncy
;

133 
‰fcfs_scheduÀr
 *
sched
 = 
m_‰fcfs_scheduÀr
;

134  !
mrqq
->
	`em±y
(Ë&& (!
m_c⁄fig
->
gpgpu_døm_sched_queue_size
 || 
sched
->
	`num_≥ndög
() < m_config->gpgpu_dram_sched_queue_size)) {

135 
døm_ªq_t
 *
ªq
 = 
mrqq
->
	`p›
();

136 
ªq
->
d©a
->
	`£t_°©us
(
IN_PARTITION_MC_INPUT_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

137 
sched
->
	`add_ªq
(
ªq
);

140 
døm_ªq_t
 *
ªq
;

141 
i
;

142  
i
=0; i < 
m_c⁄fig
->
nbk
; i++ ) {

143 
b
 = (
i
+
¥io
)%
m_c⁄fig
->
nbk
;

144 i‡–!
bk
[
b
]->
mrq
 ) {

146 
ªq
 = 
sched
->
	`scheduÀ
(
b
, 
bk
[b]->
cuº_row
);

148 i‡–
ªq
 ) {

149 
ªq
->
d©a
->
	`£t_°©us
(
IN_PARTITION_MC_BANK_ARB_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

150 
¥io
 = (¥io+1)%
m_c⁄fig
->
nbk
;

151 
bk
[
b
]->
mrq
 = 
ªq
;

152 i‡(
m_c⁄fig
->
gpgpu_memœãncy_°©
) {

153 
mrq_œãncy
 = 
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
 - 
bk
[
b
]->
mrq
->
time°amp
;

154 
bk
[
b
]->
mrq
->
time°amp
 = 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
;

155 
m_°©s
->
mrq_œt_èbÀ
[
	`LOGB2
(
mrq_œãncy
)]++;

156 i‡(
mrq_œãncy
 > 
m_°©s
->
max_mrq_œãncy
) {

157 
m_°©s
->
max_mrq_œãncy
 = 
mrq_œãncy
;

165 
	}
}

	@src/gpgpu-sim/dram_sched.h

28 #i‚de‡
døm_sched_h_INCLUDED


29 
	#døm_sched_h_INCLUDED


	)

31 
	~"døm.h
"

32 
	~"shadî.h
"

33 
	~"gpu-sim.h
"

34 
	~"gpu-misc.h
"

35 
	~<li°
>

36 
	~<m≠
>

38 ˛as†
	c‰fcfs_scheduÀr
 {

39 
	mpublic
:

40 
‰fcfs_scheduÀr
–c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
, 
døm_t
 *
dm
, 
mem‹y_°©s_t
 *
°©s
 );

41 
add_ªq
–
døm_ªq_t
 *
ªq
 );

42 
d©a_cﬁÀ˘i⁄
(
b™k
);

43 
døm_ªq_t
 *
scheduÀ
–
b™k
, 
cuº_row
 );

44 
¥öt
–
FILE
 *
Â
 );

45 
	$num_≥ndög
(Ëc⁄° {  
m_num_≥ndög
;}

47 
¥iv©e
:

48 c⁄° 
mem‹y_c⁄fig
 *
m_c⁄fig
;

49 
døm_t
 *
m_døm
;

50 
m_num_≥ndög
;

51 
°d
::
li°
<
døm_ªq_t
*> *
m_queue
;

52 
°d
::
m≠
<,°d::
li°
<°d::li°<
døm_ªq_t
*>::
ôî©‹
> > *
m_bös
;

53 
°d
::
li°
<°d::li°<
døm_ªq_t
*>::
ôî©‹
> **
m_œ°_row
;

54 *
cuº_row_£rvi˚_time
;

55 *
row_£rvi˚_time°amp
;

57 
mem‹y_°©s_t
 *
m_°©s
;

58 
	}
};

	@src/gpgpu-sim/gpu-cache.cc

28 
	~"gpu-ˇche.h
"

29 
	~"°©-toﬁ.h
"

30 
	~<as£π.h
>

32 
	gèg_¨øy
::~
	$èg_¨øy
()

34 
dñëe
 
m_löes
;

35 
	}
}

37 
	gèg_¨øy
::
	$èg_¨øy
–c⁄° 
ˇche_c⁄fig
 &
c⁄fig
, 
c‹e_id
, 
ty≥_id
 )

38 : 
	$m_c⁄fig
(
c⁄fig
)

40 
	`as£π
–
m_c⁄fig
.
m_wrôe_pﬁicy
 =
READ_ONLY
 );

41 
m_löes
 = 
√w
 
ˇche_block_t
[ 
c⁄fig
.
	`gë_num_löes
()];

44 
m_¥ev_¢≠shŸ_ac˚ss
 = 0;

45 
m_¥ev_¢≠shŸ_miss
 = 0;

46 
m_¥ev_¢≠shŸ_≥ndög_hô
 = 0;

47 
m_c‹e_id
 = 
c‹e_id
;

48 
m_ty≥_id
 = 
ty≥_id
;

49 
	}
}

51 
ˇche_ªque°_°©us
 
	gèg_¨øy
::
	$¥obe
–
√w_addr_ty≥
 
addr
, &
idx
 ) const {

52 
	`as£π
–
m_c⁄fig
.
m_wrôe_pﬁicy
 =
READ_ONLY
 );

53 
£t_ödex
 = 
m_c⁄fig
.
	`£t_ödex
(
addr
);

54 
√w_addr_ty≥
 
èg
 = 
m_c⁄fig
.
	`èg
(
addr
);

56 
övÆid_löe
 = ()-1;

57 
vÆid_löe
 = ()-1;

58 
vÆid_time°amp
 = ()-1;

60 
boﬁ
 
Æl_ª£rved
 = 
åue
;

63 
way
=0; way<
m_c⁄fig
.
m_assoc
; way++) {

64 
ödex
 = 
£t_ödex
*
m_c⁄fig
.
m_assoc
+
way
;

65 
ˇche_block_t
 *
löe
 = &
m_löes
[
ödex
];

66 i‡(
löe
->
m_èg
 =
èg
) {

67 i‡–
löe
->
m_°©us
 =
RESERVED
 ) {

68 
idx
 = 
ödex
;

69  
HIT_RESERVED
;

70 } i‡–
löe
->
m_°©us
 =
VALID
 ) {

71 
idx
 = 
ödex
;

72  
HIT
;

73 } i‡–
löe
->
m_°©us
 =
MODIFIED
 ) {

74 
idx
 = 
ödex
;

75  
HIT
;

77 
	`as£π
–
löe
->
m_°©us
 =
INVALID
 );

80 i‡(
löe
->
m_°©us
 !
RESERVED
) {

81 
Æl_ª£rved
 = 
Ál£
;

82 i‡(
löe
->
m_°©us
 =
INVALID
) {

83 
övÆid_löe
 = 
ödex
;

86 i‡–
m_c⁄fig
.
m_ª∂a˚mít_pﬁicy
 =
LRU
 ) {

87 i‡–
löe
->
m_œ°_ac˚ss_time
 < 
vÆid_time°amp
 ) {

88 
vÆid_time°amp
 = 
löe
->
m_œ°_ac˚ss_time
;

89 
vÆid_löe
 = 
ödex
;

91 } i‡–
m_c⁄fig
.
m_ª∂a˚mít_pﬁicy
 =
FIFO
 ) {

92 i‡–
löe
->
m_Æloc_time
 < 
vÆid_time°amp
 ) {

93 
vÆid_time°amp
 = 
löe
->
m_Æloc_time
;

94 
vÆid_löe
 = 
ödex
;

100 i‡–
Æl_ª£rved
 ) {

101 
	`as£π
–
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_MISS
 );

102  
RESERVATION_FAIL
;

105 i‡–
övÆid_löe
 != ()-1 ) {

106 
idx
 = 
övÆid_löe
;

107 } i‡–
vÆid_löe
 != ()-1) {

108 
idx
 = 
vÆid_löe
;

109 } 
	`ab‹t
();

111  
MISS
;

112 
	}
}

114 
ˇche_ªque°_°©us
 
	gèg_¨øy
::
	$ac˚ss
–
√w_addr_ty≥
 
addr
, 
time
, &
idx
 )

116 
boﬁ
 
wb
=
Ál£
;

117 
ˇche_block_t
 
evi˘ed
;

118 
ˇche_ªque°_°©us
 
ªsu…
 = 
	`ac˚ss
(
addr
,
time
,
idx
,
wb
,
evi˘ed
);

119 
	`as£π
(!
wb
);

120  
ªsu…
;

121 
	}
}

123 
ˇche_ªque°_°©us
 
	gèg_¨øy
::
	$ac˚ss
–
√w_addr_ty≥
 
addr
, 
time
, &
idx
, 
boﬁ
 &
wb
, 
ˇche_block_t
 &
evi˘ed
 )

125 
m_ac˚ss
++;

126 
	`shadî_ˇche_ac˚ss_log
(
m_c‹e_id
, 
m_ty≥_id
, 0);

127 
ˇche_ªque°_°©us
 
°©us
 = 
	`¥obe
(
addr
,
idx
);

128 
°©us
) {

129 
HIT_RESERVED
:

130 
m_≥ndög_hô
++;

131 
HIT
:

132 
m_löes
[
idx
].
m_œ°_ac˚ss_time
=
time
;

134 
MISS
:

135 
m_miss
++;

136 
	`shadî_ˇche_ac˚ss_log
(
m_c‹e_id
, 
m_ty≥_id
, 1);

137 i‡–
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_MISS
 ) {

138 if–
m_löes
[
idx
].
m_°©us
 =
MODIFIED
 ) {

139 
wb
 = 
åue
;

140 
evi˘ed
 = 
m_löes
[
idx
];

142 
m_löes
[
idx
].
	`Æloˇã
–
m_c⁄fig
.
	`èg
(
addr
), m_c⁄fig.
	`block_addr
◊ddr), 
time
 );

145 
RESERVATION_FAIL
:

146 
m_miss
++;

147 
	`shadî_ˇche_ac˚ss_log
(
m_c‹e_id
, 
m_ty≥_id
, 1);

150  
°©us
;

151 
	}
}

153 
	gèg_¨øy
::
	$fûl
–
√w_addr_ty≥
 
addr
, 
time
 )

155 
	`as£π
–
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_FILL
 );

156 
idx
;

157 
ˇche_ªque°_°©us
 
°©us
 = 
	`¥obe
(
addr
,
idx
);

158 
	`as£π
(
°©us
==
MISS
);

159 
m_löes
[
idx
].
	`Æloˇã
–
m_c⁄fig
.
	`èg
(
addr
), m_c⁄fig.
	`block_addr
◊ddr), 
time
 );

160 
m_löes
[
idx
].
	`fûl
(
time
);

161 
	}
}

163 
	gèg_¨øy
::
	$fûl
–
ödex
, 
time
 )

165 
	`as£π
–
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_MISS
 );

166 
m_löes
[
ödex
].
	`fûl
(
time
);

167 
	}
}

169 
	gèg_¨øy
::
	$Êush
()

171 
i
=0; i < 
m_c⁄fig
.
	`gë_num_löes
(); i++)

172 
m_löes
[
i
].
m_°©us
 = 
INVALID
;

173 
	}
}

175 
	gèg_¨øy
::
	$wödowed_miss_øã
( ) const

177 
n_ac˚ss
 = 
m_ac˚ss
 - 
m_¥ev_¢≠shŸ_ac˚ss
;

178 
n_miss
 = 
m_miss
 - 
m_¥ev_¢≠shŸ_miss
;

181 
mis§©e
 = 0.0f;

182 i‡(
n_ac˚ss
 != 0)

183 
mis§©e
 = (Ë
n_miss
 / 
n_ac˚ss
;

184  
mis§©e
;

185 
	}
}

187 
	gèg_¨øy
::
	$√w_wödow
()

189 
m_¥ev_¢≠shŸ_ac˚ss
 = 
m_ac˚ss
;

190 
m_¥ev_¢≠shŸ_miss
 = 
m_miss
;

191 
m_¥ev_¢≠shŸ_≥ndög_hô
 = 
m_≥ndög_hô
;

192 
	}
}

194 
	gèg_¨øy
::
	$¥öt
–
FILE
 *
°ªam
, &
tŸÆ_ac˚ss
, &
tŸÆ_mis£s
 ) const

196 
m_c⁄fig
.
	`¥öt
(
°ªam
);

197 
	`Ârötf
–
°ªam
, "\t\tAccess = %d, Miss = %d (%.3g), PendingHit = %d (%.3g)\n",

198 
m_ac˚ss
, 
m_miss
, () m_miss / m_access,

199 
m_≥ndög_hô
, (Ëm_≥ndög_hô / 
m_ac˚ss
);

200 
tŸÆ_mis£s
+=
m_miss
;

201 
tŸÆ_ac˚ss
+=
m_ac˚ss
;

202 
	}
}

204 
boﬁ
 
was_wrôe_£¡
–c⁄° 
°d
::
li°
<
ˇche_evít
> &
evíts
 )

206  
°d
::
li°
<
ˇche_evít
>::
c⁄°_ôî©‹
 
e
=
evíts
.
begö
(); 
	ge
!Ûvíts.
íd
();É++ ) {

207 if–*
	ge
 =
WRITE_REQUEST_SENT
 )

208  
åue
;

210  
	gÁl£
;

213 
boﬁ
 
was_ªad_£¡
–c⁄° 
°d
::
li°
<
ˇche_evít
> &
evíts
 )

215  
°d
::
li°
<
ˇche_evít
>::
c⁄°_ôî©‹
 
e
=
evíts
.
begö
(); 
	ge
!Ûvíts.
íd
();É++ ) {

216 if–*
	ge
 =
READ_REQUEST_SENT
 )

217  
åue
;

219  
	gÁl£
;

	@src/gpgpu-sim/gpu-cache.h

28 #i‚de‡
GPU_CACHE_H


29 
	#GPU_CACHE_H


	)

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~"gpu-misc.h
"

34 
	~"mem_„tch.h
"

35 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

36 
	~"../å1_hash_m≠.h
"

38 
	eˇche_block_°©e
 {

39 
	mINVALID
,

40 
	mRESERVED
,

41 
	mVALID
,

42 
	mMODIFIED


45 
	eˇche_ªque°_°©us
 {

46 
	mHIT
,

47 
	mHIT_RESERVED
,

48 
	mMISS
,

49 
	mRESERVATION_FAIL


52 
	eˇche_evít
 {

53 
	mWRITE_BACK_REQUEST_SENT
,

54 
	mREAD_REQUEST_SENT
,

55 
	mWRITE_REQUEST_SENT


58 
	sˇche_block_t
 {

59 
ˇche_block_t
()

61 
	mm_èg
=0;

62 
	mm_block_addr
=0;

63 
	mm_Æloc_time
=0;

64 
	mm_fûl_time
=0;

65 
	mm_œ°_ac˚ss_time
=0;

66 
	mm_°©us
=
INVALID
;

68 
Æloˇã
–
√w_addr_ty≥
 
èg
,Çew_addr_ty≥ 
block_addr
, 
time
 )

70 
	mm_èg
=
èg
;

71 
	mm_block_addr
=
block_addr
;

72 
	mm_Æloc_time
=
time
;

73 
	mm_œ°_ac˚ss_time
=
time
;

74 
	mm_fûl_time
=0;

75 
	mm_°©us
=
RESERVED
;

77 
fûl
–
time
 )

79 
as£π
–
m_°©us
 =
RESERVED
 );

80 
	mm_°©us
=
VALID
;

81 
	mm_fûl_time
=
time
;

84 
√w_addr_ty≥
 
	mm_èg
;

85 
√w_addr_ty≥
 
	mm_block_addr
;

86 
	mm_Æloc_time
;

87 
	mm_œ°_ac˚ss_time
;

88 
	mm_fûl_time
;

89 
ˇche_block_°©e
 
	mm_°©us
;

92 
	eª∂a˚mít_pﬁicy_t
 {

93 
	mLRU
,

94 
	mFIFO


97 
	ewrôe_pﬁicy_t
 {

98 
	mREAD_ONLY
,

99 
	mWRITE_BACK
,

100 
	mWRITE_THROUGH


103 
	eÆloˇti⁄_pﬁicy_t
 {

104 
	mON_MISS
,

105 
	mON_FILL


108 
	emshr_c⁄fig_t
 {

109 
	mTEX_FIFO
,

110 
	mASSOC


113 ˛as†
	cˇche_c⁄fig
 {

114 
	mpublic
:

115 
	$ˇche_c⁄fig
()

117 
m_vÆid
 = 
Ál£
;

118 
m_dißbÀd
 = 
Ál£
;

119 
m_c⁄fig_°rög
 = 
NULL
;

121 
	$öô
()

123 
	`as£π
–
m_c⁄fig_°rög
 );

124 
Ω
, 
wp
, 
≠
, 
mshr_ty≥
;

125 
¡ok
 = 
	`ssˇnf
(
m_c⁄fig_°rög
,"%u:%u:%u:%c:%c:%c,%c:%u:%u,%u:%u",

126 &
m_n£t
, &
m_löe_sz
, &
m_assoc
, &
Ω
, &
wp
, &
≠
,

127 &
mshr_ty≥
,&
m_mshr_íåõs
,&
m_mshr_max_mîge
,&
m_miss_queue_size
,&
m_ªsu…_fifo_íåõs
);

128 i‡–
¡ok
 < 10 ) {

129 i‡–!
	`°rcmp
(
m_c⁄fig_°rög
,"none") ) {

130 
m_dißbÀd
 = 
åue
;

133 
	`exô_∑r£_îr‹
();

135 
Ω
) {

136 'L': 
m_ª∂a˚mít_pﬁicy
 = 
LRU
; ;

137 'F': 
m_ª∂a˚mít_pﬁicy
 = 
FIFO
; ;

138 : 
	`exô_∑r£_îr‹
();

140 
wp
) {

141 'R': 
m_wrôe_pﬁicy
 = 
READ_ONLY
; ;

142 'B': 
m_wrôe_pﬁicy
 = 
WRITE_BACK
; ;

143 'T': 
m_wrôe_pﬁicy
 = 
WRITE_THROUGH
; ;

144 : 
	`exô_∑r£_îr‹
();

146 
≠
) {

147 'm': 
m_Æloc_pﬁicy
 = 
ON_MISS
; ;

148 'f': 
m_Æloc_pﬁicy
 = 
ON_FILL
; ;

149 : 
	`exô_∑r£_îr‹
();

151 
mshr_ty≥
) {

152 'F': 
m_mshr_ty≥
 = 
TEX_FIFO
; 
	`as£π
(
¡ok
==11); ;

153 'A': 
m_mshr_ty≥
 = 
ASSOC
; ;

154 : 
	`exô_∑r£_îr‹
();

156 
m_löe_sz_log2
 = 
	`LOGB2
(
m_löe_sz
);

157 
m_n£t_log2
 = 
	`LOGB2
(
m_n£t
);

158 
m_vÆid
 = 
åue
;

159 
	}
}

160 
boﬁ
 
	$dißbÀd
(Ëc⁄° {  
m_dißbÀd
;
	}
}

161 
	$gë_löe_sz
() const

163 
	`as£π
–
m_vÆid
 );

164  
m_löe_sz
;

165 
	}
}

166 
	$gë_num_löes
() const

168 
	`as£π
–
m_vÆid
 );

169  
m_n£t
 * 
m_assoc
;

170 
	}
}

172 
	$¥öt
–
FILE
 *
Â
 ) const

174 
	`Ârötf
–
Â
, "Size = %d B (%d Set x %d-way x %d byteÜine)\n",

175 
m_löe_sz
 * 
m_n£t
 * 
m_assoc
,

176 
m_n£t
, 
m_assoc
, 
m_löe_sz
 );

177 
	}
}

179 
	$£t_ödex
–
√w_addr_ty≥
 
addr
 ) const

181 (
addr
 >> 
m_löe_sz_log2
Ë& (
m_n£t
-1);

182 
	}
}

183 
√w_addr_ty≥
 
	$èg
–
√w_addr_ty≥
 
addr
 ) const

185  
addr
 >> (
m_löe_sz_log2
+
m_n£t_log2
);

186 
	}
}

187 
√w_addr_ty≥
 
	$block_addr
–
√w_addr_ty≥
 
addr
 ) const

189  
addr
 & ~(
m_löe_sz
-1);

190 
	}
}

192 *
	gm_c⁄fig_°rög
;

194 
	g¥iv©e
:

195 
	$exô_∑r£_îr‹
()

197 
	`¥ötf
("GPGPU-Sim uArch: cachêc⁄figuøti⁄Ö¨sögÉº‹ (%s)\n", 
m_c⁄fig_°rög
 );

198 
	`ab‹t
();

199 
	}
}

201 
boﬁ
 
	gm_vÆid
;

202 
boﬁ
 
	gm_dißbÀd
;

203 
	gm_löe_sz
;

204 
	gm_löe_sz_log2
;

205 
	gm_n£t
;

206 
	gm_n£t_log2
;

207 
	gm_assoc
;

209 
ª∂a˚mít_pﬁicy_t
 
	gm_ª∂a˚mít_pﬁicy
;

210 
wrôe_pﬁicy_t
 
	gm_wrôe_pﬁicy
;

211 
Æloˇti⁄_pﬁicy_t
 
	gm_Æloc_pﬁicy
;

212 
mshr_c⁄fig_t
 
	gm_mshr_ty≥
;

215 
	gm_mshr_íåõs
;

216 
	gm_‰agmít_fifo_íåõs
;

219 
	gm_mshr_max_mîge
;

220 
	gm_ªque°_fifo_íåõs
;

223 
	gm_miss_queue_size
;

224 
	gm_rob_íåõs
;

226 
	gm_ªsu…_fifo_íåõs
;

228 
‰õnd
 
˛ass
 
	gèg_¨øy
;

229 
‰õnd
 
˛ass
 
	gªad_⁄ly_ˇche
;

230 
‰õnd
 
˛ass
 
	gãx_ˇche
;

231 
‰õnd
 
˛ass
 
	gd©a_ˇche
;

234 ˛as†
	cèg_¨øy
 {

235 
	mpublic
:

236 
èg_¨øy
–c⁄° 
ˇche_c⁄fig
 &
c⁄fig
, 
c‹e_id
, 
ty≥_id
 );

237 ~
èg_¨øy
();

239 
ˇche_ªque°_°©us
 
	$¥obe
–
√w_addr_ty≥
 
addr
, &
idx
 ) const;

240 
ˇche_ªque°_°©us
 
	`ac˚ss
–
√w_addr_ty≥
 
addr
, 
time
, &
idx
 );

241 
ˇche_ªque°_°©us
 
	`ac˚ss
–
√w_addr_ty≥
 
addr
, 
time
, &
idx
, 
boﬁ
 &
wb
, 
ˇche_block_t
 &
evi˘ed
 );

243 
	`fûl
–
√w_addr_ty≥
 
addr
, 
time
 );

244 
	`fûl
–
idx
, 
time
 );

246 
	$size
(Ëc⁄° {  
m_c⁄fig
.
	`gë_num_löes
();}

247 
ˇche_block_t
 &
	$gë_block
(
idx
Ë{  
m_löes
[idx];
	}
}

249 
Êush
();

250 
√w_wödow
();

252 
	$¥öt
–
FILE
 *
°ªam
, &
tŸÆ_ac˚ss
, &
tŸÆ_mis£s
 ) const;

253 
	$wödowed_miss_øã
( ) const;

255 
¥Ÿe˘ed
:

257 c⁄° 
ˇche_c⁄fig
 &
m_c⁄fig
;

259 
ˇche_block_t
 *
m_löes
;

261 
m_ac˚ss
;

262 
m_miss
;

263 
m_≥ndög_hô
;

266 
m_¥ev_¢≠shŸ_ac˚ss
;

267 
m_¥ev_¢≠shŸ_miss
;

268 
m_¥ev_¢≠shŸ_≥ndög_hô
;

270 
m_c‹e_id
;

271 
m_ty≥_id
;

272 
	}
};

274 ˛as†
	cmshr_èbÀ
 {

275 
	mpublic
:

276 
	$mshr_èbÀ
–
num_íåõs
, 
max_mîged
 )

277 : 
	`m_num_íåõs
(
num_íåõs
),

278 
	`m_max_mîged
(
max_mîged
),

279 #i‚de‡
USE_MAP


280 
	$m_d©a
(2*
num_íåõs
)

286 
boﬁ
 
	$¥obe
–
√w_addr_ty≥
 
block_addr
 ) const

288 
èbÀ
::
c⁄°_ôî©‹
 
a
 = 
m_d©a
.
	`föd
(
block_addr
);

289  
a
 !
m_d©a
.
	`íd
();

290 
	}
}

293 
boﬁ
 
	$fuŒ
–
√w_addr_ty≥
 
block_addr
 ) const

295 
èbÀ
::
c⁄°_ôî©‹
 
i
=
m_d©a
.
	`föd
(
block_addr
);

296 i‡–
i
 !
m_d©a
.
	`íd
() )

297  
i
->
£c⁄d
.
m_li°
.
	`size
(Ë>
m_max_mîged
;

299  
m_d©a
.
	`size
(Ë>
m_num_íåõs
;

300 
	}
}

303 
	$add
–
√w_addr_ty≥
 
block_addr
, 
mem_„tch
 *
mf
 )

305 
m_d©a
[
block_addr
].
m_li°
.
	`push_back
(
mf
);

306 
	`as£π
–
m_d©a
.
	`size
(Ë<
m_num_íåõs
 );

307 
	`as£π
–
m_d©a
[
block_addr
].
m_li°
.
	`size
(Ë<
m_max_mîged
 );

309 i‡–
mf
->
	`ißtomic
() ) {

310 
m_d©a
[
block_addr
].
m_has_©omic
 = 
åue
;

312 
	}
}

315 
boﬁ
 
	$busy
() const

317  
Ál£
;

318 
	}
}

321 
	$m¨k_ªady
–
√w_addr_ty≥
 
block_addr
, 
boﬁ
 &
has_©omic
 )

323 
	`as£π
–!
	`busy
() );

324 
èbÀ
::
ôî©‹
 
a
 = 
m_d©a
.
	`föd
(
block_addr
);

325 
	`as£π
–
a
 !
m_d©a
.
	`íd
() );

326 
m_cuºít_ª•⁄£
.
	`push_back
–
block_addr
 );

327 
has_©omic
 = 
a
->
£c⁄d
.
m_has_©omic
;

328 
	`as£π
–
m_cuºít_ª•⁄£
.
	`size
(Ë<
m_d©a
.size() );

329 
	}
}

332 
boﬁ
 
	$ac˚ss_ªady
() const

334  !
m_cuºít_ª•⁄£
.
	`em±y
();

335 
	}
}

338 
mem_„tch
 *
	$√xt_ac˚ss
()

340 
	`as£π
–
	`ac˚ss_ªady
() );

341 
√w_addr_ty≥
 
block_addr
 = 
m_cuºít_ª•⁄£
.
	`‰⁄t
();

342 
	`as£π
–!
m_d©a
[
block_addr
].
m_li°
.
	`em±y
() );

343 
mem_„tch
 *
ªsu…
 = 
m_d©a
[
block_addr
].
m_li°
.
	`‰⁄t
();

344 
m_d©a
[
block_addr
].
m_li°
.
	`p›_‰⁄t
();

345 i‡–
m_d©a
[
block_addr
].
m_li°
.
	`em±y
() ) {

347 
m_d©a
.
	`îa£
(
block_addr
);

348 
m_cuºít_ª•⁄£
.
	`p›_‰⁄t
();

350  
ªsu…
;

351 
	}
}

353 
	$di•œy
–
FILE
 *
Â
 ) const

355 
	`Ârötf
(
Â
,"MSHR contents\n");

356  
èbÀ
::
c⁄°_ôî©‹
 
e
=
m_d©a
.
	`begö
();É!=m_d©a.
	`íd
(); ++e ) {

357 
block_addr
 = 
e
->
fú°
;

358 
	`Ârötf
(
Â
,"MSHR:Åag=0x%06x,átomic=%d %zuÉ¡rõ†: ", 
block_addr
, 
e
->
£c⁄d
.
m_has_©omic
,É->£c⁄d.
m_li°
.
	`size
());

359 i‡–!
e
->
£c⁄d
.
m_li°
.
	`em±y
() ) {

360 
mem_„tch
 *
mf
 = 
e
->
£c⁄d
.
m_li°
.
	`‰⁄t
();

361 
	`Ârötf
(
Â
,"%∞:",
mf
);

362 
mf
->
	`¥öt
(
Â
);

364 
	`Ârötf
(
Â
,"Ço memoryÑequests???\n");

367 
	}
}

369 
	g¥iv©e
:

372 c⁄° 
m_num_íåõs
;

373 c⁄° 
	gm_max_mîged
;

375 
	smshr_íåy
 {

376 
	g°d
::
li°
<
mem_„tch
*> 
m_li°
;

377 
boﬁ
 
	gm_has_©omic
;

378 
mshr_íåy
(Ë: 
m_has_©omic
(
Ál£
) { }

380 
	gmy_hash_m≠
<
	t√w_addr_ty≥
,
	tmshr_íåy
> 
	tèbÀ
;

381 
èbÀ
 
	gm_d©a
;

384 
boﬁ
 
	gm_cuºít_ª•⁄£_ªady
;

385 
	g°d
::
li°
<
√w_addr_ty≥
> 
m_cuºít_ª•⁄£
;

388 ˛as†
	cˇche_t
 {

389 
	mpublic
:

390 
vútuÆ
 ~
	$ˇche_t
() {}

391 
vútuÆ
 
ˇche_ªque°_°©us
 
	`ac˚ss
–
√w_addr_ty≥
 
addr
, 
mem_„tch
 *
mf
, 
time
, 
°d
::
li°
<
ˇche_evít
> &
evíts
 ) = 0;

392 
	}
};

394 
boﬁ
 
was_wrôe_£¡
–c⁄° 
°d
::
li°
<
ˇche_evít
> &
evíts
 );

395 
boﬁ
 
was_ªad_£¡
–c⁄° 
°d
::
li°
<
ˇche_evít
> &
evíts
 );

397 ˛as†
	cªad_⁄ly_ˇche
 : 
public
 
ˇche_t
 {

398 
public
:

399 
	$ªad_⁄ly_ˇche
–c⁄° *
«me
, c⁄° 
ˇche_c⁄fig
 &
c⁄fig
, 
c‹e_id
, 
ty≥_id
, 
mem_„tch_öãrÁ˚
 *
memp‹t
,

400 
mem_„tch_°©us
 
°©us
 )

401 : 
	`m_c⁄fig
(
c⁄fig
), 
	`m_èg_¨øy
(c⁄fig,
c‹e_id
,
ty≥_id
), 
	$m_mshrs
(
c⁄fig
.
m_mshr_íåõs
,c⁄fig.
m_mshr_max_mîge
)

403 
m_«me
 = 
«me
;

404 
	`as£π
(
c⁄fig
.
m_mshr_ty≥
 =
ASSOC
);

405 
m_memp‹t
=
memp‹t
;

406 
m_miss_queue_°©us
 = 
°©us
;

410 
vútuÆ
 
ˇche_ªque°_°©us
 
	`ac˚ss
–
√w_addr_ty≥
 
addr
, 
mem_„tch
 *
mf
, 
time
, 
°d
::
li°
<
ˇche_evít
> &
evíts
 )

412 
	`as£π
–
mf
->
	`gë_d©a_size
(Ë<
m_c⁄fig
.
	`gë_löe_sz
());

414 
	`as£π
(
m_c⁄fig
.
m_wrôe_pﬁicy
 =
READ_ONLY
);

415 
	`as£π
(!
mf
->
	`gë_is_wrôe
());

416 
√w_addr_ty≥
 
block_addr
 = 
m_c⁄fig
.
	`block_addr
(
addr
);

417 
ˇche_ödex
 = ()-1;

418 
ˇche_ªque°_°©us
 
°©us
 = 
m_èg_¨øy
.
	`¥obe
(
block_addr
,
ˇche_ödex
);

419 i‡–
°©us
 =
HIT
 ) {

420 
m_èg_¨øy
.
	`ac˚ss
(
block_addr
,
time
,
ˇche_ödex
);

421  
HIT
;

423 i‡–
°©us
 !
RESERVATION_FAIL
 ) {

424 
boﬁ
 
mshr_hô
 = 
m_mshrs
.
	`¥obe
(
block_addr
);

425 
boﬁ
 
mshr_avaû
 = !
m_mshrs
.
	`fuŒ
(
block_addr
);

426 i‡–
mshr_hô
 && 
mshr_avaû
 ) {

427 
m_èg_¨øy
.
	`ac˚ss
(
addr
,
time
,
ˇche_ödex
);

428 
m_mshrs
.
	`add
(
block_addr
,
mf
);

429  
MISS
;

430 } i‡–!
mshr_hô
 && 
mshr_avaû
 && (
m_miss_queue
.
	`size
(Ë< 
m_c⁄fig
.
m_miss_queue_size
) ) {

431 
m_èg_¨øy
.
	`ac˚ss
(
addr
,
time
,
ˇche_ödex
);

432 
m_mshrs
.
	`add
(
block_addr
,
mf
);

433 
m_exåa_mf_fõlds
[
mf
] = 
	`exåa_mf_fõlds
(
block_addr
,
ˇche_ödex
, mf->
	`gë_d©a_size
());

434 
mf
->
	`£t_d©a_size
–
m_c⁄fig
.
	`gë_löe_sz
() );

435 
m_miss_queue
.
	`push_back
(
mf
);

436 
mf
->
	`£t_°©us
(
m_miss_queue_°©us
,
time
);

437 
evíts
.
	`push_back
(
READ_REQUEST_SENT
);

438  
MISS
;

441  
RESERVATION_FAIL
;

442 
	}
}

444 
	$cy˛e
()

447 i‡–!
m_miss_queue
.
	`em±y
() ) {

448 
mem_„tch
 *
mf
 = 
m_miss_queue
.
	`‰⁄t
();

449 i‡–!
m_memp‹t
->
	`fuŒ
(
mf
->
	`gë_d©a_size
(),mf->
	`gë_is_wrôe
()) ) {

450 
m_miss_queue
.
	`p›_‰⁄t
();

451 
m_memp‹t
->
	`push
(
mf
);

454 
	}
}

457 
	$fûl
–
mem_„tch
 *
mf
, 
time
 )

459 
exåa_mf_fõlds_lookup
::
ôî©‹
 
e
 = 
m_exåa_mf_fõlds
.
	`föd
(
mf
);

460 
	`as£π
–
e
 !
m_exåa_mf_fõlds
.
	`íd
() );

461 
	`as£π
–
e
->
£c⁄d
.
m_vÆid
 );

462 
mf
->
	`£t_d©a_size
–
e
->
£c⁄d
.
m_d©a_size
 );

463 i‡–
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_MISS
 )

464 
m_èg_¨øy
.
	`fûl
(
e
->
£c⁄d
.
m_ˇche_ödex
,
time
);

465 i‡–
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_FILL
 )

466 
m_èg_¨øy
.
	`fûl
(
e
->
£c⁄d
.
m_block_addr
,
time
);

467 
	`ab‹t
();

468 
boﬁ
 
has_©omic
 = 
Ál£
;

469 
m_mshrs
.
	`m¨k_ªady
(
e
->
£c⁄d
.
m_block_addr
, 
has_©omic
);

470 i‡(
has_©omic
) {

471 
	`as£π
(
m_c⁄fig
.
m_Æloc_pﬁicy
 =
ON_MISS
);

472 
ˇche_block_t
 &
block
 = 
m_èg_¨øy
.
	`gë_block
(
e
->
£c⁄d
.
m_ˇche_ödex
);

473 
block
.
m_°©us
 = 
MODIFIED
;

475 
m_exåa_mf_fõlds
.
	`îa£
(
mf
);

476 
	}
}

478 
boﬁ
 
	$waôög_f‹_fûl
–
mem_„tch
 *
mf
 )

480 
exåa_mf_fõlds_lookup
::
ôî©‹
 
e
 = 
m_exåa_mf_fõlds
.
	`föd
(
mf
);

481  
e
 !
m_exåa_mf_fõlds
.
	`íd
();

482 
	}
}

485 
boﬁ
 
	$ac˚ss_ªady
() const

487  
m_mshrs
.
	`ac˚ss_ªady
();

488 
	}
}

491 
mem_„tch
 *
	$√xt_ac˚ss
()

493  
m_mshrs
.
	`√xt_ac˚ss
();

494 
	}
}

497 
	$Êush
()

499 
m_èg_¨øy
.
	`Êush
();

500 
	}
}

502 
	$¥öt
(
FILE
 *
Â
, &
ac˚s£s
, &
mis£s
) const

504 
	`Ârötf
–
Â
, "Cachê%s:\t", 
m_«me
.
	`c_°r
() );

505 
m_èg_¨øy
.
	`¥öt
(
Â
,
ac˚s£s
,
mis£s
);

506 
	}
}

508 
	$di•œy_°©e
–
FILE
 *
Â
 ) const

510 
	`Ârötf
(
Â
,"Cachê%s:\n", 
m_«me
.
	`c_°r
() );

511 
m_mshrs
.
	`di•œy
(
Â
);

512 
	`Ârötf
(
Â
,"\n");

513 
	}
}

516 
	g¥Ÿe˘ed
:

517 
°d
::
°rög
 
m_«me
;

518 c⁄° 
	gˇche_c⁄fig
 &
	gm_c⁄fig
;

519 
èg_¨øy
 
	gm_èg_¨øy
;

520 
mshr_èbÀ
 
	gm_mshrs
;

521 
	g°d
::
li°
<
mem_„tch
*> 
m_miss_queue
;

522 
mem_„tch_°©us
 
	gm_miss_queue_°©us
;

523 
mem_„tch_öãrÁ˚
 *
	gm_memp‹t
;

525 
	sexåa_mf_fõlds
 {

526 
exåa_mf_fõlds
(Ë{ 
	gm_vÆid
 = 
Ál£
;}

527 
exåa_mf_fõlds
–
√w_addr_ty≥
 
a
, 
i
, 
d
 )

529 
	gm_vÆid
 = 
åue
;

530 
	gm_block_addr
 = 
a
;

531 
	gm_ˇche_ödex
 = 
i
;

532 
	gm_d©a_size
 = 
d
;

534 
boﬁ
 
	gm_vÆid
;

535 
√w_addr_ty≥
 
	gm_block_addr
;

536 
	gm_ˇche_ödex
;

537 
	gm_d©a_size
;

540 
	g°d
::
	tm≠
<
	tmem_„tch
*,
	texåa_mf_fõlds
> 
	texåa_mf_fõlds_lookup
;

542 
exåa_mf_fõlds_lookup
 
	gm_exåa_mf_fõlds
;

549 ˛as†
	cd©a_ˇche
 : 
public
 
ªad_⁄ly_ˇche
 {

550 
public
:

551 
	$d©a_ˇche
–c⁄° *
«me
, c⁄° 
ˇche_c⁄fig
 &
c⁄fig
, 
c‹e_id
, 
ty≥_id
, 
mem_„tch_öãrÁ˚
 *
memp‹t
,

552 
mem_„tch_Æloˇt‹
 *
mf¸ót‹
, 
mem_„tch_°©us
 
°©us
 )

553 : 
	$ªad_⁄ly_ˇche
(
«me
,
c⁄fig
,
c‹e_id
,
ty≥_id
,
memp‹t
,
°©us
)

555 
m_mem„tch_¸ót‹
=
mf¸ót‹
;

557 
vútuÆ
 
ˇche_ªque°_°©us
 
	`ac˚ss
–
√w_addr_ty≥
 
addr
, 
mem_„tch
 *
mf
, 
time
, 
°d
::
li°
<
ˇche_evít
> &
evíts
 )

559 
	`as£π
–
mf
->
	`gë_d©a_size
(Ë<
m_c⁄fig
.
	`gë_löe_sz
());

561 
boﬁ
 
wr
 = 
mf
->
	`gë_is_wrôe
();

562 
boﬁ
 
ißtomic
 = 
mf
->
	`ißtomic
();

563 
mem_ac˚ss_ty≥
 
ty≥
 = 
mf
->
	`gë_ac˚ss_ty≥
();

564 
boﬁ
 
evi˘
 = (
ty≥
 =
GLOBAL_ACC_W
);

566 
√w_addr_ty≥
 
block_addr
 = 
m_c⁄fig
.
	`block_addr
(
addr
);

567 
ˇche_ödex
 = ()-1;

568 
ˇche_ªque°_°©us
 
°©us
 = 
m_èg_¨øy
.
	`¥obe
(
block_addr
,
ˇche_ödex
);

569 i‡–
°©us
 =
HIT
 ) {

570 i‡–
evi˘
 ) {

571 i‡–
m_miss_queue
.
	`size
(Ë>
m_c⁄fig
.
m_miss_queue_size
 )

572  
RESERVATION_FAIL
;

575 
ˇche_block_t
 &
block
 = 
m_èg_¨øy
.
	`gë_block
(
ˇche_ödex
);

577 
m_miss_queue
.
	`push_back
(
mf
);

578 
mf
->
	`£t_°©us
(
m_miss_queue_°©us
,
time
);

579 
evíts
.
	`push_back
(
WRITE_REQUEST_SENT
);

582 
block
.
m_°©us
 = 
INVALID
;

584 
m_èg_¨øy
.
	`ac˚ss
(
block_addr
,
time
,
ˇche_ödex
);

585 i‡–
wr
 ) {

586 
	`as£π
–
ty≥
 =
LOCAL_ACC_W
 ||Åy≥ =
L1_WRBK_ACC
 );

588 
ˇche_block_t
 &
block
 = 
m_èg_¨øy
.
	`gë_block
(
ˇche_ödex
);

589 
block
.
m_°©us
 = 
MODIFIED
;

590 } i‡–
ißtomic
 ) {

591 
	`as£π
–
ty≥
 =
GLOBAL_ACC_R
 );

593 
ˇche_block_t
 &
block
 = 
m_èg_¨øy
.
	`gë_block
(
ˇche_ödex
);

594 
block
.
m_°©us
 = 
MODIFIED
;

597  
HIT
;

598 } i‡–
°©us
 !
RESERVATION_FAIL
 ) {

599 i‡–
wr
 ) {

600 i‡–
m_miss_queue
.
	`size
(Ë>
m_c⁄fig
.
m_miss_queue_size
 )

601  
RESERVATION_FAIL
;

604 
m_miss_queue
.
	`push_back
(
mf
);

605 
mf
->
	`£t_°©us
(
m_miss_queue_°©us
,
time
);

606 
evíts
.
	`push_back
(
WRITE_REQUEST_SENT
);

607  
MISS
;

609 i‡–(
m_miss_queue
.
	`size
()+1Ë>
m_c⁄fig
.
m_miss_queue_size
 )

610  
RESERVATION_FAIL
;

612 
boﬁ
 
do_miss
 = 
Ál£
;

613 
boﬁ
 
wb
 = 
Ál£
;

614 
ˇche_block_t
 
evi˘ed
;

616 
boﬁ
 
mshr_hô
 = 
m_mshrs
.
	`¥obe
(
block_addr
);

617 
boﬁ
 
mshr_avaû
 = !
m_mshrs
.
	`fuŒ
(
block_addr
);

618 i‡–
mshr_hô
 && 
mshr_avaû
 ) {

619 
m_èg_¨øy
.
	`ac˚ss
(
addr
,
time
,
ˇche_ödex
,
wb
,
evi˘ed
);

620 
m_mshrs
.
	`add
(
block_addr
,
mf
);

621 
do_miss
 = 
åue
;

622 } i‡–!
mshr_hô
 && 
mshr_avaû
 && (
m_miss_queue
.
	`size
(Ë< 
m_c⁄fig
.
m_miss_queue_size
) ) {

623 
m_èg_¨øy
.
	`ac˚ss
(
addr
,
time
,
ˇche_ödex
,
wb
,
evi˘ed
);

624 
m_mshrs
.
	`add
(
block_addr
,
mf
);

625 
m_exåa_mf_fõlds
[
mf
] = 
	`exåa_mf_fõlds
(
block_addr
,
ˇche_ödex
, mf->
	`gë_d©a_size
());

626 
mf
->
	`£t_d©a_size
–
m_c⁄fig
.
	`gë_löe_sz
() );

627 
m_miss_queue
.
	`push_back
(
mf
);

628 
mf
->
	`£t_°©us
(
m_miss_queue_°©us
,
time
);

629 
evíts
.
	`push_back
(
READ_REQUEST_SENT
);

630 
do_miss
 = 
åue
;

632 if–
wb
 ) {

633 
	`as£π
(
do_miss
);

634 
mem_„tch
 *
wb
 = 
m_mem„tch_¸ót‹
->
	`Æloc
(
evi˘ed
.
m_block_addr
,
L1_WRBK_ACC
,
m_c⁄fig
.
	`gë_löe_sz
(),
åue
);

635 
evíts
.
	`push_back
(
WRITE_BACK_REQUEST_SENT
);

636 
m_miss_queue
.
	`push_back
(
wb
);

637 
wb
->
	`£t_°©us
(
m_miss_queue_°©us
,
time
);

639 if–
do_miss
 )

640  
MISS
;

644  
RESERVATION_FAIL
;

645 
	}
}

646 
	g¥iv©e
:

647 
mem_„tch_Æloˇt‹
 *
m_mem„tch_¸ót‹
;

655 ˛as†
	cãx_ˇche
 : 
public
 
ˇche_t
 {

656 
public
:

657 
	$ãx_ˇche
–c⁄° *
«me
, c⁄° 
ˇche_c⁄fig
 &
c⁄fig
, 
c‹e_id
, 
ty≥_id
, 
mem_„tch_öãrÁ˚
 *
memp‹t
,

658 
mem_„tch_°©us
 
ªque°_°©us
,

659 
mem_„tch_°©us
 
rob_°©us
 )

660 : 
	`m_c⁄fig
(
c⁄fig
),

661 
	`m_ègs
(
c⁄fig
,
c‹e_id
,
ty≥_id
),

662 
	`m_‰agmít_fifo
(
c⁄fig
.
m_‰agmít_fifo_íåõs
),

663 
	`m_ªque°_fifo
(
c⁄fig
.
m_ªque°_fifo_íåõs
),

664 
	`m_rob
(
c⁄fig
.
m_rob_íåõs
),

665 
	$m_ªsu…_fifo
(
c⁄fig
.
m_ªsu…_fifo_íåõs
)

667 
m_«me
 = 
«me
;

668 
	`as£π
(
c⁄fig
.
m_mshr_ty≥
 =
TEX_FIFO
);

669 
	`as£π
(
c⁄fig
.
m_wrôe_pﬁicy
 =
READ_ONLY
);

670 
	`as£π
(
c⁄fig
.
m_Æloc_pﬁicy
 =
ON_MISS
);

671 
m_memp‹t
=
memp‹t
;

672 
m_ˇche
 = 
√w
 
d©a_block
[ 
c⁄fig
.
	`gë_num_löes
() ];

673 
m_ªque°_queue_°©us
 = 
ªque°_°©us
;

674 
m_rob_°©us
 = 
rob_°©us
;

681 
ˇche_ªque°_°©us
 
	`ac˚ss
–
√w_addr_ty≥
 
addr
, 
mem_„tch
 *
mf
, 
time
, 
°d
::
li°
<
ˇche_evít
> &
evíts
 ) {

682 i‡–
m_‰agmít_fifo
.
	`fuŒ
(Ë|| 
m_ªque°_fifo
.fuŒ(Ë|| 
m_rob
.full() )

683  
RESERVATION_FAIL
;

685 
	`as£π
–
mf
->
	`gë_d©a_size
(Ë<
m_c⁄fig
.
	`gë_löe_sz
());

688 
√w_addr_ty≥
 
block_addr
 = 
m_c⁄fig
.
	`block_addr
(
addr
);

689 
ˇche_ödex
 = ()-1;

690 
ˇche_ªque°_°©us
 
°©us
 = 
m_ègs
.
	`ac˚ss
(
block_addr
,
time
,
ˇche_ödex
);

691 
	`as£π
–
°©us
 !
RESERVATION_FAIL
 );

692 
	`as£π
–
°©us
 !
HIT_RESERVED
 );

693 
m_‰agmít_fifo
.
	`push
–
	`‰agmít_íåy
(
mf
,
ˇche_ödex
,
°©us
==
MISS
,mf->
	`gë_d©a_size
()) );

694 i‡–
°©us
 =
MISS
 ) {

696 
rob_ödex
 = 
m_rob
.
	`push
–
	`rob_íåy
(
ˇche_ödex
, 
mf
, 
block_addr
) );

697 
m_exåa_mf_fõlds
[
mf
] = 
	`exåa_mf_fõlds
(
rob_ödex
);

698 
mf
->
	`£t_d©a_size
(
m_c⁄fig
.
	`gë_löe_sz
());

699 
m_ègs
.
	`fûl
(
ˇche_ödex
,
time
);

700 
m_ªque°_fifo
.
	`push
(
mf
);

701 
mf
->
	`£t_°©us
(
m_ªque°_queue_°©us
,
time
);

702 
evíts
.
	`push_back
(
READ_REQUEST_SENT
);

703  
MISS
;

706  
HIT_RESERVED
;

708 
	}
}

710 
	$cy˛e
()

713 i‡–!
m_ªque°_fifo
.
	`em±y
() ) {

714 
mem_„tch
 *
mf
 = 
m_ªque°_fifo
.
	`≥ek
();

715 i‡–!
m_memp‹t
->
	`fuŒ
(
mf
->
	`gë_˘æ_size
(),
Ál£
) ) {

716 
m_ªque°_fifo
.
	`p›
();

717 
m_memp‹t
->
	`push
(
mf
);

721 i‡–!
m_‰agmít_fifo
.
	`em±y
(Ë&& !
m_ªsu…_fifo
.
	`fuŒ
() ) {

722 c⁄° 
‰agmít_íåy
 &
e
 = 
m_‰agmít_fifo
.
	`≥ek
();

723 i‡–
e
.
m_miss
 ) {

725 
rob_ödex
 = 
m_rob
.
	`√xt_p›_ödex
();

726 c⁄° 
rob_íåy
 &
r
 = 
m_rob
.
	`≥ek
(
rob_ödex
);

727 
	`as£π
–
r
.
m_ªque°
 =
e
.m_request );

728 
	`as£π
–
r
.
m_block_addr
 =
m_c⁄fig
.
	`block_addr
(
e
.
m_ªque°
->
	`gë_addr
()) );

729 i‡–
r
.
m_ªady
 ) {

730 
	`as£π
–
r
.
m_ödex
 =
e
.
m_ˇche_ödex
 );

731 
m_ˇche
[
r
.
m_ödex
].
m_vÆid
 = 
åue
;

732 
m_ˇche
[
r
.
m_ödex
].
m_block_addr
 =Ñ.m_block_addr;

733 
m_ªsu…_fifo
.
	`push
(
e
.
m_ªque°
);

734 
m_rob
.
	`p›
();

735 
m_‰agmít_fifo
.
	`p›
();

739 
	`as£π
–
m_ˇche
[
e
.
m_ˇche_ödex
].
m_vÆid
 );

740 
	`as£π
–
m_ˇche
[
e
.
m_ˇche_ödex
].
m_block_addr
 = 
m_c⁄fig
.
	`block_addr
”.
m_ªque°
->
	`gë_addr
()) );

741 
m_ªsu…_fifo
.
	`push
–
e
.
m_ªque°
 );

742 
m_‰agmít_fifo
.
	`p›
();

745 
	}
}

748 
	$fûl
–
mem_„tch
 *
mf
, 
time
 )

750 
exåa_mf_fõlds_lookup
::
ôî©‹
 
e
 = 
m_exåa_mf_fõlds
.
	`föd
(
mf
);

751 
	`as£π
–
e
 !
m_exåa_mf_fõlds
.
	`íd
() );

752 
	`as£π
–
e
->
£c⁄d
.
m_vÆid
 );

753 
	`as£π
–!
m_rob
.
	`em±y
() );

754 
mf
->
	`£t_°©us
(
m_rob_°©us
,
time
);

756 
rob_ödex
 = 
e
->
£c⁄d
.
m_rob_ödex
;

757 
rob_íåy
 &
r
 = 
m_rob
.
	`≥ek
(
rob_ödex
);

758 
	`as£π
–!
r
.
m_ªady
 );

759 
r
.
m_ªady
 = 
åue
;

760 
r
.
m_time
 = 
time
;

761 
	`as£π
–
r
.
m_block_addr
 =
m_c⁄fig
.
	`block_addr
(
mf
->
	`gë_addr
()) );

762 
	}
}

765 
boﬁ
 
	$ac˚ss_ªady
() const

767  !
m_ªsu…_fifo
.
	`em±y
();

768 
	}
}

771 
mem_„tch
 *
	$√xt_ac˚ss
()

773  
m_ªsu…_fifo
.
	`p›
();

774 
	}
}

776 
	$di•œy_°©e
–
FILE
 *
Â
 ) const

778 
	`Ârötf
(
Â
,"%†—extuª cacheË°©e:\n", 
m_«me
.
	`c_°r
() );

779 
	`Ârötf
(
Â
,"‰agmíàfifÿíåõ† = %u / %u\n", 
m_‰agmít_fifo
.
	`size
(), m_‰agmít_fifo.
	`ˇ∑côy
() );

780 
	`Ârötf
(
Â
,"ª‹dî buf„∏íåõ†%u / %u\n", 
m_rob
.
	`size
(), m_rob.
	`ˇ∑côy
() );

781 
	`Ârötf
(
Â
,"ªque° fifÿíåõ† = %u / %u\n", 
m_ªque°_fifo
.
	`size
(), m_ªque°_fifo.
	`ˇ∑côy
() );

782 i‡–!
m_rob
.
	`em±y
() )

783 
	`Ârötf
(
Â
,"reorder buffer contents:\n");

784  
n
=
m_rob
.
	`size
()-1;Ç>=0;Ç-- ) {

785 
ödex
 = (
m_rob
.
	`√xt_p›_ödex
(Ë+ 
n
)%m_rob.
	`ˇ∑côy
();

786 c⁄° 
rob_íåy
 &
r
 = 
m_rob
.
	`≥ek
(
ödex
);

787 
	`Ârötf
(
Â
, "ãxÑob[%3d] : %†", 
ödex
, (
r
.
m_ªady
?"ready ":"pending") );

788 i‡–
r
.
m_ªady
 )

789 
	`Ârötf
(
Â
,"@%6u", 
r
.
m_time
 );

791 
	`Ârötf
(
Â
," ");

792 
	`Ârötf
(
Â
,"[idx=%4u]",
r
.
m_ödex
);

793 
r
.
m_ªque°
->
	`¥öt
(
Â
,
Ál£
);

795 i‡–!
m_‰agmít_fifo
.
	`em±y
() ) {

796 
	`Ârötf
(
Â
,"fragment fifo (oldest) :");

797 
‰agmít_íåy
 &
f
 = 
m_‰agmít_fifo
.
	`≥ek
();

798 
	`Ârötf
(
Â
,"%s: ", 
f
.
m_miss
?"miss":"hit ");

799 
f
.
m_ªque°
->
	`¥öt
(
Â
,
Ál£
);

801 
	}
}

804 
	g¥iv©e
:

805 
°d
::
°rög
 
m_«me
;

806 c⁄° 
	gˇche_c⁄fig
 &
	gm_c⁄fig
;

808 
	s‰agmít_íåy
 {

809 
‰agmít_íåy
() {}

810 
‰agmít_íåy
–
mem_„tch
 *
mf
, 
idx
, 
boﬁ
 
m
, 
d
 )

812 
	gm_ªque°
=
mf
;

813 
	gm_ˇche_ödex
=
idx
;

814 
	gm_miss
=
m
;

815 
	gm_d©a_size
=
d
;

817 
mem_„tch
 *
	gm_ªque°
;

818 
	gm_ˇche_ödex
;

819 
boﬁ
 
	gm_miss
;

820 
	gm_d©a_size
;

823 
	srob_íåy
 {

824 
rob_íåy
(Ë{ 
	gm_ªady
 = 
Ál£
; 
	gm_time
=0; 
	gm_ªque°
=
NULL
;}

825 
rob_íåy
–
i
, 
mem_„tch
 *
mf
, 
√w_addr_ty≥
 
a
 )

827 
	gm_ªady
=
Ál£
;

828 
	gm_ödex
=
i
;

829 
	gm_time
=0;

830 
	gm_ªque°
=
mf
;

831 
	gm_block_addr
=
a
;

833 
boﬁ
 
	gm_ªady
;

834 
	gm_time
;

835 
	gm_ödex
;

836 
mem_„tch
 *
	gm_ªque°
;

837 
√w_addr_ty≥
 
	gm_block_addr
;

840 
	sd©a_block
 {

841 
d©a_block
(Ë{ 
	gm_vÆid
 = 
Ál£
;}

842 
boﬁ
 
	gm_vÆid
;

843 
√w_addr_ty≥
 
	gm_block_addr
;

847 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cfifo
 {

848 
	gpublic
:

849 
fifo
–
size
 )

851 
m_size
=
size
;

852 
	gm_num
=0;

853 
	gm_hód
=0;

854 
	gm_èû
=0;

855 
	gm_d©a
 = 
√w
 
T
[
size
];

857 
boﬁ
 
fuŒ
(Ëc⁄° {  
	gm_num
 =
m_size
;}

858 
boﬁ
 
em±y
(Ëc⁄° {  
	gm_num
 == 0;}

859 
size
(Ëc⁄° {  
	gm_num
;}

860 
ˇ∑côy
(Ëc⁄° {  
	gm_size
;}

861 
push
–c⁄° 
T
 &
e
 )

863 
as£π
(!
fuŒ
());

864 
	gm_d©a
[
m_hód
] = 
e
;

865 
	gªsu…
 = 
m_hód
;

866 
öc_hód
();

867  
	gªsu…
;

869 
T
 
p›
()

871 
as£π
(!
em±y
());

872 
T
 
	gªsu…
 = 
m_d©a
[
m_èû
];

873 
öc_èû
();

874  
	gªsu…
;

876 c⁄° 
	gT
 &
≥ek
–
ödex
 ) const

878 
as£π
–
ödex
 < 
m_size
 );

879  
	gm_d©a
[
ödex
];

881 
	gT
 &
≥ek
–
ödex
 )

883 
as£π
–
ödex
 < 
m_size
 );

884  
	gm_d©a
[
ödex
];

886 
	gT
 &
≥ek
() const

888  
	gm_d©a
[
m_èû
];

890 
√xt_p›_ödex
() const

892  
	gm_èû
;

894 
	g¥iv©e
:

895 
öc_hód
(Ë{ 
m_hód
 = (m_hód+1)%
m_size
; 
	gm_num
++;}

896 
öc_èû
(Ë{ 
as£π
(
m_num
>0); 
	gm_èû
 = (
m_èû
+1)%
m_size
; 
	gm_num
--;}

898 
	gm_hód
;

899 
	gm_èû
;

900 
	gm_num
;

901 
	gm_size
;

902 
T
 *
	gm_d©a
;

905 
èg_¨øy
 
	gm_ègs
;

906 
	gfifo
<
	g‰agmít_íåy
> 
	gm_‰agmít_fifo
;

907 
	gfifo
<
	gmem_„tch
*> 
	gm_ªque°_fifo
;

908 
	gfifo
<
	grob_íåy
> 
	gm_rob
;

909 
d©a_block
 *
	gm_ˇche
;

910 
	gfifo
<
	gmem_„tch
*> 
	gm_ªsu…_fifo
;

912 
mem_„tch_öãrÁ˚
 *
	gm_memp‹t
;

913 
mem_„tch_°©us
 
	gm_ªque°_queue_°©us
;

914 
mem_„tch_°©us
 
	gm_rob_°©us
;

916 
	sexåa_mf_fõlds
 {

917 
exåa_mf_fõlds
(Ë{ 
	gm_vÆid
 = 
Ál£
;}

918 
exåa_mf_fõlds
–
i
 )

920 
	gm_vÆid
 = 
åue
;

921 
	gm_rob_ödex
 = 
i
;

923 
boﬁ
 
	gm_vÆid
;

924 
	gm_rob_ödex
;

927 
	g°d
::
	tm≠
<
	tmem_„tch
*,
	texåa_mf_fõlds
> 
	texåa_mf_fõlds_lookup
;

929 
exåa_mf_fõlds_lookup
 
	gm_exåa_mf_fõlds
;

	@src/gpgpu-sim/gpu-misc.cc

28 
	~"gpu-misc.h
"

30 
	$LOGB2
–
v
 ) {

31 
shi·
;

32 
r
;

34 
r
 = 0;

36 
shi·
 = (–
v
 & 0xFFFF0000Ë!0 ) << 4; v >>shi·; 
r
 |= shift;

37 
shi·
 = (–
v
 & 0xFF00 ) !0 ) << 3; v >>shi·; 
r
 |= shift;

38 
shi·
 = (–
v
 & 0xF0 ) !0 ) << 2; v >>shi·; 
r
 |= shift;

39 
shi·
 = (–
v
 & 0xC ) !0 ) << 1; v >>shi·; 
r
 |= shift;

40 
shi·
 = (–
v
 & 0x2 ) !0 ) << 0; v >>shi·; 
r
 |= shift;

42  
r
;

43 
	}
}

	@src/gpgpu-sim/gpu-misc.h

29 #i‚de‡
GPU_MISC_H


30 
	#GPU_MISC_H


	)

34 
	#DEBUGL1MISS
 0

	)

36 
LOGB2
–
v
 );

38 
	#gs_mö2
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

39 
	#mö3
(
x
,
y
,
z
Ë(((x)<(yË&& (x)<(z))?(x):(
	`gs_mö2
((y),(z))))

	)

	@src/gpgpu-sim/gpu-sim.cc

28 
	~<£m≠h‹e.h
>

29 
	~"gpu-sim.h
"

30 
	~<sys/time.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<m©h.h
>

35 
	~"zlib.h
"

37 
	~"../›ti⁄_∑r£r.h
"

38 
	~"shadî.h
"

39 
	~"døm.h
"

40 
	~"mem_„tch.h
"

42 
	~<time.h
>

43 
	~"gpu-ˇche.h
"

44 
	~"gpu-misc.h
"

45 
	~"dñayqueue.h
"

46 
	~"shadî.h
"

47 
	~"i˙t_wøµî.h
"

48 
	~"døm.h
"

49 
	~"addrdec.h
"

50 
	~"°©-toﬁ.h
"

51 
	~"l2ˇche.h
"

53 
	~"../cuda-sim/±x-°©s.h
"

54 
	~"../öãrsim/°©wø≥r.h
"

55 
	~"../öãrsim/öãrc⁄√˘_öãrÁ˚.h
"

56 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

57 
	~"../debug.h
"

58 
	~"../gpgpusim_íåypoöt.h
"

59 
	~"../cuda-sim/cuda-sim.h
"

61 
	~"mem_œãncy_°©.h
"

62 
	~"visuÆizî.h
"

63 
	~"°©s.h
"

65 
	~<°dio.h
>

66 
	~<°rög.h
>

68 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

70 
boﬁ
 
	gg_öãø˘ive_debuggî_íabÀd
=
Ál£
;

72 
	ggpu_sim_cy˛e
 = 0;

73 
	ggpu_tŸ_sim_cy˛e
 = 0;

76 
	ggpu_°Æl_dømfuŒ
 = 0;

77 
	ggpu_°Æl_i˙t2sh
 = 0;

81 
	#CORE
 0x01

	)

82 
	#L2
 0x02

	)

83 
	#DRAM
 0x04

	)

84 
	#ICNT
 0x08

	)

87 
	#MEM_LATENCY_STAT_IMPL


	)

88 
	~"mem_œãncy_°©.h
"

90 
	gmem‹y_c⁄fig
::
	$ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
)

92 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_døm_scheduÀr", 
OPT_INT32
, &
scheduÀr_ty≥
,

94 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_døm_∑πôi⁄_queues", 
OPT_CSTR
, &
gpgpu_L2_queue_c⁄fig
,

98 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-l2_idól", 
OPT_BOOL
, &
l2_idól
,

101 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ˇche:dl2", 
OPT_CSTR
, &
m_L2_c⁄fig
.
m_c⁄fig_°rög
,

105 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ˇche:dl2_ãxtuª_⁄ly", 
OPT_BOOL
, &
m_L2_ãxuª_⁄ly
,

108 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_n_mem", 
OPT_UINT32
, &
m_n_mem
,

111 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_n_mem_≥r_˘ær", 
OPT_UINT32
, &
gpu_n_mem_≥r_˘ær
,

114 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_memœãncy_°©", 
OPT_INT32
, &
gpgpu_memœãncy_°©
,

117 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_døm_sched_queue_size", 
OPT_INT32
, &
gpgpu_døm_sched_queue_size
,

120 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_døm_buswidth", 
OPT_UINT32
, &
busW
,

123 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_døm_bur°_Àngth", 
OPT_UINT32
, &
BL
,

126 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_døm_timög_›t", 
OPT_CSTR
, &
gpgpu_døm_timög_›t
,

129 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-r›_œãncy", 
OPT_UINT32
, &
r›_œãncy
,

132 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-døm_œãncy", 
OPT_UINT32
, &
døm_œãncy
,

136 
m_addªss_m≠pög
.
	`addrdec_£t›ti⁄
(
›p
);

137 
	}
}

139 
	gshadî_c‹e_c⁄fig
::
	$ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
)

141 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_simd_modñ", 
OPT_INT32
, &
modñ
,

143 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_shadî_c‹e_pùñöe", 
OPT_CSTR
, &
gpgpu_shadî_c‹e_pùñöe_›t
,

146 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ãx_ˇche:l1", 
OPT_CSTR
, &
m_L1T_c⁄fig
.
m_c⁄fig_°rög
,

150 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_c⁄°_ˇche:l1", 
OPT_CSTR
, &
m_L1C_c⁄fig
.
m_c⁄fig_°rög
,

154 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ˇche:û1", 
OPT_CSTR
, &
m_L1I_c⁄fig
.
m_c⁄fig_°rög
,

158 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ˇche:dl1", 
OPT_CSTR
, &
m_L1D_c⁄fig
.
m_c⁄fig_°rög
,

162 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_≥r„˘_mem", 
OPT_BOOL
, &
gpgpu_≥r„˘_mem
,

165 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_shadî_ªgi°îs", 
OPT_UINT32
, &
gpgpu_shadî_ªgi°îs
,

168 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_shadî_˘a", 
OPT_UINT32
, &
max_˘a_≥r_c‹e
,

171 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_n_˛u°îs", 
OPT_UINT32
, &
n_simt_˛u°îs
,

174 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_n_c‹es_≥r_˛u°î", 
OPT_UINT32
, &
n_simt_c‹es_≥r_˛u°î
,

177 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_n_˛u°î_eje˘i⁄_buf„r_size", 
OPT_UINT32
, &
n_simt_eje˘i⁄_buf„r_size
,

180 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_n_ld°_ª•⁄£_buf„r_size", 
OPT_UINT32
, &
ld°_unô_ª•⁄£_queue_size
,

183 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_shmem_size", 
OPT_UINT32
, &
gpgpu_shmem_size
,

186 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_shmem_w¨p_∑πs", 
OPT_INT32
, &
mem_w¨p_∑πs
,

189 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_w¨pdi°ro_shadî", 
OPT_INT32
, &
gpgpu_w¨pdi°ro_shadî
,

192 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_loˇl_mem_m≠", 
OPT_BOOL
, &
gpgpu_loˇl_mem_m≠
,

195 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_num_ªg_b™ks", 
OPT_INT32
, &
gpgpu_num_ªg_b™ks
,

198 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ªg_b™k_u£_w¨p_id", 
OPT_BOOL
, &
gpgpu_ªg_b™k_u£_w¨p_id
,

201 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_unôs_•", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_•
,

204 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_unôs_sfu", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_sfu
,

207 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_unôs_mem", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_mem
,

210 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_unôs_gí", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_gí
,

213 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_•", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_•
,

216 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_sfu", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_sfu
,

219 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_mem", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_mem
,

222 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_gí", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_gí
,

225 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_•", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_•
,

228 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_sfu", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_sfu
,

231 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_mem", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_mem
,

234 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_gí", 
OPT_INT32
, &
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_gí
,

237 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_cﬂÀs˚_¨ch", 
OPT_INT32
, &
gpgpu_cﬂÀs˚_¨ch
,

240 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_num_sched_≥r_c‹e", 
OPT_INT32
, &
gpgpu_num_sched_≥r_c‹e
,

243 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_max_ö¢_issue_≥r_w¨p", 
OPT_INT32
, &
gpgpu_max_ö¢_issue_≥r_w¨p
,

246 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_simt_c‹e_sim_‹dî", 
OPT_INT32
, &
simt_c‹e_sim_‹dî
,

249 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_pùñöe_widths", 
OPT_CSTR
, &
pùñöe_widths_°rög
,

253 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_num_•_unôs", 
OPT_INT32
, &
gpgpu_num_•_unôs
,

256 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_num_sfu_unôs", 
OPT_INT32
, &
gpgpu_num_sfu_unôs
,

259 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_num_mem_unôs", 
OPT_INT32
, &
gpgpu_num_mem_unôs
,

262 
	}
}

264 
	ggpgpu_sim_c⁄fig
::
	$ªg_›ti⁄s
(
›ti⁄_∑r£r_t
 
›p
)

266 
gpgpu_fun˘i⁄Æ_sim_c⁄fig
::
	`ªg_›ti⁄s
(
›p
);

267 
m_shadî_c⁄fig
.
	`ªg_›ti⁄s
(
›p
);

268 
m_mem‹y_c⁄fig
.
	`ªg_›ti⁄s
(
›p
);

270 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_max_cy˛e", 
OPT_INT32
, &
gpu_max_cy˛e_›t
,

273 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_max_ö¢", 
OPT_INT32
, &
gpu_max_ö¢_›t
,

276 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_max_˘a", 
OPT_INT32
, &
gpu_max_˘a_›t
,

279 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_ru¡ime_°©", 
OPT_CSTR
, &
gpgpu_ru¡ime_°©
,

282 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_Êush_ˇche", 
OPT_BOOL
, &
gpgpu_Êush_ˇche
,

285 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_dódlock_dëe˘", 
OPT_BOOL
, &
gpu_dódlock_dëe˘
,

288 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_ö°ru˘i⁄_˛assifiˇti⁄", 
OPT_INT32
,

289 &
gpgpu_±x_ö°ru˘i⁄_˛assifiˇti⁄
,

292 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_±x_sim_mode", 
OPT_INT32
, &
g_±x_sim_mode
,

295 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_˛ock_domaös", 
OPT_CSTR
, &
gpgpu_˛ock_domaös
,

298 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_max_c⁄cuºít_kî√l", 
OPT_INT32
, &
max_c⁄cuºít_kî√l
,

300 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-gpgpu_cÊog_öãrvÆ", 
OPT_INT32
, &
gpgpu_cÊog_öãrvÆ
,

303 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-visuÆizî_íabÀd", 
OPT_BOOL
,

304 &
g_visuÆizî_íabÀd
, "Turn on visualizer output (1=On, 0=Off)",

306 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-visuÆizî_ouçutfûe", 
OPT_CSTR
,

307 &
g_visuÆizî_fûíame
, "SpecifiesÅhe outputÜog file for visualizer",

308 
NULL
);

309 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-visuÆizî_zÀvñ", 
OPT_INT32
,

310 &
g_visuÆizî_zÀvñ
, "CompressionÜevel ofÅhe visualizer outputÜog (0=no comp, 9=highest)",

312 
	`±x_fûe_löe_°©s_›ti⁄s
(
›p
);

313 
	}
}

317 
	$ö¸emít_x_thí_y_thí_z
–
dim3
 &
i
, c⁄° dim3 &
bound
)

319 
i
.
x
++;

320 i‡–
i
.
x
 >
bound
.x ) {

321 
i
.
x
 = 0;

322 
i
.
y
++;

323 i‡–
i
.
y
 >
bound
.y ) {

324 
i
.
y
 = 0;

325 if–
i
.
z
 < 
bound
.z )

326 
i
.
z
++;

329 
	}
}

331 
	ggpgpu_sim
::
	$œunch
–
kî√l_öfo_t
 *
köfo
 )

334 
n
=0;Ç < 
m_ru¬ög_kî√ls
.
	`size
();Ç++ ) {

335 if–(
NULL
!=
m_ru¬ög_kî√ls
[
n
]Ë&&(~ m_ru¬ög_kî√ls[n]->
	`d⁄e
()) ) {

336 
	`¥ötf
("alraedyá kernel isÑunnning\n");

337 
	`as£π
(0);

341 
˘a_size
 = 
köfo
->
	`thªads_≥r_˘a
();

342 i‡–
˘a_size
 > 
m_shadî_c⁄fig
->
n_thªad_≥r_shadî
 ) {

343 
	`¥ötf
("ExecutionÉrror: Shader kernel CTA (block) size isÅooÜarge for microarch config.\n");

344 
	`¥ötf
(" CTA sizê(x*y*zË%u, max suµ‹ãd = %u\n", 
˘a_size
,

345 
m_shadî_c⁄fig
->
n_thªad_≥r_shadî
 );

346 
	`¥ötf
(" =>Éither change -gpgpu_shaderárgument in gpgpusim.config file or\n");

347 
	`¥ötf
(" modifyÅhe CUDA sourceÅo decreaseÅhe kernel block size.\n");

348 
	`ab‹t
();

350 
n
=0;

351 
n
=0;Ç < 
m_ru¬ög_kî√ls
.
	`size
();Ç++ ) {

352 if–(
NULL
==
m_ru¬ög_kî√ls
[
n
]Ë|| m_ru¬ög_kî√ls[n]->
	`d⁄e
() ) {

353 
m_ru¬ög_kî√ls
[
n
] = 
köfo
;

357 
	`as£π
(
n
 < 
m_ru¬ög_kî√ls
.
	`size
());

358 
	}
}

360 
boﬁ
 
	ggpgpu_sim
::
	$ˇn_°¨t_kî√l
()

362 
n
=0;Ç < 
m_ru¬ög_kî√ls
.
	`size
();Ç++ ) {

363 if–(
NULL
==
m_ru¬ög_kî√ls
[
n
]Ë|| m_ru¬ög_kî√ls[n]->
	`d⁄e
() )

364  
åue
;

366  
Ál£
;

367 
	}
}

368 
End_Block_Pro˚ss
[5];

369 
Pro˚ss_id
;

370 
Pro˚ss_cou¡
;

371 
boﬁ
 
	ggpgpu_sim
::
	$gë_m‹e_˘a_À·
() const

373 i‡(
m_c⁄fig
.
gpu_max_˘a_›t
 != 0) {

374 if–
m_tŸÆ_˘a_œunched
 >
m_c⁄fig
.
gpu_max_˘a_›t
 )

375  
Ál£
;

377 
n
=0;Ç < 
m_ru¬ög_kî√ls
.
	`size
();Ç++ ) {

378 if–
m_ru¬ög_kî√ls
[
n
] && !m_ru¬ög_kî√ls[n]->
	`no_m‹e_˘as_to_run
() )

379  
åue
;

390  
Ál£
;

391 
	}
}

393 
kî√l_öfo_t
 *
	ggpgpu_sim
::
	$£À˘_kî√l
()

395 
n
=0;Ç < 
m_ru¬ög_kî√ls
.
	`size
();Ç++ ) {

396 
idx
 = (
n
+
m_œ°_issued_kî√l
+1)%
m_c⁄fig
.
max_c⁄cuºít_kî√l
;

397 if–
m_ru¬ög_kî√ls
[
idx
] && !m_ru¬ög_kî√ls[idx]->
	`no_m‹e_˘as_to_run
() ) {

398 
m_œ°_issued_kî√l
=
idx
;

399  
m_ru¬ög_kî√ls
[
idx
];

402  
NULL
;

403 
	}
}

405 
	ggpgpu_sim
::
	$föished_kî√l
()

407 if–
m_föished_kî√l
.
	`em±y
() )

409 
ªsu…
 = 
m_föished_kî√l
.
	`‰⁄t
();

410 
m_föished_kî√l
.
	`p›_‰⁄t
();

411  
ªsu…
;

412 
	}
}

414 
	ggpgpu_sim
::
	$£t_kî√l_d⁄e
–
kî√l_öfo_t
 *
kî√l
 )

419 
uid
 = 
kî√l
->
	`gë_uid
();

420 
m_föished_kî√l
.
	`push_back
(
uid
);

421 
°d
::
ve˘‹
<
kî√l_öfo_t
*>::
ôî©‹
 
k
;

422  
k
=
m_ru¬ög_kî√ls
.
	`begö
(); k!=m_ru¬ög_kî√ls.
	`íd
(); k++ ) {

423 if–*
k
 =
kî√l
 ) {

424 *
k
 = 
NULL
;

428 
	`as£π
–
k
 !
m_ru¬ög_kî√ls
.
	`íd
() );

429 
	}
}

431 
£t_±x_w¨p_size
(c⁄° 
c‹e_c⁄fig
 * 
w¨p_size
);

433 
	ggpgpu_sim
::
	$gpgpu_sim
–c⁄° 
gpgpu_sim_c⁄fig
 &
c⁄fig
 )

434 : 
	`gpgpu_t
(
c⁄fig
), 
	$m_c⁄fig
(
c⁄fig
)

436 
m_shadî_c⁄fig
 = &
m_c⁄fig
.m_shader_config;

437 
m_mem‹y_c⁄fig
 = &
m_c⁄fig
.m_memory_config;

438 
	`£t_±x_w¨p_size
(
m_shadî_c⁄fig
);

439 
	`±x_fûe_löe_°©s_¸óã_expo£d_œãncy_åackî
(
m_c⁄fig
.
	`num_shadî
());

441 
m_shadî_°©s
 = 
√w
 
	`shadî_c‹e_°©s
(
m_shadî_c⁄fig
);

442 
m_mem‹y_°©s
 = 
√w
 
	`mem‹y_°©s_t
(
m_c⁄fig
.
	`num_shadî
(),
m_shadî_c⁄fig
,
m_mem‹y_c⁄fig
);

444 
gpu_sim_ö¢
 = 0;

445 
gpu_tŸ_sim_ö¢
 = 0;

446 
gpu_tŸ_issued_˘a
 = 0;

447 
gpu_dódlock
 = 
Ál£
;

449 
m_˛u°î
 = 
√w
 
simt_c‹e_˛u°î
*[
m_shadî_c⁄fig
->
n_simt_˛u°îs
];

450 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++)

452 
m_˛u°î
[
i
] = 
√w
 
	`simt_c‹e_˛u°î
(
this
,i,
m_shadî_c⁄fig
,
m_mem‹y_c⁄fig
,
m_shadî_°©s
,
m_mem‹y_°©s
);

454 
m_˛u°î
[
i
]->
m_KAIN_¥o˚ss
.
	`˛ór
();

457 
m_mem‹y_∑πôi⁄_unô
 = 
√w
 
mem‹y_∑πôi⁄_unô
*[
m_mem‹y_c⁄fig
->
m_n_mem
];

458 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

459 
m_mem‹y_∑πôi⁄_unô
[
i
] = 
√w
 
	`mem‹y_∑πôi⁄_unô
(i, 
m_mem‹y_c⁄fig
, 
m_mem‹y_°©s
);

461 
	`i˙t_öô
(
m_shadî_c⁄fig
->
n_simt_˛u°îs
,
m_mem‹y_c⁄fig
->
m_n_mem
);

463 
	`time_ve˘‹_¸óã
(
NUM_MEM_REQ_STAT
);

464 
	`Ârötf
(
°dout
, "GPGPU-Sim uArch:Öerformance model initialization complete.\n");

466 
m_ru¬ög_kî√ls
.
	`ªsize
–
c⁄fig
.
max_c⁄cuºít_kî√l
, 
NULL
 );

467 
m_œ°_issued_kî√l
 = 0;

468 
m_œ°_˛u°î_issue
 = 0;

469 
	}
}

471 
	ggpgpu_sim
::
	$sh¨ed_mem_size
() const

473  
m_shadî_c⁄fig
->
gpgpu_shmem_size
;

474 
	}
}

476 
	ggpgpu_sim
::
	$num_ªgi°îs_≥r_c‹e
() const

478  
m_shadî_c⁄fig
->
gpgpu_shadî_ªgi°îs
;

479 
	}
}

481 
	ggpgpu_sim
::
	$wΩ_size
() const

483  
m_shadî_c⁄fig
->
w¨p_size
;

484 
	}
}

486 
	ggpgpu_sim
::
	$shadî_˛ock
() const

488  
m_c⁄fig
.
c‹e_‰eq
/1000;

489 
	}
}

491 
	ggpgpu_sim
::
	$£t_¥›
–
cudaDevi˚Pr›
 *
¥›
 )

493 
m_cuda_¥›îtõs
 = 
¥›
;

494 
	}
}

496 c⁄° 
cudaDevi˚Pr›
 *
	ggpgpu_sim
::
	$gë_¥›
() const

498  
m_cuda_¥›îtõs
;

499 
	}
}

501 
divîgí˚_suµ‹t_t
 
	ggpgpu_sim
::
	$simd_modñ
() const

503  
m_shadî_c⁄fig
->
modñ
;

504 
	}
}

506 
	ggpgpu_sim_c⁄fig
::
	$öô_˛ock_domaös
()

508 
	`ssˇnf
(
gpgpu_˛ock_domaös
,"%lf:%lf:%lf:%lf",

509 &
c‹e_‰eq
, &
i˙t_‰eq
, &
l2_‰eq
, &
døm_‰eq
);

510 
c‹e_‰eq
 = c‹e_‰eq 
MhZ
;

511 
i˙t_‰eq
 = i˙t_‰eq 
MhZ
;

512 
l2_‰eq
 =Ü2_‰eq 
MhZ
;

513 
døm_‰eq
 = døm_‰eq 
MhZ
;

514 
c‹e_≥riod
 = 1/
c‹e_‰eq
;

515 
i˙t_≥riod
 = 1/
i˙t_‰eq
;

516 
døm_≥riod
 = 1/
døm_‰eq
;

517 
l2_≥riod
 = 1/
l2_‰eq
;

518 
	`¥ötf
("GPGPU-Sim uArch: clock fªqs: %lf:%lf:%lf:%lf\n",
c‹e_‰eq
,
i˙t_‰eq
,
l2_‰eq
,
døm_‰eq
);

519 
	`¥ötf
("GPGPU-Sim uArch: clockÖîiods: %.20lf:%.20lf:%.20lf:%.20lf\n",
c‹e_≥riod
,
i˙t_≥riod
,
l2_≥riod
,
døm_≥riod
);

520 
	}
}

522 
	ggpgpu_sim
::
	$ªöô_˛ock_domaös
()

524 
c‹e_time
 = 0;

525 
døm_time
 = 0;

526 
i˙t_time
 = 0;

527 
l2_time
 = 0;

528 
	}
}

530 
boﬁ
 
	ggpgpu_sim
::
	$a˘ive
()

532 i‡(
m_c⁄fig
.
gpu_max_cy˛e_›t
 && (
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
) >= m_config.gpu_max_cycle_opt)

533  
Ál£
;

534 i‡(
m_c⁄fig
.
gpu_max_ö¢_›t
 && (
gpu_tŸ_sim_ö¢
 + 
gpu_sim_ö¢
) >= m_config.gpu_max_insn_opt)

535  
Ál£
;

536 i‡(
m_c⁄fig
.
gpu_max_˘a_›t
 && (
gpu_tŸ_issued_˘a
 >= m_config.gpu_max_cta_opt) )

537  
Ál£
;

538 i‡(
m_c⁄fig
.
gpu_dódlock_dëe˘
 && 
gpu_dódlock
)

539  
Ál£
;

540 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++)

541 if–
m_˛u°î
[
i
]->
	`gë_nŸ_com∂ëed
()>0 )

542  
åue
;;

543 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

544 if–
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`busy
()>0 )

545  
åue
;;

546 if–
	`i˙t_busy
() )

547  
åue
;

548 if–
	`gë_m‹e_˘a_À·
() )

549  
åue
;

550  
Ál£
;

551 
	}
}

553 
	ggpgpu_sim
::
	$öô
()

556 
gpu_sim_cy˛e
 = 0;

557 
gpu_sim_ö¢
 = 0;

558 
œ°_gpu_sim_ö¢
 = 0;

559 
m_tŸÆ_˘a_œunched
=0;

561 
	`ªöô_˛ock_domaös
();

562 
	`£t_∑øm_gpgpu_num_shadîs
(
m_c⁄fig
.
	`num_shadî
());

563 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++)

564 
m_˛u°î
[
i
]->
	`ªöô
();

565 
m_shadî_°©s
->
	`√w_grid
();

567 i‡(
m_c⁄fig
.
g_visuÆizî_íabÀd
) {

568 
	`¸óã_thªad_CFloggî
–
m_c⁄fig
.
	`num_shadî
(), 
m_shadî_c⁄fig
->
n_thªad_≥r_shadî
, 0, m_c⁄fig.
gpgpu_cÊog_öãrvÆ
 );

570 
	`shadî_CTA_cou¡_¸óã
–
m_c⁄fig
.
	`num_shadî
(), m_c⁄fig.
gpgpu_cÊog_öãrvÆ
);

571 i‡(
m_c⁄fig
.
gpgpu_cÊog_öãrvÆ
 != 0) {

572 
	`ö¢_w¨p_occ_¸óã
–
m_c⁄fig
.
	`num_shadî
(), 
m_shadî_c⁄fig
->
w¨p_size
 );

573 
	`shadî_w¨p_occ_¸óã
–
m_c⁄fig
.
	`num_shadî
(), 
m_shadî_c⁄fig
->
w¨p_size
, m_c⁄fig.
gpgpu_cÊog_öãrvÆ
);

574 
	`shadî_mem_acc_¸óã
–
m_c⁄fig
.
	`num_shadî
(), 
m_mem‹y_c⁄fig
->
m_n_mem
, 4, m_c⁄fig.
gpgpu_cÊog_öãrvÆ
);

575 
	`shadî_mem_œt_¸óã
–
m_c⁄fig
.
	`num_shadî
(), m_c⁄fig.
gpgpu_cÊog_öãrvÆ
);

576 
	`shadî_ˇche_ac˚ss_¸óã
–
m_c⁄fig
.
	`num_shadî
(), 3, m_c⁄fig.
gpgpu_cÊog_öãrvÆ
);

577 
	`£t_•ûl_öãrvÆ
 (
m_c⁄fig
.
gpgpu_cÊog_öãrvÆ
 * 40);

580 i‡(
g_√tw‹k_mode
)

581 
	`i˙t_öô_grid
();

582 
	}
}

584 
	ggpgpu_sim
::
	$upd©e_°©s
() {

585 
m_mem‹y_°©s
->
	`memœt°©_œt_pw
();

586 
gpu_tŸ_sim_cy˛e
 +
gpu_sim_cy˛e
;

587 
gpu_tŸ_sim_ö¢
 +
gpu_sim_ö¢
;

588 
	}
}

590 
	ggpgpu_sim
::
	$¥öt_°©s
()

593 
	`±x_fûe_löe_°©s_wrôe_fûe
();

594 
	`gpu_¥öt_°©
();

604 
	}
}

606 
	ggpgpu_sim
::
	$dódlock_check
()

608 i‡(
m_c⁄fig
.
gpu_dódlock_dëe˘
 && 
gpu_dódlock
) {

609 
	`fÊush
(
°dout
);

610 
	`¥ötf
("\n\nGPGPU-Sim uArch: ERROR ** deadlock detected:Üast writeback core %u @ gpu_sim_cycle %u (+ gpu_tot_sim_cycle %u) (%u cycleságo)\n",

611 
gpu_sim_ö¢_œ°_upd©e_sid
,

612 (Ë
gpu_sim_ö¢_œ°_upd©e
, (Ë(
gpu_tŸ_sim_cy˛e
-
gpu_sim_cy˛e
),

613 (Ë(
gpu_sim_cy˛e
 - 
gpu_sim_ö¢_œ°_upd©e
 ));

614 
num_c‹es
=0;

615 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++) {

616 
nŸ_com∂ëed
 = 
m_˛u°î
[
i
]->
	`gë_nŸ_com∂ëed
();

617 if–
nŸ_com∂ëed
 ) {

618 i‡–!
num_c‹es
 ) {

619 
	`¥ötf
("GPGPU-Sim uArch: DEADLOCK shader coresÇoÜonger committing instructions [core(#Åhreads)]:\n" );

620 
	`¥ötf
("GPGPU-Sim uArch: DEADLOCK ");

621 
m_˛u°î
[
i
]->
	`¥öt_nŸ_com∂ëed
(
°dout
);

622 } i‡(
num_c‹es
 < 8 ) {

623 
m_˛u°î
[
i
]->
	`¥öt_nŸ_com∂ëed
(
°dout
);

624 } i‡(
num_c‹es
 >= 8 ) {

625 
	`¥ötf
(" + others ... ");

627 
num_c‹es
+=
m_shadî_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
;

630 
	`¥ötf
("\n");

631 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++) {

632 
boﬁ
 
busy
 = 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`busy
();

633 if–
busy
 )

634 
	`¥ötf
("GPGPU-Sim uArch DEADLOCK: mem‹yÖ¨tôi⁄ %u busy\n", 
i
 );

636 if–
	`i˙t_busy
() ) {

637 
	`¥ötf
("GPGPU-Sim uArch DEADLOCK: iterconnect containsÅraffic\n");

638 
	`di•œy_i˙t_°©e
–
°dout
 );

640 
	`¥ötf
("\nRe-runÅhe simulator in gdbánd use debugÑoutines in .gdbinitÅo debugÅhis\n");

641 
	`fÊush
(
°dout
);

642 
	`ab‹t
();

644 
	}
}

646 
	ggpgpu_sim
::
	$gpu_¥öt_°©
() const

648 
time_c‹e1
;

649 
time_i˙t1
;

650 
time_døm
;

651 
time_l2
;

652 
time_i˙t2
;

653 
time_c‹e2
;

654 
time_œ°_thªad
;

656 
time_c‹e_issue
;

657 
wb_time
[20];

658 
ex_time
[20];

659 
ªad_time
[20];

660 
issue_time
[20];

661 
decode_time
[20];

662 
„tch_time
[20];

663 
time_˛u°î_thªad0
[20];

665 
	`¥ötf
("c‹e1Åimêi†%.20lf\n",
time_c‹e1
);

666 
	`¥ötf
("i˙t1Åimêi†%.20lf\n",
time_i˙t1
);

667 
	`¥ötf
("dømÅimêi†%.20lf\n",
time_døm
);

668 
	`¥ötf
("l2Åimêi†%.20lf\n",
time_l2
);

669 
	`¥ötf
("i˙t2Åimêi†%.20lf\n",
time_i˙t2
);

670 
	`¥ötf
("c‹e2Åimêi†%.20lf\n",
time_c‹e2
);

671 
	`¥ötf
("fú° ovîÅhªadÅimêi†%.20lf\n",
time_œ°_thªad
);

672 
	`¥ötf
("c‹e_issuêtimêi†%.20lf\n",
time_c‹e_issue
);

673 
i
 = 0; i < 
Clu°î_Thªad_Num
; i++)

675 
	`¥ötf
("Clu°î-thªad %d,Åimêi†%.20lf\n",
i
,
time_˛u°î_thªad0
[i]);

676 
	`¥ötf
("Clu°î-thªad0 wbÅimêi†%.20lf\n",
wb_time
[
i
]);

677 
	`¥ötf
("Clu°î-thªad0ÉxÅimêi†%.20lf\n",
ex_time
[
i
]);

678 
	`¥ötf
("Clu°î-thªad0Ñód o≥øndÅimêi†%.20lf\n",
ªad_time
[
i
]);

679 
	`¥ötf
("Clu°î-thªad0 issuêtimêi†%.20lf\n",
issue_time
[
i
]);

680 
	`¥ötf
("Clu°î-thªad0 decodêtimêi†%.20lf\n",
decode_time
[
i
]);

681 
	`¥ötf
("Clu°î-thªad0 fëchÅimêi†%.20lf\n",
„tch_time
[
i
]);

686 
	`¥ötf
("gpu_sim_cy˛ê%Œd\n", 
gpu_sim_cy˛e
);

687 
	`¥ötf
("gpu_sim_ö¢ = %Œd\n", 
gpu_sim_ö¢
);

688 
	`¥ötf
("gpu_ù¯%12.4f\n", ()
gpu_sim_ö¢
 / 
gpu_sim_cy˛e
);

689 
	`¥ötf
("gpu_tŸ_sim_cy˛ê%Œd\n", 
gpu_tŸ_sim_cy˛e
+
gpu_sim_cy˛e
);

690 
	`¥ötf
("gpu_tŸ_sim_ö¢ = %Œd\n", 
gpu_tŸ_sim_ö¢
+
gpu_sim_ö¢
);

691 
	`¥ötf
("gpu_tŸ_ù¯%12.4f\n", ()(
gpu_tŸ_sim_ö¢
+
gpu_sim_ö¢
Ë/ (
gpu_tŸ_sim_cy˛e
+
gpu_sim_cy˛e
));

692 
	`¥ötf
("gpu_tŸ_issued_˘®%Œd\n", 
gpu_tŸ_issued_˘a
);

695 
	`¥ötf
("gpu_°Æl_dømfuŒ = %d\n", 
gpu_°Æl_dømfuŒ
);

696 
	`¥ötf
("gpu_°Æl_i˙t2sh = %d\n", 
gpu_°Æl_i˙t2sh
 );

698 
time_t
 
cuº_time
;

699 
	`time
(&
cuº_time
);

700 
ñ≠£d_time
 = 
	`MAX
–
cuº_time
 - 
g_simuœti⁄_°¨âime
, 1 );

701 
	`¥ötf
–"gpu_tŸÆ_sim_øã=%u\n", ()––
gpu_tŸ_sim_ö¢
 + 
gpu_sim_ö¢
 ) / 
ñ≠£d_time
 ) );

703 
	`shadî_¥öt_l1_miss_°©
–
°dout
 );

705 
m_shadî_°©s
->
	`¥öt
(
°dout
);

708 
m_mem‹y_°©s
->
	`memœt°©_¥öt
(
m_mem‹y_c⁄fig
->
m_n_mem
,m_mem‹y_c⁄fig->
nbk
);

709 
m_mem‹y_°©s
->
	`¥öt
(
°dout
);

710 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

711 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`¥öt
(
°dout
);

712 i‡(!
m_mem‹y_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
(Ë&& m_mem‹y_c⁄fig->m_L2_c⁄fig.
	`gë_num_löes
())

713 
	`L2c_¥öt_ˇche_°©
();

714 i‡(
m_c⁄fig
.
gpgpu_cÊog_öãrvÆ
 != 0) {

715 
	`•ûl_log_to_fûe
 (
°dout
, 1, 
gpu_sim_cy˛e
);

716 
	`ö¢_w¨p_occ_¥öt
(
°dout
);

718 i‡–
gpgpu_±x_ö°ru˘i⁄_˛assifiˇti⁄
 ) {

719 
	`SètDi•
–
g_ö°_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
]);

720 
	`SètDi•
–
g_ö°_›_˛assifiˇti⁄_°©
[
g_±x_kî√l_cou¡
]);

722 
	`time_ve˘‹_¥öt
();

723 
	`fÊush
(
°dout
);

724 
	}
}

728 
	ggpgpu_sim
::
	$thªads_≥r_c‹e
() const

730  
m_shadî_c⁄fig
->
n_thªad_≥r_shadî
;

731 
	}
}

733 
	gshadî_c‹e_˘x
::
	$mem_ö°ru˘i⁄_°©s
(c⁄° 
w¨p_ö°_t
 &
ö°
)

735 
a˘ive_cou¡
 = 
ö°
.
	`a˘ive_cou¡
();

737 
ö°
.
•a˚
.
	`gë_ty≥
()) {

738 
undeföed_•a˚
:

739 
ªg_•a˚
:

741 
sh¨ed_•a˚
:

742 
m_°©s
->
gpgpu_n_shmem_ö¢
 +
a˘ive_cou¡
;

744 
c⁄°_•a˚
:

745 
m_°©s
->
gpgpu_n_c⁄°_ö¢
 +
a˘ive_cou¡
;

747 
∑øm_•a˚_kî√l
:

748 
∑øm_•a˚_loˇl
:

749 
m_°©s
->
gpgpu_n_∑øm_ö¢
 +
a˘ive_cou¡
;

751 
ãx_•a˚
:

752 
m_°©s
->
gpgpu_n_ãx_ö¢
 +
a˘ive_cou¡
;

754 
globÆ_•a˚
:

755 
loˇl_•a˚
:

756 if–
ö°
.
	`is_°‹e
() )

757 
m_°©s
->
gpgpu_n_°‹e_ö¢
 +
a˘ive_cou¡
;

759 
m_°©s
->
gpgpu_n_lﬂd_ö¢
 +
a˘ive_cou¡
;

762 
	`ab‹t
();

764 
	}
}

776 
˛ass
 
KAIN_w¨p_ö°
 **
block_w¨pid
[299999][100];

777 
	gshadî_c‹e_˘x
::
	$issue_block2c‹e
–
kî√l_öfo_t
 &
kî√l
 )

780 
	`£t_max_˘a
(
kî√l
);

785 
‰ì_˘a_hw_id
=()-1;

786 
i
=0;i<
kî√l_max_˘a_≥r_shadî
;i++ ) {

787 if–
m_˘a_°©us
[
i
]==0 ) {

788 
‰ì_˘a_hw_id
=
i
;

792 
	`as£π
–
‰ì_˘a_hw_id
!=()-1 );

795 
˘a_size
 = 
kî√l
.
	`thªads_≥r_˘a
();

800 
∑dded_˘a_size
 = 
˘a_size
;

801 i‡(
˘a_size
%
m_c⁄fig
->
w¨p_size
)

802 
∑dded_˘a_size
 = ((
˘a_size
/
m_c⁄fig
->
w¨p_size
)+1)*(m_config->warp_size);

803 
°¨t_thªad
 = 
‰ì_˘a_hw_id
 * 
∑dded_˘a_size
;

804 
íd_thªad
 = 
°¨t_thªad
 + 
˘a_size
;

807 
	`ªöô
(
°¨t_thªad
, 
íd_thªad
,
Ál£
);

811 
w¨p_£t_t
 
w¨ps
;

812 
¡hªads_ö_block
= 0;

813 
ID
 = 
	`KAINgëThªadID
();

834 
i
 = 
°¨t_thªad
; i<
íd_thªad
; i++) {

835 
m_thªadSèã
[
i
].
m_˘a_id
 = 
‰ì_˘a_hw_id
;

836 
w¨p_id
 = 
i
/
m_c⁄fig
->
w¨p_size
;

839 
¡hªads_ö_block
 +
	`±x_sim_öô_thªad1
(
kî√l
,&
m_thªad
[
i
],
m_sid
,i,
˘a_size
-(i-
°¨t_thªad
),
m_c⁄fig
->
n_thªad_≥r_shadî
,
this
,
‰ì_˘a_hw_id
,
w¨p_id
,
m_˛u°î
->
	`gë_gpu
(),
kî√l_max_˘a_≥r_shadî
);

840 
m_thªad
[
i
]->
	`£t_ThªadID_kaö
(
ID
);

842 
m_thªadSèã
[
i
].
m_a˘ive
 = 
åue
;

843 
w¨ps
.
	`£t
–
w¨p_id
 );

848 
	`as£π
–
¡hªads_ö_block
 > 0 &&Çthªads_ö_block <
m_c⁄fig
->
n_thªad_≥r_shadî
);

849 
m_˘a_°©us
[
‰ì_˘a_hw_id
]=
¡hªads_ö_block
;

853 
m_b¨rõrs
.
	`Æloˇã_b¨rõr
(
‰ì_˘a_hw_id
,
w¨ps
);

856 
	`öô_w¨ps
–
‰ì_˘a_hw_id
, 
°¨t_thªad
, 
íd_thªad
);

857 
m_n_a˘ive_˘a
++;

859 
	`shadî_CTA_cou¡_log
(
m_sid
, 1);

861 
	}
}

865 
	gdøm_t
::
	$døm_log
–
èsk
 )

867 i‡(
èsk
 =
SAMPLELOG
) {

868 
	`SètAddSam∂e
(
mrqq_Di°
, 
	`que_Àngth
());

869 } i‡(
èsk
 =
DUMPLOG
) {

870 
	`¥ötf
 ("QueuêLígth DRAM[%d] ",
id
);
	`SètDi•
(
mrqq_Di°
);

872 
	}
}

875 
	ggpgpu_sim
::
	$√xt_˛ock_domaö
()

877 
smÆÀ°
 = 
	`mö3
(
c‹e_time
,
i˙t_time
,
døm_time
);

878 
mask
 = 0x00;

879 i‡–
l2_time
 <
smÆÀ°
 ) {

880 
smÆÀ°
 = 
l2_time
;

881 
mask
 |
L2
 ;

882 
l2_time
 +
m_c⁄fig
.
l2_≥riod
;

884 i‡–
i˙t_time
 <
smÆÀ°
 ) {

885 
mask
 |
ICNT
;

886 
i˙t_time
 +
m_c⁄fig
.
i˙t_≥riod
;

888 i‡–
døm_time
 <
smÆÀ°
 ) {

889 
mask
 |
DRAM
;

890 
døm_time
 +
m_c⁄fig
.
døm_≥riod
;

892 i‡–
c‹e_time
 <
smÆÀ°
 ) {

893 
mask
 |
CORE
;

894 
c‹e_time
 +
m_c⁄fig
.
c‹e_≥riod
;

896  
mask
;

897 
	}
}

899 
	ggpgpu_sim
::
	$issue_block2c‹e
()

901 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++) {

902 
idx
 = (
i
+
m_œ°_˛u°î_issue
+1Ë% 
m_shadî_c⁄fig
->
n_simt_˛u°îs
;

903 
num
 = 
m_˛u°î
[
idx
]->
	`issue_block2c‹e
();

904 if–
num
 ) {

905 
m_œ°_˛u°î_issue
=
idx
;

906 
m_tŸÆ_˘a_œunched
 +
num
;

909 
	}
}

911 
	gg_sögÀ_°ï
=0;

918 
timevÆ
 
	gbegö
;

919 
timevÆ
 
	gíd
;

921 
	$KAIN_£t_begö
()

923 
	`gëtimeofday
(&
begö
,
NULL
);

924 
	}
}

925 
	$KAIN_£t_íd
()

927 
	`gëtimeofday
(&
íd
,
NULL
);

928 
	}
}

929 
	$KAIN_time
()

931 
timeu£
 = 1000000*(
íd
.
tv_£c
-
begö
.tv_£c)+íd.
tv_u£c
-begin.tv_usec;

932 
time
 = 
timeu£
 / 1000000.0;

933  
time
;

934 
	}
}

935 
	gtime_c‹e1
;

936 
	gtime_i˙t1
;

937 
	gtime_døm
;

938 
	gtime_l2
;

939 
	gtime_i˙t2
;

940 
	gtime_c‹e2
;

941 
	gtime_c‹e_issue
;

942 
	gtime_˛u°î_thªad0
[20];

943 
	gtime_œ°_thªad
;

944 
wb_time
[20];

945 
ex_time
[20];

946 
ªad_time
[20];

947 
issue_time
[20];

948 
decode_time
[20];

949 
„tch_time
[20];

956 
timevÆ
 
	gbegö0
[20];

957 
timevÆ
 
	gíd0
[20];

959 
	$KAIN_£t_begö0
(
ID
)

961 
	`gëtimeofday
(
begö0
+
ID
,
NULL
);

962 
	}
}

963 
	$KAIN_£t_íd0
(
ID
)

965 
	`gëtimeofday
(
íd0
+
ID
,
NULL
);

966 
	}
}

967 
	$KAIN_time0
(
ID
)

969 
timeu£
 = 1000000*(
íd0
[
ID
].
tv_£c
-
begö0
[ID].tv_£c)+íd0[ID].
tv_u£c
-begin0[ID].tv_usec;

970 
time
 = 
timeu£
 / 1000000.0;

971  
time
;

972 
	}
}

979 
	sKAIN_SM_run_CTA_°r


981 
	mID
;

982 
	mbegö
;

983 
	míd
;

985 
	gKAIN_±hªad_öô
;

986 
±hªad_b¨rõr_t
 
	gB¨rõr_KAIN
;

987 
	gSem_KAIN_cy˛eBegö
[10];

988 
	gSem_KAIN_cy˛eOvî
[10];

989 
±hªad_muãx_t
 
	gKAIN_muãx
;

990 
±hªad_muãx_t
 
	gKAIN_ö°ru˘i⁄_muãx
;

992 *
	$KAIN_Clu°î
(*
thªad_tmp
)

994 
mm
;

995 
gpgpu_sim
 *
g_the_gpu
;

996 
Pro˚ss_id
;

997 
KAIN_SM_run_CTA_°r
 *
tmp
 = (KAIN_SM_run_CTA_°∏*)
thªad_tmp
;

998 
ID
 = 
tmp
->ID;

999 
begö
 = 
tmp
->begin;

1000 
íd
 = 
tmp
->end;

1001 
	`¥ötf
("¥o˚ss_id i†%d,íd i†%d\n",
Pro˚ss_id
,
íd
);

1022 if(
åue
 =
	`__sync_boﬁ_com∑ª_™d_sw≠
(
ID
+
Sem_KAIN_cy˛eBegö
,0,1))

1028 if(
KAIN_±hªad_öô
 == 0)

1029 
	`±hªad_exô
(
NULL
);

1041 
	`KAIN_£t_begö0
(
ID
);

1044 
g_the_gpu
->
	`run_KAIN_Clu°î
(
begö
,
íd
);

1051 
	`as£π
(
åue
==
	`__sync_boﬁ_com∑ª_™d_sw≠
(
ID
+
Sem_KAIN_cy˛eOvî
,1,0));

1053 
	`KAIN_£t_íd0
(
ID
);

1054 
time_˛u°î_thªad0
[
ID
] +
	`KAIN_time0
(ID);

1057 
	}
}

1058 
	ggpgpu_sim
::
	$run_KAIN_Clu°î
(
begö
,
íd
)

1060 
i
=
begö
;i<=
íd
;i++) {

1061 i‡(
m_˛u°î
[
i
]->
	`gë_nŸ_com∂ëed
(Ë|| 
	`gë_m‹e_˘a_À·
() ) {

1063 
m_˛u°î
[
i
]->
	`c‹e_cy˛e
();

1067 
	}
}

1071 *
Rubbish_ªcy˛e
(*
rubbishID
);

1072 
	gEnd
[
Clu°î_Thªad_Num
];

1073 
	gBEGIN
[
Clu°î_Thªad_Num
];

1075 
±hªad_t
 
	gthªad_id_˛u°î
[
Clu°î_Thªad_Num
];

1084 
	ggpgpu_sim
::
	$cy˛e
()

1087 
öô_time_kaö
 = 0;

1088 if(
öô_time_kaö
 == 0)

1091 
time_c‹e1
 = 0.0;

1092 
time_i˙t1
 = 0.0;

1093 
time_døm
 = 0.0;

1094 
time_l2
 = 0.0;

1095 
time_i˙t2
 = 0.0;

1096 
time_c‹e2
 = 0.0;

1097 
time_œ°_thªad
 = 0.0;

1098 
öô_time_kaö
 = 1;

1099 
i
 =0; i < 
Clu°î_Thªad_Num
; i++)

1101 
time_˛u°î_thªad0
[
i
] = 0.0;

1102 
wb_time
[
i
] = 0.0;

1103 
ex_time
[
i
] = 0.0;

1104 
ªad_time
[
i
] = 0.0;

1105 
issue_time
[
i
] = 0.0;

1106 
decode_time
[
i
] = 0.0;

1107 
„tch_time
[
i
] = 0.0;

1111 
˛ock_mask
 = 
	`√xt_˛ock_domaö
();

1114 
KAIN_SM_run_CTA_°r
 *
thªad_tmp
;

1115 
öô_lock
;

1116 if(
KAIN_±hªad_öô
 == 0)

1119 
KAIN_±hªad_öô
 = 1;

1120 
öô_lock
 = 1;

1122 
thªad_tmp
 = (
KAIN_SM_run_CTA_°r
 *)
	`mÆloc
((KAIN_SM_run_CTA_°r)*
Clu°î_Thªad_Num
);

1123 
	`¥ötf
("thªad_tm∞i†%lx\n",
thªad_tmp
);

1124 
	`fÊush
(
°dout
);

1128 
i
 = 0; i < 
Clu°î_Thªad_Num
; i++)

1130 *(
i
+
Sem_KAIN_cy˛eOvî
) = 0;

1131 *(
i
+
Sem_KAIN_cy˛eBegö
) = 1;

1133 if(
öô_lock
 == 0)

1135 
	`±hªad_muãx_öô
(&
KAIN_muãx
,
NULL
);

1136 
	`±hªad_muãx_öô
(&
KAIN_ö°ru˘i⁄_muãx
,
NULL
);

1140 
±hªad_©å_t
 
©å_P
;

1141 
sched_∑øm
 
∑øm_P
;

1142 
	`±hªad_©å_öô
(&
©å_P
);

1143 
	`±hªad_©å_£töhîôsched
 (&
©å_P
,
PTHREAD_EXPLICIT_SCHED
);

1144 
	`±hªad_©å_£tschedpﬁicy
 (&
©å_P
, 
SCHED_FIFO
);

1145 
∑øm_P
.
sched_¥i‹ôy
 = 99;

1146 
	`±hªad_©å_£tsched∑øm
 (&
©å_P
, &
∑øm_P
);

1149 
i
 = 0; i < 
Clu°î_Thªad_Num
;i++)

1151 
Àn
;

1152 
thªad_tmp
[
i
].
ID
 = i;

1153 if(
i
 < 
m_shadî_c⁄fig
->
n_simt_˛u°îs
%
Clu°î_Thªad_Num
)

1155 
Àn
 = 
m_shadî_c⁄fig
->
n_simt_˛u°îs
/
Clu°î_Thªad_Num
 + 1;

1156 i‡(
i
 == 0)

1158 
thªad_tmp
[
i
].
begö
 = 0;

1159 
thªad_tmp
[
i
].
íd
 =Åhªad_tmp[i].
begö
+
Àn
-1;

1163 
thªad_tmp
[
i
].
begö
 =Åhªad_tmp[i-1].
íd
+1;

1164 
thªad_tmp
[
i
].
íd
 =Åhªad_tmp[i].
begö
+
Àn
 - 1;

1169 
Àn
 = 
m_shadî_c⁄fig
->
n_simt_˛u°îs
/
Clu°î_Thªad_Num
;

1170 if(
i
 == 0)

1172 
thªad_tmp
[
i
].
begö
 = 0;

1173 
thªad_tmp
[
i
].
íd
 =Åhªad_tmp[i].
begö
+
Àn
-1;

1177 
thªad_tmp
[
i
].
begö
 =Åhªad_tmp[i-1].
íd
+1;

1178 
thªad_tmp
[
i
].
íd
 =Åhªad_tmp[i].
begö
+
Àn
 - 1;

1181 
˛
 = 
thªad_tmp
[
i
].
begö
; cl<thªad_tmp[i].
íd
;cl++)

1183 
m_˛u°î
[
˛
]->
	`KAIN£tThªadID
(
i
);

1185 
End
[
i
] = 
thªad_tmp
[i].
íd
;

1186 
BEGIN
[
i
] = 
thªad_tmp
[i].
begö
;

1188 
	`¥ötf
("Before gpgpusim createÅhread\n");

1209 
	`±hªad_¸óã
(
thªad_id_˛u°î
+
i
,&
©å_P
,
KAIN_Clu°î
,
thªad_tmp
+i);

1250 
	`KAIN_£t_begö
();

1251 i‡(
˛ock_mask
 & 
CORE
 ) {

1255 
Num
 = 0;

1257 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++)

1259 
m_˛u°î
[
i
]->
	`i˙t_cy˛e
();

1274 
	`KAIN_£t_íd
();

1275 
time_c‹e1
 +
	`KAIN_time
();

1277 
	`KAIN_£t_begö
();

1278 i‡(
˛ock_mask
 & 
ICNT
) {

1280 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++) {

1281 
mem_„tch
* 
mf
 = 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`t›
();

1282 i‡(
mf
) {

1283 
ª•⁄£_size
 = 
mf
->
	`gë_is_wrôe
()?mf->
	`gë_˘æ_size
():mf->
	`size
();

1284 i‡–::
	`i˙t_has_buf„r
–
m_shadî_c⁄fig
->
	`mem2devi˚
(
i
), 
ª•⁄£_size
 ) ) {

1285 i‡(!
mf
->
	`gë_is_wrôe
())

1286 
mf
->
	`£t_ªtu∫_time°amp
(
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1287 
mf
->
	`£t_°©us
(
IN_ICNT_TO_SHADER
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1288 ::
	`i˙t_push
–
m_shadî_c⁄fig
->
	`mem2devi˚
(
i
), 
mf
->
	`gë_çc
(), mf, 
ª•⁄£_size
 );

1289 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`p›
();

1291 
gpu_°Æl_i˙t2sh
++;

1294 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`p›
();

1298 
	`KAIN_£t_íd
();

1299 
time_i˙t1
 +
	`KAIN_time
();

1302 
	`KAIN_£t_begö
();

1303 i‡(
˛ock_mask
 & 
DRAM
) {

1304 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

1305 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`døm_cy˛e
();

1307 
	`KAIN_£t_íd
();

1308 
time_døm
 +
	`KAIN_time
();

1310 
	`KAIN_£t_begö
();

1311 i‡(
˛ock_mask
 & 
L2
) {

1312 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++) {

1315 i‡–
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`fuŒ
() ) {

1316 
gpu_°Æl_dømfuŒ
++;

1318 
mem_„tch
* 
mf
 = (mem_„tch*Ë
	`i˙t_p›
–
m_shadî_c⁄fig
->
	`mem2devi˚
(
i
) );

1319 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`push
–
mf
, 
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
 );

1321 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`ˇche_cy˛e
(
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1324 
	`KAIN_£t_íd
();

1325 
time_l2
 +
	`KAIN_time
();

1329 
	`KAIN_£t_begö
();

1330 i‡(
˛ock_mask
 & 
ICNT
) {

1331 
	`i˙t_å™s„r
();

1333 
	`KAIN_£t_íd
();

1334 
time_i˙t2
 +
	`KAIN_time
();

1337 i‡(
˛ock_mask
 & 
CORE
) {

1347 
	`KAIN_£t_begö
();

1359 
Num
 = 0; Num < 
Clu°î_Thªad_Num
; Num++)

1361 
	`__sync_„tch_™d_add
 ((
Num
+
Sem_KAIN_cy˛eOvî
),1);

1362 
	`__sync_„tch_™d_sub
((
Num
+
Sem_KAIN_cy˛eBegö
),1);

1366 
cou¡
 = 0;

1367 
mask_com∂ëe
[10]={0,0,0,0,0,0,0,0,0,0};

1368 
îr‹_cou¡
 = 0;

1369 
i
 = 0; 1;i++)

1371 if(
i
 =
Clu°î_Thªad_Num
)

1372 
i
 = 0;

1374 if(
	`__sync_boﬁ_com∑ª_™d_sw≠
(
i
+
Sem_KAIN_cy˛eOvî
,0,0Ë=
åue
 && 
mask_com∂ëe
[i] != 1)

1376 if(
cou¡
 == 0)

1378 
	`KAIN_£t_íd
();

1379 
time_œ°_thªad
+=
	`KAIN_time
();

1381 
mask_com∂ëe
[
i
] = 1;

1383 
cou¡
++;

1385 if(
cou¡
 =
Clu°î_Thªad_Num
)

1401 
	`KAIN_£t_íd
();

1402 
time_c‹e2
 +
	`KAIN_time
();

1429 if–
g_sögÀ_°ï
 && ((
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
) >= g_single_step) ) {

1430 
	`asm
("int $03");

1432 
gpu_sim_cy˛e
++;

1433 if–
g_öãø˘ive_debuggî_íabÀd
 )

1434 
	`gpgpu_debug
();

1436 
	`issue_block2c‹e
();

1439 i‡(
m_c⁄fig
.
gpgpu_Êush_ˇche
) {

1440 
Æl_thªads_com∂ëe
 = 1 ;

1441 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++) {

1442 i‡(
m_˛u°î
[
i
]->
	`gë_nŸ_com∂ëed
() == 0)

1443 
m_˛u°î
[
i
]->
	`ˇche_Êush
();

1445 
Æl_thªads_com∂ëe
 = 0 ;

1447 i‡(
Æl_thªads_com∂ëe
 && !
m_mem‹y_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
() ) {

1448 
	`¥ötf
("Flushed L2 caches...\n");

1449 i‡(
m_mem‹y_c⁄fig
->
m_L2_c⁄fig
.
	`gë_num_löes
()) {

1450 
dlc
 = 0;

1451 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++) {

1452 
dlc
 = 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`ÊushL2
();

1453 
	`as£π
 (
dlc
 == 0);

1454 
	`¥ötf
("DútyÜöe†Êushed from L2 %d i†%d\n", 
i
, 
dlc
 );

1460 i‡(!(
gpu_sim_cy˛e
 % 
m_c⁄fig
.
gpu_°©_ßm∂e_‰eq
)) {

1461 
time_t
 
days
, 
hrs
, 
möuãs
, 
£c
;

1462 
time_t
 
cuº_time
;

1463 
	`time
(&
cuº_time
);

1464 
ñ≠£d_time
 = 
	`MAX
(
cuº_time
 - 
g_simuœti⁄_°¨âime
, 1);

1465 
days
 = 
ñ≠£d_time
/(3600*24);

1466 
hrs
 = 
ñ≠£d_time
/3600 - 24*
days
;

1467 
möuãs
 = 
ñ≠£d_time
/60 - 60*(
hrs
 + 24*
days
);

1468 
£c
 = 
ñ≠£d_time
 - 60*(
möuãs
 + 60*(
hrs
 + 24*
days
));

1472 
	`¥ötf
("GPGPU-Sim uArch: cycles simulated: %lld inst.: %lld (ipc=%4.1f) sim_rate=%u (inst/sec)Élapsed = %u:%u:%02u:%02u / %s",

1473 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
, 
gpu_tŸ_sim_ö¢
 + 
gpu_sim_ö¢
,

1474 ()
gpu_sim_ö¢
/()
gpu_sim_cy˛e
,

1475 ()((
gpu_tŸ_sim_ö¢
+
gpu_sim_ö¢
Ë/ 
ñ≠£d_time
),

1476 ()
days
,()
hrs
,()
möuãs
,()
£c
,

1477 
	`˘ime
(&
cuº_time
));

1479 
	`fÊush
(
°dout
);

1481 
m_mem‹y_°©s
->
	`memœt°©_œt_pw
();

1482 
	`visuÆizî_¥öt°©
();

1483 i‡(
m_c⁄fig
.
gpgpu_ru¡ime_°©
 && (m_c⁄fig.
gpu_ru¡ime_°©_Êag
 != 0) ) {

1484 i‡(
m_c⁄fig
.
gpu_ru¡ime_°©_Êag
 & 
GPU_RSTAT_BW_STAT
) {

1485 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

1486 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`¥öt_°©
(
°dout
);

1487 
	`¥ötf
("maxmrqœãncy = %d \n", 
m_mem‹y_°©s
->
max_mrq_œãncy
);

1488 
	`¥ötf
("maxmÊ©ícy = %d \n", 
m_mem‹y_°©s
->
max_mf_œãncy
);

1490 i‡(
m_c⁄fig
.
gpu_ru¡ime_°©_Êag
 & 
GPU_RSTAT_SHD_INFO
)

1491 
	`shadî_¥öt_ru¡ime_°©
–
°dout
 );

1492 i‡(
m_c⁄fig
.
gpu_ru¡ime_°©_Êag
 & 
GPU_RSTAT_L1MISS
)

1493 
	`shadî_¥öt_l1_miss_°©
–
°dout
 );

1497 i‡(!(
gpu_sim_cy˛e
 % 20000)) {

1499 i‡(
m_c⁄fig
.
gpu_dódlock_dëe˘
 && 
gpu_sim_ö¢
 =
œ°_gpu_sim_ö¢
) {

1500 
gpu_dódlock
 = 
åue
;

1502 
œ°_gpu_sim_ö¢
 = 
gpu_sim_ö¢
;

1505 
	`åy_¢≠_shŸ
(
gpu_sim_cy˛e
);

1506 
	`•ûl_log_to_fûe
 (
°dout
, 0, 
gpu_sim_cy˛e
);

1509 
	}
}

1511 
	gshadî_c‹e_˘x
::
	$dump_w¨p_°©e
–
FILE
 *
fout
 ) const

1513 
	`Ârötf
(
fout
, "\n");

1514 
	`Ârötf
(
fout
, "per warp functional simulation status:\n");

1515 
w
=0; w < 
m_c⁄fig
->
max_w¨ps_≥r_shadî
; w++ )

1516 
m_w¨p
[
w
].
	`¥öt
(
fout
);

1517 
	}
}

1519 
	ggpgpu_sim
::
	$dump_pùñöe
–
mask
, 
s
, 
m
 ) const

1532 
	`¥ötf
("DumpingÖipeline state...\n");

1533 if(!
mask
) mask = 0xFFFFFFFF;

1534 
i
=0;i<
m_shadî_c⁄fig
->
n_simt_˛u°îs
;i++) {

1535 if(
s
 != -1) {

1536 
i
 = 
s
;

1538 if(
mask
&1Ë
m_˛u°î
[
m_shadî_c⁄fig
->
	`sid_to_˛u°î
(
i
)]->
	`di•œy_pùñöe
(i,
°dout
,1,mask & 0x2E);

1539 if(
s
 != -1) {

1543 if(
mask
&0x10000) {

1544 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++) {

1545 if(
m
 != -1) {

1546 
i
=
m
;

1548 
	`¥ötf
("DRAM / mem‹y c⁄åﬁÀ∏%u:\n", 
i
);

1549 if(
mask
&0x100000Ë
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`¥öt_°©
(
°dout
);

1550 if(
mask
&0x1000000Ë
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`visuÆize
();

1551 if(
mask
&0x10000000Ë
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`¥öt
(
°dout
);

1552 if(
m
 != -1) {

1557 
	`fÊush
(
°dout
);

1558 
	}
}

1560 c⁄° 
shadî_c‹e_c⁄fig
 * 
	ggpgpu_sim
::
	$gëShadîC‹eC⁄fig
()

1562  
m_shadî_c⁄fig
;

1563 
	}
}

1565 c⁄° 
mem‹y_c⁄fig
 * 
	ggpgpu_sim
::
	$gëMem‹yC⁄fig
()

1567  
m_mem‹y_c⁄fig
;

1568 
	}
}

1570 
simt_c‹e_˛u°î
 * 
	ggpgpu_sim
::
	$gëSIMTClu°î
()

1572  *
m_˛u°î
;

1573 
	}
}

1575 
	gmem‹y_∑πôi⁄_unô
::
	$visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 )

1577 
m_døm
->
	`visuÆizî_¥öt
(
visuÆizî_fûe
);

1578 
	}
}

	@src/gpgpu-sim/gpu-sim.h

28 #i‚de‡
GPU_SIM_H


29 
	#GPU_SIM_H


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

32 
	~"addrdec.h
"

33 
	~"shadî.h
"

35 
	~<li°
>

36 
	~<°dio.h
>

39 
	#GPU_RSTAT_SHD_INFO
 0x1

	)

40 
	#GPU_RSTAT_BW_STAT
 0x2

	)

41 
	#GPU_RSTAT_WARP_DIS
 0x4

	)

42 
	#GPU_RSTAT_DWF_MAP
 0x8

	)

43 
	#GPU_RSTAT_L1MISS
 0x10

	)

44 
	#GPU_RSTAT_PDOM
 0x20

	)

45 
	#GPU_RSTAT_SCHED
 0x40

	)

46 
	#GPU_MEMLATSTAT_MC
 0x2

	)

49 
	#TEX_MSHR_MERGE
 0x4

	)

50 
	#CONST_MSHR_MERGE
 0x2

	)

51 
	#GLOBAL_MSHR_MERGE
 0x1

	)

54 
	#MhZ
 *1000000

	)

56 
	#CREATELOG
 111

	)

57 
	#SAMPLELOG
 222

	)

58 
	#DUMPLOG
 333

	)

60 
	edøm_˘æ_t
 {

61 
	mDRAM_FIFO
=0,

62 
	mDRAM_FRFCFS
=1

65 
	smem‹y_c⁄fig
 {

66 
mem‹y_c⁄fig
()

68 
	mm_vÆid
 = 
Ál£
;

69 
	mgpgpu_døm_timög_›t
=
NULL
;

70 
	mgpgpu_L2_queue_c⁄fig
=
NULL
;

72 
öô
()

75 
	mnbkgΩ
 = 1;

76 
	mtCCDL
 = 0;

77 
	mtRTPL
 = 0;

78 
as£π
(
gpgpu_døm_timög_›t
);

79 
ssˇnf
(
gpgpu_døm_timög_›t
,"%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d",

80 &
nbk
,&
tCCD
,&
tRRD
,&
tRCD
,&
tRAS
,&
tRP
,&
tRC
,&
CL
,&
WL
,&
tCDLR
,&
tWR
,&
nbkgΩ
,&
tCCDL
,&
tRTPL
);

81 
	mnbkt
 = 
nbk
/
nbkgΩ
;

82 
	mi
;

83 
	mi
=0; 
	mnbkt
>0; i++) {

84 
	mnbkt
 = 
nbkt
>>1;

86 
	mbk_èg_Àngth
 = 
i
;

87 
as£π
(
nbkgΩ
>0 && "Number of bank groups cannot be zero");

88 
	mtRCDWR
 = 
tRCD
-(
WL
+1);

89 
	mtRTW
 = (
CL
+(
BL
/2)+2-
WL
);

90 
	mtWTR
 = (
WL
+(
BL
/2)+
tCDLR
);

91 
	mtWTP
 = (
WL
+(
BL
/2)+
tWR
);

92 
	mm_addªss_m≠pög
.
öô
(
m_n_mem
);

93 
	mm_L2_c⁄fig
.
öô
();

94 
	mm_vÆid
 = 
åue
;

96 
ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
);

98 
boﬁ
 
	mm_vÆid
;

99 
ˇche_c⁄fig
 
	mm_L2_c⁄fig
;

100 
boﬁ
 
	mm_L2_ãxuª_⁄ly
;

102 *
	mgpgpu_døm_timög_›t
;

103 *
	mgpgpu_L2_queue_c⁄fig
;

104 
boﬁ
 
	ml2_idól
;

105 
	mgpgpu_døm_sched_queue_size
;

106 
døm_˘æ_t
 
	mscheduÀr_ty≥
;

107 
boﬁ
 
	mgpgpu_memœãncy_°©
;

108 
	mm_n_mem
;

109 
	mgpu_n_mem_≥r_˘ær
;

111 
	mr›_œãncy
;

112 
	mdøm_œãncy
;

116 
	mtCCDL
;

117 
	mtRTPL
;

119 
	mtCCD
;

120 
	mtRRD
;

121 
	mtRCD
;

122 
	mtRCDWR
;

123 
	mtRAS
;

124 
	mtRP
;

125 
	mtRC
;

126 
	mtCDLR
;

127 
	mtWR
;

129 
	mCL
;

130 
	mWL
;

131 
	mBL
;

132 
	mtRTW
;

133 
	mtWTR
;

134 
	mtWTP
;

135 
	mbusW
;

137 
	mnbkgΩ
;

138 
	mbk_èg_Àngth
;

140 
	mnbk
;

142 
löór_to_øw_addªss_å™¶©i⁄
 
	mm_addªss_m≠pög
;

146 
gpu_sim_cy˛e
;

147 
gpu_tŸ_sim_cy˛e
;

148 
boﬁ
 
g_öãø˘ive_debuggî_íabÀd
;

150 ˛as†
	cgpgpu_sim_c⁄fig
 : 
public
 
gpgpu_fun˘i⁄Æ_sim_c⁄fig
 {

151 
public
:

152 
	$gpgpu_sim_c⁄fig
(Ë{ 
m_vÆid
 = 
Ál£
; }

153 
	`ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
);

154 
	$öô
()

156 
gpu_°©_ßm∂e_‰eq
 = 10000;

157 
gpu_ru¡ime_°©_Êag
 = 0;

158 
	`ssˇnf
(
gpgpu_ru¡ime_°©
, "%d:%x", &
gpu_°©_ßm∂e_‰eq
, &
gpu_ru¡ime_°©_Êag
);

159 
m_shadî_c⁄fig
.
	`öô
();

160 
	`±x_£t_ãx_ˇche_löesize
(
m_shadî_c⁄fig
.
m_L1T_c⁄fig
.
	`gë_löe_sz
());

161 
m_mem‹y_c⁄fig
.
	`öô
();

162 
	`öô_˛ock_domaös
();

165 
time_t
 
cuº_time
;

166 
	`time
(&
cuº_time
);

167 *
d©e
 = 
	`˘ime
(&
cuº_time
);

168 *
s
 = 
d©e
;

169 *
s
) {

170 i‡(*
s
 == ' ' || *s == '\t' || *s == ':') *s = '-';

171 i‡(*
s
 == '\n' || *s == '\r' ) *s = 0;

172 
s
++;

174 
buf
[1024];

175 
	`¢¥ötf
(
buf
,1024,"gpgpusim_visuÆizî__%s.log.gz",
d©e
);

176 
g_visuÆizî_fûíame
 = 
	`°rdup
(
buf
);

178 
m_vÆid
=
åue
;

179 
	}
}

181 
	$num_shadî
(Ëc⁄° {  
m_shadî_c⁄fig
.
	`num_shadî
(); 
	}
}

182 
	$gë_max_c⁄cuºít_kî√l
(Ëc⁄° {  
max_c⁄cuºít_kî√l
; 
	}
}

184 
	g¥iv©e
:

185 
öô_˛ock_domaös
();

187 
boﬁ
 
	gm_vÆid
;

188 
shadî_c‹e_c⁄fig
 
	gm_shadî_c⁄fig
;

189 
mem‹y_c⁄fig
 
	gm_mem‹y_c⁄fig
;

192 
	gc‹e_‰eq
;

193 
	gi˙t_‰eq
;

194 
	gdøm_‰eq
;

195 
	gl2_‰eq
;

196 
	gc‹e_≥riod
;

197 
	gi˙t_≥riod
;

198 
	gdøm_≥riod
;

199 
	gl2_≥riod
;

202 
	ggpu_max_cy˛e_›t
;

203 
	ggpu_max_ö¢_›t
;

204 
	ggpu_max_˘a_›t
;

205 *
	ggpgpu_ru¡ime_°©
;

206 
boﬁ
 
	ggpgpu_Êush_ˇche
;

207 
boﬁ
 
	ggpu_dódlock_dëe˘
;

208 
	ggpgpu_døm_sched_queue_size
;

209 
	ggpgpu_cÊog_öãrvÆ
;

210 * 
	ggpgpu_˛ock_domaös
;

211 
	gmax_c⁄cuºít_kî√l
;

214 
boﬁ
 
	gg_visuÆizî_íabÀd
;

215 *
	gg_visuÆizî_fûíame
;

216 
	gg_visuÆizî_zÀvñ
;

219 
	ggpu_°©_ßm∂e_‰eq
;

220 
	ggpu_ru¡ime_°©_Êag
;

222 
‰õnd
 
˛ass
 
	ggpgpu_sim
;

225 ˛as†
	cgpgpu_sim
 : 
public
 
gpgpu_t
 {

226 
public
:

227 
gpgpu_sim
–c⁄° 
gpgpu_sim_c⁄fig
 &
c⁄fig
 );

229 
£t_¥›
–
cudaDevi˚Pr›
 *
¥›
 );

231 
œunch
–
kî√l_öfo_t
 *
köfo
 );

232 
boﬁ
 
ˇn_°¨t_kî√l
();

233 
föished_kî√l
();

234 
£t_kî√l_d⁄e
–
kî√l_öfo_t
 *
kî√l
 );

236 
öô
();

237 
cy˛e
();

238 
run_KAIN_Clu°î
(
begö
, 
íd
);

239 
boﬁ
 
a˘ive
();

240 
¥öt_°©s
();

241 
upd©e_°©s
();

242 
dódlock_check
();

244 
gë_pdom_°ack_t›_öfo
–
sid
, 
tid
, *
pc
, *
Ωc
 );

246 
	$sh¨ed_mem_size
() const;

247 
	$num_ªgi°îs_≥r_c‹e
() const;

248 
	$wΩ_size
() const;

249 
	$shadî_˛ock
() const;

250 c⁄° 
cudaDevi˚Pr›
 *
	$gë_¥›
() const;

251 
divîgí˚_suµ‹t_t
 
	$simd_modñ
() const;

253 
	$thªads_≥r_c‹e
() const;

254 
boﬁ
 
	$gë_m‹e_˘a_À·
() const;

255 
kî√l_öfo_t
 *
	`£À˘_kî√l
();

257 c⁄° 
gpgpu_sim_c⁄fig
 &
	$gë_c⁄fig
(Ëc⁄° {  
m_c⁄fig
; }

258 
	$gpu_¥öt_°©
() const;

259 
	$dump_pùñöe
–
mask
, 
s
, 
m
 ) const;

267 c⁄° 
shadî_c‹e_c⁄fig
 * 
	`gëShadîC‹eC⁄fig
();

274 c⁄° 
mem‹y_c⁄fig
 * 
	`gëMem‹yC⁄fig
();

281 
simt_c‹e_˛u°î
 * 
	`gëSIMTClu°î
();

283 
¥iv©e
:

285 
	`ªöô_˛ock_domaös
();

286 
	`√xt_˛ock_domaö
();

287 
	`issue_block2c‹e
();

289 
	$L2c_¥öt_ˇche_°©
() const;

290 
	`shadî_¥öt_ru¡ime_°©
–
FILE
 *
fout
 );

291 
	$shadî_¥öt_l1_miss_°©
–
FILE
 *
fout
 ) const;

292 
	`visuÆizî_¥öt°©
();

293 
	$¥öt_shadî_cy˛e_di°ro
–
FILE
 *
fout
 ) const;

295 
	`gpgpu_debug
();

299 
˛ass
 
simt_c‹e_˛u°î
 **
m_˛u°î
;

300 
˛ass
 
mem‹y_∑πôi⁄_unô
 **
m_mem‹y_∑πôi⁄_unô
;

302 
°d
::
ve˘‹
<
kî√l_öfo_t
*> 
m_ru¬ög_kî√ls
;

303 
m_œ°_issued_kî√l
;

305 
°d
::
li°
<> 
m_föished_kî√l
;

306 
m_tŸÆ_˘a_œunched
;

307 
m_œ°_˛u°î_issue
;

310 
c‹e_time
;

311 
i˙t_time
;

312 
døm_time
;

313 
l2_time
;

316 
boﬁ
 
gpu_dódlock
;

319 c⁄° 
gpgpu_sim_c⁄fig
 &
m_c⁄fig
;

321 c⁄° 
cudaDevi˚Pr›
 *
m_cuda_¥›îtõs
;

322 c⁄° 
shadî_c‹e_c⁄fig
 *
m_shadî_c⁄fig
;

323 c⁄° 
mem‹y_c⁄fig
 *
m_mem‹y_c⁄fig
;

326 
˛ass
 
shadî_c‹e_°©s
 *
m_shadî_°©s
;

327 
˛ass
 
mem‹y_°©s_t
 *
m_mem‹y_°©s
;

328 
gpu_tŸ_issued_˘a
;

329 
œ°_gpu_sim_ö¢
;

331 
public
:

332 
gpu_sim_ö¢
;

333 
gpu_tŸ_sim_ö¢
;

334 
gpu_sim_ö¢_œ°_upd©e
;

335 
gpu_sim_ö¢_œ°_upd©e_sid
;

336 
	}
};

	@src/gpgpu-sim/histogram.cc

28 
	~"hi°ogøm.h
"

30 
	~<as£π.h
>

32 
	gbö√d_hi°ogøm
::
bö√d_hi°ogøm
 (
°d
::
°rög
 
«me
, 
nbös
, * 
bös
)

33 : 
m_«me
(
«me
), 
m_nbös
(
nbös
), 
m_bös
(
NULL
), 
m_bö_˙ts
(
√w
 [m_nbös]), 
m_maximum
(0), 
	$m_sum
(0)

35 i‡(
bös
) {

36 
m_bös
 = 
√w
 [
m_nbös
];

37 
i
 = 0; i < 
nbös
; i++) {

38 
m_bös
[
i
] = 
bös
[i];

42 
	`ª£t_bös
();

43 
	}
}

45 
	gbö√d_hi°ogøm
::
	$bö√d_hi°ogøm
 (c⁄° 
bö√d_hi°ogøm
& 
Ÿhî
)

46 : 
	`m_«me
(
Ÿhî
.
m_«me
), 
	`m_nbös
(Ÿhî.
m_nbös
), 
	`m_bös
(
NULL
),

47 
	`m_bö_˙ts
(
√w
 [
m_nbös
]), 
	`m_maximum
(0), 
	$m_sum
(0)

49 
i
 = 0; i < 
m_nbös
; i++) {

50 
m_bö_˙ts
[
i
] = 
Ÿhî
.m_bin_cnts[i];

52 
	}
}

54 
	gbö√d_hi°ogøm
::
	$ª£t_bös
 () {

55 
i
 = 0; i < 
m_nbös
; i++) {

56 
m_bö_˙ts
[
i
] = 0;

58 
	}
}

60 
	gbö√d_hi°ogøm
::
	$add2bö
 (
ßm∂e
) {

61 
	`as£π
(0);

62 
m_maximum
 = (
ßm∂e
 > m_maximum)? sample : m_maximum;

63 
	}
}

65 
	gbö√d_hi°ogøm
::
	$Âröt
 (
FILE
 *
fout
) const

67 i‡(
m_«me
.
	`c_°r
(Ë!
NULL
Ë
	`Ârötf
(
fout
, "%s = ", m_name.c_str());

68 
tŸÆ_ßm∂e
 = 0;

69 
i
 = 0; i < 
m_nbös
; i++) {

70 
	`Ârötf
(
fout
, "%d ", 
m_bö_˙ts
[
i
]);

71 
tŸÆ_ßm∂e
 +
m_bö_˙ts
[
i
];

73 
	`Ârötf
(
fout
, "max=%d ", 
m_maximum
);

74 
avg
 = 0.0f;

75 i‡(
tŸÆ_ßm∂e
 > 0) {

76 
avg
 = ()
m_sum
 / 
tŸÆ_ßm∂e
;

78 
	`Ârötf
(
fout
, "avg=%0.2‡", 
avg
);

79 
	}
}

81 
	gbö√d_hi°ogøm
::~
	$bö√d_hi°ogøm
 () {

82 i‡(
m_bös
Ë
dñëe
[] m_bins;

83 
dñëe
[] 
m_bö_˙ts
;

84 
	}
}

86 
	gpow2_hi°ogøm
::
pow2_hi°ogøm
 (
°d
::
°rög
 
«me
, 
nbös
, * 
bös
)

87 : 
	$bö√d_hi°ogøm
 (
«me
, 
nbös
, 
bös
Ë{
	}
}

89 
	gpow2_hi°ogøm
::
	$add2bö
 (
ßm∂e
) {

90 
	`as£π
(
ßm∂e
 >= 0);

92 
bö
;

93 
v
 = 
ßm∂e
;

94 
shi·
;

96 
bö
 = (
v
 > 0xFFFF) << 4; v >>= bin;

97 
shi·
 = (
v
 > 0xFF ) << 3; v >>shi·; 
bö
 |= shift;

98 
shi·
 = (
v
 > 0xF ) << 2; v >>shi·; 
bö
 |= shift;

99 
shi·
 = (
v
 > 0x3 ) << 1; v >>shi·; 
bö
 |= shift;

100 
bö
 |(
v
 >> 1);

101 
bö
 +(
ßm∂e
 > 0)? 1:0;

103 
m_bö_˙ts
[
bö
] += 1;

105 
m_maximum
 = (
ßm∂e
 > m_maximum)? sample : m_maximum;

106 
m_sum
 +
ßm∂e
;

107 
	}
}

109 
	glöór_hi°ogøm
::
	$löór_hi°ogøm
 (
°ride
, c⁄° *
«me
, 
nbös
, * 
bös
)

110 : 
	`bö√d_hi°ogøm
 (
«me
, 
nbös
, 
bös
), 
	$m_°ride
(
°ride
)

112 
	}
}

114 
	glöór_hi°ogøm
::
	$add2bö
 (
ßm∂e
) {

115 
	`as£π
(
ßm∂e
 >= 0);

117 
bö
 = 
ßm∂e
 / 
m_°ride
;

118 i‡(
bö
 >
m_nbös
) bin = m_nbins - 1;

120 
m_bö_˙ts
[
bö
] += 1;

122 
m_maximum
 = (
ßm∂e
 > m_maximum)? sample : m_maximum;

123 
m_sum
 +
ßm∂e
;

124 
	}
}

	@src/gpgpu-sim/histogram.h

28 #i‚de‡
HISTOGRAM_H


29 
	#HISTOGRAM_H


	)

31 #ifde‡
__˝lu•lus


33 
	~<°rög
>

35 ˛as†
	cbö√d_hi°ogøm
 {

36 
	mpublic
:

38 
bö√d_hi°ogøm
 (
°d
::
°rög
 
«me
 = "", 
nbös
 = 32, * 
bös
 = 
NULL
);

39 
bö√d_hi°ogøm
 (c⁄° bö√d_hi°ogøm& 
Ÿhî
);

40 
	mvútuÆ
 ~
bö√d_hi°ogøm
 ();

43 
ª£t_bös
 ();

44 
add2bö
 (
ßm∂e
);

47 
	$Âröt
 (
FILE
 *
fout
) const;

49 
¥Ÿe˘ed
:

50 
°d
::
°rög
 
m_«me
;

51 
m_nbös
;

52 *
m_bös
;

53 *
m_bö_˙ts
;

54 
m_maximum
;

55 sig√d 
m_sum
;

58 ˛as†
	cpow2_hi°ogøm
 : 
public
 
bö√d_hi°ogøm
 {

59 
public
:

60 
	`pow2_hi°ogøm
 ( 
°d
::
°rög
 
«me
 = "", 
nbös
 = 32, * 
bös
 = 
NULL
);

61 ~
	$pow2_hi°ogøm
() {}

63 
	`add2bö
 (
ßm∂e
);

64 
	}
};

66 ˛as†
	clöór_hi°ogøm
 : 
public
 
bö√d_hi°ogøm
 {

67 
public
:

68 
löór_hi°ogøm
 (
°ride
 = 1, c⁄° *
«me
 = 
NULL
, 
nbös
 = 32, * 
bös
 = NULL);

69 ~
	$löór_hi°ogøm
() {}

71 
	`add2bö
 (
ßm∂e
);

72 
¥iv©e
:

73 
m_°ride
;

74 
	}
};

	@src/gpgpu-sim/icnt_wrapper.cc

28 
	~"i˙t_wøµî.h
"

29 
	~<as£π.h
>

30 
	~"../öãrsim/öãrc⁄√˘_öãrÁ˚.h
"

32 
i˙t_has_buf„r_p
 
	gi˙t_has_buf„r
;

33 
i˙t_push_p
 
	gi˙t_push
;

34 
i˙t_p›_p
 
	gi˙t_p›
;

35 
i˙t_å™s„r_p
 
	gi˙t_å™s„r
;

36 
i˙t_busy_p
 
	gi˙t_busy
;

38 
	gg_√tw‹k_mode
;

39 * 
	gg_√tw‹k_c⁄fig_fûíame
;

41 
	~"../›ti⁄_∑r£r.h
"

43 
	$i˙t_ªg_›ti⁄s
–
˛ass
 
O±i⁄P¨£r
 * 
›p
 )

45 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-√tw‹k_mode", 
OPT_INT32
, &
g_√tw‹k_mode
, "InterconnectionÇetwork mode", "1");

46 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-öãr_c⁄fig_fûe", 
OPT_CSTR
, &
g_√tw‹k_c⁄fig_fûíame
, "InterconnectionÇetwork config file", "mesh");

47 
	}
}

49 
	$i˙t_öô
–
n_shadî
, 
n_mem
 )

51 
g_√tw‹k_mode
) {

52 
INTERSIM
:

53 
	`öô_öãrc⁄√˘
(
g_√tw‹k_c⁄fig_fûíame
, 
n_shadî
, 
n_mem
 );

54 
i˙t_has_buf„r
 = 
öãrc⁄√˘_has_buf„r
;

55 
i˙t_push
 = 
öãrc⁄√˘_push
;

56 
i˙t_p›
 = 
öãrc⁄√˘_p›
;

57 
i˙t_å™s„r
 = 
adv™˚_öãrc⁄√˘
;

58 
i˙t_busy
 = 
öãrc⁄√˘_busy
;

62 
	`as£π
(0);

65 
	}
}

	@src/gpgpu-sim/icnt_wrapper.h

28 #i‚de‡
ICNT_WRAPPER_H


29 
	#ICNT_WRAPPER_H


	)

31 
	~<°dio.h
>

34 
	$boﬁ
 (*
	ti˙t_has_buf„r_p
)(
	töput
, 
	tsize
);

35 (*
	ti˙t_push_p
)(
	töput
, 
	touçut
, * 
	td©a
, 
	tsize
);

36 * (*
	ti˙t_p›_p
)(
	touçut
);

37 (*
	ti˙t_å™s„r_p
)( );

38 (*
	ti˙t_busy_p
)( );

39 (*
	ti˙t_døö_p
)( );

41 
i˙t_has_buf„r_p
 
i˙t_has_buf„r
;

42 
i˙t_push_p
 
i˙t_push
;

43 
i˙t_p›_p
 
i˙t_p›
;

44 
i˙t_å™s„r_p
 
i˙t_å™s„r
;

45 
i˙t_busy_p
 
i˙t_busy
;

46 
i˙t_døö_p
 
i˙t_døö
;

47 
g_√tw‹k_mode
;

49 
	e√tw‹k_mode
 {

50 
INTERSIM
 = 1,

51 
N_NETWORK_MODE


54 
	`i˙t_öô
–
n_shadî
, 
n_mem
 );

55 
	`i˙t_ªg_›ti⁄s
–
˛ass
 
O±i⁄P¨£r
 * 
›p
 );

56 
	`di•œy_i˙t_°©e
–
FILE
 *
Â
 );

	@src/gpgpu-sim/l2cache.cc

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

32 
	~<li°
>

33 
	~<£t
>

35 
	~"../›ti⁄_∑r£r.h
"

36 
	~"mem_„tch.h
"

37 
	~"døm.h
"

38 
	~"gpu-ˇche.h
"

39 
	~"hi°ogøm.h
"

40 
	~"l2ˇche.h
"

41 
	~"../öãrsim/°©wø≥r.h
"

42 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

43 
	~"gpu-sim.h
"

44 
	~"shadî.h
"

45 
	~"mem_œãncy_°©.h
"

48 
mem_„tch
 * 
	g∑πôi⁄_mf_Æloˇt‹
::
	$Æloc
(
√w_addr_ty≥
 
addr
, 
mem_ac˚ss_ty≥
 
ty≥
, 
size
, 
boﬁ
 
wr
 ) const

50 
	`as£π
–
wr
 );

51 
mem_ac˚ss_t
 
	`ac˚ss
–
ty≥
, 
addr
, 
size
, 
wr
 );

52 
mem_„tch
 *
mf
 = 
√w
 
	`mem_„tch
–
ac˚ss
,

53 
NULL
,

54 
WRITE_PACKET_SIZE
,

58 
m_mem‹y_c⁄fig
 );

59  
mf
;

60 
	}
}

62 
	gmem‹y_∑πôi⁄_unô
::
	$mem‹y_∑πôi⁄_unô
–
∑πôi⁄_id
,

63 c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
,

64 
˛ass
 
mem‹y_°©s_t
 *
°©s
 )

66 
m_id
 = 
∑πôi⁄_id
;

67 
m_c⁄fig
=
c⁄fig
;

68 
m_°©s
=
°©s
;

69 
m_døm
 = 
√w
 
	`døm_t
(
m_id
,
m_c⁄fig
,
m_°©s
,
this
);

71 
L2c_«me
[32];

72 
	`¢¥ötf
(
L2c_«me
, 32, "L2_b™k_%03d", 
m_id
);

73 
m_L2öãrÁ˚
 = 
√w
 
	`L2öãrÁ˚
(
this
);

74 
m_mf_Æloˇt‹
 = 
√w
 
	`∑πôi⁄_mf_Æloˇt‹
(
c⁄fig
);

76 if(!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
())

77 
m_L2ˇche
 = 
√w
 
	`d©a_ˇche
(
L2c_«me
,
m_c⁄fig
->
m_L2_c⁄fig
,-1,-1,
m_L2öãrÁ˚
,
m_mf_Æloˇt‹
,
IN_PARTITION_L2_MISS_QUEUE
);

79 
i˙t_L2
;

80 
L2_døm
;

81 
døm_L2
;

82 
L2_i˙t
;

84 
	`ssˇnf
(
m_c⁄fig
->
gpgpu_L2_queue_c⁄fig
,"%u:%u:%u:%u", &
i˙t_L2
,&
L2_døm
,&
døm_L2
,&
L2_i˙t
 );

85 
m_i˙t_L2_queue
 = 
√w
 
fifo_pùñöe
<
mem_„tch
>("i˙t-to-L2",0,
i˙t_L2
);

86 
m_L2_døm_queue
 = 
√w
 
fifo_pùñöe
<
mem_„tch
>("L2-to-døm",0,
L2_døm
);

87 
m_døm_L2_queue
 = 
√w
 
fifo_pùñöe
<
mem_„tch
>("døm-to-L2",0,
døm_L2
);

88 
m_L2_i˙t_queue
 = 
√w
 
fifo_pùñöe
<
mem_„tch
>("L2-to-i˙t",0,
L2_i˙t
);

89 
wb_addr
=-1;

90 
	}
}

92 
	gmem‹y_∑πôi⁄_unô
::~
	$mem‹y_∑πôi⁄_unô
()

94 
dñëe
 
m_i˙t_L2_queue
;

95 
dñëe
 
m_L2_døm_queue
;

96 
dñëe
 
m_døm_L2_queue
;

97 
dñëe
 
m_L2_i˙t_queue
;

98 
dñëe
 
m_L2ˇche
;

99 
dñëe
 
m_L2öãrÁ˚
;

100 
	}
}

102 
	gmem‹y_∑πôi⁄_unô
::
	$ˇche_cy˛e
–
cy˛e
 )

105 if–!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
()) {

106 i‡–
m_L2ˇche
->
	`ac˚ss_ªady
(Ë&& !
m_L2_i˙t_queue
->
	`fuŒ
() ) {

107 
mem_„tch
 *
mf
 = 
m_L2ˇche
->
	`√xt_ac˚ss
();

108 
mf
->
	`£t_ª∂y
();

109 
mf
->
	`£t_°©us
(
IN_PARTITION_L2_TO_ICNT_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

110 
m_L2_i˙t_queue
->
	`push
(
mf
);

115 i‡–!
m_døm_L2_queue
->
	`em±y
() ) {

116 
mem_„tch
 *
mf
 = 
m_døm_L2_queue
->
	`t›
();

117 i‡–!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
(Ë&& 
m_L2ˇche
->
	`waôög_f‹_fûl
(
mf
) ) {

118 
mf
->
	`£t_°©us
(
IN_PARTITION_L2_FILL_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

119 
m_L2ˇche
->
	`fûl
(
mf
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

120 
m_døm_L2_queue
->
	`p›
();

121 } i‡–!
m_L2_i˙t_queue
->
	`fuŒ
() ) {

122 
mf
->
	`£t_°©us
(
IN_PARTITION_L2_TO_ICNT_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

123 
m_L2_i˙t_queue
->
	`push
(
mf
);

124 
m_døm_L2_queue
->
	`p›
();

129 if–!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
() )

130 
m_L2ˇche
->
	`cy˛e
();

133 i‡–!
m_L2_døm_queue
->
	`fuŒ
(Ë&& !
m_i˙t_L2_queue
->
	`em±y
() ) {

134 
mem_„tch
 *
mf
 = 
m_i˙t_L2_queue
->
	`t›
();

135 i‡–!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
() &&

136 –(
m_c⁄fig
->
m_L2_ãxuª_⁄ly
 && 
mf
->
	`i°extuª
()) || (!m_config->m_L2_texure_only) )

139 i‡–!
m_L2_i˙t_queue
->
	`fuŒ
() ) {

140 
°d
::
li°
<
ˇche_evít
> 
evíts
;

141 
ˇche_ªque°_°©us
 
°©us
 = 
m_L2ˇche
->
	`ac˚ss
(
mf
->
	`gë_∑πôi⁄_addr
(),mf,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
,
evíts
);

142 
boﬁ
 
wrôe_£¡
 = 
	`was_wrôe_£¡
(
evíts
);

143 
boﬁ
 
ªad_£¡
 = 
	`was_ªad_£¡
(
evíts
);

145 i‡–
°©us
 =
HIT
 ) {

146 if–!
wrôe_£¡
 ) {

148 
	`as£π
(!
ªad_£¡
);

149 if–
mf
->
	`gë_ac˚ss_ty≥
(Ë=
L1_WRBK_ACC
 ) {

150 
m_ªque°_åackî
.
	`îa£
(
mf
);

151 
dñëe
 
mf
;

153 
mf
->
	`£t_ª∂y
();

154 
mf
->
	`£t_°©us
(
IN_PARTITION_L2_TO_ICNT_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

155 
m_L2_i˙t_queue
->
	`push
(
mf
);

157 
m_i˙t_L2_queue
->
	`p›
();

159 
	`as£π
(
wrôe_£¡
);

160 
m_i˙t_L2_queue
->
	`p›
();

162 } i‡–
°©us
 !
RESERVATION_FAIL
 ) {

164 
m_i˙t_L2_queue
->
	`p›
();

166 
	`as£π
(!
wrôe_£¡
);

167 
	`as£π
(!
ªad_£¡
);

173 
mf
->
	`£t_°©us
(
IN_PARTITION_L2_TO_DRAM_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

174 
m_L2_døm_queue
->
	`push
(
mf
);

175 
m_i˙t_L2_queue
->
	`p›
();

180 if–!
m_r›
.
	`em±y
(Ë&& (
cy˛e
 >m_r›.
	`‰⁄t
().
ªady_cy˛e
Ë&& !
m_i˙t_L2_queue
->
	`fuŒ
() ) {

181 
mem_„tch
* 
mf
 = 
m_r›
.
	`‰⁄t
().
ªq
;

182 
m_r›
.
	`p›
();

183 
m_i˙t_L2_queue
->
	`push
(
mf
);

184 
mf
->
	`£t_°©us
(
IN_PARTITION_ICNT_TO_L2_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

186 
	}
}

188 
boﬁ
 
	gmem‹y_∑πôi⁄_unô
::
	$fuŒ
() const

190  
m_i˙t_L2_queue
->
	`fuŒ
();

191 
	}
}

193 
	gmem‹y_∑πôi⁄_unô
::
	$¥öt_ˇche_°©
(&
ac˚s£s
, &
mis£s
) const

195 
FILE
 *
Â
 = 
°dout
;

196 if–!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
() )

197 
m_L2ˇche
->
	`¥öt
(
Â
,
ac˚s£s
,
mis£s
);

198 
	}
}

200 
	gmem‹y_∑πôi⁄_unô
::
	$¥öt
–
FILE
 *
Â
 ) const

202 i‡–!
m_ªque°_åackî
.
	`em±y
() ) {

203 
	`Ârötf
(
Â
,"Mem‹y P¨ôi⁄ %u:Öídög mem‹yÑeque°s:\n", 
m_id
);

204  
°d
::
£t
<
mem_„tch
*>::
c⁄°_ôî©‹
 
r
=
m_ªque°_åackî
.
	`begö
();Ñ !m_ªque°_åackî.
	`íd
(); ++r ) {

205 
mem_„tch
 *
mf
 = *
r
;

206 i‡–
mf
 )

207 
mf
->
	`¥öt
(
Â
);

209 
	`Ârötf
(
Â
," <NULL mem_fetch?>\n");

212 if–!
m_c⁄fig
->
m_L2_c⁄fig
.
	`dißbÀd
() )

213 
m_L2ˇche
->
	`di•œy_°©e
(
Â
);

214 
m_døm
->
	`¥öt
(
Â
);

215 
	}
}

217 
	gmem‹y_°©s_t
::
	$¥öt
–
FILE
 *
Â
 )

219 
	`Ârötf
(
Â
,"L2_wrôe_mis†%d\n", 
L2_wrôe_miss
);

220 
	`Ârötf
(
Â
,"L2_wrôe_hô = %d\n", 
L2_wrôe_hô
);

221 
	`Ârötf
(
Â
,"L2_ªad_mis†%d\n", 
L2_ªad_miss
);

222 
	`Ârötf
(
Â
,"L2_ªad_hô = %d\n", 
L2_ªad_hô
);

223 
	}
}

225 
	gmem‹y_°©s_t
::
	$visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 )

227 
	`gz¥ötf
(
visuÆizî_fûe
, "Ltwowrôemiss: %d\n", 
L2_wrôe_miss
);

228 
	`gz¥ötf
(
visuÆizî_fûe
, "Ltwowrôehô: %d\n", 
L2_wrôe_hô
);

229 
	`gz¥ötf
(
visuÆizî_fûe
, "Ltw‹ódmiss: %d\n", 
L2_ªad_miss
);

230 
	`gz¥ötf
(
visuÆizî_fûe
, "Ltw‹ódhô: %d\n", 
L2_ªad_hô
);

231 i‡(
num_mfs
)

232 
	`gz¥ötf
(
visuÆizî_fûe
, "avîagemÊ©ícy: %Œd\n", 
mf_tŸÆ_œt
/
num_mfs
);

233 
	}
}

235 
	ggpgpu_sim
::
	$L2c_¥öt_ˇche_°©
() const

237 
i
, 
j
, 
k
;

238 
i
=0,
j
=0,
k
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

239 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`¥öt_ˇche_°©
(
k
,
j
);

240 
	`¥ötf
("L2 CachêTŸÆ Mis†R©ê%0.3f\n", ()
j
/
k
);

241 
	}
}

243 
	gmem‹y_∑πôi⁄_unô
::
	$ÊushL2
()

245 
m_L2ˇche
->
	`Êush
();

247 
	}
}

249 
boﬁ
 
	gmem‹y_∑πôi⁄_unô
::
	$busy
() const

251  !
m_ªque°_åackî
.
	`em±y
();

252 
	}
}

254 
	gmem‹y_∑πôi⁄_unô
::
	$push
–
mem_„tch
* 
ªq
, 
cy˛e
 )

256 i‡(
ªq
) {

257 
m_ªque°_åackî
.
	`ö£π
(
ªq
);

258 
m_°©s
->
	`memœt°©_i˙t2mem_p›
(
ªq
);

259 if–
ªq
->
	`i°extuª
() ) {

260 
m_i˙t_L2_queue
->
	`push
(
ªq
);

261 
ªq
->
	`£t_°©us
(
IN_PARTITION_ICNT_TO_L2_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

263 
r›_dñay_t
 
r
;

264 
r
.
ªq
 =Ñeq;

265 
r
.
ªady_cy˛e
 = 
cy˛e
 + 
m_c⁄fig
->
r›_œãncy
;

266 
m_r›
.
	`push
(
r
);

267 
ªq
->
	`£t_°©us
(
IN_PARTITION_ROP_DELAY
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

270 
	}
}

272 
mem_„tch
* 
	gmem‹y_∑πôi⁄_unô
::
	$p›
()

274 
mem_„tch
* 
mf
 = 
m_L2_i˙t_queue
->
	`p›
();

275 
m_ªque°_åackî
.
	`îa£
(
mf
);

276 i‡–
mf
 && mf->
	`ißtomic
() )

277 
mf
->
	`do_©omic
();

278 if–
mf
 && (mf->
	`gë_ac˚ss_ty≥
(Ë=
L2_WRBK_ACC
 || mf->gë_ac˚ss_ty≥(Ë=
L1_WRBK_ACC
) ) {

279 
dñëe
 
mf
;

280 
mf
 = 
NULL
;

282  
mf
;

283 
	}
}

285 
mem_„tch
* 
	gmem‹y_∑πôi⁄_unô
::
	$t›
()

287 
mem_„tch
 *
mf
 = 
m_L2_i˙t_queue
->
	`t›
();

288 if–
mf
 && (mf->
	`gë_ac˚ss_ty≥
(Ë=
L2_WRBK_ACC
 || mf->gë_ac˚ss_ty≥(Ë=
L1_WRBK_ACC
) ) {

289 
m_L2_i˙t_queue
->
	`p›
();

290 
m_ªque°_åackî
.
	`îa£
(
mf
);

291 
dñëe
 
mf
;

292 
mf
 = 
NULL
;

294  
mf
;

295 
	}
}

297 
	gmem‹y_∑πôi⁄_unô
::
	$£t_d⁄e
–
mem_„tch
 *
mf
 )

299 
m_ªque°_åackî
.
	`îa£
(
mf
);

300 
	}
}

302 
	gmem‹y_∑πôi⁄_unô
::
	$døm_cy˛e
()

305 i‡–!
m_døm_L2_queue
->
	`fuŒ
() ) {

306 
mem_„tch
* 
mf
 = 
m_døm
->
	`p›
();

307 i‡(
mf
) {

308 if–
mf
->
	`gë_ac˚ss_ty≥
(Ë=
L1_WRBK_ACC
 ) {

309 
m_ªque°_åackî
.
	`îa£
(
mf
);

310 
dñëe
 
mf
;

312 
m_døm_L2_queue
->
	`push
(
mf
);

313 
mf
->
	`£t_°©us
(
IN_PARTITION_DRAM_TO_L2_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

317 
m_døm
->
	`cy˛e
();

318 
m_døm
->
	`døm_log
(
SAMPLELOG
);

320 if–!
m_døm
->
	`fuŒ
(Ë&& !
m_L2_døm_queue
->
	`em±y
() ) {

322 
mem_„tch
 *
mf
 = 
m_L2_døm_queue
->
	`p›
();

323 
døm_dñay_t
 
d
;

324 
d
.
ªq
 = 
mf
;

325 
d
.
ªady_cy˛e
 = 
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
 + 
m_c⁄fig
->
døm_œãncy
;

326 
m_døm_œãncy_queue
.
	`push
(
d
);

327 
mf
->
	`£t_°©us
(
IN_PARTITION_DRAM_LATENCY_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

331 if–!
m_døm_œãncy_queue
.
	`em±y
(Ë&& ( (
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
Ë>m_døm_œãncy_queue.
	`‰⁄t
().
ªady_cy˛e
 ) && !
m_døm
->
	`fuŒ
() ) {

332 
mem_„tch
* 
mf
 = 
m_døm_œãncy_queue
.
	`‰⁄t
().
ªq
;

333 
m_døm_œãncy_queue
.
	`p›
();

334 
m_døm
->
	`push
(
mf
);

336 
	}
}

	@src/gpgpu-sim/l2cache.h

28 #i‚de‡
MC_PARTITION_INCLUDED


29 
	#MC_PARTITION_INCLUDED


	)

31 
	~"døm.h
"

32 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

34 
	~<li°
>

35 
	~<queue
>

37 
˛ass
 
	gmem_„tch
;

39 ˛as†
	c∑πôi⁄_mf_Æloˇt‹
 : 
public
 
mem_„tch_Æloˇt‹
 {

40 
public
:

41 
	$∑πôi⁄_mf_Æloˇt‹
–c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
 )

43 
m_mem‹y_c⁄fig
 = 
c⁄fig
;

45 
vútuÆ
 
mem_„tch
 * 
	$Æloc
(c⁄° 
˛ass
 
w¨p_ö°_t
 &
ö°
, c⁄° 
mem_ac˚ss_t
 &
ac˚ss
) const

47 
	`ab‹t
();

48  
NULL
;

49 
	}
}

50 
vútuÆ
 
mem_„tch
 * 
	$Æloc
(
√w_addr_ty≥
 
addr
, 
mem_ac˚ss_ty≥
 
ty≥
, 
size
, 
boﬁ
 
wr
) const;

51 
¥iv©e
:

52 c⁄° 
mem‹y_c⁄fig
 *
m_mem‹y_c⁄fig
;

53 
	}
};

55 ˛as†
	cmem‹y_∑πôi⁄_unô


57 
	mpublic
:

58 
mem‹y_∑πôi⁄_unô
–
∑πôi⁄_id
, c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
, 
˛ass
 
mem‹y_°©s_t
 *
°©s
 );

59 ~
mem‹y_∑πôi⁄_unô
();

61 
boﬁ
 
	$busy
() const;

63 
	`ˇche_cy˛e
–
cy˛e
 );

64 
	`døm_cy˛e
();

66 
boﬁ
 
	$fuŒ
() const;

67 
	`push
–
˛ass
 
mem_„tch
* 
mf
, 
˛ock_cy˛e
 );

68 
˛ass
 
mem_„tch
* 
	`p›
();

69 
˛ass
 
mem_„tch
* 
	`t›
();

70 
	`£t_d⁄e
–
mem_„tch
 *
mf
 );

72 
	`ÊushL2
();

74 
	`visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 );

75 
	$¥öt_ˇche_°©
(&
ac˚s£s
, &
mis£s
) const;

76 
	$¥öt_°©
–
FILE
 *
Â
 ) { 
m_døm
->
	`¥öt_°©
(fp); }

77 
	$visuÆize
(Ëc⁄° { 
m_døm
->
	`visuÆize
(); 
	}
}

78 
	$¥öt
–
FILE
 *
Â
 ) const;

80 
¥iv©e
:

82 
m_id
;

83 c⁄° 
mem‹y_c⁄fig
 *
m_c⁄fig
;

84 
˛ass
 
døm_t
 *
m_døm
;

85 
˛ass
 
d©a_ˇche
 *
m_L2ˇche
;

86 
˛ass
 
L2öãrÁ˚
 *
m_L2öãrÁ˚
;

87 
∑πôi⁄_mf_Æloˇt‹
 *
m_mf_Æloˇt‹
;

90 
	sr›_dñay_t


92 
ªady_cy˛e
;

93 
˛ass
 
mem_„tch
* 
ªq
;

94 
	}
};

95 
	g°d
::
queue
<
r›_dñay_t
> 
m_r›
;

98 
	sdøm_dñay_t


100 
	gªady_cy˛e
;

101 
˛ass
 
mem_„tch
* 
	gªq
;

103 
	g°d
::
queue
<
døm_dñay_t
> 
m_døm_œãncy_queue
;

106 
	gfifo_pùñöe
<
	gmem_„tch
> *
	gm_i˙t_L2_queue
;

107 
	gfifo_pùñöe
<
	gmem_„tch
> *
	gm_L2_døm_queue
;

108 
	gfifo_pùñöe
<
	gmem_„tch
> *
	gm_døm_L2_queue
;

109 
	gfifo_pùñöe
<
	gmem_„tch
> *
	gm_L2_i˙t_queue
;

111 
˛ass
 
mem_„tch
 *
	gL2dømout
;

112 
	gwb_addr
;

114 
˛ass
 
mem‹y_°©s_t
 *
	gm_°©s
;

116 
	g°d
::
£t
<
mem_„tch
*> 
m_ªque°_åackî
;

118 
‰õnd
 
˛ass
 
	gL2öãrÁ˚
;

121 ˛as†
	cL2öãrÁ˚
 : 
public
 
mem_„tch_öãrÁ˚
 {

122 
public
:

123 
	$L2öãrÁ˚
–
mem‹y_∑πôi⁄_unô
 *
unô
 ) { 
m_unô
=unit; }

124 
vútuÆ
 
boﬁ
 
	$fuŒ
–
size
, 
boﬁ
 
wrôe
) const

127  
m_unô
->
m_L2_døm_queue
->
	`fuŒ
();

128 
	}
}

129 
vútuÆ
 
	$push
(
mem_„tch
 *
mf
)

131 
mf
->
	`£t_°©us
(
IN_PARTITION_L2_TO_DRAM_QUEUE
,0 );

132 
m_unô
->
m_L2_døm_queue
->
	`push
(
mf
);

133 
	}
}

134 
	g¥iv©e
:

135 
mem‹y_∑πôi⁄_unô
 *
m_unô
;

	@src/gpgpu-sim/mem_fetch.cc

28 
	~"mem_„tch.h
"

29 
	~"mem_œãncy_°©.h
"

30 
	~"shadî.h
"

31 
	~"visuÆizî.h
"

32 
	~"gpu-sim.h
"

34 
	gmem_„tch
::
sm_√xt_mf_ªque°_uid
=1;

36 
	gmem_„tch
::
	$mem_„tch
–c⁄° 
mem_ac˚ss_t
 &
ac˚ss
,

37 c⁄° 
w¨p_ö°_t
 *
ö°
,

38 
˘æ_size
,

39 
wid
,

40 
sid
,

41 
çc
,

42 c⁄° 
˛ass
 
mem‹y_c⁄fig
 *
c⁄fig
 )

44 
m_ªque°_uid
 = 
sm_√xt_mf_ªque°_uid
++;

45 
m_ac˚ss
 = 
ac˚ss
;

46 if–
ö°
 ) {

47 
m_ö°
 = *
ö°
;

48 
	`as£π
–
wid
 =
m_ö°
.
	`w¨p_id
() );

50 
m_d©a_size
 = 
ac˚ss
.
	`gë_size
();

51 
m_˘æ_size
 = 
˘æ_size
;

52 
m_sid
 = 
sid
;

53 
m_çc
 = 
çc
;

54 
m_wid
 = 
wid
;

55 
c⁄fig
->
m_addªss_m≠pög
.
	`addrdec_éx
(
ac˚ss
.
	`gë_addr
(),&
m_øw_addr
);

56 
m_∑πôi⁄_addr
 = 
c⁄fig
->
m_addªss_m≠pög
.
	`∑πôi⁄_addªss
(
ac˚ss
.
	`gë_addr
());

57 
m_ty≥
 = 
m_ac˚ss
.
	`is_wrôe
()?
WRITE_REQUEST
:
READ_REQUEST
;

58 
m_time°amp
 = 
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
;

59 
m_time°amp2
 = 0;

60 
m_°©us
 = 
MEM_FETCH_INITIALIZED
;

61 
m_°©us_ch™ge
 = 
gpu_sim_cy˛e
 + 
gpu_tŸ_sim_cy˛e
;

62 
	}
}

64 
	gmem_„tch
::~
	$mem_„tch
()

66 
m_°©us
 = 
MEM_FETCH_DELETED
;

67 
	}
}

69 
	#MF_TUP_BEGIN
(
X
Ëc⁄° * 
Sètus_°r
[] = {

	)

70 
	#MF_TUP
(
X
Ë#X

	)

71 
	#MF_TUP_END
(
X
Ë};

	)

72 
	~"mem_„tch_°©us.tup
"

73 #unde‡
MF_TUP_BEGIN


74 #unde‡
MF_TUP


75 #unde‡
MF_TUP_END


77 
	gmem_„tch
::
	$¥öt
–
FILE
 *
Â
, 
boﬁ
 
¥öt_ö°
 ) const

79 if–
this
 =
NULL
 ) {

80 
	`Ârötf
(
Â
," <NULL mem_fetchÖointer>\n");

83 
	`Ârötf
(
Â
," mf: uid=%6u, sid%02u:w%02u,Ö¨t=%u, ", 
m_ªque°_uid
, 
m_sid
, 
m_wid
, 
m_øw_addr
.
chù
 );

84 
m_ac˚ss
.
	`¥öt
(
Â
);

85 if–()
m_°©us
 < 
NUM_MEM_REQ_STAT
 )

86 
	`Ârötf
(
Â
," sètu†%†(%Œu), ", 
Sètus_°r
[
m_°©us
], 
m_°©us_ch™ge
 );

88 
	`Ârötf
(
Â
," sètu†%u??? (%Œu), ", 
m_°©us
, 
m_°©us_ch™ge
 );

89 if–!
m_ö°
.
	`em±y
(Ë&& 
¥öt_ö°
 ) m_ö°.
	`¥öt
(
Â
);

90 
	`Ârötf
(
Â
,"\n");

91 
	}
}

93 
	gmem_„tch
::
	$£t_°©us
–
mem_„tch_°©us
 
°©us
, 
cy˛e
 )

95 
m_°©us
 = 
°©us
;

96 
m_°©us_ch™ge
 = 
cy˛e
;

97 
	}
}

99 
boﬁ
 
	gmem_„tch
::
	$ißtomic
() const

101 if–
m_ö°
.
	`em±y
(ËË 
Ál£
;

102  
m_ö°
.
	`ißtomic
();

103 
	}
}

105 
	gmem_„tch
::
	$do_©omic
()

107 
m_ö°
.
	`do_©omic
–
m_ac˚ss
.
	`gë_w¨p_mask
() );

108 
	}
}

110 
boﬁ
 
	gmem_„tch
::
	$i°extuª
() const

112 if–
m_ö°
.
	`em±y
(ËË 
Ál£
;

113  
m_ö°
.
•a˚
.
	`gë_ty≥
(Ë=
ãx_•a˚
;

114 
	}
}

116 
boﬁ
 
	gmem_„tch
::
	$isc⁄°
() const

118 if–
m_ö°
.
	`em±y
(ËË 
Ál£
;

119  (
m_ö°
.
•a˚
.
	`gë_ty≥
(Ë=
c⁄°_•a˚
Ë|| (m_ö°.•a˚.gë_ty≥(Ë=
∑øm_•a˚_kî√l
);

120 
	}
}

	@src/gpgpu-sim/mem_fetch.h

28 #i‚de‡
MEM_FETCH_H


29 
	#MEM_FETCH_H


	)

31 
	~"addrdec.h
"

32 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

33 
	~<bô£t
>

35 
	emf_ty≥
 {

36 
	mREAD_REQUEST
 = 0,

37 
	mWRITE_REQUEST
,

38 
	mREAD_REPLY
,

39 
	mWRITE_ACK


42 
	#MF_TUP_BEGIN
(
X
Ë
	eX
 {

	)

43 
	#MF_TUP
(
X
Ë
	)
X

44 
	#MF_TUP_END
(
X
Ë};

	)

45 
	~"mem_„tch_°©us.tup
"

46 #unde‡
MF_TUP_BEGIN


47 #unde‡
MF_TUP


48 #unde‡
MF_TUP_END


50 ˛as†
	cmem_„tch
 {

51 
	mpublic
:

52 
mem_„tch
–c⁄° 
mem_ac˚ss_t
 &
ac˚ss
,

53 c⁄° 
w¨p_ö°_t
 *
ö°
,

54 
˘æ_size
,

55 
wid
,

56 
sid
,

57 
çc
,

58 c⁄° 
˛ass
 
mem‹y_c⁄fig
 *
c⁄fig
 );

59 ~
mem_„tch
();

61 
£t_°©us
–
mem_„tch_°©us
 
°©us
, 
cy˛e
 );

62 
	$£t_ª∂y
()

64 
	`as£π
–
m_ac˚ss
.
	`gë_ty≥
(Ë!
L1_WRBK_ACC
 && m_ac˚ss.gë_ty≥(Ë!
L2_WRBK_ACC
 );

65 if–
m_ty≥
==
READ_REQUEST
 ) {

66 
	`as£π
–!
	`gë_is_wrôe
() );

67 
m_ty≥
 = 
READ_REPLY
;

68 } if–
m_ty≥
 =
WRITE_REQUEST
 ) {

69 
	`as£π
–
	`gë_is_wrôe
() );

70 
m_ty≥
 = 
WRITE_ACK
;

73 
	`do_©omic
();

75 
	$¥öt
–
FILE
 *
Â
, 
boﬁ
 
¥öt_ö°
 = 
åue
 ) const;

77 c⁄° 
addrdec_t
 &
	$gë_éx_addr
(Ëc⁄° {  
m_øw_addr
; 
	}
}

78 
	$gë_d©a_size
(Ëc⁄° {  
m_d©a_size
; 
	}
}

79 
	$£t_d©a_size
–
size
 ) { 
m_d©a_size
=size; 
	}
}

80 
	$gë_˘æ_size
(Ëc⁄° {  
m_˘æ_size
; 
	}
}

81 
	$size
(Ëc⁄° {  
m_d©a_size
+
m_˘æ_size
; 
	}
}

82 
√w_addr_ty≥
 
	$gë_addr
(Ëc⁄° {  
m_ac˚ss
.
	`gë_addr
(); 
	}
}

83 
√w_addr_ty≥
 
	$gë_∑πôi⁄_addr
(Ëc⁄° {  
m_∑πôi⁄_addr
; 
	}
}

84 
boﬁ
 
	$gë_is_wrôe
(Ëc⁄° {  
m_ac˚ss
.
	`is_wrôe
(); 
	}
}

85 
	$gë_ªque°_uid
(Ëc⁄° {  
m_ªque°_uid
; 
	}
}

86 
	$gë_sid
(Ëc⁄° {  
m_sid
; 
	}
}

87 
	$gë_çc
(Ëc⁄° {  
m_çc
; 
	}
}

88 
	$gë_wid
(Ëc⁄° {  
m_wid
; 
	}
}

89 
boﬁ
 
	$i°extuª
() const;

90 
boﬁ
 
	$isc⁄°
() const;

91 
mf_ty≥
 
	$gë_ty≥
(Ëc⁄° {  
m_ty≥
; 
	}
}

92 
boﬁ
 
	$ißtomic
() const;

94 
	$£t_ªtu∫_time°amp
–
t
 ) { 
m_time°amp2
Ò; 
	}
}

95 
	$£t_i˙t_ª˚ive_time
–
t
 ) { 
m_i˙t_ª˚ive_time
Ò; 
	}
}

96 
	$gë_time°amp
(Ëc⁄° {  
m_time°amp
; 
	}
}

97 
	$gë_ªtu∫_time°amp
(Ëc⁄° {  
m_time°amp2
; 
	}
}

98 
	$gë_i˙t_ª˚ive_time
(Ëc⁄° {  
m_i˙t_ª˚ive_time
; 
	}
}

100 
mem_ac˚ss_ty≥
 
	$gë_ac˚ss_ty≥
(Ëc⁄° {  
m_ac˚ss
.
	`gë_ty≥
(); 
	}
}

101 c⁄° 
	ga˘ive_mask_t
& 
	$gë_ac˚ss_w¨p_mask
(Ëc⁄° {  
m_ac˚ss
.
	`gë_w¨p_mask
(); 
	}
}

102 
addªss_ty≥
 
	$gë_pc
(Ëc⁄° {  
m_ö°
.
	`em±y
()?-1:m_ö°.
pc
; 
	}
}

103 c⁄° 
	gw¨p_ö°_t
 &
	$gë_ö°
(Ë{  
m_ö°
; 
	}
}

104 
mem_„tch_°©us
 
	$gë_°©us
(Ëc⁄° {  
m_°©us
; 
	}
}

106 
	g¥iv©e
:

108 
m_ªque°_uid
;

109 
	gm_sid
;

110 
	gm_çc
;

111 
	gm_wid
;

114 
mem_„tch_°©us
 
	gm_°©us
;

115 
	gm_°©us_ch™ge
;

118 
mem_ac˚ss_t
 
	gm_ac˚ss
;

119 
	gm_d©a_size
;

120 
	gm_˘æ_size
;

121 
√w_addr_ty≥
 
	gm_∑πôi⁄_addr
;

122 
addrdec_t
 
	gm_øw_addr
;

123 
mf_ty≥
 
	gm_ty≥
;

126 
	gm_time°amp
;

127 
	gm_time°amp2
;

128 
	gm_i˙t_ª˚ive_time
;

131 
w¨p_ö°_t
 
	gm_ö°
;

133 
	gsm_√xt_mf_ªque°_uid
;

	@src/gpgpu-sim/mem_latency_stat.cc

29 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

30 
	~"mem_œãncy_°©.h
"

31 
	~"gpu-sim.h
"

32 
	~"gpu-misc.h
"

33 
	~"shadî.h
"

34 
	~"mem_„tch.h
"

35 
	~"°©-toﬁ.h
"

36 
	~"../cuda-sim/±x-°©s.h
"

37 
	~"visuÆizî.h
"

38 
	~"døm.h
"

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

44 
	gmem‹y_°©s_t
::
	$mem‹y_°©s_t
–
n_shadî
, c⁄° 
shadî_c‹e_c⁄fig
 *
shadî_c⁄fig
, c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
 )

46 
	`as£π
–
mem_c⁄fig
->
m_vÆid
 );

47 
	`as£π
–
shadî_c⁄fig
->
m_vÆid
 );

49 
i
,
j
;

52 
c⁄cuºít_row_ac˚ss
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

53 
num_a˘iv©es
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

54 
row_ac˚ss
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

55 
max_c⁄c_ac˚ss2ßmîow
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

56 
max_£rvi˚time2ßmîow
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

58 
i
=0;i<
mem_c⁄fig
->
m_n_mem
 ;i++ ) {

59 
c⁄cuºít_row_ac˚ss
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

60 
row_ac˚ss
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

61 
num_a˘iv©es
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

62 
max_c⁄c_ac˚ss2ßmîow
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

63 
max_£rvi˚time2ßmîow
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

67 
m_n_shadî
=
n_shadî
;

68 
m_mem‹y_c⁄fig
=
mem_c⁄fig
;

70 
max_mrq_œãncy
 = 0;

71 
max_dq_œãncy
 = 0;

72 
max_mf_œãncy
 = 0;

73 
max_i˙t2mem_œãncy
 = 0;

74 
max_i˙t2sh_œãncy
 = 0;

75 
	`mem£t
(
mrq_œt_èbÀ
, 0, ()*32);

76 
	`mem£t
(
dq_œt_èbÀ
, 0, ()*32);

77 
	`mem£t
(
mf_œt_èbÀ
, 0, ()*32);

78 
	`mem£t
(
i˙t2mem_œt_èbÀ
, 0, ()*24);

79 
	`mem£t
(
i˙t2sh_œt_èbÀ
, 0, ()*24);

80 
	`mem£t
(
mf_œt_pw_èbÀ
, 0, ()*32);

81 
mf_num_œt_pw
 = 0;

82 
max_w¨ps
 = 
n_shadî
 * (
shadî_c⁄fig
->
n_thªad_≥r_shadî
 / shadî_c⁄fig->
w¨p_size
+1);

83 
mf_tŸ_œt_pw
 = 0;

84 
mf_tŸÆ_œt
 = 0;

85 
num_mfs
 = 0;

86 
	`¥ötf
("*** Initializing Memory Statistics ***\n");

87 
tŸÆb™kªads
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

88 
tŸÆb™kwrôes
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

89 
tŸÆb™kac˚s£s
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

90 
mf_tŸÆ_œt_èbÀ
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

91 
mf_max_œt_èbÀ
 = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

92 
b™kªads
 = (***Ë
	`ˇŒoc
(
n_shadî
, (**));

93 
b™kwrôes
 = (***Ë
	`ˇŒoc
(
n_shadî
, (**));

94 
num_MCBs_ac˚s£d
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
*mem_c⁄fig->
nbk
, ());

95 i‡(
mem_c⁄fig
->
gpgpu_døm_sched_queue_size
) {

96 
posôi⁄_of_mrq_cho£n
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
gpgpu_døm_sched_queue_size
, ());

98 
posôi⁄_of_mrq_cho£n
 = (*Ë
	`ˇŒoc
(1024, ());

99 
i
=0;i<
n_shadî
 ;i++ ) {

100 
b™kªads
[
i
] = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

101 
b™kwrôes
[
i
] = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

102 
j
=0;j<
mem_c⁄fig
->
m_n_mem
 ;j++ ) {

103 
b™kªads
[
i
][
j
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

104 
b™kwrôes
[
i
][
j
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

108 
i
=0;i<
mem_c⁄fig
->
m_n_mem
 ;i++ ) {

109 
tŸÆb™kªads
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

110 
tŸÆb™kwrôes
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

111 
tŸÆb™kac˚s£s
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

112 
mf_tŸÆ_œt_èbÀ
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

113 
mf_max_œt_èbÀ
[
i
] = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
nbk
, ());

116 
mem_ac˚ss_ty≥_°©s
 = (***Ë
	`mÆloc
(
NUM_MEM_ACCESS_TYPE
 * (**));

117 
i
 = 0; i < 
NUM_MEM_ACCESS_TYPE
; i++) {

118 
j
;

119 
mem_ac˚ss_ty≥_°©s
[
i
] = (**Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, (*));

120 
j
=0; (Ëj< 
mem_c⁄fig
->
m_n_mem
; j++) {

121 
mem_ac˚ss_ty≥_°©s
[
i
][
j
] = (*Ë
	`ˇŒoc
((
mem_c⁄fig
->
nbk
+1), (*));

125 
L2_wrôe_miss
=0;

126 
L2_wrôe_hô
=0;

127 
L2_ªad_hô
=0;

128 
L2_ªad_miss
=0;

129 
L2_cbtoL2Àngth
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, ());

130 
L2_cbtoL2wrôñígth
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, ());

131 
L2_L2tocbÀngth
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, ());

132 
L2_dømtoL2Àngth
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, ());

133 
L2_dømtoL2wrôñígth
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, ());

134 
L2_L2todømÀngth
 = (*Ë
	`ˇŒoc
(
mem_c⁄fig
->
m_n_mem
, ());

135 
	}
}

138 
	gmem‹y_°©s_t
::
	$memœt°©_d⁄e
(
mem_„tch
 *
mf
 )

140 
mf_œãncy
;

141 
mf_œãncy
 = (
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
Ë- 
mf
->
	`gë_time°amp
();

142 
mf_num_œt_pw
++;

143 
mf_tŸ_œt_pw
 +
mf_œãncy
;

144 
idx
 = 
	`LOGB2
(
mf_œãncy
);

145 
	`as£π
(
idx
<32);

146 
mf_œt_èbÀ
[
idx
]++;

147 
	`shadî_mem_œt_log
(
mf
->
	`gë_sid
(), 
mf_œãncy
);

148 
mf_tŸÆ_œt_èbÀ
[
mf
->
	`gë_éx_addr
().
chù
][mf->gë_éx_addr().
bk
] +
mf_œãncy
;

149 i‡(
mf_œãncy
 > 
max_mf_œãncy
)

150 
max_mf_œãncy
 = 
mf_œãncy
;

151  
mf_œãncy
;

152 
	}
}

154 
	gmem‹y_°©s_t
::
	$memœt°©_ªad_d⁄e
(
mem_„tch
 *
mf
)

156 i‡(
m_mem‹y_c⁄fig
->
gpgpu_memœãncy_°©
) {

157 
mf_œãncy
 = 
	`memœt°©_d⁄e
(
mf
);

158 i‡(
mf_œãncy
 > 
mf_max_œt_èbÀ
[
mf
->
	`gë_éx_addr
().
chù
][mf->gë_éx_addr().
bk
])

159 
mf_max_œt_èbÀ
[
mf
->
	`gë_éx_addr
().
chù
][mf->gë_éx_addr().
bk
] = 
mf_œãncy
;

160 
i˙t2sh_œãncy
;

161 
i˙t2sh_œãncy
 = (
gpu_tŸ_sim_cy˛e
+
gpu_sim_cy˛e
Ë- 
mf
->
	`gë_ªtu∫_time°amp
();

162 
i˙t2sh_œt_èbÀ
[
	`LOGB2
(
i˙t2sh_œãncy
)]++;

163 i‡(
i˙t2sh_œãncy
 > 
max_i˙t2sh_œãncy
)

164 
max_i˙t2sh_œãncy
 = 
i˙t2sh_œãncy
;

166 
	}
}

168 
	gmem‹y_°©s_t
::
	$memœt°©_døm_ac˚ss
(
mem_„tch
 *
mf
)

170 
døm_id
 = 
mf
->
	`gë_éx_addr
().
chù
;

171 
b™k
 = 
mf
->
	`gë_éx_addr
().
bk
;

172 i‡(
m_mem‹y_c⁄fig
->
gpgpu_memœãncy_°©
) {

173 i‡(
mf
->
	`gë_is_wrôe
()) {

174 i‡–
mf
->
	`gë_sid
(Ë< 
m_n_shadî
 ) {

175 
b™kwrôes
[
mf
->
	`gë_sid
()][
døm_id
][
b™k
]++;

176 
	`shadî_mem_acc_log
–
mf
->
	`gë_sid
(), 
døm_id
, 
b™k
, 'w');

178 
tŸÆb™kwrôes
[
døm_id
][
b™k
]++;

180 
b™kªads
[
mf
->
	`gë_sid
()][
døm_id
][
b™k
]++;

181 
	`shadî_mem_acc_log
–
mf
->
	`gë_sid
(), 
døm_id
, 
b™k
, 'r');

182 
tŸÆb™kªads
[
døm_id
][
b™k
]++;

184 
mem_ac˚ss_ty≥_°©s
[
mf
->
	`gë_ac˚ss_ty≥
()][
døm_id
][
b™k
]++;

186 i‡(
mf
->
	`gë_pc
() != ()-1)

187 
	`±x_fûe_löe_°©s_add_døm_åaffic
(
mf
->
	`gë_pc
(), mf->
	`gë_d©a_size
());

188 
	}
}

190 
	gmem‹y_°©s_t
::
	$memœt°©_i˙t2mem_p›
(
mem_„tch
 *
mf
)

192 i‡(
m_mem‹y_c⁄fig
->
gpgpu_memœãncy_°©
) {

193 
i˙t2mem_œãncy
;

194 
i˙t2mem_œãncy
 = (
gpu_tŸ_sim_cy˛e
+
gpu_sim_cy˛e
Ë- 
mf
->
	`gë_time°amp
();

195 
i˙t2mem_œt_èbÀ
[
	`LOGB2
(
i˙t2mem_œãncy
)]++;

196 i‡(
i˙t2mem_œãncy
 > 
max_i˙t2mem_œãncy
)

197 
max_i˙t2mem_œãncy
 = 
i˙t2mem_œãncy
;

199 
	}
}

201 
	gmem‹y_°©s_t
::
	$memœt°©_œt_pw
()

203 i‡(
mf_num_œt_pw
 && 
m_mem‹y_c⁄fig
->
gpgpu_memœãncy_°©
) {

204 
	`as£π
(
mf_tŸ_œt_pw
);

205 
mf_tŸÆ_œt
 = 
mf_tŸ_œt_pw
;

206 
num_mfs
 = 
mf_num_œt_pw
;

207 
mf_œt_pw_èbÀ
[
	`LOGB2
(
mf_tŸ_œt_pw
/
mf_num_œt_pw
)]++;

208 
mf_tŸ_œt_pw
 = 0;

209 
mf_num_œt_pw
 = 0;

211 
	}
}

214 
	gmem‹y_°©s_t
::
	$memœt°©_¥öt
–
n_mem
, 
gpu_mem_n_bk
 )

216 
i
,
j
,
k
,
l
,
m
;

217 
max_b™k_ac˚s£s
, 
mö_b™k_ac˚s£s
, 
max_chù_ac˚s£s
, 
mö_chù_ac˚s£s
;

219 i‡(
m_mem‹y_c⁄fig
->
gpgpu_memœãncy_°©
) {

220 
	`¥ötf
("maxmrqœãncy = %d \n", 
max_mrq_œãncy
);

221 
	`¥ötf
("maxdqœãncy = %d \n", 
max_dq_œãncy
);

222 
	`¥ötf
("maxmÊ©ícy = %d \n", 
max_mf_œãncy
);

223 i‡(
num_mfs
) {

224 
	`¥ötf
("avîagemÊ©ícy = %Œd \n", 
mf_tŸÆ_œt
/
num_mfs
);

226 
	`¥ötf
("max_i˙t2mem_œãncy = %d \n", 
max_i˙t2mem_œãncy
);

227 
	`¥ötf
("max_i˙t2sh_œãncy = %d \n", 
max_i˙t2sh_œãncy
);

228 
	`¥ötf
("mrq_lat_table:");

229 
i
=0; i< 32; i++) {

230 
	`¥ötf
("%d \t", 
mrq_œt_èbÀ
[
i
]);

232 
	`¥ötf
("\n");

233 
	`¥ötf
("dq_lat_table:");

234 
i
=0; i< 32; i++) {

235 
	`¥ötf
("%d \t", 
dq_œt_èbÀ
[
i
]);

237 
	`¥ötf
("\n");

238 
	`¥ötf
("mf_lat_table:");

239 
i
=0; i< 32; i++) {

240 
	`¥ötf
("%d \t", 
mf_œt_èbÀ
[
i
]);

242 
	`¥ötf
("\n");

243 
	`¥ötf
("icnt2mem_lat_table:");

244 
i
=0; i< 24; i++) {

245 
	`¥ötf
("%d \t", 
i˙t2mem_œt_èbÀ
[
i
]);

247 
	`¥ötf
("\n");

248 
	`¥ötf
("icnt2sh_lat_table:");

249 
i
=0; i< 24; i++) {

250 
	`¥ötf
("%d \t", 
i˙t2sh_œt_èbÀ
[
i
]);

252 
	`¥ötf
("\n");

253 
	`¥ötf
("mf_lat_pw_table:");

254 
i
=0; i< 32; i++) {

255 
	`¥ötf
("%d \t", 
mf_œt_pw_èbÀ
[
i
]);

257 
	`¥ötf
("\n");

260 
	`¥ötf
("maximum concurrentáccessesÅo sameÑow:\n");

261 
i
=0;i<
n_mem
 ;i++ ) {

262 
	`¥ötf
("døm[%d]: ", 
i
);

263 
j
=0;j<4 ;j++ ) {

264 
	`¥ötf
("%9d ",
max_c⁄c_ac˚ss2ßmîow
[
i
][
j
]);

266 
	`¥ötf
("\n");

270 
	`¥ötf
("maximum serviceÅimeÅo sameÑow:\n");

271 
i
=0;i<
n_mem
 ;i++ ) {

272 
	`¥ötf
("døm[%d]: ", 
i
);

273 
j
=0;j<4 ;j++ ) {

274 
	`¥ötf
("%9d ",
max_£rvi˚time2ßmîow
[
i
][
j
]);

276 
	`¥ötf
("\n");

280 
tŸÆ_row_ac˚s£s
 = 0;

281 
tŸÆ_num_a˘iv©es
 = 0;

282 
	`¥ötf
("averageÑowáccessesÖeráctivate:\n");

283 
i
=0;i<
n_mem
 ;i++ ) {

284 
	`¥ötf
("døm[%d]: ", 
i
);

285 
j
=0;j<4 ;j++ ) {

286 
tŸÆ_row_ac˚s£s
 +
row_ac˚ss
[
i
][
j
];

287 
tŸÆ_num_a˘iv©es
 +
num_a˘iv©es
[
i
][
j
];

288 
	`¥ötf
("%9‡",(Ë
row_ac˚ss
[
i
][
j
]/
num_a˘iv©es
[i][j]);

290 
	`¥ötf
("\n");

292 
	`¥ötf
("avîagêrowÜoˇlôy = %d/%d = %f\n", 
tŸÆ_row_ac˚s£s
, 
tŸÆ_num_a˘iv©es
, ()total_row_accesses/total_num_activates);

294 
k
 = 0;

295 
l
 = 0;

296 
m
 = 0;

297 
max_b™k_ac˚s£s
 = 0;

298 
max_chù_ac˚s£s
 = 0;

299 
mö_b™k_ac˚s£s
 = 0xFFFFFFFF;

300 
mö_chù_ac˚s£s
 = 0xFFFFFFFF;

301 
	`¥ötf
("number ofÅotal memoryáccesses made:\n");

302 
i
=0;i<
n_mem
 ;i++ ) {

303 
	`¥ötf
("døm[%d]: ", 
i
);

304 
j
=0;j<4 ;j++ ) {

305 
l
 = 
tŸÆb™kac˚s£s
[
i
][
j
];

306 i‡(
l
 < 
mö_b™k_ac˚s£s
)

307 
mö_b™k_ac˚s£s
 = 
l
;

308 i‡(
l
 > 
max_b™k_ac˚s£s
)

309 
max_b™k_ac˚s£s
 = 
l
;

310 
k
 +
l
;

311 
m
 +
l
;

312 
	`¥ötf
("%9d ",
l
);

314 i‡(
m
 < 
mö_chù_ac˚s£s
)

315 
mö_chù_ac˚s£s
 = 
m
;

316 i‡(
m
 > 
max_chù_ac˚s£s
)

317 
max_chù_ac˚s£s
 = 
m
;

318 
m
 = 0;

319 
	`¥ötf
("\n");

321 
	`¥ötf
("tŸÆác˚s£s: %d\n", 
k
);

322 i‡(
mö_b™k_ac˚s£s
)

323 
	`¥ötf
("b™k skew: %d/%d = %4.2f\n", 
max_b™k_ac˚s£s
, 
mö_b™k_ac˚s£s
, ()max_bank_accesses/min_bank_accesses);

325 
	`¥ötf
("min_bank_accesses = 0!\n");

326 i‡(
mö_chù_ac˚s£s
)

327 
	`¥ötf
("chù skew: %d/%d = %4.2f\n", 
max_chù_ac˚s£s
, 
mö_chù_ac˚s£s
, ()max_chip_accesses/min_chip_accesses);

329 
	`¥ötf
("min_chip_accesses = 0!\n");

332 
k
 = 0;

333 
l
 = 0;

334 
m
 = 0;

335 
max_b™k_ac˚s£s
 = 0;

336 
max_chù_ac˚s£s
 = 0;

337 
mö_b™k_ac˚s£s
 = 0xFFFFFFFF;

338 
mö_chù_ac˚s£s
 = 0xFFFFFFFF;

339 
	`¥ötf
("number ofÅotalÑeadáccesses:\n");

340 
i
=0;i<
n_mem
 ;i++ ) {

341 
	`¥ötf
("døm[%d]: ", 
i
);

342 
j
=0;j<4 ;j++ ) {

343 
l
 = 
tŸÆb™kªads
[
i
][
j
];

344 i‡(
l
 < 
mö_b™k_ac˚s£s
)

345 
mö_b™k_ac˚s£s
 = 
l
;

346 i‡(
l
 > 
max_b™k_ac˚s£s
)

347 
max_b™k_ac˚s£s
 = 
l
;

348 
k
 +
l
;

349 
m
 +
l
;

350 
	`¥ötf
("%9d ",
l
);

352 i‡(
m
 < 
mö_chù_ac˚s£s
)

353 
mö_chù_ac˚s£s
 = 
m
;

354 i‡(
m
 > 
max_chù_ac˚s£s
)

355 
max_chù_ac˚s£s
 = 
m
;

356 
m
 = 0;

357 
	`¥ötf
("\n");

359 
	`¥ötf
("tŸÆÑóds: %d\n", 
k
);

360 i‡(
mö_b™k_ac˚s£s
)

361 
	`¥ötf
("b™k skew: %d/%d = %4.2f\n", 
max_b™k_ac˚s£s
, 
mö_b™k_ac˚s£s
, ()max_bank_accesses/min_bank_accesses);

363 
	`¥ötf
("min_bank_accesses = 0!\n");

364 i‡(
mö_chù_ac˚s£s
)

365 
	`¥ötf
("chù skew: %d/%d = %4.2f\n", 
max_chù_ac˚s£s
, 
mö_chù_ac˚s£s
, ()max_chip_accesses/min_chip_accesses);

367 
	`¥ötf
("min_chip_accesses = 0!\n");

370 
k
 = 0;

371 
l
 = 0;

372 
m
 = 0;

373 
max_b™k_ac˚s£s
 = 0;

374 
max_chù_ac˚s£s
 = 0;

375 
mö_b™k_ac˚s£s
 = 0xFFFFFFFF;

376 
mö_chù_ac˚s£s
 = 0xFFFFFFFF;

377 
	`¥ötf
("number ofÅotal writeáccesses:\n");

378 
i
=0;i<
n_mem
 ;i++ ) {

379 
	`¥ötf
("døm[%d]: ", 
i
);

380 
j
=0;j<4 ;j++ ) {

381 
l
 = 
tŸÆb™kwrôes
[
i
][
j
];

382 i‡(
l
 < 
mö_b™k_ac˚s£s
)

383 
mö_b™k_ac˚s£s
 = 
l
;

384 i‡(
l
 > 
max_b™k_ac˚s£s
)

385 
max_b™k_ac˚s£s
 = 
l
;

386 
k
 +
l
;

387 
m
 +
l
;

388 
	`¥ötf
("%9d ",
l
);

390 i‡(
m
 < 
mö_chù_ac˚s£s
)

391 
mö_chù_ac˚s£s
 = 
m
;

392 i‡(
m
 > 
max_chù_ac˚s£s
)

393 
max_chù_ac˚s£s
 = 
m
;

394 
m
 = 0;

395 
	`¥ötf
("\n");

397 
	`¥ötf
("tŸÆÑóds: %d\n", 
k
);

398 i‡(
mö_b™k_ac˚s£s
)

399 
	`¥ötf
("b™k skew: %d/%d = %4.2f\n", 
max_b™k_ac˚s£s
, 
mö_b™k_ac˚s£s
, ()max_bank_accesses/min_bank_accesses);

401 
	`¥ötf
("min_bank_accesses = 0!\n");

402 i‡(
mö_chù_ac˚s£s
)

403 
	`¥ötf
("chù skew: %d/%d = %4.2f\n", 
max_chù_ac˚s£s
, 
mö_chù_ac˚s£s
, ()max_chip_accesses/min_chip_accesses);

405 
	`¥ötf
("min_chip_accesses = 0!\n");

409 
	`¥ötf
("average mfÜatencyÖer bank:\n");

410 
i
=0;i<
n_mem
 ;i++ ) {

411 
	`¥ötf
("døm[%d]: ", 
i
);

412 
j
=0;j<4 ;j++ ) {

413 
k
 = 
tŸÆb™kwrôes
[
i
][
j
] + 
tŸÆb™kªads
[i][j];

414 i‡(
k
)

415 
	`¥ötf
("%10Œd", 
mf_tŸÆ_œt_èbÀ
[
i
][
j
] / 
k
);

417 
	`¥ötf
("Çone ");

419 
	`¥ötf
("\n");

423 
	`¥ötf
("maximum mfÜatencyÖer bank:\n");

424 
i
=0;i<
n_mem
 ;i++ ) {

425 
	`¥ötf
("døm[%d]: ", 
i
);

426 
j
=0;j<4 ;j++ ) {

427 
	`¥ötf
("%10d", 
mf_max_œt_èbÀ
[
i
][
j
]);

429 
	`¥ötf
("\n");

433 i‡(
m_mem‹y_c⁄fig
->
gpgpu_memœãncy_°©
 & 
GPU_MEMLATSTAT_MC
) {

434 
	`¥ötf
("\nNumber of Memory Banks AccessedÖer Memory OperationÖer Warp (from 0):\n");

435 
accum_MCBs_ac˚s£d
 = 0;

436 
tŸ_mem_›s_≥r_w¨p
 = 0;

437 
i
=0;i<
n_mem
*
gpu_mem_n_bk
 ; i++ ) {

438 
accum_MCBs_ac˚s£d
 +
i
*
num_MCBs_ac˚s£d
[i];

439 
tŸ_mem_›s_≥r_w¨p
 +
num_MCBs_ac˚s£d
[
i
];

440 
	`¥ötf
("%d\t", 
num_MCBs_ac˚s£d
[
i
]);

443 
	`¥ötf
("\nAvîagê# o‡Mem‹y B™k†Ac˚s£dÖî Mem‹y O≥øti⁄Öî W¨p=%f\n", ()
accum_MCBs_ac˚s£d
/
tŸ_mem_›s_≥r_w¨p
);

448 
	`¥ötf
("\nposition of mrq chosen\n");

450 i‡(!
m_mem‹y_c⁄fig
->
gpgpu_døm_sched_queue_size
)

451 
j
 = 1024;

453 
j
 = 
m_mem‹y_c⁄fig
->
gpgpu_døm_sched_queue_size
;

454 
k
=0;
l
=0;

455 
i
=0;i< 
j
; i++ ) {

456 
	`¥ötf
("%d\t", 
posôi⁄_of_mrq_cho£n
[
i
]);

457 
k
 +
posôi⁄_of_mrq_cho£n
[
i
];

458 
l
 +
i
*
posôi⁄_of_mrq_cho£n
[i];

460 
	`¥ötf
("\n");

461 
	`¥ötf
("\«vîagêposôi⁄ o‡mrq cho£¿%f\n", ()
l
/
k
);

463 
	}
}

	@src/gpgpu-sim/mem_latency_stat.h

28 #i‚de‡
MEM_LATENCY_STAT_H


29 
	#MEM_LATENCY_STAT_H


	)

31 
	~<°dio.h
>

32 
	~<zlib.h
>

34 ˛as†
	cmem‹y_°©s_t
 {

35 
	mpublic
:

36 
mem‹y_°©s_t
–
n_shadî
,

37 c⁄° 
shadî_c‹e_c⁄fig
 *
shadî_c⁄fig
,

38 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
 );

40 
memœt°©_d⁄e
–
˛ass
 
mem_„tch
 *
mf
 );

41 
memœt°©_ªad_d⁄e
–
˛ass
 
mem_„tch
 *
mf
 );

42 
memœt°©_døm_ac˚ss
–
˛ass
 
mem_„tch
 *
mf
 );

43 
memœt°©_i˙t2mem_p›
–
˛ass
 
mem_„tch
 *
mf
);

44 
memœt°©_œt_pw
();

45 
memœt°©_¥öt
(
n_mem
, 
gpu_mem_n_bk
);

47 
¥öt
–
FILE
 *
Â
 );

48 
visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 );

50 
	mm_n_shadî
;

52 c⁄° 
shadî_c‹e_c⁄fig
 *
	mm_shadî_c⁄fig
;

53 c⁄° 
mem‹y_c⁄fig
 *
	mm_mem‹y_c⁄fig
;

55 
	mmax_mrq_œãncy
;

56 
	mmax_dq_œãncy
;

57 
	mmax_mf_œãncy
;

58 
	mmax_i˙t2mem_œãncy
;

59 
	mmax_i˙t2sh_œãncy
;

60 
	mmrq_œt_èbÀ
[32];

61 
	mdq_œt_èbÀ
[32];

62 
	mmf_œt_èbÀ
[32];

63 
	mi˙t2mem_œt_èbÀ
[24];

64 
	mi˙t2sh_œt_èbÀ
[24];

65 
	mmf_œt_pw_èbÀ
[32];

66 
	mmf_num_œt_pw
;

67 
	mmax_w¨ps
;

68 
	mmf_tŸ_œt_pw
;

69 
	mmf_tŸÆ_œt
;

70 ** 
	mmf_tŸÆ_œt_èbÀ
;

71 ** 
	mmf_max_œt_èbÀ
;

72 
	mnum_mfs
;

73 ***
	mb™kwrôes
;

74 ***
	mb™kªads
;

75 **
	mtŸÆb™kwrôes
;

76 **
	mtŸÆb™kªads
;

77 **
	mtŸÆb™kac˚s£s
;

78 *
	mnum_MCBs_ac˚s£d
;

79 *
	mposôi⁄_of_mrq_cho£n
;

81 ***
	mmem_ac˚ss_ty≥_°©s
;

85 
	mL2_wrôe_miss
;

86 
	mL2_wrôe_hô
;

87 
	mL2_ªad_hô
;

88 
	mL2_ªad_miss
;

89 *
	mL2_cbtoL2Àngth
;

90 *
	mL2_cbtoL2wrôñígth
;

91 *
	mL2_L2tocbÀngth
;

92 *
	mL2_dømtoL2Àngth
;

93 *
	mL2_dømtoL2wrôñígth
;

94 *
	mL2_L2todømÀngth
;

96 **
	mc⁄cuºít_row_ac˚ss
;

97 **
	mnum_a˘iv©es
;

98 **
	mrow_ac˚ss
;

99 **
	mmax_c⁄c_ac˚ss2ßmîow
;

100 **
	mmax_£rvi˚time2ßmîow
;

	@src/gpgpu-sim/scoreboard.cc

28 
	~"sc‹ebﬂrd.h
"

29 
	~"shadî.h
"

30 
	~"../cuda-sim/±x_sim.h
"

34 
	gSc‹ebﬂrd
::
	$Sc‹ebﬂrd
–
sid
, 
n_w¨ps
 )

36 
m_sid
 = 
sid
;

38 
ªg_èbÀ
.
	`ªsize
(
n_w¨ps
);

39 
	}
}

42 
	gSc‹ebﬂrd
::
	$¥ötC⁄ã¡s
() const

44 
	`¥ötf
("sc‹ebﬂrd c⁄ã¡†(sid=%d): \n", 
m_sid
);

45 
i
=0; i<
ªg_èbÀ
.
	`size
(); i++) {

46 if(
ªg_èbÀ
[
i
].
	`size
() == 0 ) ;

47 
	`¥ötf
(" wid = %2d: ", 
i
);

48 
°d
::
£t
<>::
c⁄°_ôî©‹
 
ô
;

49  
ô
=
ªg_èbÀ
[
i
].
	`begö
(Ë; ià!ªg_èbÀ[i].
	`íd
(); it++ )

50 
	`¥ötf
("%u ", *
ô
);

51 
	`¥ötf
("\n");

53 
	}
}

55 
	gSc‹ebﬂrd
::
	$ª£rveRegi°î
(
wid
, 
ªgnum
)

57 if–!(
ªg_èbÀ
[
wid
].
	`föd
(
ªgnum
Ë=ªg_èbÀ[wid].
	`íd
()) ){

58 
	`¥ötf
("Eº‹:ÅryögÅÿª£rvê™áÃódyÑe£rvedÑegi°î (sid=%d, wid=%d,Ñegnum=%d).", 
m_sid
, 
wid
, 
ªgnum
);

59 
	`ab‹t
();

61 
ªg_èbÀ
[
wid
].
	`ö£π
(
ªgnum
);

62 
	}
}

65 
	gSc‹ebﬂrd
::
	$ªÀa£Regi°î
(
wid
, 
ªgnum
)

67 if–!(
ªg_èbÀ
[
wid
].
	`föd
(
ªgnum
Ë!ªg_èbÀ[wid].
	`íd
()) )

69 
ªg_èbÀ
[
wid
].
	`îa£
(
ªgnum
);

70 
	}
}

72 
	gSc‹ebﬂrd
::
	$ª£rveRegi°îs
(
w¨p_id
,c⁄° 
˛ass
 
w¨p_ö°_t
* 
ö°
)

74  
r
=0;Ñ < 4;Ñ++)

75 if(
ö°
->
out
[
r
] > 0Ë
	`ª£rveRegi°î
(
w¨p_id
, inst->out[r]);

76 
	}
}

79 
	gSc‹ebﬂrd
::
	$ªÀa£Regi°îs
(c⁄° 
˛ass
 
w¨p_ö°_t
 *
ö°
)

81  
r
=0;Ñ < 4;Ñ++)

82 if(
ö°
->
out
[
r
] > 0Ë
	`ªÀa£Regi°î
(ö°->
	`w¨p_id
(), inst->out[r]);

83 
	}
}

91 
boﬁ
 
	gSc‹ebﬂrd
::
	$checkCﬁlisi⁄
–
wid
, c⁄° 
˛ass
 
ö°_t
 *
ö°
 ) const

94 
°d
::
£t
<> 
ö°_ªgs
;

96 if(
ö°
->
out
[0] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->out[0]);

97 if(
ö°
->
out
[1] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->out[1]);

98 if(
ö°
->
out
[2] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->out[2]);

99 if(
ö°
->
out
[3] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->out[3]);

100 if(
ö°
->
ö
[0] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->in[0]);

101 if(
ö°
->
ö
[1] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->in[1]);

102 if(
ö°
->
ö
[2] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->in[2]);

103 if(
ö°
->
ö
[3] > 0Ë
ö°_ªgs
.
	`ö£π
(inst->in[3]);

104 if(
ö°
->
¥ed
 > 0Ë
ö°_ªgs
.
	`ö£π
(inst->pred);

105 if(
ö°
->
¨1
 > 0Ë
ö°_ªgs
.
	`ö£π
(inst->ar1);

106 if(
ö°
->
¨2
 > 0Ë
ö°_ªgs
.
	`ö£π
(inst->ar2);

109 
°d
::
£t
<>::
c⁄°_ôî©‹
 
ô2
;

110  
ô2
=
ö°_ªgs
.
	`begö
(Ë; it2 !ö°_ªgs.
	`íd
(); it2++ )

111 if(
ªg_èbÀ
[
wid
].
	`föd
(*
ô2
Ë!ªg_èbÀ[wid].
	`íd
()) {

112  
åue
;

114  
Ál£
;

115 
	}
}

117 
boﬁ
 
	gSc‹ebﬂrd
::
	$≥ndögWrôes
(
wid
) const

119  !
ªg_èbÀ
[
wid
].
	`em±y
();

120 
	}
}

	@src/gpgpu-sim/scoreboard.h

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<ve˘‹
>

31 
	~<£t
>

32 
	~"as£π.h
"

34 #i‚de‡
SCOREBOARD_H_


35 
	#SCOREBOARD_H_


	)

37 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

39 ˛as†
	cSc‹ebﬂrd
 {

40 
	mpublic
:

41 
Sc‹ebﬂrd
–
sid
, 
n_w¨ps
 );

43 
ª£rveRegi°îs
(
w¨p_id
,c⁄° 
w¨p_ö°_t
 *
ö°
);

44 
ªÀa£Regi°îs
(c⁄° 
w¨p_ö°_t
 *
ö°
);

45 
ªÀa£Regi°î
(
wid
, 
ªgnum
);

47 
boﬁ
 
	$checkCﬁlisi⁄
(
wid
, c⁄° 
ö°_t
 *
ö°
) const;

48 
boﬁ
 
	$≥ndögWrôes
(
wid
) const;

49 
	$¥ötC⁄ã¡s
() const;

50 
¥iv©e
:

51 
	`ª£rveRegi°î
(
wid
, 
ªgnum
);

53 
m_sid
;

57 
°d
::
ve˘‹
< std::
£t
<> > 
ªg_èbÀ
;

	@src/gpgpu-sim/shader.cc

28 
	~<sys/time.h
>

29 
	~<Êﬂt.h
>

30 
	~"shadî.h
"

31 
	~"gpu-sim.h
"

32 
	~"addrdec.h
"

33 
	~"døm.h
"

34 
	~"°©-toﬁ.h
"

35 
	~"gpu-misc.h
"

36 
	~"../cuda-sim/±x_sim.h
"

37 
	~"../cuda-sim/±x-°©s.h
"

38 
	~"../cuda-sim/cuda-sim.h
"

39 
	~"gpu-sim.h
"

40 
	~"mem_„tch.h
"

41 
	~"mem_œãncy_°©.h
"

42 
	~"visuÆizî.h
"

43 
	~"../öãrsim/°©wø≥r.h
"

44 
	~"../öãrsim/öãrc⁄√˘_öãrÁ˚.h
"

45 
	~"i˙t_wøµî.h
"

46 
	~<°rög.h
>

47 
	~<limôs.h
>

49 
	#PRIORITIZE_MSHR_OVER_WB
 1

	)

50 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

54 
	g°d
::
li°
<> 
shadî_c‹e_˘x
::
	$gë_ªgs_wrôãn
–c⁄° 
ö°_t
 &
fvt
 ) const

56 
°d
::
li°
<> 
ªsu…
;

57  
›
=0; o∞< 
MAX_REG_OPERANDS
; op++ ) {

58 
ªg_num
 = 
fvt
.
¨ch_ªg
.
d°
[
›
];

59 if–
ªg_num
 >= 0 )

60 
ªsu…
.
	`push_back
(
ªg_num
);

62  
ªsu…
;

63 
	}
}

65 
	gshadî_c‹e_˘x
::
	$shadî_c‹e_˘x
–
˛ass
 
gpgpu_sim
 *
gpu
,

66 
˛ass
 
simt_c‹e_˛u°î
 *
˛u°î
,

67 
shadî_id
,

68 
çc_id
,

69 c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
,

70 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
,

71 
shadî_c‹e_°©s
 *
°©s
 )

72 : 
	`m_b¨rõrs
–
c⁄fig
->
max_w¨ps_≥r_shadî
, c⁄fig->
max_˘a_≥r_c‹e
 )

74 
m_kî√l
 = 
NULL
;

75 
m_gpu
 = 
gpu
;

76 
m_˛u°î
 = 
˛u°î
;

77 
m_c⁄fig
 = 
c⁄fig
;

78 
m_mem‹y_c⁄fig
 = 
mem_c⁄fig
;

79 
m_°©s
 = 
°©s
;

80 
w¨p_size
=
c⁄fig
->warp_size;

82 
m_sid
 = 
shadî_id
;

83 
m_çc
 = 
çc_id
;

85 
m_pùñöe_ªg
.
	`ª£rve
(
N_PIPELINE_STAGES
);

86 
j
 = 0; j<
N_PIPELINE_STAGES
; j++) {

87 
m_pùñöe_ªg
.
	`push_back
(
	`ªgi°î_£t
(
m_c⁄fig
->
pùe_widths
[
j
],
pùñöe_°age_«me_decode
[j]));

90 
m_thªadSèã
 = (
thªad_˘x_t
*Ë
	`ˇŒoc
(—hªad_˘x_t), 
c⁄fig
->
n_thªad_≥r_shadî
);

91 
m_thªad
 = (
±x_thªad_öfo
**Ë
	`ˇŒoc
(’tx_thªad_öfo*), 
c⁄fig
->
n_thªad_≥r_shadî
);

93 
m_nŸ_com∂ëed
 = 0;

94 
m_a˘ive_thªads
.
	`ª£t
();

95 
m_n_a˘ive_˘a
 = 0;

96 
i
 = 0; i<
MAX_CTA_PER_SHADER
; i++ )

97 
m_˘a_°©us
[
i
]=0;

98 
i
 = 0; i<
c⁄fig
->
n_thªad_≥r_shadî
; i++) {

99 
m_thªad
[
i
]
NULL
;

100 
m_thªadSèã
[
i
].
m_˘a_id
 = -1;

101 
m_thªadSèã
[
i
].
m_a˘ive
 = 
Ál£
;

105 i‡–
m_c⁄fig
->
gpgpu_≥r„˘_mem
 ) {

106 
m_i˙t
 = 
√w
 
	`≥r„˘_mem‹y_öãrÁ˚
(
this
,
˛u°î
);

108 
m_i˙t
 = 
√w
 
	`shadî_mem‹y_öãrÁ˚
(
this
,
˛u°î
);

110 
m_mem_„tch_Æloˇt‹
 = 
√w
 
	`shadî_c‹e_mem_„tch_Æloˇt‹
(
shadî_id
,
çc_id
,
mem_c⁄fig
);

113 
m_œ°_w¨p_„tched
 = 0;

115 
	#STRSIZE
 1024

	)

116 
«me
[
STRSIZE
];

117 
	`¢¥ötf
(
«me
, 
STRSIZE
, "L1I_%03d", 
m_sid
);

118 
m_L1I
 = 
√w
 
	`ªad_⁄ly_ˇche
–
«me
,
m_c⁄fig
->
m_L1I_c⁄fig
,
m_sid
,
	`gë_shadî_ö°ru˘i⁄_ˇche_id
(),
m_i˙t
,
IN_L1I_MISS_QUEUE
);

120 
m_w¨p
.
	`ªsize
(
m_c⁄fig
->
max_w¨ps_≥r_shadî
, 
	`shd_w¨p_t
(
this
, 
w¨p_size
));

121 
	`öôûizeSIMTSèck
(
c⁄fig
->
max_w¨ps_≥r_shadî
,
this
->
	`gë_c⁄fig
()->
w¨p_size
);

122 
m_sc‹ebﬂrd
 = 
√w
 
	`Sc‹ebﬂrd
(
m_sid
, 
m_c⁄fig
->
max_w¨ps_≥r_shadî
);

126 
i
 = 0; i < 
m_c⁄fig
->
gpgpu_num_sched_≥r_c‹e
; i++) {

127 
scheduÀrs
.
	`push_back
(
	`scheduÀr_unô
(
m_°©s
,
this
,
m_sc‹ebﬂrd
,
m_simt_°ack
,&
m_w¨p
,

128 &
m_pùñöe_ªg
[
ID_OC_SP
],

129 &
m_pùñöe_ªg
[
ID_OC_SFU
],

130 &
m_pùñöe_ªg
[
ID_OC_MEM
]));

132 
i
 = 0; i < 
m_w¨p
.
	`size
(); i++) {

134 
scheduÀrs
[
i
%
m_c⁄fig
->
gpgpu_num_sched_≥r_c‹e
].
	`add_su≥rvi£d_w¨p_id
(i);

138 íum { 
SP_CUS
, 
SFU_CUS
, 
MEM_CUS
, 
GEN_CUS
 };

139 
m_›î™d_cﬁÀ˘‹
.
	`add_cu_£t
(
SP_CUS
, 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_•
, m_c⁄fig->
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_•
);

140 
m_›î™d_cﬁÀ˘‹
.
	`add_cu_£t
(
SFU_CUS
, 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_sfu
, m_c⁄fig->
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_sfu
);

141 
m_›î™d_cﬁÀ˘‹
.
	`add_cu_£t
(
MEM_CUS
, 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_mem
, m_c⁄fig->
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_mem
);

142 
m_›î™d_cﬁÀ˘‹
.
	`add_cu_£t
(
GEN_CUS
, 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_unôs_gí
, m_c⁄fig->
gpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_gí
);

144 
›ndcﬁl_rfu_t
::
p‹t_ve˘‹_t
 
ö_p‹ts
;

145 
›ndcﬁl_rfu_t
::
p‹t_ve˘‹_t
 
out_p‹ts
;

146 
›ndcﬁl_rfu_t
::
uöt_ve˘‹_t
 
cu_£ts
;

147 
i
 = 0; i < 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_•
; i++) {

148 
ö_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
ID_OC_SP
]);

149 
out_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
OC_EX_SP
]);

150 
cu_£ts
.
	`push_back
(()
SP_CUS
);

151 
cu_£ts
.
	`push_back
(()
GEN_CUS
);

152 
m_›î™d_cﬁÀ˘‹
.
	`add_p‹t
(
ö_p‹ts
,
out_p‹ts
,
cu_£ts
);

153 
ö_p‹ts
.
	`˛ór
(),
out_p‹ts
.˛ór(),
cu_£ts
.clear();

156 
i
 = 0; i < 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_sfu
; i++) {

157 
ö_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
ID_OC_SFU
]);

158 
out_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
OC_EX_SFU
]);

159 
cu_£ts
.
	`push_back
(()
SFU_CUS
);

160 
cu_£ts
.
	`push_back
(()
GEN_CUS
);

161 
m_›î™d_cﬁÀ˘‹
.
	`add_p‹t
(
ö_p‹ts
,
out_p‹ts
,
cu_£ts
);

162 
ö_p‹ts
.
	`˛ór
(),
out_p‹ts
.˛ór(),
cu_£ts
.clear();

165 
i
 = 0; i < 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_mem
; i++) {

166 
ö_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
ID_OC_MEM
]);

167 
out_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
OC_EX_MEM
]);

168 
cu_£ts
.
	`push_back
(()
MEM_CUS
);

169 
cu_£ts
.
	`push_back
(()
GEN_CUS
);

170 
m_›î™d_cﬁÀ˘‹
.
	`add_p‹t
(
ö_p‹ts
,
out_p‹ts
,
cu_£ts
);

171 
ö_p‹ts
.
	`˛ór
(),
out_p‹ts
.˛ór(),
cu_£ts
.clear();

175 
i
 = 0; i < 
m_c⁄fig
->
gpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_gí
; i++) {

176 
ö_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
ID_OC_SP
]);

177 
ö_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
ID_OC_SFU
]);

178 
ö_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
ID_OC_MEM
]);

179 
out_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
OC_EX_SP
]);

180 
out_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
OC_EX_SFU
]);

181 
out_p‹ts
.
	`push_back
(&
m_pùñöe_ªg
[
OC_EX_MEM
]);

182 
cu_£ts
.
	`push_back
(()
GEN_CUS
);

183 
m_›î™d_cﬁÀ˘‹
.
	`add_p‹t
(
ö_p‹ts
,
out_p‹ts
,
cu_£ts
);

184 
ö_p‹ts
.
	`˛ór
(),
out_p‹ts
.˛ór(),
cu_£ts
.clear();

187 
m_›î™d_cﬁÀ˘‹
.
	`öô
–
m_c⁄fig
->
gpgpu_num_ªg_b™ks
, 
this
 );

190 
m_num_fun˘i⁄_unôs
 = 
m_c⁄fig
->
gpgpu_num_•_unôs
 + m_c⁄fig->
gpgpu_num_sfu_unôs
 + 1;

196 
k
 = 0; k < 
m_c⁄fig
->
gpgpu_num_•_unôs
; k++) {

197 
m_fu
.
	`push_back
(
√w
 
	`•_unô
–&
m_pùñöe_ªg
[
EX_WB
], 
m_c⁄fig
 ));

198 
m_di•©ch_p‹t
.
	`push_back
(
ID_OC_SP
);

199 
m_issue_p‹t
.
	`push_back
(
OC_EX_SP
);

202 
k
 = 0; k < 
m_c⁄fig
->
gpgpu_num_sfu_unôs
; k++) {

203 
m_fu
.
	`push_back
(
√w
 
	`sfu
–&
m_pùñöe_ªg
[
EX_WB
], 
m_c⁄fig
 ));

204 
m_di•©ch_p‹t
.
	`push_back
(
ID_OC_SFU
);

205 
m_issue_p‹t
.
	`push_back
(
OC_EX_SFU
);

208 
m_ld°_unô
 = 
√w
 
	`ld°_unô
–
m_i˙t
, 
m_mem_„tch_Æloˇt‹
, 
this
, &
m_›î™d_cﬁÀ˘‹
, 
m_sc‹ebﬂrd
, 
c⁄fig
, 
mem_c⁄fig
, 
°©s
, 
shadî_id
, 
çc_id
 );

209 
m_fu
.
	`push_back
(
m_ld°_unô
);

210 
m_di•©ch_p‹t
.
	`push_back
(
ID_OC_MEM
);

211 
m_issue_p‹t
.
	`push_back
(
OC_EX_MEM
);

213 
	`as£π
(
m_num_fun˘i⁄_unôs
 =
m_fu
.
	`size
(Ë
™d
 m_fu.size(Ë=
m_di•©ch_p‹t
.size(Ë™d m_fu.size(Ë=
m_issue_p‹t
.size());

216 
num_ªsu…_bus
 = 
c⁄fig
->
pùe_widths
[
EX_WB
];

217 
i
=0; i<
num_ªsu…_bus
; i++){

218 
this
->
m_ªsu…_bus
.
	`push_back
(
√w
 
°d
::
bô£t
<
MAX_ALU_LATENCY
>());

221 
m_œ°_ö°_gpu_sim_cy˛e
 = 0;

222 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
 = 0;

223 
	}
}

225 
	gshadî_c‹e_˘x
::
	$ªöô
(
°¨t_thªad
, 
íd_thªad
, 
boﬁ
 
ª£t_nŸ_com∂ëed
 )

227 if–
ª£t_nŸ_com∂ëed
 ) {

228 
m_nŸ_com∂ëed
 = 0;

229 
m_a˘ive_thªads
.
	`ª£t
();

231 
i
 = 
°¨t_thªad
; i<
íd_thªad
; i++) {

232 
m_thªadSèã
[
i
].
n_ö¢
 = 0;

233 
m_thªadSèã
[
i
].
m_˘a_id
 = -1;

235 
i
 = 
°¨t_thªad
 / 
m_c⁄fig
->
w¨p_size
; i < 
íd_thªad
 / m_config->warp_size; ++i) {

236 
m_w¨p
[
i
].
	`ª£t
();

237 
m_simt_°ack
[
i
]->
	`ª£t
();

239 
	}
}

241 
	gshadî_c‹e_˘x
::
	$öô_w¨ps
–
˘a_id
, 
°¨t_thªad
, 
íd_thªad
 )

243 
addªss_ty≥
 
°¨t_pc
 = 
	`√xt_pc
(
°¨t_thªad
);

244 i‡(
m_c⁄fig
->
modñ
 =
POST_DOMINATOR
) {

245 
°¨t_w¨p
 = 
°¨t_thªad
 / 
m_c⁄fig
->
w¨p_size
;

246 
íd_w¨p
 = 
íd_thªad
 / 
m_c⁄fig
->
w¨p_size
 + ((end_thread % m_config->warp_size)? 1 : 0);

247 
i
 = 
°¨t_w¨p
; i < 
íd_w¨p
; ++i) {

248 
n_a˘ive
=0;

249 
simt_mask_t
 
a˘ive_thªads
;

250 
t
 = 0;Å < 
m_c⁄fig
->
w¨p_size
;Å++) {

251 
hwtid
 = 
i
 * 
m_c⁄fig
->
w¨p_size
 + 
t
;

252 i‡–
hwtid
 < 
íd_thªad
 ) {

253 
n_a˘ive
++;

254 
	`as£π
–!
m_a˘ive_thªads
.
	`ã°
(
hwtid
) );

255 
m_a˘ive_thªads
.
	`£t
–
hwtid
 );

256 
a˘ive_thªads
.
	`£t
(
t
);

259 
m_simt_°ack
[
i
]->
	`œunch
(
°¨t_pc
,
a˘ive_thªads
);

260 
m_w¨p
[
i
].
	`öô
(
°¨t_pc
,
˘a_id
,i,
a˘ive_thªads
);

261 
m_nŸ_com∂ëed
 +
n_a˘ive
;

264 
	}
}

267 
addªss_ty≥
 
	gshadî_c‹e_˘x
::
	$√xt_pc
–
tid
 ) const

269 if–
tid
 == -1 )

271 
±x_thªad_öfo
 *
the_thªad
 = 
m_thªad
[
tid
];

272 i‡–
the_thªad
 =
NULL
 )

274  
the_thªad
->
	`gë_pc
();

275 
	}
}

277 
	ggpgpu_sim
::
	$gë_pdom_°ack_t›_öfo
–
sid
, 
tid
, *
pc
, *
Ωc
 )

279 
˛u°î_id
 = 
m_shadî_c⁄fig
->
	`sid_to_˛u°î
(
sid
);

280 
m_˛u°î
[
˛u°î_id
]->
	`gë_pdom_°ack_t›_öfo
(
sid
,
tid
,
pc
,
Ωc
);

281 
	}
}

283 
	gshadî_c‹e_˘x
::
	$gë_pdom_°ack_t›_öfo
–
tid
, *
pc
, *
Ωc
 ) const

285 
w¨p_id
 = 
tid
/
m_c⁄fig
->
w¨p_size
;

286 
m_simt_°ack
[
w¨p_id
]->
	`gë_pdom_°ack_t›_öfo
(
pc
,
Ωc
);

287 
	}
}

289 
	gshadî_c‹e_°©s
::
	$¥öt
–
FILE
* 
fout
 ) const

291 
icou¡_u¨ch
=0;

292 
i
=0; i < 
m_c⁄fig
->
	`num_shadî
(); i++) {

293 
icou¡_u¨ch
 +
m_num_sim_ö¢
[
i
];

295 
	`Ârötf
(
fout
,"gpgpu_n_tŸ_icou¡ = %u\n", 
icou¡_u¨ch
);

296 
	`Ârötf
(
fout
,"gpgpu_n_°Æl_shd_mem = %d\n", 
gpgpu_n_°Æl_shd_mem
 );

297 
	`Ârötf
(
fout
,"gpgpu_n_mem_ªad_loˇ»%d\n", 
gpgpu_n_mem_ªad_loˇl
);

298 
	`Ârötf
(
fout
,"gpgpu_n_mem_wrôe_loˇ»%d\n", 
gpgpu_n_mem_wrôe_loˇl
);

299 
	`Ârötf
(
fout
,"gpgpu_n_mem_ªad_globÆ = %d\n", 
gpgpu_n_mem_ªad_globÆ
);

300 
	`Ârötf
(
fout
,"gpgpu_n_mem_wrôe_globÆ = %d\n", 
gpgpu_n_mem_wrôe_globÆ
);

301 
	`Ârötf
(
fout
,"gpgpu_n_mem_ãxtuª = %d\n", 
gpgpu_n_mem_ãxtuª
);

302 
	`Ârötf
(
fout
,"gpgpu_n_mem_c⁄° = %d\n", 
gpgpu_n_mem_c⁄°
);

315 
	`Ârötf
(
fout
, "gpgpu_n_lﬂd_ö¢ = %d\n", 
gpgpu_n_lﬂd_ö¢
);

316 
	`Ârötf
(
fout
, "gpgpu_n_°‹e_ö¢ = %d\n", 
gpgpu_n_°‹e_ö¢
);

317 
	`Ârötf
(
fout
, "gpgpu_n_shmem_ö¢ = %d\n", 
gpgpu_n_shmem_ö¢
);

318 
	`Ârötf
(
fout
, "gpgpu_n_ãx_ö¢ = %d\n", 
gpgpu_n_ãx_ö¢
);

319 
	`Ârötf
(
fout
, "gpgpu_n_c⁄°_mem_ö¢ = %d\n", 
gpgpu_n_c⁄°_ö¢
);

320 
	`Ârötf
(
fout
, "gpgpu_n_∑øm_mem_ö¢ = %d\n", 
gpgpu_n_∑øm_ö¢
);

322 
	`Ârötf
(
fout
, "gpgpu_n_shmem_bkc⁄Êi˘ = %d\n", 
gpgpu_n_shmem_bkc⁄Êi˘
);

323 
	`Ârötf
(
fout
, "gpgpu_n_ˇche_bkc⁄Êi˘ = %d\n", 
gpgpu_n_ˇche_bkc⁄Êi˘
);

325 
	`Ârötf
(
fout
, "gpgpu_n_öåaw¨p_mshr_mîgê%d\n", 
gpgpu_n_öåaw¨p_mshr_mîge
);

326 
	`Ârötf
(
fout
, "gpgpu_n_cmem_p‹tc⁄Êi˘ = %d\n", 
gpgpu_n_cmem_p‹tc⁄Êi˘
);

328 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[c_mem][bk_c⁄f] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
C_MEM
][
BK_CONF
]);

329 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[c_mem][mshr_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
C_MEM
][
MSHR_RC_FAIL
]);

330 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[c_mem][i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
C_MEM
][
ICNT_RC_FAIL
]);

331 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[t_mem][mshr_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
T_MEM
][
MSHR_RC_FAIL
]);

332 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[t_mem][i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
T_MEM
][
ICNT_RC_FAIL
]);

333 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[s_mem][bk_c⁄f] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
S_MEM
][
BK_CONF
]);

334 
	`Ârötf
(
fout
, "gpgpu_stall_shd_mem[gl_mem][bk_conf] = %d\n",

335 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_LD
][
BK_CONF
] +

336 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_ST
][
BK_CONF
] +

337 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_LD
][
BK_CONF
] +

338 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_ST
][
BK_CONF
]

340 
	`Ârötf
(
fout
, "gpgpu_stall_shd_mem[gl_mem][coal_stall] = %d\n",

341 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_LD
][
COAL_STALL
] +

342 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_ST
][
COAL_STALL
] +

343 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_LD
][
COAL_STALL
] +

344 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_ST
][
COAL_STALL
]

346 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_ld][mshr_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_LD
][
MSHR_RC_FAIL
]);

347 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_ld][i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_LD
][
ICNT_RC_FAIL
]);

348 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_ld][wb_i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_LD
][
WB_ICNT_RC_FAIL
]);

349 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_ld][wb_r§v_Áû] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_LD
][
WB_CACHE_RSRV_FAIL
]);

350 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_°][mshr_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_ST
][
MSHR_RC_FAIL
]);

351 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_°][i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_ST
][
ICNT_RC_FAIL
]);

352 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_°][wb_i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_ST
][
WB_ICNT_RC_FAIL
]);

353 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[g_mem_°][wb_r§v_Áû] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
G_MEM_ST
][
WB_CACHE_RSRV_FAIL
]);

354 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_ld][mshr_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_LD
][
MSHR_RC_FAIL
]);

355 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_ld][i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_LD
][
ICNT_RC_FAIL
]);

356 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_ld][wb_i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_LD
][
WB_ICNT_RC_FAIL
]);

357 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_ld][wb_r§v_Áû] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_LD
][
WB_CACHE_RSRV_FAIL
]);

358 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_°][mshr_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_ST
][
MSHR_RC_FAIL
]);

359 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_°][i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_ST
][
ICNT_RC_FAIL
]);

360 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_ld][wb_i˙t_rc] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_ST
][
WB_ICNT_RC_FAIL
]);

361 
	`Ârötf
(
fout
, "gpgpu_°Æl_shd_mem[l_mem_ld][wb_r§v_Áû] = %d\n", 
gpu_°Æl_shd_mem_bªakdown
[
L_MEM_ST
][
WB_CACHE_RSRV_FAIL
]);

363 
	`Ârötf
(
fout
, "gpu_ªg_b™k_c⁄Êi˘_°Æl†%d\n", 
gpu_ªg_b™k_c⁄Êi˘_°Æls
);

365 
	`Ârötf
(
fout
, "Warp Occupancy Distribution:\n");

366 
	`Ârötf
(
fout
, "SèŒ:%d\t", 
shadî_cy˛e_di°ro
[2]);

367 
	`Ârötf
(
fout
, "W0_IdÀ:%d\t", 
shadî_cy˛e_di°ro
[0]);

368 
	`Ârötf
(
fout
, "W0_Sc‹ebﬂrd:%d", 
shadî_cy˛e_di°ro
[1]);

369 
i
 = 3; i < 
m_c⁄fig
->
w¨p_size
 + 3; i++)

370 
	`Ârötf
(
fout
, "\tW%d:%d", 
i
-2, 
shadî_cy˛e_di°ro
[i]);

371 
	`Ârötf
(
fout
, "\n");

372 
	}
}

374 
	gshadî_c‹e_°©s
::
	$visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 )

377 
	`gz¥ötf
(
visuÆizî_fûe
, "WarpDivergenceBreakdown:");

378 
tŸÆ
=0;

379 
cf
 = (
m_c⁄fig
->
gpgpu_w¨pdi°ro_shadî
==-1)?m_c⁄fig->
	`num_shadî
():1;

380 
	`gz¥ötf
(
visuÆizî_fûe
, " %d", (
shadî_cy˛e_di°ro
[0] - 
œ°_shadî_cy˛e_di°ro
[0]Ë/ 
cf
 );

381 
	`gz¥ötf
(
visuÆizî_fûe
, " %d", (
shadî_cy˛e_di°ro
[1] - 
œ°_shadî_cy˛e_di°ro
[1]Ë/ 
cf
 );

382 
	`gz¥ötf
(
visuÆizî_fûe
, " %d", (
shadî_cy˛e_di°ro
[2] - 
œ°_shadî_cy˛e_di°ro
[2]Ë/ 
cf
 );

383 
i
=0; i<
m_c⁄fig
->
w¨p_size
+3; i++) {

384 i‡–
i
>=3 ) {

385 
tŸÆ
 +(
shadî_cy˛e_di°ro
[
i
] - 
œ°_shadî_cy˛e_di°ro
[i]);

386 i‡–((
i
-3Ë% (
m_c⁄fig
->
w¨p_size
/8)) == ((m_config->warp_size/8)-1) ) {

387 
	`gz¥ötf
(
visuÆizî_fûe
, " %d", 
tŸÆ
 / 
cf
 );

388 
tŸÆ
=0;

391 
œ°_shadî_cy˛e_di°ro
[
i
] = 
shadî_cy˛e_di°ro
[i];

393 
	`gz¥ötf
(
visuÆizî_fûe
,"\n");

396 
	`gz¥ötf
(
visuÆizî_fûe
, "gpgpu_n_ˇche_bkc⁄Êi˘: %d\n", 
gpgpu_n_ˇche_bkc⁄Êi˘
);

397 
	`gz¥ötf
(
visuÆizî_fûe
, "gpgpu_n_shmem_bkc⁄Êi˘: %d\n", 
gpgpu_n_shmem_bkc⁄Êi˘
);

401 
	`gz¥ötf
(
visuÆizî_fûe
, "shaderinsncount: ");

402 
i
=0;i<
m_c⁄fig
->
	`num_shadî
();i++)

403 
	`gz¥ötf
(
visuÆizî_fûe
, "%u ", 
m_num_sim_ö¢
[
i
] );

404 
	`gz¥ötf
(
visuÆizî_fûe
, "\n");

406 
	`gz¥ötf
(
visuÆizî_fûe
, "shaderwarpinsncount: ");

407 
i
=0;i<
m_c⁄fig
->
	`num_shadî
();i++)

408 
	`gz¥ötf
(
visuÆizî_fûe
, "%u ", 
m_num_sim_wö¢
[
i
] );

409 
	`gz¥ötf
(
visuÆizî_fûe
, "\n");

411 
	`gz¥ötf
(
visuÆizî_fûe
, "shaderwarpdiv: ");

412 
i
=0;i<
m_c⁄fig
->
	`num_shadî
();i++)

413 
	`gz¥ötf
(
visuÆizî_fûe
, "%u ", 
m_n_divîge
[
i
] );

414 
	`gz¥ötf
(
visuÆizî_fûe
, "\n");

415 
	}
}

417 
	#PROGRAM_MEM_START
 0xF0000000

	)

420 
	gshadî_c‹e_˘x
::
	$decode
()

422 if–
m_ö°_„tch_buf„r
.
m_vÆid
 ) {

424 
addªss_ty≥
 
pc
 = 
m_ö°_„tch_buf„r
.
m_pc
;

425 c⁄° 
w¨p_ö°_t
* 
pI1
 = 
	`±x_„tch_ö°
(
pc
);

426 
m_w¨p
[
m_ö°_„tch_buf„r
.
m_w¨p_id
].
	`ibuf„r_fûl
(0,
pI1
);

427 
m_w¨p
[
m_ö°_„tch_buf„r
.
m_w¨p_id
].
	`öc_ö°_ö_pùñöe
();

428 if–
pI1
 ) {

429 c⁄° 
w¨p_ö°_t
* 
pI2
 = 
	`±x_„tch_ö°
(
pc
+
pI1
->
isize
);

430 if–
pI2
 ) {

431 
m_w¨p
[
m_ö°_„tch_buf„r
.
m_w¨p_id
].
	`ibuf„r_fûl
(1,
pI2
);

432 
m_w¨p
[
m_ö°_„tch_buf„r
.
m_w¨p_id
].
	`öc_ö°_ö_pùñöe
();

435 
m_ö°_„tch_buf„r
.
m_vÆid
 = 
Ál£
;

437 
	}
}

439 
	gshadî_c‹e_˘x
::
	$„tch
()

441 if–!
m_ö°_„tch_buf„r
.
m_vÆid
 ) {

444  
i
=0; i < 
m_c⁄fig
->
max_w¨ps_≥r_shadî
; i++ ) {

445 
w¨p_id
 = (
m_œ°_w¨p_„tched
+1+
i
Ë% 
m_c⁄fig
->
max_w¨ps_≥r_shadî
;

448 if–
m_w¨p
[
w¨p_id
].
	`h¨dw¨e_d⁄e
(Ë&& !
m_sc‹ebﬂrd
->
	`≥ndögWrôes
(w¨p_idË&& !m_w¨p[w¨p_id].
	`d⁄e_exô
() ) {

449 
boﬁ
 
did_exô
=
Ál£
;

450  
t
=0;Å<
m_c⁄fig
->
w¨p_size
;t++) {

451 
tid
=
w¨p_id
*
m_c⁄fig
->
w¨p_size
+
t
;

452 if–
m_thªadSèã
[
tid
].
m_a˘ive
 =
åue
 ) {

453 
m_thªadSèã
[
tid
].
m_a˘ive
 = 
Ál£
;

454 
˘a_id
 = 
m_w¨p
[
w¨p_id
].
	`gë_˘a_id
();

455 
	`ªgi°î_˘a_thªad_exô
(
˘a_id
);

456 
m_nŸ_com∂ëed
 -= 1;

457 
m_a˘ive_thªads
.
	`ª£t
(
tid
);

458 
	`as£π
–
m_thªad
[
tid
]!
NULL
 );

459 
did_exô
=
åue
;

462 if–
did_exô
 )

463 
m_w¨p
[
w¨p_id
].
	`£t_d⁄e_exô
();

467 if–!
m_w¨p
[
w¨p_id
].
	`fun˘i⁄Æ_d⁄e
(Ë&& !m_w¨p[w¨p_id].
	`imiss_≥ndög
(Ë&& m_w¨p[w¨p_id].
	`ibuf„r_em±y
() ) {

468 
addªss_ty≥
 
pc
 = 
m_w¨p
[
w¨p_id
].
	`gë_pc
();

469 
addªss_ty≥
 
µc
 = 
pc
 + 
PROGRAM_MEM_START
;

470 
nbyãs
=16;

471 
off£t_ö_block
 = 
pc
 & (
m_c⁄fig
->
m_L1I_c⁄fig
.
	`gë_löe_sz
()-1);

472 if–(
off£t_ö_block
+
nbyãs
Ë> 
m_c⁄fig
->
m_L1I_c⁄fig
.
	`gë_löe_sz
() )

473 
nbyãs
 = (
m_c⁄fig
->
m_L1I_c⁄fig
.
	`gë_löe_sz
()-
off£t_ö_block
);

477 
mem_ac˚ss_t
 
	`acc
(
INST_ACC_R
,
µc
,
nbyãs
,
Ál£
);

478 
mem_„tch
 *
mf
 = 
√w
 
	`mem_„tch
(
acc
,

479 
NULL
 ,

480 
READ_PACKET_SIZE
,

481 
w¨p_id
,

482 
m_sid
,

483 
m_çc
,

484 
m_mem‹y_c⁄fig
 );

485 
°d
::
li°
<
ˇche_evít
> 
evíts
;

486 
ˇche_ªque°_°©us
 
°©us
 = 
m_L1I
->
	`ac˚ss
–(
√w_addr_ty≥
)
µc
, 
mf
, 
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
,
evíts
);

487 if–
°©us
 =
MISS
 ) {

488 
m_œ°_w¨p_„tched
=
w¨p_id
;

489 
m_w¨p
[
w¨p_id
].
	`£t_imiss_≥ndög
();

490 
m_w¨p
[
w¨p_id
].
	`£t_œ°_„tch
(
gpu_sim_cy˛e
);

491 } if–
°©us
 =
HIT
 ) {

492 
m_œ°_w¨p_„tched
=
w¨p_id
;

493 
m_ö°_„tch_buf„r
 = 
	`i„tch_buf„r_t
(
pc
,
nbyãs
,
w¨p_id
);

494 
m_w¨p
[
w¨p_id
].
	`£t_œ°_„tch
(
gpu_sim_cy˛e
);

495 
dñëe
 
mf
;

497 
m_œ°_w¨p_„tched
=
w¨p_id
;

498 
	`as£π
–
°©us
 =
RESERVATION_FAIL
 );

499 
dñëe
 
mf
;

506 
m_L1I
->
	`cy˛e
();

508 if–
m_L1I
->
	`ac˚ss_ªady
() ) {

509 
mem_„tch
 *
mf
 = 
m_L1I
->
	`√xt_ac˚ss
();

510 
m_w¨p
[
mf
->
	`gë_wid
()].
	`˛ór_imiss_≥ndög
();

511 
dñëe
 
mf
;

513 
	}
}

515 
	gshadî_c‹e_˘x
::
	$func_exec_ö°
–
w¨p_ö°_t
 &
ö°
 )

519 
	`execuã_w¨p_ö°_t
(
ö°
, 
m_c⁄fig
->
w¨p_size
);

520 if–
ö°
.
	`is_lﬂd
(Ë|| in°.
	`is_°‹e
() )

521 
ö°
.
	`gíî©e_mem_ac˚s£s
();

522 
	}
}

524 ˛as†
	cKAIN_w¨p_ö°


526 
	mpublic
:

527 
w¨p_ö°_t
 *
ö°
;

528 
simt_mask_t
 *
	mthªad_d⁄e
;

529 
addr_ve˘‹_t
 *
	m√xt_pc
;

530 
	mªc⁄vîgí˚_pc
;

531 
	$KAIN_w¨p_ö°
()

533 
ö°
 = 
√w
 
w¨p_ö°_t
;

534 
thªad_d⁄e

√w
 
simt_mask_t
;

535 
√xt_pc
 = 
√w
 
addr_ve˘‹_t
;

537 ~
	$KAIN_w¨p_ö°
()

539 
dñëe
 
ö°
;

540 
dñëe
 
thªad_d⁄e
;

541 
dñëe
 
√xt_pc
;

542 
	}
}

544 
˛ass
 
KAIN_w¨p_ö°
 **
block_w¨pid
[299999][100];

548 
˛ass
 
KAIN_w¨p_ö°
 **
Rubbish
[
Clu°î_Thªad_Num
];

549 vﬁ©ûê
Rubbish_P
[
Clu°î_Thªad_Num
];

550 vﬁ©ûê
Rubbish_C
[
Clu°î_Thªad_Num
];

555 vﬁ©ûê
	gCou¡_Block_C
[
P_C_size
];

556 vﬁ©ûê
Cou¡_Block_P
[
P_C_size
];

562 vﬁ©ûê
	gCuºít_c⁄sume
[
P_C_size
];

563 
	gshadî_c‹e_˘x
::
	$issue_w¨p
–
ªgi°î_£t
& 
pùe_ªg_£t
, c⁄° 
w¨p_ö°_t
* 
√xt_ö°
, c⁄° 
a˘ive_mask_t
 &
a˘ive_mask
, 
w¨p_id
 )

565 
w¨p_ö°_t
** 
pùe_ªg
 = 
pùe_ªg_£t
.
	`gë_‰ì
();

566 
	`as£π
(
pùe_ªg
);

568 
m_w¨p
[
w¨p_id
].
	`ibuf„r_‰ì
();

569 
	`as£π
(
√xt_ö°
->
	`vÆid
());

575  
r
=0;Ñ < 4;Ñ++)

576 (*
pùe_ªg
)->
out
[
r
] = 
√xt_ö°
->out[r];

579 
m_°©s
->
shadî_cy˛e_di°ro
[2+
a˘ive_mask
.
	`cou¡
()]++;

582 
m_sc‹ebﬂrd
->
	`ª£rveRegi°îs
(
w¨p_id
,*
pùe_ªg
);

586 
m_w¨p
[
w¨p_id
].
	`£t_√xt_pc
(
√xt_ö°
->
pc
 +Çext_ö°->
isize
);

589 
tid
 = 
m_c⁄fig
->
w¨p_size
*
w¨p_id
+0;

591 
BlockID
;

592 
W¨pID
;

593 
m_thªad
[
tid
]->
	`KAIN_gë_˘a_num
(
m_c⁄fig
->
w¨p_size
,
√xt_ö°
->
pc
,&
BlockID
,&
W¨pID
);

594 
w¨p_ID_Æl
 = 
BlockID
 * 
KAIN_W¨p_cou¡s
 + 
W¨pID
;

598 if(
Cuºít_c⁄sume
[
w¨p_ID_Æl
]<=0)

601 if(
Cou¡_Block_C
[
w¨p_ID_Æl
] < 
Cou¡_Block_P
[warp_ID_all])

603 
Cuºít_c⁄sume
[
w¨p_ID_Æl
] = 
Cou¡_Block_P
[w¨p_ID_Æl]- 
Cou¡_Block_C
[warp_ID_all];

606 
	`¥ötf
("Clu°î %d,¶ì∞öÖîfomøn˚,Block i†%d, W¨∞i†%d\n",
ThªadID
,
BlockID
,
W¨pID
);

607 
	`fÊush
(
°dout
);

608 
	`¶ìp
(1);

610 
ödex_√w
 = 
Cou¡_Block_C
[
w¨p_ID_Æl
];

613 
ödex

ödex_√w
 % (
KAIN_ö°ru˘i⁄_buf„r
*2);

614 
ödex
 = index / 
KAIN_ö°ru˘i⁄_buf„r
;

615 
ödex_√w
 = index_√w % (
KAIN_ö°ru˘i⁄_buf„r
);

644 
˛ass
 
KAIN_w¨p_ö°
 &
this_ö°
 = 
block_w¨pid
[
BlockID
][
W¨pID
][
ödex
][
ödex_√w
];

650 (**
pùe_ªg
).
	`w¨p_ö°_c›y
(*(
this_ö°
.
ö°
));

652 
w¨p_ö°_t
 &
ö°
 = **
pùe_ªg
;

656 
ö°
.
	`KAIN_c›y_issue
–
w¨p_id
, 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
 );

658 
wtid
 = 
w¨p_id
 * 
m_c⁄fig
->
w¨p_size
;

659 
simt_mask_t
 
thªad_d⁄e
 = *(
this_ö°
.thread_done);

660 
addr_ve˘‹_t
 
	`√xt_pc
(32,0);

661 
√xt_pc
 = *(
this_ö°
.next_pc);

663 (**
pùe_ªg
).
ªc⁄vîgí˚_pc
 = (
this_ö°
.reconvergence_pc);

665 if(
thªad_d⁄e
.
	`cou¡
()>0)

666 
i
 = 0; i < 
m_c⁄fig
->
w¨p_size
;i++)

668 if(
thªad_d⁄e
[
i
]){

670 
m_thªad
[
wtid
+
i
]->
	`£t_d⁄e
();

671 
m_thªad
[
wtid
+
i
]->
	`exôC‹e
();

676  
t
=0;Å < 
m_c⁄fig
->
w¨p_size
;Å++ ) {

677 if–
ö°
.
	`a˘ive
(
t
) ) {

678 
tid
=
m_c⁄fig
->
w¨p_size
*
w¨p_id
+
t
;

679 if–
ö°
.
	`has_ˇŒback
(
t
) )

681 
m_w¨p
[
w¨p_id
].
	`öc_n_©omic
();

683 i‡(
ö°
.
•a˚
.
	`is_loˇl
(Ë&& (ö°.
	`is_lﬂd
(Ë|| in°.
	`is_°‹e
())) {

684 
√w_addr_ty≥
 
loˇœddrs
[
MAX_ACCESSES_PER_INSN_PER_THREAD
];

685 
num_addrs
;

686 
num_addrs
 = 
	`å™¶©e_loˇl_memaddr
(
ö°
.
	`gë_addr
(
t
), 
tid
, 
m_c⁄fig
->
n_simt_˛u°îs
*m_c⁄fig->
n_simt_c‹es_≥r_˛u°î
,

687 
ö°
.
d©a_size
, (
√w_addr_ty≥
*Ë
loˇœddrs
 );

689 
ö°
.
	`£t_addr
(
t
, (
√w_addr_ty≥
*Ë
loˇœddrs
, 
num_addrs
);

692 if–
	`±x_thªad_d⁄e
(
tid
) ) {

694 
m_w¨p
[
w¨p_id
].
	`£t_com∂ëed
(
t
);

695 
m_w¨p
[
w¨p_id
].
	`ibuf„r_Êush
();

699 if–
ö°
.
	`is_lﬂd
(Ë|| in°.
	`is_°‹e
() )

702 
ö°
.
	`gíî©e_mem_ac˚s£s
();

706 
m_simt_°ack
[
w¨p_id
]->
	`upd©e
(
thªad_d⁄e
,
√xt_pc
,(**
pùe_ªg
).
ªc⁄vîgí˚_pc
);

707 
Cou¡_Block_C
[
w¨p_ID_Æl
]++;

708 
Cuºít_c⁄sume
[
w¨p_ID_Æl
]--;

756 if–
√xt_ö°
->
›
 =
BARRIER_OP
 )

757 
m_b¨rõrs
.
	`w¨p_ªaches_b¨rõr
(
m_w¨p
[
w¨p_id
].
	`gë_˘a_id
(),warp_id);

758 if–
√xt_ö°
->
›
 =
MEMORY_BARRIER_OP
 )

759 
m_w¨p
[
w¨p_id
].
	`£t_memb¨
();

764 
	}
}

767 
timevÆ
 
	gbegö1
[20];

768 
timevÆ
 
	gíd1
[20];

770 
	$KAIN_£t_begö1
(
ID
)

772 
	`gëtimeofday
(&
begö1
[
ID
],
NULL
);

773 
	}
}

774 
	$KAIN_£t_íd1
(
ID
)

776 
	`gëtimeofday
(&
íd1
[
ID
],
NULL
);

777 
	}
}

778 
	$KAIN_time1
(
ID
)

780 
timeu£
 = 1000000*(
íd1
[
ID
].
tv_£c
-
begö1
[ID].tv_£c)+íd1[ID].
tv_u£c
-begin1[ID].tv_usec;

781 
time
 = 
timeu£
 / 1000000.0;

782  
time
;

783 
	}
}

784 
	gwb_time
[20];

785 
	gex_time
[20];

786 
	gªad_time
[20];

787 
	gissue_time
[20];

788 
	gdecode_time
[20];

789 
	g„tch_time
[20];

793 
	gshadî_c‹e_˘x
::
	$issue
(){

795 
i
 = 0; i < 
scheduÀrs
.
	`size
(); i++) {

796 
scheduÀrs
[
i
].
	`cy˛e
();

800 
	}
}

802 
	gshd_w¨p_t
& 
	gscheduÀr_unô
::
	$w¨p
(
i
){

803  (*
m_w¨p
)[
i
];

804 
	}
}

806 
	gscheduÀr_unô
::
	$cy˛e
()

808 
boﬁ
 
vÆid_ö°
 = 
Ál£
;

809 
boﬁ
 
ªady_ö°
 = 
Ál£
;

810 
boﬁ
 
issued_ö°
 = 
Ál£
;

812  
i
=0; i < 
su≥rvi£d_w¨ps
.
	`size
(); i++ ) {

813 
su≥rvi£d_id
 = (
m_œ°_sup_id_issued
+1+
i
Ë% 
su≥rvi£d_w¨ps
.
	`size
();

814 
w¨p_id
 = 
su≥rvi£d_w¨ps
[
su≥rvi£d_id
];

815 
checked
=0;

816 
issued
=0;

817 
max_issue
 = 
m_shadî
->
m_c⁄fig
->
gpgpu_max_ö¢_issue_≥r_w¨p
;

818  !
	`w¨p
(
w¨p_id
).
	`waôög
(Ë&& !w¨p(w¨p_id).
	`ibuf„r_em±y
(Ë&& (
checked
 < 
max_issue
Ë&& (checked <
issued
) && (issued < max_issue) ) {

819 c⁄° 
w¨p_ö°_t
 *
pI
 = 
	`w¨p
(
w¨p_id
).
	`ibuf„r_√xt_ö°
();

820 
boﬁ
 
vÆid
 = 
	`w¨p
(
w¨p_id
).
	`ibuf„r_√xt_vÆid
();

821 
boﬁ
 
w¨p_ö°_issued
 = 
Ál£
;

822 
pc
,
Ωc
;

823 
m_simt_°ack
[
w¨p_id
]->
	`gë_pdom_°ack_t›_öfo
(&
pc
,&
Ωc
);

824 if–
pI
 ) {

825 
	`as£π
(
vÆid
);

826 if–
pc
 !
pI
->pc ) {

828 
	`w¨p
(
w¨p_id
).
	`£t_√xt_pc
(
pc
);

829 
	`w¨p
(
w¨p_id
).
	`ibuf„r_Êush
();

831 
vÆid_ö°
 = 
åue
;

832 i‡–!
m_sc‹ebﬂrd
->
	`checkCﬁlisi⁄
(
w¨p_id
, 
pI
) ) {

833 
ªady_ö°
 = 
åue
;

834 c⁄° 
a˘ive_mask_t
 &
a˘ive_mask
 = 
m_simt_°ack
[
w¨p_id
]->
	`gë_a˘ive_mask
();

835 
	`as£π
–
	`w¨p
(
w¨p_id
).
	`ö°_ö_pùñöe
() );

836 i‡–(
pI
->
›
 =
LOAD_OP
Ë|| (pI->› =
STORE_OP
Ë|| (pI->› =
MEMORY_BARRIER_OP
) ) {

837 if–
m_mem_out
->
	`has_‰ì
() ) {

838 
m_shadî
->
	`issue_w¨p
(*
m_mem_out
,
pI
,
a˘ive_mask
,
w¨p_id
);

839 
issued
++;

840 
issued_ö°
=
åue
;

841 
w¨p_ö°_issued
 = 
åue
;

844 
boﬁ
 
•_pùe_avaû
 = 
m_•_out
->
	`has_‰ì
();

845 
boﬁ
 
sfu_pùe_avaû
 = 
m_sfu_out
->
	`has_‰ì
();

846 if–
•_pùe_avaû
 && (
pI
->
›
 !
SFU_OP
) ) {

848 
m_shadî
->
	`issue_w¨p
(*
m_•_out
,
pI
,
a˘ive_mask
,
w¨p_id
);

849 
issued
++;

850 
issued_ö°
=
åue
;

851 
w¨p_ö°_issued
 = 
åue
;

852 } i‡–(
pI
->
›
 =
SFU_OP
Ë|| (pI->› =
ALU_SFU_OP
) ) {

853 if–
sfu_pùe_avaû
 ) {

854 
m_shadî
->
	`issue_w¨p
(*
m_sfu_out
,
pI
,
a˘ive_mask
,
w¨p_id
);

855 
issued
++;

856 
issued_ö°
=
åue
;

857 
w¨p_ö°_issued
 = 
åue
;

863 } if–
vÆid
 ) {

865 
	`w¨p
(
w¨p_id
).
	`£t_√xt_pc
(
pc
);

866 
	`w¨p
(
w¨p_id
).
	`ibuf„r_Êush
();

868 if(
w¨p_ö°_issued
)

869 
	`w¨p
(
w¨p_id
).
	`ibuf„r_°ï
();

870 
checked
++;

872 i‡–
issued
 ) {

873 
m_œ°_sup_id_issued
=
su≥rvi£d_id
;

879 if–!
vÆid_ö°
 )

880 
m_°©s
->
shadî_cy˛e_di°ro
[0]++;

881 if–!
ªady_ö°
 )

882 
m_°©s
->
shadî_cy˛e_di°ro
[1]++;

883 if–!
issued_ö°
 )

884 
m_°©s
->
shadî_cy˛e_di°ro
[2]++;

885 
	}
}

887 
	gshadî_c‹e_˘x
::
	$ªad_›î™ds
()

889 
	}
}

891 
addªss_ty≥
 
	$cﬂÀs˚d_£gmít
(
addªss_ty≥
 
addr
, 
£gmít_size_lg2byãs
)

893  (
addr
 >> 
£gmít_size_lg2byãs
);

894 
	}
}

897 
	gshadî_c‹e_˘x
::
	$å™¶©e_loˇl_memaddr
–
addªss_ty≥
 
loˇœddr
, 
tid
, 
num_shadî
, 
d©asize
, 
√w_addr_ty≥
* 
å™¶©ed_addrs
 )

902 
addªss_ty≥
 
thªad_ba£
 = 0;

903 
max_c⁄cuºít_thªads
=0;

904 i‡(
m_c⁄fig
->
gpgpu_loˇl_mem_m≠
) {

917 
thªad_ba£
 = 4*(
kî√l_∑dded_thªads_≥r_˘a
 * (
m_sid
 + 
num_shadî
 * (
tid
 / kernel_padded_threads_per_cta))

918 + 
tid
 % 
kî√l_∑dded_thªads_≥r_˘a
);

919 
max_c⁄cuºít_thªads
 = 
kî√l_∑dded_thªads_≥r_˘a
 * 
kî√l_max_˘a_≥r_shadî
 * 
num_shadî
;

923 
thªad_ba£
 = 4*(
m_c⁄fig
->
n_thªad_≥r_shadî
 * 
m_sid
 + 
tid
);

924 
max_c⁄cuºít_thªads
 = 
num_shadî
 * 
m_c⁄fig
->
n_thªad_≥r_shadî
;

926 
	`as£π
–
thªad_ba£
 < 4 *
max_c⁄cuºít_thªads
 );

930 
num_ac˚s£s
 = 0;

932 if(
d©asize
 >= 4) {

934 
	`as£π
(
d©asize
%4 == 0);

935 
num_ac˚s£s
 = 
d©asize
/4;

936 
	`as£π
(
num_ac˚s£s
 <
MAX_ACCESSES_PER_INSN_PER_THREAD
);

937 
	`as£π
(
loˇœddr
%4 == 0);

938 
i
=0; i<
num_ac˚s£s
; i++) {

939 
addªss_ty≥
 
loˇl_w‹d
 = 
loˇœddr
/4 + 
i
;

940 
addªss_ty≥
 
löór_addªss
 = 
loˇl_w‹d
*
max_c⁄cuºít_thªads
*4 + 
thªad_ba£
 + 
LOCAL_GENERIC_START
;

941 
å™¶©ed_addrs
[
i
] = 
löór_addªss
;

945 
	`as£π
(
d©asize
 > 0);

946 
num_ac˚s£s
 = 1;

947 
addªss_ty≥
 
loˇl_w‹d
 = 
loˇœddr
/4;

948 
addªss_ty≥
 
loˇl_w‹d_off£t
 = 
loˇœddr
%4;

949 
	`as£π
–(
loˇœddr
+
d©asize
-1)/4 =
loˇl_w‹d
 );

950 
addªss_ty≥
 
löór_addªss
 = 
loˇl_w‹d
*
max_c⁄cuºít_thªads
*4 + 
loˇl_w‹d_off£t
 + 
thªad_ba£
 + 
LOCAL_GENERIC_START
;

951 
å™¶©ed_addrs
[0] = 
löór_addªss
;

953  
num_ac˚s£s
;

954 
	}
}

957 
	gshadî_c‹e_˘x
::
	$ã°_ªs_bus
(
œãncy
){

958 
i
=0; i<
num_ªsu…_bus
; i++){

959 if(!
m_ªsu…_bus
[
i
]->
	`ã°
(
œãncy
)){ i;}

962 
	}
}

964 
	gshadî_c‹e_˘x
::
	$execuã
()

966 
i
=0; i<
num_ªsu…_bus
; i++){

967 *(
m_ªsu…_bus
[
i
]) >>=1;

969  
n
=0;Ç < 
m_num_fun˘i⁄_unôs
;Ç++ ) {

970 
mu…ùlõr
 = 
m_fu
[
n
]->
	`˛ock_mu…ùlõr
();

971  
c
=0; c < 
mu…ùlõr
; c++ )

972 
m_fu
[
n
]->
	`cy˛e
();

973 
pùñöe_°age_«me_t
 
issue_p‹t
 = 
m_issue_p‹t
[
n
];

974 
ªgi°î_£t
& 
issue_ö°
 = 
m_pùñöe_ªg
[ 
issue_p‹t
 ];

975 
w¨p_ö°_t
** 
ªady_ªg
 = 
issue_ö°
.
	`gë_ªady
();

976 if–
issue_ö°
.
	`has_ªady
(Ë&& 
m_fu
[
n
]->
	`ˇn_issue
–**
ªady_ªg
 ) ) {

977 
boﬁ
 
scheduÀ_wb_now
 = !
m_fu
[
n
]->
	`°ÆœbÀ
();

978 
ªsbus
 = -1;

979 if–
scheduÀ_wb_now
 && (
ªsbus
=
	`ã°_ªs_bus
–(*
ªady_ªg
)->
œãncy
 ))!=-1 ) {

980 
	`as£π
–(*
ªady_ªg
)->
œãncy
 < 
MAX_ALU_LATENCY
 );

981 
m_ªsu…_bus
[
ªsbus
]->
	`£t
–(*
ªady_ªg
)->
œãncy
 );

982 
m_fu
[
n
]->
	`issue
–
issue_ö°
 );

983 } if–!
scheduÀ_wb_now
 ) {

984 
m_fu
[
n
]->
	`issue
–
issue_ö°
 );

990 
	}
}

992 
	gld°_unô
::
	$¥öt_ˇche_°©s
–
FILE
 *
Â
, & 
dl1_ac˚s£s
, & 
dl1_mis£s
 ) {

993 if–
m_L1D
 ) {

994 
m_L1D
->
	`¥öt
–
Â
, 
dl1_ac˚s£s
, 
dl1_mis£s
 );

996 
	}
}

998 
±hªad_muãx_t
 
KAIN_ö°ru˘i⁄_muãx
;

999 
	gshadî_c‹e_˘x
::
	$w¨p_ö°_com∂ëe
(c⁄° 
w¨p_ö°_t
 &
ö°
)

1002 
	`¥ötf
("[warp_inst_complete] uid=%u core=%u warp=%uÖc=%#x @Åime=%llu issued@%llu\n",

1003 
ö°
.
	`gë_uid
(), 
m_sid
, in°.
	`w¨p_id
(), in°.
pc
, 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
, in°.
	`gë_issue_cy˛e
());

1005 
m_°©s
->
m_num_sim_ö¢
[
m_sid
] +
ö°
.
	`a˘ive_cou¡
();

1006 
m_°©s
->
m_num_sim_wö¢
[
m_sid
]++;

1009 
	`±hªad_muãx_lock
(&
KAIN_ö°ru˘i⁄_muãx
);

1010 
m_gpu
->
gpu_sim_ö¢
 +
ö°
.
	`a˘ive_cou¡
();

1011 
	`±hªad_muãx_u∆ock
(&
KAIN_ö°ru˘i⁄_muãx
);

1014 
ö°
.
	`com∂ëed
(
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
);

1015 
	}
}

1017 
	gshadî_c‹e_˘x
::
	$wrôeback
()

1019 
w¨p_ö°_t
** 
¥eg
 = 
m_pùñöe_ªg
[
EX_WB
].
	`gë_ªady
();

1020 
w¨p_ö°_t
* 
pùe_ªg
 = (
¥eg
==
NULL
)? NULL:*preg;

1021  
¥eg
 
™d
 !
pùe_ªg
->
	`em±y
() ) {

1038 
m_›î™d_cﬁÀ˘‹
.
	`wrôeback
(*
pùe_ªg
);

1039 
w¨p_id
 = 
pùe_ªg
->
	`w¨p_id
();

1040 
m_sc‹ebﬂrd
->
	`ªÀa£Regi°îs
–
pùe_ªg
 );

1041 
m_w¨p
[
w¨p_id
].
	`dec_ö°_ö_pùñöe
();

1042 
	`w¨p_ö°_com∂ëe
(*
pùe_ªg
);

1043 
m_gpu
->
gpu_sim_ö¢_œ°_upd©e_sid
 = 
m_sid
;

1044 
m_gpu
->
gpu_sim_ö¢_œ°_upd©e
 = 
gpu_sim_cy˛e
;

1045 
m_œ°_ö°_gpu_sim_cy˛e
 = 
gpu_sim_cy˛e
;

1046 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
 = 
gpu_tŸ_sim_cy˛e
;

1047 
pùe_ªg
->
	`˛ór
();

1048 
¥eg
 = 
m_pùñöe_ªg
[
EX_WB
].
	`gë_ªady
();

1049 
pùe_ªg
 = (
¥eg
==
NULL
)? NULL:*preg;

1051 
	}
}

1053 
boﬁ
 
	gld°_unô
::
	$sh¨ed_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
)

1055 if–
ö°
.
•a˚
.
	`gë_ty≥
(Ë!
sh¨ed_•a˚
 )

1056  
åue
;

1057 
boﬁ
 
°Æl
 = 
ö°
.
	`di•©ch_dñay
();

1058 if–
°Æl
 ) {

1059 
Áû_ty≥
 = 
S_MEM
;

1060 
rc_Áû
 = 
BK_CONF
;

1062 
rc_Áû
 = 
NO_RC_FAIL
;

1063  !
°Æl
;

1064 
	}
}

1066 
mem_°age_°Æl_ty≥
 
	gld°_unô
::
	$¥o˚ss_mem‹y_ac˚ss_queue
–
ˇche_t
 *
ˇche
, 
w¨p_ö°_t
 &
ö°
 )

1068 
mem_°age_°Æl_ty≥
 
ªsu…
 = 
NO_RC_FAIL
;

1069 if–
ö°
.
	`ac˚ssq_em±y
() )

1070  
ªsu…
;

1073 
mem_„tch
 *
mf
 = 
m_mf_Æloˇt‹
->
	`Æloc
(
ö°
,ö°.
	`ac˚ssq_back
());

1074 
°d
::
li°
<
ˇche_evít
> 
evíts
;

1075 
ˇche_ªque°_°©us
 
°©us
 = 
ˇche
->
	`ac˚ss
(
mf
->
	`gë_addr
(),mf,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
,
evíts
);

1077 
boﬁ
 
wrôe_£¡
 = 
	`was_wrôe_£¡
(
evíts
);

1078 
boﬁ
 
ªad_£¡
 = 
	`was_ªad_£¡
(
evíts
);

1079 if–
wrôe_£¡
 )

1080 
m_c‹e
->
	`öc_°‹e_ªq
–
ö°
.
	`w¨p_id
() );

1081 i‡–
°©us
 =
HIT
 ) {

1082 
	`as£π
–!
ªad_£¡
 );

1083 
ö°
.
	`ac˚ssq_p›_back
();

1084 i‡–
ö°
.
	`is_lﬂd
() ) {

1085  
r
=0;Ñ < 4;Ñ++)

1086 i‡(
ö°
.
out
[
r
] > 0)

1087 
m_≥ndög_wrôes
[
ö°
.
	`w¨p_id
()][ö°.
out
[
r
]]--;

1089 if–!
wrôe_£¡
 )

1090 
dñëe
 
mf
;

1091 } i‡–
°©us
 =
RESERVATION_FAIL
 ) {

1092 
ªsu…
 = 
COAL_STALL
;

1093 
	`as£π
–!
ªad_£¡
 );

1094 
	`as£π
–!
wrôe_£¡
 );

1095 
dñëe
 
mf
;

1097 
	`as£π
–
°©us
 =
MISS
 || sètu†=
HIT_RESERVED
 );

1099 
ö°
.
	`ac˚ssq_p›_back
();

1101 if–!
ö°
.
	`ac˚ssq_em±y
() )

1102 
ªsu…
 = 
BK_CONF
;

1103  
ªsu…
;

1104 
	}
}

1106 
boﬁ
 
	gld°_unô
::
	$c⁄°™t_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
)

1108 if–
ö°
.
	`em±y
(Ë|| ((ö°.
•a˚
.
	`gë_ty≥
(Ë!
c⁄°_•a˚
Ë&& (ö°.•a˚.gë_ty≥(Ë!
∑øm_•a˚_kî√l
)) )

1109  
åue
;

1110 if–
ö°
.
	`a˘ive_cou¡
() == 0 )

1111  
åue
;

1112 
mem_°age_°Æl_ty≥
 
Áû
 = 
	`¥o˚ss_mem‹y_ac˚ss_queue
(
m_L1C
,
ö°
);

1113 i‡(
Áû
 !
NO_RC_FAIL
){

1114 
rc_Áû
 = 
Áû
;

1115 
Áû_ty≥
 = 
C_MEM
;

1116 i‡(
rc_Áû
 =
BK_CONF
 
‹
Ñc_Áû =
COAL_STALL
) {

1117 
m_°©s
->
gpgpu_n_cmem_p‹tc⁄Êi˘
++;

1120  
ö°
.
	`ac˚ssq_em±y
();

1121 
	}
}

1123 
boﬁ
 
	gld°_unô
::
	$ãxtuª_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
)

1125 if–
ö°
.
	`em±y
(Ë|| in°.
•a˚
.
	`gë_ty≥
(Ë!
ãx_•a˚
 )

1126  
åue
;

1127 if–
ö°
.
	`a˘ive_cou¡
() == 0 )

1128  
åue
;

1129 
mem_°age_°Æl_ty≥
 
Áû
 = 
	`¥o˚ss_mem‹y_ac˚ss_queue
(
m_L1T
,
ö°
);

1130 i‡(
Áû
 !
NO_RC_FAIL
){

1131 
rc_Áû
 = 
Áû
;

1132 
Áû_ty≥
 = 
T_MEM
;

1134  
ö°
.
	`ac˚ssq_em±y
();

1135 
	}
}

1137 
boﬁ
 
	gld°_unô
::
	$mem‹y_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
°Æl_ªas⁄
, 
mem_°age_ac˚ss_ty≥
 &
ac˚ss_ty≥
 )

1139 if–
ö°
.
	`em±y
() ||

1140 ((
ö°
.
•a˚
.
	`gë_ty≥
(Ë!
globÆ_•a˚
) &&

1141 (
ö°
.
•a˚
.
	`gë_ty≥
(Ë!
loˇl_•a˚
) &&

1142 (
ö°
.
•a˚
.
	`gë_ty≥
(Ë!
∑øm_•a˚_loˇl
)) )

1143  
åue
;

1144 if–
ö°
.
	`a˘ive_cou¡
() == 0 )

1145  
åue
;

1146 
	`as£π
–!
ö°
.
	`ac˚ssq_em±y
() );

1147 
mem_°age_°Æl_ty≥
 
°Æl_c⁄d
 = 
NO_RC_FAIL
;

1148 c⁄° 
mem_ac˚ss_t
 &
ac˚ss
 = 
ö°
.
	`ac˚ssq_back
();

1149 
size
 = 
ac˚ss
.
	`gë_size
();

1151 if–
CACHE_GLOBAL
 =
ö°
.
ˇche_›
 || (
m_L1D
 =
NULL
) ) {

1153 if–
m_i˙t
->
	`fuŒ
(
size
, 
ö°
.
	`is_°‹e
(Ë|| in°.
	`ißtomic
()) ) {

1154 
°Æl_c⁄d
 = 
ICNT_RC_FAIL
;

1156 
mem_„tch
 *
mf
 = 
m_mf_Æloˇt‹
->
	`Æloc
(
ö°
,
ac˚ss
);

1157 
m_i˙t
->
	`push
(
mf
);

1158 
ö°
.
	`ac˚ssq_p›_back
();

1160 if–
ö°
.
	`is_lﬂd
() ) {

1161  
r
=0;Ñ < 4;Ñ++)

1162 if(
ö°
.
out
[
r
] > 0)

1163 
	`as£π
–
m_≥ndög_wrôes
[
ö°
.
	`w¨p_id
()][ö°.
out
[
r
]] > 0 );

1164 } if–
ö°
.
	`is_°‹e
() )

1165 
m_c‹e
->
	`öc_°‹e_ªq
–
ö°
.
	`w¨p_id
() );

1168 
	`as£π
–
CACHE_UNDEFINED
 !
ö°
.
ˇche_›
 );

1169 
°Æl_c⁄d
 = 
	`¥o˚ss_mem‹y_ac˚ss_queue
(
m_L1D
,
ö°
);

1171 if–!
ö°
.
	`ac˚ssq_em±y
() )

1172 
°Æl_c⁄d
 = 
COAL_STALL
;

1173 i‡(
°Æl_c⁄d
 !
NO_RC_FAIL
) {

1174 
°Æl_ªas⁄
 = 
°Æl_c⁄d
;

1175 
boﬁ
 
iswrôe
 = 
ö°
.
	`is_°‹e
();

1176 i‡(
ö°
.
•a˚
.
	`is_loˇl
())

1177 
ac˚ss_ty≥
 = (
iswrôe
)?
L_MEM_ST
:
L_MEM_LD
;

1179 
ac˚ss_ty≥
 = (
iswrôe
)?
G_MEM_ST
:
G_MEM_LD
;

1181  
ö°
.
	`ac˚ssq_em±y
();

1182 
	}
}

1185 
boﬁ
 
	gld°_unô
::
	$ª•⁄£_buf„r_fuŒ
() const

1187  
m_ª•⁄£_fifo
.
	`size
(Ë>
m_c⁄fig
->
ld°_unô_ª•⁄£_queue_size
;

1188 
	}
}

1190 
	gld°_unô
::
	$fûl
–
mem_„tch
 *
mf
 )

1192 
mf
->
	`£t_°©us
(
IN_SHADER_LDST_RESPONSE_FIFO
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1193 
m_ª•⁄£_fifo
.
	`push_back
(
mf
);

1194 
	}
}

1196 
	gld°_unô
::
	$Êush
()

1199 
	}
}

1201 
simd_fun˘i⁄_unô
::
	$simd_fun˘i⁄_unô
–c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 )

1203 
m_c⁄fig
=
c⁄fig
;

1204 
m_di•©ch_ªg
 = 
√w
 
	`w¨p_ö°_t
(
c⁄fig
);

1205 
	}
}

1207 
	gsfu
::
	$sfu
–
ªgi°î_£t
* 
ªsu…_p‹t
, c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 )

1208 : 
	`pùñöed_simd_unô
(
ªsu…_p‹t
,
c⁄fig
,c⁄fig->
max_sfu_œãncy
)

1210 
m_«me
 = "SFU";

1211 
	}
}

1213 
	g•_unô
::
	$•_unô
–
ªgi°î_£t
* 
ªsu…_p‹t
, c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 )

1214 : 
	`pùñöed_simd_unô
(
ªsu…_p‹t
,
c⁄fig
,c⁄fig->
max_•_œãncy
)

1216 
m_«me
 = "SP ";

1217 
	}
}

1220 
	gpùñöed_simd_unô
::
	$pùñöed_simd_unô
–
ªgi°î_£t
* 
ªsu…_p‹t
, c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
, 
max_œãncy
 )

1221 : 
	$simd_fun˘i⁄_unô
(
c⁄fig
)

1223 
m_ªsu…_p‹t
 = 
ªsu…_p‹t
;

1224 
m_pùñöe_dïth
 = 
max_œãncy
;

1225 
m_pùñöe_ªg
 = 
√w
 
w¨p_ö°_t
*[
m_pùñöe_dïth
];

1226  
i
=0; i < 
m_pùñöe_dïth
; i++ )

1227 
m_pùñöe_ªg
[
i
] = 
√w
 
	`w¨p_ö°_t
–
c⁄fig
 );

1228 
	}
}

1230 
	gld°_unô
::
	$ld°_unô
–
mem_„tch_öãrÁ˚
 *
i˙t
,

1231 
shadî_c‹e_mem_„tch_Æloˇt‹
 *
mf_Æloˇt‹
,

1232 
shadî_c‹e_˘x
 *
c‹e
,

1233 
›ndcﬁl_rfu_t
 *
›î™d_cﬁÀ˘‹
,

1234 
Sc‹ebﬂrd
 *
sc‹ebﬂrd
,

1235 c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
,

1236 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
,

1237 
shadî_c‹e_°©s
 *
°©s
,

1238 
sid
,

1239 
çc
 ) : 
	`pùñöed_simd_unô
(
NULL
,
c⁄fig
,3), 
	$m_√xt_wb
(
c⁄fig
)

1241 
m_mem‹y_c⁄fig
 = 
mem_c⁄fig
;

1242 
m_i˙t
 = 
i˙t
;

1243 
m_mf_Æloˇt‹
=
mf_Æloˇt‹
;

1244 
m_c‹e
 = 
c‹e
;

1245 
m_›î™d_cﬁÀ˘‹
 = 
›î™d_cﬁÀ˘‹
;

1246 
m_sc‹ebﬂrd
 = 
sc‹ebﬂrd
;

1247 
m_°©s
 = 
°©s
;

1248 
m_sid
 = 
sid
;

1249 
m_çc
 = 
çc
;

1250 
	#STRSIZE
 1024

	)

1251 
L1T_«me
[
STRSIZE
];

1252 
L1C_«me
[
STRSIZE
];

1253 
L1D_«me
[
STRSIZE
];

1254 
	`¢¥ötf
(
L1T_«me
, 
STRSIZE
, "L1T_%03d", 
m_sid
);

1255 
	`¢¥ötf
(
L1C_«me
, 
STRSIZE
, "L1C_%03d", 
m_sid
);

1256 
	`¢¥ötf
(
L1D_«me
, 
STRSIZE
, "L1D_%03d", 
m_sid
);

1257 
m_L1T
 = 
√w
 
	`ãx_ˇche
(
L1T_«me
,
m_c⁄fig
->
m_L1T_c⁄fig
,
m_sid
,
	`gë_shadî_ãxtuª_ˇche_id
(),
i˙t
,
IN_L1T_MISS_QUEUE
,
IN_SHADER_L1T_ROB
);

1258 
m_L1C
 = 
√w
 
	`ªad_⁄ly_ˇche
(
L1C_«me
,
m_c⁄fig
->
m_L1C_c⁄fig
,
m_sid
,
	`gë_shadî_c⁄°™t_ˇche_id
(),
i˙t
,
IN_L1C_MISS_QUEUE
);

1259 
m_L1D
 = 
NULL
;

1260 if–!
m_c⁄fig
->
m_L1D_c⁄fig
.
	`dißbÀd
() )

1261 
m_L1D
 = 
√w
 
	`d©a_ˇche
(
L1D_«me
,
m_c⁄fig
->
m_L1D_c⁄fig
,
m_sid
,
	`gë_shadî_n‹mÆ_ˇche_id
(),
m_i˙t
,
m_mf_Æloˇt‹
,
IN_L1D_MISS_QUEUE
);

1262 
m_mem_rc
 = 
NO_RC_FAIL
;

1263 
m_num_wrôeback_˛õ¡s
=5;

1264 
m_wrôeback_¨b
 = 0;

1265 
m_√xt_globÆ
=
NULL
;

1266 
m_œ°_ö°_gpu_sim_cy˛e
=0;

1267 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
=0;

1268 
	}
}

1270 
	gld°_unô
::
	$wrôeback
()

1273 if–!
m_√xt_wb
.
	`em±y
() ) {

1274 if–
m_›î™d_cﬁÀ˘‹
->
	`wrôeback
(
m_√xt_wb
) ) {

1275 
boﬁ
 
ö¢_com∂ëed
 = 
Ál£
;

1276  
r
=0;Ñ < 4;Ñ++ ) {

1277 if–
m_√xt_wb
.
out
[
r
] > 0 ) {

1278 if–
m_√xt_wb
.
•a˚
.
	`gë_ty≥
(Ë!
sh¨ed_•a˚
 ) {

1279 
	`as£π
–
m_≥ndög_wrôes
[
m_√xt_wb
.
	`w¨p_id
()][m_√xt_wb.
out
[
r
]] > 0 );

1280 
°ûl_≥ndög
 = --
m_≥ndög_wrôes
[
m_√xt_wb
.
	`w¨p_id
()][m_√xt_wb.
out
[
r
]];

1281 if–!
°ûl_≥ndög
 ) {

1282 
m_≥ndög_wrôes
[
m_√xt_wb
.
	`w¨p_id
()].
	`îa£
(m_√xt_wb.
out
[
r
]);

1283 
m_sc‹ebﬂrd
->
	`ªÀa£Regi°î
–
m_√xt_wb
.
	`w¨p_id
(), m_√xt_wb.
out
[
r
] );

1284 
ö¢_com∂ëed
 = 
åue
;

1287 
m_sc‹ebﬂrd
->
	`ªÀa£Regi°î
–
m_√xt_wb
.
	`w¨p_id
(), m_√xt_wb.
out
[
r
] );

1288 
ö¢_com∂ëed
 = 
åue
;

1292 if–
ö¢_com∂ëed
 ) {

1293 
m_c‹e
->
	`w¨p_ö°_com∂ëe
(
m_√xt_wb
);

1295 
m_√xt_wb
.
	`˛ór
();

1296 
m_œ°_ö°_gpu_sim_cy˛e
 = 
gpu_sim_cy˛e
;

1297 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
 = 
gpu_tŸ_sim_cy˛e
;

1301 
£rvi˚d_˛õ¡
 = -1;

1302  
c
 = 0; 
m_√xt_wb
.
	`em±y
(Ë&& (¯< 
m_num_wrôeback_˛õ¡s
); c++ ) {

1303 
√xt_˛õ¡
 = (
c
+
m_wrôeback_¨b
)%
m_num_wrôeback_˛õ¡s
;

1304  
√xt_˛õ¡
 ) {

1306 if–!
m_pùñöe_ªg
[0]->
	`em±y
() ) {

1307 
m_√xt_wb
 = *
m_pùñöe_ªg
[0];

1308 
m_c‹e
->
	`dec_ö°_ö_pùñöe
(
m_pùñöe_ªg
[0]->
	`w¨p_id
());

1309 
m_pùñöe_ªg
[0]->
	`˛ór
();

1310 
£rvi˚d_˛õ¡
 = 
√xt_˛õ¡
;

1314 if–
m_L1T
->
	`ac˚ss_ªady
() ) {

1315 
mem_„tch
 *
mf
 = 
m_L1T
->
	`√xt_ac˚ss
();

1316 
m_√xt_wb
 = 
mf
->
	`gë_ö°
();

1317 
dñëe
 
mf
;

1318 
£rvi˚d_˛õ¡
 = 
√xt_˛õ¡
;

1322 if–
m_L1C
->
	`ac˚ss_ªady
() ) {

1323 
mem_„tch
 *
mf
 = 
m_L1C
->
	`√xt_ac˚ss
();

1324 
m_√xt_wb
 = 
mf
->
	`gë_ö°
();

1325 
dñëe
 
mf
;

1326 
£rvi˚d_˛õ¡
 = 
√xt_˛õ¡
;

1330 if–
m_√xt_globÆ
 ) {

1331 
m_√xt_wb
 = 
m_√xt_globÆ
->
	`gë_ö°
();

1332 if–
m_√xt_globÆ
->
	`ißtomic
() )

1333 
m_c‹e
->
	`de¸emít_©omic_cou¡
(
m_√xt_globÆ
->
	`gë_wid
(),m_√xt_globÆ->
	`gë_ac˚ss_w¨p_mask
().
	`cou¡
());

1334 
dñëe
 
m_√xt_globÆ
;

1335 
m_√xt_globÆ
 = 
NULL
;

1336 
£rvi˚d_˛õ¡
 = 
√xt_˛õ¡
;

1340 if–
m_L1D
 && m_L1D->
	`ac˚ss_ªady
() ) {

1341 
mem_„tch
 *
mf
 = 
m_L1D
->
	`√xt_ac˚ss
();

1342 
m_√xt_wb
 = 
mf
->
	`gë_ö°
();

1343 
dñëe
 
mf
;

1344 
£rvi˚d_˛õ¡
 = 
√xt_˛õ¡
;

1347 : 
	`ab‹t
();

1353 i‡(
£rvi˚d_˛õ¡
 != ()-1) {

1354 
m_wrôeback_¨b
 = (
£rvi˚d_˛õ¡
 + 1Ë% 
m_num_wrôeback_˛õ¡s
;

1356 
	}
}

1358 
	gld°_unô
::
	$˛ock_mu…ùlõr
() const

1360  
m_c⁄fig
->
mem_w¨p_∑πs
;

1361 
	}
}

1363 
	gld°_unô
::
	$issue
–
ªgi°î_£t
 &
ªg_£t
 )

1365 
w¨p_ö°_t
* 
ö°
 = *(
ªg_£t
.
	`gë_ªady
());

1367 
m_c‹e
->
	`mem_ö°ru˘i⁄_°©s
(*
ö°
);

1370 
	`as£π
(
ö°
->
	`em±y
(Ë=
Ál£
);

1371 i‡(
ö°
->
	`is_lﬂd
(Ë
™d
 in°->
•a˚
.
	`gë_ty≥
(Ë!
sh¨ed_•a˚
) {

1372 
w¨p_id
 = 
ö°
->
	`w¨p_id
();

1373 
n_ac˚s£s
 = 
ö°
->
	`ac˚ssq_cou¡
();

1374 
r
 = 0;Ñ < 4;Ñ++) {

1375 
ªg_id
 = 
ö°
->
out
[
r
];

1376 i‡(
ªg_id
 > 0) {

1377 
m_≥ndög_wrôes
[
w¨p_id
][
ªg_id
] +
n_ac˚s£s
;

1382 
pùñöed_simd_unô
::
	`issue
(
ªg_£t
);

1383 
	}
}

1385 
	gld°_unô
::
	$cy˛e
()

1387 
	`wrôeback
();

1388 
m_›î™d_cﬁÀ˘‹
->
	`°ï
();

1389  
°age
=0; (°age+1)<
m_pùñöe_dïth
; stage++ )

1390 if–
m_pùñöe_ªg
[
°age
]->
	`em±y
() && !m_pipeline_reg[stage+1]->empty() )

1391 
	`move_w¨p
(
m_pùñöe_ªg
[
°age
], m_pipeline_reg[stage+1]);

1393 if–!
m_ª•⁄£_fifo
.
	`em±y
() ) {

1394 
mem_„tch
 *
mf
 = 
m_ª•⁄£_fifo
.
	`‰⁄t
();

1395 i‡(
mf
->
	`i°extuª
()) {

1396 
m_L1T
->
	`fûl
(
mf
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1397 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

1398 } i‡(
mf
->
	`isc⁄°
()) {

1399 
mf
->
	`£t_°©us
(
IN_SHADER_FETCHED
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1400 
m_L1C
->
	`fûl
(
mf
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1401 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

1403 if–
mf
->
	`gë_ty≥
(Ë=
WRITE_ACK
 || ( 
m_c⁄fig
->
gpgpu_≥r„˘_mem
 && mf->
	`gë_is_wrôe
() )) {

1404 
m_c‹e
->
	`°‹e_ack
(
mf
);

1405 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

1406 
dñëe
 
mf
;

1408 
	`as£π
–!
mf
->
	`gë_is_wrôe
() );

1409 if–
mf
->
	`gë_ö°
().
ˇche_›
 !
CACHE_GLOBAL
 && 
m_L1D
 ) {

1410 
m_L1D
->
	`fûl
(
mf
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1411 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

1412 } if–
m_√xt_globÆ
 =
NULL
 ) {

1413 
mf
->
	`£t_°©us
(
IN_SHADER_FETCHED
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

1414 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

1415 
m_√xt_globÆ
 = 
mf
;

1421 
m_L1T
->
	`cy˛e
();

1422 
m_L1C
->
	`cy˛e
();

1423 if–
m_L1D
 ) m_L1D->
	`cy˛e
();

1425 
w¨p_ö°_t
 &
pùe_ªg
 = *
m_di•©ch_ªg
;

1426 
mem_°age_°Æl_ty≥
 
rc_Áû
 = 
NO_RC_FAIL
;

1427 
mem_°age_ac˚ss_ty≥
 
ty≥
;

1428 
boﬁ
 
d⁄e
 = 
åue
;

1429 
d⁄e
 &
	`sh¨ed_cy˛e
(
pùe_ªg
, 
rc_Áû
, 
ty≥
);

1430 
d⁄e
 &
	`c⁄°™t_cy˛e
(
pùe_ªg
, 
rc_Áû
, 
ty≥
);

1431 
d⁄e
 &
	`ãxtuª_cy˛e
(
pùe_ªg
, 
rc_Áû
, 
ty≥
);

1432 
d⁄e
 &
	`mem‹y_cy˛e
(
pùe_ªg
, 
rc_Áû
, 
ty≥
);

1433 
m_mem_rc
 = 
rc_Áû
;

1434 i‡(!
d⁄e
) {

1435 
	`as£π
(
rc_Áû
 !
NO_RC_FAIL
);

1436 
m_°©s
->
gpgpu_n_°Æl_shd_mem
++;

1437 
m_°©s
->
gpu_°Æl_shd_mem_bªakdown
[
ty≥
][
rc_Áû
]++;

1441 if–!
pùe_ªg
.
	`em±y
() ) {

1442 
w¨p_id
 = 
pùe_ªg
.
	`w¨p_id
();

1443 if–
pùe_ªg
.
	`is_lﬂd
() ) {

1444 if–
pùe_ªg
.
•a˚
.
	`gë_ty≥
(Ë=
sh¨ed_•a˚
 ) {

1445 if–
m_pùñöe_ªg
[2]->
	`em±y
() ) {

1447 
	`move_w¨p
(
m_pùñöe_ªg
[2],
m_di•©ch_ªg
);

1448 
m_di•©ch_ªg
->
	`˛ór
();

1456 
boﬁ
 
≥ndög_ªque°s
=
Ál£
;

1457  
r
=0;Ñ<4;Ñ++ ) {

1458 
ªg_id
 = 
pùe_ªg
.
out
[
r
];

1459 if–
ªg_id
 > 0 ) {

1460 if–
m_≥ndög_wrôes
[
w¨p_id
].
	`föd
(
ªg_id
Ë!m_≥ndög_wrôes[w¨p_id].
	`íd
() ) {

1461 i‡–
m_≥ndög_wrôes
[
w¨p_id
][
ªg_id
] > 0 ) {

1462 
≥ndög_ªque°s
=
åue
;

1466 
m_≥ndög_wrôes
[
w¨p_id
].
	`îa£
(
ªg_id
);

1471 if–!
≥ndög_ªque°s
 ) {

1472 
m_c‹e
->
	`w¨p_ö°_com∂ëe
(*
m_di•©ch_ªg
);

1473 
m_sc‹ebﬂrd
->
	`ªÀa£Regi°îs
(
m_di•©ch_ªg
);

1475 
m_c‹e
->
	`dec_ö°_ö_pùñöe
(
w¨p_id
);

1476 
m_di•©ch_ªg
->
	`˛ór
();

1480 
m_c‹e
->
	`dec_ö°_ö_pùñöe
(
w¨p_id
);

1481 
m_c‹e
->
	`w¨p_ö°_com∂ëe
(*
m_di•©ch_ªg
);

1482 
m_di•©ch_ªg
->
	`˛ór
();

1485 
	}
}

1487 
	gFöished_⁄_Sim
[299999];

1488 
	gLa°_Run_Block
[
Thªad_Num
];

1495 
	gshadî_c‹e_˘x
::
	$ªgi°î_˘a_thªad_exô
–
˘a_num
 )

1497 
	`as£π
–
m_˘a_°©us
[
˘a_num
] > 0 );

1498 
m_˘a_°©us
[
˘a_num
]--;

1499 i‡(!
m_˘a_°©us
[
˘a_num
]) {

1500 
m_n_a˘ive_˘a
--;

1501 
m_b¨rõrs
.
	`dóŒoˇã_b¨rõr
(
˘a_num
);

1502 
	`shadî_CTA_cou¡_u∆og
(
m_sid
, 1);

1508 
˘a_size
 = 
m_kî√l
->
	`thªads_≥r_˘a
();

1509 if(
m_thªad
[
˘a_num
*
˘a_size
] !
NULL
){

1510 
BlockID
;

1511 
W¨pID
;

1512 
nW¨ps
;

1513 if(
˘a_size
 % 
m_c⁄fig
->
w¨p_size
)

1514 
nW¨ps
 = 
˘a_size
 / 
m_c⁄fig
->
w¨p_size
 + 1;

1516 
nW¨ps
 = 
˘a_size
 / 
m_c⁄fig
->
w¨p_size
;

1517 
m_thªad
[
˘a_num
*
˘a_size
]->
	`KAIN_gë_˘a_num
(
m_c⁄fig
->
w¨p_size
,0,&
BlockID
,&
W¨pID
);

1521 
Föished_⁄_Sim
[
BlockID
] = 1;

1522 
block_co°
[299999];

1523 
begö_cy˛e
 = 
block_co°
[
BlockID
];

1524 
block_co°
[
BlockID
] = 
gpu_tŸ_sim_cy˛e
 + 
gpu_sim_cy˛e
-
begö_cy˛e
;

1547 if–
m_n_a˘ive_˘a
 == 0 ) {

1548 
	`as£π
–
m_kî√l
 !
NULL
 );

1549 
m_kî√l
->
	`dec_ru¬ög
();

1552 if–
m_kî√l
->
	`no_m‹e_˘as_to_run
() ) {

1553 if–!
m_kî√l
->
	`ru¬ög
() ) {

1555 
m_gpu
->
	`£t_kî√l_d⁄e
–
m_kî√l
 );

1558 
m_kî√l
=
NULL
;

1562 
	}
}

1564 
	ggpgpu_sim
::
	$shadî_¥öt_ru¡ime_°©
–
FILE
 *
fout
 )

1585 
	}
}

1588 
gpgpu_sim
::
	$shadî_¥öt_l1_miss_°©
–
FILE
 *
fout
 ) const

1590 
tŸÆ_d1_mis£s
 = 0, 
tŸÆ_d1_ac˚s£s
 = 0;

1591  
i
 = 0; i < 
m_shadî_c⁄fig
->
n_simt_˛u°îs
; ++i ) {

1592 
cu°î_d1_mis£s
 = 0, 
˛u°î_d1_ac˚s£s
 = 0;

1593 
m_˛u°î
[ 
i
 ]->
	`¥öt_ˇche_°©s
–
fout
, 
˛u°î_d1_ac˚s£s
, 
cu°î_d1_mis£s
 );

1594 
tŸÆ_d1_mis£s
 +
cu°î_d1_mis£s
;

1595 
tŸÆ_d1_ac˚s£s
 +
˛u°î_d1_ac˚s£s
;

1597 
	`Ârötf
–
fout
, "tŸÆ_dl1_mis£s=%d\n", 
tŸÆ_d1_mis£s
 );

1598 
	`Ârötf
–
fout
, "tŸÆ_dl1_ac˚s£s=%d\n", 
tŸÆ_d1_ac˚s£s
 );

1599 
	`Ârötf
–
fout
, "tŸÆ_dl1_miss_øã%f\n", ()
tŸÆ_d1_mis£s
 / ()
tŸÆ_d1_ac˚s£s
 );

1650 
	}
}

1652 
	gw¨p_ö°_t
::
	$¥öt
–
FILE
 *
fout
 ) const

1654 i‡(
	`em±y
() ) {

1655 
	`Ârötf
(
fout
,"bubble\n" );

1658 
	`Ârötf
(
fout
,"0x%04x ", 
pc
 );

1659 
	`Ârötf
(
fout
, "w%02d[", 
m_w¨p_id
);

1660 
j
=0; j<
m_c⁄fig
->
w¨p_size
; j++)

1661 
	`Ârötf
(
fout
, "%c", (
	`a˘ive
(
j
)?'1':'0') );

1662 
	`Ârötf
(
fout
, "]: ");

1663 
	`±x_¥öt_ö¢
–
pc
, 
fout
 );

1664 
	`Ârötf
(
fout
, "\n");

1665 
	}
}

1667 
	gshadî_c‹e_˘x
::
	$¥öt_°age
(
°age
, 
FILE
 *
fout
 ) const

1669 
m_pùñöe_ªg
[
°age
].
	`¥öt
(
fout
);

1671 
	}
}

1673 
	gshadî_c‹e_˘x
::
	$di•œy_simt_°©e
(
FILE
 *
fout
, 
mask
 ) const

1675 i‡–(
mask
 & 4Ë&& 
m_c⁄fig
->
modñ
 =
POST_DOMINATOR
 ) {

1676 
	`Ârötf
(
fout
,"per warp SIMT control-flow state:\n");

1677 
n
 = 
m_c⁄fig
->
n_thªad_≥r_shadî
 / m_c⁄fig->
w¨p_size
;

1678 
i
=0; i < 
n
; i++) {

1679 
«˘ive
 = 0;

1680 
j
=0; j<
m_c⁄fig
->
w¨p_size
; j++ ) {

1681 
tid
 = 
i
*
m_c⁄fig
->
w¨p_size
 + 
j
;

1682 
d⁄e
 = 
	`±x_thªad_d⁄e
(
tid
);

1683 
«˘ive
 +(
	`±x_thªad_d⁄e
(
tid
)?0:1);

1684 i‡–
d⁄e
 && (
mask
 & 8) ) {

1685 
d⁄e_cy˛e
 = 
m_thªad
[
tid
]->
	`d⁄ecy˛e
();

1686 i‡–
d⁄e_cy˛e
 ) {

1687 
	`¥ötf
("\¿w%02u:t%03u: d⁄ê@ cy˛ê%u", 
i
, 
tid
, 
d⁄e_cy˛e
 );

1691 i‡–
«˘ive
 == 0 ) {

1694 
m_simt_°ack
[
i
]->
	`¥öt
(
fout
);

1696 
	`Ârötf
(
fout
,"\n");

1698 
	}
}

1700 
	gld°_unô
::
	$¥öt
(
FILE
 *
fout
) const

1702 
	`Ârötf
(
fout
,"LD/ST unit = ");

1703 
m_di•©ch_ªg
->
	`¥öt
(
fout
);

1704 i‡–
m_mem_rc
 !
NO_RC_FAIL
 ) {

1705 
	`Ârötf
(
fout
," LD/ST stall condition: ");

1706  
m_mem_rc
 ) {

1707 
BK_CONF
: 
	`Ârötf
(
fout
,"BK_CONF"); ;

1708 
MSHR_RC_FAIL
: 
	`Ârötf
(
fout
,"MSHR_RC_FAIL"); ;

1709 
ICNT_RC_FAIL
: 
	`Ârötf
(
fout
,"ICNT_RC_FAIL"); ;

1710 
COAL_STALL
: 
	`Ârötf
(
fout
,"COAL_STALL"); ;

1711 
WB_ICNT_RC_FAIL
: 
	`Ârötf
(
fout
,"WB_ICNT_RC_FAIL"); ;

1712 
WB_CACHE_RSRV_FAIL
: 
	`Ârötf
(
fout
,"WB_CACHE_RSRV_FAIL"); ;

1713 
N_MEM_STAGE_STALL_TYPE
: 
	`Ârötf
(
fout
,"N_MEM_STAGE_STALL_TYPE"); ;

1714 : 
	`ab‹t
();

1716 
	`Ârötf
(
fout
,"\n");

1718 
	`Ârötf
(
fout
,"LD/ST wb = ");

1719 
m_√xt_wb
.
	`¥öt
(
fout
);

1720 
	`Ârötf
(
fout
, "Last LD/ST writeback @ %llu + %llu (gpu_sim_cycle+gpu_tot_sim_cycle)\n",

1721 
m_œ°_ö°_gpu_sim_cy˛e
, 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
 );

1722 
	`Ârötf
(
fout
,"PendingÑegister writes:\n");

1723 
°d
::
m≠
<, std::m≠<,> >::
c⁄°_ôî©‹
 
w
;

1724  
w
=
m_≥ndög_wrôes
.
	`begö
(); w!=m_≥ndög_wrôes.
	`íd
(); w++ ) {

1725 
w¨p_id
 = 
w
->
fú°
;

1726 c⁄° 
°d
::
m≠
<,> &
w¨p_öfo
 = 
w
->
£c⁄d
;

1727 if–
w¨p_öfo
.
	`em±y
() )

1729 
	`Ârötf
(
fout
," w%2u : ", 
w¨p_id
 );

1730 
°d
::
m≠
<,>::
c⁄°_ôî©‹
 
r
;

1731  
r
=
w¨p_öfo
.
	`begö
();Ñ!=w¨p_öfo.
	`íd
(); ++r ) {

1732 
	`Ârötf
(
fout
," %u(%u)", 
r
->
fú°
,Ñ->
£c⁄d
 );

1734 
	`Ârötf
(
fout
,"\n");

1736 
m_L1C
->
	`di•œy_°©e
(
fout
);

1737 
m_L1T
->
	`di•œy_°©e
(
fout
);

1738 if–!
m_c⁄fig
->
m_L1D_c⁄fig
.
	`dißbÀd
() )

1739 
m_L1D
->
	`di•œy_°©e
(
fout
);

1740 
	`Ârötf
(
fout
,"LD/STÑe•⁄£ FIFO (occu∑ncy = %zu):\n", 
m_ª•⁄£_fifo
.
	`size
() );

1741  
°d
::
li°
<
mem_„tch
*>::
c⁄°_ôî©‹
 
i
=
m_ª•⁄£_fifo
.
	`begö
(); i !m_ª•⁄£_fifo.
	`íd
(); i++ ) {

1742 c⁄° 
mem_„tch
 *
mf
 = *
i
;

1743 
mf
->
	`¥öt
(
fout
);

1745 
	}
}

1747 
	gshadî_c‹e_˘x
::
	$di•œy_pùñöe
(
FILE
 *
fout
, 
¥öt_mem
, 
mask
 ) const

1749 
	`Ârötf
(
fout
, "=================================================\n");

1750 
	`Ârötf
(
fout
, "shadî %uáàcy˛ê%Lu+%Lu (%uÅhªad†ru¬ög)\n", 
m_sid
,

1751 
gpu_tŸ_sim_cy˛e
, 
gpu_sim_cy˛e
, 
m_nŸ_com∂ëed
);

1752 
	`Ârötf
(
fout
, "=================================================\n");

1754 
	`dump_w¨p_°©e
(
fout
);

1755 
	`Ârötf
(
fout
,"\n");

1757 
m_L1I
->
	`di•œy_°©e
(
fout
);

1759 
	`Ârötf
(
fout
, "IF/ID = ");

1760 if–!
m_ö°_„tch_buf„r
.
m_vÆid
 )

1761 
	`Ârötf
(
fout
,"bubble\n");

1763 
	`Ârötf
(
fout
,"w%2u :Öc = 0x%x,Çbytes = %u\n",

1764 
m_ö°_„tch_buf„r
.
m_w¨p_id
,

1765 
m_ö°_„tch_buf„r
.
m_pc
,

1766 
m_ö°_„tch_buf„r
.
m_nbyãs
 );

1768 
	`Ârötf
(
fout
,"\nibuffer status:\n");

1769  
i
=0; i<
m_c⁄fig
->
max_w¨ps_≥r_shadî
; i++) {

1770 if–!
m_w¨p
[
i
].
	`ibuf„r_em±y
() )

1771 
m_w¨p
[
i
].
	`¥öt_ibuf„r
(
fout
);

1773 
	`Ârötf
(
fout
,"\n");

1774 
	`di•œy_simt_°©e
(
fout
,
mask
);

1775 
	`Ârötf
(
fout
, "-------------------------- Scoreboard\n");

1776 
m_sc‹ebﬂrd
->
	`¥ötC⁄ã¡s
();

1785 
	`Ârötf
(
fout
, "-------------------------- OP COL\n");

1786 
m_›î™d_cﬁÀ˘‹
.
	`dump
(
fout
);

1794 
	`Ârötf
(
fout
, "-------------------------- Pipe Regs\n");

1796 
i
 = 0; i < 
N_PIPELINE_STAGES
; i++) {

1797 
	`Ârötf
(
fout
,"--- %†---\n",
pùñöe_°age_«me_decode
[
i
]);

1798 
	`¥öt_°age
(
i
,
fout
);
	`Ârötf
(fout,"\n");

1801 
	`Ârötf
(
fout
, "-------------------------- Fu\n");

1802  
n
=0;Ç < 
m_num_fun˘i⁄_unôs
;Ç++ ){

1803 
m_fu
[
n
]->
	`¥öt
(
fout
);

1804 
	`Ârötf
(
fout
, "---------------\n");

1806 
	`Ârötf
(
fout
, "-------------------------- other:\n");

1808 
i
=0; i<
num_ªsu…_bus
; i++){

1809 
°d
::
°rög
 
bôs
 = 
m_ªsu…_bus
[
i
]->
	`to_°rög
();

1810 
	`Ârötf
(
fout
, "EX/WB sched[%d]%s\n", 
i
, 
bôs
.
	`c_°r
() );

1812 
	`Ârötf
(
fout
, "EX/WB = ");

1813 
	`¥öt_°age
(
EX_WB
, 
fout
);

1814 
	`Ârötf
(
fout
, "\n");

1815 
	`Ârötf
(
fout
, "Last EX/WB writeback @ %llu + %llu (gpu_sim_cycle+gpu_tot_sim_cycle)\n",

1816 
m_œ°_ö°_gpu_sim_cy˛e
, 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
 );

1818 if–
m_a˘ive_thªads
.
	`cou¡
(Ë<2*
m_c⁄fig
->
w¨p_size
 ) {

1819 
	`Ârötf
(
fout
,"Active Threads : ");

1820 
œ°_w¨p_id
 = -1;

1821 
tid
=0;Åid < 
m_a˘ive_thªads
.
	`size
();Åid++ ) {

1822 
w¨p_id
 = 
tid
/
m_c⁄fig
->
w¨p_size
;

1823 if–
m_a˘ive_thªads
.
	`ã°
(
tid
) ) {

1824 if–
w¨p_id
 !
œ°_w¨p_id
 ) {

1825 
	`Ârötf
(
fout
,"\¿ w¨∞%u : ", 
w¨p_id
 );

1826 
œ°_w¨p_id
=
w¨p_id
;

1828 
	`Ârötf
(
fout
,"%u ", 
tid
 );

1833 
	}
}

1835 
	gshadî_c‹e_c⁄fig
::
	$max_˘a
–c⁄° 
kî√l_öfo_t
 &
k
 ) const

1837 
thªads_≥r_˘a
 = 
k
.
	`thªads_≥r_˘a
();

1838 c⁄° 
˛ass
 
fun˘i⁄_öfo
 *
kî√l
 = 
k
.
	`íåy
();

1839 
∑dded_˘a_size
 = 
thªads_≥r_˘a
;

1840 i‡(
∑dded_˘a_size
%
w¨p_size
)

1841 
∑dded_˘a_size
 = (’added_˘a_size/
w¨p_size
)+1)*(warp_size);

1844 
ªsu…_thªad
 = 
n_thªad_≥r_shadî
 / 
∑dded_˘a_size
;

1846 c⁄° 
gpgpu_±x_sim_kî√l_öfo
 *
kî√l_öfo
 = 
	`±x_sim_kî√l_öfo
(
kî√l
);

1849 
ªsu…_shmem
 = ()-1;

1850 i‡(
kî√l_öfo
->
smem
 > 0)

1851 
ªsu…_shmem
 = 
gpgpu_shmem_size
 / 
kî√l_öfo
->
smem
;

1854 
ªsu…_ªgs
 = ()-1;

1855 i‡(
kî√l_öfo
->
ªgs
 > 0)

1856 
ªsu…_ªgs
 = 
gpgpu_shadî_ªgi°îs
 / (
∑dded_˘a_size
 * ((
kî√l_öfo
->
ªgs
+3)&~3));

1859 
ªsu…_˘a
 = 
max_˘a_≥r_c‹e
;

1861 
ªsu…
 = 
ªsu…_thªad
;

1862 
ªsu…
 = 
	`gs_mö2
‘esu…, 
ªsu…_shmem
);

1863 
ªsu…
 = 
	`gs_mö2
‘esu…, 
ªsu…_ªgs
);

1864 
ªsu…
 = 
	`gs_mö2
‘esu…, 
ªsu…_˘a
);

1866 c⁄° 
gpgpu_±x_sim_kî√l_öfo
* 
œ°_köfo
 = 
NULL
;

1867 i‡(
œ°_köfo
 !
kî√l_öfo
) {

1868 
œ°_köfo
 = 
kî√l_öfo
;

1869 
	`¥ötf
 ("GPGPU-Sim uArch: CTA/c‹ê%u,Üimôed by:", 
ªsu…
);

1870 i‡(
ªsu…
 =
ªsu…_thªad
Ë
	`¥ötf
 ("Åhreads");

1871 i‡(
ªsu…
 =
ªsu…_shmem
Ë
	`¥ötf
 (" shmem");

1872 i‡(
ªsu…
 =
ªsu…_ªgs
Ë
	`¥ötf
 ("Ñegs");

1873 i‡(
ªsu…
 =
ªsu…_˘a
Ë
	`¥ötf
 (" cta_limit");

1874 
	`¥ötf
 ("\n");

1878 if–
k
.
	`num_blocks
(Ë< 
ªsu…
*
	`num_shadî
() ) {

1879 
ªsu…
 = 
k
.
	`num_blocks
(Ë/ 
	`num_shadî
();

1880 i‡(
k
.
	`num_blocks
(Ë% 
	`num_shadî
())

1881 
ªsu…
++;

1884 
	`as£π
–
ªsu…
 <
MAX_CTA_PER_SHADER
 );

1885 i‡(
ªsu…
 < 1) {

1886 
	`¥ötf
 ("GPGPU-Sim uArch: ERROR ** KernelÑequires moreÑesourcesÅhan shader has.\n");

1887 
	`ab‹t
();

1890  
ªsu…
;

1891 
	}
}

1893 
	gshadî_c‹e_˘x
::
	$cy˛e
()

1897 
	`KAIN_£t_begö1
(
ThªadID
);

1898 
	`wrôeback
();

1899 
	`KAIN_£t_íd1
(
ThªadID
);

1900 
wb_time
[
ThªadID
]+
	`KAIN_time1
(ThreadID);

1903 
	`KAIN_£t_begö1
(
ThªadID
);

1904 
	`execuã
();

1905 
	`KAIN_£t_íd1
(
ThªadID
);

1906 
ex_time
[
ThªadID
]+
	`KAIN_time1
(ThreadID);

1909 
	`KAIN_£t_begö1
(
ThªadID
);

1910 
	`ªad_›î™ds
();

1911 
	`KAIN_£t_íd1
(
ThªadID
);

1912 
ªad_time
[
ThªadID
]+
	`KAIN_time1
(ThreadID);

1915 
	`KAIN_£t_begö1
(
ThªadID
);

1916 
	`issue
();

1917 
	`KAIN_£t_íd1
(
ThªadID
);

1918 
issue_time
[
ThªadID
]+
	`KAIN_time1
(ThreadID);

1921 
	`KAIN_£t_begö1
(
ThªadID
);

1922 
	`decode
();

1924 
	`KAIN_£t_íd1
(
ThªadID
);

1925 
decode_time
[
ThªadID
]+
	`KAIN_time1
(ThreadID);

1928 
	`KAIN_£t_begö1
(
ThªadID
);

1929 
	`„tch
();

1931 
	`KAIN_£t_íd1
(
ThªadID
);

1932 
„tch_time
[
ThªadID
]+
	`KAIN_time1
(ThreadID);

1934 
	}
}

1938 
	gshadî_c‹e_˘x
::
	$ˇche_Êush
()

1940 
m_ld°_unô
->
	`Êush
();

1941 
	}
}

1944 
	g°d
::
li°
<
›ndcﬁl_rfu_t
::
›_t
> o≤dcﬁl_rfu_t::
¨bôî_t
::
	$Æloˇã_ªads
()

1946 
°d
::
li°
<
›_t
> 
ªsu…
;

1948 
öput
;

1949 
ouçut
;

1950 
_öputs
 = 
m_num_b™ks
;

1951 
_ouçuts
 = 
m_num_cﬁÀ˘‹s
;

1952 
_squ¨e
 = ( 
_öputs
 > 
_ouçuts
 ) ? _inputs : _outputs;

1953 
	`as£π
(
_squ¨e
 > 0);

1954 
_¥i
 = ()
m_œ°_cu
;

1957  
i
 = 0; i < 
_öputs
; ++i )

1958 
_öm©ch
[
i
] = -1;

1959  
j
 = 0; j < 
_ouçuts
; ++j )

1960 
_outm©ch
[
j
] = -1;

1962  
i
=0; i<
m_num_b™ks
; i++) {

1963  
j
=0; j<
m_num_cﬁÀ˘‹s
; j++) {

1964 
	`as£π
–
i
 < ()
_öputs
 );

1965 
	`as£π
–
j
 < ()
_ouçuts
 );

1966 
_ªque°
[
i
][
j
] = 0;

1968 if–!
m_queue
[
i
].
	`em±y
() ) {

1969 c⁄° 
›_t
 &
›
 = 
m_queue
[
i
].
	`‰⁄t
();

1970 
oc_id
 = 
›
.
	`gë_oc_id
();

1971 
	`as£π
–
i
 < ()
_öputs
 );

1972 
	`as£π
–
oc_id
 < 
_ouçuts
 );

1973 
_ªque°
[
i
][
oc_id
] = 1;

1975 if–
m_Æloˇãd_b™k
[
i
].
	`is_wrôe
() ) {

1976 
	`as£π
–
i
 < ()
_öputs
 );

1977 
_öm©ch
[
i
] = 0;

1985  
p
 = 0;Ö < 
_squ¨e
; ++p ) {

1986 
ouçut
 = ( 
_¥i
 + 
p
 ) % 
_squ¨e
;

1989  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

1990 
	`as£π
–
öput
 < 
_öputs
 );

1991 
	`as£π
–
ouçut
 < 
_ouçuts
 );

1992 i‡––
ouçut
 < 
_ouçuts
 ) &&

1993 –
_öm©ch
[
öput
] == -1 ) &&

1994 –
_outm©ch
[
ouçut
] == -1 ) &&

1995 –
_ªque°
[
öput
][
ouçut
] ) ) {

1997 
_öm©ch
[
öput
] = 
ouçut
;

1998 
_outm©ch
[
ouçut
] = 
öput
;

2001 
ouçut
 = ( ouçuà+ 1 ) % 
_squ¨e
;

2006 
_¥i
 = ( _¥ò+ 1 ) % 
_squ¨e
;

2010 
m_œ°_cu
 = 
_¥i
;

2011  
i
=0; i < 
m_num_b™ks
; i++ ) {

2012 if–
_öm©ch
[
i
] != -1 ) {

2013 if–!
m_Æloˇãd_b™k
[
i
].
	`is_wrôe
() ) {

2014 
b™k
 = ()
i
;

2015 
›_t
 &
›
 = 
m_queue
[
b™k
].
	`‰⁄t
();

2016 
ªsu…
.
	`push_back
(
›
);

2017 
m_queue
[
b™k
].
	`p›_‰⁄t
();

2022  
ªsu…
;

2023 
	}
}

2025 
	gb¨rõr_£t_t
::
	$b¨rõr_£t_t
–
max_w¨ps_≥r_c‹e
, 
max_˘a_≥r_c‹e
 )

2027 
m_max_w¨ps_≥r_c‹e
 = 
max_w¨ps_≥r_c‹e
;

2028 
m_max_˘a_≥r_c‹e
 = 
max_˘a_≥r_c‹e
;

2029 if–
max_w¨ps_≥r_c‹e
 > 
WARP_PER_CTA_MAX
 ) {

2030 
	`¥ötf
("ERROR ** increase WARP_PER_CTA_MAX in shader.h from %uÅo >= %u or warpsÖer cta in gpgpusim.config\n",

2031 
WARP_PER_CTA_MAX
, 
max_w¨ps_≥r_c‹e
 );

2032 
	`exô
(1);

2034 
m_w¨p_a˘ive
.
	`ª£t
();

2035 
m_w¨p_©_b¨rõr
.
	`ª£t
();

2036 
	}
}

2039 
	gb¨rõr_£t_t
::
	$Æloˇã_b¨rõr
–
˘a_id
, 
w¨p_£t_t
 
w¨ps
 )

2041 
	`as£π
–
˘a_id
 < 
m_max_˘a_≥r_c‹e
 );

2042 
˘a_to_w¨p_t
::
ôî©‹
 
w
=
m_˘a_to_w¨ps
.
	`föd
(
˘a_id
);

2043 
	`as£π
–
w
 =
m_˘a_to_w¨ps
.
	`íd
() );

2044 
m_˘a_to_w¨ps
[
˘a_id
] = 
w¨ps
;

2045 
	`as£π
–
m_˘a_to_w¨ps
.
	`size
(Ë<
m_max_˘a_≥r_c‹e
 );

2047 
m_w¨p_a˘ive
 |
w¨ps
;

2048 
m_w¨p_©_b¨rõr
 &~
w¨ps
;

2049 
	}
}

2052 
	gb¨rõr_£t_t
::
	$dóŒoˇã_b¨rõr
–
˘a_id
 )

2054 
˘a_to_w¨p_t
::
ôî©‹
 
w
=
m_˘a_to_w¨ps
.
	`föd
(
˘a_id
);

2055 if–
w
 =
m_˘a_to_w¨ps
.
	`íd
() )

2057 
w¨p_£t_t
 
w¨ps
 = 
w
->
£c⁄d
;

2058 
w¨p_£t_t
 
©_b¨rõr
 = 
w¨ps
 & 
m_w¨p_©_b¨rõr
;

2059 
	`as£π
–
©_b¨rõr
.
	`™y
(Ë=
Ál£
 );

2060 
w¨p_£t_t
 
a˘ive
 = 
w¨ps
 & 
m_w¨p_a˘ive
;

2061 
	`as£π
–
a˘ive
.
	`™y
(Ë=
Ál£
 );

2062 
m_w¨p_a˘ive
 &~
w¨ps
;

2063 
m_w¨p_©_b¨rõr
 &~
w¨ps
;

2064 
m_˘a_to_w¨ps
.
	`îa£
(
w
);

2065 
	}
}

2068 
	gb¨rõr_£t_t
::
	$w¨p_ªaches_b¨rõr
–
˘a_id
, 
w¨p_id
 )

2070 
˘a_to_w¨p_t
::
ôî©‹
 
w
=
m_˘a_to_w¨ps
.
	`föd
(
˘a_id
);

2072 if–
w
 =
m_˘a_to_w¨ps
.
	`íd
() ) {

2073 
	`¥ötf
("ERROR ** cè_id %uÇŸ found i¿b¨rõ∏£à⁄ cy˛ê%Œu+%Œu...\n", 
˘a_id
, 
gpu_tŸ_sim_cy˛e
, 
gpu_sim_cy˛e
 );

2074 
	`dump
();

2075 
	`ab‹t
();

2077 
	`as£π
–
w
->
£c⁄d
.
	`ã°
(
w¨p_id
Ë=
åue
 );

2079 
m_w¨p_©_b¨rõr
.
	`£t
(
w¨p_id
);

2081 
w¨p_£t_t
 
w¨ps_ö_˘a
 = 
w
->
£c⁄d
;

2082 
w¨p_£t_t
 
©_b¨rõr
 = 
w¨ps_ö_˘a
 & 
m_w¨p_©_b¨rõr
;

2083 
w¨p_£t_t
 
a˘ive
 = 
w¨ps_ö_˘a
 & 
m_w¨p_a˘ive
;

2085 if–
©_b¨rõr
 =
a˘ive
 ) {

2087 
m_w¨p_©_b¨rõr
 &~
©_b¨rõr
;

2089 
	}
}

2092 
boﬁ
 
	gb¨rõr_£t_t
::
	$avaûabÀ_f‹_„tch
–
w¨p_id
 ) const

2094  
m_w¨p_a˘ive
.
	`ã°
(
w¨p_id
Ë&& 
m_w¨p_©_b¨rõr
.test(warp_id);

2095 
	}
}

2098 
	gb¨rõr_£t_t
::
	$w¨p_exô
–
w¨p_id
 )

2102 
m_w¨p_a˘ive
.
	`ª£t
(
w¨p_id
);

2105 
˘a_to_w¨p_t
::
ôî©‹
 
w
=
m_˘a_to_w¨ps
.
	`begö
();

2106 ; 
w
 !
m_˘a_to_w¨ps
.
	`íd
(); ++w) {

2107 i‡(
w
->
£c⁄d
.
	`ã°
(
w¨p_id
Ë=
åue
) ;

2109 
w¨p_£t_t
 
w¨ps_ö_˘a
 = 
w
->
£c⁄d
;

2110 
w¨p_£t_t
 
©_b¨rõr
 = 
w¨ps_ö_˘a
 & 
m_w¨p_©_b¨rõr
;

2111 
w¨p_£t_t
 
a˘ive
 = 
w¨ps_ö_˘a
 & 
m_w¨p_a˘ive
;

2113 if–
©_b¨rõr
 =
a˘ive
 ) {

2115 
m_w¨p_©_b¨rõr
 &~
©_b¨rõr
;

2117 
	}
}

2120 
boﬁ
 
	gb¨rõr_£t_t
::
	$w¨p_waôög_©_b¨rõr
–
w¨p_id
 ) const

2122  
m_w¨p_©_b¨rõr
.
	`ã°
(
w¨p_id
);

2123 
	}
}

2125 
	gb¨rõr_£t_t
::
	$dump
() const

2127 
	`¥ötf
( "barrier set information\n");

2128 
	`¥ötf
–" m_max_˘a_≥r_c‹ê%u\n", 
m_max_˘a_≥r_c‹e
 );

2129 
	`¥ötf
–" m_max_w¨ps_≥r_c‹ê%u\n", 
m_max_w¨ps_≥r_c‹e
 );

2130 
	`¥ötf
( " cta_to_warps:\n");

2132 
˘a_to_w¨p_t
::
c⁄°_ôî©‹
 
i
;

2133  
i
=
m_˘a_to_w¨ps
.
	`begö
(); i!=m_˘a_to_w¨ps.
	`íd
(); i++ ) {

2134 
˘a_id
 = 
i
->
fú°
;

2135 
w¨p_£t_t
 
w¨ps
 = 
i
->
£c⁄d
;

2136 
	`¥ötf
(" cè_id %u : %s\n", 
˘a_id
, 
w¨ps
.
	`to_°rög
().
	`c_°r
() );

2138 
	`¥ötf
(" w¨p_a˘ive: %s\n", 
m_w¨p_a˘ive
.
	`to_°rög
().
	`c_°r
() );

2139 
	`¥ötf
(" w¨p_©_b¨rõr: %s\n", 
m_w¨p_©_b¨rõr
.
	`to_°rög
().
	`c_°r
() );

2140 
	`fÊush
(
°dout
);

2141 
	}
}

2143 
	gshadî_c‹e_˘x
::
	$w¨p_exô
–
w¨p_id
 )

2145 
boﬁ
 
d⁄e
 = 
åue
;

2146  
i
 = 
w¨p_id
*
	`gë_c⁄fig
()->
w¨p_size
;

2147 
i
 < (
w¨p_id
+1)*
	`gë_c⁄fig
()->
w¨p_size
;

2148 
i
++ ) {

2155 i‡(
m_thªad
[
i
] && !m_thªad[i]->
	`is_d⁄e
()Ë
d⁄e
 = 
Ál£
;

2159 i‡(
d⁄e
)

2160 
m_b¨rõrs
.
	`w¨p_exô
–
w¨p_id
 );

2161 
	}
}

2163 
boﬁ
 
	gshadî_c‹e_˘x
::
	$w¨p_waôög_©_b¨rõr
–
w¨p_id
 ) const

2165  
m_b¨rõrs
.
	`w¨p_waôög_©_b¨rõr
(
w¨p_id
);

2166 
	}
}

2168 
boﬁ
 
	gshadî_c‹e_˘x
::
	$w¨p_waôög_©_mem_b¨rõr
–
w¨p_id
 )

2170 if–!
m_w¨p
[
w¨p_id
].
	`gë_memb¨
() )

2171  
Ál£
;

2172 if–!
m_sc‹ebﬂrd
->
	`≥ndögWrôes
(
w¨p_id
) ) {

2173 
m_w¨p
[
w¨p_id
].
	`˛ór_memb¨
();

2174  
Ál£
;

2176  
åue
;

2177 
	}
}

2179 
	gshadî_c‹e_˘x
::
	$£t_max_˘a
–c⁄° 
kî√l_öfo_t
 &
kî√l
)

2182 
kî√l_max_˘a_≥r_shadî
 = 
m_c⁄fig
->
	`max_˘a
(
kî√l
);

2183 
gpu_˘a_size
 = 
kî√l
.
	`thªads_≥r_˘a
();

2184 
kî√l_∑dded_thªads_≥r_˘a
 = (
gpu_˘a_size
%
m_c⁄fig
->
w¨p_size
) ?

2185 
m_c⁄fig
->
w¨p_size
*((
gpu_˘a_size
/m_config->warp_size)+1) :

2186 
gpu_˘a_size
;

2187 
	}
}

2189 
	gshadî_c‹e_˘x
::
	$de¸emít_©omic_cou¡
–
wid
, 
n
 )

2191 
	`as£π
–
m_w¨p
[
wid
].
	`gë_n_©omic
(Ë>
n
 );

2192 
m_w¨p
[
wid
].
	`dec_n_©omic
(
n
);

2193 
	}
}

2196 
boﬁ
 
	gshadî_c‹e_˘x
::
	$„tch_unô_ª•⁄£_buf„r_fuŒ
() const

2198  
Ál£
;

2199 
	}
}

2201 
	gshadî_c‹e_˘x
::
	$ac˚±_„tch_ª•⁄£
–
mem_„tch
 *
mf
 )

2203 
mf
->
	`£t_°©us
(
IN_SHADER_FETCHED
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

2204 
m_L1I
->
	`fûl
(
mf
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

2205 
	}
}

2207 
boﬁ
 
	gshadî_c‹e_˘x
::
	$ld°_unô_ª•⁄£_buf„r_fuŒ
() const

2209  
m_ld°_unô
->
	`ª•⁄£_buf„r_fuŒ
();

2210 
	}
}

2212 
	gshadî_c‹e_˘x
::
	$ac˚±_ld°_unô_ª•⁄£
(
mem_„tch
 * 
mf
)

2214 
m_ld°_unô
->
	`fûl
(
mf
);

2215 
	}
}

2217 
	gshadî_c‹e_˘x
::
	$°‹e_ack
–
˛ass
 
mem_„tch
 *
mf
 )

2219 
	`as£π
–
mf
->
	`gë_ty≥
(Ë=
WRITE_ACK
 || ( 
m_c⁄fig
->
gpgpu_≥r„˘_mem
 && mf->
	`gë_is_wrôe
() ) );

2220 
w¨p_id
 = 
mf
->
	`gë_wid
();

2221 
m_w¨p
[
w¨p_id
].
	`dec_°‹e_ªq
();

2222 
	}
}

2224 
	gshadî_c‹e_˘x
::
	$¥öt_ˇche_°©s
–
FILE
 *
Â
, & 
dl1_ac˚s£s
, & 
dl1_mis£s
 ) {

2225 
m_ld°_unô
->
	`¥öt_ˇche_°©s
–
Â
, 
dl1_ac˚s£s
, 
dl1_mis£s
 );

2226 
	}
}

2228 
boﬁ
 
	gshd_w¨p_t
::
	$fun˘i⁄Æ_d⁄e
() const

2230  
	`gë_n_com∂ëed
(Ë=
m_w¨p_size
;

2231 
	}
}

2233 
boﬁ
 
	gshd_w¨p_t
::
	$h¨dw¨e_d⁄e
() const

2235  
	`fun˘i⁄Æ_d⁄e
(Ë&& 
	`°‹es_d⁄e
(Ë&& !
	`ö°_ö_pùñöe
();

2236 
	}
}

2238 
boﬁ
 
	gshd_w¨p_t
::
	$waôög
()

2240 i‡–
	`fun˘i⁄Æ_d⁄e
() ) {

2242  
åue
;

2243 } i‡–
m_shadî
->
	`w¨p_waôög_©_b¨rõr
(
m_w¨p_id
) ) {

2245  
åue
;

2246 } i‡–
m_shadî
->
	`w¨p_waôög_©_mem_b¨rõr
(
m_w¨p_id
) ) {

2248  
åue
;

2249 } i‡–
m_n_©omic
 >0 ) {

2255  
åue
;

2257  
Ál£
;

2258 
	}
}

2260 
	gshd_w¨p_t
::
	$¥öt
–
FILE
 *
fout
 ) const

2262 if–!
	`d⁄e_exô
() ) {

2263 
	`Ârötf
–
fout
, "w%02uÇpc: 0x%04x, done:%c%c%c%c:%2u i:%u s:%uá:%u (done: ",

2264 
m_w¨p_id
,

2265 
m_√xt_pc
,

2266 (
	`fun˘i⁄Æ_d⁄e
()?'f':' '),

2267 (
	`°‹es_d⁄e
()?'s':' '),

2268 (
	`ö°_ö_pùñöe
()?' ':'i'),

2269 (
	`d⁄e_exô
()?'e':' '),

2270 
n_com∂ëed
,

2271 
m_ö°_ö_pùñöe
,

2272 
m_°‹es_out°™dög
,

2273 
m_n_©omic
 );

2274 
i
 = 
m_w¨p_id
*
m_w¨p_size
; i < (m_warp_id+1)*m_warp_size; i++ ) {

2275 i‡–
m_shadî
->
	`±x_thªad_d⁄e
(
i
ËË
	`Ârötf
(
fout
,"1");

2276 
	`Ârötf
(
fout
,"0");

2277 i‡–(((
i
+1)%4Ë=0Ë&& (i+1Ë< (
m_w¨p_id
+1)*
m_w¨p_size
 )

2278 
	`Ârötf
(
fout
,",");

2280 
	`Ârötf
(
fout
,") ");

2281 
	`Ârötf
(
fout
,"á˘ive=%s", 
m_a˘ive_thªads
.
	`to_°rög
().
	`c_°r
() );

2282 
	`Ârötf
(
fout
,"Üa° fëched @ %5Œu", 
m_œ°_„tch
);

2283 if–
m_imiss_≥ndög
 )

2284 
	`Ârötf
(
fout
," i-missÖending");

2285 
	`Ârötf
(
fout
,"\n");

2287 
	}
}

2289 
	gshd_w¨p_t
::
	$¥öt_ibuf„r
–
FILE
 *
fout
 ) const

2291 
	`Ârötf
(
fout
," ibuf„r[%2u] : ", 
m_w¨p_id
 );

2292  
i
=0; i < 
IBUFFER_SIZE
; i++) {

2293 c⁄° 
ö°_t
 *
ö°
 = 
m_ibuf„r
[
i
].
m_ö°
;

2294 if–
ö°
 ) in°->
	`¥öt_ö¢
(
fout
);

2295 if–
m_ibuf„r
[
i
].
m_vÆid
 )

2296 
	`Ârötf
(
fout
," <invalid instruction> ");

2297 
	`Ârötf
(
fout
," <empty> ");

2299 
	`Ârötf
(
fout
,"\n");

2300 
	}
}

2302 
	g›ndcﬁl_rfu_t
::
	$add_cu_£t
(
£t_id
, 
num_cu
, 
num_di•©ch
){

2303 
m_cus
[
£t_id
].
	`ª£rve
(
num_cu
);

2304 
i
 = 0; i < 
num_cu
; i++) {

2305 
m_cus
[
£t_id
].
	`push_back
(
	`cﬁÀ˘‹_unô_t
());

2306 
m_cu
.
	`push_back
(&
m_cus
[
£t_id
].
	`back
());

2309 
i
 = 0; i < 
num_di•©ch
; i++) {

2310 
m_di•©ch_unôs
.
	`push_back
(
	`di•©ch_unô_t
(&
m_cus
[
£t_id
]));

2312 
	}
}

2315 
	g›ndcﬁl_rfu_t
::
	$add_p‹t
(
p‹t_ve˘‹_t
 & 
öput
,Ö‹t_ve˘‹_à& 
ouçut
, 
uöt_ve˘‹_t
 
cu_£ts
)

2325 
m_ö_p‹ts
.
	`push_back
(
	`öput_p‹t_t
(
öput
,
ouçut
,
cu_£ts
));

2326 
	}
}

2328 
	g›ndcﬁl_rfu_t
::
	$öô
–
num_b™ks
, 
shadî_c‹e_˘x
 *
shadî
 )

2330 
m_shadî
=
shadî
;

2331 
m_¨bôî
.
	`öô
(
m_cu
.
	`size
(),
num_b™ks
);

2334 
m_num_b™ks
 = 
num_b™ks
;

2335 
m_b™k_w¨p_shi·
 = 0;

2336 
m_w¨p_size
 = 
shadî
->
	`gë_c⁄fig
()->
w¨p_size
;

2337 
m_b™k_w¨p_shi·
 = ()(Ë(
	`log
(
m_w¨p_size
+0.5) /Üog(2.0));

2338 
	`as£π
–(
m_b™k_w¨p_shi·
 =5Ë|| (
m_w¨p_size
 != 32) );

2340  
j
=0; j<
m_cu
.
	`size
(); j++) {

2341 
m_cu
[
j
]->
	`öô
(j,
num_b™ks
,
m_b™k_w¨p_shi·
,
shadî
->
	`gë_c⁄fig
(),
this
);

2343 
m_öôülized
=
åue
;

2344 
	}
}

2346 
	$ªgi°î_b™k
(
ªgnum
, 
wid
, 
num_b™ks
, 
b™k_w¨p_shi·
)

2348 
b™k
 = 
ªgnum
;

2349 i‡(
b™k_w¨p_shi·
)

2350 
b™k
 +
wid
;

2351  
b™k
 % 
num_b™ks
;

2352 
	}
}

2354 
boﬁ
 
	g›ndcﬁl_rfu_t
::
	$wrôeback
–c⁄° 
w¨p_ö°_t
 &
ö°
 )

2356 
	`as£π
–!
ö°
.
	`em±y
() );

2357 
°d
::
li°
<> 
ªgs
 = 
m_shadî
->
	`gë_ªgs_wrôãn
(
ö°
);

2358 
°d
::
li°
<>::
ôî©‹
 
r
;

2359 
n
=0;

2360  
r
=
ªgs
.
	`begö
();Ñ!Ùegs.
	`íd
();r++,
n
++ ) {

2361 
ªg
 = *
r
;

2362 
b™k
 = 
	`ªgi°î_b™k
(
ªg
,
ö°
.
	`w¨p_id
(),
m_num_b™ks
,
m_b™k_w¨p_shi·
);

2363 if–
m_¨bôî
.
	`b™k_idÀ
(
b™k
) ) {

2364 
m_¨bôî
.
	`Æloˇã_b™k_f‹_wrôe
(
b™k
,
	`›_t
(&
ö°
,
ªg
,
m_num_b™ks
,
m_b™k_w¨p_shi·
));

2366  
Ál£
;

2369  
åue
;

2370 
	}
}

2372 
	g›ndcﬁl_rfu_t
::
	$di•©ch_ªady_cu
()

2374  
p
=0;Ö < 
m_di•©ch_unôs
.
	`size
(); ++p ) {

2375 
di•©ch_unô_t
 &
du
 = 
m_di•©ch_unôs
[
p
];

2376 
cﬁÀ˘‹_unô_t
 *
cu
 = 
du
.
	`föd_ªady
();

2377 if–
cu
 ) {

2378 
cu
->
	`di•©ch
();

2381 
	}
}

2383 
	g›ndcﬁl_rfu_t
::
	$Æloˇã_cu
–
p‹t_num
 )

2385 
öput_p‹t_t
& 
öp
 = 
m_ö_p‹ts
[
p‹t_num
];

2386 
i
 = 0; i < 
öp
.
m_ö
.
	`size
(); i++) {

2387 if–(*
öp
.
m_ö
[
i
]).
	`has_ªady
() ) {

2389 
j
 = 0; j < 
öp
.
m_cu_£ts
.
	`size
(); j++) {

2390 
°d
::
ve˘‹
<
cﬁÀ˘‹_unô_t
> & 
cu_£t
 = 
m_cus
[
öp
.
m_cu_£ts
[
j
]];

2391 
boﬁ
 
Æloˇãd
 = 
Ál£
;

2392 
k
 = 0; k < 
cu_£t
.
	`size
(); k++) {

2393 if(
cu_£t
[
k
].
	`is_‰ì
()) {

2394 
cﬁÀ˘‹_unô_t
 *
cu
 = &
cu_£t
[
k
];

2395 
Æloˇãd
 = 
cu
->
	`Æloˇã
(
öp
.
m_ö
[
i
],öp.
m_out
[i]);

2396 
m_¨bôî
.
	`add_ªad_ªque°s
(
cu
);

2400 i‡(
Æloˇãd
) ;

2405 
	}
}

2407 
	g›ndcﬁl_rfu_t
::
	$Æloˇã_ªads
()

2410 
°d
::
li°
<
›_t
> 
Æloˇãd
 = 
m_¨bôî
.
	`Æloˇã_ªads
();

2411 
°d
::
m≠
<,
›_t
> 
ªad_›s
;

2412  
°d
::
li°
<
›_t
>::
ôî©‹
 
r
=
Æloˇãd
.
	`begö
();Ñ!˜Œoˇãd.
	`íd
();Ñ++ ) {

2413 c⁄° 
›_t
 &
º
 = *
r
;

2414 
ªg
 = 
º
.
	`gë_ªg
();

2415 
wid
 = 
º
.
	`gë_wid
();

2416 
b™k
 = 
	`ªgi°î_b™k
(
ªg
,
wid
,
m_num_b™ks
,
m_b™k_w¨p_shi·
);

2417 
m_¨bôî
.
	`Æloˇã_f‹_ªad
(
b™k
,
º
);

2418 
ªad_›s
[
b™k
] = 
º
;

2420 
°d
::
m≠
<,
›_t
>::
ôî©‹
 
r
;

2421 
r
=
ªad_›s
.
	`begö
();r!Ùód_›s.
	`íd
();++r ) {

2422 
›_t
 &
›
 = 
r
->
£c⁄d
;

2423 
cu
 = 
›
.
	`gë_oc_id
();

2424 
›î™d
 = 
›
.
	`gë_›î™d
();

2425 
m_cu
[
cu
]->
	`cﬁÀ˘_›î™d
(
›î™d
);

2427 
	}
}

2429 
boﬁ
 
	g›ndcﬁl_rfu_t
::
cﬁÀ˘‹_unô_t
::
	$ªady
() const

2431  (!
m_‰ì
Ë&& 
m_nŸ_ªady
.
	`n⁄e
(Ë&& (*
m_ouçut_ªgi°î
).
	`has_‰ì
();

2432 
	}
}

2434 
	g›ndcﬁl_rfu_t
::
cﬁÀ˘‹_unô_t
::
	$dump
(
FILE
 *
Â
, c⁄° 
shadî_c‹e_˘x
 *
shadî
 ) const

2436 if–
m_‰ì
 ) {

2437 
	`Ârötf
(
Â
," <free>\n");

2439 
m_w¨p
->
	`¥öt
(
Â
);

2440  
i
=0; i < 
MAX_REG_OPERANDS
*2; i++ ) {

2441 if–
m_nŸ_ªady
.
	`ã°
(
i
) ) {

2442 
°d
::
°rög
 
r
 = 
m_§c_›
[
i
].
	`gë_ªg_°rög
();

2443 
	`Ârötf
(
Â
," '%s'ÇŸÑódy\n", 
r
.
	`c_°r
() );

2447 
	}
}

2449 
	g›ndcﬁl_rfu_t
::
cﬁÀ˘‹_unô_t
::
	$öô
–
n
,

2450 
num_b™ks
,

2451 
log2_w¨p_size
,

2452 c⁄° 
c‹e_c⁄fig
 *
c⁄fig
,

2453 
›ndcﬁl_rfu_t
 *
rfu
 )

2455 
m_rfu
=
rfu
;

2456 
m_cuid
=
n
;

2457 
m_num_b™ks
=
num_b™ks
;

2458 
	`as£π
(
m_w¨p
==
NULL
);

2459 
m_w¨p
 = 
√w
 
	`w¨p_ö°_t
(
c⁄fig
);

2460 
m_b™k_w¨p_shi·
=
log2_w¨p_size
;

2461 
	}
}

2463 
boﬁ
 
	g›ndcﬁl_rfu_t
::
cﬁÀ˘‹_unô_t
::
	$Æloˇã
–
ªgi°î_£t
* 
pùñöe_ªg_£t
,Ñegi°î_£t* 
ouçut_ªg_£t
 )

2465 
	`as£π
(
m_‰ì
);

2466 
	`as£π
(
m_nŸ_ªady
.
	`n⁄e
());

2467 
m_‰ì
 = 
Ál£
;

2468 
m_ouçut_ªgi°î
 = 
ouçut_ªg_£t
;

2469 
w¨p_ö°_t
 **
pùñöe_ªg
 = 
pùñöe_ªg_£t
->
	`gë_ªady
();

2470 if–(
pùñöe_ªg
Ë
™d
 !((*pùñöe_ªg)->
	`em±y
()) ) {

2471 
m_w¨p_id
 = (*
pùñöe_ªg
)->
	`w¨p_id
();

2472  
›
=0; o∞< 
MAX_REG_OPERANDS
; op++ ) {

2473 
ªg_num
 = (*
pùñöe_ªg
)->
¨ch_ªg
.
§c
[
›
];

2474 if–
ªg_num
 >= 0 ) {

2475 
m_§c_›
[
›
] = 
	`›_t
–
this
, op, 
ªg_num
, 
m_num_b™ks
, 
m_b™k_w¨p_shi·
 );

2476 
m_nŸ_ªady
.
	`£t
(
›
);

2478 
m_§c_›
[
›
] = 
	`›_t
();

2481 
pùñöe_ªg_£t
->
	`move_out_to
(
m_w¨p
);

2482  
åue
;

2484  
Ál£
;

2485 
	}
}

2487 
	g›ndcﬁl_rfu_t
::
cﬁÀ˘‹_unô_t
::
	$di•©ch
()

2489 
	`as£π
–
m_nŸ_ªady
.
	`n⁄e
() );

2491 
m_ouçut_ªgi°î
->
	`move_ö
(
m_w¨p
);

2492 
m_‰ì
=
åue
;

2493 
m_ouçut_ªgi°î
 = 
NULL
;

2494  
i
=0; i<
MAX_REG_OPERANDS
*2;i++)

2495 
m_§c_›
[
i
].
	`ª£t
();

2496 
	}
}

2498 
	gsimt_c‹e_˛u°î
::
	$simt_c‹e_˛u°î
–
˛ass
 
gpgpu_sim
 *
gpu
,

2499 
˛u°î_id
,

2500 c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
,

2501 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
,

2502 
shadî_c‹e_°©s
 *
°©s
,

2503 
˛ass
 
mem‹y_°©s_t
 *
m°©s
 )

2505 
KAIN_öô_ID
 = 0;

2506 
m_c⁄fig
 = 
c⁄fig
;

2507 
m_˘a_issue_√xt_c‹e
=
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
-1;

2508 
m_˛u°î_id
=
˛u°î_id
;

2509 
m_gpu
 = 
gpu
;

2510 
m_°©s
 = 
°©s
;

2511 
m_mem‹y_°©s
 = 
m°©s
;

2512 
m_c‹e
 = 
√w
 
shadî_c‹e_˘x
*[ 
c⁄fig
->
n_simt_c‹es_≥r_˛u°î
 ];

2513  
i
=0; i < 
c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ ) {

2514 
sid
 = 
m_c⁄fig
->
	`cid_to_sid
(
i
,
m_˛u°î_id
);

2515 
m_c‹e
[
i
] = 
√w
 
	`shadî_c‹e_˘x
(
gpu
,
this
,
sid
,
m_˛u°î_id
,
c⁄fig
,
mem_c⁄fig
,
°©s
);

2516 
m_c‹e
[
i
]->
	`KAIN£tThªadID
(-1);

2517 
m_c‹e_sim_‹dî
.
	`push_back
(
i
);

2519 
	}
}

2521 
	gsimt_c‹e_˛u°î
::
	$c‹e_cy˛e
()

2523  
°d
::
li°
<>::
ôî©‹
 
ô
 = 
m_c‹e_sim_‹dî
.
	`begö
(); ià!m_c‹e_sim_‹dî.
	`íd
(); ++it ) {

2524 
m_c‹e
[*
ô
]->
	`cy˛e
();

2527 i‡(
m_c⁄fig
->
simt_c‹e_sim_‹dî
 == 1) {

2528 
m_c‹e_sim_‹dî
.
	`•li˚
(m_c‹e_sim_‹dî.
	`íd
(), m_c‹e_sim_‹dî, m_c‹e_sim_‹dî.
	`begö
());

2530 
	}
}

2532 
	gsimt_c‹e_˛u°î
::
	$ªöô
()

2534  
i
=0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ )

2535 
m_c‹e
[
i
]->
	`ªöô
(0,
m_c⁄fig
->
n_thªad_≥r_shadî
,
åue
);

2536 
	}
}

2538 
	gsimt_c‹e_˛u°î
::
	$max_˘a
–c⁄° 
kî√l_öfo_t
 &
kî√l
 )

2540  
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
 * m_c⁄fig->
	`max_˘a
(
kî√l
);

2541 
	}
}

2543 
	gsimt_c‹e_˛u°î
::
	$gë_nŸ_com∂ëed
() const

2545 
nŸ_com∂ëed
=0;

2546  
i
=0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ )

2547 
nŸ_com∂ëed
 +
m_c‹e
[
i
]->
	`gë_nŸ_com∂ëed
();

2548  
nŸ_com∂ëed
;

2549 
	}
}

2551 
	gsimt_c‹e_˛u°î
::
	$¥öt_nŸ_com∂ëed
–
FILE
 *
Â
 ) const

2553  
i
=0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ ) {

2554 
nŸ_com∂ëed
=
m_c‹e
[
i
]->
	`gë_nŸ_com∂ëed
();

2555 
sid
=
m_c⁄fig
->
	`cid_to_sid
(
i
,
m_˛u°î_id
);

2556 
	`Ârötf
(
Â
,"%u(%uË", 
sid
, 
nŸ_com∂ëed
 );

2558 
	}
}

2560 
	gsimt_c‹e_˛u°î
::
	$gë_n_a˘ive_˘a
() const

2562 
n
=0;

2563  
i
=0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ )

2564 
n
 +
m_c‹e
[
i
]->
	`gë_n_a˘ive_˘a
();

2565  
n
;

2566 
	}
}

2568 
	gsimt_c‹e_˛u°î
::
	$issue_block2c‹e
()

2570 
num_blocks_issued
=0;

2571 if(
KAIN_öô_ID
==0 )

2573 
ID
 = 
	`KAINgëThªadID
();

2574 
i
 = 0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
;i++)

2575 
m_c‹e
[
i
]->
	`KAIN£tThªadID
(
ID
);

2576 
KAIN_öô_ID
 = 1;

2579  
i
=0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ ) {

2580 
c‹e
 = (
i
+
m_˘a_issue_√xt_c‹e
+1)%
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
;

2581 if–
m_c‹e
[
c‹e
]->
	`gë_nŸ_com∂ëed
() == 0 ) {

2582 if–
m_c‹e
[
c‹e
]->
	`gë_kî√l
(Ë=
NULL
 ) {

2583 
kî√l_öfo_t
 *
k
 = 
m_gpu
->
	`£À˘_kî√l
();

2584 if–
k
 )

2585 
m_c‹e
[
c‹e
]->
	`£t_kî√l
(
k
);

2588 
kî√l_öfo_t
 *
kî√l
 = 
m_c‹e
[
c‹e
]->
	`gë_kî√l
();

2589 if–
kî√l
 && !kî√l->
	`no_m‹e_˘as_to_run
(Ë&& (
m_c‹e
[
c‹e
]->
	`gë_n_a˘ive_˘a
(Ë< 
m_c⁄fig
->
	`max_˘a
(*kernel)) ) {

2590 
m_c‹e
[
c‹e
]->
	`issue_block2c‹e
(*
kî√l
);

2591 
num_blocks_issued
++;

2592 
m_˘a_issue_√xt_c‹e
=
c‹e
;

2597  
num_blocks_issued
;

2598 
	}
}

2600 
	gsimt_c‹e_˛u°î
::
	$ˇche_Êush
()

2602  
i
=0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; i++ )

2603 
m_c‹e
[
i
]->
	`ˇche_Êush
();

2604 
	}
}

2606 
boﬁ
 
	gsimt_c‹e_˛u°î
::
	$i˙t_öje˘i⁄_buf„r_fuŒ
(
size
, 
boﬁ
 
wrôe
)

2608 
ªque°_size
 = 
size
;

2609 i‡(!
wrôe
)

2610 
ªque°_size
 = 
READ_PACKET_SIZE
;

2611  ! ::
	`i˙t_has_buf„r
(
m_˛u°î_id
, 
ªque°_size
);

2612 
	}
}

2614 
	gsimt_c‹e_˛u°î
::
	$i˙t_öje˘_ªque°_∑ckë
(
˛ass
 
mem_„tch
 *
mf
)

2617 i‡(
mf
->
	`gë_is_wrôe
()Ë
m_°©s
->
made_wrôe_mfs
++;

2618 
m_°©s
->
made_ªad_mfs
++;

2619 
mf
->
	`gë_ac˚ss_ty≥
()) {

2620 
CONST_ACC_R
: 
m_°©s
->
gpgpu_n_mem_c⁄°
++; ;

2621 
TEXTURE_ACC_R
: 
m_°©s
->
gpgpu_n_mem_ãxtuª
++; ;

2622 
GLOBAL_ACC_R
: 
m_°©s
->
gpgpu_n_mem_ªad_globÆ
++; ;

2623 
GLOBAL_ACC_W
: 
m_°©s
->
gpgpu_n_mem_wrôe_globÆ
++; ;

2624 
LOCAL_ACC_R
: 
m_°©s
->
gpgpu_n_mem_ªad_loˇl
++; ;

2625 
LOCAL_ACC_W
: 
m_°©s
->
gpgpu_n_mem_wrôe_loˇl
++; ;

2626 
INST_ACC_R
: 
m_°©s
->
gpgpu_n_mem_ªad_ö°
++; ;

2627 
L1_WRBK_ACC
: 
m_°©s
->
gpgpu_n_mem_wrôe_globÆ
++; ;

2628 : 
	`as£π
(0);

2630 
de°ö©i⁄
 = 
mf
->
	`gë_éx_addr
().
chù
;

2631 
mf
->
	`£t_°©us
(
IN_ICNT_TO_MEM
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

2632 i‡(!
mf
->
	`gë_is_wrôe
(Ë&& !mf->
	`ißtomic
())

2633 ::
	`i˙t_push
(
m_˛u°î_id
, 
m_c⁄fig
->
	`mem2devi˚
(
de°ö©i⁄
), (*)
mf
, mf->
	`gë_˘æ_size
() );

2635 ::
	`i˙t_push
(
m_˛u°î_id
, 
m_c⁄fig
->
	`mem2devi˚
(
de°ö©i⁄
), (*)
mf
, mf->
	`size
());

2636 
	}
}

2638 
	gsimt_c‹e_˛u°î
::
	$i˙t_cy˛e
()

2640 if–!
m_ª•⁄£_fifo
.
	`em±y
() ) {

2641 
mem_„tch
 *
mf
 = 
m_ª•⁄£_fifo
.
	`‰⁄t
();

2642 
cid
 = 
m_c⁄fig
->
	`sid_to_cid
(
mf
->
	`gë_sid
());

2643 if–
mf
->
	`gë_ac˚ss_ty≥
(Ë=
INST_ACC_R
 ) {

2645 if–!
m_c‹e
[
cid
]->
	`„tch_unô_ª•⁄£_buf„r_fuŒ
() ) {

2646 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

2647 
m_c‹e
[
cid
]->
	`ac˚±_„tch_ª•⁄£
(
mf
);

2651 if–!
m_c‹e
[
cid
]->
	`ld°_unô_ª•⁄£_buf„r_fuŒ
() ) {

2652 
m_ª•⁄£_fifo
.
	`p›_‰⁄t
();

2653 
m_mem‹y_°©s
->
	`memœt°©_ªad_d⁄e
(
mf
);

2654 
m_c‹e
[
cid
]->
	`ac˚±_ld°_unô_ª•⁄£
(
mf
);

2658 if–
m_ª•⁄£_fifo
.
	`size
(Ë< 
m_c⁄fig
->
n_simt_eje˘i⁄_buf„r_size
 ) {

2659 
mem_„tch
 *
mf
 = (mem_„tch*Ë::
	`i˙t_p›
(
m_˛u°î_id
);

2660 i‡(!
mf
)

2662 
	`as£π
(
mf
->
	`gë_çc
(Ë=
m_˛u°î_id
);

2663 
	`as£π
(
mf
->
	`gë_ty≥
(Ë=
READ_REPLY
 || mf->gë_ty≥(Ë=
WRITE_ACK
 );

2664 
mf
->
	`£t_°©us
(
IN_CLUSTER_TO_SHADER_QUEUE
,
gpu_sim_cy˛e
+
gpu_tŸ_sim_cy˛e
);

2666 
m_ª•⁄£_fifo
.
	`push_back
(
mf
);

2668 
	}
}

2670 
	gsimt_c‹e_˛u°î
::
	$gë_pdom_°ack_t›_öfo
–
sid
, 
tid
, *
pc
, *
Ωc
 ) const

2672 
cid
 = 
m_c⁄fig
->
	`sid_to_cid
(
sid
);

2673 
m_c‹e
[
cid
]->
	`gë_pdom_°ack_t›_öfo
(
tid
,
pc
,
Ωc
);

2674 
	}
}

2676 
	gsimt_c‹e_˛u°î
::
	$di•œy_pùñöe
–
sid
, 
FILE
 *
fout
, 
¥öt_mem
, 
mask
 )

2678 
m_c‹e
[
m_c⁄fig
->
	`sid_to_cid
(
sid
)]->
	`di•œy_pùñöe
(
fout
,
¥öt_mem
,
mask
);

2680 
	`Ârötf
(
fout
,"\n");

2681 
	`Ârötf
(
fout
,"Clu°î %uÖùñöê°©e\n", 
m_˛u°î_id
 );

2682 
	`Ârötf
(
fout
,"Re•⁄£ FIFO (occu∑ncy = %zu):\n", 
m_ª•⁄£_fifo
.
	`size
() );

2683  
°d
::
li°
<
mem_„tch
*>::
c⁄°_ôî©‹
 
i
=
m_ª•⁄£_fifo
.
	`begö
(); i !m_ª•⁄£_fifo.
	`íd
(); i++ ) {

2684 c⁄° 
mem_„tch
 *
mf
 = *
i
;

2685 
mf
->
	`¥öt
(
fout
);

2687 
	}
}

2689 
	gsimt_c‹e_˛u°î
::
	$¥öt_ˇche_°©s
–
FILE
 *
Â
, & 
dl1_ac˚s£s
, & 
dl1_mis£s
 ) const {

2690  
i
 = 0; i < 
m_c⁄fig
->
n_simt_c‹es_≥r_˛u°î
; ++i ) {

2691 
m_c‹e
[ 
i
 ]->
	`¥öt_ˇche_°©s
–
Â
, 
dl1_ac˚s£s
, 
dl1_mis£s
 );

2693 
	}
}

2695 
	gshadî_c‹e_˘x
::
	$checkExecuti⁄SètusAndUpd©e
(
w¨p_ö°_t
 &
ö°
, 
t
, 
tid
)

2697 if–
ö°
.
	`has_ˇŒback
(
t
) )

2698 
m_w¨p
[
ö°
.
	`w¨p_id
()].
	`öc_n_©omic
();

2699 i‡(
ö°
.
•a˚
.
	`is_loˇl
(Ë&& (ö°.
	`is_lﬂd
(Ë|| in°.
	`is_°‹e
())) {

2700 
√w_addr_ty≥
 
loˇœddrs
[
MAX_ACCESSES_PER_INSN_PER_THREAD
];

2701 
num_addrs
;

2702 
num_addrs
 = 
	`å™¶©e_loˇl_memaddr
(
ö°
.
	`gë_addr
(
t
), 
tid
, 
m_c⁄fig
->
n_simt_˛u°îs
*m_c⁄fig->
n_simt_c‹es_≥r_˛u°î
,

2703 
ö°
.
d©a_size
, (
√w_addr_ty≥
*Ë
loˇœddrs
 );

2704 
ö°
.
	`£t_addr
(
t
, (
√w_addr_ty≥
*Ë
loˇœddrs
, 
num_addrs
);

2706 i‡–
	`±x_thªad_d⁄e
(
tid
) ) {

2707 
m_w¨p
[
ö°
.
	`w¨p_id
()].
	`£t_com∂ëed
(
t
);

2708 
m_w¨p
[
ö°
.
	`w¨p_id
()].
	`ibuf„r_Êush
();

2712 
w¨p_id
 = 
ö°
.
	`w¨p_id
();

2713 
pc
 = 
ö°
.pc;

2714 
t
 = 0;Å < 
m_c⁄fig
->
w¨p_size
;Å++) {

2715 i‡(
ö°
.
	`a˘ive
(
t
)) {

2716 
tid
 = 
w¨p_id
 * 
m_c⁄fig
->
w¨p_size
 + 
t
;

2717 
	`cÊog_upd©e_thªad_pc
(
m_sid
, 
tid
, 
pc
);

2720 
	}
}

	@src/gpgpu-sim/shader.h

29 #i‚de‡
SHADER_H


30 
	#SHADER_H


	)

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<m©h.h
>

35 
	~<as£π.h
>

36 
	~<m≠
>

37 
	~<£t
>

38 
	~<ve˘‹
>

39 
	~<li°
>

40 
	~<bô£t
>

41 
	~<utûôy
>

42 
	~<Æg‹ôhm
>

43 
	~<deque
>

45 
	~"../cuda-sim/±x.èb.h
"

47 
	~"dñayqueue.h
"

48 
	~"°ack.h
"

49 
	~"døm.h
"

50 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

51 
	~"sc‹ebﬂrd.h
"

52 
	~"mem_„tch.h
"

53 
	~"°©s.h
"

54 
	~"gpu-ˇche.h
"

56 
	#NO_OP_FLAG
 0xFF

	)

63 
	#READ_PACKET_SIZE
 8

	)

66 
	#WRITE_PACKET_SIZE
 8

	)

68 
	#WRITE_MASK_SIZE
 8

	)

71 
	#MAX_CTA_PER_SHADER
 32

	)

73 ˛as†
	cthªad_˘x_t
 {

74 
	mpublic
:

75 
m_˘a_id
;

78 
	mn_ö¢
;

79 
	mn_ö¢_ac
;

80 
	mn_l1_mis_ac
;

81 
	mn_l1_mrghô_ac
;

82 
	mn_l1_ac˚ss_ac
;

84 
boﬁ
 
	mm_a˘ive
;

87 ˛as†
	cshd_w¨p_t
 {

88 
	mpublic
:

89 
	$shd_w¨p_t
–
˛ass
 
shadî_c‹e_˘x
 *
shadî
, 
w¨p_size
)

90 : 
	`m_shadî
(
shadî
), 
	$m_w¨p_size
(
w¨p_size
)

92 
m_°‹es_out°™dög
=0;

93 
m_ö°_ö_pùñöe
=0;

94 
	`ª£t
();

96 
	$ª£t
()

98 
	`as£π
–
m_°‹es_out°™dög
==0);

99 
	`as£π
–
m_ö°_ö_pùñöe
==0);

100 
m_imiss_≥ndög
=
Ál£
;

101 
m_w¨p_id
=()-1;

102 
n_com∂ëed
 = 
m_w¨p_size
;

103 
m_n_©omic
=0;

104 
m_memb¨
=
Ál£
;

105 
m_d⁄e_exô
=
åue
;

106 
m_œ°_„tch
=0;

107 
m_√xt
=0;

108 
	}
}

109 
öô
–
addªss_ty≥
 
°¨t_pc
, 
˘a_id
, 
wid
, c⁄° 
°d
::
bô£t
<
MAX_WARP_SIZE
> &
a˘ive
 )

111 
m_˘a_id
=
˘a_id
;

112 
	gm_w¨p_id
=
wid
;

113 
	gm_√xt_pc
=
°¨t_pc
;

114 
as£π
–
n_com∂ëed
 >
a˘ive
.
cou¡
() );

115 
as£π
–
n_com∂ëed
 <
m_w¨p_size
);

116 
	gn_com∂ëed
 -
a˘ive
.
cou¡
();

117 
	gm_a˘ive_thªads
 = 
a˘ive
;

118 
	gm_d⁄e_exô
=
Ál£
;

121 
boﬁ
 
	$fun˘i⁄Æ_d⁄e
() const;

122 
boﬁ
 
	`waôög
();

123 
boﬁ
 
	$h¨dw¨e_d⁄e
() const;

125 
boﬁ
 
	$d⁄e_exô
(Ëc⁄° {  
m_d⁄e_exô
; 
	}
}

126 
	$£t_d⁄e_exô
(Ë{ 
m_d⁄e_exô
=
åue
; 
	}
}

128 
	$¥öt
–
FILE
 *
fout
 ) const;

129 
	$¥öt_ibuf„r
–
FILE
 *
fout
 ) const;

131 
	$gë_n_com∂ëed
(Ëc⁄° {  
n_com∂ëed
; 
	}
}

132 
	$£t_com∂ëed
–
œ√
 )

134 
	`as£π
–
m_a˘ive_thªads
.
	`ã°
(
œ√
) );

135 
m_a˘ive_thªads
.
	`ª£t
(
œ√
);

136 
n_com∂ëed
++;

137 
	}
}

139 
	$£t_œ°_„tch
–
sim_cy˛e
 ) { 
m_œ°_„tch
=sim_cy˛e; 
	}
}

141 
	$gë_n_©omic
(Ëc⁄° {  
m_n_©omic
; 
	}
}

142 
	$öc_n_©omic
(Ë{ 
m_n_©omic
++; 
	}
}

143 
	$dec_n_©omic
(
n
Ë{ 
m_n_©omic
-Ú; 
	}
}

145 
	$£t_memb¨
(Ë{ 
m_memb¨
=
åue
; 
	}
}

146 
	$˛ór_memb¨
(Ë{ 
m_memb¨
=
Ál£
; 
	}
}

147 
boﬁ
 
	$gë_memb¨
(Ëc⁄° {  
m_memb¨
; 
	}
}

148 
addªss_ty≥
 
	$gë_pc
(Ëc⁄° {  
m_√xt_pc
; 
	}
}

149 
	$£t_√xt_pc
–
addªss_ty≥
 
pc
 ) { 
m_√xt_pc
 =Öc; 
	}
}

151 
	$ibuf„r_fûl
–
¶Ÿ
, c⁄° 
w¨p_ö°_t
 *
pI
 )

153 
	`as£π
(
¶Ÿ
 < 
IBUFFER_SIZE
 );

154 
m_ibuf„r
[
¶Ÿ
].
m_ö°
=
pI
;

155 
m_ibuf„r
[
¶Ÿ
].
m_vÆid
=
åue
;

156 
m_√xt
=0;

157 
	}
}

158 
boﬁ
 
	$ibuf„r_em±y
() const

160  
i
=0; i < 
IBUFFER_SIZE
; i++)

161 if(
m_ibuf„r
[
i
].
m_vÆid
)

162  
Ál£
;

163  
åue
;

164 
	}
}

165 
	$ibuf„r_Êush
()

167 
i
=0;i<
IBUFFER_SIZE
;i++) {

168 if–
m_ibuf„r
[
i
].
m_vÆid
 )

169 
	`dec_ö°_ö_pùñöe
();

170 
m_ibuf„r
[
i
].
m_ö°
=
NULL
;

171 
m_ibuf„r
[
i
].
m_vÆid
=
Ál£
;

173 
	}
}

174 c⁄° 
w¨p_ö°_t
 *
	$ibuf„r_√xt_ö°
(Ë{  
m_ibuf„r
[
m_√xt
].
m_ö°
; 
	}
}

175 
boﬁ
 
	$ibuf„r_√xt_vÆid
(Ë{  
m_ibuf„r
[
m_√xt
].
m_vÆid
; 
	}
}

176 
	$ibuf„r_‰ì
()

178 
m_ibuf„r
[
m_√xt
].
m_ö°
 = 
NULL
;

179 
m_ibuf„r
[
m_√xt
].
m_vÆid
 = 
Ál£
;

180 
	}
}

181 
	$ibuf„r_°ï
(Ë{ 
m_√xt
 = (m_√xt+1)%
IBUFFER_SIZE
; 
	}
}

183 
boﬁ
 
	$imiss_≥ndög
(Ëc⁄° {  
m_imiss_≥ndög
; 
	}
}

184 
	$£t_imiss_≥ndög
(Ë{ 
m_imiss_≥ndög
=
åue
; 
	}
}

185 
	$˛ór_imiss_≥ndög
(Ë{ 
m_imiss_≥ndög
=
Ál£
; 
	}
}

187 
boﬁ
 
	$°‹es_d⁄e
(Ëc⁄° {  
m_°‹es_out°™dög
 =0; 
	}
}

188 
	$öc_°‹e_ªq
(Ë{ 
m_°‹es_out°™dög
++; 
	}
}

189 
	$dec_°‹e_ªq
()

191 
	`as£π
–
m_°‹es_out°™dög
 > 0 );

192 
m_°‹es_out°™dög
--;

193 
	}
}

195 
boﬁ
 
	$ö°_ö_pùñöe
(Ëc⁄° {  
m_ö°_ö_pùñöe
 > 0; 
	}
}

196 
	$öc_ö°_ö_pùñöe
(Ë{ 
m_ö°_ö_pùñöe
++; 
	}
}

197 
	$dec_ö°_ö_pùñöe
()

199 
	`as£π
–
m_ö°_ö_pùñöe
 > 0 );

200 
m_ö°_ö_pùñöe
--;

201 
	}
}

203 
	$gë_˘a_id
(Ëc⁄° {  
m_˘a_id
; 
	}
}

205 
	g¥iv©e
:

206 c⁄° 
IBUFFER_SIZE
=2;

207 
˛ass
 
shadî_c‹e_˘x
 *
	gm_shadî
;

208 
	gm_˘a_id
;

209 
	gm_w¨p_id
;

210 
	gm_w¨p_size
;

212 
addªss_ty≥
 
	gm_√xt_pc
;

213 
	gn_com∂ëed
;

214 
	g°d
::
bô£t
<
MAX_WARP_SIZE
> 
m_a˘ive_thªads
;

216 
boﬁ
 
	gm_imiss_≥ndög
;

218 
	sibuf„r_íåy
 {

219 
ibuf„r_íåy
(Ë{ 
	gm_vÆid
 = 
Ál£
; 
	gm_ö°
 = 
NULL
; }

220 c⁄° 
w¨p_ö°_t
 *
	gm_ö°
;

221 
boﬁ
 
	gm_vÆid
;

223 
ibuf„r_íåy
 
	gm_ibuf„r
[
IBUFFER_SIZE
];

224 
	gm_√xt
;

226 
	gm_n_©omic
;

227 
boﬁ
 
	gm_memb¨
;

229 
boﬁ
 
	gm_d⁄e_exô
;

231 
	gm_œ°_„tch
;

233 
	gm_°‹es_out°™dög
;

234 
	gm_ö°_ö_pùñöe
;

239 
ölöe
 
	$hw_tid_‰om_wid
(
wid
, 
w¨p_size
, 
i
){ wid * w¨p_sizê+ i;
	}
};

240 
ölöe
 
	$wid_‰om_hw_tid
(
tid
, 
w¨p_size
){Åid/w¨p_size;
	}
};

242 c⁄° 
	gWARP_PER_CTA_MAX
 = 48;

243 
	g°d
::
	tbô£t
<
	tWARP_PER_CTA_MAX
> 
	tw¨p_£t_t
;

245 
ªgi°î_b™k
(
ªgnum
, 
wid
, 
num_b™ks
, 
b™k_w¨p_shi·
);

247 
˛ass
 
	gshadî_c‹e_˘x
;

248 
˛ass
 
	gshadî_c‹e_c⁄fig
;

249 
˛ass
 
	gshadî_c‹e_°©s
;

251 ˛as†
	cscheduÀr_unô
 {

252 
	mpublic
:

253 
scheduÀr_unô
(
shadî_c‹e_°©s
* 
°©s
, 
shadî_c‹e_˘x
* 
shadî
,

254 
Sc‹ebﬂrd
* 
sc‹ebﬂrd
, 
simt_°ack
** 
simt
,

255 
°d
::
ve˘‹
<
shd_w¨p_t
>* 
w¨p
,

256 
ªgi°î_£t
* 
•_out
,

257 
ªgi°î_£t
* 
sfu_out
,

258 
ªgi°î_£t
* 
mem_out
)

259 : 
su≥rvi£d_w¨ps
(), 
m_œ°_sup_id_issued
(0), 
m_°©s
(
°©s
), 
m_shadî
(
shadî
),

260 
m_sc‹ebﬂrd
(
sc‹ebﬂrd
), 
m_simt_°ack
(
simt
), 
m_w¨p
(
w¨p
),

261 
m_•_out
(
•_out
),
m_sfu_out
(
sfu_out
),
	$m_mem_out
(
mem_out
){}

262 
	$add_su≥rvi£d_w¨p_id
(
i
) {

263 
su≥rvi£d_w¨ps
.
	`push_back
(
i
);

264 
	}
}

265 
cy˛e
();

266 
	g¥iv©e
:

267 
shd_w¨p_t
& 
w¨p
(
i
);

269 
	g°d
::
ve˘‹
<> 
su≥rvi£d_w¨ps
;

270 
	gm_œ°_sup_id_issued
;

271 
shadî_c‹e_°©s
 *
	gm_°©s
;

272 
shadî_c‹e_˘x
* 
	gm_shadî
;

274 
Sc‹ebﬂrd
* 
	gm_sc‹ebﬂrd
;

275 
simt_°ack
** 
	gm_simt_°ack
;

277 
	g°d
::
ve˘‹
<
shd_w¨p_t
>* 
m_w¨p
;

278 
ªgi°î_£t
* 
	gm_•_out
;

279 
ªgi°î_£t
* 
	gm_sfu_out
;

280 
ªgi°î_£t
* 
	gm_mem_out
;

287 ˛as†
	c›ndcﬁl_rfu_t
 {

288 
	mpublic
:

290 
	$›ndcﬁl_rfu_t
()

292 
m_num_b™ks
=0;

293 
m_shadî
=
NULL
;

294 
m_öôülized
=
Ál£
;

296 
	`add_cu_£t
(
cu_£t
, 
num_cu
, 
num_di•©ch
);

297 
°d
::
	tve˘‹
<
	tªgi°î_£t
*> 
	tp‹t_ve˘‹_t
;

298 
°d
::
	tve˘‹
<> 
	tuöt_ve˘‹_t
;

299 
	`add_p‹t
–
p‹t_ve˘‹_t
 & 
öput
,Ö‹t_ve˘‹_à& 
ouput
, 
uöt_ve˘‹_t
 
cu_£ts
);

300 
	`öô
–
num_b™ks
, 
shadî_c‹e_˘x
 *
shadî
 );

303 
boﬁ
 
	`wrôeback
–c⁄° 
w¨p_ö°_t
 &
w¨p
 );

305 
	$°ï
()

307 
	`di•©ch_ªady_cu
();

308 
	`Æloˇã_ªads
();

309  
p
 = 0 ;Ö < 
m_ö_p‹ts
.
	`size
();Ö++ )

310 
	`Æloˇã_cu
–
p
 );

311 
	`¥o˚ss_b™ks
();

312 
	}
}

314 
	$dump
–
FILE
 *
Â
 ) const

316 
	`Ârötf
(
Â
,"\n");

317 
	`Ârötf
(
Â
,"Operand Collector State:\n");

318  
n
=0;Ç < 
m_cu
.
	`size
();Ç++ ) {

319 
	`Ârötf
(
Â
," CU-%2u: ", 
n
);

320 
m_cu
[
n
]->
	`dump
(
Â
,
m_shadî
);

322 
m_¨bôî
.
	`dump
(
Â
);

323 
	}
}

325 
shadî_c‹e_˘x
 *
	$shadî_c‹e
(Ë{  
m_shadî
; 
	}
}

327 
	g¥iv©e
:

329 
	$¥o˚ss_b™ks
()

331 
m_¨bôî
.
	`ª£t_Ælo˘i⁄
();

332 
	}
}

334 
di•©ch_ªady_cu
();

335 
Æloˇã_cu
–
p‹t
 );

336 
Æloˇã_ªads
();

340 
˛ass
 
	gcﬁÀ˘‹_unô_t
;

342 ˛as†
	c›_t
 {

343 
	gpublic
:

345 
›_t
(Ë{ 
m_vÆid
 = 
Ál£
; }

346 
›_t
–
cﬁÀ˘‹_unô_t
 *
cu
, 
›
, 
ªg
, 
num_b™ks
, 
b™k_w¨p_shi·
 )

348 
	gm_vÆid
 = 
åue
;

349 
	gm_w¨p
=
NULL
;

350 
	gm_cu
 = 
cu
;

351 
	gm_›î™d
 = 
›
;

352 
	gm_ªgi°î
 = 
ªg
;

353 
	gm_b™k
 = 
ªgi°î_b™k
(
ªg
,
cu
->
gë_w¨p_id
(),
num_b™ks
,
b™k_w¨p_shi·
);

355 
›_t
–c⁄° 
w¨p_ö°_t
 *
w¨p
, 
ªg
, 
num_b™ks
, 
b™k_w¨p_shi·
 )

357 
	gm_vÆid
=
åue
;

358 
	gm_w¨p
=
w¨p
;

359 
	gm_ªgi°î
=
ªg
;

360 
	gm_cu
=
NULL
;

361 
	gm_›î™d
 = -1;

362 
	gm_b™k
 = 
ªgi°î_b™k
(
ªg
,
w¨p
->
w¨p_id
(),
num_b™ks
,
b™k_w¨p_shi·
);

366 
boﬁ
 
vÆid
(Ëc⁄° {  
	gm_vÆid
; }

367 
gë_ªg
() const

369 
as£π
–
m_vÆid
 );

370  
	gm_ªgi°î
;

372 
gë_wid
() const

374 if–
	gm_w¨p
 )  m_w¨p->
w¨p_id
();

375 if–
	gm_cu
 )  m_cu->
gë_w¨p_id
();

376 
ab‹t
();

379 
gë_oc_id
(Ëc⁄° {  
	gm_cu
->
gë_id
(); }

380 
gë_b™k
(Ëc⁄° {  
	gm_b™k
; }

381 
gë_›î™d
(Ëc⁄° {  
	gm_›î™d
; }

382 
dump
(
FILE
 *
Â
) const

384 if(
	gm_cu
)

385 
Ârötf
(
Â
," <R%u, CU:%u, w:%02u> ", 
m_ªgi°î
,
m_cu
->
gë_id
(),m_cu->
gë_w¨p_id
());

386 if–!
	gm_w¨p
->
em±y
() )

387 
Ârötf
(
Â
," <R%u, wid:%02u> ", 
m_ªgi°î
,
m_w¨p
->
w¨p_id
() );

389 
	g°d
::
°rög
 
gë_ªg_°rög
() const

391 
buf„r
[64];

392 
¢¥ötf
(
buf„r
,64,"R%u", 
m_ªgi°î
);

393  
	g°d
::
°rög
(
buf„r
);

397 
ª£t
(Ë{ 
	gm_vÆid
 = 
Ál£
; }

398 
	g¥iv©e
:

399 
boﬁ
 
m_vÆid
;

400 
cﬁÀ˘‹_unô_t
 *
	gm_cu
;

401 c⁄° 
w¨p_ö°_t
 *
	gm_w¨p
;

402 
	gm_›î™d
;

403 
	gm_ªgi°î
;

404 
	gm_b™k
;

407 
	eÆloc_t
 {

408 
	gNO_ALLOC
,

409 
	gREAD_ALLOC
,

410 
	gWRITE_ALLOC
,

413 ˛as†
	cÆloˇti⁄_t
 {

414 
	gpublic
:

415 
Æloˇti⁄_t
(Ë{ 
m_Æloˇti⁄
 = 
NO_ALLOC
; }

416 
boﬁ
 
is_ªad
(Ëc⁄° {  
	gm_Æloˇti⁄
==
READ_ALLOC
; }

417 
boﬁ
 
is_wrôe
(Ëc⁄° { 
	gm_Æloˇti⁄
==
WRITE_ALLOC
; }

418 
boﬁ
 
is_‰ì
(Ëc⁄° { 
	gm_Æloˇti⁄
==
NO_ALLOC
; }

419 
dump
(
FILE
 *
Â
) const {

420 if–
	gm_Æloˇti⁄
 =
NO_ALLOC
 ) { 
Ârötf
(
Â
,"<free>"); }

421 if–
	gm_Æloˇti⁄
 =
READ_ALLOC
 ) { 
Ârötf
(
Â
,"rd: "); 
	gm_›
.
dump
(fp); }

422 if–
	gm_Æloˇti⁄
 =
WRITE_ALLOC
 ) { 
Ârötf
(
Â
,"wr: "); 
	gm_›
.
dump
(fp); }

423 
Ârötf
(
Â
,"\n");

425 
Æloc_ªad
–c⁄° 
›_t
 &
›
 ) { 
as£π
(
is_‰ì
()); 
	gm_Æloˇti⁄
=
READ_ALLOC
; 
	gm_›
=op; }

426 
Æloc_wrôe
–c⁄° 
›_t
 &
›
 ) { 
as£π
(
is_‰ì
()); 
	gm_Æloˇti⁄
=
WRITE_ALLOC
; 
	gm_›
=op; }

427 
ª£t
(Ë{ 
	gm_Æloˇti⁄
 = 
NO_ALLOC
; }

428 
	g¥iv©e
:

429 
Æloc_t
 
m_Æloˇti⁄
;

430 
›_t
 
	gm_›
;

433 ˛as†
	c¨bôî_t
 {

434 
	gpublic
:

436 
¨bôî_t
()

438 
m_queue
=
NULL
;

439 
	gm_Æloˇãd_b™k
=
NULL
;

440 
	gm_Æloˇt‹_º_hód
=
NULL
;

441 
	g_öm©ch
=
NULL
;

442 
	g_outm©ch
=
NULL
;

443 
	g_ªque°
=
NULL
;

444 
	gm_œ°_cu
=0;

446 
öô
–
num_cu
, 
num_b™ks
 )

448 
as£π
(
num_cu
 > 0);

449 
as£π
(
num_b™ks
 > 0);

450 
	gm_num_cﬁÀ˘‹s
 = 
num_cu
;

451 
	gm_num_b™ks
 = 
num_b™ks
;

452 
	g_öm©ch
 = 
√w
 [ 
m_num_b™ks
 ];

453 
	g_outm©ch
 = 
√w
 [ 
m_num_cﬁÀ˘‹s
 ];

454 
	g_ªque°
 = 
√w
 *[ 
m_num_b™ks
 ];

455 
	gi
=0; i<
	gm_num_b™ks
;i++)

456 
	g_ªque°
[
i
] = 
√w
 [
m_num_cﬁÀ˘‹s
];

457 
	gm_queue
 = 
√w
 
°d
::
li°
<
›_t
>[
num_b™ks
];

458 
	gm_Æloˇãd_b™k
 = 
√w
 
Æloˇti⁄_t
[
num_b™ks
];

459 
	gm_Æloˇt‹_º_hód
 = 
√w
 [
num_cu
];

460  
	gn
=0;Ç<
	gnum_cu
;n++ )

461 
	gm_Æloˇt‹_º_hód
[
n
] =Ç%
num_b™ks
;

462 
ª£t_Ælo˘i⁄
();

466 
dump
(
FILE
 *
Â
) const

468 
Ârötf
(
Â
,"\n");

469 
Ârötf
(
Â
," Arbiter State:\n");

470 
Ârötf
(
Â
,"Ñequests:\n");

471  
	gb
=0; b<
	gm_num_b™ks
; b++ ) {

472 
Ârötf
(
Â
," b™k %u : ", 
b
 );

473 
	g°d
::
li°
<
›_t
>::
c⁄°_ôî©‹
 
o
 = 
m_queue
[
b
].
begö
();

474 ; 
	go
 !
m_queue
[
b
].
íd
(); o++ ) {

475 
	go
->
dump
(
Â
);

477 
Ârötf
(
Â
,"\n");

479 
Ârötf
(
Â
," grants:\n");

480 
	gb
=0;b<
	gm_num_b™ks
;b++) {

481 
Ârötf
(
Â
," b™k %u : ", 
b
 );

482 
	gm_Æloˇãd_b™k
[
b
].
dump
(
Â
);

484 
Ârötf
(
Â
,"\n");

488 
	g°d
::
li°
<
›_t
> 
Æloˇã_ªads
();

490 
add_ªad_ªque°s
–
cﬁÀ˘‹_unô_t
 *
cu
 )

492 c⁄° 
›_t
 *
	g§c
 = 
cu
->
gë_›î™ds
();

493  
	gi
=0; i<
	gMAX_REG_OPERANDS
*2; i++) {

494 c⁄° 
	g›_t
 &
	g›
 = 
§c
[
i
];

495 if–
	g›
.
vÆid
() ) {

496 
	gb™k
 = 
›
.
gë_b™k
();

497 
	gm_queue
[
b™k
].
push_back
(
›
);

501 
boﬁ
 
b™k_idÀ
–
b™k
 ) const

503  
	gm_Æloˇãd_b™k
[
b™k
].
is_‰ì
();

505 
Æloˇã_b™k_f‹_wrôe
–
b™k
, c⁄° 
›_t
 &
›
 )

507 
as£π
–
b™k
 < 
m_num_b™ks
 );

508 
	gm_Æloˇãd_b™k
[
b™k
].
Æloc_wrôe
(
›
);

510 
Æloˇã_f‹_ªad
–
b™k
, c⁄° 
›_t
 &
›
 )

512 
as£π
–
b™k
 < 
m_num_b™ks
 );

513 
	gm_Æloˇãd_b™k
[
b™k
].
Æloc_ªad
(
›
);

515 
ª£t_Ælo˘i⁄
()

517  
	gb
=0; b < 
	gm_num_b™ks
; b++ )

518 
	gm_Æloˇãd_b™k
[
b
].
ª£t
();

521 
	g¥iv©e
:

522 
m_num_b™ks
;

523 
	gm_num_cﬁÀ˘‹s
;

525 
Æloˇti⁄_t
 *
	gm_Æloˇãd_b™k
;

526 
	g°d
::
li°
<
›_t
> *
m_queue
;

528 *
	gm_Æloˇt‹_º_hód
;

529 
	gm_œ°_cu
;

531 *
	g_öm©ch
;

532 *
	g_outm©ch
;

533 **
	g_ªque°
;

536 ˛as†
	cöput_p‹t_t
 {

537 
	gpublic
:

538 
öput_p‹t_t
(
p‹t_ve˘‹_t
 & 
öput
,Ö‹t_ve˘‹_à& 
ouçut
, 
uöt_ve˘‹_t
 
cu_£ts
)

539 : 
m_ö
(
öput
),
m_out
(
ouçut
), 
m_cu_£ts
(
cu_£ts
)

541 
as£π
(
öput
.
size
(Ë=
ouçut
.size());

542 
as£π
(
nŸ
 
m_cu_£ts
.
em±y
());

545 
p‹t_ve˘‹_t
 
	gm_ö
,
	gm_out
;

546 
uöt_ve˘‹_t
 
	gm_cu_£ts
;

549 ˛as†
	ccﬁÀ˘‹_unô_t
 {

550 
	gpublic
:

552 
cﬁÀ˘‹_unô_t
()

554 
m_‰ì
 = 
åue
;

555 
	gm_w¨p
 = 
NULL
;

556 
	gm_ouçut_ªgi°î
 = 
NULL
;

557 
	gm_§c_›
 = 
√w
 
›_t
[
MAX_REG_OPERANDS
*2];

558 
	gm_nŸ_ªady
.
ª£t
();

559 
	gm_w¨p_id
 = -1;

560 
	gm_num_b™ks
 = 0;

561 
	gm_b™k_w¨p_shi·
 = 0;

564 
boﬁ
 
ªady
() const;

565 c⁄° 
›_t
 *
gë_›î™ds
(Ëc⁄° {  
	gm_§c_›
; }

566 
dump
(
FILE
 *
Â
, c⁄° 
shadî_c‹e_˘x
 *
shadî
 ) const;

568 
gë_w¨p_id
(Ëc⁄° {  
	gm_w¨p_id
; }

569 
gë_id
(Ëc⁄° {  
	gm_cuid
; }

572 
öô
(
n
,

573 
num_b™ks
,

574 
log2_w¨p_size
,

575 c⁄° 
c‹e_c⁄fig
 *
c⁄fig
,

576 
›ndcﬁl_rfu_t
 *
rfu
 );

577 
boﬁ
 
Æloˇã
–
ªgi°î_£t
* 
pùñöe_ªg
,Ñegi°î_£t* 
ouçut_ªg
 );

579 
cﬁÀ˘_›î™d
–
›
 )

581 
	gm_nŸ_ªady
.
ª£t
(
›
);

584 
di•©ch
();

585 
boﬁ
 
is_‰ì
(){ 
	gm_‰ì
;}

587 
	g¥iv©e
:

588 
boﬁ
 
m_‰ì
;

589 
	gm_cuid
;

590 
	gm_w¨p_id
;

591 
w¨p_ö°_t
 *
	gm_w¨p
;

592 
ªgi°î_£t
* 
	gm_ouçut_ªgi°î
;

593 
›_t
 *
	gm_§c_›
;

594 
	g°d
::
bô£t
<
MAX_REG_OPERANDS
*2> 
m_nŸ_ªady
;

595 
	gm_num_b™ks
;

596 
	gm_b™k_w¨p_shi·
;

597 
›ndcﬁl_rfu_t
 *
	gm_rfu
;

601 ˛as†
	cdi•©ch_unô_t
 {

602 
	gpublic
:

603 
di•©ch_unô_t
(
°d
::
ve˘‹
<
cﬁÀ˘‹_unô_t
>* 
cus
)

605 
m_œ°_cu
=0;

606 
	gm_cﬁÀ˘‹_unôs
=
cus
;

607 
	gm_num_cﬁÀ˘‹s
 = (*
cus
).
size
();

608 
	gm_√xt_cu
=0;

611 
cﬁÀ˘‹_unô_t
 *
föd_ªady
()

613  
	gn
=0;Ç < 
	gm_num_cﬁÀ˘‹s
;Ç++ ) {

614 
	gc
=(
m_œ°_cu
+
n
+1)%
m_num_cﬁÀ˘‹s
;

615 if–(*
	gm_cﬁÀ˘‹_unôs
)[
c
].
ªady
() ) {

616 
	gm_œ°_cu
=
c
;

617  &((*
	gm_cﬁÀ˘‹_unôs
)[
c
]);

620  
	gNULL
;

623 
	g¥iv©e
:

624 
m_num_cﬁÀ˘‹s
;

625 
	g°d
::
ve˘‹
<
cﬁÀ˘‹_unô_t
>* 
m_cﬁÀ˘‹_unôs
;

626 
	gm_œ°_cu
;

627 
	gm_√xt_cu
;

631 
boﬁ
 
	gm_öôülized
;

633 
	gm_num_cﬁÀ˘‹_£ts
;

635 
	gm_num_b™ks
;

636 
	gm_b™k_w¨p_shi·
;

637 
	gm_w¨p_size
;

638 
	g°d
::
ve˘‹
<
cﬁÀ˘‹_unô_t
 *> 
m_cu
;

639 
¨bôî_t
 
	gm_¨bôî
;

647 
	g°d
::
ve˘‹
<
öput_p‹t_t
> 
m_ö_p‹ts
;

648 
	g°d
::
	tm≠
<, 
	t°d
::
	tve˘‹
<
	tcﬁÀ˘‹_unô_t
> > 
	tcu_£ts_t
;

649 
cu_£ts_t
 
	gm_cus
;

650 
	g°d
::
ve˘‹
<
di•©ch_unô_t
> 
m_di•©ch_unôs
;

655 
shadî_c‹e_˘x
 *
	gm_shadî
;

658 ˛as†
	cb¨rõr_£t_t
 {

659 
	mpublic
:

660 
b¨rõr_£t_t
–
max_w¨ps_≥r_c‹e
, 
max_˘a_≥r_c‹e
 );

663 
Æloˇã_b¨rõr
–
˘a_id
, 
w¨p_£t_t
 
w¨ps
 );

666 
dóŒoˇã_b¨rõr
–
˘a_id
 );

668 
	m°d
::
	tm≠
<, 
	tw¨p_£t_t
 > 
	t˘a_to_w¨p_t
;

671 
w¨p_ªaches_b¨rõr
–
˘a_id
, 
w¨p_id
 );

674 
boﬁ
 
	$avaûabÀ_f‹_„tch
–
w¨p_id
 ) const;

677 
	`w¨p_exô
–
w¨p_id
 );

680 
boﬁ
 
	$w¨p_waôög_©_b¨rõr
–
w¨p_id
 ) const;

683 
	$dump
() const;

685 
¥iv©e
:

686 
m_max_˘a_≥r_c‹e
;

687 
m_max_w¨ps_≥r_c‹e
;

689 
˘a_to_w¨p_t
 
m_˘a_to_w¨ps
;

690 
w¨p_£t_t
 
m_w¨p_a˘ive
;

691 
w¨p_£t_t
 
m_w¨p_©_b¨rõr
;

694 
	sö¢_œãncy_öfo
 {

695 
pc
;

696 
œãncy
;

699 
	si„tch_buf„r_t
 {

700 
	`i„tch_buf„r_t
(Ë{ 
m_vÆid
=
Ál£
; }

702 
	`i„tch_buf„r_t
–
addªss_ty≥
 
pc
, 
nbyãs
, 
w¨p_id
 )

704 
m_vÆid
=
åue
;

705 
m_pc
=
pc
;

706 
m_nbyãs
=
nbyãs
;

707 
m_w¨p_id
=
w¨p_id
;

710 
boﬁ
 
m_vÆid
;

711 
addªss_ty≥
 
m_pc
;

712 
m_nbyãs
;

713 
m_w¨p_id
;

716 
˛ass
 
shadî_c‹e_c⁄fig
;

718 ˛as†
	csimd_fun˘i⁄_unô
 {

719 
public
:

720 
	`simd_fun˘i⁄_unô
–c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 );

721 ~
	$simd_fun˘i⁄_unô
(Ë{ 
dñëe
 
m_di•©ch_ªg
; }

724 
vútuÆ
 
	$issue
–
ªgi°î_£t
& 
sour˚_ªg
 ) { sour˚_ªg.
	`move_out_to
(
m_di•©ch_ªg
); 
occupõd
.
	`£t
(m_di•©ch_ªg->
œãncy
);
	}
}

725 
vútuÆ
 
cy˛e
() = 0;

728 
vútuÆ
 
	$˛ock_mu…ùlõr
(Ëc⁄° {  1; 
	}
}

729 
vútuÆ
 
boﬁ
 
	$ˇn_issue
–c⁄° 
w¨p_ö°_t
 &
ö°
 ) c⁄° {  
m_di•©ch_ªg
->
	`em±y
(Ë&& !
occupõd
.
	`ã°
(ö°.
œãncy
); 
	}
}

730 
vútuÆ
 
boﬁ
 
	$°ÆœbÀ
() const = 0;

731 
vútuÆ
 
	$¥öt
–
FILE
 *
Â
 ) const

733 
	`Ârötf
(
Â
,"%†di•©ch", 
m_«me
.
	`c_°r
() );

734 
m_di•©ch_ªg
->
	`¥öt
(
Â
);

735 
	}
}

736 
	g¥Ÿe˘ed
:

737 
°d
::
°rög
 
m_«me
;

738 c⁄° 
shadî_c‹e_c⁄fig
 *
	gm_c⁄fig
;

739 
w¨p_ö°_t
 *
	gm_di•©ch_ªg
;

740 c⁄° 
	gMAX_ALU_LATENCY
 = 512;

741 
	g°d
::
bô£t
<
MAX_ALU_LATENCY
> 
occupõd
;

744 ˛as†
	cpùñöed_simd_unô
 : 
public
 
simd_fun˘i⁄_unô
 {

745 
public
:

746 
pùñöed_simd_unô
–
ªgi°î_£t
* 
ªsu…_p‹t
, c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
, 
max_œãncy
 );

749 
vútuÆ
 
	$cy˛e
()

751 if–!
m_pùñöe_ªg
[0]->
	`em±y
() ){

752 
m_ªsu…_p‹t
->
	`move_ö
(
m_pùñöe_ªg
[0]);

754  
°age
=0; (°age+1)<
m_pùñöe_dïth
; stage++ )

755 
	`move_w¨p
(
m_pùñöe_ªg
[
°age
], m_pipeline_reg[stage+1]);

756 if–!
m_di•©ch_ªg
->
	`em±y
() ) {

757 if–!
m_di•©ch_ªg
->
	`di•©ch_dñay
()) {

758 
°¨t_°age
 = 
m_di•©ch_ªg
->
œãncy
 - m_di•©ch_ªg->
öôüti⁄_öãrvÆ
;

759 
	`move_w¨p
(
m_pùñöe_ªg
[
°¨t_°age
],
m_di•©ch_ªg
);

762 
occupõd
 >>=1;

765 
vútuÆ
 
	$issue
–
ªgi°î_£t
& 
sour˚_ªg
 )

769 
simd_fun˘i⁄_unô
::
	`issue
(
sour˚_ªg
);

770 
	}
}

773 
vútuÆ
 
boﬁ
 
	$°ÆœbÀ
(Ëc⁄° {  
Ál£
; 
	}
}

774 
vútuÆ
 
boﬁ
 
	$ˇn_issue
–c⁄° 
w¨p_ö°_t
 &
ö°
 ) const

776  
simd_fun˘i⁄_unô
::
	`ˇn_issue
(
ö°
);

777 
	}
}

778 
vútuÆ
 
	$¥öt
(
FILE
 *
Â
) const

780 
simd_fun˘i⁄_unô
::
	`¥öt
(
Â
);

781  
s
=
m_pùñöe_dïth
-1; s>=0; s-- ) {

782 if–!
m_pùñöe_ªg
[
s
]->
	`em±y
() ) {

783 
	`Ârötf
(
Â
," %s[%2d] ", 
m_«me
.
	`c_°r
(), 
s
 );

784 
m_pùñöe_ªg
[
s
]->
	`¥öt
(
Â
);

787 
	}
}

788 
	g¥Ÿe˘ed
:

789 
m_pùñöe_dïth
;

790 
w¨p_ö°_t
 **
	gm_pùñöe_ªg
;

791 
ªgi°î_£t
 *
	gm_ªsu…_p‹t
;

794 ˛as†
	csfu
 : 
public
 
pùñöed_simd_unô


796 
public
:

797 
sfu
–
ªgi°î_£t
* 
ªsu…_p‹t
, c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 );

798 
vútuÆ
 
boﬁ
 
	$ˇn_issue
–c⁄° 
w¨p_ö°_t
 &
ö°
 ) const

800 
ö°
.
›
) {

801 
SFU_OP
: ;

802 
ALU_SFU_OP
: ;

803 :  
Ál£
;

805  
pùñöed_simd_unô
::
	`ˇn_issue
(
ö°
);

807 
	}
};

809 ˛as†
	c•_unô
 : 
public
 
pùñöed_simd_unô


811 
public
:

812 
•_unô
–
ªgi°î_£t
* 
ªsu…_p‹t
, c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 );

813 
vútuÆ
 
boﬁ
 
	$ˇn_issue
–c⁄° 
w¨p_ö°_t
 &
ö°
 ) const

815 
ö°
.
›
) {

816 
SFU_OP
:  
Ál£
;

817 
LOAD_OP
:  
Ál£
;

818 
STORE_OP
:  
Ál£
;

819 
MEMORY_BARRIER_OP
:  
Ál£
;

822  
pùñöed_simd_unô
::
	`ˇn_issue
(
ö°
);

824 
	}
};

826 
˛ass
 
	gsimt_c‹e_˛u°î
;

827 
˛ass
 
	gshadî_mem‹y_öãrÁ˚
;

828 
˛ass
 
	gshadî_c‹e_mem_„tch_Æloˇt‹
;

829 
˛ass
 
	gˇche_t
;

831 ˛as†
	cld°_unô
: 
public
 
pùñöed_simd_unô
 {

832 
public
:

833 
ld°_unô
–
mem_„tch_öãrÁ˚
 *
i˙t
,

834 
shadî_c‹e_mem_„tch_Æloˇt‹
 *
mf_Æloˇt‹
,

835 
shadî_c‹e_˘x
 *
c‹e
,

836 
›ndcﬁl_rfu_t
 *
›î™d_cﬁÀ˘‹
,

837 
Sc‹ebﬂrd
 *
sc‹ebﬂrd
,

838 c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
,

839 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
,

840 
˛ass
 
shadî_c‹e_°©s
 *
°©s
,

841 
sid
, 
çc
 );

844 
vútuÆ
 
issue
–
ªgi°î_£t
 &
ö°
 );

845 
vútuÆ
 
cy˛e
();

847 
fûl
–
mem_„tch
 *
mf
 );

848 
Êush
();

849 
wrôeback
();

852 
vútuÆ
 
	$˛ock_mu…ùlõr
() const;

854 
vútuÆ
 
boﬁ
 
	$ˇn_issue
–c⁄° 
w¨p_ö°_t
 &
ö°
 ) const

856 
ö°
.
›
) {

857 
LOAD_OP
: ;

858 
STORE_OP
: ;

859 
MEMORY_BARRIER_OP
: ;

860 :  
Ál£
;

862  
m_di•©ch_ªg
->
	`em±y
();

864 
vútuÆ
 
boﬁ
 
	$°ÆœbÀ
(Ëc⁄° {  
åue
; 
	}
}

865 
boﬁ
 
	$ª•⁄£_buf„r_fuŒ
() const;

866 
	$¥öt
(
FILE
 *
fout
) const;

867 
	`¥öt_ˇche_°©s
–
FILE
 *
Â
, & 
dl1_ac˚s£s
, & 
dl1_mis£s
 );

869 
¥iv©e
:

870 
boﬁ
 
	`sh¨ed_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
);

871 
boﬁ
 
	`c⁄°™t_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
);

872 
boﬁ
 
	`ãxtuª_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
);

873 
boﬁ
 
	`mem‹y_cy˛e
–
w¨p_ö°_t
 &
ö°
, 
mem_°age_°Æl_ty≥
 &
rc_Áû
, 
mem_°age_ac˚ss_ty≥
 &
Áû_ty≥
);

875 
mem_°age_°Æl_ty≥
 
	`¥o˚ss_mem‹y_ac˚ss_queue
–
ˇche_t
 *
ˇche
, 
w¨p_ö°_t
 &
ö°
 );

877 c⁄° 
mem‹y_c⁄fig
 *
m_mem‹y_c⁄fig
;

878 
˛ass
 
mem_„tch_öãrÁ˚
 *
m_i˙t
;

879 
shadî_c‹e_mem_„tch_Æloˇt‹
 *
m_mf_Æloˇt‹
;

880 
˛ass
 
shadî_c‹e_˘x
 *
m_c‹e
;

881 
m_sid
;

882 
m_çc
;

884 
ãx_ˇche
 *
m_L1T
;

885 
ªad_⁄ly_ˇche
 *
m_L1C
;

886 
d©a_ˇche
 *
m_L1D
;

887 
°d
::
m≠
<, std::m≠<,> > 
m_≥ndög_wrôes
;

888 
°d
::
li°
<
mem_„tch
*> 
m_ª•⁄£_fifo
;

889 
›ndcﬁl_rfu_t
 *
m_›î™d_cﬁÀ˘‹
;

890 
Sc‹ebﬂrd
 *
m_sc‹ebﬂrd
;

892 
mem_„tch
 *
m_√xt_globÆ
;

893 
w¨p_ö°_t
 
m_√xt_wb
;

894 
m_wrôeback_¨b
;

895 
m_num_wrôeback_˛õ¡s
;

897 
mem_°age_°Æl_ty≥
 
m_mem_rc
;

899 
shadî_c‹e_°©s
 *
m_°©s
;

902 
m_œ°_ö°_gpu_sim_cy˛e
;

903 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
;

904 
	}
};

906 
	epùñöe_°age_«me_t
 {

907 
	mID_OC_SP
=0,

908 
	mID_OC_SFU
,

909 
	mID_OC_MEM
,

910 
	mOC_EX_SP
,

911 
	mOC_EX_SFU
,

912 
	mOC_EX_MEM
,

913 
	mEX_WB
,

914 
	mN_PIPELINE_STAGES


917 c⁄° * c⁄° 
	gpùñöe_°age_«me_decode
[] = {

928 
	gshadî_c‹e_c⁄fig
 : 
public
 
c‹e_c⁄fig


930 
shadî_c‹e_c⁄fig
(){

931 
pùñöe_widths_°rög
 = 
NULL
;

933 
öô
()

935 
	g¡ok
 = 
ssˇnf
(
gpgpu_shadî_c‹e_pùñöe_›t
,"%d:%d",

936 &
n_thªad_≥r_shadî
,

937 &
w¨p_size
);

938 if(
	g¡ok
 != 2) {

939 
¥ötf
("GPGPU-Sim uArch:Érror whileÖarsing configuration string gpgpu_shader_core_pipeline_opt\n");

940 
ab‹t
();

943 * 
	gtoks
 = 
√w
 [100];

944 * 
	gtokd
 = 
toks
;

945 
°r˝y
(
toks
,
pùñöe_widths_°rög
);

947 
	gtoks
 = 
°πok
(
toks
,",");

948 
	gi
 = 0; i < 
	gN_PIPELINE_STAGES
; i++) {

949 
as£π
(
toks
);

950 
	g¡ok
 = 
ssˇnf
(
toks
,"%d", &
pùe_widths
[
i
]);

951 
as£π
(
¡ok
 == 1);

952 
	gtoks
 = 
°πok
(
NULL
,",");

954 
dñëe
 
	gtokd
;

956 i‡(
	gn_thªad_≥r_shadî
 > 
	gMAX_THREAD_PER_SM
) {

957 
¥ötf
("GPGPU-Sim uArch: Error ** increase MAX_THREAD_PER_SM inábstract_hardware_model.h from %uÅo %u\n",

958 
MAX_THREAD_PER_SM
, 
n_thªad_≥r_shadî
);

959 
ab‹t
();

961 
	gmax_w¨ps_≥r_shadî
 = 
n_thªad_≥r_shadî
/
w¨p_size
;

962 
as£π
–!(
n_thªad_≥r_shadî
 % 
w¨p_size
) );

963 
	gmax_sfu_œãncy
 = 512;

964 
	gmax_•_œãncy
 = 32;

965 
	gm_L1I_c⁄fig
.
öô
();

966 
	gm_L1T_c⁄fig
.
öô
();

967 
	gm_L1C_c⁄fig
.
öô
();

968 
	gm_L1D_c⁄fig
.
öô
();

969 
	ggpgpu_ˇche_ãxl1_löesize
 = 
m_L1T_c⁄fig
.
gë_löe_sz
();

970 
	ggpgpu_ˇche_c⁄°l1_löesize
 = 
m_L1C_c⁄fig
.
gë_löe_sz
();

971 
	gm_vÆid
 = 
åue
;

973 
ªg_›ti⁄s
(
˛ass
 
O±i⁄P¨£r
 * 
›p
 );

974 
max_˘a
–c⁄° 
kî√l_öfo_t
 &
k
 ) const;

975 
num_shadî
(Ëc⁄° {  
n_simt_˛u°îs
*
	gn_simt_c‹es_≥r_˛u°î
; }

976 
sid_to_˛u°î
–
sid
 ) c⁄° {  
	gsid
 / 
	gn_simt_c‹es_≥r_˛u°î
; }

977 
sid_to_cid
–
sid
 ) c⁄° {  
	gsid
 % 
	gn_simt_c‹es_≥r_˛u°î
; }

978 
cid_to_sid
–
cid
, 
˛u°î_id
 ) c⁄° {  clu°î_id*
	gn_simt_c‹es_≥r_˛u°î
 + 
	gcid
; }

981 *
	ggpgpu_shadî_c‹e_pùñöe_›t
;

982 
boﬁ
 
	ggpgpu_≥r„˘_mem
;

983 
divîgí˚_suµ‹t_t
 
	gmodñ
;

984 
	gn_thªad_≥r_shadî
;

985 
	gmax_w¨ps_≥r_shadî
;

986 
	gmax_˘a_≥r_c‹e
;

988 * 
	gpùñöe_widths_°rög
;

989 
	gpùe_widths
[
N_PIPELINE_STAGES
];

991 
ˇche_c⁄fig
 
	gm_L1I_c⁄fig
;

992 
ˇche_c⁄fig
 
	gm_L1T_c⁄fig
;

993 
ˇche_c⁄fig
 
	gm_L1C_c⁄fig
;

994 
ˇche_c⁄fig
 
	gm_L1D_c⁄fig
;

996 
boﬁ
 
	ggpgpu_dwf_ªg_b™kc⁄Êi˘
;

998 
	ggpgpu_num_sched_≥r_c‹e
;

999 
	ggpgpu_max_ö¢_issue_≥r_w¨p
;

1002 
	ggpgpu_›î™d_cﬁÀ˘‹_num_unôs_•
;

1003 
	ggpgpu_›î™d_cﬁÀ˘‹_num_unôs_sfu
;

1004 
	ggpgpu_›î™d_cﬁÀ˘‹_num_unôs_mem
;

1005 
	ggpgpu_›î™d_cﬁÀ˘‹_num_unôs_gí
;

1007 
	ggpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_•
;

1008 
	ggpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_sfu
;

1009 
	ggpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_mem
;

1010 
	ggpgpu_›î™d_cﬁÀ˘‹_num_ö_p‹ts_gí
;

1012 
	ggpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_•
;

1013 
	ggpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_sfu
;

1014 
	ggpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_mem
;

1015 
	ggpgpu_›î™d_cﬁÀ˘‹_num_out_p‹ts_gí
;

1017 
	ggpgpu_num_•_unôs
;

1018 
	ggpgpu_num_sfu_unôs
;

1019 
	ggpgpu_num_mem_unôs
;

1022 
	ggpgpu_shadî_ªgi°îs
;

1023 
	ggpgpu_w¨pdi°ro_shadî
;

1024 
	ggpgpu_num_ªg_b™ks
;

1025 
boﬁ
 
	ggpgpu_ªg_b™k_u£_w¨p_id
;

1026 
boﬁ
 
	ggpgpu_loˇl_mem_m≠
;

1028 
	gmax_•_œãncy
;

1029 
	gmax_sfu_œãncy
;

1031 
	gn_simt_c‹es_≥r_˛u°î
;

1032 
	gn_simt_˛u°îs
;

1033 
	gn_simt_eje˘i⁄_buf„r_size
;

1034 
	gld°_unô_ª•⁄£_queue_size
;

1036 
	gsimt_c‹e_sim_‹dî
;

1038 
mem2devi˚
(
memid
Ëc⁄° {  
	gmemid
 + 
	gn_simt_˛u°îs
; }

1041 
	sshadî_c‹e_°©s_pod
 {

1042 *
	mm_num_sim_ö¢
;

1043 *
	mm_num_sim_wö¢
;

1044 *
	mm_n_divîge
;

1045 
	mgpgpu_n_lﬂd_ö¢
;

1046 
	mgpgpu_n_°‹e_ö¢
;

1047 
	mgpgpu_n_shmem_ö¢
;

1048 
	mgpgpu_n_ãx_ö¢
;

1049 
	mgpgpu_n_c⁄°_ö¢
;

1050 
	mgpgpu_n_∑øm_ö¢
;

1051 
	mgpgpu_n_shmem_bkc⁄Êi˘
;

1052 
	mgpgpu_n_ˇche_bkc⁄Êi˘
;

1053 
	mgpgpu_n_öåaw¨p_mshr_mîge
;

1054 
	mgpgpu_n_cmem_p‹tc⁄Êi˘
;

1055 
	mgpu_°Æl_shd_mem_bªakdown
[
N_MEM_STAGE_ACCESS_TYPE
][
N_MEM_STAGE_STALL_TYPE
];

1056 
	mgpu_ªg_b™k_c⁄Êi˘_°Æls
;

1057 *
	mshadî_cy˛e_di°ro
;

1058 *
	mœ°_shadî_cy˛e_di°ro
;

1059 *
	mnum_w¨ps_issuabÀ
;

1060 
	mgpgpu_n_°Æl_shd_mem
;

1063 
	mgpgpu_n_mem_ªad_loˇl
;

1064 
	mgpgpu_n_mem_wrôe_loˇl
;

1065 
	mgpgpu_n_mem_ãxtuª
;

1066 
	mgpgpu_n_mem_c⁄°
;

1067 
	mgpgpu_n_mem_ªad_globÆ
;

1068 
	mgpgpu_n_mem_wrôe_globÆ
;

1069 
	mgpgpu_n_mem_ªad_ö°
;

1071 
	mmade_wrôe_mfs
;

1072 
	mmade_ªad_mfs
;

1075 ˛as†
	cshadî_c‹e_°©s
 : 
¥iv©e
 
shadî_c‹e_°©s_pod
 {

1076 
public
:

1077 
	$shadî_c‹e_°©s
–c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
 )

1079 
m_c⁄fig
 = 
c⁄fig
;

1080 
shadî_c‹e_°©s_pod
 *
pod
 = 
this
;

1081 
	`mem£t
(
pod
,0,(
shadî_c‹e_°©s_pod
));

1083 
m_num_sim_ö¢
 = (*Ë
	`ˇŒoc
(
c⁄fig
->
	`num_shadî
(),());

1084 
m_num_sim_wö¢
 = (*Ë
	`ˇŒoc
(
c⁄fig
->
	`num_shadî
(),());

1085 
m_n_divîge
 = (*Ë
	`ˇŒoc
(
c⁄fig
->
	`num_shadî
(),());

1086 
shadî_cy˛e_di°ro
 = (*Ë
	`ˇŒoc
(
c⁄fig
->
w¨p_size
+3, ());

1087 
œ°_shadî_cy˛e_di°ro
 = (*Ë
	`ˇŒoc
(
m_c⁄fig
->
w¨p_size
+3, ());

1089 
	$√w_grid
()

1091 
	}
}

1093 
visuÆizî_¥öt
–
gzFûe
 
visuÆizî_fûe
 );

1095 
	$¥öt
–
FILE
 *
fout
 ) const;

1097 
¥iv©e
:

1098 c⁄° 
shadî_c‹e_c⁄fig
 *
m_c⁄fig
;

1100 
‰õnd
 
˛ass
 
shadî_c‹e_˘x
;

1101 
‰õnd
 
˛ass
 
ld°_unô
;

1102 
‰õnd
 
˛ass
 
simt_c‹e_˛u°î
;

1103 
‰õnd
 
˛ass
 
scheduÀr_unô
;

1104 
	}
};

1106 ˛as†
	cshadî_c‹e_mem_„tch_Æloˇt‹
 : 
public
 
mem_„tch_Æloˇt‹
 {

1107 
public
:

1108 
	$shadî_c‹e_mem_„tch_Æloˇt‹
–
c‹e_id
, 
˛u°î_id
, c⁄° 
mem‹y_c⁄fig
 *
c⁄fig
 )

1110 
m_c‹e_id
 = 
c‹e_id
;

1111 
m_˛u°î_id
 = 
˛u°î_id
;

1112 
m_mem‹y_c⁄fig
 = 
c⁄fig
;

1114 
mem_„tch
 *
	$Æloc
–
√w_addr_ty≥
 
addr
, 
mem_ac˚ss_ty≥
 
ty≥
, 
size
, 
boﬁ
 
wr
 ) const

1116 
mem_ac˚ss_t
 
	`ac˚ss
–
ty≥
, 
addr
, 
size
, 
wr
 );

1117 
mem_„tch
 *
mf
 = 
√w
 
	`mem_„tch
–
ac˚ss
,

1118 
NULL
,

1119 
wr
?
WRITE_PACKET_SIZE
:
READ_PACKET_SIZE
,

1121 
m_c‹e_id
,

1122 
m_˛u°î_id
,

1123 
m_mem‹y_c⁄fig
 );

1124  
mf
;

1125 
	}
}

1127 
mem_„tch
 *
	$Æloc
–c⁄° 
w¨p_ö°_t
 &
ö°
, c⁄° 
mem_ac˚ss_t
 &
ac˚ss
 ) const

1129 
w¨p_ö°_t
 
ö°_c›y
 = 
ö°
;

1130 
mem_„tch
 *
mf
 = 
√w
 
	`mem_„tch
(
ac˚ss
,

1131 &
ö°_c›y
,

1132 
ac˚ss
.
	`is_wrôe
()?
WRITE_PACKET_SIZE
:
READ_PACKET_SIZE
,

1133 
ö°
.
	`w¨p_id
(),

1134 
m_c‹e_id
,

1135 
m_˛u°î_id
,

1136 
m_mem‹y_c⁄fig
);

1137  
mf
;

1138 
	}
}

1140 
	g¥iv©e
:

1141 
m_c‹e_id
;

1142 
	gm_˛u°î_id
;

1143 c⁄° 
mem‹y_c⁄fig
 *
	gm_mem‹y_c⁄fig
;

1146 ˛as†
	cshadî_c‹e_˘x
 : 
public
 
c‹e_t
 {

1147 
public
:

1149 
shadî_c‹e_˘x
–
˛ass
 
gpgpu_sim
 *
gpu
,

1150 
˛ass
 
simt_c‹e_˛u°î
 *
˛u°î
,

1151 
shadî_id
,

1152 
çc_id
,

1153 c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
,

1154 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
,

1155 
shadî_c‹e_°©s
 *
°©s
 );

1159 
cy˛e
();

1160 
ªöô
(
°¨t_thªad
, 
íd_thªad
, 
boﬁ
 
ª£t_nŸ_com∂ëed
 );

1161 
issue_block2c‹e
–
˛ass
 
kî√l_öfo_t
 &
kî√l
 );

1162 
ˇche_Êush
();

1163 
ac˚±_„tch_ª•⁄£
–
mem_„tch
 *
mf
 );

1164 
ac˚±_ld°_unô_ª•⁄£
–
˛ass
 
mem_„tch
 * 
mf
 );

1165 
	$KAIN£tThªadID
(
id
)

1167 
ThªadID
 = 
id
;

1169 
	$KAINgëThªadID
()

1171  
ThªadID
;

1172 
	}
}

1174 
	$£t_kî√l
–
kî√l_öfo_t
 *
k
 )

1176 
	`as£π
(
k
);

1177 
m_kî√l
=
k
;

1178 
k
->
	`öc_ru¬ög
();

1181 
	}
}

1184 
boﬁ
 
	$„tch_unô_ª•⁄£_buf„r_fuŒ
() const;

1185 
boﬁ
 
	$ld°_unô_ª•⁄£_buf„r_fuŒ
() const;

1186 
	$gë_nŸ_com∂ëed
(Ëc⁄° {  
m_nŸ_com∂ëed
; 
	}
}

1187 
	$gë_n_a˘ive_˘a
(Ëc⁄° {  
m_n_a˘ive_˘a
; 
	}
}

1188 
kî√l_öfo_t
 *
	$gë_kî√l
(Ë{  
m_kî√l
; 
	}
}

1192 
vútuÆ
 
w¨p_exô
–
w¨p_id
 );

1195 
vútuÆ
 
boﬁ
 
	$w¨p_waôög_©_b¨rõr
–
w¨p_id
 ) const;

1196 
	$gë_pdom_°ack_t›_öfo
–
tid
, *
pc
, *
Ωc
 ) const;

1200 
	`mem_ö°ru˘i⁄_°©s
(c⁄° 
w¨p_ö°_t
 &
ö°
);

1201 
	`de¸emít_©omic_cou¡
–
wid
, 
n
 );

1202 
	$öc_°‹e_ªq
–
w¨p_id
Ë{ 
m_w¨p
[w¨p_id].
	`öc_°‹e_ªq
(); 
	}
}

1203 
	$dec_ö°_ö_pùñöe
–
w¨p_id
 ) { 
m_w¨p
[w¨p_id].
	`dec_ö°_ö_pùñöe
(); 
	}
}

1204 
°‹e_ack
–
˛ass
 
mem_„tch
 *
mf
 );

1205 
boﬁ
 
w¨p_waôög_©_mem_b¨rõr
–
w¨p_id
 );

1206 
£t_max_˘a
–c⁄° 
kî√l_öfo_t
 &
kî√l
);

1207 
w¨p_ö°_com∂ëe
(c⁄° 
w¨p_ö°_t
 &
ö°
);

1210 
	g°d
::
li°
<> 
	$gë_ªgs_wrôãn
–c⁄° 
ö°_t
 &
fvt
 ) const;

1211 c⁄° 
shadî_c‹e_c⁄fig
 *
	$gë_c⁄fig
(Ëc⁄° {  
m_c⁄fig
; 
	}
}

1212 
¥öt_ˇche_°©s
–
FILE
 *
Â
, & 
dl1_ac˚s£s
, & 
dl1_mis£s
 );

1215 
	$di•œy_simt_°©e
(
FILE
 *
fout
, 
mask
 ) const;

1216 
	$di•œy_pùñöe
–
FILE
 *
fout
, 
¥öt_mem
, 
mask3bô
 ) const;

1218 
¥iv©e
:

1219 
ThªadID
;

1220 
	`ã°_ªs_bus
(
œãncy
);

1221 
	`öô_w¨ps
(
˘a_id
, 
°¨t_thªad
, 
íd_thªad
);

1222 
vútuÆ
 
	`checkExecuti⁄SètusAndUpd©e
(
w¨p_ö°_t
 &
ö°
, 
t
, 
tid
);

1223 
addªss_ty≥
 
	$√xt_pc
–
tid
 ) const;

1224 
	`„tch
();

1225 
	`ªgi°î_˘a_thªad_exô
–
˘a_num
 );

1227 
	`decode
();

1229 
	`issue
();

1230 
‰õnd
 
˛ass
 
scheduÀr_unô
;

1231 
	`issue_w¨p
–
ªgi°î_£t
& 
w¨p
, c⁄° 
w¨p_ö°_t
 *
pI
, c⁄° 
a˘ive_mask_t
 &
a˘ive_mask
, 
w¨p_id
 );

1232 
	`func_exec_ö°
–
w¨p_ö°_t
 &
ö°
 );

1235 
	`å™¶©e_loˇl_memaddr
–
addªss_ty≥
 
loˇœddr
, 
tid
, 
num_shadî
, 
d©asize
, 
√w_addr_ty≥
* 
å™¶©ed_addrs
 );

1237 
	`ªad_›î™ds
();

1239 
	`execuã
();

1241 
	`wrôeback
();

1244 
	$dump_w¨p_°©e
–
FILE
 *
fout
 ) const;

1245 
	$¥öt_°age
(
°age
, 
FILE
 *
fout
) const;

1246 
m_œ°_ö°_gpu_sim_cy˛e
;

1247 
m_œ°_ö°_gpu_tŸ_sim_cy˛e
;

1250 
m_sid
;

1251 
m_çc
;

1252 c⁄° 
shadî_c‹e_c⁄fig
 *
m_c⁄fig
;

1253 c⁄° 
mem‹y_c⁄fig
 *
m_mem‹y_c⁄fig
;

1254 
˛ass
 
simt_c‹e_˛u°î
 *
m_˛u°î
;

1257 
shadî_c‹e_°©s
 *
m_°©s
;

1260 
m_n_a˘ive_˘a
;

1261 
m_˘a_°©us
[
MAX_CTA_PER_SHADER
];

1262 
m_nŸ_com∂ëed
;

1263 
°d
::
bô£t
<
MAX_THREAD_PER_SM
> 
m_a˘ive_thªads
;

1266 
thªad_˘x_t
 *
m_thªadSèã
;

1269 
mem_„tch_öãrÁ˚
 *
m_i˙t
;

1270 
shadî_c‹e_mem_„tch_Æloˇt‹
 *
m_mem_„tch_Æloˇt‹
;

1273 
ªad_⁄ly_ˇche
 *
m_L1I
;

1274 
m_œ°_w¨p_„tched
;

1277 
°d
::
ve˘‹
<
shd_w¨p_t
> 
m_w¨p
;

1278 
b¨rõr_£t_t
 
m_b¨rõrs
;

1279 
i„tch_buf„r_t
 
m_ö°_„tch_buf„r
;

1280 
°d
::
ve˘‹
<
ªgi°î_£t
> 
m_pùñöe_ªg
;

1281 
Sc‹ebﬂrd
 *
m_sc‹ebﬂrd
;

1282 
›ndcﬁl_rfu_t
 
m_›î™d_cﬁÀ˘‹
;

1285 
°d
::
ve˘‹
<
scheduÀr_unô
> 
scheduÀrs
;

1288 
m_num_fun˘i⁄_unôs
;

1289 
°d
::
ve˘‹
<
pùñöe_°age_«me_t
> 
m_di•©ch_p‹t
;

1290 
°d
::
ve˘‹
<
pùñöe_°age_«me_t
> 
m_issue_p‹t
;

1291 
°d
::
ve˘‹
<
simd_fun˘i⁄_unô
*> 
m_fu
;

1292 
ld°_unô
 *
m_ld°_unô
;

1293 c⁄° 
MAX_ALU_LATENCY
 = 512;

1294 
num_ªsu…_bus
;

1295 
°d
::
ve˘‹
< std::
bô£t
<
MAX_ALU_LATENCY
>* > 
m_ªsu…_bus
;

1298 
kî√l_max_˘a_≥r_shadî
;

1299 
kî√l_∑dded_thªads_≥r_˘a
;

1300 
	}
};

1302 ˛as†
	csimt_c‹e_˛u°î
 {

1303 
	mpublic
:

1304 
simt_c‹e_˛u°î
–
˛ass
 
gpgpu_sim
 *
gpu
,

1305 
˛u°î_id
,

1306 c⁄° 
shadî_c‹e_c⁄fig
 *
c⁄fig
,

1307 c⁄° 
mem‹y_c⁄fig
 *
mem_c⁄fig
,

1308 
shadî_c‹e_°©s
 *
°©s
,

1309 
mem‹y_°©s_t
 *
m°©s
 );

1311 
c‹e_cy˛e
();

1312 
i˙t_cy˛e
();

1314 
	$KAIN£tThªadID
(
id
)

1316 
ThªadID
 = 
id
;

1318 
	$KAINgëThªadID
()

1320  
ThªadID
;

1321 
	}
}

1323 
	$KAINgëClu°îID
()

1325  
m_˛u°î_id
;

1326 
	}
}

1327 
ªöô
();

1328 
issue_block2c‹e
();

1329 
ˇche_Êush
();

1330 
boﬁ
 
i˙t_öje˘i⁄_buf„r_fuŒ
(
size
, boﬁ 
wrôe
);

1331 
i˙t_öje˘_ªque°_∑ckë
(
˛ass
 
mem_„tch
 *
mf
);

1334 
boﬁ
 
	$ª•⁄£_queue_fuŒ
() {

1335  ( 
m_ª•⁄£_fifo
.
	`size
(Ë>
m_c⁄fig
->
n_simt_eje˘i⁄_buf„r_size
 );

1336 
	}
}

1337 
	$push_ª•⁄£_fifo
(
˛ass
 
mem_„tch
 *
mf
) {

1338 
m_ª•⁄£_fifo
.
	`push_back
(
mf
);

1339 
	}
}

1341 
	$gë_pdom_°ack_t›_öfo
–
sid
, 
tid
, *
pc
, *
Ωc
 ) const;

1342 
	`max_˘a
–c⁄° 
kî√l_öfo_t
 &
kî√l
 );

1343 
	$gë_nŸ_com∂ëed
() const;

1344 
	$¥öt_nŸ_com∂ëed
–
FILE
 *
Â
 ) const;

1345 
	$gë_n_a˘ive_˘a
() const;

1346 
gpgpu_sim
 *
	$gë_gpu
(Ë{  
m_gpu
; 
	}
}

1348 
di•œy_pùñöe
–
sid
, 
FILE
 *
fout
, 
¥öt_mem
, 
mask
 );

1349 
	$¥öt_ˇche_°©s
–
FILE
 *
Â
, & 
dl1_ac˚s£s
, & 
dl1_mis£s
 ) const;

1351 
¥iv©e
:

1352 
ThªadID
;

1353 
KAIN_öô_ID
;

1354 
m_˛u°î_id
;

1355 
gpgpu_sim
 *
m_gpu
;

1356 c⁄° 
shadî_c‹e_c⁄fig
 *
m_c⁄fig
;

1357 
shadî_c‹e_°©s
 *
m_°©s
;

1358 
mem‹y_°©s_t
 *
m_mem‹y_°©s
;

1359 
shadî_c‹e_˘x
 **
m_c‹e
;

1361 
m_˘a_issue_√xt_c‹e
;

1362 
°d
::
li°
<> 
m_c‹e_sim_‹dî
;

1363 
°d
::
li°
<
mem_„tch
*> 
m_ª•⁄£_fifo
;

1364 
public
:

1365 
°d
::
li°
<
mem_„tch
 *> 
m_KAIN_¥o˚ss
;

1366 
	}
};

1370 ˛as†
	cshadî_mem‹y_öãrÁ˚
 : 
public
 
mem_„tch_öãrÁ˚
 {

1371 
public
:

1372 
	$shadî_mem‹y_öãrÁ˚
–
shadî_c‹e_˘x
 *
c‹e
, 
simt_c‹e_˛u°î
 *
˛u°î
 ) { 
m_c‹e
=c‹e; 
m_˛u°î
=cluster; }

1373 
vútuÆ
 
boﬁ
 
	$fuŒ
–
size
, 
boﬁ
 
wrôe
 ) const

1375  
m_˛u°î
->
	`i˙t_öje˘i⁄_buf„r_fuŒ
(
size
,
wrôe
);

1376 
	}
}

1377 
vútuÆ
 
	$push
(
mem_„tch
 *
mf
)

1379 
±hªad_muãx_t
 
KAIN_muãx
;

1381 
	`±hªad_muãx_lock
(&
KAIN_muãx
);

1384 
m_˛u°î
->
	`i˙t_öje˘_ªque°_∑ckë
(
mf
);

1385 
	`±hªad_muãx_u∆ock
(&
KAIN_muãx
);

1386 
	}
}

1387 
	g¥iv©e
:

1388 
shadî_c‹e_˘x
 *
m_c‹e
;

1389 
simt_c‹e_˛u°î
 *
	gm_˛u°î
;

1392 ˛as†
	c≥r„˘_mem‹y_öãrÁ˚
 : 
public
 
mem_„tch_öãrÁ˚
 {

1393 
public
:

1394 
	$≥r„˘_mem‹y_öãrÁ˚
–
shadî_c‹e_˘x
 *
c‹e
, 
simt_c‹e_˛u°î
 *
˛u°î
 ) { 
m_c‹e
=c‹e; 
m_˛u°î
=cluster; }

1395 
vútuÆ
 
boﬁ
 
	$fuŒ
–
size
, 
boﬁ
 
wrôe
) const

1397  
m_˛u°î
->
	`ª•⁄£_queue_fuŒ
();

1398 
	}
}

1399 
vútuÆ
 
	$push
(
mem_„tch
 *
mf
)

1401 if–!
mf
->
	`gë_ö°
().
	`em±y
() )

1402 
m_c‹e
->
	`mem_ö°ru˘i⁄_°©s
(
mf
->
	`gë_ö°
());

1403 i‡–
mf
 && mf->
	`ißtomic
() )

1404 
mf
->
	`do_©omic
();

1405 
m_˛u°î
->
	`push_ª•⁄£_fifo
(
mf
);

1406 
	}
}

1407 
	g¥iv©e
:

1408 
shadî_c‹e_˘x
 *
m_c‹e
;

1409 
simt_c‹e_˛u°î
 *
	gm_˛u°î
;

	@src/gpgpu-sim/stack.cc

28 
	~"°ack.h
"

30 
	~<°dlib.h
>

31 
	~<as£π.h
>

33 
	$push_°ack
(
Sèck
 *
S
, 
addªss_ty≥
 
vÆ
) {

34 
	`as£π
(
S
->
t›
 < S->
max_size
);

35 
S
->
v
[S->
t›
] = 
vÆ
;

36 (
S
->
t›
)++;

38 
	}
}

40 
addªss_ty≥
 
	$p›_°ack
(
Sèck
 *
S
) {

41 (
S
->
t›
)--;

42 (
S
->
v
[S->
t›
]);

43 
	}
}

45 
addªss_ty≥
 
	$t›_°ack
(
Sèck
 *
S
) {

46 
	`as£π
(
S
->
t›
 >= 1);

47 (
S
->
v
[S->
t›
 - 1]);

48 
	}
}

50 
Sèck
* 
	$√w_°ack
(
size
) {

51 
Sèck
* 
S
;

52 
S
 = (
Sèck
*)
	`mÆloc
((Stack));

53 
S
->
max_size
 = 
size
;

54 
S
->
t›
 = 0;

55 
S
->
v
 = (
addªss_ty≥
*)
	`ˇŒoc
(
size
, (address_type));

56  
S
;

57 
	}
}

59 
	$‰ì_°ack
(
Sèck
 *
S
) {

60 
	`‰ì
(
S
->
v
);

61 
	`‰ì
(
S
);

62 
	}
}

64 
	$size_°ack
(
Sèck
 *
S
) {

65  
S
->
t›
;

66 
	}
}

68 
	$fuŒ_°ack
(
Sèck
 *
S
) {

69  
S
->
t›
 >S->
max_size
;

70 
	}
}

72 
	$em±y_°ack
(
Sèck
 *
S
) {

73  
S
->
t›
 == 0;

74 
	}
}

76 
	$ñemít_exi°_°ack
(
Sèck
 *
S
, 
addªss_ty≥
 
vÆue
) {

77 
i
;

78 
i
 = 0; i < 
S
->
t›
; ++i) {

79 i‡(
vÆue
 =
S
->
v
[
i
]) {

84 
	}
}

86 
	$ª£t_°ack
(
Sèck
 *
S
) {

87 
S
->
t›
 = 0;

88 
	}
}

	@src/gpgpu-sim/stack.h

28 #i‚de‡
_MY_STACK_


29 
	#_MY_STACK_


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

34 
addªss_ty≥
 *
	mv
;

35 
	mmax_size
;

36 
	mt›
;

37 } 
	tSèck
;

39 
push_°ack
(
Sèck
 *
S
, 
addªss_ty≥
 
vÆ
);

40 
addªss_ty≥
 
p›_°ack
(
Sèck
 *
S
);

41 
addªss_ty≥
 
t›_°ack
(
Sèck
 *
S
);

42 
Sèck
* 
√w_°ack
(
size
);

43 
‰ì_°ack
(
Sèck
 *
S
);

44 
size_°ack
(
Sèck
 *
S
);

45 
fuŒ_°ack
(
Sèck
 *
S
);

46 
em±y_°ack
(
Sèck
 *
S
);

47 
ñemít_exi°_°ack
(
Sèck
 *
S
, 
addªss_ty≥
 
vÆue
);

48 
ª£t_°ack
(
Sèck
 *
S
);

	@src/gpgpu-sim/stat-tool.cc

28 
	~"°©-toﬁ.h
"

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<as£π.h
>

33 
	~<zlib.h
>

34 
	~<°rög
>

35 
	~<li°
>

36 
	~<ve˘‹
>

37 
	~<m≠
>

38 
	~<Æg‹ôhm
>

39 
	~<°rög
>

43 
	gmö_¢≠_shŸ_öãrvÆ
 = 0;

44 
	g√xt_¢≠_shŸ_cy˛e
 = 0;

45 
	g°d
::
li°
<
¢≠_shŸ_åiggî
*> 
li°_ss_åiggî
;

47 
	$add_¢≠_shŸ_åiggî
 (
¢≠_shŸ_åiggî
* 
ss_åiggî
)

50 i‡(
mö_¢≠_shŸ_öãrvÆ
 =0 || mö_¢≠_shŸ_öãrvÆ > 
ss_åiggî
->
	`gë_öãrvÆ
()) {

51 
mö_¢≠_shŸ_öãrvÆ
 = 
ss_åiggî
->
	`gë_öãrvÆ
();

52 
√xt_¢≠_shŸ_cy˛e
 = 
mö_¢≠_shŸ_öãrvÆ
;

54 
li°_ss_åiggî
.
	`push_back
(
ss_åiggî
);

55 
	}
}

57 
	$ªmove_¢≠_shŸ_åiggî
 (
¢≠_shŸ_åiggî
* 
ss_åiggî
)

59 
li°_ss_åiggî
.
	`ªmove
(
ss_åiggî
);

60 
	}
}

62 
	$åy_¢≠_shŸ
 (
cuºít_cy˛e
)

64 i‡(
mö_¢≠_shŸ_öãrvÆ
 == 0) ;

65 i‡(
cuºít_cy˛e
 !
√xt_¢≠_shŸ_cy˛e
) ;

67 
°d
::
li°
<
¢≠_shŸ_åiggî
*>::
ôî©‹
 
ss_åiggî_ôî
 = 
li°_ss_åiggî
.
	`begö
();

68 ; 
ss_åiggî_ôî
 !
li°_ss_åiggî
.
	`íd
(); ++ss_trigger_iter) {

69 (*
ss_åiggî_ôî
)->
	`¢≠_shŸ
(
cuºít_cy˛e
);

71 
√xt_¢≠_shŸ_cy˛e
 = 
cuºít_cy˛e
 + 
mö_¢≠_shŸ_öãrvÆ
;

72 
	}
}

76 
	g•ûl_öãrvÆ
 = 0;

77 
	g√xt_•ûl_cy˛e
 = 0;

78 
	g°d
::
li°
<
•ûl_log_öãrÁ˚
*> 
li°_•ûl_log
;

80 
	$add_•ûl_log
 (
•ûl_log_öãrÁ˚
* 
•ûl_log
)

82 
li°_•ûl_log
.
	`push_back
(
•ûl_log
);

83 
	}
}

85 
	$ªmove_•ûl_log
 (
•ûl_log_öãrÁ˚
* 
•ûl_log
)

87 
li°_•ûl_log
.
	`ªmove
(
•ûl_log
);

88 
	}
}

90 
	$£t_•ûl_öãrvÆ
 (
öãrvÆ
)

92 
•ûl_öãrvÆ
 = 
öãrvÆ
;

93 
√xt_•ûl_cy˛e
 = 
•ûl_öãrvÆ
;

94 
	}
}

96 
	$•ûl_log_to_fûe
 (
FILE
 *
fout
, 
föÆ
, 
cuºít_cy˛e
)

98 i‡(!
föÆ
 && 
•ûl_öãrvÆ
 == 0) ;

99 i‡(!
föÆ
 && 
cuºít_cy˛e
 <
√xt_•ûl_cy˛e
) ;

101 
	`Ârötf
(
fout
, "\n");

102 
°d
::
li°
<
•ûl_log_öãrÁ˚
*>::
ôî©‹
 
i_•ûl_log
 = 
li°_•ûl_log
.
	`begö
();

103 ; 
i_•ûl_log
 !
li°_•ûl_log
.
	`íd
(); ++i_spill_log) {

104 (*
i_•ûl_log
)->
	`•ûl
(
fout
, 
föÆ
);

106 
	`fÊush
(
fout
);

108 
√xt_•ûl_cy˛e
 = 
cuºít_cy˛e
 + 
•ûl_öãrvÆ
;

109 
	}
}

113 
å™¶©e_pc_to_±xlöío
(
pc
);

115 
	gn_thªad_CFloggîs
 = 0;

116 
thªad_CFloˇlôy
** 
	gthªad_CFloggî
 = 
NULL
;

118 
	$¸óã_thªad_CFloggî
–
n_loggîs
, 
n_thªads
, 
addªss_ty≥
 
°¨t_pc
, 
loggög_öãrvÆ
)

120 
	`de°roy_thªad_CFloggî
();

122 
n_thªad_CFloggîs
 = 
n_loggîs
;

123 
thªad_CFloggî
 = 
√w
 
thªad_CFloˇlôy
*[
n_loggîs
];

125 
°d
::
°rög
 
	`«me_çl
("CFLog");

126 
buf„r
[32];

127 
i
 = 0; i < 
n_thªad_CFloggîs
; i++) {

128 
	`¢¥ötf
(
buf„r
, 32, "%02d", 
i
);

129 
thªad_CFloggî
[
i
] = 
√w
 
	`thªad_CFloˇlôy
–
«me_çl
 + 
buf„r
, 
loggög_öãrvÆ
, 
n_thªads
, 
°¨t_pc
);

130 i‡(
loggög_öãrvÆ
 != 0) {

131 
	`add_¢≠_shŸ_åiggî
(
thªad_CFloggî
[
i
]);

132 
	`add_•ûl_log
(
thªad_CFloggî
[
i
]);

135 
	}
}

137 
	$de°roy_thªad_CFloggî
( )

139 i‡(
thªad_CFloggî
 !
NULL
) {

140 
i
 = 0; i < 
n_thªad_CFloggîs
; i++) {

141 
	`ªmove_¢≠_shŸ_åiggî
(
thªad_CFloggî
[
i
]);

142 
	`ªmove_•ûl_log
(
thªad_CFloggî
[
i
]);

143 
dñëe
 
thªad_CFloggî
[
i
];

145 
dñëe
 [] 
thªad_CFloggî
;

146 
thªad_CFloggî
 = 
NULL
;

148 
	}
}

150 
	$cÊog_upd©e_thªad_pc
–
loggî_id
, 
thªad_id
, 
addªss_ty≥
 
pc
 )

152 i‡(
thªad_CFloggî
 =
NULL
) ;

153 i‡(
thªad_id
 < 0) ;

154 
thªad_CFloggî
[
loggî_id
]->
	`upd©e_thªad_pc
(
thªad_id
, 
pc
);

155 
	}
}

158 
	$cÊog_¢≠shŸ
–
loggî_id
, 
cy˛e
 )

160 
thªad_CFloggî
[
loggî_id
]->
	`¢≠_shŸ
(
cy˛e
);

161 
	}
}

163 
	$cÊog_¥öt
(
FILE
 *
fout
)

165 i‡(
thªad_CFloggî
 =
NULL
) ;

166 
i
 = 0; i < 
n_thªad_CFloggîs
; i++) {

167 
thªad_CFloggî
[
i
]->
	`¥öt_hi°o
(
fout
);

169 
	}
}

171 
	$cÊog_visuÆizî_¥öt
(
FILE
 *
fout
)

173 i‡(
thªad_CFloggî
 =
NULL
) ;

174 
i
 = 0; i < 
n_thªad_CFloggîs
; i++) {

175 
thªad_CFloggî
[
i
]->
	`¥öt_visuÆizî
(
fout
);

177 
	}
}

179 
	$cÊog_visuÆizî_gz¥öt
(
gzFûe
 
fout
)

181 i‡(
thªad_CFloggî
 =
NULL
) ;

182 
i
 = 0; i < 
n_thªad_CFloggîs
; i++) {

183 
thªad_CFloggî
[
i
]->
	`¥öt_visuÆizî
(
fout
);

185 
	}
}

189 
	gö¢_w¨p_occ_loggî
::
s_ids
 = 0;

191 
	g°d
::
ve˘‹
<
ö¢_w¨p_occ_loggî
> 
iwo_loggî
;

193 
	$ö¢_w¨p_occ_¸óã
–
n_loggîs
, 
simd_width
 )

195 
iwo_loggî
.
	`˛ór
();

196 
iwo_loggî
.
	`assign
(
n_loggîs
, 
	`ö¢_w¨p_occ_loggî
(
simd_width
));

197 
i
 = 0; i < 
iwo_loggî
.
	`size
(); i++) {

198 
iwo_loggî
[
i
].
	`£t_id
(i);

200 
	}
}

202 
	$ö¢_w¨p_occ_log
–
loggî_id
, 
addªss_ty≥
 
pc
, 
w¨p_occ
)

204 i‡(
w¨p_occ
 <= 0) ;

205 
iwo_loggî
[
loggî_id
].
	`log
(
pc
, 
w¨p_occ
);

206 
	}
}

208 
	$ö¢_w¨p_occ_¥öt
–
FILE
 *
fout
 )

210 
i
 = 0; i < 
iwo_loggî
.
	`size
(); i++) {

211 
iwo_loggî
[
i
].
	`¥öt
(
fout
);

213 
	}
}

217 
	glöór_hi°ogøm_loggî
::
s_ids
 = 0;

223 
	g°d
::
ve˘‹
<
löór_hi°ogøm_loggî
> 
s_w¨p_occ_loggî
;

225 
	$shadî_w¨p_occ_¸óã
–
n_loggîs
, 
simd_width
, 
loggög_öãrvÆ
)

228 
s_w¨p_occ_loggî
.
	`assign
(
n_loggîs
,

229 
	`löór_hi°ogøm_loggî
(
simd_width
 + 1, 
loggög_öãrvÆ
, "ShdrWarpOcc"));

230 
i
 = 0; i < 
s_w¨p_occ_loggî
.
	`size
(); i++) {

231 
s_w¨p_occ_loggî
[
i
].
	`£t_id
(i);

232 
	`add_¢≠_shŸ_åiggî
(&(
s_w¨p_occ_loggî
[
i
]));

233 
	`add_•ûl_log
(&(
s_w¨p_occ_loggî
[
i
]));

235 
	}
}

237 
	$shadî_w¨p_occ_log
–
loggî_id
, 
w¨p_occ
)

239 
s_w¨p_occ_loggî
[
loggî_id
].
	`log
(
w¨p_occ
);

240 
	}
}

242 
	$shadî_w¨p_occ_¢≠shŸ
–
loggî_id
, 
cuºít_cy˛e
)

244 
s_w¨p_occ_loggî
[
loggî_id
].
	`¢≠_shŸ
(
cuºít_cy˛e
);

245 
	}
}

247 
	$shadî_w¨p_occ_¥öt
–
FILE
 *
fout
 )

249 
i
 = 0; i < 
s_w¨p_occ_loggî
.
	`size
(); i++) {

250 
s_w¨p_occ_loggî
[
i
].
	`¥öt
(
fout
);

252 
	}
}

259 
	gs_mem_acc_loggî_n_døm
 = 0;

260 
	gs_mem_acc_loggî_n_b™k
 = 0;

261 
	g°d
::
ve˘‹
<
löór_hi°ogøm_loggî
> 
s_mem_acc_loggî
;

263 
	$shadî_mem_acc_¸óã
–
n_loggîs
, 
n_døm
, 
n_b™k
, 
loggög_öãrvÆ
)

266 
s_mem_acc_loggî
.
	`assign
(
n_loggîs
,

267 
	`löór_hi°ogøm_loggî
(2 * 
n_døm
 * (
n_b™k
 + 1), 
loggög_öãrvÆ
, "ShdrMemAcc"));

269 
s_mem_acc_loggî_n_døm
 = 
n_døm
;

270 
s_mem_acc_loggî_n_b™k
 = 
n_b™k
;

271 
i
 = 0; i < 
s_mem_acc_loggî
.
	`size
(); i++) {

272 
s_mem_acc_loggî
[
i
].
	`£t_id
(i);

273 
	`add_¢≠_shŸ_åiggî
(&(
s_mem_acc_loggî
[
i
]));

274 
	`add_•ûl_log
(&(
s_mem_acc_loggî
[
i
]));

276 
	}
}

278 
	$shadî_mem_acc_log
–
loggî_id
, 
døm_id
, 
b™k
, 
rw
)

280 i‡(
s_mem_acc_loggî_n_døm
 == 0) ;

281 
wrôe_off£t
 = 0;

282 
rw
) {

283 'r': 
wrôe_off£t
 = 0; ;

284 'w': 
wrôe_off£t
 = (
s_mem_acc_loggî_n_b™k
 + 1Ë* 
s_mem_acc_loggî_n_døm
; ;

285 : 
	`as£π
(0); ;

287 
s_mem_acc_loggî
[
loggî_id
].
	`log
(
døm_id
 * 
s_mem_acc_loggî_n_b™k
 + 
b™k
 + 
wrôe_off£t
);

288 
	}
}

290 
	$shadî_mem_acc_¢≠shŸ
–
loggî_id
, 
cuºít_cy˛e
)

292 
s_mem_acc_loggî
[
loggî_id
].
	`¢≠_shŸ
(
cuºít_cy˛e
);

293 
	}
}

295 
	$shadî_mem_acc_¥öt
–
FILE
 *
fout
 )

297 
i
 = 0; i < 
s_mem_acc_loggî
.
	`size
(); i++) {

298 
s_mem_acc_loggî
[
i
].
	`¥öt
(
fout
);

300 
	}
}

307 
boﬁ
 
	gs_mem_œt_loggî_u£d
 = 
Ál£
;

308 
	gs_mem_œt_loggî_nbös
 = 48;

309 
	g°d
::
ve˘‹
<
löór_hi°ogøm_loggî
> 
s_mem_œt_loggî
;

311 
	$shadî_mem_œt_¸óã
–
n_loggîs
, 
loggög_öãrvÆ
)

313 
s_mem_œt_loggî
.
	`assign
(
n_loggîs
,

314 
	`löór_hi°ogøm_loggî
(
s_mem_œt_loggî_nbös
, 
loggög_öãrvÆ
, "ShdrMemLat"));

316 
i
 = 0; i < 
s_mem_œt_loggî
.
	`size
(); i++) {

317 
s_mem_œt_loggî
[
i
].
	`£t_id
(i);

318 
	`add_¢≠_shŸ_åiggî
(&(
s_mem_œt_loggî
[
i
]));

319 
	`add_•ûl_log
(&(
s_mem_œt_loggî
[
i
]));

322 
s_mem_œt_loggî_u£d
 = 
åue
;

323 
	}
}

325 
	$shadî_mem_œt_log
–
loggî_id
, 
œãncy
)

327 i‡(
s_mem_œt_loggî_u£d
 =
Ál£
) ;

328 i‡(
œãncy
 > (1<<(
s_mem_œt_loggî_nbös
/2))Ë
	`as£π
(0);

329 
	`as£π
(
œãncy
 > 0);

331 
œãncy_bö
;

333 
bö
;

334 
v
 = 
œãncy
;

335 
shi·
;

337 
bö
 = (
v
 > 0xFFFF) << 4; v >>= bin;

338 
shi·
 = (
v
 > 0xFF ) << 3; v >>shi·; 
bö
 |= shift;

339 
shi·
 = (
v
 > 0xF ) << 2; v >>shi·; 
bö
 |= shift;

340 
shi·
 = (
v
 > 0x3 ) << 1; v >>shi·; 
bö
 |= shift;

341 
bö
 |(
v
 >> 1);

342 
œãncy_bö
 = 2 * 
bö
;

343 i‡(
bö
 > 0) {

344 
œãncy_bö
 +((
œãncy
 & (1 << (
bö
 - 1))) != 0)? 1 : 0;

347 
s_mem_œt_loggî
[
loggî_id
].
	`log
(
œãncy_bö
);

348 
	}
}

350 
	$shadî_mem_œt_¢≠shŸ
–
loggî_id
, 
cuºít_cy˛e
)

352 
s_mem_œt_loggî
[
loggî_id
].
	`¢≠_shŸ
(
cuºít_cy˛e
);

353 
	}
}

355 
	$shadî_mem_œt_¥öt
–
FILE
 *
fout
 )

357 
i
 = 0; i < 
s_mem_œt_loggî
.
	`size
(); i++) {

358 
s_mem_œt_loggî
[
i
].
	`¥öt
(
fout
);

360 
	}
}

367 
	gs_ˇche_ac˚ss_loggî_n_ty≥s
 = 0;

368 
	g°d
::
ve˘‹
<
löór_hi°ogøm_loggî
> 
s_ˇche_ac˚ss_loggî
;

370 
	eˇche_ac˚ss_loggî_ty≥s
 {

371 
	mNORMAL
, 
	mTEXTURE
, 
	mCONSTANT
, 
	mINSTRUCTION


374 
	$gë_shadî_n‹mÆ_ˇche_id
(Ë{  
NORMAL
; 
	}
}

375 
	$gë_shadî_ãxtuª_ˇche_id
(Ë{  
TEXTURE
; 
	}
}

376 
	$gë_shadî_c⁄°™t_ˇche_id
(Ë{  
CONSTANT
; 
	}
}

377 
	$gë_shadî_ö°ru˘i⁄_ˇche_id
(Ë{  
INSTRUCTION
; 
	}
}

379 
	$shadî_ˇche_ac˚ss_¸óã
–
n_loggîs
, 
n_ty≥s
, 
loggög_öãrvÆ
)

382 
s_ˇche_ac˚ss_loggî
.
	`assign
(
n_loggîs
,

383 
	`löór_hi°ogøm_loggî
(
n_ty≥s
 * 2, 
loggög_öãrvÆ
, "ShdrCacheMiss"));

385 
s_ˇche_ac˚ss_loggî_n_ty≥s
 = 
n_ty≥s
;

386 
i
 = 0; i < 
s_ˇche_ac˚ss_loggî
.
	`size
(); i++) {

387 
s_ˇche_ac˚ss_loggî
[
i
].
	`£t_id
(i);

388 
	`add_¢≠_shŸ_åiggî
(&(
s_ˇche_ac˚ss_loggî
[
i
]));

389 
	`add_•ûl_log
(&(
s_ˇche_ac˚ss_loggî
[
i
]));

391 
	}
}

393 
	$shadî_ˇche_ac˚ss_log
–
loggî_id
, 
ty≥
, 
miss
)

395 i‡(
s_ˇche_ac˚ss_loggî_n_ty≥s
 == 0) ;

396 i‡(
loggî_id
 < 0) ;

397 
	`as£π
(
ty≥
 =
NORMAL
 ||Åy≥ =
TEXTURE
 ||Åy≥ =
CONSTANT
 ||Åy≥ =
INSTRUCTION
);

398 
	`as£π
(
miss
 == 0 || miss == 1);

400 
s_ˇche_ac˚ss_loggî
[
loggî_id
].
	`log
(2 * 
ty≥
 + 
miss
);

401 
	}
}

403 
	$shadî_ˇche_ac˚ss_u∆og
–
loggî_id
, 
ty≥
, 
miss
)

405 i‡(
s_ˇche_ac˚ss_loggî_n_ty≥s
 == 0) ;

406 i‡(
loggî_id
 < 0) ;

407 
	`as£π
(
ty≥
 =
NORMAL
 ||Åy≥ =
TEXTURE
 ||Åy≥ =
CONSTANT
 ||Åy≥ =
INSTRUCTION
);

408 
	`as£π
(
miss
 == 0 || miss == 1);

410 
s_ˇche_ac˚ss_loggî
[
loggî_id
].
	`u∆og
(2 * 
ty≥
 + 
miss
);

411 
	}
}

413 
	$shadî_ˇche_ac˚ss_¥öt
–
FILE
 *
fout
 )

415 
i
 = 0; i < 
s_ˇche_ac˚ss_loggî
.
	`size
(); i++) {

416 
s_ˇche_ac˚ss_loggî
[
i
].
	`¥öt
(
fout
);

418 
	}
}

425 
löór_hi°ogøm_loggî
 *
	gs_CTA_cou¡_loggî
 = 
NULL
;

427 
	$shadî_CTA_cou¡_¸óã
–
n_shadîs
, 
loggög_öãrvÆ
)

430 i‡(
s_CTA_cou¡_loggî
 !
NULL
Ë
dñëe
 s_CTA_count_logger;

431 
s_CTA_cou¡_loggî
 = 
√w
 
	`löór_hi°ogøm_loggî
(
n_shadîs
, 
loggög_öãrvÆ
, "ShdrCTACou¡", 
Ál£
);

433 
s_CTA_cou¡_loggî
->
	`£t_id
(-1);

434 i‡(
loggög_öãrvÆ
 != 0) {

435 
	`add_¢≠_shŸ_åiggî
(
s_CTA_cou¡_loggî
);

436 
	`add_•ûl_log
(
s_CTA_cou¡_loggî
);

438 
	}
}

440 
	$shadî_CTA_cou¡_log
–
shadî_id
, 
nCTAadded
 )

442 i‡(
s_CTA_cou¡_loggî
 =
NULL
) ;

444 
i
 = 0; i < 
nCTAadded
; i++) {

445 
s_CTA_cou¡_loggî
->
	`log
(
shadî_id
);

447 
	}
}

449 
	$shadî_CTA_cou¡_u∆og
–
shadî_id
, 
nCTAd⁄e
 )

451 i‡(
s_CTA_cou¡_loggî
 =
NULL
) ;

453 
i
 = 0; i < 
nCTAd⁄e
; i++) {

454 
s_CTA_cou¡_loggî
->
	`u∆og
(
shadî_id
);

456 
	}
}

458 
	$shadî_CTA_cou¡_¥öt
–
FILE
 *
fout
 )

460 i‡(
s_CTA_cou¡_loggî
 =
NULL
) ;

461 
s_CTA_cou¡_loggî
->
	`¥öt
(
fout
);

462 
	}
}

464 
	$shadî_CTA_cou¡_visuÆizî_¥öt
–
FILE
 *
fout
 )

466 i‡(
s_CTA_cou¡_loggî
 =
NULL
) ;

467 
s_CTA_cou¡_loggî
->
	`¥öt_visuÆizî
(
fout
);

468 
	}
}

470 
	$shadî_CTA_cou¡_visuÆizî_gz¥öt
–
gzFûe
 
fout
 )

472 i‡(
s_CTA_cou¡_loggî
 =
NULL
) ;

473 
s_CTA_cou¡_loggî
->
	`¥öt_visuÆizî
(
fout
);

474 
	}
}

480 
	gthªad_ö¢_•™
::
	$thªad_ö¢_•™
(
cy˛e
)

481 : 
	`m_cy˛e
(
cy˛e
),

482 #ifde‡
USE_MAP


483 
	$m_ö¢_•™_cou¡
()

485 
	$m_ö¢_•™_cou¡
(32*1024)

488 
	}
}

490 
	gthªad_ö¢_•™
::~
	$thªad_ö¢_•™
(Ë{ 
	}
}

492 
thªad_ö¢_•™
::
	$thªad_ö¢_•™
(c⁄° 
thªad_ö¢_•™
& 
Ÿhî
)

493 : 
	`m_cy˛e
(
Ÿhî
.
m_cy˛e
),

494 
	$m_ö¢_•™_cou¡
(
Ÿhî
.
m_ö¢_•™_cou¡
)

496 
	}
}

498 
	gthªad_ö¢_•™
&Åhªad_ö¢_•™::
›î©‹
=(c⁄° 
thªad_ö¢_•™
& 
Ÿhî
)

500 
¥ötf
("thread_insn_span& operator=\n");

501 i‡(
	gthis
 !&
Ÿhî
) {

502 
m_ö¢_•™_cou¡
 = 
Ÿhî
.m_insn_span_count;

503 
	gm_cy˛e
 = 
Ÿhî
.
m_cy˛e
;

505  *
	gthis
;

508 
	gthªad_ö¢_•™
&Åhªad_ö¢_•™::
›î©‹
+=(c⁄° 
thªad_ö¢_•™
& 
Ÿhî
)

510 
•™_cou¡_m≠
::
c⁄°_ôî©‹
 
i_sc
 = 
Ÿhî
.
m_ö¢_•™_cou¡
.
begö
();

511 ; 
	gi_sc
 !
Ÿhî
.
m_ö¢_•™_cou¡
.
íd
(); ++i_sc) {

512 
	gm_ö¢_•™_cou¡
[
i_sc
->
fú°
] +i_sc->
£c⁄d
;

514  *
	gthis
;

517 
	gthªad_ö¢_•™
::
	$£t_•™
–
addªss_ty≥
 
pc
 )

519 if–(()
pc
) >= 0 )

520 
m_ö¢_•™_cou¡
[
pc
] += 1;

521 
	}
}

523 
	gthªad_ö¢_•™
::
	$ª£t
(
cy˛e
)

525 
m_cy˛e
 = 
cy˛e
;

526 
m_ö¢_•™_cou¡
.
	`˛ór
();

527 
	}
}

529 
	gthªad_ö¢_•™
::
	$¥öt_•™
(
FILE
 *
fout
) const

531 
	`Ârötf
(
fout
, "%d: ", ()
m_cy˛e
);

532 
•™_cou¡_m≠
::
c⁄°_ôî©‹
 
i_sc
 = 
m_ö¢_•™_cou¡
.
	`begö
();

533 ; 
i_sc
 !
m_ö¢_•™_cou¡
.
	`íd
(); ++i_sc) {

534 
	`Ârötf
(
fout
, "%d ", 
i_sc
->
fú°
);

536 
	`Ârötf
(
fout
, "\n");

537 
	}
}

539 
	gthªad_ö¢_•™
::
	$¥öt_hi°o
(
FILE
 *
fout
) const

541 
	`Ârötf
(
fout
, "%d:", ()
m_cy˛e
);

542 
•™_cou¡_m≠
::
c⁄°_ôî©‹
 
i_sc
 = 
m_ö¢_•™_cou¡
.
	`begö
();

543 ; 
i_sc
 !
m_ö¢_•™_cou¡
.
	`íd
(); ++i_sc) {

544 
	`Ârötf
(
fout
, "%d ", 
i_sc
->
£c⁄d
);

546 
	`Ârötf
(
fout
, "\n");

547 
	}
}

549 
	gthªad_ö¢_•™
::
	$¥öt_•¨£_hi°o
(
FILE
 *
fout
) const

551 
n_¥öãd_íåõs
 = 0;

552 
•™_cou¡_m≠
::
c⁄°_ôî©‹
 
i_sc
 = 
m_ö¢_•™_cou¡
.
	`begö
();

553 ; 
i_sc
 !
m_ö¢_•™_cou¡
.
	`íd
(); ++i_sc) {

554 
±x_löío
 = 
	`å™¶©e_pc_to_±xlöío
(
i_sc
->
fú°
);

555 
	`Ârötf
(
fout
, "%u %d ", 
±x_löío
, 
i_sc
->
£c⁄d
);

556 
n_¥öãd_íåõs
++;

558 i‡(
n_¥öãd_íåõs
 == 0) {

559 
	`Ârötf
(
fout
, "0 0 ");

561 
	`Ârötf
(
fout
, "\n");

562 
	}
}

564 
	gthªad_ö¢_•™
::
	$¥öt_•¨£_hi°o
(
gzFûe
 
fout
) const

566 
n_¥öãd_íåõs
 = 0;

567 
•™_cou¡_m≠
::
c⁄°_ôî©‹
 
i_sc
 = 
m_ö¢_•™_cou¡
.
	`begö
();

568 ; 
i_sc
 !
m_ö¢_•™_cou¡
.
	`íd
(); ++i_sc) {

569 
±x_löío
 = 
	`å™¶©e_pc_to_±xlöío
(
i_sc
->
fú°
);

570 
	`gz¥ötf
(
fout
, "%u %d ", 
±x_löío
, 
i_sc
->
£c⁄d
);

571 
n_¥öãd_íåõs
++;

573 i‡(
n_¥öãd_íåõs
 == 0) {

574 
	`gz¥ötf
(
fout
, "0 0 ");

576 
	`gz¥ötf
(
fout
, "\n");

577 
	}
}

581 
	gthªad_CFloˇlôy
::
thªad_CFloˇlôy
(
°d
::
°rög
 
«me
,

582 
¢≠_shŸ_öãrvÆ
,

583 
¡hªads
,

584 
addªss_ty≥
 
°¨t_pc
,

585 
°¨t_cy˛e
)

586 : 
¢≠_shŸ_åiggî
(
¢≠_shŸ_öãrvÆ
), 
m_«me
(
«me
),

587 
m_¡hªads
(
¡hªads
), 
m_thªad_pc
“thªads, 
°¨t_pc
), 
m_cy˛e
(
°¨t_cy˛e
),

588 
	$m_thd_•™
(
°¨t_cy˛e
)

590 
°d
::
	`fûl
(
m_thªad_pc
.
	`begö
(), m_thªad_pc.
	`íd
(), -1);

591 
	}
}

593 
	gthªad_CFloˇlôy
::~
	$thªad_CFloˇlôy
()

595 
	}
}

597 
thªad_CFloˇlôy
::
	$upd©e_thªad_pc
–
thªad_id
, 
addªss_ty≥
 
pc
 )

599 
m_thªad_pc
[
thªad_id
] = 
pc
;

600 
m_thd_•™
.
	`£t_•™
(
pc
);

601 
	}
}

603 
	gthªad_CFloˇlôy
::
	$¢≠_shŸ
(
cuºít_cy˛e
)

605 
m_thd_•™_¨chive
.
	`push_back
(
m_thd_•™
);

606 
m_thd_•™
.
	`ª£t
(
cuºít_cy˛e
);

607 
i
 = 0; i < ()
m_thªad_pc
.
	`size
(); i++) {

608 
m_thd_•™
.
	`£t_•™
(
m_thªad_pc
[
i
]);

610 
	}
}

612 
	gthªad_CFloˇlôy
::
	$•ûl
(
FILE
 *
fout
, 
boﬁ
 
föÆ
)

614 
°d
::
li°
<
thªad_ö¢_•™
>::
ôî©‹
 
lô
 = 
m_thd_•™_¨chive
.
	`begö
();

615 ; 
lô
 !
m_thd_•™_¨chive
.
	`íd
();Üô = m_thd_•™_¨chive.
	`îa£
(lit) ) {

616 
	`Ârötf
(
fout
, "%s-", 
m_«me
.
	`c_°r
());

617 
lô
->
	`¥öt_hi°o
(
fout
);

619 
	`as£π
–
m_thd_•™_¨chive
.
	`em±y
() );

620 i‡(
föÆ
) {

621 
	`Ârötf
(
fout
, "%s-", 
m_«me
.
	`c_°r
());

622 
m_thd_•™
.
	`¥öt_hi°o
(
fout
);

624 
	}
}

627 
	gthªad_CFloˇlôy
::
	$¥öt_visuÆizî
(
FILE
 *
fout
)

629 
	`Ârötf
(
fout
, "%s: ", 
m_«me
.
	`c_°r
());

630 i‡(
m_thd_•™_¨chive
.
	`em±y
()) {

633 
m_thd_•™
.
	`¥öt_•¨£_hi°o
(
fout
);

636 
m_thd_•™
.
	`ª£t
(0);

637 
i
 = 0; i < ()
m_thªad_pc
.
	`size
(); i++)

638 
m_thd_•™
.
	`£t_•™
(
m_thªad_pc
[
i
]);

640 
	`as£π
(0);

642 
	}
}

644 
	gthªad_CFloˇlôy
::
	$¥öt_visuÆizî
(
gzFûe
 
fout
)

646 
	`gz¥ötf
(
fout
, "%s: ", 
m_«me
.
	`c_°r
());

647 i‡(
m_thd_•™_¨chive
.
	`em±y
()) {

650 
m_thd_•™
.
	`¥öt_•¨£_hi°o
(
fout
);

653 
m_thd_•™
.
	`ª£t
(0);

654 
i
 = 0; i < ()
m_thªad_pc
.
	`size
(); i++) {

655 
m_thd_•™
.
	`£t_•™
(
m_thªad_pc
[
i
]);

658 
	`as£π
(0);

660 
	}
}

662 
	gthªad_CFloˇlôy
::
	$¥öt_•™
(
FILE
 *
fout
) const

664 
°d
::
li°
<
thªad_ö¢_•™
>::
c⁄°_ôî©‹
 
lô
 = 
m_thd_•™_¨chive
.
	`begö
();

665 ; 
lô
 !
m_thd_•™_¨chive
.
	`íd
(); ++lit) {

666 
	`Ârötf
(
fout
, "%s-", 
m_«me
.
	`c_°r
());

667 
lô
->
	`¥öt_•™
(
fout
);

669 
	`Ârötf
(
fout
, "%s-", 
m_«me
.
	`c_°r
());

670 
m_thd_•™
.
	`¥öt_•™
(
fout
);

671 
	}
}

673 
	gthªad_CFloˇlôy
::
	$¥öt_hi°o
(
FILE
 *
fout
) const

675 
°d
::
li°
<
thªad_ö¢_•™
>::
c⁄°_ôî©‹
 
lô
 = 
m_thd_•™_¨chive
.
	`begö
();

676 ; 
lô
 !
m_thd_•™_¨chive
.
	`íd
(); ++lit) {

677 
	`Ârötf
(
fout
, "%s-", 
m_«me
.
	`c_°r
());

678 
lô
->
	`¥öt_hi°o
(
fout
);

680 
	`Ârötf
(
fout
, "%s-", 
m_«me
.
	`c_°r
());

681 
m_thd_•™
.
	`¥öt_hi°o
(
fout
);

682 
	}
}

686 
	glöór_hi°ogøm_loggî
::
	$löór_hi°ogøm_loggî
(
n_bös
,

687 
¢≠_shŸ_öãrvÆ
,

688 c⁄° *
«me
,

689 
boﬁ
 
ª£t_©_¢≠_shŸ
,

690 
°¨t_cy˛e
 )

691 : 
	`¢≠_shŸ_åiggî
(
¢≠_shŸ_öãrvÆ
),

692 
	`m_n_bös
(
n_bös
),

693 
	`m_cuº_lö_hi°
(
m_n_bös
, 
°¨t_cy˛e
),

694 
	`m_lö_hi°_¨chive
(),

695 
	`m_cy˛e
(
°¨t_cy˛e
),

696 
	`m_ª£t_©_¢≠_shŸ
(
ª£t_©_¢≠_shŸ
),

697 
	`m_«me
(
«me
),

698 
	`m_id
(
s_ids
++)

700 
	}
}

702 
	glöór_hi°ogøm_loggî
::
	$löór_hi°ogøm_loggî
(c⁄° 
löór_hi°ogøm_loggî
& 
Ÿhî
)

703 : 
	`¢≠_shŸ_åiggî
(
Ÿhî
.
	`gë_öãrvÆ
()),

704 
	`m_n_bös
(
Ÿhî
.
m_n_bös
),

705 
	`m_cuº_lö_hi°
(
m_n_bös
, 
Ÿhî
.
m_cy˛e
),

706 
	`m_lö_hi°_¨chive
(),

707 
	`m_cy˛e
(
Ÿhî
.
m_cy˛e
),

708 
	`m_ª£t_©_¢≠_shŸ
(
Ÿhî
.
m_ª£t_©_¢≠_shŸ
),

709 
	`m_«me
(
Ÿhî
.
m_«me
),

710 
	`m_id
(
s_ids
++)

712 
	}
}

714 
	glöór_hi°ogøm_loggî
::~
	$löór_hi°ogøm_loggî
()

716 
	`ªmove_¢≠_shŸ_åiggî
(
this
);

717 
	`ªmove_•ûl_log
(
this
);

718 
	}
}

720 
	glöór_hi°ogøm_loggî
::
	$¢≠_shŸ
(
cuºít_cy˛e
) {

721 
m_lö_hi°_¨chive
.
	`push_back
(
m_cuº_lö_hi°
);

722 i‡(
m_ª£t_©_¢≠_shŸ
) {

723 
m_cuº_lö_hi°
.
	`ª£t
(
cuºít_cy˛e
);

725 
m_cuº_lö_hi°
.
	`£t_cy˛e
(
cuºít_cy˛e
);

727 
	}
}

729 
	glöór_hi°ogøm_loggî
::
	$•ûl
(
FILE
 *
fout
, 
boﬁ
 
föÆ
)

731 
°d
::
li°
<
löór_hi°ogøm_¢≠shŸ
>::
ôî©‹
 
ôî
 = 
m_lö_hi°_¨chive
.
	`begö
();

732 ; 
ôî
 !
m_lö_hi°_¨chive
.
	`íd
(); iã∏m_lö_hi°_¨chive.
	`îa£
(iter) ) {

733 
	`Ârötf
(
fout
, "%s%02d-", 
m_«me
.
	`c_°r
(), (
m_id
 >= 0)? m_id : 0);

734 
ôî
->
	`¥öt
(
fout
);

735 
	`Ârötf
(
fout
, "\n");

737 
	`as£π
–
m_lö_hi°_¨chive
.
	`em±y
() );

738 i‡(
föÆ
) {

739 
	`Ârötf
(
fout
, "%s%02d-", 
m_«me
.
	`c_°r
(), (
m_id
 >= 0)? m_id : 0);

740 
m_cuº_lö_hi°
.
	`¥öt
(
fout
);

741 
	`Ârötf
(
fout
, "\n");

743 
	}
}

745 
	glöór_hi°ogøm_loggî
::
	$¥öt
(
FILE
 *
fout
) const

747 
°d
::
li°
<
löór_hi°ogøm_¢≠shŸ
>::
c⁄°_ôî©‹
 
ôî
 = 
m_lö_hi°_¨chive
.
	`begö
();

748 ; 
ôî
 !
m_lö_hi°_¨chive
.
	`íd
(); ++iter) {

749 
	`Ârötf
(
fout
, "%s%02d-", 
m_«me
.
	`c_°r
(), 
m_id
);

750 
ôî
->
	`¥öt
(
fout
);

751 
	`Ârötf
(
fout
, "\n");

753 
	`Ârötf
(
fout
, "%s%02d-", 
m_«me
.
	`c_°r
(), 
m_id
);

754 
m_cuº_lö_hi°
.
	`¥öt
(
fout
);

755 
	`Ârötf
(
fout
, "\n");

756 
	}
}

758 
	glöór_hi°ogøm_loggî
::
	$¥öt_visuÆizî
(
FILE
 *
fout
)

760 
	`as£π
(
m_lö_hi°_¨chive
.
	`em±y
());

761 
	`Ârötf
(
fout
, "%s", 
m_«me
.
	`c_°r
());

762 i‡(
m_id
 >= 0) {

763 
	`Ârötf
(
fout
, "%02d: ", 
m_id
);

765 
	`Ârötf
(
fout
, ": ");

767 
m_cuº_lö_hi°
.
	`¥öt_visuÆizî
(
fout
);

768 
	`Ârötf
(
fout
, "\n");

769 i‡(
m_ª£t_©_¢≠_shŸ
) {

770 
m_cuº_lö_hi°
.
	`ª£t
(0);

772 
	}
}

774 
	glöór_hi°ogøm_loggî
::
	$¥öt_visuÆizî
(
gzFûe
 
fout
)

776 
	`as£π
(
m_lö_hi°_¨chive
.
	`em±y
());

777 
	`gz¥ötf
(
fout
, "%s", 
m_«me
.
	`c_°r
());

778 i‡(
m_id
 >= 0) {

779 
	`gz¥ötf
(
fout
, "%02d: ", 
m_id
);

781 
	`gz¥ötf
(
fout
, ": ");

783 
m_cuº_lö_hi°
.
	`¥öt_visuÆizî
(
fout
);

784 
	`gz¥ötf
(
fout
, "\n");

785 i‡(
m_ª£t_©_¢≠_shŸ
) {

786 
m_cuº_lö_hi°
.
	`ª£t
(0);

788 
	}
}

	@src/gpgpu-sim/stat-tool.h

28 #i‚de‡
STAT_TOOL_H


29 
	#STAT_TOOL_H


	)

31 
	~"../ab°ø˘_h¨dw¨e_modñ.h
"

32 
	~"hi°ogøm.h
"

33 
	~"../å1_hash_m≠.h
"

35 
	~<°dio.h
>

36 
	~<zlib.h
>

44 ˛as†
	c¢≠_shŸ_åiggî
 {

45 
	mpublic
:

46 
	$¢≠_shŸ_åiggî
(
öãrvÆ
Ë: 
	$m_¢≠_shŸ_öãrvÆ
(
öãrvÆ
) {}

47 
vútuÆ
 ~
	$¢≠_shŸ_åiggî
(Ë{
	}
}

49 
	$åy_¢≠_shŸ
(
cuºít_cy˛e
) {

50 i‡((
cuºít_cy˛e
 % 
m_¢≠_shŸ_öãrvÆ
 == 0) && current_cycle != 0) {

51 
	`¢≠_shŸ
(
cuºít_cy˛e
);

53 
	}
}

55 
vútuÆ
 
¢≠_shŸ
(
cuºít_cy˛e
) = 0;

57 c⁄° & 
	$gë_öãrvÆ
(Ëc⁄° {  
m_¢≠_shŸ_öãrvÆ
;
	}
}

59 
	g¥Ÿe˘ed
:

60 
m_¢≠_shŸ_öãrvÆ
;

69 ˛as†
	c•ûl_log_öãrÁ˚
 {

70 
	mpublic
:

71 
	$•ûl_log_öãrÁ˚
() {}

72 
vútuÆ
 ~
	$•ûl_log_öãrÁ˚
(Ë{
	}
}

74 
vútuÆ
 
•ûl
(
FILE
 *
fout
, 
boﬁ
 
föÆ
) = 0;

81 ˛as†
	cthªad_ö¢_•™
 {

82 
	mpublic
:

83 
thªad_ö¢_•™
(
cy˛e
);

84 
thªad_ö¢_•™
(c⁄°Åhªad_ö¢_•™& 
Ÿhî
);

85 ~
thªad_ö¢_•™
();

87 
	mthªad_ö¢_•™
& 
	m›î©‹
=(c⁄° 
thªad_ö¢_•™
& 
Ÿhî
);

88 
	mthªad_ö¢_•™
& 
	m›î©‹
+=(c⁄° 
thªad_ö¢_•™
& 
Ÿhî
);

89 
£t_•™
–
addªss_ty≥
 
pc
 );

90 
ª£t
(
cy˛e
);

92 
	$¥öt_•™
(
FILE
 *
fout
) const;

93 
	$¥öt_hi°o
(
FILE
 *
fout
) const;

94 
	$¥öt_•¨£_hi°o
(
FILE
 *
fout
) const;

95 
	$¥öt_•¨£_hi°o
(
gzFûe
 
fout
) const;

97 
¥iv©e
:

98 
my_hash_m≠
<
	taddªss_ty≥
, > 
	t•™_cou¡_m≠
;

99 
m_cy˛e
;

100 
•™_cou¡_m≠
 
m_ö¢_•™_cou¡
;

103 
˛ass
 
thªad_CFloˇlôy
 : 
public
 
¢≠_shŸ_åiggî
,Öubli¯
•ûl_log_öãrÁ˚
 {

104 
public
:

105 
	`thªad_CFloˇlôy
(
°d
::
°rög
 
«me
, 
¢≠_shŸ_öãrvÆ
,

106 
¡hªads
, 
addªss_ty≥
 
°¨t_pc
, 
°¨t_cy˛e
 = 0);

107 ~
	`thªad_CFloˇlôy
();

109 
	`upd©e_thªad_pc
–
thªad_id
, 
addªss_ty≥
 
pc
 );

110 
	`¢≠_shŸ
(
cuºít_cy˛e
);

111 
	`•ûl
(
FILE
 *
fout
, 
boﬁ
 
föÆ
);

113 
	`¥öt_visuÆizî
(
FILE
 *
fout
);

114 
	`¥öt_visuÆizî
(
gzFûe
 
fout
);

115 
	`¥öt_•™
(
FILE
 *
fout
) const;

116 
	`¥öt_hi°o
(
FILE
 *
fout
) const;

117 
¥iv©e
:

118 
°d
::
°rög
 
m_«me
;

120 
m_¡hªads
;

121 
°d
::
ve˘‹
<
addªss_ty≥
> 
m_thªad_pc
;

123 
m_cy˛e
;

124 
thªad_ö¢_•™
 
m_thd_•™
;

125 
°d
::
li°
<
thªad_ö¢_•™
> 
m_thd_•™_¨chive
;

126 
	}
};

132 ˛as†
	cö¢_w¨p_occ_loggî
 {

133 
	mpublic
:

134 
	$ö¢_w¨p_occ_loggî
(
simd_width
)

135 : 
	`m_simd_width
(
simd_width
),

136 
	`m_ö¢_w¨p_occ
(1,
	`löór_hi°ogøm
(1, "", 
m_simd_width
)),

137 
	`m_id
(
s_ids
++) {}

139 
	$ö¢_w¨p_occ_loggî
(c⁄° 
ö¢_w¨p_occ_loggî
& 
Ÿhî
)

140 : 
	`m_simd_width
(
Ÿhî
.
m_simd_width
),

141 
	`m_ö¢_w¨p_occ
(
Ÿhî
.
m_ö¢_w¨p_occ
.
	`size
(), 
	`löór_hi°ogøm
(1, "", 
m_simd_width
)),

142 
	`m_id
(
s_ids
++Ë{
	}
}

144 ~
	$ö¢_w¨p_occ_loggî
(Ë{
	}
}

146 
	gö¢_w¨p_occ_loggî
& 
	g›î©‹
=(c⁄° 
ö¢_w¨p_occ_loggî
& 
p
) {

147 
¥ötf
("ö¢_w¨p_occ_loggî O≥øt‹ˇŒed: %02d \n", 
m_id
);

148 
as£π
(0);

149  *
	gthis
;

152 
	$£t_id
(
id
Ë{ 
m_id
 = id; 
	}
}

154 
	$log
(
addªss_ty≥
 
pc
, 
w¨p_occ
) {

155 if–
pc
 >
m_ö¢_w¨p_occ
.
	`size
() )

156 
m_ö¢_w¨p_occ
.
	`ªsize
(2*
pc
, 
	`löór_hi°ogøm
(1, "", 
m_simd_width
));

157 
m_ö¢_w¨p_occ
[
pc
].
	`add2bö
(
w¨p_occ
 - 1);

158 
	}
}

160 
	$¥öt
(
FILE
 *
fout
) const

162 
i
 = 0; i < 
m_ö¢_w¨p_occ
.
	`size
(); i++) {

163 
	`Ârötf
(
fout
, "In¢W¨pOcc%02d-%d", 
m_id
, 
i
);

164 
m_ö¢_w¨p_occ
[
i
].
	`Âröt
(
fout
);

165 
	`Ârötf
(
fout
, "\n");

167 
	}
}

169 
	g¥iv©e
:

171 
m_simd_width
;

172 
	g°d
::
ve˘‹
<
löór_hi°ogøm
> 
m_ö¢_w¨p_occ
;

173 
	gm_id
;

174 
	gs_ids
;

182 ˛as†
	clöór_hi°ogøm_¢≠shŸ
 {

183 
	mpublic
:

184 
	$löór_hi°ogøm_¢≠shŸ
(
n_bös
, 
cy˛e
)

185 : 
	`m_cy˛e
(
cy˛e
),

186 
	$m_löór_hi°ogøm
(
n_bös
,0)

189 
	$löór_hi°ogøm_¢≠shŸ
(c⁄° 
löór_hi°ogøm_¢≠shŸ
& 
Ÿhî
)

190 : 
	`m_cy˛e
(
Ÿhî
.
m_cy˛e
),

191 
	$m_löór_hi°ogøm
(
Ÿhî
.
m_löór_hi°ogøm
)

192 { 
	}
}

194 ~
	$löór_hi°ogøm_¢≠shŸ
(Ë{ 
	}
}

196 
	$addßm∂e
(
pos
) {

197 
	`as£π
((
size_t
)
pos
 < 
m_löór_hi°ogøm
.
	`size
());

198 
m_löór_hi°ogøm
[
pos
] += 1;

199 
	}
}

201 
	$subßm∂e
(
pos
) {

202 
	`as£π
((
size_t
)
pos
 < 
m_löór_hi°ogøm
.
	`size
());

203 
m_löór_hi°ogøm
[
pos
] -= 1;

204 
	}
}

206 
	$ª£t
(
cy˛e
) {

207 
m_cy˛e
 = 
cy˛e
;

208 
m_löór_hi°ogøm
.
	`assign
(m_löór_hi°ogøm.
	`size
(), 0);

209 
	}
}

211 
	$£t_cy˛e
(
cy˛e
Ë{ 
m_cy˛e
 = cy˛e; 
	}
}

213 
	$¥öt
(
FILE
 *
fout
) const {

214 
	`Ârötf
(
fout
, "%d = ", ()
m_cy˛e
);

215 
i
 = 0; i < 
m_löór_hi°ogøm
.
	`size
(); i++) {

216 
	`Ârötf
(
fout
, "%d ", 
m_löór_hi°ogøm
[
i
]);

218 
	}
}

220 
	$¥öt_visuÆizî
(
FILE
 *
fout
) const {

221 
i
 = 0; i < 
m_löór_hi°ogøm
.
	`size
(); i++) {

222 
	`Ârötf
(
fout
, "%d ", 
m_löór_hi°ogøm
[
i
]);

224 
	}
}

226 
	$¥öt_visuÆizî
(
gzFûe
 
fout
) const {

227 
i
 = 0; i < 
m_löór_hi°ogøm
.
	`size
(); i++) {

228 
	`gz¥ötf
(
fout
, "%d ", 
m_löór_hi°ogøm
[
i
]);

230 
	}
}

232 
	g¥iv©e
:

233 
m_cy˛e
;

234 
	g°d
::
ve˘‹
<> 
m_löór_hi°ogøm
;

237 
˛ass
 
	glöór_hi°ogøm_loggî
 : 
public
 
¢≠_shŸ_åiggî
,Öubli¯
	g•ûl_log_öãrÁ˚
 {

238 
	gpublic
:

239 
löór_hi°ogøm_loggî
(
n_bös
,

240 
¢≠_shŸ_öãrvÆ
,

241 c⁄° *
«me
,

242 
boﬁ
 
ª£t_©_¢≠_shŸ
 = 
åue
,

243 
°¨t_cy˛e
 = 0);

244 
löór_hi°ogøm_loggî
(c⁄°Üöór_hi°ogøm_loggî& 
Ÿhî
);

246 ~
löór_hi°ogøm_loggî
();

248 
£t_id
(
id
Ë{ 
	gm_id
 = id; }

249 
log
(
pos
Ë{ 
	gm_cuº_lö_hi°
.
addßm∂e
(pos); }

250 
u∆og
(
pos
Ë{ 
	gm_cuº_lö_hi°
.
subßm∂e
(pos); }

251 
¢≠_shŸ
(
cuºít_cy˛e
);

252 
•ûl
(
FILE
 *
fout
, 
boﬁ
 
föÆ
);

254 
¥öt
(
FILE
 *
fout
) const;

255 
¥öt_visuÆizî
(
FILE
 *
fout
);

256 
¥öt_visuÆizî
(
gzFûe
 
fout
);

258 
	g¥iv©e
:

259 
m_n_bös
;

260 
löór_hi°ogøm_¢≠shŸ
 
	gm_cuº_lö_hi°
;

261 
	g°d
::
li°
<
löór_hi°ogøm_¢≠shŸ
> 
m_lö_hi°_¨chive
;

262 
	gm_cy˛e
;

263 
boﬁ
 
	gm_ª£t_©_¢≠_shŸ
;

264 
	g°d
::
°rög
 
m_«me
;

265 
	gm_id
;

266 
	gs_ids
;

269 
åy_¢≠_shŸ
 (
cuºít_cy˛e
);

270 
£t_•ûl_öãrvÆ
 (
öãrvÆ
);

271 
•ûl_log_to_fûe
 (
FILE
 *
fout
, 
föÆ
, 
cuºít_cy˛e
);

273 
¸óã_thªad_CFloggî
–
n_loggîs
, 
n_thªads
, 
addªss_ty≥
 
°¨t_pc
, 
loggög_öãrvÆ
);

274 
de°roy_thªad_CFloggî
( );

275 
cÊog_upd©e_thªad_pc
–
loggî_id
, 
thªad_id
, 
addªss_ty≥
 
pc
 );

276 
cÊog_¢≠shŸ
–
loggî_id
, 
cy˛e
 );

277 
cÊog_¥öt
(
FILE
 *
fout
);

278 
cÊog_¥öt_∑th_ex¥essi⁄
(
FILE
 *
fout
);

279 
cÊog_visuÆizî_¥öt
(
FILE
 *
fout
);

280 
cÊog_visuÆizî_gz¥öt
(
gzFûe
 
fout
);

282 
ö¢_w¨p_occ_¸óã
–
n_loggîs
, 
simd_width
 );

283 
ö¢_w¨p_occ_log
–
loggî_id
, 
addªss_ty≥
 
pc
, 
w¨p_occ
 );

284 
ö¢_w¨p_occ_¥öt
–
FILE
 *
fout
 );

287 
shadî_w¨p_occ_¸óã
–
n_loggîs
, 
simd_width
, 
loggög_öãrvÆ
 );

288 
shadî_w¨p_occ_log
–
loggî_id
, 
w¨p_occ
 );

289 
shadî_w¨p_occ_¢≠shŸ
–
loggî_id
, 
cuºít_cy˛e
 );

290 
shadî_w¨p_occ_¥öt
–
FILE
 *
fout
 );

293 
shadî_mem_acc_¸óã
–
n_loggîs
, 
n_døm
, 
n_b™k
, 
loggög_öãrvÆ
 );

294 
shadî_mem_acc_log
–
loggî_id
, 
døm_id
, 
b™k
, 
rw
 );

295 
shadî_mem_acc_¢≠shŸ
–
loggî_id
, 
cuºít_cy˛e
 );

296 
shadî_mem_acc_¥öt
–
FILE
 *
fout
 );

299 
shadî_mem_œt_¸óã
–
n_loggîs
, 
loggög_öãrvÆ
 );

300 
shadî_mem_œt_log
–
loggî_id
, 
œãncy
 );

301 
shadî_mem_œt_¢≠shŸ
–
loggî_id
, 
cuºít_cy˛e
 );

302 
shadî_mem_œt_¥öt
–
FILE
 *
fout
 );

305 
gë_shadî_n‹mÆ_ˇche_id
();

306 
gë_shadî_ãxtuª_ˇche_id
();

307 
gë_shadî_c⁄°™t_ˇche_id
();

308 
gë_shadî_ö°ru˘i⁄_ˇche_id
();

309 
shadî_ˇche_ac˚ss_¸óã
–
n_loggîs
, 
n_ty≥s
, 
loggög_öãrvÆ
 );

310 
shadî_ˇche_ac˚ss_log
–
loggî_id
, 
ty≥
, 
miss
);

311 
shadî_ˇche_ac˚ss_u∆og
–
loggî_id
, 
ty≥
, 
miss
);

312 
shadî_ˇche_ac˚ss_¥öt
–
FILE
 *
fout
 );

315 
shadî_CTA_cou¡_¸óã
–
n_shadîs
, 
loggög_öãrvÆ
);

316 
shadî_CTA_cou¡_log
–
shadî_id
, 
nCTAadded
 );

317 
shadî_CTA_cou¡_u∆og
–
shadî_id
, 
nCTAd⁄e
 );

318 
shadî_CTA_cou¡_ª£äow
( );

319 
shadî_CTA_cou¡_¥öt
–
FILE
 *
fout
 );

320 
shadî_CTA_cou¡_visuÆizî_¥öt
–
FILE
 *
fout
 );

321 
shadî_CTA_cou¡_visuÆizî_gz¥öt
(
gzFûe
 
fout
);

	@src/gpgpu-sim/stats.h

28 #i‚de‡
STATS_INCLUDED


29 
	#STATS_INCLUDED


	)

31 
	emem_°age_ac˚ss_ty≥
 {

32 
	mC_MEM
,

33 
	mT_MEM
,

34 
	mS_MEM
,

35 
	mG_MEM_LD
,

36 
	mL_MEM_LD
,

37 
	mG_MEM_ST
,

38 
	mL_MEM_ST
,

39 
	mN_MEM_STAGE_ACCESS_TYPE


42 
	emem_°age_°Æl_ty≥
 {

43 
	mNO_RC_FAIL
 = 0,

44 
	mBK_CONF
,

45 
	mMSHR_RC_FAIL
,

46 
	mICNT_RC_FAIL
,

47 
	mCOAL_STALL
,

48 
	mWB_ICNT_RC_FAIL
,

49 
	mWB_CACHE_RSRV_FAIL
,

50 
	mN_MEM_STAGE_STALL_TYPE


	@src/gpgpu-sim/visualizer.cc

28 
	~"visuÆizî.h
"

30 
	~"gpu-sim.h
"

31 
	~"l2ˇche.h
"

32 
	~"shadî.h
"

33 
	~"../›ti⁄_∑r£r.h
"

34 
	~"mem_œãncy_°©.h
"

35 
	~"°©-toﬁ.h
"

36 
	~"gpu-ˇche.h
"

38 
	~<time.h
>

39 
	~<°rög.h
>

40 
	~<zlib.h
>

42 
time_ve˘‹_¥öt_öãrvÆ2gzfûe
(
gzFûe
 
outfûe
);

44 
	ggpgpu_sim
::
	$visuÆizî_¥öt°©
()

46 
gzFûe
 
visuÆizî_fûe
 = 
NULL
;

47 i‡–!
m_c⁄fig
.
g_visuÆizî_íabÀd
 )

51 
boﬁ
 
visuÆizî_fú°_¥öt°©
 = 
åue
;

53 
visuÆizî_fûe
 = 
	`gz›í
(
m_c⁄fig
.
g_visuÆizî_fûíame
, (
visuÆizî_fú°_¥öt°©
)? "w" : "a");

54 i‡(
visuÆizî_fûe
 =
NULL
) {

55 
	`¥ötf
("error - couldÇot open visualizerÅrace file.\n");

56 
	`exô
(1);

58 
	`gz£ç¨ams
(
visuÆizî_fûe
, 
m_c⁄fig
.
g_visuÆizî_zÀvñ
, 
Z_DEFAULT_STRATEGY
);

59 
visuÆizî_fú°_¥öt°©
 = 
Ál£
;

61 
	`cÊog_visuÆizî_gz¥öt
(
visuÆizî_fûe
);

62 
	`shadî_CTA_cou¡_visuÆizî_gz¥öt
(
visuÆizî_fûe
);

64 
i
=0;i<
m_mem‹y_c⁄fig
->
m_n_mem
;i++)

65 
m_mem‹y_∑πôi⁄_unô
[
i
]->
	`visuÆizî_¥öt
(
visuÆizî_fûe
);

66 
m_shadî_°©s
->
	`visuÆizî_¥öt
(
visuÆizî_fûe
);

67 
m_mem‹y_°©s
->
	`visuÆizî_¥öt
(
visuÆizî_fûe
);

70 
	`gz¥ötf
(
visuÆizî_fûe
, "globÆcy˛ecou¡: %Œd\n", 
gpu_sim_cy˛e
);

71 
	`gz¥ötf
(
visuÆizî_fûe
, "globÆö¢cou¡: %Œd\n", 
gpu_sim_ö¢
);

72 
	`gz¥ötf
(
visuÆizî_fûe
, "globÆtŸö¢cou¡: %Œd\n", 
gpu_tŸ_sim_ö¢
);

74 
	`time_ve˘‹_¥öt_öãrvÆ2gzfûe
(
visuÆizî_fûe
);

76 
	`gz˛o£
(
visuÆizî_fûe
);

106 
	}
}

108 
	~<li°
>

109 
	~<ve˘‹
>

110 
	~<io°ªam
>

111 
	~<m≠
>

112 
	~"../gpgpu-sim/shadî.h
"

113 ˛as†
	cmy_time_ve˘‹
 {

114 
	m¥iv©e
:

115 
°d
::
m≠
< , 
	m°d
::
ve˘‹
<> > 
ld_time_m≠
;

116 
	m°d
::
m≠
< , std::
ve˘‹
<> > 
°_time_m≠
;

117 
	mld_ve˘‹_size
;

118 
	m°_ve˘‹_size
;

119 
	m°d
::
ve˘‹
<> 
ld_time_di°
;

120 
	m°d
::
ve˘‹
<> 
°_time_di°
;

122 
	m°d
::
ve˘‹
<> 
ovîÆ_ld_time_di°
;

123 
	m°d
::
ve˘‹
<> 
ovîÆ_°_time_di°
;

124 
	movîÆ_ld_cou¡
;

125 
	movîÆ_°_cou¡
;

127 
	mpublic
:

128 
	$my_time_ve˘‹
(
ld_size
,
°_size
){

129 
ld_ve˘‹_size
 = 
ld_size
;

130 
°_ve˘‹_size
 = 
°_size
;

131 
ld_time_di°
.
	`ªsize
(
ld_size
);

132 
°_time_di°
.
	`ªsize
(
°_size
);

133 
ovîÆ_ld_time_di°
.
	`ªsize
(
ld_size
);

134 
ovîÆ_°_time_di°
.
	`ªsize
(
°_size
);

135 
ovîÆ_ld_cou¡
 = 0;

136 
ovîÆ_°_cou¡
= 0;

138 
	$upd©e_ld
(
uid
,
¶Ÿ
, 
time
) {

139 i‡–
ld_time_m≠
.
	`föd
–
uid
 )!ˆd_time_m≠.
	`íd
() ) {

140 
ld_time_m≠
[
uid
][
¶Ÿ
]=
time
;

141 } i‡(
¶Ÿ
 < 
NUM_MEM_REQ_STAT
 ) {

142 
°d
::
ve˘‹
<> 
time_vec
;

143 
time_vec
.
	`ªsize
(
ld_ve˘‹_size
);

144 
time_vec
[
¶Ÿ
] = 
time
;

145 
ld_time_m≠
[
uid
] = 
time_vec
;

149 
	}
}

150 
	$upd©e_°
(
uid
,
¶Ÿ
, 
time
) {

151 i‡–
°_time_m≠
.
	`föd
–
uid
 )!=°_time_m≠.
	`íd
() ) {

152 
°_time_m≠
[
uid
][
¶Ÿ
]=
time
;

154 
°d
::
ve˘‹
<> 
time_vec
;

155 
time_vec
.
	`ªsize
(
°_ve˘‹_size
);

156 
time_vec
[
¶Ÿ
] = 
time
;

157 
°_time_m≠
[
uid
] = 
time_vec
;

159 
	}
}

160 
	$check_ld_upd©e
(
uid
,
¶Ÿ
, 
œãncy
) {

161 i‡–
ld_time_m≠
.
	`föd
–
uid
 )!ˆd_time_m≠.
	`íd
() ) {

162 
our_œãncy
 = 
ld_time_m≠
[
uid
][
¶Ÿ
] -Üd_time_m≠[uid][
IN_ICNT_TO_MEM
];

163 
	`as£π
–
our_œãncy
 =
œãncy
);

164 } i‡(
¶Ÿ
 < 
NUM_MEM_REQ_STAT
 ) {

165 
	`ab‹t
();

167 
	}
}

168 
	$check_°_upd©e
(
uid
,
¶Ÿ
, 
œãncy
) {

169 i‡–
°_time_m≠
.
	`föd
–
uid
 )!=°_time_m≠.
	`íd
() ) {

170 
our_œãncy
 = 
°_time_m≠
[
uid
][
¶Ÿ
] - st_time_m≠[uid][
IN_ICNT_TO_MEM
];

171 
	`as£π
–
our_œãncy
 =
œãncy
);

173 
	`ab‹t
();

175 
	}
}

176 
	g¥iv©e
:

177 
	$ˇlcuœã_ld_di°
() {

178 
i
,
fú°
;

179 
œ°_upd©e
,
diff
;

180 
föished_cou¡
=0;

181 
ld_time_di°
.
	`˛ór
();

182 
ld_time_di°
.
	`ªsize
(
ld_ve˘‹_size
);

183 
°d
::
m≠
< , std::
ve˘‹
<> >::
ôî©‹
 
ôî
, 
ôî_ãmp
;

184 
ôî
 =
ld_time_m≠
.
	`begö
() ;

185 
ôî
 !
ld_time_m≠
.
	`íd
()) {

186 
œ°_upd©e
=0;

187 
fú°
=-1;

188 i‡(!
ôî
->
£c⁄d
[
IN_SHADER_FETCHED
]) {

190 ++
ôî
;

193  !
œ°_upd©e
 ) {

194 
fú°
++;

195 
	`as£π
–
fú°
 < 
ôî
->
£c⁄d
.
	`size
() );

196 
œ°_upd©e
 = 
ôî
->
£c⁄d
[
fú°
];

199  
i
=
fú°
;i<
ld_ve˘‹_size
;i++ ) {

200 
diff
 = 
ôî
->
£c⁄d
[
i
] - 
œ°_upd©e
;

201 i‡–
diff
>0 ) {

202 
ld_time_di°
[
i
]+=
diff
;

203 
œ°_upd©e
 = 
ôî
->
£c⁄d
[
i
];

206 
ôî_ãmp
 = 
ôî
;

207 
ôî
++;

208 
ld_time_m≠
.
	`îa£
(
ôî_ãmp
);

209 
föished_cou¡
++;

211 i‡–
föished_cou¡
 ) {

212  
i
=0;i<
ld_ve˘‹_size
;i++ ) {

213 
ovîÆ_ld_time_di°
[
i
] = (ovîÆ_ld_time_di°[i]*
ovîÆ_ld_cou¡
 + 
ld_time_di°
[i]Ë/ (ovîÆ_ld_cou¡ + 
föished_cou¡
);

215 
ovîÆ_ld_cou¡
 +
föished_cou¡
;

216  
i
=0;i<
ld_ve˘‹_size
;i++ ) {

217 
ld_time_di°
[
i
]/=
föished_cou¡
;

220 
	}
}

222 
	$ˇlcuœã_°_di°
() {

223 
i
,
fú°
;

224 
œ°_upd©e
,
diff
;

225 
föished_cou¡
=0;

226 
°_time_di°
.
	`˛ór
();

227 
°_time_di°
.
	`ªsize
(
°_ve˘‹_size
);

228 
°d
::
m≠
< , std::
ve˘‹
<> >::
ôî©‹
 
ôî
,
ôî_ãmp
;

229 
ôî
 =
°_time_m≠
.
	`begö
() ;

230  
ôî
 !
°_time_m≠
.
	`íd
() ) {

231 
œ°_upd©e
=0;

232 
fú°
=-1;

233 i‡(!
ôî
->
£c⁄d
[
IN_SHADER_FETCHED
]) {

235 ++
ôî
;

238  !
œ°_upd©e
 ) {

239 
fú°
++;

240 
	`as£π
–
fú°
 < 
ôî
->
£c⁄d
.
	`size
() );

241 
œ°_upd©e
 = 
ôî
->
£c⁄d
[
fú°
];

244  
i
=
fú°
;i<
°_ve˘‹_size
;i++ ) {

245 
diff
 = 
ôî
->
£c⁄d
[
i
] - 
œ°_upd©e
;

246 i‡–
diff
>0 ) {

247 
°_time_di°
[
i
]+=
diff
;

248 
œ°_upd©e
 = 
ôî
->
£c⁄d
[
i
];

251 
ôî_ãmp
 = 
ôî
;

252 
ôî
++;

253 
°_time_m≠
.
	`îa£
(
ôî_ãmp
);

254 
föished_cou¡
++;

256 i‡–
föished_cou¡
 ) {

257  
i
=0;i<
°_ve˘‹_size
;i++ ) {

258 
ovîÆ_°_time_di°
[
i
] = (ovîÆ_°_time_di°[i]*
ovîÆ_°_cou¡
 + 
°_time_di°
[i]Ë/ (ovîÆ_°_cou¡ + 
föished_cou¡
);

260 
ovîÆ_°_cou¡
 +
föished_cou¡
;

261  
i
=0;i<
°_ve˘‹_size
;i++ ) {

262 
°_time_di°
[
i
]/=
föished_cou¡
;

265 
	}
}

267 
	gpublic
:

268 
	$˛ór_time_m≠_ve˘‹s
() {

269 
ld_time_m≠
.
	`˛ór
();

270 
°_time_m≠
.
	`˛ór
();

271 
	}
}

272 
	$¥öt_Æl_ld
() {

273 
i
;

274 
°d
::
m≠
< , std::
ve˘‹
<> >::
ôî©‹
 
ôî
;

275  
ôî
 =
ld_time_m≠
.
	`begö
(Ë; iã∏!ld_time_m≠.
	`íd
(); ++iter ) {

276 
°d
::
cout
<<"ld_uid"<<
ôî
->
fú°
;

277  
i
=0;i<
ld_ve˘‹_size
;i++ ) {

278 
°d
::
cout
<<" "<<
ôî
->
£c⁄d
[
i
];

280 
°d
::
cout
<< std::
ídl
;

282 
	}
}

284 
	$¥öt_Æl_°
() {

285 
i
;

286 
°d
::
m≠
< , std::
ve˘‹
<> >::
ôî©‹
 
ôî
;

288  
ôî
 =
°_time_m≠
.
	`begö
(Ë; iã∏!°_time_m≠.
	`íd
(); ++iter ) {

289 
°d
::
cout
<<"°_uid"<<
ôî
->
fú°
;

290  
i
=0;i<
°_ve˘‹_size
;i++ ) {

291 
°d
::
cout
<<" "<<
ôî
->
£c⁄d
[
i
];

293 
°d
::
cout
<<°d::
ídl
;

295 
	}
}

297 
	$ˇlcuœã_di°
() {

298 
	`ˇlcuœã_ld_di°
();

299 
	`ˇlcuœã_°_di°
();

300 
	}
}

301 
	$¥öt_di°
() {

302 
i
;

303 
	`ˇlcuœã_di°
();

304 
°d
::
cout
 << "LD_mem_lat_dist " ;

305  
i
=0;i<
ld_ve˘‹_size
;i++ ) {

306 
°d
::
cout
 <<" "<<()
ovîÆ_ld_time_di°
[
i
];

308 
°d
::
cout
 << std::
ídl
;

309 
°d
::
cout
 << "ST_mem_lat_dist " ;

310  
i
=0;i<
°_ve˘‹_size
;i++ ) {

311 
°d
::
cout
 <<" "<<()
ovîÆ_°_time_di°
[
i
];

313 
°d
::
cout
 << std::
ídl
;

314 
	}
}

315 
	$¥öt_to_fûe
(
FILE
 *
outfûe
) {

316 
i
;

317 
	`ˇlcuœã_di°
();

318 
	`Ârötf
 (
outfûe
,"LDmemlatdist:") ;

319  
i
=0;i<
ld_ve˘‹_size
;i++ ) {

320 
	`Ârötf
 (
outfûe
," %d", ()
ld_time_di°
[
i
]);

322 
	`Ârötf
 (
outfûe
,"\n") ;

323 
	`Ârötf
 (
outfûe
,"STmemlatdist:") ;

324  
i
=0;i<
°_ve˘‹_size
;i++ ) {

325 
	`Ârötf
 (
outfûe
," %d", ()
°_time_di°
[
i
]);

327 
	`Ârötf
 (
outfûe
,"\n") ;

328 
	}
}

329 
	$¥öt_to_gzfûe
(
gzFûe
 
outfûe
) {

330 
i
;

331 
	`ˇlcuœã_di°
();

332 
	`gz¥ötf
 (
outfûe
,"LDmemlatdist:") ;

333  
i
=0;i<
ld_ve˘‹_size
;i++ ) {

334 
	`gz¥ötf
 (
outfûe
," %d", ()
ld_time_di°
[
i
]);

336 
	`gz¥ötf
 (
outfûe
,"\n") ;

337 
	`gz¥ötf
 (
outfûe
,"STmemlatdist:") ;

338  
i
=0;i<
°_ve˘‹_size
;i++ ) {

339 
	`gz¥ötf
 (
outfûe
," %d", ()
°_time_di°
[
i
]);

341 
	`gz¥ötf
 (
outfûe
,"\n") ;

342 
	}
}

345 
my_time_ve˘‹
* 
	gg_my_time_ve˘‹
;

347 
	$time_ve˘‹_¸óã
(
size
) {

348 
g_my_time_ve˘‹
 = 
√w
 
	`my_time_ve˘‹
(
size
,size);

349 
	}
}

352 
	$time_ve˘‹_¥öt
() {

353 
g_my_time_ve˘‹
->
	`¥öt_di°
();

354 
	}
}

356 
	$time_ve˘‹_¥öt_öãrvÆ2gzfûe
(
gzFûe
 
outfûe
) {

357 
g_my_time_ve˘‹
->
	`¥öt_to_gzfûe
(
outfûe
);

358 
	}
}

360 
	~"../gpgpu-sim/mem_„tch.h
"

362 
	$time_ve˘‹_upd©e
(
uid
,
¶Ÿ
 ,
cy˛e
,
ty≥
) {

363 i‡–(
ty≥
 =
READ_REQUEST
Ë|| (ty≥ =
READ_REPLY
) ) {

364 
g_my_time_ve˘‹
->
	`upd©e_ld
–
uid
, 
¶Ÿ
,
cy˛e
);

365 } i‡–(
ty≥
 =
WRITE_REQUEST
Ë|| (ty≥ =
WRITE_ACK
) ) {

366 
g_my_time_ve˘‹
->
	`upd©e_°
–
uid
, 
¶Ÿ
,
cy˛e
);

368 
	`ab‹t
();

370 
	}
}

372 
	$check_time_ve˘‹_upd©e
(
uid
,
¶Ÿ
 ,
œãncy
,
ty≥
)

374 i‡–(
ty≥
 =
READ_REQUEST
Ë|| (ty≥ =
READ_REPLY
) ) {

375 
g_my_time_ve˘‹
->
	`check_ld_upd©e
–
uid
, 
¶Ÿ
, 
œãncy
 );

376 } i‡–(
ty≥
 =
WRITE_REQUEST
Ë|| (ty≥ =
WRITE_ACK
) ) {

377 
g_my_time_ve˘‹
->
	`check_°_upd©e
–
uid
, 
¶Ÿ
, 
œãncy
 );

379 
	`ab‹t
();

381 
	}
}

	@src/gpgpu-sim/visualizer.h

28 #i‚de‡
VISUALIZER_H_INCLUDED


29 
	#VISUALIZER_H_INCLUDED


	)

31 
	~<°dio.h
>

32 
	~<zlib.h
>

34 
time_ve˘‹_¸óã
(
size
);

35 
time_ve˘‹_¥öt
();

36 
time_ve˘‹_upd©e
(
uid
,
¶Ÿ
 ,
cy˛e
,
ty≥
);

37 
check_time_ve˘‹_upd©e
(
uid
,
¶Ÿ
 ,
œãncy
,
ty≥
);

	@src/gpgpusim_entrypoint.cc

28 
	~"gpgpusim_íåypoöt.h
"

29 
	~<°dio.h
>

30 
	~<sys/waô.h
>

31 
	~"›ti⁄_∑r£r.h
"

32 
	~"cuda-sim/cuda-sim.h
"

33 
	~"cuda-sim/±x_ú.h
"

34 
	~"cuda-sim/±x_∑r£r.h
"

35 
	~"gpgpu-sim/gpu-sim.h
"

36 
	~"gpgpu-sim/i˙t_wøµî.h
"

37 
	~"°ªam_m™agî.h
"

39 
	~<±hªad.h
>

40 
	~<£m≠h‹e.h
>

42 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

44 
	gsg_¨gc
 = 3;

45 c⁄° *
	gsg_¨gv
[] = {"", "-config","gpgpusim.config"};

47 
gpgpu_±x_sim_¨g
 *
	ggrid_∑øms
;

49 
£m_t
 
	gg_sim_sig«l_°¨t
;

50 
£m_t
 
	gg_sim_sig«l_föish
;

51 
£m_t
 
	gg_sim_sig«l_exô
;

52 
time_t
 
	gg_simuœti⁄_°¨âime
;

53 
±hªad_t
 
	gg_simuœti⁄_thªad
;

55 
gpgpu_sim_c⁄fig
 
	gg_the_gpu_c⁄fig
;

56 
gpgpu_sim
 *
	gg_the_gpu
;

57 
°ªam_m™agî
 *
	gg_°ªam_m™agî
;

59 
¥öt_simuœti⁄_time
();

61 *
	$gpgpu_sim_thªad_£quítül
(*)

64 
boﬁ
 
d⁄e
;

66 
	`£m_waô
(&
g_sim_sig«l_°¨t
);

67 
d⁄e
 = 
åue
;

68 if–
g_the_gpu
->
	`gë_m‹e_˘a_À·
() ) {

69 
d⁄e
 = 
Ál£
;

70 
g_the_gpu
->
	`öô
();

71  
g_the_gpu
->
	`a˘ive
() ) {

72 
g_the_gpu
->
	`cy˛e
();

73 
g_the_gpu
->
	`dódlock_check
();

75 
g_the_gpu
->
	`¥öt_°©s
();

76 
g_the_gpu
->
	`upd©e_°©s
();

77 
	`¥öt_simuœti⁄_time
();

79 
	`£m_po°
(&
g_sim_sig«l_föish
);

80 } !
d⁄e
);

81 
	`£m_po°
(&
g_sim_sig«l_exô
);

82  
NULL
;

83 
	}
}

85 
±hªad_muãx_t
 
	gg_sim_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

86 
boﬁ
 
	gg_sim_a˘ive
 = 
Ál£
;

87 
boﬁ
 
	gg_sim_d⁄e
 = 
åue
;

88 
Pro˚ss_id
;

89 
Pro˚ss_waôpid
[10];

90 
Pro˚ss_cou¡
;

91 
	gFun˘i⁄_ovî_thªad
;

92 
±hªad_t
 
thªad_id_¥odu˚r
;

93 *
	$gpgpu_sim_thªad_c⁄cuºít
(*)

99 if(
g_debug_executi⁄
 >= 3) {

100 
	`¥ötf
("GPGPU-Sim: *** simulationÅhread startingánd spinning waiting for work ***\n");

101 
	`fÊush
(
°dout
);

103  
g_°ªam_m™agî
->
	`em±y
(Ë&& !
g_sim_d⁄e
 )

110 if(
g_debug_executi⁄
 >= 3) {

111 
	`¥ötf
("GPGPU-Sim: ** START simulationÅhread (detected work) **\n");

112 
g_°ªam_m™agî
->
	`¥öt
(
°dout
);

113 
	`fÊush
(
°dout
);

115 
	`±hªad_muãx_lock
(&
g_sim_lock
);

116 
g_sim_a˘ive
 = 
åue
;

117 
	`±hªad_muãx_u∆ock
(&
g_sim_lock
);

118 
boﬁ
 
a˘ive
 = 
Ál£
;

119 
boﬁ
 
sim_cy˛es
 = 
Ál£
;

120 
g_the_gpu
->
	`öô
();

123 
grid_uid
 = 
g_the_gpu
->
	`föished_kî√l
();

124 if–
grid_uid
 ){

129 
block_co°
[299999];

130 
End_Block_Pro˚ss
[5];

131 
Begö_Block_Pro˚ss
[5];

132 
i
 = 
Begö_Block_Pro˚ss
[
Pro˚ss_id
]; i < 
End_Block_Pro˚ss
[Process_id]; i++)

134 
	`¥ötf
("Pro˚ss_id i†%d,Block id i†%d, cy˛êíd i†%Œd\n",
Pro˚ss_id
,
i
,
block_co°
[i]);

135 
	`fÊush
(
°dout
);

137 
g_the_gpu
->
	`¥öt_°©s
();

139 if(
Pro˚ss_id
 != 0)

141 
±hªad_t
 
thªad_id_˛u°î
[
Clu°î_Thªad_Num
];

142 
KAIN_±hªad_öô
;

143 
KAIN_±hªad_öô
 = 0;

144 
	`±hªad_joö
(
thªad_id_¥odu˚r
,
NULL
);

145 
i
 = 0; i < 
Clu°î_Thªad_Num
;i++)

146 
	`±hªad_joö
(
thªad_id_˛u°î
[
i
],
NULL
);

147 
	`exô
(0);

151 
±hªad_t
 
thªad_id_˛u°î
[
Clu°î_Thªad_Num
];

152 
KAIN_±hªad_öô
;

153 
KAIN_±hªad_öô
 = 0;

155 
i
 = 0; i < 
Clu°î_Thªad_Num
;i++)

156 
	`±hªad_joö
(
thªad_id_˛u°î
[
i
],
NULL
);

158 
i
 = 0; i < 
Pro˚ss_cou¡
-1; i++)

160 
	`¥ötf
("before waitÅhe childÖrocessÉnd\n");

161 
	`fÊush
(
°dout
);

162 
	`waô
(
NULL
);

163 
	`¥ötf
("after waitÅhe childÖrocessÉnd\n");

164 
	`fÊush
(
°dout
);

166 
Fun˘i⁄_ovî_thªad
 !
Thªad_Num
)

168 
	`¥ötf
("sleep forÅheÅhread over\n");

169 
	`¶ìp
(1);

173 
g_°ªam_m™agî
->
	`ªgi°î_föished_kî√l
(
grid_uid
);

180 
°ªam_›î©i⁄
 
›
 = 
g_°ªam_m™agî
->
	`‰⁄t
();

181 
›
.
	`do_›î©i⁄
(
g_the_gpu
);

184 if–
g_the_gpu
->
	`a˘ive
() ) {

185 
g_the_gpu
->
	`cy˛e
();

186 
sim_cy˛es
 = 
åue
;

187 
g_the_gpu
->
	`dódlock_check
();

189 
a˘ive
 = 
g_the_gpu
->
	`a˘ive
(Ë|| !
g_°ªam_m™agî
->
	`em±y
();

190 }  
a˘ive
 );

193 if(
g_debug_executi⁄
 >= 3) {

194 
	`¥ötf
("GPGPU-Sim: ** STOP simulationÅhread (no work) **\n");

195 
	`fÊush
(
°dout
);

197 if(
sim_cy˛es
) {

198 
g_the_gpu
->
	`upd©e_°©s
();

200 
	`±hªad_muãx_lock
(&
g_sim_lock
);

201 
g_sim_a˘ive
 = 
Ál£
;

202 
	`±hªad_muãx_u∆ock
(&
g_sim_lock
);

203 }  !
g_sim_d⁄e
 );

204 if(
g_debug_executi⁄
 >= 3) {

205 
	`¥ötf
("GPGPU-Sim: *** simulationÅhreadÉxiting ***\n");

206 
	`fÊush
(
°dout
);

208 
	`£m_po°
(&
g_sim_sig«l_exô
);

209 
	`¥ötf
("KAIN:thread_createÉxit\n");

210  
NULL
;

211 
	}
}

213 
	$synchr⁄ize
()

215 
	`¥ötf
("GPGPU-Sim: synchronize waiting for inactive GPU simulation\n");

216 
g_°ªam_m™agî
->
	`¥öt
(
°dout
);

217 
	`fÊush
(
°dout
);

219 
boﬁ
 
d⁄e
 = 
Ál£
;

221 
	`±hªad_muãx_lock
(&
g_sim_lock
);

222 
d⁄e
 = 
g_°ªam_m™agî
->
	`em±y
(Ë&& !
g_sim_a˘ive
;

223 
	`±hªad_muãx_u∆ock
(&
g_sim_lock
);

224 } !
d⁄e
);

225 
	`¥ötf
("GPGPU-Sim: detected inactive GPU simulationÅhread\n");

226 
	`fÊush
(
°dout
);

228 
	}
}

230 
	$exô_simuœti⁄
()

232 
g_sim_d⁄e
=
åue
;

233 
	`¥ötf
("GPGPU-Sim:Éxit_simulation called\n");

234 
	`fÊush
(
°dout
);

235 
	`£m_waô
(&
g_sim_sig«l_exô
);

236 
	`¥ötf
("GPGPU-Sim: simulationÅhread signaledÉxit\n");

237 
	`fÊush
(
°dout
);

238 
	}
}

240 
boﬁ
 
g_cuda_œunch_blockög
;

242 
gpgpu_sim
 *
	$gpgpu_±x_sim_öô_≥rf
()

244 
	`§™d
(1);

245 
	`¥öt_•œsh
();

246 
	`ªad_sim_ívú⁄mít_v¨übÀs
();

247 
	`ªad_∑r£r_ívú⁄mít_v¨übÀs
();

248 
›ti⁄_∑r£r_t
 
›p
 = 
	`›ti⁄_∑r£r_¸óã
();

250 
	`i˙t_ªg_›ti⁄s
(
›p
);

251 
g_the_gpu_c⁄fig
.
	`ªg_›ti⁄s
(
›p
);

252 
	`±x_ªg_›ti⁄s
(
›p
);

253 
	`±x_›cocde_œãncy_›ti⁄s
(
›p
);

254 
	`›ti⁄_∑r£r_cmdlöe
(
›p
, 
sg_¨gc
, 
sg_¨gv
);

255 
	`Ârötf
(
°dout
, "GPGPU-Sim: Configuration options:\n\n");

256 
	`›ti⁄_∑r£r_¥öt
(
›p
, 
°dout
);

257 
g_the_gpu_c⁄fig
.
	`öô
();

259 
g_the_gpu
 = 
√w
 
	`gpgpu_sim
(
g_the_gpu_c⁄fig
);

260 
g_°ªam_m™agî
 = 
√w
 
	`°ªam_m™agî
(
g_the_gpu
,
g_cuda_œunch_blockög
);

262 
g_simuœti⁄_°¨âime
 = 
	`time
((
time_t
 *)
NULL
);

264 
	`£m_öô
(&
g_sim_sig«l_°¨t
,0,0);

265 
	`£m_öô
(&
g_sim_sig«l_föish
,0,0);

266 
	`£m_öô
(&
g_sim_sig«l_exô
,0,0);

268  
g_the_gpu
;

269 
	}
}

271 
	$°¨t_sim_thªad
(
≠i
)

273 if–
g_sim_d⁄e
 ) {

274 
g_sim_d⁄e
 = 
Ál£
;

275 if–
≠i
 == 1 ) {

277 
±hªad_©å_t
 
©å_P
;

278 
sched_∑øm
 
∑øm_P
;

279 
	`±hªad_©å_öô
(&
©å_P
);

280 
	`±hªad_©å_£töhîôsched
 (&
©å_P
,
PTHREAD_EXPLICIT_SCHED
);

281 
	`±hªad_©å_£tschedpﬁicy
 (&
©å_P
, 
SCHED_FIFO
);

282 
∑øm_P
.
sched_¥i‹ôy
 = 99;

283 
	`±hªad_©å_£tsched∑øm
 (&
©å_P
, &
∑øm_P
);

303 
	`¥ötf
("KAIN:pthread_create_onethread\n");

304 
	`±hªad_¸óã
(&
g_simuœti⁄_thªad
,&
©å_P
,
gpgpu_sim_thªad_c⁄cuºít
,
NULL
);

306 
	`±hªad_¸óã
(&
g_simuœti⁄_thªad
,
NULL
,
gpgpu_sim_thªad_£quítül
,NULL);

309 
	}
}

311 
	$¥öt_simuœti⁄_time
()

313 
time_t
 
cuºít_time
, 
dif„ªn˚
, 
d
, 
h
, 
m
, 
s
;

314 
cuºít_time
 = 
	`time
((
time_t
 *)
NULL
);

315 
dif„ªn˚
 = 
	`MAX
(
cuºít_time
 - 
g_simuœti⁄_°¨âime
, 1);

317 
d
 = 
dif„ªn˚
/(3600*24);

318 
h
 = 
dif„ªn˚
/3600 - 24*
d
;

319 
m
 = 
dif„ªn˚
/60 - 60*(
h
 + 24*
d
);

320 
s
 = 
dif„ªn˚
 - 60*(
m
 + 60*(
h
 + 24*
d
));

322 
	`fÊush
(
°dîr
);

323 
	`¥ötf
("\n\ngpgpu_simulation_time = %u days, %u hrs, %u min, %u sec (%u sec)\n",

324 ()
d
, ()
h
, ()
m
, ()
s
, ()
dif„ªn˚
 );

325 
	`¥ötf
("gpgpu_simuœti⁄_øã = %u (ö°/£c)\n", ()(
g_the_gpu
->
gpu_tŸ_sim_ö¢
 / 
dif„ªn˚
) );

326 
	`¥ötf
("gpgpu_simuœti⁄_øã = %u (cy˛e/£c)\n", ()(
gpu_tŸ_sim_cy˛e
 / 
dif„ªn˚
) );

327 
	`fÊush
(
°dout
);

328 
	}
}

330 
	$gpgpu_›í˛_±x_sim_maö_≥rf
–
kî√l_öfo_t
 *
grid
 )

332 
g_the_gpu
->
	`œunch
(
grid
);

333 
	`£m_po°
(&
g_sim_sig«l_°¨t
);

334 
	`£m_waô
(&
g_sim_sig«l_föish
);

336 
	}
}

338 
	$gpgpu_›í˛_±x_sim_maö_func
–
kî√l_öfo_t
 *
grid
 )

340 
	`¥ötf
("GPGPU-Sim PTX API: OpenCL functional-only simulationÇot yet implemented (useÖerformance simulation)\n");

341 
	`exô
(1);

342 
	}
}

	@src/gpgpusim_entrypoint.h

28 #i‚de‡
GPGPUSIM_ENTRYPOINT_H_INCLUDED


29 
	#GPGPUSIM_ENTRYPOINT_H_INCLUDED


	)

31 
	~"ab°ø˘_h¨dw¨e_modñ.h
"

33 
	~<time.h
>

34 
time_t
 
g_simuœti⁄_°¨âime
;

36 
˛ass
 
gpgpu_sim
 *
gpgpu_±x_sim_öô_≥rf
();

37 
°¨t_sim_thªad
(
≠i
);

39 
gpgpu_›í˛_±x_sim_maö_≥rf
–
kî√l_öfo_t
 *
grid
 );

40 
gpgpu_›í˛_±x_sim_maö_func
–
kî√l_öfo_t
 *
grid
 );

	@src/intersim/allocator.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

3 
	~<as£π.h
>

5 
	~"Æloˇt‹.hµ
"

6 
	~"maxsize.hµ
"

7 
	~"pim.hµ
"

8 
	~"i¶ù.hµ
"

9 
	~"lﬂ.hµ
"

10 
	~"wave‰⁄t.hµ
"

11 
	~"£œŒoc.hµ
"

17 
	gAŒoˇt‹
::
	$AŒoˇt‹
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

18 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

19 
öputs
, 
ouçuts
 ) :

20 
	`ModuÀ
–
∑ª¡
, 
«me
 ), 
	`_öputs
–
öputs
 ), 
	$_ouçuts
–
ouçuts
 )

22 
_öm©ch
 = 
√w
 [
_öputs
];

23 
_outm©ch
 = 
√w
 [
_ouçuts
];

24 
_outmask
 = 
√w
 [
_ouçuts
];

26  
out
 = 0; ouà< 
_ouçuts
; ++out ) {

27 
_outmask
[
out
] = 0;

29 
	}
}

31 
	gAŒoˇt‹
::~
	$AŒoˇt‹
( )

33 
dñëe
 [] 
_öm©ch
;

34 
dñëe
 [] 
_outm©ch
;

35 
dñëe
 [] 
_outmask
;

36 
	}
}

38 
	gAŒoˇt‹
::
	$_CÀ¨M©chög
( )

40  
i
 = 0; i < 
_öputs
; ++i ) {

41 
_öm©ch
[
i
] = -1;

44  
j
 = 0; j < 
_ouçuts
; ++j ) {

45 
_outm©ch
[
j
] = -1;

47 
	}
}

49 
	gAŒoˇt‹
::
	$OuçutAssig√d
–
ö
 ) const

51 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) );

53  
_öm©ch
[
ö
];

54 
	}
}

56 
	gAŒoˇt‹
::
	$I≈utAssig√d
–
out
 ) const

58 
	`as£π
––
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

60  
_outm©ch
[
out
];

61 
	}
}

63 
	gAŒoˇt‹
::
	$MaskOuçut
–
out
, 
mask
 )

65 
	`as£π
––
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

66 
_outmask
[
out
] = 
mask
;

67 
	}
}

73 
	gDí£AŒoˇt‹
::
	$Dí£AŒoˇt‹
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

74 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

75 
öputs
, 
ouçuts
 ) :

76 
	$AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

78 
_ªque°
 = 
√w
 
sReque°
 * [
_öputs
];

80  
i
 = 0; i < 
_öputs
; ++i ) {

81 
_ªque°
[
i
] = 
√w
 
sReque°
 [
_ouçuts
];

84 
	`CÀ¨
( );

85 
	}
}

87 
	gDí£AŒoˇt‹
::~
	$Dí£AŒoˇt‹
( )

89  
i
 = 0; i < 
_öputs
; ++i ) {

90 
dñëe
 [] 
_ªque°
[
i
];

93 
dñëe
 [] 
_ªque°
;

94 
	}
}

96 
	gDí£AŒoˇt‹
::
	$CÀ¨
( )

98  
i
 = 0; i < 
_öputs
; ++i ) {

99  
j
 = 0; j < 
_ouçuts
; ++j ) {

100 
_ªque°
[
i
][
j
].
œbñ
 = -1;

103 
	}
}

105 
	gDí£AŒoˇt‹
::
	$RódReque°
–
ö
, 
out
 ) const

107 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

108 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

110  
_ªque°
[
ö
][
out
].
œbñ
;

111 
	}
}

113 
boﬁ
 
	gDí£AŒoˇt‹
::
	$RódReque°
–
sReque°
 &
ªq
, 
ö
, 
out
 ) const

115 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

116 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

118 
ªq
 = 
_ªque°
[
ö
][
out
];

120 –
ªq
.
œbñ
 != -1 );

121 
	}
}

123 
	gDí£AŒoˇt‹
::
	$AddReque°
–
ö
, 
out
, 
œbñ
,

124 
ö_¥i
, 
out_¥i
 )

126 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

127 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

129 
_ªque°
[
ö
][
out
].
œbñ
 =Üabel;

130 
_ªque°
[
ö
][
out
].
ö_¥i
 = in_pri;

131 
_ªque°
[
ö
][
out
].
out_¥i
 = out_pri;

132 
	}
}

134 
	gDí£AŒoˇt‹
::
	$RemoveReque°
–
ö
, 
out
, 
œbñ
 )

136 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

137 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

139 
_ªque°
[
ö
][
out
].
œbñ
 = -1;

140 
	}
}

142 
	gDí£AŒoˇt‹
::
	$PrötReque°s
( ) const

144 
cout
 << "ªque°†f‹ " << 
_fuŒ«me
 << 
ídl
;

145  
i
 = 0; i < 
_öputs
; ++i ) {

146  
j
 = 0; j < 
_ouçuts
; ++j ) {

147 
cout
 << ( 
_ªque°
[
i
][
j
].
œbñ
 != -1 ) << " ";

149 
cout
 << 
ídl
;

151 
cout
 << 
ídl
;

152 
	}
}

158 
	gS∑r£AŒoˇt‹
::
	$S∑r£AŒoˇt‹
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

159 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

160 
öputs
, 
ouçuts
 ) :

161 
	$AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

163 
_ö_occ
 = 
√w
 
li°
<>();

164 
_out_occ
 = 
√w
 
li°
<>();

165 
_ö_ªq
 = 
√w
 
li°
<
sReque°
> [
_öputs
];

166 
_out_ªq
 = 
√w
 
li°
<
sReque°
> [
_ouçuts
];

167 
	}
}

170 
	gS∑r£AŒoˇt‹
::~
	$S∑r£AŒoˇt‹
( )

172 
dñëe
 [] 
_ö_ªq
;

173 
dñëe
 [] 
_out_ªq
;

174 
dñëe
 
_ö_occ
;

175 
dñëe
 
_out_occ
;

176 
	}
}

178 
	gS∑r£AŒoˇt‹
::
	$CÀ¨
( )

180  
i
 = 0; i < 
_öputs
; ++i ) {

181 
_ö_ªq
[
i
].
	`˛ór
( );

184  
j
 = 0; j < 
_ouçuts
; ++j ) {

185 
_out_ªq
[
j
].
	`˛ór
( );

188 
_ö_occ
->
	`˛ór
( );

189 
_out_occ
->
	`˛ór
( );

190 
	}
}

192 
	gS∑r£AŒoˇt‹
::
	$RódReque°
–
ö
, 
out
 ) const

194 
sReque°
 
r
;

196 i‡–! 
	`RódReque°
–
r
, 
ö
, 
out
 ) ) {

197 
r
.
œbñ
 = -1;

200  
r
.
œbñ
;

201 
	}
}

203 
boﬁ
 
	gS∑r£AŒoˇt‹
::
	$RódReque°
–
sReque°
 &
ªq
, 
ö
, 
out
 ) const

205 
boﬁ
 
found
;

207 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

208 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

210 
li°
<
sReque°
>::
c⁄°_ôî©‹
 
m©ch
;

212 
m©ch
 = 
_ö_ªq
[
ö
].
	`begö
( );

213  ( 
m©ch
 !
_ö_ªq
[
ö
].
	`íd
( ) ) &&

214 –
m©ch
->
p‹t
 !
out
 ) ) {

215 
m©ch
++;

218 i‡–
m©ch
 !
_ö_ªq
[
ö
].
	`íd
( ) ) {

219 
ªq
 = *
m©ch
;

220 
found
 = 
åue
;

222 
found
 = 
Ál£
;

225  
found
;

226 
	}
}

228 
	gS∑r£AŒoˇt‹
::
	$AddReque°
–
ö
, 
out
, 
œbñ
,

229 
ö_¥i
, 
out_¥i
 )

231 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

232 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

234 
li°
<
sReque°
>::
ôî©‹
 
ö£π_poöt
;

235 
li°
<>::
ôî©‹
 
occ_ö£π
;

236 
sReque°
 
ªq
;

240 i‡–
_ö_ªq
[
ö
].
	`em±y
( ) ) {

241 
occ_ö£π
 = 
_ö_occ
->
	`begö
( );

242  ( 
occ_ö£π
 !
_ö_occ
->
	`íd
( ) ) &&

243 –*
occ_ö£π
 < 
ö
 ) ) {

244 
occ_ö£π
++;

246 
	`as£π
––
occ_ö£π
 =
_ö_occ
->
	`íd
( ) ) ||

247 –*
occ_ö£π
 !
ö
 ) );

249 
_ö_occ
->
	`ö£π
–
occ_ö£π
, 
ö
 );

253 i‡–
_out_ªq
[
out
].
	`em±y
( ) ) {

254 
occ_ö£π
 = 
_out_occ
->
	`begö
( );

255  ( 
occ_ö£π
 !
_out_occ
->
	`íd
( ) ) &&

256 –*
occ_ö£π
 < 
out
 ) ) {

257 
occ_ö£π
++;

259 
	`as£π
––
occ_ö£π
 =
_out_occ
->
	`íd
( ) ) ||

260 –*
occ_ö£π
 !
out
 ) );

262 
_out_occ
->
	`ö£π
–
occ_ö£π
, 
out
 );

266 
ö£π_poöt
 = 
_ö_ªq
[
ö
].
	`begö
( );

267  ( 
ö£π_poöt
 !
_ö_ªq
[
ö
].
	`íd
( ) ) &&

268 –
ö£π_poöt
->
p‹t
 < 
out
 ) ) {

269 
ö£π_poöt
++;

272 
ªq
.
p‹t
 = 
out
;

273 
ªq
.
œbñ
 =Üabel;

274 
ªq
.
ö_¥i
 = in_pri;

275 
ªq
.
out_¥i
 = out_pri;

277 
boﬁ
 
dñ
 = 
Ál£
;

278 
boﬁ
 
add
 = 
åue
;

284 i‡––
ö£π_poöt
 !
_ö_ªq
[
ö
].
	`íd
( ) ) &&

285 –
ö£π_poöt
->
p‹t
 =
out
 ) ) {

286 i‡–
ö£π_poöt
->
ö_¥i
 < in_pri ) {

287 
dñ
 = 
åue
;

289 
add
 = 
Ál£
;

293 i‡–
add
 ) {

294 
_ö_ªq
[
ö
].
	`ö£π
–
ö£π_poöt
, 
ªq
 );

297 i‡–
dñ
 ) {

298 
_ö_ªq
[
ö
].
	`îa£
–
ö£π_poöt
 );

301 
ö£π_poöt
 = 
_out_ªq
[
out
].
	`begö
( );

302  ( 
ö£π_poöt
 !
_out_ªq
[
out
].
	`íd
( ) ) &&

303 –
ö£π_poöt
->
p‹t
 < 
ö
 ) ) {

304 
ö£π_poöt
++;

307 
ªq
.
p‹t
 = 
ö
;

308 
ªq
.
œbñ
 =Üabel;

310 i‡–
add
 ) {

311 
_out_ªq
[
out
].
	`ö£π
–
ö£π_poöt
, 
ªq
 );

314 i‡–
dñ
 ) {

316 i‡––
ö£π_poöt
 =
_out_ªq
[
out
].
	`íd
( ) ) ||

317 –
ö£π_poöt
->
p‹t
 !
ö
 ) ) {

318 
	`Eº‹
( "InternalállocatorÉrror --- inputánd outputÑequestsÇon consistent" );

320 
_out_ªq
[
out
].
	`îa£
–
ö£π_poöt
 );

322 
	}
}

324 
	gS∑r£AŒoˇt‹
::
	$RemoveReque°
–
ö
, 
out
, 
œbñ
 )

326 
	`as£π
––
ö
 >0 ) && ( i¿< 
_öputs
 ) &&

327 –
out
 >0 ) && ( ouà< 
_ouçuts
 ) );

329 
li°
<
sReque°
>::
ôî©‹
 
îa£_poöt
;

330 
li°
<>::
ôî©‹
 
occ_ªmove
;

333 
îa£_poöt
 = 
_ö_ªq
[
ö
].
	`begö
( );

334  ( 
îa£_poöt
 !
_ö_ªq
[
ö
].
	`íd
( ) ) &&

335 –
îa£_poöt
->
p‹t
 !
out
 ) ) {

336 
îa£_poöt
++;

339 
	`as£π
–
îa£_poöt
 !
_ö_ªq
[
ö
].
	`íd
( ) );

340 
_ö_ªq
[
ö
].
	`îa£
–
îa£_poöt
 );

344 i‡–
_ö_ªq
[
ö
].
	`em±y
( ) ) {

345 
occ_ªmove
 = 
_ö_occ
->
	`begö
( );

346  ( 
occ_ªmove
 !
_ö_occ
->
	`íd
( ) ) &&

347 –*
occ_ªmove
 !
ö
 ) ) {

348 
occ_ªmove
++;

351 
	`as£π
–
occ_ªmove
 !
_ö_occ
->
	`íd
( ) );

352 
_ö_occ
->
	`îa£
–
occ_ªmove
 );

356 
îa£_poöt
 = 
_out_ªq
[
out
].
	`begö
( );

357  ( 
îa£_poöt
 !
_out_ªq
[
out
].
	`íd
( ) ) &&

358 –
îa£_poöt
->
p‹t
 !
ö
 ) ) {

359 
îa£_poöt
++;

362 
	`as£π
–
îa£_poöt
 !
_out_ªq
[
out
].
	`íd
( ) );

363 
_out_ªq
[
out
].
	`îa£
–
îa£_poöt
 );

365 i‡–
_out_ªq
[
out
].
	`em±y
( ) ) {

366 
occ_ªmove
 = 
_out_occ
->
	`begö
( );

367  ( 
occ_ªmove
 !
_out_occ
->
	`íd
( ) ) &&

368 –*
occ_ªmove
 !
out
 ) ) {

369 
occ_ªmove
++;

372 
	`as£π
–
occ_ªmove
 !
_out_occ
->
	`íd
( ) );

373 
_out_occ
->
	`îa£
–
occ_ªmove
 );

375 
	}
}

377 
	gS∑r£AŒoˇt‹
::
	$PrötReque°s
( ) const

379 
li°
<
sReque°
>::
c⁄°_ôî©‹
 
ôî
;

381 
cout
 << "öpuàªque°s:" << 
ídl
;

382  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

383 
cout
 << " i≈uà" << 
öput
 << " : ";

384  
ôî
 = 
_ö_ªq
[
öput
].
	`begö
( );

385 
ôî
 !
_ö_ªq
[
öput
].
	`íd
( ); iter++ ) {

386 
cout
 << 
ôî
->
p‹t
 << " ";

388 
cout
 << 
ídl
;

391 
cout
 << "ouçuàªque°s:" << 
ídl
;

392  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

393 
cout
 << " ouçuà" << 
ouçut
 << " : ";

394 i‡–
_outmask
[
ouçut
] == 0 ) {

395  
ôî
 = 
_out_ªq
[
ouçut
].
	`begö
( );

396 
ôî
 !
_out_ªq
[
ouçut
].
	`íd
( ); iter++ ) {

397 
cout
 << 
ôî
->
p‹t
 << " ";

399 
cout
 << 
ídl
;

401 
cout
 << "masked" << 
ídl
;

404 
	}
}

410 
AŒoˇt‹
 *
	gAŒoˇt‹
::
	$NewAŒoˇt‹
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

411 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

412 c⁄° 
°rög
 &
Æloc_ty≥
,

413 
öputs
, 
öput_•ìdup
,

414 
ouçuts
, 
ouçut_•ìdup
 )

416 
AŒoˇt‹
 *
a
 = 0;

418 i‡–
Æloc_ty≥
 == "max_size" ) {

419 
a
 = 
√w
 
	`MaxSizeM©ch
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 );

420 } i‡–
Æloc_ty≥
 == "pim" ) {

421 
a
 = 
√w
 
	`PIM
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 );

422 } i‡–
Æloc_ty≥
 == "islip" ) {

423 
a
 = 
√w
 
	`iSLIP_S∑r£
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 );

424 } i‡–
Æloc_ty≥
 == "loa" ) {

425 
a
 = 
√w
 
	`LOA
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
öput_•ìdup
, 
ouçuts
, 
ouçut_•ìdup
 );

426 } i‡–
Æloc_ty≥
 == "wavefront" ) {

427 
a
 = 
√w
 
	`Wave‰⁄t
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 );

428 } i‡–
Æloc_ty≥
 == "select" ) {

429 
a
 = 
√w
 
	`SñAŒoc
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 );

432  
a
;

433 
	}
}

	@src/intersim/arbiter.cpp

1 
	~"booksim.hµ
"

2 
	~<as£π.h
>

4 
	~"¨bôî.hµ
"

7 
	gArbôî
::
	$Arbôî
–c⁄° 
C⁄figuøti⁄
 &,

8 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

9 
öputs
 )

10 : 
	`ModuÀ
–
∑ª¡
, 
«me
 ), 
	$_öputs
–
öputs
 )

12 
	}
}

14 
	gArbôî
::~
	$Arbôî
( )

16 
	}
}

18 
Arbôî
::
	$CÀ¨
( )

20 
_ªque°s
.
	`˛ór
( );

21 
	}
}

23 
	gArbôî
::
	$AddReque°
–
ö
, 
œbñ
, 
¥i
 )

25 
sReque°
 
r
;

26 
li°
<
sReque°
>::
ôî©‹
 
ö£π_poöt
;

28 
r
.
ö
 = in;Ñ.
œbñ
 =Üabñ;Ñ.
¥i
 =Öri;

30 
ö£π_poöt
 = 
_ªque°s
.
	`begö
( );

31  ( 
ö£π_poöt
 !
_ªque°s
.
	`íd
( ) ) &&

32 –
ö£π_poöt
->
ö
 < in ) ) {

33 
ö£π_poöt
++;

36 
boﬁ
 
dñ
 = 
Ál£
;

37 
boﬁ
 
add
 = 
åue
;

43 i‡––
ö£π_poöt
 !
_ªque°s
.
	`íd
( ) ) &&

44 –
ö£π_poöt
->
ö
 == in ) ) {

45 i‡–
ö£π_poöt
->
¥i
 <Öri ) {

46 
dñ
 = 
åue
;

48 
add
 = 
Ál£
;

52 i‡–
add
 ) {

53 
_ªque°s
.
	`ö£π
–
ö£π_poöt
, 
r
 );

56 i‡–
dñ
 ) {

57 
_ªque°s
.
	`îa£
–
ö£π_poöt
 );

59 
	}
}

61 
	gArbôî
::
	$RemoveReque°
–
ö
, 
œbñ
 )

63 
li°
<
sReque°
>::
ôî©‹
 
îa£_poöt
;

65 
îa£_poöt
 = 
_ªque°s
.
	`begö
( );

66  ( 
îa£_poöt
 !
_ªque°s
.
	`íd
( ) ) &&

67 –
îa£_poöt
->
ö
 < in ) ) {

68 
îa£_poöt
++;

71 
	`as£π
–
îa£_poöt
 !
_ªque°s
.
	`íd
( ) );

72 
_ªque°s
.
	`îa£
–
îa£_poöt
 );

73 
	}
}

75 
	gArbôî
::
	$M©ch
( ) const

77  
_m©ch
;

78 
	}
}

84 
	gPri‹ôyArbôî
::
	$Pri‹ôyArbôî
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

85 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

86 
öputs
 )

87 : 
	$Arbôî
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
 )

89 
_º_±r
 = 0;

90 
	}
}

92 
	gPri‹ôyArbôî
::~
	$Pri‹ôyArbôî
( )

94 
	}
}

96 
Pri‹ôyArbôî
::
	$Arbôøã
( )

98 
li°
<
sReque°
>::
ôî©‹
 
p
;

100 
max_ödex
, 
max_¥i
;

101 
boﬁ
 
wøµed
;

103 i‡–
_ªque°s
.
	`begö
–Ë!_ªque°s.
	`íd
( ) ) {

105 
p
 = 
_ªque°s
.
	`begö
( );

106  ( 
p
 !
_ªque°s
.
	`íd
( ) ) &&

107 –
p
->
ö
 < 
_º_±r
 ) ) {

108 
p
++;

111 
max_ödex
 = -1;

112 
max_¥i
 = 0;

114 
wøµed
 = 
Ál£
;

115  (!
wøµed
Ë|| ( 
p
->
ö
 < 
_º_±r
 ) ) {

116 i‡–
p
 =
_ªque°s
.
	`íd
( ) ) {

117 i‡–
wøµed
 ) {

122 
p
 = 
_ªque°s
.
	`begö
( );

123 
wøµed
 = 
åue
;

127 i‡––
p
->
¥i
 > 
max_¥i
 ) || ( 
max_ödex
 == -1 ) ) {

128 
max_¥i
 = 
p
->
¥i
;

129 
max_ödex
 = 
p
->
ö
;

132 
p
++;

135 
_m©ch
 = 
max_ödex
;

136 i‡–
_m©ch
 != -1 ) {

137 
_º_±r
 = ( 
_m©ch
 + 1 ) % 
_öputs
;

141 
_m©ch
 = -1;

143 
	}
}

	@src/intersim/booksim_config.cpp

1 
	~"booksim.hµ
"

2 
	~"booksim_c⁄fig.hµ
"

4 
	gBookSimC⁄fig
::
	$BookSimC⁄fig
( )

6 
_öt_m≠
["perfect_icnt"] = 0;

7 
_öt_m≠
["fixed_lat_per_hop"] = 0;

8 
_öt_m≠
["network_count"] = 2;

10 
_öt_m≠
["output_extra_latency"] = 0;

12 
_öt_m≠
["use_map"] = 1;

14 
_öt_m≠
["flit_size"] = 32;

16 
_öt_m≠
["enable_link_stats"] = 0;

18 
_öt_m≠
["MATLAB_OUTPUT"] = 0;

19 
_öt_m≠
["DISPLAY_LAT_DIST"] = 0;

20 
_öt_m≠
["DISPLAY_HOP_DIST"] = 0;

21 
_öt_m≠
["DISPLAY_PAIR_LATENCY"] = 0;

23 
_öt_m≠
["input_buf_size"] = 0;

24 
_öt_m≠
["ejection_buf_size"] = 0;

25 
_öt_m≠
["boundary_buf_size"] = 16;

33 
	`AddSåFõld
( "topology", "torus" );

35 
_öt_m≠
["k"] = 8;

36 
_öt_m≠
["n"] = 2;

38 
	`AddSåFõld
( "routing_function", "none" );

39 
	`AddSåFõld
( "selection_function", "random" );

41 
_öt_m≠
["link_failures"] = 0;

42 
_öt_m≠
["fail_seed"] = 0;

44 
_öt_m≠
["wire_delay"] = 0;

48 
_öt_m≠
["in_ports"] = 5;

49 
_öt_m≠
["out_ports"] = 5;

51 
_öt_m≠
["voq"] = 0;

59 
	`AddSåFõld
( "router", "iq" );

61 
_öt_m≠
["output_delay"] = 0;

62 
_öt_m≠
["credit_delay"] = 0;

63 
_Êﬂt_m≠
["internal_speedup"] = 1.0;

67 
_öt_m≠
["num_vcs"] = 1;

68 
_öt_m≠
["vc_buf_size"] = 4;

69 
_öt_m≠
["vc_buffer_pool"] = 0;

71 
_öt_m≠
["wait_for_tail_credit"] = 1;

73 
_öt_m≠
["hold_switch_for_packet"] = 0;

75 
_öt_m≠
["input_speedup"] = 1;

76 
_öt_m≠
["output_speedup"] = 1;

78 
_öt_m≠
["routing_delay"] = 0;

79 
_öt_m≠
["vc_alloc_delay"] = 0;

80 
_öt_m≠
["sw_alloc_delay"] = 0;

81 
_öt_m≠
["st_prepare_delay"] = 0;

82 
_öt_m≠
["st_final_delay"] = 0;

86 
_öt_m≠
["vct"] = 0;

90 
	`AddSåFõld
( "vc_allocator", "max_size" );

91 
	`AddSåFõld
( "sw_allocator", "max_size" );

93 
_öt_m≠
["alloc_iters"] = 1;

97 
	`AddSåFõld
( "traffic", "uniform" );

99 
_öt_m≠
["perm_seed"] = 0;

101 
_Êﬂt_m≠
["injection_rate"] = 0.2;

102 
_öt_m≠
["const_flits_per_packet"] = 1;

104 
	`AddSåFõld
( "injection_process", "bernoulli" );

106 
_Êﬂt_m≠
["burst_alpha"] = 0.5;

107 
_Êﬂt_m≠
["burst_beta"] = 0.5;

109 
	`AddSåFõld
( "priority", "age" );

117 
	`AddSåFõld
( "sim_type", "latency" );

119 
_öt_m≠
["warmup_periods"] = 0;

121 
_öt_m≠
["sample_period"] = 1000;

122 
_öt_m≠
["max_samples"] = 10;

124 
_Êﬂt_m≠
["latency_thres"] = 1000.0;

126 
_öt_m≠
["sim_count"] = 1;

128 
_öt_m≠
["auto_periods"] = 1;

132 
_öt_m≠
["include_queuing"] = 1;

134 
_öt_m≠
["reorder"] = 0;

136 
_öt_m≠
["flit_timing"] = 0;

137 
_öt_m≠
["split_packets"] = 0;

139 
_öt_m≠
["seed"] = 0;

140 
	}
}

	@src/intersim/buffer_state.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

3 
	~<°dlib.h
>

4 
	~<as£π.h
>

6 
	~"buf„r_°©e.hµ
"

7 
	~"øndom_utûs.hµ
"

9 
	gBuf„rSèã
::
	$öô
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

11 
	`_Inô
–
c⁄fig
 );

12 
	}
}

14 
	gBuf„rSèã
::
	$Buf„rSèã
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
,

15 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
 ) :

16 
	$ModuÀ
–
∑ª¡
, 
«me
 )

18 
	`_Inô
–
c⁄fig
 );

19 
	}
}

21 
	gBuf„rSèã
::
	$_Inô
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

23 
_buf_size
 = 
c⁄fig
.
	`GëI¡
( "vc_buf_size" );

24 
_vcs
 = 
c⁄fig
.
	`GëI¡
( "num_vcs" );

26 
_waô_f‹_èû_¸edô
 = 
c⁄fig
.
	`GëI¡
( "wait_for_tail_credit" );

28 
_ö_u£
 = 
√w
 
boﬁ
 [
_vcs
];

29 
_èû_£¡
 = 
√w
 
boﬁ
 [
_vcs
];

30 
_cur_occupõd
 = 
√w
 [
_vcs
];

32 
_œ°_avaû
 = 0;

34  
v
 = 0; v < 
_vcs
; ++v ) {

35 
_ö_u£
[
v
] = 
Ál£
;

36 
_èû_£¡
[
v
] = 
Ál£
;

37 
_cur_occupõd
[
v
] = 0;

39 
	}
}

41 
	gBuf„rSèã
::~
	$Buf„rSèã
( )

43 
dñëe
 [] 
_ö_u£
;

44 
dñëe
 [] 
_èû_£¡
;

45 
dñëe
 [] 
_cur_occupõd
;

46 
	}
}

48 
	gBuf„rSèã
::
	$Pro˚ssCªdô
–
Cªdô
 *
c
 )

50 
	`as£π
–
c
 );

52  
v
 = 0; v < 
c
->
vc_˙t
; ++v ) {

53 
	`as£π
––
c
->
vc
[
v
] >0 ) && ( c->vc[v] < 
_vcs
 ) );

55 i‡––
_waô_f‹_èû_¸edô
 ) &&

56 –!
_ö_u£
[
c
->
vc
[
v
]] ) ) {

57 
	`Eº‹
( "Received credit for idle buffer" );

60 i‡–
_cur_occupõd
[
c
->
vc
[
v
]] > 0 ) {

61 --
_cur_occupõd
[
c
->
vc
[
v
]];

63 i‡––
_cur_occupõd
[
c
->
vc
[
v
]] == 0 ) &&

64 –
_èû_£¡
[
c
->
vc
[
v
]] ) ) {

65 
_ö_u£
[
c
->
vc
[
v
]] = 
Ál£
;

68 
cout
 << "VC = " << 
c
->
vc
[
v
] << 
ídl
;

69 
	`Eº‹
( "Buffer occupancy fell below zero" );

72 
	}
}

74 
	gBuf„rSèã
::
	$SídögFlô
–
Flô
 *
f
 )

76 
	`as£π
–
f
 && ( f->
vc
 >0 ) && ( f->v¯< 
_vcs
 ) );

78 i‡–
_cur_occupõd
[
f
->
vc
] < 
_buf_size
 ) {

79 ++
_cur_occupõd
[
f
->
vc
];

81 i‡–
f
->
èû
 ) {

82 
_èû_£¡
[
f
->
vc
] = 
åue
;

84 i‡–!
_waô_f‹_èû_¸edô
 ) {

85 
_ö_u£
[
f
->
vc
] = 
Ál£
;

89 
	`Eº‹
( "Flit sentÅo full buffer" );

91 
	}
}

93 
	gBuf„rSèã
::
	$TakeBuf„r
–
vc
 )

95 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

97 i‡–
_ö_u£
[
vc
] ) {

98 
	`Eº‹
( "BufferÅaken while in use" );

101 
_ö_u£
[
vc
] = 
åue
;

102 
_èû_£¡
[
vc
] = 
Ál£
;

103 
	}
}

105 
boﬁ
 
	gBuf„rSèã
::
	$IsFuŒF‹
–
vc
 ) const

107 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

108 –
_cur_occupõd
[
vc
] =
_buf_size
 ) ? 
åue
 : 
Ál£
;

109 
	}
}

111 
boﬁ
 
	gBuf„rSèã
::
	$IsAvaûabÀF‹
–
vc
 ) const

113 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

114  !
_ö_u£
[
vc
];

115 
	}
}

117 
	gBuf„rSèã
::
	$FödAvaûabÀ
( )

119 
avaûabÀ_vc
 = -1;

120 
vc
;

122 
_œ°_avaû
 = 
	`R™domI¡
–
_vcs
 - 1 );

124  
v
 = 0; v < 
_vcs
; ++v ) {

125 
vc
 = ( 
v
 + 
_œ°_avaû
 + 1 ) % 
_vcs
;

127 i‡–
	`IsAvaûabÀF‹
–
vc
 ) ) {

128 
avaûabÀ_vc
 = 
vc
;

129 
_œ°_avaû
 = 
vc
;

134  
avaûabÀ_vc
;

135 
	}
}

137 
	gBuf„rSèã
::
	$Di•œy
( ) const

139 
cout
 << 
_fuŒ«me
 << " :" << 
ídl
;

140  
v
 = 0; v < 
_vcs
; ++v ) {

141 
cout
 << " buf„∏˛as†" << 
v
 << 
ídl
;

142 
cout
 << " in_u£ = " << 
_ö_u£
[
v
] << "Åaû_£¡ = " << 
_èû_£¡
[v] << 
ídl
;

143 
cout
 << " occupõd = " << 
_cur_occupõd
[
v
] << 
ídl
;

145 
	}
}

	@src/intersim/config.l

4 
	~"booksim.hµ
"

5 
	~<°dlib.h
>

6 
	~<°rög
>

7 
	~<c°rög
>

9 
	~"c⁄fig_èb.hµ
"

10 
	~"c⁄fig_utûs.hµ
"

12 
c⁄figîr‹
(
°rög
 
msg
);

13 "C" 
	$c⁄figwøp
(Ë{  1; 
	}
}

15 
c⁄fig_öput
(*, );

16 #unde‡
YY_INPUT


17 
	#YY_INPUT
(
b
, 
r
, 
ms
Ë‘ = 
	`c⁄fig_öput
(b, ms))

	)

19 
	gc⁄figlöío
 = 1;

23 %
›ti⁄
 
nou≈ut


25 %% /* 
	$yyÀx
 */

29 \/\/[^\
n
]* ;

30 [ \
t
\
r
]* ;

32 \
n
 { 
c⁄figlöío
++; }

36 [
A
-
Za
-
z_
][A-Za-
z0
-9
_
]* { 
c⁄figlvÆ
.
«me
 = 
	`°rdup
–
yyãxt
 );  
STR
; }

38 [0-9]+ { 
c⁄figlvÆ
.
num
 = 
	`°πoul
–
yyãxt
, 0, 10 );  
NUM
; }

40 [0-9]+\.[0-9]+ { 
c⁄figlvÆ
.
‚um
 = 
	`°πod
–
yyãxt
, 0 );  
FNUM
; }

42 . {  
yyãxt
[0]; }

44 
	}
%%

46 
	$c⁄figîr‹
–
°rög
 
msg
 )

48 
C⁄figuøti⁄
::
	`GëTheC⁄fig
–)->
	`P¨£Eº‹
–
msg
, 
c⁄figlöío
 );

49 
	}
}

	@src/intersim/config.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
c⁄fig∑r£


	)

68 
	#yyÀx
 
c⁄figÀx


	)

69 
	#yyîr‹
 
c⁄figîr‹


	)

70 
	#yylvÆ
 
c⁄figlvÆ


	)

71 
	#yych¨
 
c⁄figch¨


	)

72 
	#yydebug
 
c⁄figdebug


	)

73 
	#yy√ºs
 
c⁄fig√ºs


	)

82 
	~"booksim.hµ
"

83 
	~<°rög
>

84 
	~"c⁄fig_utûs.hµ
"

86 
c⁄figÀx
();

87 
c⁄figîr‹
(
°rög
 
msg
);

95 #i‚de‡
YYDEBUG


96 
	#YYDEBUG
 0

	)

100 #ifde‡
YYERROR_VERBOSE


101 #unde‡
YYERROR_VERBOSE


102 
	#YYERROR_VERBOSE
 1

	)

104 
	#YYERROR_VERBOSE
 0

	)

108 #i‚de‡
YYTOKEN_TABLE


109 
	#YYTOKEN_TABLE
 0

	)

114 #i‚de‡
YYTOKENTYPE


115 
	#YYTOKENTYPE


	)

118 
	eyytokíty≥
 {

119 
	mSTR
 = 258,

120 
	mNUM
 = 259,

121 
	mFNUM
 = 260

127 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


128 
	uYYSTYPE


134 *
	m«me
;

135 
	mnum
;

136 
	m‚um
;

142 } 
	tYYSTYPE
;

143 
	#YYSTYPE_IS_TRIVIAL
 1

	)

144 
	#yy°y≥
 
YYSTYPE


	)

145 
	#YYSTYPE_IS_DECLARED
 1

	)

159 #ifde‡
YYTYPE_UINT8


160 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

162 
	tyyty≥_uöt8
;

165 #ifde‡
YYTYPE_INT8


166 
YYTYPE_INT8
 
	tyyty≥_öt8
;

167 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

168 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

169 sig√d 
	tyyty≥_öt8
;

171 
	tyyty≥_öt8
;

174 #ifde‡
YYTYPE_UINT16


175 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

177 
	tyyty≥_uöt16
;

180 #ifde‡
YYTYPE_INT16


181 
YYTYPE_INT16
 
	tyyty≥_öt16
;

183 
	tyyty≥_öt16
;

186 #i‚de‡
YYSIZE_T


187 #ifde‡
__SIZE_TYPE__


188 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

189 #ñi‡
deföed
 
size_t


190 
	#YYSIZE_T
 
size_t


	)

191 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

192 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

193 
	~<°ddef.h
>

194 
	#YYSIZE_T
 
size_t


	)

196 
	#YYSIZE_T
 

	)

200 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

202 #i‚de‡
YY_


203 #i‡
YYENABLE_NLS


204 #i‡
ENABLE_NLS


205 
	~<liböé.h
>

206 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

209 #i‚de‡
YY_


210 
	#YY_
(
msgid
Ë
	)
msgid

215 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


216 
	#YYUSE
(
e
Ë((Ë”))

	)

218 
	#YYUSE
(
e
Ë

	)

222 #i‚de‡
löt


223 
	#YYID
(
n
Ë“)

	)

225 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

226 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

228 
	$YYID
 (
yyi
)

231 
	$YYID
 (
yyi
)

232 
yyi
;

235  
yyi
;

236 
	}
}

239 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


243 #ifde‡
YYSTACK_USE_ALLOCA


244 #i‡
YYSTACK_USE_ALLOCA


245 #ifde‡
__GNUC__


246 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

247 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


248 
	~<Æloˇ.h
>

249 #ñi‡
deföed
 
_AIX


250 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

251 #ñi‡
deföed
 
_MSC_VER


252 
	~<mÆloc.h
>

253 
	#Æloˇ
 
_Æloˇ


	)

255 
	#YYSTACK_ALLOC
 
Æloˇ


	)

256 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

257 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

258 
	~<°dlib.h
>

259 #i‚de‡
_STDLIB_H


260 
	#_STDLIB_H
 1

	)

267 #ifde‡
YYSTACK_ALLOC


269 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

270 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


275 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

278 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

279 
	#YYSTACK_FREE
 
YYFREE


	)

280 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


281 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

283 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

284 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

285 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

286 
	~<°dlib.h
>

287 #i‚de‡
_STDLIB_H


288 
	#_STDLIB_H
 1

	)

291 #i‚de‡
YYMALLOC


292 
	#YYMALLOC
 
mÆloc


	)

293 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

294 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

295 *
mÆloc
 (
YYSIZE_T
);

298 #i‚de‡
YYFREE


299 
	#YYFREE
 
‰ì


	)

300 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

301 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

302 
‰ì
 (*);

309 #i‡(! 
deföed
 
yyovîÊow
 \

310 && (! 
deföed
 
	g__˝lu•lus
 \

311 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

314 
	uyyÆloc


316 
yyty≥_öt16
 
	myyss_Æloc
;

317 
YYSTYPE
 
	myyvs_Æloc
;

321 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

325 
	#YYSTACK_BYTES
(
N
) \

326 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

327 + 
YYSTACK_GAP_MAXIMUM
)

	)

331 #i‚de‡
YYCOPY


332 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

333 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

334 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

336 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

339 
YYSIZE_T
 
yyi
; \

340 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

341 (
To
)[
yyi
] = (
From
)[yyi]; \

343 
	`YYID
 (0))

	)

352 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

355 
YYSIZE_T
 
yy√wbyãs
; \

356 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

357 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

358 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

359 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

361 
	`YYID
 (0))

	)

366 
	#YYFINAL
 5

	)

368 
	#YYLAST
 11

	)

371 
	#YYNTOKENS
 8

	)

373 
	#YYNNTS
 3

	)

375 
	#YYNRULES
 6

	)

377 
	#YYNSTATES
 13

	)

380 
	#YYUNDEFTOK
 2

	)

381 
	#YYMAXUTOK
 260

	)

383 
	#YYTRANSLATE
(
YYX
) \

384 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

387 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

418 #i‡
YYDEBUG


421 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

427 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

435 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

441 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


444 c⁄° *c⁄° 
	gyyäame
[] =

451 #ifde‡
YYPRINT


454 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

461 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

467 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

475 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

482 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

489 
	#YYPACT_NINF
 -5

	)

490 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

497 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

506 
	#YYTABLE_NINF
 -1

	)

507 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

513 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

521 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

527 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

528 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

529 
	#YYEMPTY
 (-2)

	)

530 
	#YYEOF
 0

	)

532 
	#YYACCEPT
 
yyac˚±œb


	)

533 
	#YYABORT
 
yyab‹éab


	)

534 
	#YYERROR
 
yyîr‹œb


	)

541 
	#YYFAIL
 
yyîæab


	)

543 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

545 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

547 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

549 
yych¨
 = (
Tokí
); \

550 
yylvÆ
 = (
VÆue
); \

551 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

552 
	`YYPOPSTACK
 (1); \

553 
yybackup
; \

557 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

558 
YYERROR
; \

560 
	`YYID
 (0))

	)

563 
	#YYTERROR
 1

	)

564 
	#YYERRCODE
 256

	)

571 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

572 #i‚de‡
YYLLOC_DEFAULT


573 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

575 i‡(
	`YYID
 (
N
)) \

577 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

578 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

579 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

580 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

584 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

585 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

586 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

587 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

589 
	`YYID
 (0))

	)

597 #i‚de‡
YY_LOCATION_PRINT


598 #i‡
YYLTYPE_IS_TRIVIAL


599 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

600 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

601 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

602 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

604 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

611 #ifde‡
YYLEX_PARAM


612 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

614 
	#YYLEX
 
	`yyÀx
 ()

	)

618 #i‡
YYDEBUG


620 #i‚de‡
YYFPRINTF


621 
	~<°dio.h
>

622 
	#YYFPRINTF
 
Ârötf


	)

625 
	#YYDPRINTF
(
Args
) \

627 i‡(
yydebug
) \

628 
YYFPRINTF
 
Args
; \

629 } 
	`YYID
 (0))

	)

631 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

633 i‡(
yydebug
) \

635 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

636 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

637 
Ty≥
, 
VÆue
); \

638 
	`YYFPRINTF
 (
°dîr
, "\n"); \

640 } 
	`YYID
 (0))

	)

648 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

649 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

651 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

654 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

655 
FILE
 *
yyouçut
;

656 
yyty≥
;

657 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

660 i‡(!
yyvÆuï
)

662 #ifde‡
YYPRINT


663 i‡(
yyty≥
 < 
YYNTOKENS
)

664 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

666 
	`YYUSE
 (
yyouçut
);

668 
yyty≥
)

673 
	}
}

680 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

681 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

683 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

686 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

687 
FILE
 *
yyouçut
;

688 
yyty≥
;

689 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

692 i‡(
yyty≥
 < 
YYNTOKENS
)

693 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

695 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

697 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

698 
	`YYFPRINTF
 (
yyouçut
, ")");

699 
	}
}

706 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

707 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

709 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

712 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

713 
yyty≥_öt16
 *
yybŸtom
;

714 
yyty≥_öt16
 *
yyt›
;

717 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

718 ; 
yybŸtom
 <
yyt›
; yybottom++)

720 
yybŸ
 = *
yybŸtom
;

721 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

723 
	`YYFPRINTF
 (
°dîr
, "\n");

724 
	}
}

726 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

728 i‡(
yydebug
) \

729 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

730 } 
	`YYID
 (0))

	)

737 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

738 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

740 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

743 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

744 
YYSTYPE
 *
yyv•
;

745 
yyruÀ
;

748 
yyƒhs
 = 
yyr2
[
yyruÀ
];

749 
yyi
;

750 
yy o
 = 
yyæöe
[
yyruÀ
];

751 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

752 
yyruÀ
 - 1, 
yy o
);

754 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

756 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

757 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

758 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

760 
	`YYFPRINTF
 (
°dîr
, "\n");

762 
	}
}

764 
	#YY_REDUCE_PRINT
(
RuÀ
) \

766 i‡(
yydebug
) \

767 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

768 } 
	`YYID
 (0))

	)

772 
	gyydebug
;

774 
	#YYDPRINTF
(
Args
)

	)

775 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

776 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

777 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

782 #i‚def 
YYINITDEPTH


783 
	#YYINITDEPTH
 200

	)

793 #i‚de‡
YYMAXDEPTH


794 
	#YYMAXDEPTH
 10000

	)

799 #i‡
YYERROR_VERBOSE


801 #i‚de‡
yy°æí


802 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


803 
	#yy°æí
 
°æí


	)

806 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

807 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

808 
YYSIZE_T


809 
	$yy°æí
 (c⁄° *
yy°r
)

811 
YYSIZE_T


812 
	$yy°æí
 (
yy°r
)

813 c⁄° *
yy°r
;

816 
YYSIZE_T
 
yyÀn
;

817 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

819  
yyÀn
;

820 
	}
}

824 #i‚de‡
yy°p˝y


825 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


826 
	#yy°p˝y
 
°p˝y


	)

830 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

831 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

833 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

836 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

837 *
yyde°
;

838 c⁄° *
yy§c
;

841 *
yyd
 = 
yyde°
;

842 c⁄° *
yys
 = 
yy§c
;

844 (*
yyd
++ = *
yys
++) != '\0')

847  
yyd
 - 1;

848 
	}
}

852 #i‚de‡
yyäamîr


860 
YYSIZE_T


861 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

863 i‡(*
yy°r
 == '"')

865 
YYSIZE_T
 
yyn
 = 0;

866 c⁄° *
yyp
 = 
yy°r
;

869 *++
yyp
)

873 
do_nŸ_°rù_quŸes
;

876 i‡(*++
yyp
 != '\\')

877 
do_nŸ_°rù_quŸes
;

880 i‡(
yyªs
)

881 
yyªs
[
yyn
] = *
yyp
;

882 
yyn
++;

886 i‡(
yyªs
)

887 
yyªs
[
yyn
] = '\0';

888  
yyn
;

890 
do_nŸ_°rù_quŸes
: ;

893 i‡(! 
yyªs
)

894  
	`yy°æí
 (
yy°r
);

896  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

897 
	}
}

907 
YYSIZE_T


908 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

910 
yyn
 = 
yy∑˘
[
yy°©e
];

912 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

916 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

917 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

918 
YYSIZE_T
 
yysize
 = 
yysize0
;

919 
YYSIZE_T
 
yysize1
;

920 
yysize_ovîÊow
 = 0;

921 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

922 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

923 
yyx
;

928 
	`YY_
("syntaxÉrror, unexpected %s");

929 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

930 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

931 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

932 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

934 *
yyfmt
;

935 c⁄° *
yyf
;

936 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

937 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

938 c⁄° 
yy‹
[] = " or %s";

939 
yyf‹m©
[ 
yyu√x≥˘ed


940 +  
yyex≥˘ög
 - 1

941 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

942 * ( 
yy‹
 - 1))];

943 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

947 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

950 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

951 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

952 
yycou¡
 = 1;

954 
yy¨g
[0] = 
yyäame
[
yyty≥
];

955 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

957 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

958 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

960 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

962 
yycou¡
 = 1;

963 
yysize
 = 
yysize0
;

964 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

967 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

968 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

969 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

970 
yysize
 = 
yysize1
;

971 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

972 
yy¥efix
 = 
yy‹
;

975 
yyf
 = 
	`YY_
(
yyf‹m©
);

976 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

977 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

978 
yysize
 = 
yysize1
;

980 i‡(
yysize_ovîÊow
)

981  
YYSIZE_MAXIMUM
;

983 i‡(
yyªsu…
)

988 *
yyp
 = 
yyªsu…
;

989 
yyi
 = 0;

990 (*
yyp
 = *
yyf
) != '\0')

992 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

994 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

995 
yyf
 += 2;

999 
yyp
++;

1000 
yyf
++;

1004  
yysize
;

1006 
	}
}

1015 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1016 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1018 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1021 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1022 c⁄° *
yymsg
;

1023 
yyty≥
;

1024 
YYSTYPE
 *
yyvÆuï
;

1027 
	`YYUSE
 (
yyvÆuï
);

1029 i‡(!
yymsg
)

1030 
yymsg
 = "Deleting";

1031 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1033 
yyty≥
)

1039 
	}
}

1042 #ifde‡
YYPARSE_PARAM


1043 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1044 
yy∑r£
 (*
YYPARSE_PARAM
);

1046 
yy∑r£
 ();

1049 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1050 
yy∑r£
 ();

1052 
yy∑r£
 ();

1058 
	gyych¨
;

1061 
YYSTYPE
 
	gyylvÆ
;

1064 
	gyy√ºs
;

1072 #ifde‡
YYPARSE_PARAM


1073 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1074 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1076 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1079 
	$yy∑r£
 (
YYPARSE_PARAM
)

1080 *
YYPARSE_PARAM
;

1083 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1084 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1086 
	$yy∑r£
 ()

1089 
	$yy∑r£
 ()

1096 
yy°©e
;

1098 
yyîr°©us
;

1108 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1109 
yyty≥_öt16
 *
yyss
;

1110 
yyty≥_öt16
 *
yys•
;

1113 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1114 
YYSTYPE
 *
yyvs
;

1115 
YYSTYPE
 *
yyv•
;

1117 
YYSIZE_T
 
yy°acksize
;

1119 
yyn
;

1120 
yyªsu…
;

1122 
yytokí
;

1125 
YYSTYPE
 
yyvÆ
;

1127 #i‡
YYERROR_VERBOSE


1129 
yymsgbuf
[128];

1130 *
yymsg
 = 
yymsgbuf
;

1131 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1134 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1138 
yyÀn
 = 0;

1140 
yytokí
 = 0;

1141 
yyss
 = 
yysß
;

1142 
yyvs
 = 
yyvß
;

1143 
yy°acksize
 = 
YYINITDEPTH
;

1145 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1147 
yy°©e
 = 0;

1148 
yyîr°©us
 = 0;

1149 
yy√ºs
 = 0;

1150 
yych¨
 = 
YYEMPTY
;

1156 
yys•
 = 
yyss
;

1157 
yyv•
 = 
yyvs
;

1159 
yy£t°©e
;

1164 
yy√w°©e
:

1167 
yys•
++;

1169 
yy£t°©e
:

1170 *
yys•
 = 
yy°©e
;

1172 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1175 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1177 #ifde‡
yyovîÊow


1182 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1183 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1189 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1190 &
yyss1
, 
yysize
 *  (*
yys•
),

1191 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1192 &
yy°acksize
);

1194 
yyss
 = 
yyss1
;

1195 
yyvs
 = 
yyvs1
;

1198 #i‚de‡
YYSTACK_RELOCATE


1199 
yyexhau°edœb
;

1202 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1203 
yyexhau°edœb
;

1204 
yy°acksize
 *= 2;

1205 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1206 
yy°acksize
 = 
YYMAXDEPTH
;

1209 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1210 
yyÆloc
 *
yy±r
 =

1211 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1212 i‡(! 
yy±r
)

1213 
yyexhau°edœb
;

1214 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1215 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1216 #unde‡
YYSTACK_RELOCATE


1217 i‡(
yyss1
 !
yysß
)

1218 
	`YYSTACK_FREE
 (
yyss1
);

1223 
yys•
 = 
yyss
 + 
yysize
 - 1;

1224 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1226 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1227 (Ë
yy°acksize
));

1229 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1230 
YYABORT
;

1233 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1235 i‡(
yy°©e
 =
YYFINAL
)

1236 
YYACCEPT
;

1238 
yybackup
;

1243 
yybackup
:

1249 
yyn
 = 
yy∑˘
[
yy°©e
];

1250 i‡(
yyn
 =
YYPACT_NINF
)

1251 
yydeÁu…
;

1256 i‡(
yych¨
 =
YYEMPTY
)

1258 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1259 
yych¨
 = 
YYLEX
;

1262 i‡(
yych¨
 <
YYEOF
)

1264 
yych¨
 = 
yytokí
 = 
YYEOF
;

1265 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1269 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1270 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1275 
yyn
 +
yytokí
;

1276 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1277 
yydeÁu…
;

1278 
yyn
 = 
yyèbÀ
[yyn];

1279 i‡(
yyn
 <= 0)

1281 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1282 
yyîæab
;

1283 
yyn
 = -yyn;

1284 
yyªdu˚
;

1289 i‡(
yyîr°©us
)

1290 
yyîr°©us
--;

1293 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1296 
yych¨
 = 
YYEMPTY
;

1298 
yy°©e
 = 
yyn
;

1299 *++
yyv•
 = 
yylvÆ
;

1301 
yy√w°©e
;

1307 
yydeÁu…
:

1308 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1309 i‡(
yyn
 == 0)

1310 
yyîæab
;

1311 
yyªdu˚
;

1317 
yyªdu˚
:

1319 
yyÀn
 = 
yyr2
[
yyn
];

1329 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1332 
	`YY_REDUCE_PRINT
 (
yyn
);

1333 
yyn
)

1339 { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–(
yyv•
[(1Ë- (4)].
«me
), (yyv•[(3Ë- (4)].«meË); 
	`‰ì
( (yyvsp[(1) - (4)].name) ); free( (yyvsp[(3) - (4)].name) ); ;}

1346 { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–(
yyv•
[(1Ë- (4)].
«me
), (yyv•[(3Ë- (4)].
num
Ë); 
	`‰ì
( (yyvsp[(1) - (4)].name) ); ;}

1353 { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–(
yyv•
[(1Ë- (4)].
«me
), (yyv•[(3Ë- (4)].
‚um
Ë); 
	`‰ì
( (yyvsp[(1) - (4)].name) ); ;}

1362 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1364 
	`YYPOPSTACK
 (
yyÀn
);

1365 
yyÀn
 = 0;

1366 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1368 *++
yyv•
 = 
yyvÆ
;

1374 
yyn
 = 
yyr1
[yyn];

1376 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1377 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1378 
yy°©e
 = 
yyèbÀ
[yystate];

1380 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1382 
yy√w°©e
;

1388 
yyîæab
:

1390 i‡(!
yyîr°©us
)

1392 ++
yy√ºs
;

1393 #i‡! 
YYERROR_VERBOSE


1394 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1397 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1398 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1400 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1401 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1402 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1403 i‡(
yymsg
 !
yymsgbuf
)

1404 
	`YYSTACK_FREE
 (
yymsg
);

1405 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1406 i‡(
yymsg
)

1407 
yymsg_Æloc
 = 
yyÆloc
;

1410 
yymsg
 = 
yymsgbuf
;

1411 
yymsg_Æloc
 =  
yymsgbuf
;

1415 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1417 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1418 
	`yyîr‹
 (
yymsg
);

1422 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1423 i‡(
yysize
 != 0)

1424 
yyexhau°edœb
;

1432 i‡(
yyîr°©us
 == 3)

1437 i‡(
yych¨
 <
YYEOF
)

1440 i‡(
yych¨
 =
YYEOF
)

1441 
YYABORT
;

1445 
	`yyde°ru˘
 ("Error: discarding",

1446 
yytokí
, &
yylvÆ
);

1447 
yych¨
 = 
YYEMPTY
;

1453 
yyîæab1
;

1459 
yyîr‹œb
:

1465 
yyîr‹œb
;

1469 
	`YYPOPSTACK
 (
yyÀn
);

1470 
yyÀn
 = 0;

1471 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1472 
yy°©e
 = *
yys•
;

1473 
yyîæab1
;

1479 
yyîæab1
:

1480 
yyîr°©us
 = 3;

1484 
yyn
 = 
yy∑˘
[
yy°©e
];

1485 i‡(
yyn
 !
YYPACT_NINF
)

1487 
yyn
 +
YYTERROR
;

1488 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1490 
yyn
 = 
yyèbÀ
[yyn];

1491 i‡(0 < 
yyn
)

1497 i‡(
yys•
 =
yyss
)

1498 
YYABORT
;

1501 
	`yyde°ru˘
 ("Error:Öopping",

1502 
yy°os
[
yy°©e
], 
yyv•
);

1503 
	`YYPOPSTACK
 (1);

1504 
yy°©e
 = *
yys•
;

1505 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1508 *++
yyv•
 = 
yylvÆ
;

1512 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1514 
yy°©e
 = 
yyn
;

1515 
yy√w°©e
;

1521 
yyac˚±œb
:

1522 
yyªsu…
 = 0;

1523 
yyªtu∫
;

1528 
yyab‹éab
:

1529 
yyªsu…
 = 1;

1530 
yyªtu∫
;

1532 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1536 
yyexhau°edœb
:

1537 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1538 
yyªsu…
 = 2;

1542 
yyªtu∫
:

1543 i‡(
yych¨
 !
YYEMPTY
)

1544 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1545 
yytokí
, &
yylvÆ
);

1548 
	`YYPOPSTACK
 (
yyÀn
);

1549 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1550 
yys•
 !
yyss
)

1552 
	`yyde°ru˘
 ("Cleanup:Öopping",

1553 
yy°os
[*
yys•
], 
yyv•
);

1554 
	`YYPOPSTACK
 (1);

1556 #i‚de‡
yyovîÊow


1557 i‡(
yyss
 !
yysß
)

1558 
	`YYSTACK_FREE
 (
yyss
);

1560 #i‡
YYERROR_VERBOSE


1561 i‡(
yymsg
 !
yymsgbuf
)

1562 
	`YYSTACK_FREE
 (
yymsg
);

1565  
	`YYID
 (
yyªsu…
);

1566 
	}
}

	@src/intersim/config.tab.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mSTR
 = 258,

43 
	mNUM
 = 259,

44 
	mFNUM
 = 260

50 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


51 
	uYYSTYPE


57 *
	m«me
;

58 
	mnum
;

59 
	m‚um
;

65 } 
	tYYSTYPE
;

66 
	#YYSTYPE_IS_TRIVIAL
 1

	)

67 
	#yy°y≥
 
YYSTYPE


	)

68 
	#YYSTYPE_IS_DECLARED
 1

	)

71 
YYSTYPE
 
c⁄figlvÆ
;

	@src/intersim/config.y

3 
	~"booksim.hµ
"

4 
	~<°rög
>

5 
	~"c⁄fig_utûs.hµ
"

7 
c⁄figÀx
();

8 
c⁄figîr‹
(
°rög
 
msg
);

13 *
«me
;

14 
num
;

15 
‚um
;

18 %
tokí
 <
«me
> 
STR


19 %
tokí
 <
num
> 
NUM


20 %
tokí
 <
‚um
> 
FNUM


22 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

24 
comm™ds
 : comm™d†
comm™d


25 | 
comm™d


28 
comm™d
 : 
STR
 '=' STR ';' { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–
$1
, 
$3
 ); 
	`‰ì
( $1 ); free( $3 ); }

29 | 
STR
 '=' 
NUM
 ';' { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–
$1
, 
$3
 ); 
	`‰ì
( $1 ); }

30 | 
STR
 '=' 
FNUM
 ';' { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–
$1
, 
$3
 ); 
	`‰ì
( $1 ); }

33 
	}
%%

	@src/intersim/config_tab.cpp

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

67 
	#yy∑r£
 
c⁄fig∑r£


	)

68 
	#yyÀx
 
c⁄figÀx


	)

69 
	#yyîr‹
 
c⁄figîr‹


	)

70 
	#yylvÆ
 
c⁄figlvÆ


	)

71 
	#yych¨
 
c⁄figch¨


	)

72 
	#yydebug
 
c⁄figdebug


	)

73 
	#yy√ºs
 
c⁄fig√ºs


	)

82 
	~"booksim.hµ
"

83 
	~<°rög
>

84 
	~"c⁄fig_utûs.hµ
"

86 
c⁄figÀx
();

87 
c⁄figîr‹
(
°rög
 
msg
);

95 #i‚de‡
YYDEBUG


96 
	#YYDEBUG
 0

	)

100 #ifde‡
YYERROR_VERBOSE


101 #unde‡
YYERROR_VERBOSE


102 
	#YYERROR_VERBOSE
 1

	)

104 
	#YYERROR_VERBOSE
 0

	)

108 #i‚de‡
YYTOKEN_TABLE


109 
	#YYTOKEN_TABLE
 0

	)

114 #i‚de‡
YYTOKENTYPE


115 
	#YYTOKENTYPE


	)

118 
	eyytokíty≥
 {

119 
	mSTR
 = 258,

120 
	mNUM
 = 259,

121 
	mFNUM
 = 260

127 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


128 
	uYYSTYPE


134 *
	m«me
;

135 
	mnum
;

136 
	m‚um
;

142 } 
	tYYSTYPE
;

143 
	#YYSTYPE_IS_TRIVIAL
 1

	)

144 
	#yy°y≥
 
YYSTYPE


	)

145 
	#YYSTYPE_IS_DECLARED
 1

	)

159 #ifde‡
YYTYPE_UINT8


160 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

162 
	tyyty≥_uöt8
;

165 #ifde‡
YYTYPE_INT8


166 
YYTYPE_INT8
 
	tyyty≥_öt8
;

167 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

168 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

169 sig√d 
	tyyty≥_öt8
;

171 
	tyyty≥_öt8
;

174 #ifde‡
YYTYPE_UINT16


175 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

177 
	tyyty≥_uöt16
;

180 #ifde‡
YYTYPE_INT16


181 
YYTYPE_INT16
 
	tyyty≥_öt16
;

183 
	tyyty≥_öt16
;

186 #i‚de‡
YYSIZE_T


187 #ifde‡
__SIZE_TYPE__


188 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

189 #ñi‡
deföed
 
size_t


190 
	#YYSIZE_T
 
size_t


	)

191 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

192 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

193 
	~<°ddef.h
>

194 
	#YYSIZE_T
 
size_t


	)

196 
	#YYSIZE_T
 

	)

200 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

202 #i‚de‡
YY_


203 #i‡
YYENABLE_NLS


204 #i‡
ENABLE_NLS


205 
	~<liböé.h
>

206 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

209 #i‚de‡
YY_


210 
	#YY_
(
msgid
Ë
	)
msgid

215 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


216 
	#YYUSE
(
e
Ë((Ë”))

	)

218 
	#YYUSE
(
e
Ë

	)

222 #i‚de‡
löt


223 
	#YYID
(
n
Ë“)

	)

225 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

226 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

228 
	$YYID
 (
yyi
)

231 
	$YYID
 (
yyi
)

232 
yyi
;

235  
yyi
;

236 
	}
}

239 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


243 #ifde‡
YYSTACK_USE_ALLOCA


244 #i‡
YYSTACK_USE_ALLOCA


245 #ifde‡
__GNUC__


246 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

247 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


248 
	~<Æloˇ.h
>

249 #ñi‡
deföed
 
_AIX


250 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

251 #ñi‡
deföed
 
_MSC_VER


252 
	~<mÆloc.h
>

253 
	#Æloˇ
 
_Æloˇ


	)

255 
	#YYSTACK_ALLOC
 
Æloˇ


	)

256 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

257 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

258 
	~<°dlib.h
>

259 #i‚de‡
_STDLIB_H


260 
	#_STDLIB_H
 1

	)

267 #ifde‡
YYSTACK_ALLOC


269 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

270 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


275 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

278 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

279 
	#YYSTACK_FREE
 
YYFREE


	)

280 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


281 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

283 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

284 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

285 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

286 
	~<°dlib.h
>

287 #i‚de‡
_STDLIB_H


288 
	#_STDLIB_H
 1

	)

291 #i‚de‡
YYMALLOC


292 
	#YYMALLOC
 
mÆloc


	)

293 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

294 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

295 *
mÆloc
 (
YYSIZE_T
);

298 #i‚de‡
YYFREE


299 
	#YYFREE
 
‰ì


	)

300 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

301 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

302 
‰ì
 (*);

309 #i‡(! 
deföed
 
yyovîÊow
 \

310 && (! 
deföed
 
	g__˝lu•lus
 \

311 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

314 
	uyyÆloc


316 
yyty≥_öt16
 
	myyss_Æloc
;

317 
YYSTYPE
 
	myyvs_Æloc
;

321 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

325 
	#YYSTACK_BYTES
(
N
) \

326 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

327 + 
YYSTACK_GAP_MAXIMUM
)

	)

331 #i‚de‡
YYCOPY


332 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

333 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

334 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

336 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

339 
YYSIZE_T
 
yyi
; \

340 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

341 (
To
)[
yyi
] = (
From
)[yyi]; \

343 
	`YYID
 (0))

	)

352 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

355 
YYSIZE_T
 
yy√wbyãs
; \

356 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

357 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

358 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

359 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

361 
	`YYID
 (0))

	)

366 
	#YYFINAL
 5

	)

368 
	#YYLAST
 11

	)

371 
	#YYNTOKENS
 8

	)

373 
	#YYNNTS
 3

	)

375 
	#YYNRULES
 6

	)

377 
	#YYNSTATES
 13

	)

380 
	#YYUNDEFTOK
 2

	)

381 
	#YYMAXUTOK
 260

	)

383 
	#YYTRANSLATE
(
YYX
) \

384 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

387 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

418 #i‡
YYDEBUG


421 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

427 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

435 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

441 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


444 c⁄° *c⁄° 
	gyyäame
[] =

451 #ifde‡
YYPRINT


454 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

461 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

467 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

475 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

482 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

489 
	#YYPACT_NINF
 -5

	)

490 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

497 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

506 
	#YYTABLE_NINF
 -1

	)

507 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

513 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

521 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

527 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

528 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

529 
	#YYEMPTY
 (-2)

	)

530 
	#YYEOF
 0

	)

532 
	#YYACCEPT
 
yyac˚±œb


	)

533 
	#YYABORT
 
yyab‹éab


	)

534 
	#YYERROR
 
yyîr‹œb


	)

541 
	#YYFAIL
 
yyîæab


	)

543 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

545 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

547 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

549 
yych¨
 = (
Tokí
); \

550 
yylvÆ
 = (
VÆue
); \

551 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

552 
	`YYPOPSTACK
 (1); \

553 
yybackup
; \

557 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

558 
YYERROR
; \

560 
	`YYID
 (0))

	)

563 
	#YYTERROR
 1

	)

564 
	#YYERRCODE
 256

	)

571 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

572 #i‚de‡
YYLLOC_DEFAULT


573 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

575 i‡(
	`YYID
 (
N
)) \

577 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

578 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

579 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

580 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

584 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

585 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

586 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

587 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

589 
	`YYID
 (0))

	)

597 #i‚de‡
YY_LOCATION_PRINT


598 #i‡
YYLTYPE_IS_TRIVIAL


599 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

600 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

601 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

602 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

604 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

611 #ifde‡
YYLEX_PARAM


612 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

614 
	#YYLEX
 
	`yyÀx
 ()

	)

618 #i‡
YYDEBUG


620 #i‚de‡
YYFPRINTF


621 
	~<°dio.h
>

622 
	#YYFPRINTF
 
Ârötf


	)

625 
	#YYDPRINTF
(
Args
) \

627 i‡(
yydebug
) \

628 
YYFPRINTF
 
Args
; \

629 } 
	`YYID
 (0))

	)

631 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

633 i‡(
yydebug
) \

635 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

636 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

637 
Ty≥
, 
VÆue
); \

638 
	`YYFPRINTF
 (
°dîr
, "\n"); \

640 } 
	`YYID
 (0))

	)

648 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

649 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

651 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

654 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

655 
FILE
 *
yyouçut
;

656 
yyty≥
;

657 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

660 i‡(!
yyvÆuï
)

662 #ifde‡
YYPRINT


663 i‡(
yyty≥
 < 
YYNTOKENS
)

664 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

666 
	`YYUSE
 (
yyouçut
);

668 
yyty≥
)

673 
	}
}

680 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

681 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

683 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

686 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

687 
FILE
 *
yyouçut
;

688 
yyty≥
;

689 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

692 i‡(
yyty≥
 < 
YYNTOKENS
)

693 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

695 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

697 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

698 
	`YYFPRINTF
 (
yyouçut
, ")");

699 
	}
}

706 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

707 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

709 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

712 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

713 
yyty≥_öt16
 *
yybŸtom
;

714 
yyty≥_öt16
 *
yyt›
;

717 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

718 ; 
yybŸtom
 <
yyt›
; yybottom++)

720 
yybŸ
 = *
yybŸtom
;

721 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

723 
	`YYFPRINTF
 (
°dîr
, "\n");

724 
	}
}

726 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

728 i‡(
yydebug
) \

729 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

730 } 
	`YYID
 (0))

	)

737 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

738 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

740 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

743 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

744 
YYSTYPE
 *
yyv•
;

745 
yyruÀ
;

748 
yyƒhs
 = 
yyr2
[
yyruÀ
];

749 
yyi
;

750 
yy o
 = 
yyæöe
[
yyruÀ
];

751 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

752 
yyruÀ
 - 1, 
yy o
);

754 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

756 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

757 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

758 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

760 
	`YYFPRINTF
 (
°dîr
, "\n");

762 
	}
}

764 
	#YY_REDUCE_PRINT
(
RuÀ
) \

766 i‡(
yydebug
) \

767 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

768 } 
	`YYID
 (0))

	)

772 
	gyydebug
;

774 
	#YYDPRINTF
(
Args
)

	)

775 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

776 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

777 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

782 #i‚def 
YYINITDEPTH


783 
	#YYINITDEPTH
 200

	)

793 #i‚de‡
YYMAXDEPTH


794 
	#YYMAXDEPTH
 10000

	)

799 #i‡
YYERROR_VERBOSE


801 #i‚de‡
yy°æí


802 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


803 
	#yy°æí
 
°æí


	)

806 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

807 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

808 
YYSIZE_T


809 
	$yy°æí
 (c⁄° *
yy°r
)

811 
YYSIZE_T


812 
	$yy°æí
 (
yy°r
)

813 c⁄° *
yy°r
;

816 
YYSIZE_T
 
yyÀn
;

817 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

819  
yyÀn
;

820 
	}
}

824 #i‚de‡
yy°p˝y


825 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


826 
	#yy°p˝y
 
°p˝y


	)

830 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

831 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

833 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

836 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

837 *
yyde°
;

838 c⁄° *
yy§c
;

841 *
yyd
 = 
yyde°
;

842 c⁄° *
yys
 = 
yy§c
;

844 (*
yyd
++ = *
yys
++) != '\0')

847  
yyd
 - 1;

848 
	}
}

852 #i‚de‡
yyäamîr


860 
YYSIZE_T


861 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

863 i‡(*
yy°r
 == '"')

865 
YYSIZE_T
 
yyn
 = 0;

866 c⁄° *
yyp
 = 
yy°r
;

869 *++
yyp
)

873 
do_nŸ_°rù_quŸes
;

876 i‡(*++
yyp
 != '\\')

877 
do_nŸ_°rù_quŸes
;

880 i‡(
yyªs
)

881 
yyªs
[
yyn
] = *
yyp
;

882 
yyn
++;

886 i‡(
yyªs
)

887 
yyªs
[
yyn
] = '\0';

888  
yyn
;

890 
do_nŸ_°rù_quŸes
: ;

893 i‡(! 
yyªs
)

894  
	`yy°æí
 (
yy°r
);

896  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

897 
	}
}

907 
YYSIZE_T


908 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

910 
yyn
 = 
yy∑˘
[
yy°©e
];

912 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

916 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

917 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

918 
YYSIZE_T
 
yysize
 = 
yysize0
;

919 
YYSIZE_T
 
yysize1
;

920 
yysize_ovîÊow
 = 0;

921 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

922 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

923 
yyx
;

928 
	`YY_
("syntaxÉrror, unexpected %s");

929 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

930 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

931 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

932 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

934 *
yyfmt
;

935 c⁄° *
yyf
;

936 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

937 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

938 c⁄° 
yy‹
[] = " or %s";

939 
yyf‹m©
[ 
yyu√x≥˘ed


940 +  
yyex≥˘ög
 - 1

941 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

942 * ( 
yy‹
 - 1))];

943 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

947 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

950 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

951 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

952 
yycou¡
 = 1;

954 
yy¨g
[0] = 
yyäame
[
yyty≥
];

955 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

957 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

958 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

960 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

962 
yycou¡
 = 1;

963 
yysize
 = 
yysize0
;

964 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

967 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

968 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

969 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

970 
yysize
 = 
yysize1
;

971 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

972 
yy¥efix
 = 
yy‹
;

975 
yyf
 = 
	`YY_
(
yyf‹m©
);

976 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

977 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

978 
yysize
 = 
yysize1
;

980 i‡(
yysize_ovîÊow
)

981  
YYSIZE_MAXIMUM
;

983 i‡(
yyªsu…
)

988 *
yyp
 = 
yyªsu…
;

989 
yyi
 = 0;

990 (*
yyp
 = *
yyf
) != '\0')

992 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

994 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

995 
yyf
 += 2;

999 
yyp
++;

1000 
yyf
++;

1004  
yysize
;

1006 
	}
}

1015 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1016 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1018 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1021 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1022 c⁄° *
yymsg
;

1023 
yyty≥
;

1024 
YYSTYPE
 *
yyvÆuï
;

1027 
	`YYUSE
 (
yyvÆuï
);

1029 i‡(!
yymsg
)

1030 
yymsg
 = "Deleting";

1031 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1033 
yyty≥
)

1039 
	}
}

1042 #ifde‡
YYPARSE_PARAM


1043 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1044 
yy∑r£
 (*
YYPARSE_PARAM
);

1046 
yy∑r£
 ();

1049 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1050 
yy∑r£
 ();

1052 
yy∑r£
 ();

1058 
	gyych¨
;

1061 
YYSTYPE
 
	gyylvÆ
;

1064 
	gyy√ºs
;

1072 #ifde‡
YYPARSE_PARAM


1073 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1074 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1076 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1079 
	$yy∑r£
 (
YYPARSE_PARAM
)

1080 *
YYPARSE_PARAM
;

1083 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1084 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1086 
	$yy∑r£
 ()

1089 
	$yy∑r£
 ()

1096 
yy°©e
;

1098 
yyîr°©us
;

1108 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1109 
yyty≥_öt16
 *
yyss
;

1110 
yyty≥_öt16
 *
yys•
;

1113 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1114 
YYSTYPE
 *
yyvs
;

1115 
YYSTYPE
 *
yyv•
;

1117 
YYSIZE_T
 
yy°acksize
;

1119 
yyn
;

1120 
yyªsu…
;

1122 
yytokí
;

1125 
YYSTYPE
 
yyvÆ
;

1127 #i‡
YYERROR_VERBOSE


1129 
yymsgbuf
[128];

1130 *
yymsg
 = 
yymsgbuf
;

1131 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1134 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1138 
yyÀn
 = 0;

1140 
yytokí
 = 0;

1141 
yyss
 = 
yysß
;

1142 
yyvs
 = 
yyvß
;

1143 
yy°acksize
 = 
YYINITDEPTH
;

1145 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1147 
yy°©e
 = 0;

1148 
yyîr°©us
 = 0;

1149 
yy√ºs
 = 0;

1150 
yych¨
 = 
YYEMPTY
;

1156 
yys•
 = 
yyss
;

1157 
yyv•
 = 
yyvs
;

1159 
yy£t°©e
;

1164 
yy√w°©e
:

1167 
yys•
++;

1169 
yy£t°©e
:

1170 *
yys•
 = 
yy°©e
;

1172 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1175 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1177 #ifde‡
yyovîÊow


1182 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1183 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1189 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1190 &
yyss1
, 
yysize
 *  (*
yys•
),

1191 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1192 &
yy°acksize
);

1194 
yyss
 = 
yyss1
;

1195 
yyvs
 = 
yyvs1
;

1198 #i‚de‡
YYSTACK_RELOCATE


1199 
yyexhau°edœb
;

1202 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1203 
yyexhau°edœb
;

1204 
yy°acksize
 *= 2;

1205 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1206 
yy°acksize
 = 
YYMAXDEPTH
;

1209 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1210 
yyÆloc
 *
yy±r
 =

1211 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1212 i‡(! 
yy±r
)

1213 
yyexhau°edœb
;

1214 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1215 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1216 #unde‡
YYSTACK_RELOCATE


1217 i‡(
yyss1
 !
yysß
)

1218 
	`YYSTACK_FREE
 (
yyss1
);

1223 
yys•
 = 
yyss
 + 
yysize
 - 1;

1224 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1226 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1227 (Ë
yy°acksize
));

1229 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1230 
YYABORT
;

1233 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1235 i‡(
yy°©e
 =
YYFINAL
)

1236 
YYACCEPT
;

1238 
yybackup
;

1243 
yybackup
:

1249 
yyn
 = 
yy∑˘
[
yy°©e
];

1250 i‡(
yyn
 =
YYPACT_NINF
)

1251 
yydeÁu…
;

1256 i‡(
yych¨
 =
YYEMPTY
)

1258 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1259 
yych¨
 = 
YYLEX
;

1262 i‡(
yych¨
 <
YYEOF
)

1264 
yych¨
 = 
yytokí
 = 
YYEOF
;

1265 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1269 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1270 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1275 
yyn
 +
yytokí
;

1276 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1277 
yydeÁu…
;

1278 
yyn
 = 
yyèbÀ
[yyn];

1279 i‡(
yyn
 <= 0)

1281 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1282 
yyîæab
;

1283 
yyn
 = -yyn;

1284 
yyªdu˚
;

1289 i‡(
yyîr°©us
)

1290 
yyîr°©us
--;

1293 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1296 
yych¨
 = 
YYEMPTY
;

1298 
yy°©e
 = 
yyn
;

1299 *++
yyv•
 = 
yylvÆ
;

1301 
yy√w°©e
;

1307 
yydeÁu…
:

1308 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1309 i‡(
yyn
 == 0)

1310 
yyîæab
;

1311 
yyªdu˚
;

1317 
yyªdu˚
:

1319 
yyÀn
 = 
yyr2
[
yyn
];

1329 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1332 
	`YY_REDUCE_PRINT
 (
yyn
);

1333 
yyn
)

1339 { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–(
yyv•
[(1Ë- (4)].
«me
), (yyv•[(3Ë- (4)].«meË); 
	`‰ì
( (yyvsp[(1) - (4)].name) ); free( (yyvsp[(3) - (4)].name) ); ;}

1346 { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–(
yyv•
[(1Ë- (4)].
«me
), (yyv•[(3Ë- (4)].
num
Ë); 
	`‰ì
( (yyvsp[(1) - (4)].name) ); ;}

1353 { 
C⁄figuøti⁄
::
	`GëTheC⁄fig
()->
	`Assign
–(
yyv•
[(1Ë- (4)].
«me
), (yyv•[(3Ë- (4)].
‚um
Ë); 
	`‰ì
( (yyvsp[(1) - (4)].name) ); ;}

1362 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1364 
	`YYPOPSTACK
 (
yyÀn
);

1365 
yyÀn
 = 0;

1366 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1368 *++
yyv•
 = 
yyvÆ
;

1374 
yyn
 = 
yyr1
[yyn];

1376 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1377 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1378 
yy°©e
 = 
yyèbÀ
[yystate];

1380 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1382 
yy√w°©e
;

1388 
yyîæab
:

1390 i‡(!
yyîr°©us
)

1392 ++
yy√ºs
;

1393 #i‡! 
YYERROR_VERBOSE


1394 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1397 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1398 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1400 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1401 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1402 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1403 i‡(
yymsg
 !
yymsgbuf
)

1404 
	`YYSTACK_FREE
 (
yymsg
);

1405 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1406 i‡(
yymsg
)

1407 
yymsg_Æloc
 = 
yyÆloc
;

1410 
yymsg
 = 
yymsgbuf
;

1411 
yymsg_Æloc
 =  
yymsgbuf
;

1415 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1417 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1418 
	`yyîr‹
 (
yymsg
);

1422 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1423 i‡(
yysize
 != 0)

1424 
yyexhau°edœb
;

1432 i‡(
yyîr°©us
 == 3)

1437 i‡(
yych¨
 <
YYEOF
)

1440 i‡(
yych¨
 =
YYEOF
)

1441 
YYABORT
;

1445 
	`yyde°ru˘
 ("Error: discarding",

1446 
yytokí
, &
yylvÆ
);

1447 
yych¨
 = 
YYEMPTY
;

1453 
yyîæab1
;

1459 
yyîr‹œb
:

1465 
yyîr‹œb
;

1469 
	`YYPOPSTACK
 (
yyÀn
);

1470 
yyÀn
 = 0;

1471 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1472 
yy°©e
 = *
yys•
;

1473 
yyîæab1
;

1479 
yyîæab1
:

1480 
yyîr°©us
 = 3;

1484 
yyn
 = 
yy∑˘
[
yy°©e
];

1485 i‡(
yyn
 !
YYPACT_NINF
)

1487 
yyn
 +
YYTERROR
;

1488 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1490 
yyn
 = 
yyèbÀ
[yyn];

1491 i‡(0 < 
yyn
)

1497 i‡(
yys•
 =
yyss
)

1498 
YYABORT
;

1501 
	`yyde°ru˘
 ("Error:Öopping",

1502 
yy°os
[
yy°©e
], 
yyv•
);

1503 
	`YYPOPSTACK
 (1);

1504 
yy°©e
 = *
yys•
;

1505 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1508 *++
yyv•
 = 
yylvÆ
;

1512 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1514 
yy°©e
 = 
yyn
;

1515 
yy√w°©e
;

1521 
yyac˚±œb
:

1522 
yyªsu…
 = 0;

1523 
yyªtu∫
;

1528 
yyab‹éab
:

1529 
yyªsu…
 = 1;

1530 
yyªtu∫
;

1532 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1536 
yyexhau°edœb
:

1537 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1538 
yyªsu…
 = 2;

1542 
yyªtu∫
:

1543 i‡(
yych¨
 !
YYEMPTY
)

1544 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1545 
yytokí
, &
yylvÆ
);

1548 
	`YYPOPSTACK
 (
yyÀn
);

1549 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1550 
yys•
 !
yyss
)

1552 
	`yyde°ru˘
 ("Cleanup:Öopping",

1553 
yy°os
[*
yys•
], 
yyv•
);

1554 
	`YYPOPSTACK
 (1);

1556 #i‚de‡
yyovîÊow


1557 i‡(
yyss
 !
yysß
)

1558 
	`YYSTACK_FREE
 (
yyss
);

1560 #i‡
YYERROR_VERBOSE


1561 i‡(
yymsg
 !
yymsgbuf
)

1562 
	`YYSTACK_FREE
 (
yymsg
);

1565  
	`YYID
 (
yyªsu…
);

1566 
	}
}

	@src/intersim/config_utils.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

3 
	~<°dlib.h
>

4 
	~<c°rög
>

6 
	~"c⁄fig_utûs.hµ
"

8 
C⁄figuøti⁄
 *
	gC⁄figuøti⁄
::
theC⁄fig
 = 0;

10 
	gC⁄figuøti⁄
::
	$C⁄figuøti⁄
( )

12 
theC⁄fig
 = 
this
;

13 
_c⁄fig_fûe
 = 0;

14 
	}
}

16 
	gC⁄figuøti⁄
::
	$AddSåFõld
–c⁄° 
°rög
 &
fõld
, c⁄° såög &
vÆue
 )

18 
_°r_m≠
[
fõld
] = 
	`°rdup
–
vÆue
.
	`c_°r
( ) );

19 
	}
}

21 
	gC⁄figuøti⁄
::
	$Assign
–c⁄° 
°rög
 &
fõld
, c⁄° såög &
vÆue
 )

23 
m≠
<
°rög
,*>::
c⁄°_ôî©‹
 
m©ch
;

25 
m©ch
 = 
_°r_m≠
.
	`föd
–
fõld
 );

26 i‡–
m©ch
 !
_°r_m≠
.
	`íd
( ) ) {

27 
	`‰ì
–
_°r_m≠
[
fõld
] );

28 
_°r_m≠
[
fõld
] = 
	`°rdup
–
vÆue
.
	`c_°r
( ) );

30 
°rög
 
îrmsg
 = "Unknown field ";

31 
îrmsg
 +
fõld
;

33 
	`P¨£Eº‹
–
îrmsg
, 0 );

35 
	}
}

37 
	gC⁄figuøti⁄
::
	$Assign
–c⁄° 
°rög
 &
fõld
, 
vÆue
 )

39 
m≠
<
°rög
,>::
c⁄°_ôî©‹
 
m©ch
;

41 
m©ch
 = 
_öt_m≠
.
	`föd
–
fõld
 );

42 i‡–
m©ch
 !
_öt_m≠
.
	`íd
( ) ) {

43 
_öt_m≠
[
fõld
] = 
vÆue
;

45 
°rög
 
îrmsg
 = "Unknown field ";

46 
îrmsg
 +
fõld
;

48 
	`P¨£Eº‹
–
îrmsg
, 0 );

50 
	}
}

52 
	gC⁄figuøti⁄
::
	$Assign
–c⁄° 
°rög
 &
fõld
, 
vÆue
 )

54 
m≠
<
°rög
,>::
c⁄°_ôî©‹
 
m©ch
;

56 
m©ch
 = 
_Êﬂt_m≠
.
	`föd
–
fõld
 );

57 i‡–
m©ch
 !
_Êﬂt_m≠
.
	`íd
( ) ) {

58 
_Êﬂt_m≠
[
fõld
] = 
vÆue
;

60 
°rög
 
îrmsg
 = "Unknown field ";

61 
îrmsg
 +
fõld
;

63 
	`P¨£Eº‹
–
îrmsg
, 0 );

65 
	}
}

67 
	gC⁄figuøti⁄
::
	$GëSå
–c⁄° 
°rög
 &
fõld
, såög &
vÆue
, c⁄° såög &
def
 ) const

69 
m≠
<
°rög
,*>::
c⁄°_ôî©‹
 
m©ch
;

71 
m©ch
 = 
_°r_m≠
.
	`föd
–
fõld
 );

72 i‡–
m©ch
 !
_°r_m≠
.
	`íd
( ) ) {

73 
vÆue
 = 
m©ch
->
£c⁄d
;

75 
vÆue
 = 
def
;

77 
	}
}

79 
	gC⁄figuøti⁄
::
	$GëI¡
–c⁄° 
°rög
 &
fõld
, 
def
 ) const

81 
m≠
<
°rög
,>::
c⁄°_ôî©‹
 
m©ch
;

82 
r
 = 
def
;

84 
m©ch
 = 
_öt_m≠
.
	`föd
–
fõld
 );

85 i‡–
m©ch
 !
_öt_m≠
.
	`íd
( ) ) {

86 
r
 = 
m©ch
->
£c⁄d
;

89  
r
;

90 
	}
}

92 
	gC⁄figuøti⁄
::
	$GëFlﬂt
–c⁄° 
°rög
 &
fõld
, 
def
 ) const

94 
m≠
<
°rög
,>::
c⁄°_ôî©‹
 
m©ch
;

95 
r
 = 
def
;

97 
m©ch
 = 
_Êﬂt_m≠
.
	`föd
–
fõld
 );

98 i‡–
m©ch
 !
_Êﬂt_m≠
.
	`íd
( ) ) {

99 
r
 = 
m©ch
->
£c⁄d
;

102  
r
;

103 
	}
}

105 
	gC⁄figuøti⁄
::
	$P¨£
–c⁄° 
°rög
& 
fûíame
 )

107 i‡––
_c⁄fig_fûe
 = 
	`f›í
–
fûíame
.
	`c_°r
( ), "r" ) ) == 0 ) {

108 
˚º
 << "CouldÇŸ o≥¿c⁄figuøti⁄ fûê" << 
fûíame
 << 
ídl
;

109 
	`exô
( -1 );

112 
	`c⁄fig∑r£
( );

114 
	`f˛o£
–
_c⁄fig_fûe
 );

115 
_c⁄fig_fûe
 = 0;

116 
	}
}

118 
	gC⁄figuøti⁄
::
	$P¨£
–c⁄° * 
fûíame
 )

120 i‡––
_c⁄fig_fûe
 = 
	`f›í
–
fûíame
 , "r" ) ) == 0 ) {

121 
˚º
 << "CouldÇŸ o≥¿c⁄figuøti⁄ fûê" << 
fûíame
 << 
ídl
;

122 
	`exô
( -1 );

125 
	`c⁄fig∑r£
( );

127 
	`f˛o£
–
_c⁄fig_fûe
 );

128 
_c⁄fig_fûe
 = 0;

129 
	}
}

132 
	gC⁄figuøti⁄
::
	$I≈ut
–*
löe
, 
max_size
 )

134 
Àngth
 = 0;

136 i‡–
_c⁄fig_fûe
 ) {

137 
Àngth
 = 
	`‰ód
–
löe
, 1, 
max_size
, 
_c⁄fig_fûe
 );

140  
Àngth
;

141 
	}
}

143 
	gC⁄figuøti⁄
::
	$P¨£Eº‹
–c⁄° 
°rög
 &
msg
, 
löío
 ) const

145 i‡–
löío
 ) {

146 
˚º
 << "P¨£Éº‹ o¿löê" << 
löío
 << " : " << 
msg
 << 
ídl
;

148 
˚º
 << "P¨£Éº‹ : " << 
msg
 << 
ídl
;

151 
	`exô
( -1 );

152 
	}
}

154 
C⁄figuøti⁄
 *
	gC⁄figuøti⁄
::
	$GëTheC⁄fig
( )

156  
theC⁄fig
;

157 
	}
}

161 
	$c⁄fig_öput
–*
löe
, 
max_size
 )

163  
C⁄figuøti⁄
::
	`GëTheC⁄fig
–)->
	`I≈ut
–
löe
, 
max_size
 );

164 
	}
}

166 
boﬁ
 
	$P¨£Args
–
C⁄figuøti⁄
 *
cf
, 
¨gc
, **
¨gv
 )

168 
boﬁ
 
rc
 = 
Ál£
;

170 i‡–
¨gc
 > 1 ) {

171 
cf
->
	`P¨£
–
¨gv
[1] );

172 
rc
 = 
åue
;

175  
rc
;

176 
	}
}

	@src/intersim/configlex.cpp

5 
	#YY_INT_ALIGNED
 

	)

9 
	#yy_¸óã_buf„r
 
c⁄fig_¸óã_buf„r


	)

10 
	#yy_dñëe_buf„r
 
c⁄fig_dñëe_buf„r


	)

11 
	#yy_Êex_debug
 
c⁄fig_Êex_debug


	)

12 
	#yy_öô_buf„r
 
c⁄fig_öô_buf„r


	)

13 
	#yy_Êush_buf„r
 
c⁄fig_Êush_buf„r


	)

14 
	#yy_lﬂd_buf„r_°©e
 
c⁄fig_lﬂd_buf„r_°©e


	)

15 
	#yy_swôch_to_buf„r
 
c⁄fig_swôch_to_buf„r


	)

16 
	#yyö
 
c⁄figö


	)

17 
	#yyÀng
 
c⁄figÀng


	)

18 
	#yyÀx
 
c⁄figÀx


	)

19 
	#yylöío
 
c⁄figlöío


	)

20 
	#yyout
 
c⁄figout


	)

21 
	#yyª°¨t
 
c⁄figª°¨t


	)

22 
	#yyãxt
 
c⁄figãxt


	)

23 
	#yywøp
 
c⁄figwøp


	)

24 
	#yyÆloc
 
c⁄figÆloc


	)

25 
	#yyªÆloc
 
c⁄figªÆloc


	)

26 
	#yy‰ì
 
c⁄fig‰ì


	)

28 
	#FLEX_SCANNER


	)

29 
	#YY_FLEX_MAJOR_VERSION
 2

	)

30 
	#YY_FLEX_MINOR_VERSION
 5

	)

31 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

32 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

33 
	#FLEX_BETA


	)

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

42 
	~<°dlib.h
>

48 #i‚de‡
FLEXINT_H


49 
	#FLEXINT_H


	)

53 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

58 #i‚de‡
__STDC_LIMIT_MACROS


59 
	#__STDC_LIMIT_MACROS
 1

	)

62 
	~<öây≥s.h
>

63 
öt8_t
 
	tÊex_öt8_t
;

64 
uöt8_t
 
	tÊex_uöt8_t
;

65 
öt16_t
 
	tÊex_öt16_t
;

66 
uöt16_t
 
	tÊex_uöt16_t
;

67 
öt32_t
 
	tÊex_öt32_t
;

68 
uöt32_t
 
	tÊex_uöt32_t
;

70 sig√d 
	tÊex_öt8_t
;

71 
	tÊex_öt16_t
;

72 
	tÊex_öt32_t
;

73 
	tÊex_uöt8_t
;

74 
	tÊex_uöt16_t
;

75 
	tÊex_uöt32_t
;

79 #i‚de‡
INT8_MIN


80 
	#INT8_MIN
 (-128)

	)

82 #i‚de‡
INT16_MIN


83 
	#INT16_MIN
 (-32767-1)

	)

85 #i‚de‡
INT32_MIN


86 
	#INT32_MIN
 (-2147483647-1)

	)

88 #i‚de‡
INT8_MAX


89 
	#INT8_MAX
 (127)

	)

91 #i‚de‡
INT16_MAX


92 
	#INT16_MAX
 (32767)

	)

94 #i‚de‡
INT32_MAX


95 
	#INT32_MAX
 (2147483647)

	)

97 #i‚de‡
UINT8_MAX


98 
	#UINT8_MAX
 (255U)

	)

100 #i‚de‡
UINT16_MAX


101 
	#UINT16_MAX
 (65535U)

	)

103 #i‚de‡
UINT32_MAX


104 
	#UINT32_MAX
 (4294967295U)

	)

109 #ifde‡
__˝lu•lus


112 
	#YY_USE_CONST


	)

117 #i‡
deföed
 (
__STDC__
)

119 
	#YY_USE_CONST


	)

124 #ifde‡
YY_USE_CONST


125 
	#yyc⁄°
 c⁄°

	)

127 
	#yyc⁄°


	)

131 
	#YY_NULL
 0

	)

138 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

144 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

150 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

151 
	#YYSTATE
 
YY_START


	)

154 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

157 
	#YY_NEW_FILE
 
	`c⁄figª°¨t
(
c⁄figö
 )

	)

159 
	#YY_END_OF_BUFFER_CHAR
 0

	)

162 #i‚de‡
YY_BUF_SIZE


163 
	#YY_BUF_SIZE
 16384

	)

168 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

170 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


171 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

172 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

175 
c⁄figÀng
;

177 
FILE
 *
c⁄figö
, *
c⁄figout
;

179 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

180 
	#EOB_ACT_END_OF_FILE
 1

	)

181 
	#EOB_ACT_LAST_MATCH
 2

	)

183 
	#YY_LESS_LINENO
(
n
)

	)

186 
	#yyÀss
(
n
) \

190 
yyÀss_ma¸o_¨g
 = (
n
); \

191 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

192 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

193 
YY_RESTORE_YY_MORE_OFFSET
 \

194 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

195 
YY_DO_BEFORE_ACTION
; \

197  0 )

	)

199 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

201 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


202 
	#YY_TYPEDEF_YY_SIZE_T


	)

203 
size_t
 
	tyy_size_t
;

206 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


207 
	#YY_STRUCT_YY_BUFFER_STATE


	)

208 
	syy_buf„r_°©e


210 
FILE
 *
	myy_öput_fûe
;

212 *
	myy_ch_buf
;

213 *
	myy_buf_pos
;

218 
yy_size_t
 
	myy_buf_size
;

223 
	myy_n_ch¨s
;

229 
	myy_is_our_buf„r
;

236 
	myy_is_öãø˘ive
;

242 
	myy_©_bﬁ
;

244 
	myy_bs_löío
;

245 
	myy_bs_cﬁumn
;

250 
	myy_fûl_buf„r
;

252 
	myy_buf„r_°©us
;

254 
	#YY_BUFFER_NEW
 0

	)

255 
	#YY_BUFFER_NORMAL
 1

	)

266 
	#YY_BUFFER_EOF_PENDING
 2

	)

272 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

273 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

274 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

282 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

283 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

284 : 
NULL
)

	)

289 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

292 
	gyy_hﬁd_ch¨
;

293 
	gyy_n_ch¨s
;

294 
	gc⁄figÀng
;

297 *
	gyy_c_buf_p
 = (*) 0;

298 
	gyy_öô
 = 0;

299 
	gyy_°¨t
 = 0;

304 
	gyy_did_buf„r_swôch_⁄_eof
;

306 
c⁄figª°¨t
 (
FILE
 *
öput_fûe
 );

307 
c⁄fig_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

308 
YY_BUFFER_STATE
 
c⁄fig_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

309 
c⁄fig_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

310 
c⁄fig_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

311 
c⁄figpush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

312 
c⁄figp›_buf„r_°©e
 ();

314 
c⁄figísuª_buf„r_°ack
 ();

315 
c⁄fig_lﬂd_buf„r_°©e
 ();

316 
c⁄fig_öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

318 
	#YY_FLUSH_BUFFER
 
	`c⁄fig_Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

320 
YY_BUFFER_STATE
 
c⁄fig_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

321 
YY_BUFFER_STATE
 
c⁄fig_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

322 
YY_BUFFER_STATE
 
c⁄fig_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

324 *
c⁄figÆloc
 (
yy_size_t
 );

325 *
c⁄figªÆloc
 (*,
yy_size_t
 );

326 
c⁄fig‰ì
 (* );

328 
	#yy_√w_buf„r
 
c⁄fig_¸óã_buf„r


	)

330 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

332 i‡–! 
YY_CURRENT_BUFFER
 ){ \

333 
	`c⁄figísuª_buf„r_°ack
 (); \

334 
YY_CURRENT_BUFFER_LVALUE
 = \

335 
	`c⁄fig_¸óã_buf„r
(
c⁄figö
,
YY_BUF_SIZE
 ); \

337 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

338 }

	)

340 
	#yy_£t_bﬁ
(
©_bﬁ
) \

342 i‡–! 
YY_CURRENT_BUFFER
 ){\

343 
	`c⁄figísuª_buf„r_°ack
 (); \

344 
YY_CURRENT_BUFFER_LVALUE
 = \

345 
	`c⁄fig_¸óã_buf„r
(
c⁄figö
,
YY_BUF_SIZE
 ); \

347 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

348 }

	)

350 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

354 
	tYY_CHAR
;

356 
FILE
 *
	gc⁄figö
 = (FILE *Ë0, *
	gc⁄figout
 = (FILE *) 0;

358 
	tyy_°©e_ty≥
;

360 
c⁄figlöío
;

362 
	gc⁄figlöío
 = 1;

364 *
c⁄figãxt
;

365 
	#yyãxt_±r
 
c⁄figãxt


	)

367 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

368 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

369 
yy_gë_√xt_buf„r
 ();

370 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

375 
	#YY_DO_BEFORE_ACTION
 \

376 (
yyãxt_±r
Ë
yy_bp
; \

377 
c⁄figÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

378 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

379 *
yy_˝
 = '\0'; \

380 (
yy_c_buf_p
Ë
yy_˝
;

	)

382 
	#YY_NUM_RULES
 8

	)

383 
	#YY_END_OF_BUFFER
 9

	)

386 
	syy_å™s_öfo


388 
Êex_öt32_t
 
	myy_vîify
;

389 
Êex_öt32_t
 
	myy_nxt
;

391 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[18] =

397 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

429 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[8] =

434 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[20] =

440 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[20] =

446 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[27] =

453 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[27] =

460 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

461 *
	gyy_œ°_ac˚±ög_˝os
;

463 
c⁄fig_Êex_debug
;

464 
	gc⁄fig_Êex_debug
 = 0;

469 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

470 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

471 
	#YY_MORE_ADJ
 0

	)

472 
	#YY_RESTORE_YY_MORE_OFFSET


	)

473 *
	gc⁄figãxt
;

477 
	~"booksim.hµ
"

478 
	~<°dlib.h
>

479 
	~<°rög
>

480 
	~<c°rög
>

482 
	~"c⁄fig_èb.hµ
"

483 
	~"c⁄fig_utûs.hµ
"

485 
c⁄figîr‹
(
°rög
 
msg
);

486 "C" 
	$c⁄figwøp
(Ë{  1; 
	}
}

488 
c⁄fig_öput
(*, );

489 #unde‡
YY_INPUT


490 
	#YY_INPUT
(
b
, 
r
, 
ms
Ë‘ = 
	`c⁄fig_öput
(b, ms))

	)

495 
	#INITIAL
 0

	)

497 #i‚de‡
YY_NO_UNISTD_H


502 
	~<uni°d.h
>

505 #i‚de‡
YY_EXTRA_TYPE


506 
	#YY_EXTRA_TYPE
 *

	)

509 
yy_öô_globÆs
 ();

514 
c⁄figÀx_de°roy
 ();

516 
c⁄figgë_debug
 ();

518 
c⁄fig£t_debug
 (
debug_Êag
 );

520 
YY_EXTRA_TYPE
 
c⁄figgë_exåa
 ();

522 
c⁄fig£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

524 
FILE
 *
c⁄figgë_ö
 ();

526 
c⁄fig£t_ö
 (
FILE
 * 
ö_°r
 );

528 
FILE
 *
c⁄figgë_out
 ();

530 
c⁄fig£t_out
 (
FILE
 * 
out_°r
 );

532 
c⁄figgë_Àng
 ();

534 *
c⁄figgë_ãxt
 ();

536 
c⁄figgë_löío
 ();

538 
c⁄fig£t_löío
 (
löe_numbî
 );

544 #i‚de‡
YY_SKIP_YYWRAP


545 #ifde‡
__˝lu•lus


546 "C" 
c⁄figwøp
 ();

548 
c⁄figwøp
 ();

552 #i‚de‡
yyãxt_±r


553 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

556 #ifde‡
YY_NEED_STRLEN


557 
yy_Êex_°æí
 (
yyc⁄°
 * );

560 #i‚de‡
YY_NO_INPUT


562 #ifde‡
__˝lu•lus


563 
yyöput
 ();

565 
öput
 ();

571 #i‚de‡
YY_READ_BUF_SIZE


572 
	#YY_READ_BUF_SIZE
 8192

	)

576 #i‚de‡
ECHO


580 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
c⁄figãxt
, 
c⁄figÀng
, 1, 
c⁄figout
 )Ë{} } 0)

	)

586 #i‚de‡
YY_INPUT


587 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

588 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

590 
c
 = '*'; \

591 
n
; \

592  
n
 = 0;Ç < 
max_size
 && \

593 (
c
 = 
	`gëc
–
c⁄figö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

594 
buf
[
n
] = (Ë
c
; \

595 i‡–
c
 == '\n' ) \

596 
buf
[
n
++] = (Ë
c
; \

597 i‡–
c
 =
EOF
 && 
	`„º‹
–
c⁄figö
 ) ) \

598 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

599 
ªsu…
 = 
n
; \

603 
î∫o
=0; \

604  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
c⁄figö
))==0 && 
	`„º‹
(configin)) \

606 if–
î∫o
 !
EINTR
) \

608 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

611 
î∫o
=0; \

612 
	`˛óªº
(
c⁄figö
); \

616 

	)

623 #i‚de‡
yyãrmö©e


624 
	#yyãrmö©e
(Ë 
YY_NULL


	)

628 #i‚de‡
YY_START_STACK_INCR


629 
	#YY_START_STACK_INCR
 25

	)

633 #i‚de‡
YY_FATAL_ERROR


634 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

642 #i‚de‡
YY_DECL


643 
	#YY_DECL_IS_OURS
 1

	)

645 
c⁄figÀx
 ();

647 
	#YY_DECL
 
	`c⁄figÀx
 ()

	)

653 #i‚de‡
YY_USER_ACTION


654 
	#YY_USER_ACTION


	)

658 #i‚de‡
YY_BREAK


659 
	#YY_BREAK
 ;

	)

662 
	#YY_RULE_SETUP
 \

663 
YY_USER_ACTION


	)

667 
	gYY_DECL


669 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

670 *
	gyy_˝
, *
	gyy_bp
;

671 
	gyy_a˘
;

680 i‡–!(
	gyy_öô
) )

682 (
	gyy_öô
) = 1;

684 #ifde‡
YY_USER_INIT


685 
	gYY_USER_INIT
;

688 i‡–! (
	gyy_°¨t
) )

689 (
	gyy_°¨t
) = 1;

691 i‡–! 
	gc⁄figö
 )

692 
	gc⁄figö
 = 
°dö
;

694 i‡–! 
	gc⁄figout
 )

695 
	gc⁄figout
 = 
°dout
;

697 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

698 
c⁄figísuª_buf„r_°ack
 ();

699 
	gYY_CURRENT_BUFFER_LVALUE
 =

700 
c⁄fig_¸óã_buf„r
(
c⁄figö
,
YY_BUF_SIZE
 );

703 
c⁄fig_lﬂd_buf„r_°©e
( );

708 
	gyy_˝
 = (
yy_c_buf_p
);

711 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

716 
	gyy_bp
 = 
yy_˝
;

718 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

719 
	gyy_m©ch
:

722 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

723 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

725 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

726 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

728  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

730 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

731 i‡–
	gyy_cuºít_°©e
 >= 18 )

732 
yy_c
 = 
yy_mëa
[() yy_c];

734 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

735 ++
	gyy_˝
;

737  
	gyy_ba£
[
yy_cuºít_°©e
] != 19 );

739 
	gyy_föd_a˘i⁄
:

740 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

741 i‡–
	gyy_a˘
 == 0 )

743 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

744 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

745 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

748 
	gYY_DO_BEFORE_ACTION
;

750 
	gdo_a˘i⁄
:

752  
yy_a˘
 )

756 *
yy_˝
 = (
yy_hﬁd_ch¨
);

757 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

758 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

759 
	gyy_föd_a˘i⁄
;

762 
YY_RULE_SETUP


765 
YY_BREAK


767 
YY_RULE_SETUP


770 
YY_BREAK


773 
YY_RULE_SETUP


775 { 
c⁄figlöío
++; }

776 
YY_BREAK


779 
YY_RULE_SETUP


781 { 
c⁄figlvÆ
.
«me
 = 
°rdup
–
c⁄figãxt
 );  
	gSTR
; }

782 
YY_BREAK


784 
YY_RULE_SETUP


786 { 
c⁄figlvÆ
.
num
 = 
°πoul
–
c⁄figãxt
, 0, 10 );  
	gNUM
; }

787 
YY_BREAK


789 
YY_RULE_SETUP


791 { 
c⁄figlvÆ
.
‚um
 = 
°πod
–
c⁄figãxt
, 0 );  
	gFNUM
; }

792 
YY_BREAK


794 
YY_RULE_SETUP


796 {  
c⁄figãxt
[0]; }

797 
YY_BREAK


799 
YY_RULE_SETUP


801 
ECHO
;

802 
	gYY_BREAK


804 
YY_STATE_EOF
(
INITIAL
):

805 
yyãrmö©e
();

807 
	gYY_END_OF_BUFFER
:

810 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

813 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

814 
YY_RESTORE_YY_MORE_OFFSET


816 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

827 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

828 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
c⁄figö
;

829 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

839 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

841 
yy_°©e_ty≥
 
yy_√xt_°©e
;

843 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

845 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

856 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

858 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

860 i‡–
	gyy_√xt_°©e
 )

863 
	gyy_˝
 = ++(
yy_c_buf_p
);

864 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

865 
	gyy_m©ch
;

870 
	gyy_˝
 = (
yy_c_buf_p
);

871 
	gyy_föd_a˘i⁄
;

875  
yy_gë_√xt_buf„r
( ) )

877 
	gEOB_ACT_END_OF_FILE
:

879 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

881 i‡–
c⁄figwøp
( ) )

892 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

894 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

895 
	gdo_a˘i⁄
;

900 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

901 
	gYY_NEW_FILE
;

906 
	gEOB_ACT_CONTINUE_SCAN
:

907 (
yy_c_buf_p
) =

908 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

910 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

912 
	gyy_˝
 = (
yy_c_buf_p
);

913 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

914 
	gyy_m©ch
;

916 
	gEOB_ACT_LAST_MATCH
:

917 (
yy_c_buf_p
) =

918 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

920 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

922 
	gyy_˝
 = (
yy_c_buf_p
);

923 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

924 
	gyy_föd_a˘i⁄
;

930 
YY_FATAL_ERROR
(

943 
	$yy_gë_√xt_buf„r
 ()

945 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

946 *
sour˚
 = (
yyãxt_±r
);

947 
numbî_to_move
, 
i
;

948 
ªt_vÆ
;

950 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

951 
	`YY_FATAL_ERROR
(

954 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

956 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

961  
EOB_ACT_END_OF_FILE
;

969  
EOB_ACT_LAST_MATCH
;

976 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

978  
i
 = 0; i < 
numbî_to_move
; ++i )

979 *(
de°
++Ë*(
sour˚
++);

981 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

985 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

989 
num_to_ªad
 =

990 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

992  
num_to_ªad
 <= 0 )

996 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

998 
yy_c_buf_p_off£t
 =

999 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1001 i‡–
b
->
yy_is_our_buf„r
 )

1003 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1005 i‡–
√w_size
 <= 0 )

1006 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1008 
b
->
yy_buf_size
 *= 2;

1010 
b
->
yy_ch_buf
 = (*)

1012 
	`c⁄figªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

1016 
b
->
yy_ch_buf
 = 0;

1018 i‡–! 
b
->
yy_ch_buf
 )

1019 
	`YY_FATAL_ERROR
(

1022 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1024 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1025 
numbî_to_move
 - 1;

1029 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1030 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1033 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1034 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

1036 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1039 i‡–(
yy_n_ch¨s
) == 0 )

1041 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1043 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1044 
	`c⁄figª°¨t
(
c⁄figö
 );

1049 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1050 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1051 
YY_BUFFER_EOF_PENDING
;

1056 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1058 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1060 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1061 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`c⁄figªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

1062 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1063 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1066 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1067 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1068 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1070 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1072  
ªt_vÆ
;

1073 
	}
}

1077 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1079 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1080 *
yy_˝
;

1082 
yy_cuºít_°©e
 = (
yy_°¨t
);

1084  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1086 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1087 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1089 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1090 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1092  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1094 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1095 i‡–
yy_cuºít_°©e
 >= 18 )

1096 
yy_c
 = 
yy_mëa
[() yy_c];

1098 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1101  
yy_cuºít_°©e
;

1102 
	}
}

1109 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1111 
yy_is_jam
;

1112 *
yy_˝
 = (
yy_c_buf_p
);

1114 
YY_CHAR
 
yy_c
 = 1;

1115 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1117 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1118 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1120  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1122 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1123 i‡–
yy_cuºít_°©e
 >= 18 )

1124 
yy_c
 = 
yy_mëa
[() yy_c];

1126 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1127 
yy_is_jam
 = (
yy_cuºít_°©e
 == 17);

1129  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1130 
	}
}

1132 #i‚de‡
YY_NO_INPUT


1133 #ifde‡
__˝lu•lus


1134 
	$yyöput
 ()

1136 
	$öput
 ()

1140 
c
;

1142 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1144 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1150 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1152 *(
yy_c_buf_p
) = '\0';

1156 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

1157 ++(
yy_c_buf_p
);

1159  
	`yy_gë_√xt_buf„r
( ) )

1161 
EOB_ACT_LAST_MATCH
:

1173 
	`c⁄figª°¨t
(
c⁄figö
 );

1177 
EOB_ACT_END_OF_FILE
:

1179 i‡–
	`c⁄figwøp
( ) )

1180  
EOF
;

1182 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1183 
YY_NEW_FILE
;

1184 #ifde‡
__˝lu•lus


1185  
	`yyöput
();

1187  
	`öput
();

1191 
EOB_ACT_CONTINUE_SCAN
:

1192 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1198 
c
 = *(*Ë(
yy_c_buf_p
);

1199 *(
yy_c_buf_p
) = '\0';

1200 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1202  
c
;

1203 
	}
}

1211 
	$c⁄figª°¨t
 (
FILE
 * 
öput_fûe
 )

1214 i‡–! 
YY_CURRENT_BUFFER
 ){

1215 
	`c⁄figísuª_buf„r_°ack
 ();

1216 
YY_CURRENT_BUFFER_LVALUE
 =

1217 
	`c⁄fig_¸óã_buf„r
(
c⁄figö
,
YY_BUF_SIZE
 );

1220 
	`c⁄fig_öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

1221 
	`c⁄fig_lﬂd_buf„r_°©e
( );

1222 
	}
}

1228 
	$c⁄fig_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1236 
	`c⁄figísuª_buf„r_°ack
 ();

1237 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1240 i‡–
YY_CURRENT_BUFFER
 )

1243 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1244 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1245 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1248 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1249 
	`c⁄fig_lﬂd_buf„r_°©e
( );

1256 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1257 
	}
}

1259 
	$c⁄fig_lﬂd_buf„r_°©e
 ()

1261 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1262 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1263 
c⁄figö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1264 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1265 
	}
}

1273 
YY_BUFFER_STATE
 
	$c⁄fig_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1275 
YY_BUFFER_STATE
 
b
;

1277 
b
 = (
YY_BUFFER_STATE
Ë
	`c⁄figÆloc
(–
yy_buf„r_°©e
 ) );

1278 i‡–! 
b
 )

1279 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_create_buffer()" );

1281 
b
->
yy_buf_size
 = 
size
;

1286 
b
->
yy_ch_buf
 = (*Ë
	`c⁄figÆloc
(b->
yy_buf_size
 + 2 );

1287 i‡–! 
b
->
yy_ch_buf
 )

1288 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_create_buffer()" );

1290 
b
->
yy_is_our_buf„r
 = 1;

1292 
	`c⁄fig_öô_buf„r
(
b
,
fûe
 );

1294  
b
;

1295 
	}
}

1301 
	$c⁄fig_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1304 i‡–! 
b
 )

1307 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1308 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1310 i‡–
b
->
yy_is_our_buf„r
 )

1311 
	`c⁄fig‰ì
((*Ë
b
->
yy_ch_buf
 );

1313 
	`c⁄fig‰ì
((*Ë
b
 );

1314 
	}
}

1316 #i‚de‡
__˝lu•lus


1317 
ißây
 ();

1324 
	$c⁄fig_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1327 
€ºno
 = 
î∫o
;

1329 
	`c⁄fig_Êush_buf„r
(
b
 );

1331 
b
->
yy_öput_fûe
 = 
fûe
;

1332 
b
->
yy_fûl_buf„r
 = 1;

1338 i‡(
b
 !
YY_CURRENT_BUFFER
){

1339 
b
->
yy_bs_löío
 = 1;

1340 
b
->
yy_bs_cﬁumn
 = 0;

1343 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1345 
î∫o
 = 
€ºno
;

1346 
	}
}

1352 
	$c⁄fig_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1354 i‡–! 
b
 )

1357 
b
->
yy_n_ch¨s
 = 0;

1363 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1364 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1366 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1368 
b
->
yy_©_bﬁ
 = 1;

1369 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1371 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1372 
	`c⁄fig_lﬂd_buf„r_°©e
( );

1373 
	}
}

1381 
	$c⁄figpush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1383 i‡(
√w_buf„r
 =
NULL
)

1386 
	`c⁄figísuª_buf„r_°ack
();

1389 i‡–
YY_CURRENT_BUFFER
 )

1392 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1393 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1394 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1398 i‡(
YY_CURRENT_BUFFER
)

1399 (
yy_buf„r_°ack_t›
)++;

1400 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1403 
	`c⁄fig_lﬂd_buf„r_°©e
( );

1404 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1405 
	}
}

1411 
	$c⁄figp›_buf„r_°©e
 ()

1413 i‡(!
YY_CURRENT_BUFFER
)

1416 
	`c⁄fig_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1417 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1418 i‡((
yy_buf„r_°ack_t›
) > 0)

1419 --(
yy_buf„r_°ack_t›
);

1421 i‡(
YY_CURRENT_BUFFER
) {

1422 
	`c⁄fig_lﬂd_buf„r_°©e
( );

1423 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1425 
	}
}

1430 
	$c⁄figísuª_buf„r_°ack
 ()

1432 
num_to_Æloc
;

1434 i‡(!(
yy_buf„r_°ack
)) {

1440 
num_to_Æloc
 = 1;

1441 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
c⁄figÆloc


1442 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1444 i‡–! (
yy_buf„r_°ack
) )

1445 
	`YY_FATAL_ERROR
( "out of dynamic memory in configensure_buffer_stack()" );

1447 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1449 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1450 (
yy_buf„r_°ack_t›
) = 0;

1454 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1457 
grow_size
 = 8 ;

1459 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1460 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
c⁄figªÆloc


1461 ((
yy_buf„r_°ack
),

1462 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1464 i‡–! (
yy_buf„r_°ack
) )

1465 
	`YY_FATAL_ERROR
( "out of dynamic memory in configensure_buffer_stack()" );

1468 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1469 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1471 
	}
}

1479 
YY_BUFFER_STATE
 
	$c⁄fig_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1481 
YY_BUFFER_STATE
 
b
;

1483 i‡–
size
 < 2 ||

1484 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1485 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1489 
b
 = (
YY_BUFFER_STATE
Ë
	`c⁄figÆloc
(–
yy_buf„r_°©e
 ) );

1490 i‡–! 
b
 )

1491 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_scan_buffer()" );

1493 
b
->
yy_buf_size
 = 
size
 - 2;

1494 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1495 
b
->
yy_is_our_buf„r
 = 0;

1496 
b
->
yy_öput_fûe
 = 0;

1497 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1498 
b
->
yy_is_öãø˘ive
 = 0;

1499 
b
->
yy_©_bﬁ
 = 1;

1500 
b
->
yy_fûl_buf„r
 = 0;

1501 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1503 
	`c⁄fig_swôch_to_buf„r
(
b
 );

1505  
b
;

1506 
	}
}

1516 
YY_BUFFER_STATE
 
	$c⁄fig_sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

1519  
	`c⁄fig_sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

1520 
	}
}

1529 
YY_BUFFER_STATE
 
	$c⁄fig_sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

1531 
YY_BUFFER_STATE
 
b
;

1532 *
buf
;

1533 
yy_size_t
 
n
;

1534 
i
;

1537 
n
 = 
_yybyãs_Àn
 + 2;

1538 
buf
 = (*Ë
	`c⁄figÆloc
(
n
 );

1539 i‡–! 
buf
 )

1540 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_scan_bytes()" );

1542  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1543 
buf
[
i
] = 
yybyãs
[i];

1545 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1547 
b
 = 
	`c⁄fig_sˇn_buf„r
(
buf
,
n
 );

1548 i‡–! 
b
 )

1549 
	`YY_FATAL_ERROR
( "bad buffer in config_scan_bytes()" );

1554 
b
->
yy_is_our_buf„r
 = 1;

1556  
b
;

1557 
	}
}

1559 #i‚de‡
YY_EXIT_FAILURE


1560 
	#YY_EXIT_FAILURE
 2

	)

1563 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

1565 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1566 
	`exô
–
YY_EXIT_FAILURE
 );

1567 
	}
}

1571 #unde‡
yyÀss


1572 
	#yyÀss
(
n
) \

1576 
yyÀss_ma¸o_¨g
 = (
n
); \

1577 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1578 
c⁄figãxt
[
c⁄figÀng
] = (
yy_hﬁd_ch¨
); \

1579 (
yy_c_buf_p
Ë
c⁄figãxt
 + 
yyÀss_ma¸o_¨g
; \

1580 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1581 *(
yy_c_buf_p
) = '\0'; \

1582 
c⁄figÀng
 = 
yyÀss_ma¸o_¨g
; \

1584  0 )

	)

1591 
	$c⁄figgë_löío
 ()

1594  
c⁄figlöío
;

1595 
	}
}

1600 
FILE
 *
	$c⁄figgë_ö
 ()

1602  
c⁄figö
;

1603 
	}
}

1608 
FILE
 *
	$c⁄figgë_out
 ()

1610  
c⁄figout
;

1611 
	}
}

1616 
	$c⁄figgë_Àng
 ()

1618  
c⁄figÀng
;

1619 
	}
}

1625 *
	$c⁄figgë_ãxt
 ()

1627  
c⁄figãxt
;

1628 
	}
}

1634 
	$c⁄fig£t_löío
 (
löe_numbî
 )

1637 
c⁄figlöío
 = 
löe_numbî
;

1638 
	}
}

1646 
	$c⁄fig£t_ö
 (
FILE
 * 
ö_°r
 )

1648 
c⁄figö
 = 
ö_°r
 ;

1649 
	}
}

1651 
	$c⁄fig£t_out
 (
FILE
 * 
out_°r
 )

1653 
c⁄figout
 = 
out_°r
 ;

1654 
	}
}

1656 
	$c⁄figgë_debug
 ()

1658  
c⁄fig_Êex_debug
;

1659 
	}
}

1661 
	$c⁄fig£t_debug
 (
bdebug
 )

1663 
c⁄fig_Êex_debug
 = 
bdebug
 ;

1664 
	}
}

1666 
	$yy_öô_globÆs
 ()

1672 (
yy_buf„r_°ack
) = 0;

1673 (
yy_buf„r_°ack_t›
) = 0;

1674 (
yy_buf„r_°ack_max
) = 0;

1675 (
yy_c_buf_p
) = (*) 0;

1676 (
yy_öô
) = 0;

1677 (
yy_°¨t
) = 0;

1680 #ifde‡
YY_STDINIT


1681 
c⁄figö
 = 
°dö
;

1682 
c⁄figout
 = 
°dout
;

1684 
c⁄figö
 = (
FILE
 *) 0;

1685 
c⁄figout
 = (
FILE
 *) 0;

1692 
	}
}

1695 
	$c⁄figÀx_de°roy
 ()

1699 
YY_CURRENT_BUFFER
){

1700 
	`c⁄fig_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1701 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1702 
	`c⁄figp›_buf„r_°©e
();

1706 
	`c⁄fig‰ì
((
yy_buf„r_°ack
) );

1707 (
yy_buf„r_°ack
Ë
NULL
;

1711 
	`yy_öô_globÆs
( );

1714 
	}
}

1720 #i‚de‡
yyãxt_±r


1721 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

1723 
i
;

1724  
i
 = 0; i < 
n
; ++i )

1725 
s1
[
i
] = 
s2
[i];

1726 
	}
}

1729 #ifde‡
YY_NEED_STRLEN


1730 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

1732 
n
;

1733  
n
 = 0; 
s
[n]; ++n )

1736  
n
;

1737 
	}
}

1740 *
	$c⁄figÆloc
 (
yy_size_t
 
size
 )

1742  (*Ë
	`mÆloc
–
size
 );

1743 
	}
}

1745 *
	$c⁄figªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

1754  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

1755 
	}
}

1757 
	$c⁄fig‰ì
 (* 
±r
 )

1759 
	`‰ì
–(*Ë
±r
 );

1760 
	}
}

1762 
	#YYTABLES_NAME
 "yyèbÀs"

	)

1768 
	$c⁄figîr‹
–
°rög
 
msg
 )

1770 
C⁄figuøti⁄
::
	`GëTheC⁄fig
–)->
	`P¨£Eº‹
–
msg
, 
c⁄figlöío
 );

1771 
	}
}

	@src/intersim/credit.cpp

1 
	~"booksim.hµ
"

2 
	~"¸edô.hµ
"

4 
	gCªdô
::
	$Cªdô
–
max_vcs
 )

6 
vc
 = 
√w
 [
max_vcs
];

7 
vc_˙t
 = 0;

9 
èû
 = 
Ál£
;

10 
id
 = -1;

11 
	}
}

13 
	gCªdô
::~
	$Cªdô
( )

15 
dñëe
 [] 
vc
;

16 
	}
}

	@src/intersim/event_router.cpp

1 
	~<°rög
>

2 
	~<s°ªam
>

3 
	~<io°ªam
>

4 
	~<°dlib.h
>

5 
	~<as£π.h
>

7 
	~"evít_rouãr.hµ
"

8 
	~"°©s.hµ
"

10 
	gEvítRouãr
::
	$EvítRouãr
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
,

11 
ModuÀ
 *
∑ª¡
, 
°rög
 
«me
, 
id
,

12 
öputs
, 
ouçuts
 )

13 : 
	$Rouãr
–
c⁄fig
,

14 
∑ª¡
, 
«me
,

15 
id
,

16 
öputs
, 
ouçuts
 )

18 
o°rög°ªam
 
moduÀ_«me
;

20 
_vcs
 = 
c⁄fig
.
	`GëI¡
( "num_vcs" );

21 
_vc_size
 = 
c⁄fig
.
	`GëI¡
( "vc_buf_size" );

27 
_v˘
 = 
c⁄fig
.
	`GëI¡
( "vct" );

31 
_rf
 = 
	`GëRoutögFun˘i⁄
–
c⁄fig
 );

35 
_vc
 = 
√w
 
VC
 * [
_öputs
];

37  
i
 = 0; i < 
_öputs
; ++i ) {

38 
_vc
[
i
] = 
√w
 
VC
 [
_vcs
];

39  
j
=0; j < 
_vcs
; ++j ) {

40 
_vc
[
i
][
j
].
	`öô
–
c⁄fig
, 
_ouçuts
 );

43  
v
 = 0; v < 
_vcs
; ++v ) {

44 
moduÀ_«me
 << "vc_i" << 
i
 << "_v" << 
v
;

45 
_vc
[
i
][
v
].
	`SëName
–
this
, 
moduÀ_«me
.
	`°r
( ) );

46 
moduÀ_«me
.
	`£ekp
–0, 
ios
::
beg
 );

52 
_ouçut_°©e
 = 
√w
 
EvítNextVCSèã
 [
_ouçuts
];

53  
j
=0; j < 
_ouçuts
; ++j ) {

54 
_ouçut_°©e
[
j
].
	`öô
–
c⁄fig
 );

57  
o
 = 0; o < 
_ouçuts
; ++o ) {

58 
moduÀ_«me
 << "ouçut" << 
o
 << "_vc_state";

59 
_ouçut_°©e
[
o
].
	`SëName
–
this
, 
moduÀ_«me
.
	`°r
( ) );

60 
moduÀ_«me
.
	`£ekp
–0, 
ios
::
beg
 );

65 
_¨rivÆ_¨bôî
 = 
√w
 
Pri‹ôyArbôî
 * [
_ouçuts
];

67  
o
 = 0; o < 
_ouçuts
; ++o ) {

68 
moduÀ_«me
 << "¨rivÆ_¨b_ouçut" << 
o
;

69 
_¨rivÆ_¨bôî
[
o
] =

70 
√w
 
	`Pri‹ôyArbôî
–
c⁄fig
, 
this
, 
moduÀ_«me
.
	`°r
–), 
_öputs
 );

71 
moduÀ_«me
.
	`£ekp
–0, 
ios
::
beg
 );

74 
_å™•‹t_¨bôî
 = 
√w
 
Pri‹ôyArbôî
 * [
_öputs
];

76  
i
 = 0; i < 
_öputs
; ++i ) {

77 
moduÀ_«me
 << "å™•‹t_¨b_öput" << 
i
;

78 
_å™•‹t_¨bôî
[
i
] =

79 
√w
 
	`Pri‹ôyArbôî
–
c⁄fig
, 
this
, 
moduÀ_«me
.
	`°r
–), 
_ouçuts
 );

80 
moduÀ_«me
.
	`£ekp
–0, 
ios
::
beg
 );

85 
_¸ossb¨_pùe
 =

86 
√w
 
PùñöeFIFO
<
Flô
>–
this
, "¸ossb¨_pùñöe", 
_ouçuts
,

87 
_°_¥ï¨e_dñay
 + 
_°_föÆ_dñay
 );

89 
_¸edô_pùe
 =

90 
√w
 
PùñöeFIFO
<
Cªdô
>–
this
, "¸edô_pùñöe", 
_öputs
,

91 
_¸edô_dñay
 );

93 
_¨rivÆ_pùe
 =

94 
√w
 
PùñöeFIFO
<
tAºivÆEvít
>–
this
, "¨rivÆ_pùñöe", 
_öputs
,

99 
_öput_buf„r
 = 
√w
 
queue
<
Flô
 *> [
_öputs
];

100 
_ouçut_buf„r
 = 
√w
 
queue
<
Flô
 *> [
_ouçuts
];

102 
_ö_¸ed_buf„r
 = 
√w
 
queue
<
Cªdô
 *> [
_öputs
];

103 
_out_¸ed_buf„r
 = 
√w
 
queue
<
Cªdô
 *> [
_ouçuts
];

105 
_¨rivÆ_queue
 = 
√w
 
queue
<
tAºivÆEvít
 *> [
_öputs
];

106 
_å™•‹t_queue
 = 
√w
 
queue
<
tTøn•‹tEvít
 *> [
_ouçuts
];

110 
_å™•‹t_‰ì
 = 
√w
 
boﬁ
 [
_öputs
];

111 
_å™•‹t_m©ch
 = 
√w
 [
_öputs
];

113  
i
 = 0; i < 
_öputs
; ++i ) {

114 
_å™•‹t_‰ì
[
i
] = 
åue
;

115 
_å™•‹t_m©ch
[
i
] = -1;

117 
	}
}

119 
	gEvítRouãr
::~
	$EvítRouãr
( )

121  
i
 = 0; i < 
_öputs
; ++i ) {

122 
dñëe
 [] 
_vc
[
i
];

125 
dñëe
 [] 
_vc
;

126 
dñëe
 [] 
_ouçut_°©e
;

128  
o
 = 0; o < 
_ouçuts
; ++o ) {

129 
dñëe
 
_¨rivÆ_¨bôî
[
o
];

132  
i
 = 0; i < 
_öputs
; ++i ) {

133 
dñëe
 
_å™•‹t_¨bôî
[
i
];

136 
dñëe
 [] 
_¨rivÆ_¨bôî
;

137 
dñëe
 [] 
_å™•‹t_¨bôî
;

139 
dñëe
 
_¸ossb¨_pùe
;

140 
dñëe
 
_¸edô_pùe
;

141 
dñëe
 
_¨rivÆ_pùe
;

143 
dñëe
 [] 
_öput_buf„r
;

144 
dñëe
 [] 
_ouçut_buf„r
;

146 
dñëe
 [] 
_ö_¸ed_buf„r
;

147 
dñëe
 [] 
_out_¸ed_buf„r
;

149 
dñëe
 [] 
_¨rivÆ_queue
;

150 
dñëe
 [] 
_å™•‹t_queue
;

152 
dñëe
 [] 
_å™•‹t_‰ì
;

153 
dñëe
 [] 
_å™•‹t_m©ch
;

154 
	}
}

156 
	gEvítRouãr
::
	$RódI≈uts
( )

158 
	`_Re˚iveFlôs
( );

159 
	`_Re˚iveCªdôs
( );

160 
	}
}

162 
	gEvítRouãr
::
	$I¡î«lSãp
( )

165 
	`_IncomögFlôs
( );

168 
_¨rivÆ_pùe
->
	`Adv™˚
( );

171  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

172 
_¨rivÆ_¨bôî
[
ouçut
]->
	`CÀ¨
( );

177  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

178 
	`_AºivÆReque°s
–
öput
 );

182  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

183 
	`_AºivÆArb
–
ouçut
 );

186  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

187 
_å™•‹t_¨bôî
[
öput
]->
	`CÀ¨
( );

190 
_¸ossb¨_pùe
->
	`WrôeAŒ
( 0 );

191 
_¸edô_pùe
->
	`WrôeAŒ
( 0 );

195  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

196 
	`_Tøn•‹tReque°s
–
ouçut
 );

200  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

201 
	`_Tøn•‹tArb
–
öput
 );

204 
_¸ossb¨_pùe
->
	`Adv™˚
( );

205 
_¸edô_pùe
->
	`Adv™˚
( );

207 
	`_OuçutQueuög
( );

208 
	}
}

210 
	gEvítRouãr
::
	$WrôeOuçuts
( )

212 
	`_SídFlôs
( );

213 
	`_SídCªdôs
( );

214 
	}
}

216 
	gEvítRouãr
::
	$_Re˚iveFlôs
( )

218 
Flô
 *
f
;

220  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

221 
f
 = *((*
_öput_ch™√ls
)[
öput
]);

223 i‡–
f
 ) {

224 
_öput_buf„r
[
öput
].
	`push
–
f
 );

227 
	}
}

229 
	gEvítRouãr
::
	$_Re˚iveCªdôs
( )

231 
Cªdô
 *
c
;

233  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

234 
c
 = *((*
_ouçut_¸edôs
)[
ouçut
]);

236 i‡–
c
 ) {

237 
_out_¸ed_buf„r
[
ouçut
].
	`push
–
c
 );

240 
	}
}

242 
	gEvítRouãr
::
	$_Pro˚ssWaôög
–
ouçut
, 
out_vc
 )

249 
¸edôs
;

251 
tTøn•‹tEvít
 *
ãvt
;

253 
EvítNextVCSèã
::
tWaôög
 *
w
;

255 i‡–
_ouçut_°©e
[
ouçut
].
	`IsWaôög
–
out_vc
 ) ) {

258 
w
 = 
_ouçut_°©e
[
ouçut
].
	`P›Waôög
–
out_vc
 );

260 
_ouçut_°©e
[
ouçut
].
	`SëSèã
–
out_vc
, 
EvítNextVCSèã
::
busy
 );

261 
_ouçut_°©e
[
ouçut
].
	`SëI≈ut
–
out_vc
, 
w
->
öput
 );

262 
_ouçut_°©e
[
ouçut
].
	`SëI≈utVC
–
out_vc
, 
w
->
vc
 );

264 i‡–
w
->
w©ch
 ) {

265 
cout
 << "Dequeuög waôögáºivÆÉvíà© " << 
_fuŒ«me


266 << " f‹ flô " << 
w
->
id
 << 
ídl
;

269 
¸edôs
 = 
_ouçut_°©e
[
ouçut
].
	`GëCªdôs
–
out_vc
 );

272 i‡–
¸edôs
 > 0 ) {

273 
ãvt
 = 
√w
 
tTøn•‹tEvít
;

274 
ãvt
->
§c_vc
 = 
w
->
vc
;

275 
ãvt
->
d°_vc
 = 
out_vc
;

276 
ãvt
->
öput
 = 
w
->input;

277 
ãvt
->
w©ch
 = 
w
->watch;

278 
ãvt
->
id
 = 
w
->id;

280 
_å™•‹t_queue
[
ouçut
].
	`push
–
ãvt
 );

282 i‡–
ãvt
->
w©ch
 ) {

283 
cout
 << "Inje˘ögÅøn•‹àevíà© " << 
_fuŒ«me


284 << " f‹ flô " << 
ãvt
->
id
 << 
ídl
;

287 
¸edôs
--;

288 
_ouçut_°©e
[
ouçut
].
	`SëCªdôs
–
out_vc
, 
¸edôs
 );

289 
_ouçut_°©e
[
ouçut
].
	`SëPª£n˚
–
out_vc
, 
w
->
¥es
 - 1 );

293 
_ouçut_°©e
[
ouçut
].
	`SëPª£n˚
–
out_vc
, 
w
->
¥es
 );

296 
dñëe
 
w
;

300 
_ouçut_°©e
[
ouçut
].
	`SëSèã
–
out_vc
, 
EvítNextVCSèã
::
idÀ
 );

302 
	}
}

304 
	gEvítRouãr
::
	$_IncomögFlôs
( )

306 
Flô
 *
f
;

307 
VC
 *
cur_vc
;

309 
tAºivÆEvít
 *
´vt
;

311 
_¨rivÆ_pùe
->
	`WrôeAŒ
( 0 );

313  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

314 i‡–!
_öput_buf„r
[
öput
].
	`em±y
( ) ) {

315 
f
 = 
_öput_buf„r
[
öput
].
	`‰⁄t
( );

316 
_öput_buf„r
[
öput
].
	`p›
( );

318 
cur_vc
 = &
_vc
[
öput
][
f
->
vc
];

320 i‡–!
cur_vc
->
	`AddFlô
–
f
 ) ) {

321 
cout
 << "Eº‹Öro˚ssög flô:" << 
ídl
 << *
f
;

322 
	`Eº‹
( "VC buffer overflow" );

326 i‡–
cur_vc
->
	`GëSèã
–Ë=
VC
::
idÀ
 ) {

328 i‡–!
f
->
hód
 ) {

329 
cout
 << "N⁄-hód flô:" << 
ídl
;

330 
cout
 << *
f
;

331 
	`Eº‹
( "ReceivedÇon-head flitát idle VC" );

334 c⁄° 
OuçutSë
 *
rouã_£t
;

335 
out_vc
, 
out_p‹t
;

337 
cur_vc
->
	`Rouã
–
_rf
, 
this
, 
f
, 
öput
 );

338 
rouã_£t
 = 
cur_vc
->
	`GëRouãSë
( );

340 i‡–!
rouã_£t
->
	`GëP‹tVC
–&
out_p‹t
, &
out_vc
 ) ) {

341 
	`Eº‹
( "TheÉvent-drivenÑouterÑequiresÑouting functions withá single (port,vc) output" );

344 
cur_vc
->
	`SëOuçut
–
out_p‹t
, 
out_vc
 );

345 
cur_vc
->
	`SëSèã
–
VC
::
a˘ive
 );

347 i‡–
f
->
hód
 ) {

348 
cout
 << *
f
;

349 
	`Eº‹
( "Received head flitátÇon-idle VC." );

353 i‡–
f
->
w©ch
 ) {

354 
cout
 << "Re˚ived flôáà" << 
_fuŒ«me
 << ". OutputÖort = "

355 << 
cur_vc
->
	`GëOuçutP‹t
( ) << ", output VC = "

356 << 
cur_vc
->
	`GëOuçutVC
–Ë<< 
ídl
;

357 
cout
 << *
f
;

363 i‡––!
_v˘
 ) || ( _v˘ && 
f
->
hód
 ) ) {

367 
´vt
 = 
√w
 
tAºivÆEvít
;

369 
´vt
->
öput
 = input;

370 
´vt
->
ouçut
 = 
cur_vc
->
	`GëOuçutP‹t
( );

371 
´vt
->
§c_vc
 = 
f
->
vc
;

372 
´vt
->
d°_vc
 = 
cur_vc
->
	`GëOuçutVC
( );

373 
´vt
->
hód
 = 
f
->head;

374 
´vt
->
èû
 = 
f
->tail;

380 
´vt
->
w©ch
 = 
f
->watch;

381 
´vt
->
id
 = 
f
->id;

383 
_¨rivÆ_pùe
->
	`Wrôe
–
´vt
, 
öput
 );

385 i‡–
´vt
->
w©ch
 ) {

386 
cout
 << "Inje˘edáºivÆÉvíà© " << 
_fuŒ«me


387 << " f‹ flô " << 
´vt
->
id
 << 
ídl
;

392 
	}
}

394 
	gEvítRouãr
::
	$_AºivÆReque°s
–
öput
 )

396 
tAºivÆEvít
 *
´vt
;

398 
´vt
 = 
_¨rivÆ_pùe
->
	`Ród
–
öput
 );

399 i‡–
´vt
 ) {

400 
_¨rivÆ_queue
[
öput
].
	`push
–
´vt
 );

403 i‡–!
_¨rivÆ_queue
[
öput
].
	`em±y
( ) ) {

404 
´vt
 = 
_¨rivÆ_queue
[
öput
].
	`‰⁄t
( );

405 
_¨rivÆ_¨bôî
[
´vt
->
ouçut
]->
	`AddReque°
–
öput
 );

407 
	}
}

409 
	gEvítRouãr
::
	$_SídTøn•‹t
–
öput
, 
ouçut
, 
tAºivÆEvít
 *
´vt
 )

413 
tTøn•‹tEvít
 *
ãvt
;

415 
¸edôs
;

416 
¥es
;

418 
¸edôs
 = 
_ouçut_°©e
[
ouçut
].
	`GëCªdôs
–
´vt
->
d°_vc
 );

420 i‡–
¸edôs
 > 0 ) {

422 
¸edôs
--;

423 
_ouçut_°©e
[
ouçut
].
	`SëCªdôs
–
´vt
->
d°_vc
, 
¸edôs
 );

425 
ãvt
 = 
√w
 
tTøn•‹tEvít
;

426 
ãvt
->
§c_vc
 = 
´vt
->src_vc;

427 
ãvt
->
d°_vc
 = 
´vt
->dst_vc;

428 
ãvt
->
öput
 = input;

429 
ãvt
->
w©ch
 = 
´vt
->watch;

430 
ãvt
->
id
 = 
´vt
->id;

432 
_å™•‹t_queue
[
ouçut
].
	`push
–
ãvt
 );

434 i‡–
ãvt
->
w©ch
 ) {

435 
cout
 << "Inje˘ögÅøn•‹àevíà© " << 
_fuŒ«me


436 << " f‹ flô " << 
ãvt
->
id
 << 
ídl
;

439 i‡–
´vt
->
w©ch
 ) {

440 
cout
 << "Nÿ¸edô†avaûabÀáà" << 
_fuŒ«me


441 << " f‹ flô " << 
´vt
->
id
 << " st‹ögÖª£n˚." << 
ídl
;

445 
¥es
 = 
_ouçut_°©e
[
ouçut
].
	`GëPª£n˚
–
´vt
->
d°_vc
 );

446 
_ouçut_°©e
[
ouçut
].
	`SëPª£n˚
–
´vt
->
d°_vc
, 
¥es
 + 1 );

448 
	}
}

450 
	gEvítRouãr
::
	$_AºivÆArb
–
ouçut
 )

452 
tAºivÆEvít
 *
´vt
;

453 
tTøn•‹tEvít
 *
ãvt
;

454 
Cªdô
 *
c
;

456 
EvítNextVCSèã
::
tWaôög
 *
w
;

458 
öput
;

459 
¸edôs
;

460 
¥es
;

465 i‡–!
_out_¸ed_buf„r
[
ouçut
].
	`em±y
( ) ) {

466 
c
 = 
_out_¸ed_buf„r
[
ouçut
].
	`‰⁄t
( );

467 
_out_¸ed_buf„r
[
ouçut
].
	`p›
( );

469 i‡–
c
->
vc_˙t
 != 1 ) {

470 
	`Eº‹
( "Code can't handle credit countsÇotÉqualÅo 1." );

473 
EvítNextVCSèã
::
eNextVCSèã
 
°©e
 =

474 
_ouçut_°©e
[
ouçut
].
	`GëSèã
–
c
->
vc
[0] );

476 
¸edôs
 = 
_ouçut_°©e
[
ouçut
].
	`GëCªdôs
–
c
->
vc
[0] );

477 
¥es
 = 
_ouçut_°©e
[
ouçut
].
	`GëPª£n˚
–
c
->
vc
[0] );

479 i‡–
_v˘
 ) {

483 i‡–
c
->
hód
 ) {

484 
¸edôs
++;

485 
_ouçut_°©e
[
ouçut
].
	`SëCªdôs
–
c
->
vc
[0], 
¸edôs
 );

486 
	`_Pro˚ssWaôög
–
ouçut
, 
c
->
vc
[0] );

489 
¸edôs
++;

490 
_ouçut_°©e
[
ouçut
].
	`SëCªdôs
–
c
->
vc
[0], 
¸edôs
 );

492 i‡–
c
->
èû
 ) {

493 i‡–
°©e
 !
EvítNextVCSèã
::
busy
 ) {

494 
	`Eº‹
( "ReceivedÅail creditátÇon-busy output VC" );

497 
	`_Pro˚ssWaôög
–
ouçut
, 
c
->
vc
[0] );

498 } i‡––
°©e
 =
EvítNextVCSèã
::
busy
 ) && ( 
¥es
 > 0 ) ) {

501 
ãvt
 = 
√w
 
tTøn•‹tEvít
;

502 
ãvt
->
öput
 = 
_ouçut_°©e
[
ouçut
].
	`GëI≈ut
–
c
->
vc
[0] );

503 
ãvt
->
§c_vc
 = 
_ouçut_°©e
[
ouçut
].
	`GëI≈utVC
–
c
->
vc
[0] );

504 
ãvt
->
d°_vc
 = 
c
->
vc
[0];

505 
ãvt
->
w©ch
 = 
Ál£
;

506 
ãvt
->
id
 = -1;

508 
_å™•‹t_queue
[
ouçut
].
	`push
–
ãvt
 );

510 
¥es
--;

511 
¸edôs
--;

512 
_ouçut_°©e
[
ouçut
].
	`SëPª£n˚
–
c
->
vc
[0], 
¥es
 );

513 
_ouçut_°©e
[
ouçut
].
	`SëCªdôs
–
c
->
vc
[0], 
¸edôs
 );

517 
dñëe
 
c
;

522 
_¨rivÆ_¨bôî
[
ouçut
]->
	`Arbôøã
( );

523 
öput
 = 
_¨rivÆ_¨bôî
[
ouçut
]->
	`M©ch
( );

525 i‡–
öput
 != -1 ) {

528 
´vt
 = 
_¨rivÆ_queue
[
öput
].
	`‰⁄t
( );

529 
_¨rivÆ_queue
[
öput
].
	`p›
( );

531 i‡–
´vt
->
w©ch
 ) {

532 
cout
 << "Pro˚ssögáºivÆÉvíà© " << 
_fuŒ«me


533 << " f‹ flô " << 
´vt
->
id
 << 
ídl
;

536 
EvítNextVCSèã
::
eNextVCSèã
 
°©e
 =

537 
_ouçut_°©e
[
ouçut
].
	`GëSèã
–
´vt
->
d°_vc
 );

539 i‡–
´vt
->
hód
 ) {

540 i‡–
°©e
 =
EvítNextVCSèã
::
idÀ
 ) {

542 
_ouçut_°©e
[
ouçut
].
	`SëSèã
–
´vt
->
d°_vc
, 
EvítNextVCSèã
::
busy
 );

543 
_ouçut_°©e
[
ouçut
].
	`SëI≈ut
–
´vt
->
d°_vc
, 
öput
 );

544 
_ouçut_°©e
[
ouçut
].
	`SëI≈utVC
–
´vt
->
d°_vc
,áevt->
§c_vc
 );

546 
	`_SídTøn•‹t
–
öput
, 
ouçut
, 
´vt
 );

550 
w
 = 
√w
 
EvítNextVCSèã
::
tWaôög
;

552 
w
->
öput
 = input;

553 
w
->
vc
 = 
´vt
->
§c_vc
;

554 
w
->
id
 = 
´vt
->id;

555 
w
->
w©ch
 = 
´vt
->watch;

556 
w
->
¥es
 = 1;

558 
_ouçut_°©e
[
ouçut
].
	`PushWaôög
–
´vt
->
d°_vc
, 
w
 );

561 i‡–
_v˘
 ) {

562 
	`Eº‹
( "ReceivedárrivalÉvent forÇon-head flit in cut-through mode" );

565 i‡–
°©e
 !
EvítNextVCSèã
::
busy
 ) {

566 
cout
 << "Êô id = " << 
´vt
->
id
 << 
ídl
;

567 
	`Eº‹
( "Receivedá body flitátáÇon-busy output VC" );

570 i‡––!
_ouçut_°©e
[
ouçut
].
	`IsI≈utWaôög
–
´vt
->
d°_vc
, 
öput
,áevt->
§c_vc
 ) ) &&

571 –
öput
 =
_ouçut_°©e
[
ouçut
].
	`GëI≈ut
–
´vt
->
d°_vc
 ) ) &&

572 –
´vt
->
§c_vc
 =
_ouçut_°©e
[
ouçut
].
	`GëI≈utVC
–´vt->
d°_vc
 ) ) ) {

577 
	`_SídTøn•‹t
–
öput
, 
ouçut
, 
´vt
 );

581 
_ouçut_°©e
[
ouçut
].
	`In¸Waôög
–
´vt
->
d°_vc
, 
öput
,áevt->
§c_vc
 );

585 
dñëe
 
´vt
;

587 
	}
}

589 
	gEvítRouãr
::
	$_Tøn•‹tReque°s
–
ouçut
 )

591 
tTøn•‹tEvít
 *
ãvt
;

593 i‡–!
_å™•‹t_queue
[
ouçut
].
	`em±y
( ) ) {

594 
ãvt
 = 
_å™•‹t_queue
[
ouçut
].
	`‰⁄t
( );

595 
_å™•‹t_¨bôî
[
ãvt
->
öput
]->
	`AddReque°
–
ouçut
 );

597 
	}
}

599 
	gEvítRouãr
::
	$_Tøn•‹tArb
–
öput
 )

601 
tTøn•‹tEvít
 *
ãvt
;

603 
ouçut
;

604 
VC
 *
cur_vc
;

605 
Flô
 *
f
;

606 
Cªdô
 *
c
;

608 i‡–
_å™•‹t_‰ì
[
öput
] ) {

609 
_å™•‹t_¨bôî
[
öput
]->
	`Arbôøã
( );

610 
ouçut
 = 
_å™•‹t_¨bôî
[
öput
]->
	`M©ch
( );

612 
ouçut
 = 
_å™•‹t_m©ch
[
öput
];

615 i‡–
ouçut
 != -1 ) {

619 
ãvt
 = 
_å™•‹t_queue
[
ouçut
].
	`‰⁄t
( );

621 i‡–
ãvt
->
w©ch
 ) {

622 
cout
 << "Pro˚ssögÅøn•‹àevíà© " << 
_fuŒ«me


623 << " f‹ flô " << 
ãvt
->
id
 << 
ídl
;

626 
cur_vc
 = &
_vc
[
öput
][
ãvt
->
§c_vc
];

630 i‡––
cur_vc
->
	`GëSèã
–Ë!
VC
::
a˘ive
 ) ) {

631 
	`Eº‹
( "Non-active VCÑeceived grant." );

634 i‡–
cur_vc
->
	`Em±y
( ) ) {

638 i‡–
ãvt
->
d°_vc
 !
cur_vc
->
	`GëOuçutVC
( ) ) {

639 
	`Eº‹
( "TransportÉvent's VC doesÇot match input's destination VC." );

642 
f
 = 
cur_vc
->
	`RemoveFlô
( );

644 i‡–
_v˘
 ) {

645 i‡–
f
->
èû
 ) {

646 
_å™•‹t_‰ì
[
öput
] = 
åue
;

647 
_å™•‹t_m©ch
[
öput
] = -1;

649 
_å™•‹t_queue
[
ouçut
].
	`p›
( );

650 
dñëe
 
ãvt
;

652 
cur_vc
->
	`SëSèã
–
VC
::
idÀ
 );

654 
_å™•‹t_‰ì
[
öput
] = 
Ál£
;

655 
_å™•‹t_m©ch
[
öput
] = 
ouçut
;

658 
_å™•‹t_‰ì
[
öput
] = 
åue
;

659 
_å™•‹t_m©ch
[
öput
] = -1;

661 
_å™•‹t_queue
[
ouçut
].
	`p›
( );

662 
dñëe
 
ãvt
;

664 i‡–
f
->
èû
 ) {

665 
cur_vc
->
	`SëSèã
–
VC
::
idÀ
 );

669 
c
 = 
	`_NewCªdô
( );

670 
c
->
vc
[c->
vc_˙t
] = 
f
->vc;

671 
c
->
hód
 = 
f
->head;

672 
c
->
èû
 = 
f
->tail;

673 
c
->
vc_˙t
++;

674 
c
->
id
 = 
f
->id;

675 
_¸edô_pùe
->
	`Wrôe
–
c
, 
öput
 );

677 i‡–
f
->
w©ch
 && 
c
->
èû
 ) {

678 
cout
 << 
_fuŒ«me
 << " sídögÅaû cªdô back f‹ flô " << 
f
->
id
 << 
ídl
;

683 
f
->
h›s
++;

684 
f
->
vc
 = 
cur_vc
->
	`GëOuçutVC
( );

685 
_¸ossb¨_pùe
->
	`Wrôe
–
f
, 
ouçut
 );

687 i‡–
f
->
w©ch
 ) {

688 
cout
 << "F‹w¨dög flôÅhrough crossb¨áà" << 
_fuŒ«me
 << ":" << 
ídl
;

689 
cout
 << *
f
;

692 
	}
}

694 
	gEvítRouãr
::
	$_OuçutQueuög
( )

696 
Flô
 *
f
;

697 
Cªdô
 *
c
;

699  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

700 
f
 = 
_¸ossb¨_pùe
->
	`Ród
–
ouçut
 );

702 i‡–
f
 ) {

703 
_ouçut_buf„r
[
ouçut
].
	`push
–
f
 );

707  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

708 
c
 = 
_¸edô_pùe
->
	`Ród
–
öput
 );

710 i‡–
c
 ) {

711 
_ö_¸ed_buf„r
[
öput
].
	`push
–
c
 );

714 
	}
}

716 
	gEvítRouãr
::
	$_SídFlôs
( )

718 
Flô
 *
f
;

720  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

721 i‡–!
_ouçut_buf„r
[
ouçut
].
	`em±y
( ) ) {

722 
f
 = 
_ouçut_buf„r
[
ouçut
].
	`‰⁄t
( );

723 
_ouçut_buf„r
[
ouçut
].
	`p›
( );

725 
f
 = 0;

728 *(*
_ouçut_ch™√ls
)[
ouçut
] = 
f
;

730 
	}
}

732 
	gEvítRouãr
::
	$_SídCªdôs
( )

734 
Cªdô
 *
c
;

736  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

737 i‡–!
_ö_¸ed_buf„r
[
öput
].
	`em±y
( ) ) {

738 
c
 = 
_ö_¸ed_buf„r
[
öput
].
	`‰⁄t
( );

739 
_ö_¸ed_buf„r
[
öput
].
	`p›
( );

741 
c
 = 0;

744 *(*
_öput_¸edôs
)[
öput
] = 
c
;

746 
	}
}

748 
	gEvítRouãr
::
	$Di•œy
( ) const

750  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

751  
v
 = 0; v < 
_vcs
; ++v ) {

752 
_vc
[
öput
][
v
].
	`Di•œy
( );

755 
	}
}

757 
	gEvítNextVCSèã
::
	$öô
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

759 
	`_Inô
–
c⁄fig
 );

760 
	}
}

762 
	gEvítNextVCSèã
::
	$EvítNextVCSèã
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
,

763 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
 ) :

764 
	$ModuÀ
–
∑ª¡
, 
«me
 )

766 
	`_Inô
–
c⁄fig
 );

767 
	}
}

769 
	gEvítNextVCSèã
::
	$_Inô
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

771 
_buf_size
 = 
c⁄fig
.
	`GëI¡
( "vc_buf_size" );

772 
_vcs
 = 
c⁄fig
.
	`GëI¡
( "num_vcs" );

774 
_¸edôs
 = 
√w
 [
_vcs
];

775 
_¥e£n˚
 = 
√w
 [
_vcs
];

776 
_öput
 = 
√w
 [
_vcs
];

777 
_öputVC
 = 
√w
 [
_vcs
];

778 
_waôög
 = 
√w
 
li°
<
tWaôög
 *> [
_vcs
];

779 
_°©e
 = 
√w
 
eNextVCSèã
 [
_vcs
];

781  
vc
 = 0; v¯< 
_vcs
; ++vc ) {

782 
_¥e£n˚
[
vc
] = 0;

783 
_¸edôs
[
vc
] = 
_buf_size
;

784 
_°©e
[
vc
] = 
idÀ
;

786 
	}
}

788 
	gEvítNextVCSèã
::~
	$EvítNextVCSèã
( )

790 
dñëe
 [] 
_¸edôs
;

791 
dñëe
 [] 
_¥e£n˚
;

792 
dñëe
 [] 
_öput
;

793 
dñëe
 [] 
_öputVC
;

794 
dñëe
 [] 
_waôög
;

795 
dñëe
 [] 
_°©e
;

796 
	}
}

798 
	gEvítNextVCSèã
::
eNextVCSèã
 
EvítNextVCSèã
::
	$GëSèã
–
vc
 ) const

800 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

801  
_°©e
[
vc
];

802 
	}
}

804 
	gEvítNextVCSèã
::
	$GëPª£n˚
–
vc
 ) const

806 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

807  
_¥e£n˚
[
vc
];

808 
	}
}

810 
	gEvítNextVCSèã
::
	$GëCªdôs
–
vc
 ) const

812 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

813  
_¸edôs
[
vc
];

814 
	}
}

816 
	gEvítNextVCSèã
::
	$GëI≈ut
–
vc
 ) const

818 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

819  
_öput
[
vc
];

820 
	}
}

822 
	gEvítNextVCSèã
::
	$GëI≈utVC
–
vc
 ) const

824 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

825  
_öputVC
[
vc
];

826 
	}
}

828 
boﬁ
 
	gEvítNextVCSèã
::
	$IsWaôög
–
vc
 ) const

830 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

831  !
_waôög
[
vc
].
	`em±y
( );

832 
	}
}

834 
	gEvítNextVCSèã
::
	$PushWaôög
–
vc
, 
tWaôög
 *
w
 )

836 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

838 i‡–
w
->
w©ch
 ) {

839 
cout
 << 
_fuŒ«me
 << "Öushög flô " << 
w
->
id


840 << " o¡ÿ®waôög queuêo‡Àngth " << 
_waôög
[
vc
].
	`size
–Ë<< 
ídl
;

843 
_waôög
[
vc
].
	`push_back
–
w
 );

844 
	}
}

846 
	gEvítNextVCSèã
::
	$In¸Waôög
–
vc
, 
w_öput
, 
w_vc
 )

848 
li°
<
tWaôög
 *>::
ôî©‹
 
m©ch
;

851  
m©ch
 = 
_waôög
[
vc
].
	`begö
–); m©ch !_waôög[vc].
	`íd
( ); match++ ) {

852 i‡––(*
m©ch
)->
öput
 =
w_öput
 ) &&

853 –(*
m©ch
)->
vc
 =
w_vc
 ) ) ;

856 i‡–
m©ch
 !
_waôög
[
vc
].
	`íd
( ) ) {

857 (*
m©ch
)->
¥es
++;

859 
	`Eº‹
( "DidÇot find match in IncrWaiting" );

861 
	}
}

863 
boﬁ
 
	gEvítNextVCSèã
::
	$IsI≈utWaôög
–
vc
, 
w_öput
, 
w_vc
 ) const

865 
li°
<
tWaôög
 *>::
c⁄°_ôî©‹
 
m©ch
;

866 
boﬁ
 
r
;

869  
m©ch
 = 
_waôög
[
vc
].
	`begö
–); m©ch !_waôög[vc].
	`íd
( ); match++ ) {

870 i‡––(*
m©ch
)->
öput
 =
w_öput
 ) &&

871 –(*
m©ch
)->
vc
 =
w_vc
 ) ) ;

874 i‡–
m©ch
 !
_waôög
[
vc
].
	`íd
( ) ) {

875 
r
 = 
åue
;

877 
r
 = 
Ál£
;

880  
r
;

881 
	}
}

883 
	gEvítNextVCSèã
::
tWaôög
 *
EvítNextVCSèã
::
	$P›Waôög
–
vc
 )

885 
tWaôög
 *
w
;

887 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

889 
w
 = 
_waôög
[
vc
].
	`‰⁄t
( );

890 
_waôög
[
vc
].
	`p›_‰⁄t
( );

892  
w
;

893 
	}
}

895 
	gEvítNextVCSèã
::
	$SëSèã
–
vc
, 
eNextVCSèã
 
°©e
 )

897 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

898 
_°©e
[
vc
] = 
°©e
;

899 
	}
}

901 
	gEvítNextVCSèã
::
	$SëCªdôs
–
vc
, 
vÆue
 )

903 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

904 
_¸edôs
[
vc
] = 
vÆue
;

905 
	}
}

907 
	gEvítNextVCSèã
::
	$SëPª£n˚
–
vc
, 
vÆue
 )

909 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

910 
_¥e£n˚
[
vc
] = 
vÆue
;

911 
	}
}

913 
	gEvítNextVCSèã
::
	$SëI≈ut
–
vc
, 
öput
 )

915 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

916 
_öput
[
vc
] = 
öput
;

917 
	}
}

919 
	gEvítNextVCSèã
::
	$SëI≈utVC
–
vc
, 
ö_vc
 )

921 
	`as£π
––
vc
 >0 ) && ( v¯< 
_vcs
 ) );

922 
_öputVC
[
vc
] = 
ö_vc
;

923 
	}
}

	@src/intersim/flit.cpp

1 
	~"booksim.hµ
"

2 
	~"Êô.hµ
"

4 
	go°ªam
& 
	g›î©‹
<<–o°ªam& 
	gos
, c⁄° 
	gFlô
& 
	gf
 )

6 
	gos
 << " Flô ID: " << 
	gf
.
	gid
 << " (" << &f << ")"

7 << " Hód: " << 
	gf
.
	ghód
 << " Taû: " << f.
	gèû
 << 
	gídl
;

8 
	gos
 << " Sour˚ : " << 
	gf
.
	g§c
 << " De° : " << f.
	gde°
 << 
	gídl
;

9 
	gos
 << " Inje˘i⁄Åimê: " << 
	gf
.
	gtime
 << 
	gídl
;

11  
	gos
;

	@src/intersim/fly.cpp

1 
	~"booksim.hµ
"

2 
	~<ve˘‹
>

3 
	~<s°ªam
>

5 
	~"Êy.hµ
"

6 
	~"misc_utûs.hµ
"

10 
	gKNFly
::
	$KNFly
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 ) :

11 
	$Nëw‹k
–
c⁄fig
 )

13 
	`_CompuãSize
–
c⁄fig
 );

14 
	`_AŒoc
( );

15 
	`_BuûdNë
–
c⁄fig
 );

16 
	}
}

18 
	gKNFly
::
	$_CompuãSize
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

20 
_k
 = 
c⁄fig
.
	`GëI¡
( "k" );

21 
_n
 = 
c⁄fig
.
	`GëI¡
( "n" );

23 
gK
 = 
_k
; 
gN
 = 
_n
;

25 
_sour˚s
 = 
	`powi
–
_k
, 
_n
 );

26 
_de°s
 = 
	`powi
–
_k
, 
_n
 );

29 
_size
 = 
_n
*
	`powi
–
_k
, _n-1 );

32 
_ch™√ls
 = (
_n
-1)*
_sour˚s
;

33 
	}
}

35 
	gKNFly
::
	$_BuûdNë
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

37 
o°rög°ªam
 
rouãr_«me
;

39 
≥r_°age
 = 
	`powi
–
_k
, 
_n
-1 );

41 
node
 = 0;

42 
c
;

44  
°age
 = 0; sègê< 
_n
; ++stage ) {

45  
addr
 = 0;ádd∏< 
≥r_°age
; ++addr ) {

47 
rouãr_«me
 << "rouãr_" << 
°age
 << "_" << 
addr
;

48 
_rouãrs
[
node
] = 
Rouãr
::
	`NewRouãr
–
c⁄fig
, 
this
, 
rouãr_«me
.
	`°r
( ),

49 
node
, 
_k
, _k );

50 
rouãr_«me
.
	`£ekp
–0, 
ios
::
beg
 );

52 #ifde‡
DEBUG_FLY


53 
cout
 << "c⁄√˘ögÇodê" << 
node
 << "Åo:" << 
ídl
;

56  
p‹t
 = 0;Ö‹à< 
_k
; ++port ) {

58 i‡–
°age
 == 0 ) {

59 
c
 = 
addr
*
_k
 + 
p‹t
;

60 
_rouãrs
[
node
]->
	`AddI≈utCh™√l
–&
_öje˘
[
c
], &
_öje˘_¸ed
[c] );

61 #ifde‡
DEBUG_FLY


62 
cout
 << " inje˘i⁄ ch™√»" << 
c
 << 
ídl
;

65 
c
 = 
	`_InCh™√l
–
°age
, 
addr
, 
p‹t
 );

66 
_rouãrs
[
node
]->
	`AddI≈utCh™√l
–&
_ch™
[
c
], &
_ch™_¸ed
[c] );

67 #ifde‡
DEBUG_FLY


68 
cout
 << " i≈uàch™√»" << 
c
 << 
ídl
;

73 i‡–
°age
 =
_n
 - 1 ) {

74 
c
 = 
addr
*
_k
 + 
p‹t
;

75 
_rouãrs
[
node
]->
	`AddOuçutCh™√l
–&
_eje˘
[
c
], &
_eje˘_¸ed
[c] );

76 #ifde‡
DEBUG_FLY


77 
cout
 << "Éje˘i⁄ ch™√»" << 
c
 << 
ídl
;

80 
c
 = 
	`_OutCh™√l
–
°age
, 
addr
, 
p‹t
 );

81 
_rouãrs
[
node
]->
	`AddOuçutCh™√l
–&
_ch™
[
c
], &
_ch™_¸ed
[c] );

82 #ifde‡
DEBUG_FLY


83 
cout
 << " ouçuàch™√»" << 
c
 << 
ídl
;

88 ++
node
;

91 
	}
}

93 
	gKNFly
::
	$_OutCh™√l
–
°age
, 
addr
, 
p‹t
 ) const

95  
°age
*
_sour˚s
 + 
addr
*
_k
 + 
p‹t
;

96 
	}
}

98 
	gKNFly
::
	$_InCh™√l
–
°age
, 
addr
, 
p‹t
 ) const

100 
ö_addr
;

101 
ö_p‹t
;

107 
shi·
 = 
	`powi
–
_k
, 
_n
-
°age
-1 );

109 
œ°_digô
 = 
p‹t
;

110 
zîo_digô
 = ( 
addr
 / 
shi·
 ) % 
_k
;

113 
ö_addr
 = 
addr
 - 
zîo_digô
*
shi·
 + 
œ°_digô
*shift;

114 
ö_p‹t
 = 
zîo_digô
;

116 (
°age
-1)*
_sour˚s
 + 
ö_addr
*
_k
 + 
ö_p‹t
;

117 
	}
}

119 
	gKNFly
::
	$GëN
( ) const

121  
_n
;

122 
	}
}

124 
	gKNFly
::
	$GëK
( ) const

126  
_k
;

127 
	}
}

129 
	gKNFly
::
	$C≠acôy
( ) const

132 
	}
}

	@src/intersim/injection.cpp

1 
	~"booksim.hµ
"

2 
	~<m≠
>

3 
	~<as£π.h
>

4 
	~<c°dlib
>

5 
	~"öje˘i⁄.hµ
"

6 
	~"√tw‹k.hµ
"

7 
	~"øndom_utûs.hµ
"

8 
	~"misc_utûs.hµ
"

10 
	gm≠
<
	g°rög
, 
	gtInje˘i⁄Pro˚ss
> 
	ggInje˘i⁄Pro˚ssM≠
;

12 
	ggBur°AÕha
;

13 
	ggBur°Bëa
;

15 
	ggC⁄°PackëSize
;

17 *
	ggNodeSèãs
 = 0;

20 
	$bînouŒi
–, 
øã
 )

22 –
	`R™domFlﬂt
–Ë< ( 
øã
 / ()
gC⁄°PackëSize
 ) ) ?

23 
gC⁄°PackëSize
 : 0;

24 
	}
}

28 
	$⁄_off
–
sour˚
, 
øã
 )

30 
r1
;

31 
boﬁ
 
issue
;

33 
	`as£π
––
sour˚
 >0 ) && ( sour˚ < 
gNodes
 ) );

35 i‡–!
gNodeSèãs
 ) {

36 
gNodeSèãs
 = 
√w
 [
gNodes
];

38  
n
 = 0;Ç < 
gNodes
; ++n ) {

39 
gNodeSèãs
[
n
] = 0;

45 i‡–
gNodeSèãs
[
sour˚
] == 0 ) {

46 i‡–
	`R™domFlﬂt
–Ë< 
gBur°AÕha
 ) {

47 
gNodeSèãs
[
sour˚
] = 1;

49 } i‡–
	`R™domFlﬂt
–Ë< 
gBur°Bëa
 ) {

50 
gNodeSèãs
[
sour˚
] = 0;

55 
issue
 = 
Ál£
;

56 i‡–
gNodeSèãs
[
sour˚
] ) {

57 
r1
 = 
øã
 * ( 1.0 + 
gBur°Bëa
 / 
gBur°AÕha
 ) /

58 ()
gC⁄°PackëSize
;

60 i‡–
	`R™domFlﬂt
–Ë< 
r1
 ) {

61 
issue
 = 
åue
;

65  
issue
 ? 
gC⁄°PackëSize
 : 0;

66 
	}
}

70 
	$InôülizeInje˘i⁄M≠
( )

74 
gInje˘i⁄Pro˚ssM≠
["bînouŒi"] = &
bînouŒi
;

75 
gInje˘i⁄Pro˚ssM≠
["⁄_off"] = &
⁄_off
;

76 
	}
}

78 
tInje˘i⁄Pro˚ss
 
	$GëInje˘i⁄Pro˚ss
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

80 
m≠
<
°rög
, 
tInje˘i⁄Pro˚ss
>::
c⁄°_ôî©‹
 
m©ch
;

81 
tInje˘i⁄Pro˚ss
 
ù
;

83 
°rög
 
‚
;

85 
c⁄fig
.
	`GëSå
–"öje˘i⁄_¥o˚ss", 
‚
 );

86 
m©ch
 = 
gInje˘i⁄Pro˚ssM≠
.
	`föd
–
‚
 );

88 i‡–
m©ch
 !
gInje˘i⁄Pro˚ssM≠
.
	`íd
( ) ) {

89 
ù
 = 
m©ch
->
£c⁄d
;

91 
cout
 << "Eº‹: Undeföed inje˘i⁄Öro˚s†'" << 
‚
 << "'." << 
ídl
;

92 
	`exô
(-1);

95 
gC⁄°PackëSize
 = 
c⁄fig
.
	`GëI¡
( "const_flits_per_packet" );

96 
gBur°AÕha
 = 
c⁄fig
.
	`GëFlﬂt
( "burst_alpha" );

97 
gBur°Bëa
 = 
c⁄fig
.
	`GëFlﬂt
( "burst_beta" );

99  
ù
;

100 
	}
}

	@src/intersim/interconnect_interface.cpp

1 
	~"booksim.hµ
"

2 
	~<°rög
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

6 
	~<queue
>

8 
	~"rouãfunc.hµ
"

9 
	~"åaffic.hµ
"

10 
	~"booksim_c⁄fig.hµ
"

11 
	~"åafficm™agî.hµ
"

12 
	~"øndom_utûs.hµ
"

13 
	~"√tw‹k.hµ
"

14 
	~"sögÀ√t.hµ
"

15 
	~"kncube.hµ
"

16 
	~"Êy.hµ
"

17 
	~"öje˘i⁄.hµ
"

18 
	~"öãrc⁄√˘_öãrÁ˚.h
"

19 
	~"../gpgpu-sim/mem_„tch.h
"

20 
	~<°rög.h
>

21 
	~<m©h.h
>

23 
	g_Êô_size
 ;

25 
boﬁ
 
	gdoub_√t
 = 
Ál£
;

27 
BookSimC⁄fig
 
	gi˙t_c⁄fig
;

28 
TøfficM™agî
** 
	gåaffic
;

29 
	gg_num_vcs
;

30 
	gqueue
<
	gFlô
 *> ** 
	geje˘i⁄_buf
;

31 
	gve˘‹
<> 
	ground_robö_tu∫
;

32 
	geje˘i⁄_buf„r_ˇ∑côy
 ;

33 
	gbound¨y_buf_ˇ∑côy
 ;

35 
	göput_buf„r_ˇ∑côy
 ;

37 ˛as†
	cbound¨y_buf
{

38 
	m¥iv©e
:

39 
queue
<*> 
buf
;

40 
	mqueue
<
	mboﬁ
> 
	mèû_Êag
;

41 
	m∑ckë_n
;

42 
	mˇ∑côy
;

43 
	mpublic
:

44 
	$bound¨y_buf
(){

45 
ˇ∑côy
 = 
bound¨y_buf_ˇ∑côy
;

46 
∑ckë_n
=0;

48 
boﬁ
 
	$is_fuŒ
(){

49  (
buf
.
	`size
()>=
ˇ∑côy
);

50 
	}
}

51 
boﬁ
 
	$has_∑ckë
() {

52  (
∑ckë_n
);

53 
	}
}

54 * 
	$p›_∑ckë
(){

55 
	`as£π
 (
∑ckë_n
);

56 * 
d©a
 = 
NULL
;

57 * 
ãmp_d
 = 
buf
.
	`‰⁄t
();

58 
d©a
==
NULL
) {

59 i‡(
èû_Êag
.
	`‰⁄t
()) {

60 
d©a
 = 
buf
.
	`‰⁄t
();

61 
∑ckë_n
--;

63 
	`as£π
(
ãmp_d
 =
buf
.
	`‰⁄t
());

64 
buf
.
	`p›
();

65 
èû_Êag
.
	`p›
();

67  
d©a
;

68 
	}
}

69 * 
	$t›_∑ckë
(){

70 
	`as£π
 (
∑ckë_n
);

71 * 
d©a
 = 
NULL
;

72 * 
ãmp_d
 = 
buf
.
	`‰⁄t
();

73 
d©a
==
NULL
) {

74 i‡(
èû_Êag
.
	`‰⁄t
()) {

75 
d©a
 = 
buf
.
	`‰⁄t
();

77 
	`as£π
(
ãmp_d
 =
buf
.
	`‰⁄t
());

79  
d©a
;

80 
	}
}

81 
	$push_Êô_d©a
(* 
d©a
,
boﬁ
 
is_èû
) {

82 
buf
.
	`push
(
d©a
);

83 
èû_Êag
.
	`push
(
is_èû
);

84 i‡(
is_èû
) {

85 
∑ckë_n
++;

87 
	}
}

90 
bound¨y_buf
** 
	g˛ock_bound¨y_buf
;

92 ˛as†
	cmycom∑ris⁄
 {

93 
	mpublic
:

94 
boﬁ
 
	$›î©‹
(Ë(c⁄° * 
lhs
, c⁄° * 
rhs
) const

96 –((
mem_„tch
 *)
lhs
)->
	`gë_i˙t_ª˚ive_time
(Ë> ((mem_„tch *Ë
rhs
)->get_icnt_receive_time());

98 
	}
};

100 
boﬁ
 
	g≥r„˘_i˙t
 = 0;

101 
	gfixed_œt_i˙t
 = 0;

103 
	g¥i‹ôy_queue
<* , 
	gve˘‹
<* >, 
	gmycom∑ris⁄
> * 
	gout_buf_fixedœt_buf
;

107 * 
	gmax_fixedœt_buf_size
;

109 
	g√t_c
;

111 
	g_n_shadî
 = 0;

112 
	g_n_mem
 = 0;

114 * 
	gnode_m≠
;

117 * 
	gªvî£_m≠
;

119 
	$m≠_gí
(
dim
,
memcou¡
, 
memnodes
[])

121 
k
 = 0;

122 
i
=0 ;

123 
j
=0 ;

124 
memfound
=0;

125 
i
 = 0; i < 
dim
*dim ; i++) {

126 
memfound
=0;

127 
j
 = 0; j<
memcou¡
 ; j++) {

128 i‡(
memnodes
[
j
]==
i
) {

129 
memfound
=1;

132 i‡(!
memfound
) {

133 
node_m≠
[
k
]=
i
;

134 
k
++;

137 
j
 = 0; j<
memcou¡
 ; j++) {

138 
node_m≠
[
k
]=
memnodes
[
j
];

139 
k
++;

141 
	`as£π
(
k
==
dim
*dim);

142 
	}
}

144 
	$di•œy_m≠
(
dim
,
cou¡
)

146 
	`¥ötf
("GPGPU-Sim uArch: ");

147 
i
=0;

148 
i
=0;i<
cou¡
;i++) {

149 
	`¥ötf
("%3d ",
node_m≠
[
i
]);

150 i‡(
i
%
dim
 ==0)

151 
	`¥ötf
("\nGPGPU-Sim uArch: ");

153 
	}
}

155 
	$¸óã_node_m≠
(
n_shadî
, 
n_mem
, 
size
, 
u£_m≠
)

157 
node_m≠
 = (*)
	`mÆloc
((
size
)*());

158 i‡(
u£_m≠
) {

159 
size
) {

162 
√wm≠
[] = {

168 
	`mem˝y
 (
node_m≠
, 
√wm≠
,16*());

173 
√wm≠
[] = {

183 
	`mem˝y
 (
node_m≠
, 
√wm≠
,64*());

188 
√wm≠
[] = {

201 
	`mem˝y
 (
node_m≠
, 
√wm≠
,121*());

206 
memnodes
[8]={3,7,10,12,23,25,28,32};

207 
	`m≠_gí
(6 ,8 ,
memnodes
);

212 
cout
<<"WARNING !!! NO MAPPING IMPLEMENTED YET FOR THIS CONFIG"<<
ídl
;

213 
i
=0;i<
size
;i++) {

214 
node_m≠
[
i
]=i;

219 
i
=0;i<
size
;i++) {

220 
node_m≠
[
i
]=i;

223 
ªvî£_m≠
 = (*)
	`mÆloc
((
size
)*());

224 
i
 = 0; i < 
size
 ; i++) {

225 
j
 = 0; j<
size
 ; j++) {

226 i‡(
node_m≠
[
j
]==
i
) {

227 
ªvî£_m≠
[
i
]=
j
;

232 
	`¥ötf
("GPGPU-Sim uArch: interconnectÇodemap\n");

233 
	`di•œy_m≠
((Ë
	`sqπ
(
size
),size);

235 
	}
}

237 
	$fixed_œãncy
(
öput
, 
ouçut
)

239 
œãncy
;

240 i‡(
≥r„˘_i˙t
) {

241 
œãncy
 = 1;

243 
dim
 = 
i˙t_c⁄fig
.
	`GëI¡
( "k" );

244 
xh›s
 = 
	`abs
 ( 
öput
%
dim
 - 
ouçut
%dim);

245 
yh›s
 = 
	`abs
 ( 
öput
/
dim
 - 
ouçut
/dim);

246 
œãncy
 = ( (
xh›s
+
yh›s
)*
fixed_œt_i˙t
 );

248  
œãncy
;

249 
	}
}

252 
ölöe
 
boﬁ
 
	$is_shd
(
node
)

254 i‡(
ªvî£_m≠
[
node
] < (Ë
_n_shadî
)

255  
åue
;

257  
Ál£
;

258 
	}
}

260 
ölöe
 
boﬁ
 
	$is_mem
(
node
)

262  !
	`is_shd
(
node
);

263 
	}
}

266 
	$öãrc⁄√˘_°©s
()

268 i‡(!
fixed_œt_i˙t
) {

269 
i
=0; i<
√t_c
;i++) {

270 
cout
 <<"Tøffi¯"<<
i
<< " Sèt" << 
ídl
;

271 
åaffic
[
i
]->
	`ShowSèts
();

272 i‡(
i˙t_c⁄fig
.
	`GëI¡
("enable_link_stats")) {

273 
cout
 << "%=================================" << 
ídl
;

274 
cout
 <<"Tøffi¯"<<
i
<< "Lök utûiz©i⁄s:" << 
ídl
;

275 
åaffic
[
i
]->
_√t
->
	`Di•œy
();

280 
cout
<<"Max Fixed L©ícy ICNT queuêsizêf‹"<<
ídl
;

281 
i
=0;i<(
_n_mem
 + 
_n_shadî
);i++) {

282 
cout
<<"Çode[" << 
i
 <<"] i†"<<
max_fixedœt_buf_size
[i];

284 
cout
<<
ídl
;

286 
	}
}

288 
	$i˙t_ovîÆ_°©
()

290 i‡(!
fixed_œt_i˙t
) {

291 
i
=0; i<
√t_c
;i++) {

292 
åaffic
[
i
]->
	`ShowOvîÆSèt
();

295 
	}
}

297 
	$i˙t_öô_grid
 (){

298 
i
=0; i<
√t_c
;i++) {

299 
åaffic
[
i
]->
	`I˙tInôPîGrid
(0 );

301 
	}
}

303 
boﬁ
 
	$öãrc⁄√˘_has_buf„r
(
öput_node
, 
tŸ_ªq_size
)

306 
öput
 = 
node_m≠
[
öput_node
];

307 
boﬁ
 
has_buf„r
 = 
Ál£
;

308 
n_Êôs
 = 
tŸ_ªq_size
 / 
_Êô_size
 + ((tot_req_size % _flit_size)? 1:0);

309 i‡(!(
fixed_œt_i˙t
 || 
≥r„˘_i˙t
)) {

310 
has_buf„r
 = (
åaffic
[0]->
_∑πül_∑ckës
[
öput
][0].
	`size
(Ë+ 
n_Êôs
Ë<
öput_buf„r_ˇ∑côy
;

311 i‡((
√t_c
>1Ë&& 
	`is_mem
(
öput
))

312 
has_buf„r
 = (
åaffic
[1]->
_∑πül_∑ckës
[
öput
][0].
	`size
(Ë+ 
n_Êôs
Ë<
öput_buf„r_ˇ∑côy
;

314 
has_buf„r
 = 
åue
;

316  
has_buf„r
;

317 
	}
}

319 
gpu_sim_cy˛e
;

320 
gpu_tŸ_sim_cy˛e
;

322 
	$öãrc⁄√˘_push
 ( 
öput_node
, 
ouçut_node
,

323 * 
d©a
, 
size
)

325 
ouçut
 = 
node_m≠
[
ouçut_node
];

326 
öput
 = 
node_m≠
[
öput_node
];

329 
cout
<<"CÆ»öãrc⁄√˘Öush i≈ut: "<<
öput
<<" ouçut: "<<
ouçut
<<
ídl
;

332 i‡(
fixed_œt_i˙t
) {

333 ((
mem_„tch
 *Ë
d©a
)->
	`£t_i˙t_ª˚ive_time
–
gpu_sim_cy˛e
 + 
	`fixed_œãncy
(
öput
,
ouçut
) );

334 
out_buf_fixedœt_buf
[
ouçut
].
	`push
(
d©a
);

335 i‡(
out_buf_fixedœt_buf
[
ouçut
].
	`size
(Ë> 
max_fixedœt_buf_size
[output]) {

336 
max_fixedœt_buf_size
[
ouçut
]
out_buf_fixedœt_buf
[ouçut].
	`size
();

340 
n_Êôs
 = 
size
 / 
_Êô_size
 + ((size % _flit_size)? 1:0);

341 
nc
;

342 i‡(!
doub_√t
) {

343 
nc
=0;

345 i‡(
	`is_shd
(
öput
) ) {

346 
nc
=0;

348 
nc
=1;

350 
åaffic
[
nc
]->
	`_Gíî©ePackë
–
öput
, 
n_Êôs
, 0 ,Åøffic[nc]->
_time
, 
d©a
, 
ouçut
);

351 #i‡
DOUB


352 
cout
 <<"Tøffic[" << 
nc
 << "] (m≠≥dË£ndög f‹m "<< 
öput
 << "Åÿ" << 
ouçut
 <<
ídl
;

356 
	}
}

358 * 
	$öãrc⁄√˘_p›
(
ouçut_node
)

360 
ouçut
 = 
node_m≠
[
ouçut_node
];

361 #i‡
DEBUG


362 
cout
<<"CÆ»öãrc⁄√˘ POP " << 
ouçut
<<
ídl
;

364 * 
d©a
 = 
NULL
;

365 i‡(
fixed_œt_i˙t
) {

366 i‡(!
out_buf_fixedœt_buf
[
ouçut
].
	`em±y
()) {

367 i‡(((
mem_„tch
 *)
out_buf_fixedœt_buf
[
ouçut
].
	`t›
())->
	`gë_i˙t_ª˚ive_time
(Ë<
gpu_sim_cy˛e
) {

368 
d©a
 = 
out_buf_fixedœt_buf
[
ouçut
].
	`t›
();

369 
out_buf_fixedœt_buf
[
ouçut
].
	`p›
();

370 
	`as£π
 (((
mem_„tch
 *)
d©a
)->
	`gë_i˙t_ª˚ive_time
());

374 
vc
;

375 
tu∫
 = 
round_robö_tu∫
[
ouçut
];

376 
vc
=0;(vc<
g_num_vcs
Ë&& (
d©a
==
NULL
);vc++) {

377 i‡(
˛ock_bound¨y_buf
[
ouçut
][
tu∫
].
	`has_∑ckë
()) {

378 
d©a
 = 
˛ock_bound¨y_buf
[
ouçut
][
tu∫
].
	`p›_∑ckë
();

380 
tu∫
++;

381 i‡(
tu∫
 =
g_num_vcs
)Åurn = 0;

383 i‡(
d©a
) {

384 
round_robö_tu∫
[
ouçut
] = 
tu∫
;

387  
d©a
;

388 
	}
}

390 
MATLAB_OUTPUT
 ;

391 
DISPLAY_LAT_DIST
 ;

392 
DISPLAY_HOP_DIST
 ;

393 
DISPLAY_PAIR_LATENCY
 ;

396 
	$öô_öãrc⁄√˘
 (* 
c⁄fig_fûe
,

397 
n_shadî
,

398 
n_mem
 )

400 
_n_shadî
 = 
n_shadî
;

401 
_n_mem
 = 
n_mem
;

402 i‡(! 
c⁄fig_fûe
 ) {

403 
cout
 << "I¡îc⁄√˘ Requúe†®c⁄figfûe" << 
ídl
;

404 
	`exô
 (-1);

406 
i˙t_c⁄fig
.
	`P¨£
–
c⁄fig_fûe
 );

408 
√t_c
 = 
i˙t_c⁄fig
.
	`GëI¡
( "network_count" );

409 i‡(
√t_c
==2) {

410 
doub_√t
 = 
åue
;

411 } i‡(
√t_c
<1 ||Çet_c>2) {

412 
cout
 <<
√t_c
<<" Nëw‹k_cou¡Ües†th™ 1 o∏m‹êth™ 2ÇŸ suµ‹ãd."<<
ídl
;

413 
	`ab‹t
();

416 
g_num_vcs
 = 
i˙t_c⁄fig
.
	`GëI¡
( "num_vcs" );

417 
	`InôülizeRoutögM≠
( );

418 
	`InôülizeTøfficM≠
( );

419 
	`InôülizeInje˘i⁄M≠
( );

421 
	`R™domSìd
–
i˙t_c⁄fig
.
	`GëI¡
("seed") );

423 
Nëw‹k
 **
√t
;

425 
åaffic
 = 
√w
 
TøfficM™agî
 *[
√t_c
];

426 
√t
 = 
√w
 
Nëw‹k
 *[
√t_c
];

428 
i
=0;i<
√t_c
;i++) {

429 
°rög
 
t›o
;

431 
i˙t_c⁄fig
.
	`GëSå
–"t›ﬁogy", 
t›o
 );

433 i‡–
t›o
 == "torus" ) {

434 
√t
[
i
] = 
√w
 
	`KNCube
–
i˙t_c⁄fig
, 
åue
 );

435 } i‡–
t›o
 =="mesh" ) {

436 
√t
[
i
] = 
√w
 
	`KNCube
–
i˙t_c⁄fig
, 
Ál£
 );

437 } i‡–
t›o
 == "fly" ) {

438 
√t
[
i
] = 
√w
 
	`KNFly
–
i˙t_c⁄fig
 );

439 } i‡–
t›o
 == "single" ) {

440 
√t
[
i
] = 
√w
 
	`SögÀNë
–
i˙t_c⁄fig
 );

442 
˚º
 << "Unknow¿t›ﬁogy " << 
t›o
 << 
ídl
;

443 
	`exô
(-1);

446 i‡–
i˙t_c⁄fig
.
	`GëI¡
( "link_failures" ) ) {

447 
√t
[
i
]->
	`In£πR™domFau…s
–
i˙t_c⁄fig
 );

450 
åaffic
[
i
] = 
√w
 
	`TøfficM™agî
 ( 
i˙t_c⁄fig
, 
√t
[i], i );

453 
fixed_œt_i˙t
 = 
i˙t_c⁄fig
.
	`GëI¡
( "fixed_lat_per_hop" );

455 i‡(
i˙t_c⁄fig
.
	`GëI¡
( "perfect_icnt" )) {

456 
≥r„˘_i˙t
 = 
åue
;

457 
fixed_œt_i˙t
 = 1;

459 
_Êô_size
 = 
i˙t_c⁄fig
.
	`GëI¡
( "flit_size" );

460 i‡(
i˙t_c⁄fig
.
	`GëI¡
("ejection_buf_size")) {

461 
eje˘i⁄_buf„r_ˇ∑côy
 = 
i˙t_c⁄fig
.
	`GëI¡
( "ejection_buf_size" ) ;

463 
eje˘i⁄_buf„r_ˇ∑côy
 = 
i˙t_c⁄fig
.
	`GëI¡
( "vc_buf_size" );

465 
bound¨y_buf_ˇ∑côy
 = 
i˙t_c⁄fig
.
	`GëI¡
( "boundary_buf_size" ) ;

466 i‡(
i˙t_c⁄fig
.
	`GëI¡
("input_buf_size")) {

467 
öput_buf„r_ˇ∑côy
 = 
i˙t_c⁄fig
.
	`GëI¡
("input_buf_size");

469 
öput_buf„r_ˇ∑côy
 = 9;

471 
	`¸óã_buf
(
åaffic
[0]->
_de°s
,
öput_buf„r_ˇ∑côy
,
i˙t_c⁄fig
.
	`GëI¡
( "num_vcs" ));

472 
MATLAB_OUTPUT
 = 
i˙t_c⁄fig
.
	`GëI¡
("MATLAB_OUTPUT");

473 
DISPLAY_LAT_DIST
 = 
i˙t_c⁄fig
.
	`GëI¡
("DISPLAY_LAT_DIST");

474 
DISPLAY_HOP_DIST
 = 
i˙t_c⁄fig
.
	`GëI¡
("DISPLAY_HOP_DIST");

475 
DISPLAY_PAIR_LATENCY
 = 
i˙t_c⁄fig
.
	`GëI¡
("DISPLAY_PAIR_LATENCY");

476 
	`¸óã_node_m≠
(
n_shadî
,
n_mem
,
åaffic
[0]->
_de°s
, 
i˙t_c⁄fig
.
	`GëI¡
("use_map"));

477 
i
=0;i<
√t_c
;i++) {

478 
åaffic
[
i
]->
	`_Fú°Sãp
();

480 
	}
}

482 
	$adv™˚_öãrc⁄√˘
 ()

484 i‡(!
fixed_œt_i˙t
) {

485 
i
=0;i<
√t_c
;i++) {

486 
åaffic
[
i
]->
	`_Sãp
( );

489 
	}
}

491 
	$öãrc⁄√˘_busy
()

493 
i
,
j
;

494 
i
=0; i<
√t_c
;i++) {

495 i‡(
åaffic
[
i
]->
_mósuªd_ö_Êight
) {

499  
i
=0 ;i<(
_n_shadî
+
_n_mem
);i++ ) {

500 i‡–!
åaffic
[0]->
_∑πül_∑ckës
[
i
] [0].
	`em±y
() ) {

503 i‡–
doub_√t
 && !
åaffic
[1]->
_∑πül_∑ckës
[
i
] [0].
	`em±y
() ) {

506  
j
=0;j<
g_num_vcs
;j++ ) {

507 i‡–!
eje˘i⁄_buf
[
i
][
j
].
	`em±y
(Ë|| 
˛ock_bound¨y_buf
[i][j].
	`has_∑ckë
() ) {

513 
	}
}

515 
	$di•œy_i˙t_°©e
–
FILE
 *
Â
 )

517 
	`Ârötf
(
Â
,"GPGPU-Sim uArch: interconnect busy state\n");

518 
i
=0; i<
√t_c
;i++) {

519 i‡(
åaffic
[
i
]->
_mósuªd_ö_Êight
)

520 
	`Ârötf
(
Â
," Nëw‹k %u ha†%u _mósuªd_ö_Êight\n", 
i
, 
åaffic
[i]->
_mósuªd_ö_Êight
 );

523 
i
=0 ;i<(
_n_shadî
+
_n_mem
);i++ ) {

524 if–!
åaffic
[0]->
_∑πül_∑ckës
[
i
] [0].
	`em±y
() )

525 
	`Ârötf
(
Â
," Nëw‹k 0 ha†n⁄em±y _∑πül_∑ckës[%u][0]\n", 
i
);

526 i‡–
doub_√t
 && !
åaffic
[1]->
_∑πül_∑ckës
[
i
] [0].
	`em±y
() )

527 
	`Ârötf
(
Â
," Nëw‹k 1 ha†n⁄em±y _∑πül_∑ckës[%u][0]\n", 
i
);

528 
j
=0;j<
g_num_vcs
;j++ ) {

529 if–!
eje˘i⁄_buf
[
i
][
j
].
	`em±y
() )

530 
	`Ârötf
(
Â
,"Éje˘i⁄_buf[%u][%u] i†n⁄-em±y\n", 
i
, 
j
);

531 if–
˛ock_bound¨y_buf
[
i
][
j
].
	`has_∑ckë
() )

532 
	`Ârötf
(
Â
," clock_bound¨y_buf[%u][%u] ha†∑ckë\n", 
i
, 
j
 );

535 
	}
}

538 
	$¸óã_buf
(
§c_n
,
w¨p_n
,
vc_n
)

540 
i
;

541 
eje˘i⁄_buf
 = 
√w
 
queue
<
Flô
 *>* [
§c_n
];

542 
˛ock_bound¨y_buf
 = 
√w
 
bound¨y_buf
* [
§c_n
];

543 
round_robö_tu∫
.
	`ªsize
–
§c_n
 );

544 
i
=0;i<
§c_n
;i++){

545 
eje˘i⁄_buf
[
i
]
√w
 
queue
<
Flô
 *>[
vc_n
];

546 
˛ock_bound¨y_buf
[
i
]
√w
 
bound¨y_buf
[
vc_n
];

547 
round_robö_tu∫
[
vc_n
-1];

549 i‡(
fixed_œt_i˙t
) {

550 
out_buf_fixedœt_buf
 = 
√w
 
¥i‹ôy_queue
<* , 
ve˘‹
<* >, 
mycom∑ris⁄
> [
§c_n
];

551 
max_fixedœt_buf_size
 = 
√w
 [
§c_n
];

552 
i
=0;i<
§c_n
;i++) {

553 
max_fixedœt_buf_size
[
i
]=0;

557 
	}
}

559 
	$wrôe_out_buf
(
ouçut
, 
Flô
 *
Êô
) {

560 
vc
 = 
Êô
->vc;

561 
	`as£π
 (
eje˘i⁄_buf
[
ouçut
][
vc
].
	`size
(Ë< 
eje˘i⁄_buf„r_ˇ∑côy
);

562 
eje˘i⁄_buf
[
ouçut
][
vc
].
	`push
(
Êô
);

563 
	}
}

565 
	$å™s„r2bound¨y_buf
(
ouçut
) {

566 
Flô
* 
Êô
;

567 
vc
;

568 
vc
=0; vc<
g_num_vcs
;vc++) {

569 i‡–!
eje˘i⁄_buf
[
ouçut
][
vc
].
	`em±y
(Ë&& !
˛ock_bound¨y_buf
[ouçut][vc].
	`is_fuŒ
() ) {

570 
Êô
 = 
eje˘i⁄_buf
[
ouçut
][
vc
].
	`‰⁄t
();

571 
eje˘i⁄_buf
[
ouçut
][
vc
].
	`p›
();

572 
˛ock_bound¨y_buf
[
ouçut
][
vc
].
	`push_Êô_d©a
–
Êô
->
d©a
, flô->
èû
);

573 
åaffic
[
Êô
->
√t_num
]->
¸edô_ªtu∫_queue
[
ouçut
].
	`push
(flit);

574 i‡–
Êô
->
hód
 ) {

575 
	`as£π
 (
Êô
->
de°
 =
ouçut
);

577 #i‡
DOUB


578 
cout
 <<"Tøffi¯" <<
nc
<<"Öush ouàÊôÅÿ(m≠≥d)" << 
ouçut
 <<
ídl
;

582 
	}
}

584 
time_ve˘‹_upd©e
(
uid
, 
¶Ÿ
 , 
cy˛e
, 
ty≥
);

586 
	$time_ve˘‹_upd©e_i˙t_öje˘ed
(* 
d©a
, 
öput
)

601 
	}
}

	@src/intersim/interconnect_interface.h

1 #i‚de‡
INTERCONNECT_INTERFACE_H


2 
	#INTERCONNECT_INTERFACE_H


	)

4 
	~"Êô.hµ
"

5 
	~"åafficm™agî.hµ
"

7 
	sglue_buf
 {

8 
	mÊô_c
;

9 *
	md©a
;

10 
	m√t_num
;

11 
	m§c
;

12 
	mde°
;

16 
boﬁ
 
öãrc⁄√˘_has_buf„r
(
öput
, 
size
);

17 
öãrc⁄√˘_push
 ( 
öput
, 
ouçut
,

18 * 
d©a
, 
size
);

19 * 
öãrc⁄√˘_p›
(
ouçut
);

20 
öô_öãrc⁄√˘
 (* 
c⁄fig_fûe
,

21 
n_shadî
,

22 
n_mem
);

23 
adv™˚_öãrc⁄√˘
();

24 
öãrc⁄√˘_busy
();

25 
öãrc⁄√˘_°©s
() ;

28 
¸óã_buf
(
§c_n
,
w¨p_n
, 
vc_n
);

29 
ö_m≠
 (
öput
) ;

30 
wrôe_out_buf
(
ouçut
, 
Flô
 * 
d©a
);

31 
å™s„r2bound¨y_buf
(
ouçut
);

32 
time_ve˘‹_upd©e_i˙t_öje˘ed
(* 
mf
, 
öput
);

35 
i˙t_ovîÆ_°©
();

36 
i˙t_öô_grid
 ();

	@src/intersim/iq_router.cpp

1 
	~<°rög
>

2 
	~<s°ªam
>

3 
	~<io°ªam
>

4 
	~<°dlib.h
>

5 
	~<as£π.h
>

7 
	~"iq_rouãr.hµ
"

9 
	gIQRouãr
::
	$IQRouãr
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
,

10 
ModuÀ
 *
∑ª¡
, 
°rög
 
«me
, 
id
,

11 
öputs
, 
ouçuts
 )

12 : 
	$Rouãr
–
c⁄fig
,

13 
∑ª¡
, 
«me
,

14 
id
,

15 
öputs
, 
ouçuts
 )

17 
°rög
 
Æloc_ty≥
;

18 
o°rög°ªam
 
vc_«me
;

20 
_vcs
 = 
c⁄fig
.
	`GëI¡
( "num_vcs" );

21 
_vc_size
 = 
c⁄fig
.
	`GëI¡
( "vc_buf_size" );

23 
_iq_time
 = 0;

25 
_ouçut_exåa_œãncy
 = 
c⁄fig
.
	`GëI¡
( "output_extra_latency" );

29 
_rf
 = 
	`GëRoutögFun˘i⁄
–
c⁄fig
 );

33 
_vc
 = 
√w
 
VC
 * [
_öputs
];

35  
i
 = 0; i < 
_öputs
; ++i ) {

36 
_vc
[
i
] = 
√w
 
VC
 [
_vcs
];

37  
j
=0; j < 
_vcs
; j++ )

38 
_vc
[
i
][
j
].
	`öô
–
c⁄fig
, 
_ouçuts
 );

40  
v
 = 0; v < 
_vcs
; ++v ) {

41 
vc_«me
 << "vc_i" << 
i
 << "_v" << 
v
;

42 
_vc
[
i
][
v
].
	`SëName
–
this
, 
vc_«me
.
	`°r
( ) );

43 
vc_«me
.
	`£ekp
–0, 
ios
::
beg
 );

49 
_√xt_vcs
 = 
√w
 
Buf„rSèã
 [
_ouçuts
];

50  
j
=0; j < 
_ouçuts
; j++ ) {

51 
_√xt_vcs
[
j
].
	`öô
–
c⁄fig
 );

54  
o
 = 0; o < 
_ouçuts
; ++o ) {

55 
vc_«me
 << "√xt_vc_o" << 
o
;

56 
_√xt_vcs
[
o
].
	`SëName
–
this
, 
vc_«me
.
	`°r
( ) );

57 
vc_«me
.
	`£ekp
–0, 
ios
::
beg
 );

62 
c⁄fig
.
	`GëSå
–"vc_Æloˇt‹", 
Æloc_ty≥
 );

63 
_vc_Æloˇt‹
 = 
AŒoˇt‹
::
	`NewAŒoˇt‹
–
c⁄fig
,

64 
this
, "vc_allocator",

65 
Æloc_ty≥
,

66 
_vcs
*
_öputs
, 1,

67 
_vcs
*
_ouçuts
, 1 );

69 i‡–!
_vc_Æloˇt‹
 ) {

70 
cout
 << "ERROR: Unknow¿vc_Æloˇt‹Åy≥ " << 
Æloc_ty≥
 << 
ídl
;

71 
	`exô
(-1);

74 
c⁄fig
.
	`GëSå
–"sw_Æloˇt‹", 
Æloc_ty≥
 );

75 
_sw_Æloˇt‹
 = 
AŒoˇt‹
::
	`NewAŒoˇt‹
–
c⁄fig
,

76 
this
, "sw_allocator",

77 
Æloc_ty≥
,

78 
_öputs
*
_öput_•ìdup
, _input_speedup,

79 
_ouçuts
*
_ouçut_•ìdup
, _output_speedup );

81 i‡–!
_sw_Æloˇt‹
 ) {

82 
cout
 << "ERROR: Unknow¿sw_Æloˇt‹Åy≥ " << 
Æloc_ty≥
 << 
ídl
;

83 
	`exô
(-1);

86 
_sw_º_off£t
 = 
√w
 [
_öputs
*
_öput_•ìdup
];

87  
i
 = 0; i < 
_öputs
*
_öput_•ìdup
; ++i ) {

88 
_sw_º_off£t
[
i
] = 0;

93 
_¸ossb¨_pùe
 =

94 
√w
 
PùñöeFIFO
<
Flô
>–
this
, "¸ossb¨_pùñöe", 
_ouçuts
*
_ouçut_•ìdup
,

95 
_°_¥ï¨e_dñay
 + 
_°_föÆ_dñay
 );

97 
_¸edô_pùe
 =

98 
√w
 
PùñöeFIFO
<
Cªdô
>–
this
, "¸edô_pùñöe", 
_öputs
,

99 
_¸edô_dñay
 );

103 
_öput_buf„r
 = 
√w
 
queue
<
Flô
 *> [
_öputs
];

104 
_ouçut_buf„r
 = 
√w
 
queue
<
∑ú
<
Flô
 *, > > [
_ouçuts
];

106 
_ö_¸ed_buf„r
 = 
√w
 
queue
<
Cªdô
 *> [
_öputs
];

107 
_out_¸ed_buf„r
 = 
√w
 
queue
<
Cªdô
 *> [
_ouçuts
];

111 
_hﬁd_swôch_f‹_∑ckë
 = 
c⁄fig
.
	`GëI¡
( "hold_switch_for_packet" );

112 
_swôch_hﬁd_ö
 = 
√w
 [
_öputs
*
_öput_•ìdup
];

113 
_swôch_hﬁd_out
 = 
√w
 [
_ouçuts
*
_ouçut_•ìdup
];

114 
_swôch_hﬁd_vc
 = 
√w
 [
_öputs
*
_öput_•ìdup
];

116  
i
 = 0; i < 
_öputs
*
_öput_•ìdup
; ++i ) {

117 
_swôch_hﬁd_ö
[
i
] = -1;

118 
_swôch_hﬁd_vc
[
i
] = -1;

121  
i
 = 0; i < 
_ouçuts
*
_ouçut_•ìdup
; ++i ) {

122 
_swôch_hﬁd_out
[
i
] = -1;

124 
	}
}

126 
	gIQRouãr
::~
	$IQRouãr
( )

128  
i
 = 0; i < 
_öputs
; ++i ) {

129 
dñëe
 [] 
_vc
[
i
];

132 
dñëe
 [] 
_vc
;

133 
dñëe
 [] 
_√xt_vcs
;

135 
dñëe
 
_vc_Æloˇt‹
;

136 
dñëe
 
_sw_Æloˇt‹
;

138 
dñëe
 [] 
_sw_º_off£t
;

140 
dñëe
 
_¸ossb¨_pùe
;

141 
dñëe
 
_¸edô_pùe
;

143 
dñëe
 [] 
_öput_buf„r
;

144 
dñëe
 [] 
_ouçut_buf„r
;

146 
dñëe
 [] 
_ö_¸ed_buf„r
;

147 
dñëe
 [] 
_out_¸ed_buf„r
;

149 
dñëe
 [] 
_swôch_hﬁd_ö
;

150 
dñëe
 [] 
_swôch_hﬁd_vc
;

151 
dñëe
 [] 
_swôch_hﬁd_out
;

152 
	}
}

154 
	gIQRouãr
::
	$RódI≈uts
( )

156 
	`_Re˚iveFlôs
( );

157 
	`_Re˚iveCªdôs
( );

158 
	}
}

160 
	gIQRouãr
::
	$I¡î«lSãp
( )

162 
	`_I≈utQueuög
( );

163 
	`_Rouã
( );

164 
	`_VCAŒoc
( );

165 
	`_SWAŒoc
( );

167  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

168  
vc
 = 0; v¯< 
_vcs
; ++vc ) {

169 
_vc
[
öput
][
vc
].
	`Adv™˚Time
( );

173 
_¸ossb¨_pùe
->
	`Adv™˚
( );

174 
_¸edô_pùe
->
	`Adv™˚
( );

175 ++
_iq_time
;

177 
	`_OuçutQueuög
( );

178 
	}
}

180 
	~"öãrc⁄√˘_öãrÁ˚.h
"

181 
	gIQRouãr
::
	$WrôeOuçuts
( )

188 
	`_SídFlôs
( );

189 
	`_SídCªdôs
( );

193 
	}
}

195 
	gIQRouãr
::
	$_Re˚iveFlôs
( )

197 
Flô
 *
f
;

199  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

200 
f
 = *((*
_öput_ch™√ls
)[
öput
]);

202 i‡–
f
 ) {

203 
_öput_buf„r
[
öput
].
	`push
–
f
 );

206 
	}
}

208 
	gIQRouãr
::
	$_Re˚iveCªdôs
( )

210 
Cªdô
 *
c
;

212  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

213 
c
 = *((*
_ouçut_¸edôs
)[
ouçut
]);

215 i‡–
c
 ) {

216 
_out_¸ed_buf„r
[
ouçut
].
	`push
–
c
 );

219 
	}
}

221 
	gIQRouãr
::
	$_I≈utQueuög
( )

223 
Flô
 *
f
;

224 
Cªdô
 *
c
;

225 
VC
 *
cur_vc
;

227  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

228 i‡–!
_öput_buf„r
[
öput
].
	`em±y
( ) ) {

229 
f
 = 
_öput_buf„r
[
öput
].
	`‰⁄t
( );

230 
_öput_buf„r
[
öput
].
	`p›
( );

232 
cur_vc
 = &
_vc
[
öput
][
f
->
vc
];

234 i‡–!
cur_vc
->
	`AddFlô
–
f
 ) ) {

235 
	`Eº‹
( "VC buffer overflow" );

238 i‡–
f
->
w©ch
 ) {

239 
cout
 << "Re˚ived flôáà" << 
_fuŒ«me
 << 
ídl
;

240 
cout
 << *
f
;

245  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

246  
vc
 = 0; v¯< 
_vcs
; ++vc ) {

248 
cur_vc
 = &
_vc
[
öput
][
vc
];

250 i‡–
cur_vc
->
	`GëSèã
–Ë=
VC
::
idÀ
 ) {

251 
f
 = 
cur_vc
->
	`Fr⁄tFlô
( );

253 i‡–
f
 ) {

254 i‡–!
f
->
hód
 ) {

255 
	`Eº‹
( "ReceivedÇon-head flitát idle VC" );

258 
cur_vc
->
	`Rouã
–
_rf
, 
this
, 
f
, 
öput
 );

259 
cur_vc
->
	`SëSèã
–
VC
::
routög
 );

265  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

266 i‡–!
_out_¸ed_buf„r
[
ouçut
].
	`em±y
( ) ) {

267 
c
 = 
_out_¸ed_buf„r
[
ouçut
].
	`‰⁄t
( );

268 
_out_¸ed_buf„r
[
ouçut
].
	`p›
( );

270 
_√xt_vcs
[
ouçut
].
	`Pro˚ssCªdô
–
c
 );

271 
dñëe
 
c
;

274 
	}
}

276 
	gIQRouãr
::
	$_Rouã
( )

278 
VC
 *
cur_vc
;

280  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

281  
vc
 = 0; v¯< 
_vcs
; ++vc ) {

283 
cur_vc
 = &
_vc
[
öput
][
vc
];

285 i‡––
cur_vc
->
	`GëSèã
–Ë=
VC
::
routög
 ) &&

286 –
cur_vc
->
	`GëSèãTime
–Ë>
_routög_dñay
 ) ) {

288 
cur_vc
->
	`SëSèã
–
VC
::
vc_Æloc
 );

292 
	}
}

294 
	gIQRouãr
::
	$_AddVCReque°s
–
VC
* 
cur_vc
, 
öput_ödex
, 
boﬁ
 
w©ch
 )

296 c⁄° 
OuçutSë
 *
rouã_£t
;

297 
Buf„rSèã
 *
de°_vc
;

298 
vc_˙t
, 
out_vc
;

299 
ö_¥i‹ôy
, 
out_¥i‹ôy
;

301 
rouã_£t
 = 
cur_vc
->
	`GëRouãSë
( );

302 
out_¥i‹ôy
 = 
cur_vc
->
	`GëPri‹ôy
( );

304  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

305 
vc_˙t
 = 
rouã_£t
->
	`NumVCs
–
ouçut
 );

306 
de°_vc
 = &
_√xt_vcs
[
ouçut
];

308  
vc_ödex
 = 0; vc_ödex < 
vc_˙t
; ++vc_index ) {

309 
out_vc
 = 
rouã_£t
->
	`GëVC
–
ouçut
, 
vc_ödex
, &
ö_¥i‹ôy
 );

311 i‡–
w©ch
 ) {

312 
cout
 << "Åryög v¯" << 
out_vc
 << " (ouà" << 
ouçut
 << ") ... ";

322 i‡–
de°_vc
->
	`IsAvaûabÀF‹
–
out_vc
 ) ) {

323 
_vc_Æloˇt‹
->
	`AddReque°
–
öput_ödex
, 
ouçut
*
_vcs
 + 
out_vc
, 1,

324 
ö_¥i‹ôy
, 
out_¥i‹ôy
 );

325 i‡–
w©ch
 ) {

326 
cout
 << "avaûabÀ" << 
ídl
;

328 } i‡–
w©ch
 ) {

329 
cout
 << "busy" << 
ídl
;

333 
	}
}

335 
	gIQRouãr
::
	$_VCAŒoc
( )

337 
VC
 *
cur_vc
;

338 
Buf„rSèã
 *
de°_vc
;

339 
öput_™d_vc
;

340 
m©ch_öput
;

341 
m©ch_vc
;

343 
Flô
 *
f
;

344 
boﬁ
 
w©ched
;

346 
_vc_Æloˇt‹
->
	`CÀ¨
( );

347 
w©ched
 = 
Ál£
;

349  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

350  
vc
 = 0; v¯< 
_vcs
; ++vc ) {

352 
cur_vc
 = &
_vc
[
öput
][
vc
];

354 i‡––
cur_vc
->
	`GëSèã
–Ë=
VC
::
vc_Æloc
 ) &&

355 –
cur_vc
->
	`GëSèãTime
–Ë>
_vc_Æloc_dñay
 ) ) {

357 
f
 = 
cur_vc
->
	`Fr⁄tFlô
( );

358 i‡–
f
->
w©ch
 ) {

359 
cout
 << "VCÑeque°ögáŒoˇti⁄áà" << 
_fuŒ«me
 << 
ídl
;

360 
cout
 << " i≈ut_ödex = " << 
öput
*
_vcs
 + 
vc
 << 
ídl
;

361 
cout
 << *
f
;

362 
w©ched
 = 
åue
;

365 
	`_AddVCReque°s
–
cur_vc
, 
öput
*
_vcs
 + 
vc
, 
f
->
w©ch
 );

374 
_vc_Æloˇt‹
->
	`AŒoˇã
( );

378  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

379  
vc
 = 0; v¯< 
_vcs
; ++vc ) {

380 
öput_™d_vc
 = 
_vc_Æloˇt‹
->
	`I≈utAssig√d
–
ouçut
*
_vcs
 + 
vc
 );

382 i‡–
öput_™d_vc
 != -1 ) {

383 
m©ch_öput
 = 
öput_™d_vc
 / 
_vcs
;

384 
m©ch_vc
 = 
öput_™d_vc
 - 
m©ch_öput
*
_vcs
;

386 
cur_vc
 = &
_vc
[
m©ch_öput
][
m©ch_vc
];

387 
de°_vc
 = &
_√xt_vcs
[
ouçut
];

389 
cur_vc
->
	`SëSèã
–
VC
::
a˘ive
 );

390 
cur_vc
->
	`SëOuçut
–
ouçut
, 
vc
 );

391 
de°_vc
->
	`TakeBuf„r
–
vc
 );

393 
f
 = 
cur_vc
->
	`Fr⁄tFlô
( );

395 i‡–
f
->
w©ch
 ) {

396 
cout
 << "Gø¡ed VCáŒoˇti⁄áà" << 
_fuŒ«me


397 << " (öpuàödex " << 
öput_™d_vc
 << " )" << 
ídl
;

398 
cout
 << *
f
;

403 
	}
}

405 
	gIQRouãr
::
	$_SWAŒoc
( )

407 
Flô
 *
f
;

408 
Cªdô
 *
c
;

410 
VC
 *
cur_vc
;

411 
Buf„rSèã
 *
de°_vc
;

413 
öput
;

414 
ouçut
;

415 
vc
;

417 
ex∑nded_öput
;

418 
ex∑nded_ouçut
;

420 
_sw_Æloˇt‹
->
	`CÀ¨
( );

422  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

423  
s
 = 0; s < 
_öput_•ìdup
; ++s ) {

424 
ex∑nded_öput
 = 
s
*
_öputs
 + 
öput
;

430 
vc
 = 
_sw_º_off£t
[ 
ex∑nded_öput
 ];

432  
v
 = 0; v < 
_vcs
; ++v ) {

436 i‡––
vc
 % 
_öput_•ìdup
 ) !
s
 ) {

437 
vc
 = ( v¯+ 1 ) % 
_vcs
;

441 
cur_vc
 = &
_vc
[
öput
][
vc
];

443 i‡––
cur_vc
->
	`GëSèã
–Ë=
VC
::
a˘ive
 ) &&

444 –!
cur_vc
->
	`Em±y
( ) ) ) {

446 
de°_vc
 = &
_√xt_vcs
[
cur_vc
->
	`GëOuçutP‹t
( )];

448 i‡–!
de°_vc
->
	`IsFuŒF‹
–
cur_vc
->
	`GëOuçutVC
( ) ) ) {

456 
	`as£π
–
ex∑nded_öput
 =(
vc
%
_öput_•ìdup
)*
_öputs
 + 
öput
 );

457 
ex∑nded_ouçut
 = (
öput
%
_ouçut_•ìdup
)*
_ouçuts
 + 
cur_vc
->
	`GëOuçutP‹t
( );

459 i‡––
_swôch_hﬁd_ö
[
ex∑nded_öput
] == -1 ) &&

460 –
_swôch_hﬁd_out
[
ex∑nded_ouçut
] == -1 ) ) {

468 
_sw_Æloˇt‹
->
	`AddReque°
–
ex∑nded_öput
, 
ex∑nded_ouçut
, 
vc
,

469 
cur_vc
->
	`GëPri‹ôy
( ),

470 
cur_vc
->
	`GëPri‹ôy
( ) );

475 
vc
 = ( v¯+ 1 ) % 
_vcs
;

480 
_sw_Æloˇt‹
->
	`AŒoˇã
( );

484 
_¸ossb¨_pùe
->
	`WrôeAŒ
( 0 );

486  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

487 
c
 = 0;

489  
s
 = 0; s < 
_öput_•ìdup
; ++s ) {

491 
ex∑nded_öput
 = 
s
*
_öputs
 + 
öput
;

493 i‡–
_swôch_hﬁd_ö
[
ex∑nded_öput
] != -1 ) {

494 
ex∑nded_ouçut
 = 
_swôch_hﬁd_ö
[
ex∑nded_öput
];

495 
vc
 = 
_swôch_hﬁd_vc
[
ex∑nded_öput
];

496 
cur_vc
 = &
_vc
[
öput
][
vc
];

498 i‡–
cur_vc
->
	`Em±y
( ) ) {

499 
ex∑nded_ouçut
 = -1;

502 
ex∑nded_ouçut
 = 
_sw_Æloˇt‹
->
	`OuçutAssig√d
–
ex∑nded_öput
 );

505 i‡–
ex∑nded_ouçut
 >= 0 ) {

506 
ouçut
 = 
ex∑nded_ouçut
 % 
_ouçuts
;

508 i‡–
_swôch_hﬁd_ö
[
ex∑nded_öput
] == -1 ) {

509 
vc
 = 
_sw_Æloˇt‹
->
	`RódReque°
–
ex∑nded_öput
, 
ex∑nded_ouçut
 );

510 
cur_vc
 = &
_vc
[
öput
][
vc
];

513 i‡–
_hﬁd_swôch_f‹_∑ckë
 ) {

514 
_swôch_hﬁd_ö
[
ex∑nded_öput
] = 
ex∑nded_ouçut
;

515 
_swôch_hﬁd_vc
[
ex∑nded_öput
] = 
vc
;

516 
_swôch_hﬁd_out
[
ex∑nded_ouçut
] = 
ex∑nded_öput
;

519 
	`as£π
––
cur_vc
->
	`GëSèã
–Ë=
VC
::
a˘ive
 ) &&

520 –!
cur_vc
->
	`Em±y
( ) ) &&

521 –
cur_vc
->
	`GëOuçutP‹t
–Ë=–
ex∑nded_ouçut
 % 
_ouçuts
 ) ) );

523 
de°_vc
 = &
_√xt_vcs
[
cur_vc
->
	`GëOuçutP‹t
( )];

525 
	`as£π
–!
de°_vc
->
	`IsFuŒF‹
–
cur_vc
->
	`GëOuçutVC
( ) ) );

528 
f
 = 
cur_vc
->
	`RemoveFlô
( );

530 
f
->
h›s
++;

532 i‡–
f
->
w©ch
 ) {

533 
cout
 << "F‹w¨dög flôÅhrough crossb¨áà" << 
_fuŒ«me
 << ":" << 
ídl
;

534 
cout
 << *
f
;

537 i‡–!
c
 ) {

538 
c
 = 
	`_NewCªdô
–
_vcs
 );

541 
c
->
vc
[c->
vc_˙t
] = 
f
->vc;

542 
c
->
vc_˙t
++;

544 
f
->
vc
 = 
cur_vc
->
	`GëOuçutVC
( );

545 
de°_vc
->
	`SídögFlô
–
f
 );

547 
_¸ossb¨_pùe
->
	`Wrôe
–
f
, 
ex∑nded_ouçut
 );

549 i‡–
f
->
èû
 ) {

550 
cur_vc
->
	`SëSèã
–
VC
::
idÀ
 );

552 
_swôch_hﬁd_ö
[
ex∑nded_öput
] = -1;

553 
_swôch_hﬁd_vc
[
ex∑nded_öput
] = -1;

554 
_swôch_hﬁd_out
[
ex∑nded_ouçut
] = -1;

557 
_sw_º_off£t
[
ex∑nded_öput
] = ( 
f
->
vc
 + 1 ) % 
_vcs
;

561 
_¸edô_pùe
->
	`Wrôe
–
c
, 
öput
 );

563 
	}
}

565 
	gIQRouãr
::
	$_OuçutQueuög
( )

567 
Flô
 *
f
;

568 
Cªdô
 *
c
;

569 
ex∑nded_ouçut
;

571  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

572  
t
 = 0;Å < 
_ouçut_•ìdup
; ++t ) {

573 
ex∑nded_ouçut
 = 
_ouçuts
*
t
 + 
ouçut
;

574 
f
 = 
_¸ossb¨_pùe
->
	`Ród
–
ex∑nded_ouçut
 );

576 i‡–
f
 ) {

577 
_ouçut_buf„r
[
ouçut
].
	`push
–
	`make_∑ú
(
f
,
_iq_time
) );

582  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

583 
c
 = 
_¸edô_pùe
->
	`Ród
–
öput
 );

585 i‡–
c
 ) {

586 
_ö_¸ed_buf„r
[
öput
].
	`push
–
c
 );

589 
	}
}

591 
	gIQRouãr
::
	$_SídFlôs
( )

593 
Flô
 *
f
;

595  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

597 
f
 = 
NULL
;

599 i‡–!
_ouçut_buf„r
[
ouçut
].
	`em±y
( ) ) {

600 i‡((
_iq_time
 - 
_ouçut_buf„r
[
ouçut
].
	`‰⁄t
().
£c⁄d
Ë>
_ouçut_exåa_œãncy
) {

601 
f
 = 
_ouçut_buf„r
[
ouçut
].
	`‰⁄t
–).
fú°
;

602 
_ouçut_buf„r
[
ouçut
].
	`p›
( );

606 *(*
_ouçut_ch™√ls
)[
ouçut
] = 
f
;

608 
	}
}

610 
	gIQRouãr
::
	$_SídCªdôs
( )

612 
Cªdô
 *
c
;

614  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

615 i‡–!
_ö_¸ed_buf„r
[
öput
].
	`em±y
( ) ) {

616 
c
 = 
_ö_¸ed_buf„r
[
öput
].
	`‰⁄t
( );

617 
_ö_¸ed_buf„r
[
öput
].
	`p›
( );

619 
c
 = 0;

622 *(*
_öput_¸edôs
)[
öput
] = 
c
;

624 
	}
}

626 
	gIQRouãr
::
	$Di•œy
( ) const

628  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

629  
v
 = 0; v < 
_vcs
; ++v ) {

630 
_vc
[
öput
][
v
].
	`Di•œy
( );

633 
	}
}

	@src/intersim/islip.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

4 
	~"i¶ù.hµ
"

5 
	~"øndom_utûs.hµ
"

9 
	giSLIP_S∑r£
::
	$iSLIP_S∑r£
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

10 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

11 
öputs
, 
ouçuts
 ) :

12 
	$S∑r£AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

14 
_iSLIP_ôî
 = 
c⁄fig
.
	`GëI¡
( "alloc_iters" );

16 
_gø¡s
 = 
√w
 [
_ouçuts
];

17 
_g±rs
 = 
√w
 [
_ouçuts
];

18 
_≠ås
 = 
√w
 [
_öputs
];

20  
i
 = 0; i < 
_öputs
; ++i ) {

21 
_≠ås
[
i
] = 0;

23  
j
 = 0; j < 
_ouçuts
; ++j ) {

24 
_g±rs
[
j
] = 0;

26 
	}
}

28 
	giSLIP_S∑r£
::~
	$iSLIP_S∑r£
( )

30 
dñëe
 [] 
_gø¡s
;

31 
dñëe
 [] 
_g±rs
;

32 
dñëe
 [] 
_≠ås
;

33 
	}
}

35 
	giSLIP_S∑r£
::
	$AŒoˇã
( )

37 
öput
;

38 
ouçut
;

40 
öput_off£t
;

41 
ouçut_off£t
;

43 
li°
<
sReque°
>::
ôî©‹
 
p
;

44 
boﬁ
 
wøµed
;

46 
	`_CÀ¨M©chög
( );

48  
ôî
 = 0; iã∏< 
_iSLIP_ôî
; ++iter ) {

51  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

52 
_gø¡s
[
ouçut
] = -1;

56 i‡––
_out_ªq
[
ouçut
].
	`em±y
( ) ) ||

57 –
_outm©ch
[
ouçut
] != -1 ) ) {

62 
öput_off£t
 = 
_g±rs
[
ouçut
];

64 
p
 = 
_out_ªq
[
ouçut
].
	`begö
( );

65  ( 
p
 !
_out_ªq
[
ouçut
].
	`íd
( ) ) &&

66 –
p
->
p‹t
 < 
öput_off£t
 ) ) {

67 
p
++;

70 
wøµed
 = 
Ál£
;

71  (!
wøµed
Ë|| ( 
p
->
p‹t
 < 
öput_off£t
 ) ) {

72 i‡–
p
 =
_out_ªq
[
ouçut
].
	`íd
( ) ) {

73 i‡–
wøµed
 ) {

78 
p
 = 
_out_ªq
[
ouçut
].
	`begö
( );

79 
wøµed
 = 
åue
;

82 
öput
 = 
p
->
p‹t
;

86 i‡–
_öm©ch
[
öput
] == -1 ) {

87 
_gø¡s
[
ouçut
] = 
öput
;

91 
p
++;

95 #ifde‡
DEBUG_ISLIP


96 
cout
 << "grants: ";

97  
i
 = 0; i < 
_ouçuts
; ++i ) {

98 
cout
 << 
_gø¡s
[
i
] << " ";

100 
cout
 << 
ídl
;

102 
cout
 << "aptrs: ";

103  
i
 = 0; i < 
_öputs
; ++i ) {

104 
cout
 << 
_≠ås
[
i
] << " ";

106 
cout
 << 
ídl
;

111  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

113 i‡–
_ö_ªq
[
öput
].
	`em±y
( ) ) {

118 
ouçut_off£t
 = 
_≠ås
[
öput
];

120 
p
 = 
_ö_ªq
[
öput
].
	`begö
( );

121  ( 
p
 !
_ö_ªq
[
öput
].
	`íd
( ) ) &&

122 –
p
->
p‹t
 < 
ouçut_off£t
 ) ) {

123 
p
++;

126 
wøµed
 = 
Ál£
;

127 
Êag
 ;

128 i‡–
p
 !
_ö_ªq
[
öput
].
	`íd
( ) ) {

129 
Êag
(
p
->
p‹t
 < 
ouçut_off£t
) ;

131 
Êag
 = 
åue
;

133  (!
wøµed
Ë|| (
Êag
) ) {

134 i‡–
p
 =
_ö_ªq
[
öput
].
	`íd
( ) ) {

135 i‡–
wøµed
 ) {

140 
p
 = 
_ö_ªq
[
öput
].
	`begö
( );

141 
wøµed
 = 
åue
;

144 
ouçut
 = 
p
->
p‹t
;

148 i‡–
_gø¡s
[
ouçut
] =
öput
 ) {

150 
_öm©ch
[
öput
] = 
ouçut
;

151 
_outm©ch
[
ouçut
] = 
öput
;

154 i‡–
ôî
 == 0 ) {

155 
_g±rs
[
ouçut
] = ( 
öput
 + 1 ) % 
_öputs
;

156 
_≠ås
[
öput
] = ( 
ouçut
 + 1 ) % 
_ouçuts
;

162 
p
++;

163 i‡–
p
 !
_ö_ªq
[
öput
].
	`íd
( ) ) {

164 
Êag
(
p
->
p‹t
 < 
ouçut_off£t
) ;

166 
Êag
 = 
åue
;

172 #ifde‡
DEBUG_ISLIP


173 
cout
 << "input match: ";

174  
i
 = 0; i < 
_öputs
; ++i ) {

175 
cout
 << 
_öm©ch
[
i
] << " ";

177 
cout
 << 
ídl
;

179 
cout
 << "output match: ";

180  
j
 = 0; j < 
_ouçuts
; ++j ) {

181 
cout
 << 
_outm©ch
[
j
] << " ";

183 
cout
 << 
ídl
;

185 
	}
}

	@src/intersim/kncube.cpp

1 
	~"booksim.hµ
"

2 
	~<ve˘‹
>

3 
	~<s°ªam
>

5 
	~"kncube.hµ
"

6 
	~"øndom_utûs.hµ
"

7 
	~"misc_utûs.hµ
"

9 
	gKNCube
::
	$KNCube
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
, 
boﬁ
 
mesh
 ) :

10 
	$Nëw‹k
–
c⁄fig
 )

12 
_mesh
 = 
mesh
;

14 
	`_CompuãSize
–
c⁄fig
 );

15 
	`_AŒoc
( );

16 
	`_BuûdNë
–
c⁄fig
 );

17 
	}
}

19 
	gKNCube
::
	$_CompuãSize
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

21 
_k
 = 
c⁄fig
.
	`GëI¡
( "k" );

22 
_n
 = 
c⁄fig
.
	`GëI¡
( "n" );

24 
gK
 = 
_k
; 
gN
 = 
_n
;

26 
_size
 = 
	`powi
–
_k
, 
_n
 );

27 
_ch™√ls
 = 2*
_n
*
_size
;

29 
_sour˚s
 = 
_size
;

30 
_de°s
 = 
_size
;

31 
	}
}

33 
	gKNCube
::
	$_BuûdNë
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

35 
À·_node
;

36 
right_node
;

38 
right_öput
;

39 
À·_öput
;

41 
right_ouçut
;

42 
À·_ouçut
;

44 
o°rög°ªam
 
rouãr_«me
;

46  
node
 = 0;Çodê< 
_size
; ++node ) {

48 
rouãr_«me
 << "router";

50  
dim_off£t
 = 
_size
 / 
_k
; dim_offset >= 1; dim_offset /= _k ) {

51 
rouãr_«me
 << "_" << ( 
node
 / 
dim_off£t
 ) % 
_k
;

54 
_rouãrs
[
node
] = 
Rouãr
::
	`NewRouãr
–
c⁄fig
, 
this
, 
rouãr_«me
.
	`°r
( ),

55 
node
, 2*
_n
 + 1, 2*_n + 1 );

57 
rouãr_«me
.
	`£ekp
–0, 
ios
::
beg
 );

59  
dim
 = 0; dim < 
_n
; ++dim ) {

61 
À·_node
 = 
	`_Le·Node
–
node
, 
dim
 );

62 
right_node
 = 
	`_RightNode
–
node
, 
dim
 );

73 
right_öput
 = 
	`_Le·Ch™√l
–
right_node
, 
dim
 );

74 
À·_öput
 = 
	`_RightCh™√l
–
À·_node
, 
dim
 );

76 
_rouãrs
[
node
]->
	`AddI≈utCh™√l
–&
_ch™
[
right_öput
], &
_ch™_¸ed
[right_input] );

77 
_rouãrs
[
node
]->
	`AddI≈utCh™√l
–&
_ch™
[
À·_öput
], &
_ch™_¸ed
[left_input] );

79 
right_ouçut
 = 
	`_RightCh™√l
–
node
, 
dim
 );

80 
À·_ouçut
 = 
	`_Le·Ch™√l
–
node
, 
dim
 );

82 
_rouãrs
[
node
]->
	`AddOuçutCh™√l
–&
_ch™
[
right_ouçut
], &
_ch™_¸ed
[right_output] );

83 
_rouãrs
[
node
]->
	`AddOuçutCh™√l
–&
_ch™
[
À·_ouçut
], &
_ch™_¸ed
[left_output] );

86 
_rouãrs
[
node
]->
	`AddI≈utCh™√l
–&
_öje˘
[node], &
_öje˘_¸ed
[node] );

87 
_rouãrs
[
node
]->
	`AddOuçutCh™√l
–&
_eje˘
[node], &
_eje˘_¸ed
[node] );

89 
	}
}

91 
	gKNCube
::
	$_Le·Ch™√l
–
node
, 
dim
 )

94 
ba£
 = 2*
_n
*
node
;

97 
off
 = 2*
dim
 + 1;

99 –
ba£
 + 
off
 );

100 
	}
}

102 
	gKNCube
::
	$_RightCh™√l
–
node
, 
dim
 )

105 
ba£
 = 2*
_n
*
node
;

108 
off
 = 2*
dim
;

110 –
ba£
 + 
off
 );

111 
	}
}

113 
	gKNCube
::
	$_Le·Node
–
node
, 
dim
 )

115 
k_to_dim
 = 
	`powi
–
_k
, 
dim
 );

116 
loc_ö_dim
 = ( 
node
 / 
k_to_dim
 ) % 
_k
;

117 
À·_node
;

120 i‡–
loc_ö_dim
 == 0 ) {

121 
À·_node
 = 
node
 + (
_k
-1)*
k_to_dim
;

123 
À·_node
 = 
node
 - 
k_to_dim
;

126  
À·_node
;

127 
	}
}

129 
	gKNCube
::
	$_RightNode
–
node
, 
dim
 )

131 
k_to_dim
 = 
	`powi
–
_k
, 
dim
 );

132 
loc_ö_dim
 = ( 
node
 / 
k_to_dim
 ) % 
_k
;

133 
right_node
;

136 i‡–
loc_ö_dim
 =–
_k
-1 ) ) {

137 
right_node
 = 
node
 - (
_k
-1)*
k_to_dim
;

139 
right_node
 = 
node
 + 
k_to_dim
;

142  
right_node
;

143 
	}
}

145 
	gKNCube
::
	$GëN
( ) const

147  
_n
;

148 
	}
}

150 
	gKNCube
::
	$GëK
( ) const

152  
_k
;

153 
	}
}

155 
	gKNCube
::
	$In£πR™domFau…s
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

157 
num_Áûs
;

158 
¥ev_£ed
;

160 
node
, 
ch™
;

161 
i
, 
j
, 
t
, 
n
, 
c
;

162 
boﬁ
 *
Áû_nodes
;

163 
boﬁ
 
avaûabÀ
;

165 
boﬁ
 
edge
;

167 
num_Áûs
 = 
c⁄fig
.
	`GëI¡
( "link_failures" );

169 i‡–
num_Áûs
 ) {

170 
¥ev_£ed
 = 
	`R™domI¡L⁄g
( );

171 
	`R™domSìd
–
c⁄fig
.
	`GëI¡
( "fail_seed" ) );

173 
Áû_nodes
 = 
√w
 
boﬁ
 [
_size
];

175  
i
 = 0; i < 
_size
; ++i ) {

176 
node
 = 
i
;

179 
edge
 = 
Ál£
;

180  
n
 = 0;Ç < 
_n
; ++n ) {

181 i‡–––
node
 % 
_k
 ) == 0 ) ||

182 ––
node
 % 
_k
 ) == _k - 1 ) ) {

183 
edge
 = 
åue
;

185 
node
 /
_k
;

188 i‡–
edge
 ) {

189 
Áû_nodes
[
i
] = 
åue
;

191 
Áû_nodes
[
i
] = 
Ál£
;

195  
i
 = 0; i < 
num_Áûs
; ++i ) {

196 
j
 = 
	`R™domI¡
–
_size
 - 1 );

197 
avaûabÀ
 = 
Ál£
;

199  
t
 = 0; (Å < 
_size
 ) && (!
avaûabÀ
); ++t ) {

200 
node
 = ( 
j
 + 
t
 ) % 
_size
;

202 i‡–!
Áû_nodes
[
node
] ) {

204 
c
 = 
	`R™domI¡
–2*
_n
 - 1 );

206  
n
 = 0; (Ç < 2*
_n
 ) && (!
avaûabÀ
); ++n ) {

207 
ch™
 = ( 
n
 + 
c
 ) % 2*
_n
;

209 i‡–
ch™
 % 1 ) {

210 
avaûabÀ
 = 
Áû_nodes
[
	`_Le·Node
–
node
, 
ch™
/2 )];

212 
avaûabÀ
 = 
Áû_nodes
[
	`_RightNode
–
node
, 
ch™
/2 )];

217 i‡–!
avaûabÀ
 ) {

218 
cout
 << "skùpög " << 
node
 << 
ídl
;

222 i‡–
t
 =
_size
 ) {

223 
	`Eº‹
( "CouldÇot findánotherÖossible fault channel" );

227 
	`OutCh™√lFau…
–
node
, 
ch™
 );

228 
Áû_nodes
[
node
] = 
åue
;

230  
n
 = 0; (Ç < 
_n
 ) && 
avaûabÀ
 ; ++n ) {

231 
Áû_nodes
[
	`_Le·Node
–
node
, 
n
 )] = 
åue
;

232 
Áû_nodes
[
	`_RightNode
–
node
, 
n
 )] = 
åue
;

235 
cout
 << "Áûuªáànodê" << 
node
 << ", channel "

236 << 
ch™
 << 
ídl
;

239 
dñëe
 [] 
Áû_nodes
;

241 
	`R™domSìd
–
¥ev_£ed
 );

243 
	}
}

245 
	gKNCube
::
	$C≠acôy
( ) const

247 i‡–
_mesh
 ) {

248 ()
_k
 / 4.0;

250 ()
_k
 / 8.0;

252 
	}
}

	@src/intersim/loa.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

4 
	~"lﬂ.hµ
"

5 
	~"øndom_utûs.hµ
"

7 
	gLOA
::
	$LOA
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

8 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

9 
öputs
, 
öput_•ìdup
,

10 
ouçuts
, 
ouçut_•ìdup
 ) :

11 
	$Dí£AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

13 
_ªq
 = 
√w
 [
_öputs
];

14 
_cou¡s
 = 
√w
 [
_ouçuts
];

16 
_Ωå
 = 
√w
 [
_öputs
];

17 
_g±r
 = 
√w
 [
_ouçuts
];

18 
	}
}

20 
	gLOA
::~
	$LOA
( )

22 
dñëe
 [] 
_ªq
;

23 
dñëe
 [] 
_cou¡s
;

24 
dñëe
 [] 
_Ωå
;

25 
dñëe
 [] 
_g±r
;

26 
	}
}

28 
	gLOA
::
	$AŒoˇã
( )

30 
öput
;

31 
ouçut
;

33 
öput_off£t
;

34 
ouçut_off£t
;

36 
l⁄ñy
;

37 
l⁄ñy_˙t
;

44  
i
 = 0; i < 
_öputs
; ++i ) {

45 
_öm©ch
[
i
] = -1;

47  
j
 = 0; j < 
_ouçuts
; ++j ) {

48 
_outm©ch
[
j
] = -1;

49 
_cou¡s
[
j
] = 0;

51  
i
 = 0; i < 
_öputs
; ++i ) {

52 
_cou¡s
[
j
] +–
_ªque°
[
i
][j].
œbñ
 != -1 ) ? 1 : 0;

57  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

60 
ouçut_off£t
 = 
_Ωå
[
öput
];

61 
l⁄ñy
 = -1;

62 
l⁄ñy_˙t
 = 
_öputs
 + 1;

64  
o
 = 0; o < 
_ouçuts
; ++o ) {

65 
ouçut
 = ( 
o
 + 
ouçut_off£t
 ) % 
_ouçuts
;

67 i‡––
_ªque°
[
öput
][
ouçut
].
œbñ
 != -1 ) &&

68 –
_cou¡s
[
ouçut
] < 
l⁄ñy_˙t
 ) ) {

69 
l⁄ñy
 = 
ouçut
;

70 
l⁄ñy_˙t
 = 
_cou¡s
[
ouçut
];

75 
_ªq
[
öput
] = 
l⁄ñy
;

79  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

80 
öput_off£t
 = 
_g±r
[
ouçut
];

82  
i
 = 0; i < 
_öputs
; ++i ) {

83 
öput
 = ( 
i
 + 
öput_off£t
 ) % 
_öputs
;

85 i‡–
_ªq
[
öput
] =
ouçut
 ) {

88 
_öm©ch
[
öput
] = 
ouçut
;

89 
_outm©ch
[
ouçut
] = 
öput
;

91 
_Ωå
[
öput
] = ( _Ωå[öput] + 1 ) % 
_ouçuts
;

92 
_g±r
[
ouçut
] = ( _g±r[ouçut] + 1 ) % 
_öputs
;

100 
	}
}

	@src/intersim/maxsize.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

4 
	~"maxsize.hµ
"

40 
	gMaxSizeM©ch
::
	$MaxSizeM©ch
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

41 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

42 
öputs
, 
ouçuts
 ) :

43 
	$Dí£AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

45 
_‰om
 = 
√w
 [
_ouçuts
];

46 
_s
 = 
√w
 [
_öputs
];

47 
_ns
 = 
√w
 [
_öputs
];

48 
	}
}

50 
	gMaxSizeM©ch
::~
	$MaxSizeM©ch
( )

52 
dñëe
 [] 
_‰om
;

53 
dñëe
 [] 
_s
;

54 
dñëe
 [] 
_ns
;

55 
	}
}

57 
	gMaxSizeM©ch
::
	$AŒoˇã
( )

60  
i
 = 0; i < 
_öputs
; ++i ) {

61 
_öm©ch
[
i
] = -1;

63  
j
 = 0; j < 
_ouçuts
; ++j ) {

64 
_outm©ch
[
j
] = -1;

69  
	`_Sh‹ã°Augmítög
( ) );

70 
	}
}

73 
boﬁ
 
	gMaxSizeM©ch
::
	$_Sh‹ã°Augmítög
( )

75 
i
, 
j
, 
jn
;

76 
¶í
, 
n¶í
;

77 *
t
;

79 
¶í
 = 0;

80  
i
 = 0; i < 
_öputs
; ++i ) {

81 i‡–
_öm©ch
[
i
] == -1 ) {

82 
_s
[
¶í
] = 
i
;

83 
¶í
++;

85 
_‰om
[
i
] = -1;

88  
ôî
 = 0; iã∏< 
_öputs
; iter++ ) {

89 
n¶í
 = 0;

91  
e
 = 0;É < 
¶í
; ++e ) {

92 
i
 = 
_s
[
e
];

94  
j
 = 0; j < 
_ouçuts
; ++j ) {

95 i‡––
_ªque°
[
i
][
j
].
œbñ
 != -1 ) &&

96 –
_öm©ch
[
i
] !
j
 ) &&

97 –
_‰om
[
j
] == -1 ) ) {

99 
_‰om
[
j
] = 
i
;

101 #ifde‡
DEBUG_MAXSIZE


102 
cout
 << " gŸÅÿ" << 
j
 << " from " << 
i
 << 
ídl
;

104 i‡–
_outm©ch
[
j
] == -1 ) {

105 
found_augmítög
;

107 
_ns
[
n¶í
] = 
_outm©ch
[
j
];

108 
n¶í
++;

110 #ifde‡
DEBUG_MAXSIZE


111 
cout
 << "áddög " << 
_outm©ch
[
j
] << 
ídl
;

119 
t
 = 
_s
;

120 
_s
 = 
_ns
;

121 
_ns
 = 
t
;

122 
¶í
 = 
n¶í
;

125  
Ál£
;

127 
found_augmítög
:

131 #ifde‡
DEBUG_MAXSIZE


132 
cout
 << "FoundÖ©h: " << 
j
 << "c <- ";

135 
i
 = 
_‰om
[
j
];

136 
_outm©ch
[
j
] = 
i
;

138 #ifde‡
DEBUG_MAXSIZE


139 
cout
 << 
i
;

142  
_öm©ch
[
i
] != -1 ) {

143 
jn
 = 
_öm©ch
[
i
];

144 
_öm©ch
[
i
] = 
j
;

146 #ifde‡
DEBUG_MAXSIZE


147 
cout
 << " <- " << 
j
 << "c <- ";

150 
j
 = 
jn
;

151 
i
 = 
_‰om
[
j
];

152 
_outm©ch
[
j
] = 
i
;

154 #ifde‡
DEBUG_MAXSIZE


155 
cout
 << 
i
;

159 #ifde‡
DEBUG_MAXSIZE


160 
cout
 << 
ídl
;

163 
_öm©ch
[
i
] = 
j
;

165 #ifde‡
PRINT_MATCHING


166 
cout
 << "left matching: ";

168  
i
 = 0; i < 
_öputs
; i++ ) {

169 
cout
 << 
_öm©ch
[
i
] << " ";

171 
cout
 << 
ídl
;

173 
cout
 << "right matching: ";

174  
i
 = 0; i < 
_ouçuts
; i++ ) {

175 
cout
 << 
_outm©ch
[
i
] << " ";

177 
cout
 << 
ídl
;

180  
åue
;

181 
	}
}

	@src/intersim/misc_utils.cpp

1 
	~"booksim.hµ
"

2 
	~"misc_utûs.hµ
"

4 
	$powi
–
x
, 
y
 )

6 
r
 = 1;

8  
i
 = 0; i < 
y
; ++i ) {

9 
r
 *
x
;

12  
r
;

13 
	}
}

15 
	$log_two
–
x
 )

17 
r
 = 0;

19 
x
 >>= 1;

20  
x
 ) {

21 
r
++; 
x
 >>= 1;

24  
r
;

25 
	}
}

	@src/intersim/module.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

3 
	~<°dlib.h
>

5 
	~"moduÀ.hµ
"

7 
	gModuÀ
::
	$ModuÀ
( )

9 
	}
}

11 
ModuÀ
::
	$ModuÀ
–
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
 )

13 
	`SëName
–
∑ª¡
, 
«me
 );

14 
	}
}

16 
	gModuÀ
::
	$_AddChûd
–
ModuÀ
 *
chûd
 )

18 
_chûdªn
.
	`push_back
–
chûd
 );

19 
	}
}

21 
	gModuÀ
::
	$SëName
–
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
 )

23 
_«me
 = 
«me
;

25 i‡–
∑ª¡
 ) {

26 
∑ª¡
->
	`_AddChûd
–
this
 );

27 
_fuŒ«me
 = 
∑ª¡
->_fuŒ«mê+ "/" + 
«me
;

29 
_fuŒ«me
 = 
«me
;

31 
	}
}

33 
	gModuÀ
::
	$Di•œyHõørchy
–
Àvñ
 ) const

35 
ve˘‹
<
ModuÀ
 *>::
c⁄°_ôî©‹
 
mod_ôî
;

37  
l
 = 0;Ü < 
Àvñ
;Ü++ ) {

38 
cout
 << " ";

41 
cout
 << 
_«me
 << 
ídl
;

43  
mod_ôî
 = 
_chûdªn
.
	`begö
( );

44 
mod_ôî
 !
_chûdªn
.
	`íd
( ); mod_iter++ ) {

45 (*
mod_ôî
)->
	`Di•œyHõørchy
–
Àvñ
 + 1 );

47 
	}
}

49 
	gModuÀ
::
	$Eº‹
–c⁄° 
°rög
& 
msg
 ) const

51 
cout
 << "Eº‹ i¿" << 
_fuŒ«me
 << " : " << 
msg
 << 
ídl
;

52 
	`exô
( -1 );

53 
	}
}

55 
	gModuÀ
::
	$Debug
–c⁄° 
°rög
& 
msg
 ) const

57 
cout
 << "Debug (" << 
_fuŒ«me
 << "Ë: " << 
msg
 << 
ídl
;

58 
	}
}

60 
	gModuÀ
::
	$Di•œy
( ) const

62 
cout
 << "Di•œy mëhodÇŸ im∂emíãd f‹ " << 
_fuŒ«me
 << 
ídl
;

63 
	}
}

	@src/intersim/network.cpp

1 
	~"booksim.hµ
"

2 
	~"öãrc⁄√˘_öãrÁ˚.h
"

3 
	~<as£π.h
>

5 
	~"√tw‹k.hµ
"

7 
	ggK
 = 0;

8 
	ggN
 = 0;

9 
	ggNodes
 = 0;

11 
	gNëw‹k
::
	$Nëw‹k
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 ) :

12 
	`ModuÀ
( 0, "network" )

14 
_size
 = -1;

15 
_sour˚s
 = -1;

16 
_de°s
 = -1;

17 
_ch™√ls
 = -1;

18 
	}
}

20 
	gNëw‹k
::~
	$Nëw‹k
( )

22  
r
 = 0;Ñ < 
_size
; ++r ) {

23 
dñëe
 
_rouãrs
[
r
];

26 
dñëe
 [] 
_rouãrs
;

28 
dñëe
 [] 
_öje˘
;

29 
dñëe
 [] 
_eje˘
;

30 
dñëe
 [] 
_ch™
;

32 
dñëe
 [] 
_ch™_u£
;

34 
dñëe
 [] 
_öje˘_¸ed
;

35 
dñëe
 [] 
_eje˘_¸ed
;

36 
dñëe
 [] 
_ch™_¸ed
;

37 
	}
}

39 
	gNëw‹k
::
	$_AŒoc
( )

41 
	`as£π
––
_size
 != -1 ) &&

42 –
_sour˚s
 != -1 ) &&

43 –
_de°s
 != -1 ) &&

44 –
_ch™√ls
 != -1 ) );

46 
_rouãrs
 = 
√w
 
Rouãr
 * [
_size
];

47 
gNodes
 = 
_sour˚s
;

49 
_öje˘
 = 
√w
 
Flô
 * [
_sour˚s
];

50 
_eje˘
 = 
√w
 
Flô
 * [
_de°s
];

51 
_ch™
 = 
√w
 
Flô
 * [
_ch™√ls
];

53 
_ch™_u£
 = 
√w
 [
_ch™√ls
];

55  
i
 = 0; i < 
_ch™√ls
; ++i ) {

56 
_ch™_u£
[
i
] = 0;

59 
_ch™_u£_cy˛es
 = 0;

61 
_öje˘_¸ed
 = 
√w
 
Cªdô
 * [
_sour˚s
];

62 
_eje˘_¸ed
 = 
√w
 
Cªdô
 * [
_de°s
];

63 
_ch™_¸ed
 = 
√w
 
Cªdô
 * [
_ch™√ls
];

64 
	}
}

66 
	gNëw‹k
::
	$NumSour˚s
( ) const

68  
_sour˚s
;

69 
	}
}

71 
	gNëw‹k
::
	$NumDe°s
( ) const

73  
_de°s
;

74 
	}
}

76 
	gNëw‹k
::
	$RódI≈uts
( )

78  
r
 = 0;Ñ < 
_size
; ++r ) {

79 
_rouãrs
[
r
]->
	`RódI≈uts
( );

81 
	}
}

83 
	gNëw‹k
::
	$I¡î«lSãp
( )

85  
r
 = 0;Ñ < 
_size
; ++r ) {

86 
_rouãrs
[
r
]->
	`I¡î«lSãp
( );

88 
	}
}

90 
	gNëw‹k
::
	$WrôeOuçuts
( )

92  
r
 = 0;Ñ < 
_size
; ++r ) {

93 
_rouãrs
[
r
]->
	`WrôeOuçuts
( );

96  
c
 = 0; c < 
_ch™√ls
; ++c ) {

97 i‡–
_ch™
[
c
] ) {

98 
_ch™_u£
[
c
]++;

101 
_ch™_u£_cy˛es
++;

102 
	}
}

104 
	gNëw‹k
::
	$WrôeFlô
–
Flô
 *
f
, 
sour˚
 )

106 
	`as£π
––
sour˚
 >0 ) && ( sour˚ < 
_sour˚s
 ) );

107 
_öje˘
[
sour˚
] = 
f
;

108 
	}
}

110 
Flô
 *
	gNëw‹k
::
	$RódFlô
–
de°
 )

112 
	`as£π
––
de°
 >0 ) && ( de° < 
_de°s
 ) );

113  
_eje˘
[
de°
];

114 
	}
}

116 
	gNëw‹k
::
	$WrôeCªdô
–
Cªdô
 *
c
, 
de°
 )

118 
	`as£π
––
de°
 >0 ) && ( de° < 
_de°s
 ) );

119 
_eje˘_¸ed
[
de°
] = 
c
;

120 
	}
}

122 
Cªdô
 *
	gNëw‹k
::
	$RódCªdô
–
sour˚
 )

124 
	`as£π
––
sour˚
 >0 ) && ( sour˚ < 
_sour˚s
 ) );

125  
_öje˘_¸ed
[
sour˚
];

126 
	}
}

128 
	gNëw‹k
::
	$In£πR™domFau…s
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

130 
	`Eº‹
( "InsertRandomFaultsÇot implemented forÅhisÅopology!" );

131 
	}
}

133 
	gNëw‹k
::
	$OutCh™√lFau…
–
r
, 
c
, 
boﬁ
 
Áu…
 )

135 
	`as£π
––
r
 >0 ) && (Ñ < 
_size
 ) );

136 
_rouãrs
[
r
]->
	`OutCh™√lFau…
–
c
, 
Áu…
 );

137 
	}
}

139 
	gNëw‹k
::
	$C≠acôy
( ) const

142 
	}
}

144 
	gNëw‹k
::
	$Di•œy
( ) const

146  
r
 = 0;Ñ < 
_size
; ++r ) {

147 
_rouãrs
[
r
]->
	`Di•œy
( );

150  
c
 = 0; c < 
_ch™√ls
; ++c ) {

151 
cout
 << "ch™√»" << 
c
 << " used "

152 << 100.0 * ()
_ch™_u£
[
c
] / ()
_ch™_u£_cy˛es


153 << "% o‡thêtime" << 
ídl
;

156 
	}
}

	@src/intersim/outputset.cpp

1 
	~"booksim.hµ
"

2 
	~<as£π.h
>

4 
	~"ouçut£t.hµ
"

6 
	gOuçutSë
::
	$OuçutSë
–
num_ouçuts
 )

8 
_num_ouçuts
 = 
num_ouçuts
;

10 
_ouçuts
 = 
√w
 
li°
<
sSëEÀmít
> [
_num_ouçuts
];

11 
	}
}

13 
	gOuçutSë
::~
	$OuçutSë
( )

15 
dñëe
 [] 
_ouçuts
;

16 
	}
}

18 
	gOuçutSë
::
	$CÀ¨
( )

20  
i
 = 0; i < 
_num_ouçuts
; ++i ) {

21 
_ouçuts
[
i
].
	`˛ór
( );

23 
	}
}

25 
	gOuçutSë
::
	$Add
–
ouçut_p‹t
, 
vc
, 
¥i
 )

27 
	`AddR™ge
–
ouçut_p‹t
, 
vc
, vc, 
¥i
 );

28 
	}
}

30 
	gOuçutSë
::
	$AddR™ge
–
ouçut_p‹t
, 
vc_°¨t
, 
vc_íd
, 
¥i
 )

32 
	`as£π
––
ouçut_p‹t
 >= 0 ) &&

33 –
ouçut_p‹t
 < 
_num_ouçuts
 ) &&

34 –
vc_°¨t
 <
vc_íd
 ) );

36 
sSëEÀmít
 
s
;

38 
s
.
vc_°¨t
 = vc_start;

39 
s
.
vc_íd
 = vc_end;

40 
s
.
¥i
 =Öri;

42 
_ouçuts
[
ouçut_p‹t
].
	`push_back
–
s
 );

43 
	}
}

45 
	gOuçutSë
::
	$Size
( ) const

47  
_num_ouçuts
;

48 
	}
}

50 
boﬁ
 
	gOuçutSë
::
	$OuçutEm±y
–
ouçut_p‹t
 ) const

52 
	`as£π
––
ouçut_p‹t
 >= 0 ) &&

53 –
ouçut_p‹t
 < 
_num_ouçuts
 ) );

55  
_ouçuts
[
ouçut_p‹t
].
	`em±y
( );

56 
	}
}

58 
	gOuçutSë
::
	$NumVCs
–
ouçut_p‹t
 ) const

60 
	`as£π
––
ouçut_p‹t
 >= 0 ) &&

61 –
ouçut_p‹t
 < 
_num_ouçuts
 ) );

63 
tŸÆ
 = 0;

65  
li°
<
sSëEÀmít
>::
c⁄°_ôî©‹
 
i
 = 
_ouçuts
[
ouçut_p‹t
].
	`begö
( );

66 
i
 !
_ouçuts
[
ouçut_p‹t
].
	`íd
( ); i++ ) {

67 
tŸÆ
 +
i
->
vc_íd
 - i->
vc_°¨t
 + 1;

70  
tŸÆ
;

71 
	}
}

73 
	gOuçutSë
::
	$GëVC
–
ouçut_p‹t
, 
vc_ödex
, *
¥i
 ) const

75 
	`as£π
––
ouçut_p‹t
 >= 0 ) &&

76 –
ouçut_p‹t
 < 
_num_ouçuts
 ) );

78 
ønge
;

79 
ªmaöög
 = 
vc_ödex
;

80 
vc
 = -1;

82 i‡–
¥i
 ) {

83 *
¥i
 = -1;

86  
li°
<
sSëEÀmít
>::
c⁄°_ôî©‹
 
i
 = 
_ouçuts
[
ouçut_p‹t
].
	`begö
( );

87 
i
 !
_ouçuts
[
ouçut_p‹t
].
	`íd
( ); i++ ) {

89 
ønge
 = 
i
->
vc_íd
 - i->
vc_°¨t
 + 1;

90 i‡–
ªmaöög
 >
ønge
 ) {

91 
ªmaöög
 -
ønge
;

93 
vc
 = 
i
->
vc_°¨t
 + 
ªmaöög
;

94 i‡–
¥i
 ) {

95 *
¥i
 = 
i
->pri;

101  
vc
;

102 
	}
}

104 
boﬁ
 
	gOuçutSë
::
	$GëP‹tVC
–*
out_p‹t
, *
out_vc
 ) const

106 
boﬁ
 
sögÀ_ouçut
 = 
Ál£
;

107 
u£d_ouçuts
 = 0;

109  
ouçut
 = 0; ouçuà< 
_num_ouçuts
; ++output ) {

111 
li°
<
sSëEÀmít
>::
c⁄°_ôî©‹
 
i
 = 
_ouçuts
[
ouçut
].
	`begö
( );

113 i‡–
i
 !
_ouçuts
[
ouçut
].
	`íd
( ) ) {

114 ++
u£d_ouçuts
;

116 i‡–
i
->
vc_°¨t
 =i->
vc_íd
 ) {

117 *
out_vc
 = 
i
->
vc_°¨t
;

118 *
out_p‹t
 = 
ouçut
;

119 
sögÀ_ouçut
 = 
åue
;

126 i‡–
u£d_ouçuts
 > 1 ) {

128 
sögÀ_ouçut
 = 
Ál£
;

133  
sögÀ_ouçut
;

134 
	}
}

	@src/intersim/pim.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

4 
	~"pim.hµ
"

5 
	~"øndom_utûs.hµ
"

9 
	gPIM
::
	$PIM
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

10 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

11 
öputs
, 
ouçuts
 ) :

12 
	$Dí£AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

14 
_PIM_ôî
 = 
c⁄fig
.
	`GëI¡
( "alloc_iters" );

16 
_gø¡s
 = 
√w
 [
_ouçuts
];

17 
	}
}

19 
	gPIM
::~
	$PIM
( )

21 
dñëe
 [] 
_gø¡s
;

22 
	}
}

24 
	gPIM
::
	$AŒoˇã
( )

26 
öput
;

27 
ouçut
;

29 
öput_off£t
;

30 
ouçut_off£t
;

32 
	`_CÀ¨M©chög
( );

34  
ôî
 = 0; iã∏< 
_PIM_ôî
; ++iter ) {

38  
ouçut
 = 0; ouçuà< 
_ouçuts
; ++output ) {

39 
_gø¡s
[
ouçut
] = -1;

42 
öput_off£t
 = 
	`R™domI¡
–
_öputs
 - 1 );

44  
i
 = 0; i < 
_öputs
; ++i ) {

45 
öput
 = ( 
i
 + 
öput_off£t
 ) % 
_öputs
;

47 i‡––
_ªque°
[
öput
][
ouçut
].
œbñ
 != -1 ) &&

48 –
_öm©ch
[
öput
] == -1 ) &&

49 –
_outm©ch
[
ouçut
] == -1 ) ) {

52 
_gø¡s
[
ouçut
] = 
öput
;

61  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

64 
ouçut_off£t
 = 
	`R™domI¡
–
_ouçuts
 - 1 );

66  
o
 = 0; o < 
_ouçuts
; ++o ) {

67 
ouçut
 = ( 
o
 + 
ouçut_off£t
 ) % 
_ouçuts
;

69 i‡–
_gø¡s
[
ouçut
] =
öput
 ) {

72 
_öm©ch
[
öput
] = 
ouçut
;

73 
_outm©ch
[
ouçut
] = 
öput
;

81 #ifde‡
DEBUG_PIM


82 i‡–
_ouçuts
 == 8 ) {

83 
cout
 << "öpuàm©ch: " << 
ídl
;

84  
i
 = 0; i < 
_öputs
; ++i ) {

85 
cout
 << " from " << 
i
 << "Åÿ" << 
_öm©ch
[i] << 
ídl
;

87 
cout
 << 
ídl
;

90 
cout
 << "output match: ";

91  
j
 = 0; j < 
_ouçuts
; ++j ) {

92 
cout
 << 
_outm©ch
[
j
] << " ";

94 
cout
 << 
ídl
;

96 
	}
}

	@src/intersim/random_utils.cpp

1 
	~"booksim.hµ
"

2 
	~"øndom_utûs.hµ
"

4 
	$R™domSìd
–
£ed
 )

6 
	`øn_°¨t
–
£ed
 );

7 
	`ønf_°¨t
–
£ed
 );

8 
	}
}

10 
	$R™domI¡
–
max
 )

13 –
	`øn_√xt
–Ë% (
max
+1) );

14 
	}
}

16 
	$R™domI¡L⁄g
( )

18  
	`øn_√xt
( );

19 
	}
}

21 
	$R™domFlﬂt
–
max
 )

24 –
	`ønf_√xt
–Ë* 
max
 );

25 
	}
}

	@src/intersim/rng.cpp

21 
	#KK
 100

	)

22 
	#LL
 37

	)

23 
	#MM
 (1L<<30Ë

	)

24 
	#mod_diff
(
x
,
y
Ë(((x)-(y))&(
MM
-1)Ë

	)

26 
	gøn_x
[
KK
];

28 #ifde‡
__STDC__


29 
	$øn_¨øy
(
Ø
[],
n
)

31 
	$øn_¨øy
(
Ø
,
n
)

32 *
Ø
;

33 
n
;

36 
i
,
j
;

37 
j
=0;j<
KK
;j++Ë
Ø
[j]=
øn_x
[j];

38 ;
j
<
n
;j++Ë
Ø
[j]=
	`mod_diff
◊a[j-
KK
],Ø[j-
LL
]);

39 
i
=0;i<
LL
;i++,
j
++Ë
øn_x
[i]=
	`mod_diff
(
Ø
[j-
KK
],aa[j-LL]);

40 ;
i
<
KK
;i++,
j
++Ë
øn_x
[i]=
	`mod_diff
(
Ø
[j-KK],øn_x[i-
LL
]);

41 
	}
}

46 
	#QUALITY
 1009

	)

47 
	gøn_¨r_buf
[
QUALITY
];

48 
	gøn_¨r_dummy
=-1, 
	gøn_¨r_°¨ãd
=-1;

49 *
	gøn_¨r_±r
=&
øn_¨r_dummy
;

51 
	#TT
 70

	)

52 
	#is_odd
(
x
Ë((x)&1Ë

	)

54 #ifde‡
__STDC__


55 
	$øn_°¨t
(
£ed
)

57 
	$øn_°¨t
(
£ed
)

58 
£ed
;

61 
t
,
j
;

62 
x
[
KK
+KK-1];

63 
ss
=(
£ed
+2)&(
MM
-2);

64 
j
=0;j<
KK
;j++) {

65 
x
[
j
]=
ss
;

66 
ss
<<=1; i‡(ss>=
MM
) ss-=MM-2;

68 
x
[1]++;

69 
ss
=
£ed
&(
MM
-1),
t
=
TT
-1;Å; ) {

70 
j
=
KK
-1;j>0;j--Ë
x
[j+j]=x[j], x[j+j-1]=0;

71 
j
=
KK
+KK-2;j>=KK;j--)

72 
x
[
j
-(
KK
-
LL
)]=
	`mod_diff
(x[j-(KK-LL)],x[j]),

73 
x
[
j
-
KK
]=
	`mod_diff
(x[j-KK],x[j]);

74 i‡(
	`is_odd
(
ss
)) {

75 
j
=
KK
;j>0;j--Ë
x
[j]=x[j-1];

76 
x
[0]=x[
KK
];

77 
x
[
LL
]=
	`mod_diff
(x[LL],x[
KK
]);

79 i‡(
ss
) ss>>=1;

80 
t
--;

82 
j
=0;j<
LL
;j++Ë
øn_x
[j+
KK
-LL]=
x
[j];

83 ;
j
<
KK
;j++Ë
øn_x
[j-
LL
]=
x
[j];

84 
j
=0;j<10;j++Ë
	`øn_¨øy
(
x
,
KK
+KK-1);

85 
øn_¨r_±r
=&
øn_¨r_°¨ãd
;

86 
	}
}

88 
	#øn_¨r_√xt
(Ë(*
øn_¨r_±r
>=0? *øn_¨r_±r++: 
	`øn_¨r_cy˛e
())

	)

89 
	$øn_¨r_cy˛e
()

91 i‡(
øn_¨r_±r
==&
øn_¨r_dummy
)

92 
	`øn_°¨t
(314159L);

93 
	`øn_¨øy
(
øn_¨r_buf
,
QUALITY
);

94 
øn_¨r_buf
[100]=-1;

95 
øn_¨r_±r
=
øn_¨r_buf
+1;

96  
øn_¨r_buf
[0];

97 
	}
}

99 
	~<°dio.h
>

100 
	$maö
()

102 
m
; 
a
[2009];

103 
	`øn_°¨t
(310952L);

104 
m
=0;m<=2009;m++Ë
	`øn_¨øy
(
a
,1009);

105 
	`¥ötf
("%ld\n", 
a
[0]);

106 
	`øn_°¨t
(310952L);

107 
m
=0;m<=1009;m++Ë
	`øn_¨øy
(
a
,2009);

108 
	`¥ötf
("%ld\n", 
a
[0]);

110 
	}
}

	@src/intersim/rng_double.cpp

21 
	#KK
 100

	)

22 
	#LL
 37

	)

23 
	#mod_sum
(
x
,
y
Ë(((x)+(y))-()((x)+(y))Ë

	)

25 
	gøn_u
[
KK
];

27 #ifde‡
__STDC__


28 
	$ønf_¨øy
(
Ø
[], 
n
)

30 
	$ønf_¨øy
(
Ø
,
n
)

31 *
Ø
;

32 
n
;

35 
i
,
j
;

36 
j
=0;j<
KK
;j++Ë
Ø
[j]=
øn_u
[j];

37 ;
j
<
n
;j++Ë
Ø
[j]=
	`mod_sum
◊a[j-
KK
],Ø[j-
LL
]);

38 
i
=0;i<
LL
;i++,
j
++Ë
øn_u
[i]=
	`mod_sum
(
Ø
[j-
KK
],aa[j-LL]);

39 ;
i
<
KK
;i++,
j
++Ë
øn_u
[i]=
	`mod_sum
(
Ø
[j-KK],øn_u[i-
LL
]);

40 
	}
}

45 
	#QUALITY
 1009

	)

46 
	gønf_¨r_buf
[
QUALITY
];

47 
	gønf_¨r_dummy
=-1.0, 
	gønf_¨r_°¨ãd
=-1.0;

48 *
	gønf_¨r_±r
=&
ønf_¨r_dummy
;

50 
	#TT
 70

	)

51 
	#is_odd
(
s
Ë((s)&1)

	)

53 #ifde‡
__STDC__


54 
	$ønf_°¨t
(
£ed
)

56 
	$ønf_°¨t
(
£ed
)

57 
£ed
;

60 
t
,
s
,
j
;

61 
u
[
KK
+KK-1];

62 
uÕ
=(1.0/(1L<<30))/(1L<<22);

63 
ss
=2.0*
uÕ
*((
£ed
&0x3fffffff)+2);

65 
j
=0;j<
KK
;j++) {

66 
u
[
j
]=
ss
;

67 
ss
+=ss; i‡(ss>=1.0Ëss-=1.0-2*
uÕ
;

69 
u
[1]+=
uÕ
;

70 
s
=
£ed
&0x3fffffff,
t
=
TT
-1;Å; ) {

71 
j
=
KK
-1;j>0;j--)

72 
u
[
j
+j]=u[j],u[j+j-1]=0.0;

73 
j
=
KK
+KK-2;j>=KK;j--) {

74 
u
[
j
-(
KK
-
LL
)]=
	`mod_sum
(u[j-(KK-LL)],u[j]);

75 
u
[
j
-
KK
]=
	`mod_sum
(u[j-KK],u[j]);

77 i‡(
	`is_odd
(
s
)) {

78 
j
=
KK
;j>0;j--Ë
u
[j]=u[j-1];

79 
u
[0]=u[
KK
];

80 
u
[
LL
]=
	`mod_sum
(u[LL],u[
KK
]);

82 i‡(
s
) s>>=1;

83 
t
--;

85 
j
=0;j<
LL
;j++Ë
øn_u
[j+
KK
-LL]=
u
[j];

86 ;
j
<
KK
;j++Ë
øn_u
[j-
LL
]=
u
[j];

87 
j
=0;j<10;j++Ë
	`ønf_¨øy
(
u
,
KK
+KK-1);

88 
ønf_¨r_±r
=&
ønf_¨r_°¨ãd
;

89 
	}
}

91 
	#ønf_¨r_√xt
(Ë(*
ønf_¨r_±r
>=0? *ønf_¨r_±r++: 
	`ønf_¨r_cy˛e
())

	)

92 
	$ønf_¨r_cy˛e
()

94 i‡(
ønf_¨r_±r
==&
ønf_¨r_dummy
)

95 
	`ønf_°¨t
(314159L);

96 
	`ønf_¨øy
(
ønf_¨r_buf
,
QUALITY
);

97 
ønf_¨r_buf
[100]=-1;

98 
ønf_¨r_±r
=
ønf_¨r_buf
+1;

99  
ønf_¨r_buf
[0];

100 
	}
}

102 
	~<°dio.h
>

103 
	$maö
()

105 
m
; 
a
[2009];

106 
	`ønf_°¨t
(310952);

107 
m
=0;m<2009;m++Ë
	`ønf_¨øy
(
a
,1009);

108 
	`¥ötf
("%.20f\n", 
øn_u
[0]);

110 
	`ønf_°¨t
(310952);

111 
m
=0;m<1009;m++Ë
	`ønf_¨øy
(
a
,2009);

112 
	`¥ötf
("%.20f\n", 
øn_u
[0]);

114 
	}
}

	@src/intersim/rng_double_wrapper.cpp

1 
	~"∫g.hµ
"

3 
	#maö
 
∫g_doubÀ_maö


	)

4 
	~"∫g_doubÀ.˝p
"

6 
	$ønf_√xt
( )

8  
	`ønf_¨r_√xt
( );

9 
	}
}

	@src/intersim/rng_wrapper.cpp

1 
	~"∫g.hµ
"

3 
	#maö
 
∫g_maö


	)

4 
	~"∫g.˝p
"

6 
	$øn_√xt
( )

8  
	`øn_¨r_√xt
( );

9 
	}
}

	@src/intersim/routefunc.cpp

1 
	~"booksim.hµ
"

3 
	~<m≠
>

4 
	~<°dlib.h
>

5 
	~<as£π.h
>

7 
	~"rouãfunc.hµ
"

8 
	~"kncube.hµ
"

9 
	~"øndom_utûs.hµ
"

11 
	gm≠
<
	g°rög
, 
	gtRoutögFun˘i⁄
> 
	ggRoutögFun˘i⁄M≠
;

15 
	ggNumVCS
;

21 
	$sögÀrf
–c⁄° 
Rouãr
 *, c⁄° 
Flô
 *
f
, , 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

23 
ouçuts
->
	`CÀ¨
( );

24 
ouçuts
->
	`Add
–
f
->
de°
, f->de° % 
gNumVCS
 );

25 
	}
}

29 
	$d‹_√xt_mesh
–
cur
, 
de°
 )

31 
dim_À·
;

32 
out_p‹t
;

34  
dim_À·
 = 0; dim_À· < 
gN
; ++dim_left ) {

35 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

38 
cur
 /
gK
; 
de°
 /= gK;

41 i‡–
dim_À·
 < 
gN
 ) {

42 
cur
 %
gK
; 
de°
 %= gK;

44 i‡–
cur
 < 
de°
 ) {

45 
out_p‹t
 = 2*
dim_À·
;

47 
out_p‹t
 = 2*
dim_À·
 + 1;

50 
out_p‹t
 = 2*
gN
;

53  
out_p‹t
;

54 
	}
}

58 
	$d‹_√xt_t‹us
–
cur
, 
de°
, 
ö_p‹t
,

59 *
out_p‹t
, *
∑πôi⁄
,

60 
boﬁ
 
bÆ™˚
 = 
Ál£
 )

62 
dim_À·
;

63 
dú
;

64 
di°2
;

66  
dim_À·
 = 0; dim_À· < 
gN
; ++dim_left ) {

67 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

70 
cur
 /
gK
; 
de°
 /= gK;

73 i‡–
dim_À·
 < 
gN
 ) {

75 i‡–(
ö_p‹t
/2Ë!
dim_À·
 ) {

78 
cur
 %
gK
; 
de°
 %= gK;

79 
di°2
 = 
gK
 - 2 * ( ( 
de°
 - 
cur
 + gK ) % gK );

81 i‡––
di°2
 > 0 ) ||

82 ––
di°2
 =0 ) && ( 
	`R™domI¡
( 1 ) ) ) ) {

83 *
out_p‹t
 = 2*
dim_À·
;

84 
dú
 = 0;

86 *
out_p‹t
 = 2*
dim_À·
 + 1;

87 
dú
 = 1;

90 i‡–
bÆ™˚
 ) {

96 i‡–––
dú
 =0 ) && ( 
cur
 > 
de°
 ) ) ||

97 ––
dú
 =1 ) && ( 
cur
 < 
de°
 ) ) ) {

98 *
∑πôi⁄
 = 1;

99 } i‡–––
dú
 =0 ) && ( 
cur
 <(
gK
-1)/2 ) && ( 
de°
 > (gK-1)/2 ) ) ||

100 ––
dú
 =1 ) && ( 
cur
 > (
gK
-1)/2 ) && ( 
de°
 <= (gK-1)/2 ) ) ) {

101 *
∑πôi⁄
 = 0;

103 *
∑πôi⁄
 = 
	`R™domI¡
( 1 );

108 i‡–––
dú
 =0 ) && ( 
cur
 > 
de°
 ) ) ||

109 ––
dú
 =1 ) && ( 
de°
 < 
cur
 ) ) ) {

110 *
∑πôi⁄
 = 1;

112 *
∑πôi⁄
 = 0;

118 *
out_p‹t
 = 
ö_p‹t
 ^ 0x1;

122 *
out_p‹t
 = 2*
gN
;

124 
	}
}

128 
	$dim_‹dî_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

130 
out_p‹t
;

132 
ouçuts
->
	`CÀ¨
( );

134 i‡–
öje˘
 ) {

135 
ouçuts
->
	`AddR™ge
–0, 0, 
gNumVCS
 - 1 );

137 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
de°
 );

139 i‡–
f
->
w©ch
 ) {

140 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

141 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

142 << 0 << "," << 
gNumVCS
 - 1 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

145 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 0, 
gNumVCS
 - 1 );

147 
	}
}

151 
	$dim_‹dî_ni_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

153 
out_p‹t
;

154 
vcs_≥r_de°
 = 
gNumVCS
 / 
gNodes
;

156 
ouçuts
->
	`CÀ¨
( );

157 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
de°
 );

159 i‡–
f
->
w©ch
 ) {

160 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

161 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

162 << 
f
->
de°
*
vcs_≥r_de°
 << "," << (f->dest+1)*vcs_per_dest - 1

163 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

166 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
f
->
de°
*
vcs_≥r_de°
, (f->dest+1)*vcs_per_dest - 1 );

167 
	}
}

173 
	$ønd_mö_öå_mesh
–
§c
, 
de°
 )

175 
di°
;

177 
ötm
 = 0;

178 
off£t
 = 1;

180  
n
 = 0;Ç < 
gN
; ++n ) {

181 
di°
 = ( 
de°
 % 
gK
 ) - ( 
§c
 % gK );

183 i‡–
di°
 > 0 ) {

184 
ötm
 +
off£t
 * ( ( 
§c
 % 
gK
 ) + 
	`R™domI¡
–
di°
 ) );

186 
ötm
 +
off£t
 * ( ( 
de°
 % 
gK
 ) + 
	`R™domI¡
–-
di°
 ) );

189 
off£t
 *
gK
;

190 
de°
 /
gK
; 
§c
 /= gK;

193  
ötm
;

194 
	}
}

198 
	$romm_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

200 
out_p‹t
;

201 
vc_mö
, 
vc_max
;

203 
ouçuts
->
	`CÀ¨
( );

205 i‡–
ö_ch™√l
 =2*
gN
 ) {

206 
f
->
ph
 = 1;

207 
f
->
ötm
 = 
	`ønd_mö_öå_mesh
–f->
§c
, f->
de°
 );

210 i‡––
f
->
ph
 =1 ) && ( 
r
->
	`GëID
–Ë=f->
ötm
 ) ) {

211 
f
->
ph
 = 2;

214 i‡–
f
->
ph
 == 1 ) {

215 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
ötm
 );

216 
vc_mö
 = 0;

217 
vc_max
 = 
gNumVCS
/2 - 1;

219 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
de°
 );

220 
vc_mö
 = 
gNumVCS
/2;

221 
vc_max
 = 
gNumVCS
 - 1;

224 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
vc_mö
, 
vc_max
 );

225 
	}
}

229 
	$romm_ni_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

231 
out_p‹t
;

232 
vcs_≥r_de°
 = 
gNumVCS
 / 
gNodes
;

234 
ouçuts
->
	`CÀ¨
( );

236 i‡–
ö_ch™√l
 =2*
gN
 ) {

237 
f
->
ph
 = 1;

238 
f
->
ötm
 = 
	`ønd_mö_öå_mesh
–f->
§c
, f->
de°
 );

241 i‡––
f
->
ph
 =1 ) && ( 
r
->
	`GëID
–Ë=f->
ötm
 ) ) {

242 
f
->
ph
 = 2;

245 i‡–
f
->
ph
 == 1 ) {

246 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
ötm
 );

248 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
de°
 );

251 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
f
->
de°
*
vcs_≥r_de°
, (f->dest+1)*vcs_per_dest - 1 );

252 
	}
}

256 
	$mö_ad≠t_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

258 
out_p‹t
;

259 
cur
, 
de°
;

260 
ö_vc
;

262 
ouçuts
->
	`CÀ¨
( );

264 i‡–
ö_ch™√l
 =2*
gN
 ) {

265 
ö_vc
 = 
gNumVCS
 - 1;

267 
ö_vc
 = 
f
->
vc
;

271 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
de°
 );

272 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 0, 0, 0 );

274 i‡–
f
->
w©ch
 ) {

275 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

276 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

277 << 0 << "," << 
gNumVCS
 - 1 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

280 i‡–
ö_vc
 != 0 ) {

282 
cur
 = 
r
->
	`GëID
–); 
de°
 = 
f
->dest;

284  
n
 = 0;Ç < 
gN
; ++n ) {

285 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

287 i‡––
cur
 % 
gK
 ) < ( 
de°
 % gK ) ) {

288 
ouçuts
->
	`AddR™ge
–2*
n
, 1, 
gNumVCS
 - 1, 1 );

290 
ouçuts
->
	`AddR™ge
–2*
n
 + 1, 1, 
gNumVCS
 - 1, 1 );

293 
cur
 /
gK
;

294 
de°
 /
gK
;

297 
	}
}

301 
	$∂™¨_ad≠t_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

303 
cur
, 
de°
;

304 
vc_mu…
;

305 
vc_mö
, 
vc_max
;

306 
d1_mö_c
;

307 
ö_vc
;

308 
n
;

310 
boﬁ
 
ö¸ó£
;

311 
boﬁ
 
Áu…
;

312 
boﬁ
 
©edge
;

314 
ouçuts
->
	`CÀ¨
( );

316 
cur
 = 
r
->
	`GëID
( );

317 
de°
 = 
f
->dest;

318 
ö_vc
 = 
f
->
vc
;

319 
vc_mu…
 = 
gNumVCS
 / 3;

321 i‡–
cur
 !
de°
 ) {

328  
n
 = 0;Ç < 
gN
; ++n ) {

329 i‡–––
cur
 % 
gK
 ) !–
de°
 % gK ) ) &&

330 !––
ö_ch™√l
/2 == 0 ) &&

331 –
n
 == 0 ) &&

332 –
ö_vc
 < 2*
vc_mu…
 ) ) ) {

336 
cur
 /
gK
;

337 
de°
 /
gK
;

340 
	`as£π
–
n
 < 
gN
 );

342 i‡–
f
->
w©ch
 ) {

343 
cout
 << "PLANAR ADAPTIVE: flô " << 
f
->
id


344 << " i¿ad≠tivê∂™ê" << 
n
 << "áà" << 
r
->
	`GëID
–Ë<< 
ídl
;

350 i‡––
cur
 % 
gK
 ) < ( 
de°
 % gK ) ) {

351 
ö¸ó£
 = 
åue
;

352 i‡–!
r
->
	`IsFau…yOuçut
–2*
n
 ) ) {

353 
ouçuts
->
	`AddR™ge
–2*
n
, 2*
vc_mu…
, 
gNumVCS
 - 1 );

354 
Áu…
 = 
Ál£
;

356 i‡–
f
->
w©ch
 ) {

357 
cout
 << "PLANAR ADAPTIVE: in¸ósög i¿dimísi⁄ " << 
n
 << 
ídl
;

360 
Áu…
 = 
åue
;

363 
ö¸ó£
 = 
Ál£
;

364 i‡–!
r
->
	`IsFau…yOuçut
–2*
n
 + 1 ) ) {

365 
ouçuts
->
	`AddR™ge
–2*
n
 + 1, 2*
vc_mu…
, 
gNumVCS
 - 1 );

366 
Áu…
 = 
Ál£
;

368 i‡–
f
->
w©ch
 ) {

369 
cout
 << "PLANAR ADAPTIVE: de¸ósög i¿dimísi⁄ " << 
n
 << 
ídl
;

372 
Áu…
 = 
åue
;

376 
n
 = (Ç + 1 ) % 
gN
;

377 
cur
 /
gK
;

378 
de°
 /
gK
;

380 i‡–
ö¸ó£
 ) {

381 
vc_mö
 = 0;

382 
vc_max
 = 
vc_mu…
 - 1;

384 
vc_mö
 = 
vc_mu…
;

385 
vc_max
 = 2*
vc_mu…
 - 1;

388 i‡––
cur
 % 
gK
 ) < ( 
de°
 % gK ) ) {

389 
d1_mö_c
 = 2*
n
;

390 } i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

391 
d1_mö_c
 = 2*
n
 + 1;

393 
d1_mö_c
 = -1;

400 i‡–
d1_mö_c
 =
ö_ch™√l
 ) {

401 i‡–
Áu…
 ) {

402 
d1_mö_c
 = 
ö_ch™√l
 ^ 1;

404 
d1_mö_c
 = -1;

407 i‡–
f
->
w©ch
 ) {

408 
cout
 << "PLANAR ADAPTIVE:ávoidög 180 i¿dimísi⁄ " << 
n
 << 
ídl
;

412 i‡–
d1_mö_c
 != -1 ) {

413 i‡–!
r
->
	`IsFau…yOuçut
–
d1_mö_c
 ) ) {

414 
ouçuts
->
	`AddR™ge
–
d1_mö_c
, 
vc_mö
, 
vc_max
 );

415 } i‡–
Áu…
 ) {

417 
r
->
	`Eº‹
( "There seemÅo be faults in d_iánd d_{i+1}" );

419 } i‡–
Áu…
 ) {

420 i‡–
cur
 % 
gK
 == 0 ) {

421 
d1_mö_c
 = 2*
n
;

422 
©edge
 = 
åue
;

423 } i‡–
cur
 % 
gK
 == gK - 1 ) {

424 
d1_mö_c
 = 2*
n
 + 1;

425 
©edge
 = 
åue
;

427 
d1_mö_c
 = 2*
n
 + 
	`R™domI¡
( 1 );

429 i‡–
d1_mö_c
 =
ö_ch™√l
 ) {

430 
d1_mö_c
 = 
ö_ch™√l
 ^ 1;

432 
©edge
 = 
Ál£
;

435 i‡–!
r
->
	`IsFau…yOuçut
–
d1_mö_c
 ) ) {

436 
ouçuts
->
	`AddR™ge
–
d1_mö_c
, 
vc_mö
, 
vc_max
 );

437 } i‡–!
©edge
 && !
r
->
	`IsFau…yOuçut
–
d1_mö_c
 ^ 1 ) ) {

438 
ouçuts
->
	`AddR™ge
–
d1_mö_c
 ^ 1, 
vc_mö
, 
vc_max
 );

441 
r
->
	`Eº‹
( "There seemÅo be faults in d_iánd d_{i+1}" );

445 
ouçuts
->
	`AddR™ge
–2*
gN
, 0, 
gNumVCS
 - 1 );

447 
	}
}

451 
	$limôed_ad≠t_mesh_ﬁd
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

453 
ö_vc
;

454 
ö_dim
;

456 
mö_p‹t
;

458 
boﬁ
 
d‹_dim
;

459 
boﬁ
 
equÆ
;

461 
cur
, 
de°
;

463 
ouçuts
->
	`CÀ¨
( );

465 i‡–
öje˘
 ) {

466 
ouçuts
->
	`AddR™ge
–0, 0, 
gNumVCS
 - 1 );

467 
f
->
ph
 = 0;

470 
cur
 = 
r
->
	`GëID
–); 
de°
 = 
f
->dest;

471 i‡–
cur
 !
de°
 ) {

473 i‡–
f
->
ph
 == 0 ) {

474 
f
->
ph
 = 1;

476 
ö_vc
 = 0;

477 
ö_dim
 = 0;

479 
ö_vc
 = 
f
->
vc
;

480 
ö_dim
 = 
ö_ch™√l
/2;

484 
d‹_dim
 = 
åue
;

486  
n
 = 0;Ç < 
gN
; ++n ) {

487 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

488 i‡––
cur
 % 
gK
 ) < ( 
de°
 % gK ) ) {

489 
mö_p‹t
 = 2*
n
;

491 
mö_p‹t
 = 2*
n
 + 1;

494 i‡–
d‹_dim
 ) {

496 
ouçuts
->
	`AddR™ge
–
mö_p‹t
, 
gNumVCS
 - 1, gNumVCS - 1, 0 );

497 
d‹_dim
 = 
Ál£
;

500 
equÆ
 = 
Ál£
;

502 
equÆ
 = 
åue
;

503 
mö_p‹t
 = 2*
n
;

506 i‡–
ö_vc
 < 
gNumVCS
 - 1 ) {

507 i‡–
n
 < 
ö_dim
 ) {

509 i‡–
ö_vc
 =
gNumVCS
 - 2 ) {

510 
ouçuts
->
	`AddR™ge
–
mö_p‹t
, 
ö_vc
 + 1, in_v¯+ 1, 
equÆ
 ? 1 : 2 );

512 
ouçuts
->
	`AddR™ge
–
mö_p‹t
, 
ö_vc
 + 1, 
gNumVCS
 - 2, 
equÆ
 ? 1 : 2 );

516 i‡–
ö_vc
 < 
gNumVCS
 - 2 ) {

517 i‡–
ö_vc
 =
gNumVCS
 - 3 ) {

518 
ouçuts
->
	`AddR™ge
–
mö_p‹t
 ^ 0x1, 
ö_vc
 + 1, in_vc + 1, 1 );

520 
ouçuts
->
	`AddR™ge
–
mö_p‹t
 ^ 0x1, 
ö_vc
 + 1, 
gNumVCS
 - 3, 1 );

523 } i‡–
n
 =
ö_dim
 ) {

524 i‡–!
equÆ
 ) {

526 
ouçuts
->
	`AddR™ge
–
mö_p‹t
, 
ö_vc
, 
gNumVCS
 - 2, 4 );

530 
ouçuts
->
	`AddR™ge
–
mö_p‹t
, 
ö_vc
, 
gNumVCS
 - 2, 
equÆ
 ? 1 : 3 );

532 i‡–
ö_vc
 < 
gNumVCS
 - 2 ) {

533 
ouçuts
->
	`AddR™ge
–
mö_p‹t
 ^ 0x1, 
ö_vc
, 
gNumVCS
 - 2, 1 );

538 
cur
 /
gK
;

539 
de°
 /
gK
;

542 
ouçuts
->
	`AddR™ge
–2*
gN
, 0, 
gNumVCS
 - 1 );

545 
	}
}

547 
	$limôed_ad≠t_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

549 
mö_p‹t
;

551 
cur
, 
de°
;

553 
ouçuts
->
	`CÀ¨
( );

555 i‡–
öje˘
 ) {

556 
ouçuts
->
	`AddR™ge
–0, 0, 
gNumVCS
 - 2 );

557 
f
->
dr
 = 0;

559 
cur
 = 
r
->
	`GëID
–); 
de°
 = 
f
->dest;

561 i‡–
cur
 !
de°
 ) {

562 i‡––
f
->
vc
 !
gNumVCS
 - 1 ) &&

563 –
f
->
dr
 !
gNumVCS
 - 2 ) ) {

565  
n
 = 0;Ç < 
gN
; ++n ) {

566 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

567 i‡––
cur
 % 
gK
 ) < ( 
de°
 % gK ) ) {

568 
mö_p‹t
 = 2*
n
;

570 
mö_p‹t
 = 2*
n
 + 1;

574 
ouçuts
->
	`AddR™ge
–
mö_p‹t
, 0, 
gNumVCS
 - 2, 2 );

577 
ouçuts
->
	`AddR™ge
–
mö_p‹t
 ^ 0x1, 0, 
gNumVCS
 - 2, 1 );

580 
ouçuts
->
	`AddR™ge
–2*
n
, 0, 
gNumVCS
 - 2, 1 );

581 
ouçuts
->
	`AddR™ge
–2*
n
+1, 0, 
gNumVCS
 - 2, 1 );

584 
cur
 /
gK
;

585 
de°
 /
gK
;

589 
ouçuts
->
	`AddR™ge
–
	`d‹_√xt_mesh
–
cur
, 
de°
 ),

590 
gNumVCS
 - 1, gNumVCS - 1, 0 );

594 
ouçuts
->
	`AddR™ge
–2*
gN
, 0, 
gNumVCS
 - 1 );

597 
	}
}

601 
	$vÆü¡_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

603 
out_p‹t
;

604 
vc_mö
, 
vc_max
;

606 
ouçuts
->
	`CÀ¨
( );

609 i‡–
ö_ch™√l
 =2*
gN
 ) {

610 
f
->
ph
 = 1;

611 
f
->
ötm
 = 
	`R™domI¡
–
gNodes
 - 1 );

614 i‡––
f
->
ph
 =1 ) && ( 
r
->
	`GëID
–Ë=f->
ötm
 ) ) {

615 
f
->
ph
 = 2;

618 i‡–
f
->
ph
 == 1 ) {

619 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
ötm
 );

620 
vc_mö
 = 0;

621 
vc_max
 = 
gNumVCS
/2 - 1;

623 
out_p‹t
 = 
	`d‹_√xt_mesh
–
r
->
	`GëID
–), 
f
->
de°
 );

624 
vc_mö
 = 
gNumVCS
/2;

625 
vc_max
 = 
gNumVCS
 - 1;

628 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
vc_mö
, 
vc_max
 );

629 
	}
}

633 
	$vÆü¡_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

635 
out_p‹t
;

636 
vc_mö
, 
vc_max
;

638 
ouçuts
->
	`CÀ¨
( );

640 i‡–
ö_ch™√l
 =2*
gN
 ) {

641 
f
->
ph
 = 1;

642 
f
->
ötm
 = 
	`R™domI¡
–
gNodes
 - 1 );

645 i‡––
f
->
ph
 =1 ) && ( 
r
->
	`GëID
–Ë=f->
ötm
 ) ) {

646 
f
->
ph
 = 2;

647 
ö_ch™√l
 = 2*
gN
;

650 i‡–
f
->
ph
 == 1 ) {

651 
	`d‹_√xt_t‹us
–
r
->
	`GëID
–), 
f
->
ötm
, 
ö_ch™√l
,

652 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

654 i‡–
f
->
rög_∑r
 == 0 ) {

655 
vc_mö
 = 0;

656 
vc_max
 = 
gNumVCS
/4 - 1;

658 
vc_mö
 = 
gNumVCS
/4;

659 
vc_max
 = 
gNumVCS
/2 - 1;

662 
	`d‹_√xt_t‹us
–
r
->
	`GëID
–), 
f
->
de°
, 
ö_ch™√l
,

663 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

665 i‡–
f
->
rög_∑r
 == 0 ) {

666 
vc_mö
 = 
gNumVCS
/2;

667 
vc_max
 = (3*
gNumVCS
)/4 - 1;

669 
vc_mö
 = (3*
gNumVCS
)/4;

670 
vc_max
 = 
gNumVCS
 - 1;

674 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
vc_mö
, 
vc_max
 );

675 
	}
}

679 
	$vÆü¡_ni_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
,

680 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

682 
out_p‹t
;

683 
vc_mö
, 
vc_max
;

685 
ouçuts
->
	`CÀ¨
( );

687 i‡–
ö_ch™√l
 =2*
gN
 ) {

688 
f
->
ph
 = 1;

689 
f
->
ötm
 = 
	`R™domI¡
–
gNodes
 - 1 );

692 i‡––
f
->
ph
 =1 ) && ( 
r
->
	`GëID
–Ë=f->
ötm
 ) ) {

693 
f
->
ph
 = 2;

694 
ö_ch™√l
 = 2*
gN
;

697 i‡–
f
->
ph
 == 1 ) {

698 
	`d‹_√xt_t‹us
–
r
->
	`GëID
–), 
f
->
ötm
, 
ö_ch™√l
,

699 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

701 i‡–
f
->
rög_∑r
 == 0 ) {

702 
vc_mö
 = 
f
->
de°
;

703 
vc_max
 = 
f
->
de°
;

705 
vc_mö
 = 
f
->
de°
 + 
gNodes
;

706 
vc_max
 = 
f
->
de°
 + 
gNodes
;

710 
	`d‹_√xt_t‹us
–
r
->
	`GëID
–), 
f
->
de°
, 
ö_ch™√l
,

711 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

713 i‡–
f
->
rög_∑r
 == 0 ) {

714 
vc_mö
 = 
f
->
de°
 + 2*
gNodes
;

715 
vc_max
 = 
f
->
de°
 + 2*
gNodes
;

717 
vc_mö
 = 
f
->
de°
 + 3*
gNodes
;

718 
vc_max
 = 
f
->
de°
 + 3*
gNodes
;

722 i‡–
f
->
w©ch
 ) {

723 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

724 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

725 << 
vc_mö
 << "," << 
vc_max


726 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

729 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
vc_mö
, 
vc_max
 );

730 
	}
}

734 
	$dim_‹dî_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
,

735 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

737 
cur
;

738 
de°
;

740 
out_p‹t
;

741 
vc_mö
, 
vc_max
;

743 
ouçuts
->
	`CÀ¨
( );

745 
cur
 = 
r
->
	`GëID
( );

746 
de°
 = 
f
->dest;

748 
	`d‹_√xt_t‹us
–
cur
, 
de°
, 
ö_ch™√l
,

749 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

751 i‡–
f
->
rög_∑r
 == 0 ) {

752 
vc_mö
 = 0;

753 
vc_max
 = 
gNumVCS
/2 - 1;

755 
vc_mö
 = 
gNumVCS
/2;

756 
vc_max
 = 
gNumVCS
 - 1;

759 i‡–
f
->
w©ch
 ) {

760 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

761 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

762 << 
vc_mö
 << "," << 
vc_max
 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

765 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
vc_mö
, 
vc_max
 );

766 
	}
}

770 
	$dim_‹dî_ni_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
,

771 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

773 
cur
;

774 
de°
;

776 
out_p‹t
;

777 
vcs_≥r_de°
 = 
gNumVCS
 / 
gNodes
;

779 
ouçuts
->
	`CÀ¨
( );

781 
cur
 = 
r
->
	`GëID
( );

782 
de°
 = 
f
->dest;

784 
ouçuts
->
	`CÀ¨
( );

785 
	`d‹_√xt_t‹us
–
cur
, 
de°
, 
ö_ch™√l
,

786 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

788 i‡–
f
->
w©ch
 ) {

789 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

790 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

791 << 
f
->
de°
*
vcs_≥r_de°
 << "," << (f->dest+1)*vcs_per_dest - 1

792 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

795 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
f
->
de°
*
vcs_≥r_de°
, (f->dest+1)*vcs_per_dest - 1 );

796 
	}
}

800 
	$dim_‹dî_bÆ_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
,

801 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

803 
cur
;

804 
de°
;

806 
out_p‹t
;

807 
vc_mö
, 
vc_max
;

809 
ouçuts
->
	`CÀ¨
( );

811 
cur
 = 
r
->
	`GëID
( );

812 
de°
 = 
f
->dest;

814 
	`d‹_√xt_t‹us
–
cur
, 
de°
, 
ö_ch™√l
,

815 &
out_p‹t
, &
f
->
rög_∑r
, 
åue
 );

817 i‡–
f
->
rög_∑r
 == 0 ) {

818 
vc_mö
 = 0;

819 
vc_max
 = 
gNumVCS
/2 - 1;

821 
vc_mö
 = 
gNumVCS
/2;

822 
vc_max
 = 
gNumVCS
 - 1;

825 i‡–
f
->
w©ch
 ) {

826 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

827 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

828 << 
vc_mö
 << "," << 
vc_max
 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

831 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 
vc_mö
, 
vc_max
 );

832 
	}
}

836 
	$mö_ad≠t_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

838 
cur
, 
de°
, 
di°2
;

839 
ö_vc
;

840 
out_p‹t
;

842 
ouçuts
->
	`CÀ¨
( );

844 i‡–
ö_ch™√l
 =2*
gN
 ) {

845 
ö_vc
 = 
gNumVCS
 - 1;

847 
ö_vc
 = 
f
->
vc
;

850 i‡–
ö_vc
 > 1 ) {

852 
cur
 = 
r
->
	`GëID
–); 
de°
 = 
f
->dest;

854  
n
 = 0;Ç < 
gN
; ++n ) {

855 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

856 
di°2
 = 
gK
 - 2 * ( ( ( 
de°
 % gK ) - ( 
cur
 % gK ) + gK ) % gK );

858 i‡–
di°2
 > 0 ) {

860 
ouçuts
->
	`AddR™ge
–2*
n
, 3, 3, 1 );

862 
ouçuts
->
	`AddR™ge
–2*
n
 + 1, 3, 3, 1 );

866 
cur
 /
gK
;

867 
de°
 /
gK
;

873 
	`d‹_√xt_t‹us
–
r
->
	`GëID
–), 
f
->
de°
, 2*
gN
,

874 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

877 
	`d‹_√xt_t‹us
–
r
->
	`GëID
–), 
f
->
de°
, 
ö_ch™√l
,

878 &
out_p‹t
, &
f
->
rög_∑r
, 
Ál£
 );

881 i‡–
f
->
rög_∑r
 == 0 ) {

882 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 0, 0, 0 );

884 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 1, 1, 0 );

887 i‡–
f
->
w©ch
 ) {

888 
cout
 << "Êô " << 
f
->
id
 << " (" << f << "Ë© " << 
r
->
	`GëID
( ) << " destinedÅo "

889 << 
f
->
de°
 << " usög ch™√»" << 
out_p‹t
 << ", vcÑange = ["

890 << 0 << "," << 
gNumVCS
 - 1 << "] (ö_ch™√»i†" << 
ö_ch™√l
 << ")" << 
ídl
;

894 
	}
}

898 
	$de°_èg
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
, 
ö_ch™√l
,

899 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

901 
ouçuts
->
	`CÀ¨
( );

903 
°age
 = ( 
r
->
	`GëID
–Ë* 
gK
 ) / 
gNodes
;

904 
de°
 = 
f
->dest;

906  
°age
 < ( 
gN
 - 1 ) ) {

907 
de°
 /
gK
;

908 ++
°age
;

911 
out_p‹t
 = 
de°
 % 
gK
;

913 
ouçuts
->
	`AddR™ge
–
out_p‹t
, 0, 
gNumVCS
 - 1 );

914 
	}
}

918 
	$chaos_t‹us
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
,

919 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

921 
cur
, 
de°
;

922 
di°2
;

924 
ouçuts
->
	`CÀ¨
( );

926 
cur
 = 
r
->
	`GëID
–); 
de°
 = 
f
->dest;

928 i‡–
cur
 !
de°
 ) {

929  
n
 = 0;Ç < 
gN
; ++n ) {

931 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

932 
di°2
 = 
gK
 - 2 * ( ( ( 
de°
 % gK ) - ( 
cur
 % gK ) + gK ) % gK );

934 i‡–
di°2
 >= 0 ) {

935 
ouçuts
->
	`AddR™ge
–2*
n
, 0, 0 );

938 i‡–
di°2
 <= 0 ) {

939 
ouçuts
->
	`AddR™ge
–2*
n
 + 1, 0, 0 );

943 
cur
 /
gK
;

944 
de°
 /
gK
;

947 
ouçuts
->
	`AddR™ge
–2*
gN
, 0, 0 );

949 
	}
}

954 
	$chaos_mesh
–c⁄° 
Rouãr
 *
r
, c⁄° 
Flô
 *
f
,

955 
ö_ch™√l
, 
OuçutSë
 *
ouçuts
, 
boﬁ
 
öje˘
 )

957 
cur
, 
de°
;

959 
ouçuts
->
	`CÀ¨
( );

961 
cur
 = 
r
->
	`GëID
–); 
de°
 = 
f
->dest;

963 i‡–
cur
 !
de°
 ) {

964  
n
 = 0;Ç < 
gN
; ++n ) {

965 i‡––
cur
 % 
gK
 ) !–
de°
 % gK ) ) {

967 i‡––
cur
 % 
gK
 ) < ( 
de°
 % gK ) ) {

968 
ouçuts
->
	`AddR™ge
–2*
n
, 0, 0 );

970 
ouçuts
->
	`AddR™ge
–2*
n
 + 1, 0, 0 );

973 
cur
 /
gK
;

974 
de°
 /
gK
;

977 
ouçuts
->
	`AddR™ge
–2*
gN
, 0, 0 );

979 
	}
}

983 
	$InôülizeRoutögM≠
( )

987 
gRoutögFun˘i⁄M≠
["sögÀ_sögÀ"] = &
sögÀrf
;

989 
gRoutögFun˘i⁄M≠
["dim_‹dî_mesh"] = &
dim_‹dî_mesh
;

990 
gRoutögFun˘i⁄M≠
["dim_‹dî_ni_mesh"] = &
dim_‹dî_ni_mesh
;

991 
gRoutögFun˘i⁄M≠
["dim_‹dî_t‹us"] = &
dim_‹dî_t‹us
;

992 
gRoutögFun˘i⁄M≠
["dim_‹dî_ni_t‹us"] = &
dim_‹dî_ni_t‹us
;

993 
gRoutögFun˘i⁄M≠
["dim_‹dî_bÆ_t‹us"] = &
dim_‹dî_bÆ_t‹us
;

995 
gRoutögFun˘i⁄M≠
["romm_mesh"] = &
romm_mesh
;

996 
gRoutögFun˘i⁄M≠
["romm_ni_mesh"] = &
romm_ni_mesh
;

998 
gRoutögFun˘i⁄M≠
["mö_ad≠t_mesh"] = &
mö_ad≠t_mesh
;

999 
gRoutögFun˘i⁄M≠
["mö_ad≠t_t‹us"] = &
mö_ad≠t_t‹us
;

1001 
gRoutögFun˘i⁄M≠
["∂™¨_ad≠t_mesh"] = &
∂™¨_ad≠t_mesh
;

1003 
gRoutögFun˘i⁄M≠
["limôed_ad≠t_mesh"] = &
limôed_ad≠t_mesh
;

1005 
gRoutögFun˘i⁄M≠
["vÆü¡_mesh"] = &
vÆü¡_mesh
;

1006 
gRoutögFun˘i⁄M≠
["vÆü¡_t‹us"] = &
vÆü¡_t‹us
;

1007 
gRoutögFun˘i⁄M≠
["vÆü¡_ni_t‹us"] = &
vÆü¡_ni_t‹us
;

1009 
gRoutögFun˘i⁄M≠
["de°_èg_Êy"] = &
de°_èg
;

1011 
gRoutögFun˘i⁄M≠
["chaos_mesh"] = &
chaos_mesh
;

1012 
gRoutögFun˘i⁄M≠
["chaos_t‹us"] = &
chaos_t‹us
;

1013 
	}
}

1015 
tRoutögFun˘i⁄
 
	$GëRoutögFun˘i⁄
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

1017 
m≠
<
°rög
, 
tRoutögFun˘i⁄
>::
c⁄°_ôî©‹
 
m©ch
;

1018 
tRoutögFun˘i⁄
 
rf
;

1020 
°rög
 
‚
, 
t›o
, 
‚_t›o
;

1022 
gNumVCS
 = 
c⁄fig
.
	`GëI¡
( "num_vcs" );

1024 
c⁄fig
.
	`GëSå
–"t›ﬁogy", 
t›o
 );

1026 
c⁄fig
.
	`GëSå
–"routög_fun˘i⁄", 
‚
, "none" );

1027 
‚_t›o
 = 
‚
 + "_" + 
t›o
;

1028 
m©ch
 = 
gRoutögFun˘i⁄M≠
.
	`föd
–
‚_t›o
 );

1030 i‡–
m©ch
 !
gRoutögFun˘i⁄M≠
.
	`íd
( ) ) {

1031 
rf
 = 
m©ch
->
£c⁄d
;

1033 i‡–
‚
 == "none" ) {

1034 
cout
 << "Eº‹: Nÿroutög fun˘i⁄ s≥cifõd i¿c⁄figuøti⁄." << 
ídl
;

1036 
cout
 << "Eº‹: UndeföedÑoutög fun˘i⁄ '" << 
‚
 << "' forÅheÅopology '"

1037 << 
t›o
 << "'." << 
ídl
;

1039 
	`exô
(-1);

1042  
rf
;

1043 
	}
}

	@src/intersim/router.cpp

1 
	~"booksim.hµ
"

3 
	~<io°ªam
>

4 
	~<as£π.h
>

6 
	~"rouãr.hµ
"

7 
	~"iq_rouãr.hµ
"

8 
	~"evít_rouãr.hµ
"

10 
	gRouãr
::
	$Rouãr
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
,

11 
ModuÀ
 *
∑ª¡
, 
°rög
 
«me
, 
id
,

12 
öputs
, 
ouçuts
 ) :

13 
	`ModuÀ
–
∑ª¡
, 
«me
 ),

14 
	`_id
–
id
 ),

15 
	`_öputs
–
öputs
 ),

16 
	$_ouçuts
–
ouçuts
 )

18 
_routög_dñay
 = 
c⁄fig
.
	`GëI¡
( "routing_delay" );

19 
_vc_Æloc_dñay
 = 
c⁄fig
.
	`GëI¡
( "vc_alloc_delay" );

20 
_sw_Æloc_dñay
 = 
c⁄fig
.
	`GëI¡
( "sw_alloc_delay" );

21 
_°_¥ï¨e_dñay
 = 
c⁄fig
.
	`GëI¡
( "st_prepare_delay" );

22 
_°_föÆ_dñay
 = 
c⁄fig
.
	`GëI¡
( "st_final_delay" );

23 
_¸edô_dñay
 = 
c⁄fig
.
	`GëI¡
( "credit_delay" );

24 
_öput_•ìdup
 = 
c⁄fig
.
	`GëI¡
( "input_speedup" );

25 
_ouçut_•ìdup
 = 
c⁄fig
.
	`GëI¡
( "output_speedup" );

27 
_öput_ch™√ls
 = 
√w
 
ve˘‹
<
Flô
 **>;

28 
_öput_¸edôs
 = 
√w
 
ve˘‹
<
Cªdô
 **>;

30 
_ouçut_ch™√ls
 = 
√w
 
ve˘‹
<
Flô
 **>;

31 
_ouçut_¸edôs
 = 
√w
 
ve˘‹
<
Cªdô
 **>;

33 
_ch™√l_Áu…s
 = 
√w
 
ve˘‹
<
boﬁ
>;

34 
	}
}

36 
	gRouãr
::~
	$Rouãr
( )

38 
dñëe
 
_öput_ch™√ls
;

39 
dñëe
 
_öput_¸edôs
;

40 
dñëe
 
_ouçut_ch™√ls
;

41 
dñëe
 
_ouçut_¸edôs
;

42 
dñëe
 
_ch™√l_Áu…s
;

43 
	}
}

45 
Cªdô
 *
	gRouãr
::
	$_NewCªdô
–
vcs
 )

47 
Cªdô
 *
c
;

49 
c
 = 
√w
 
	`Cªdô
–
vcs
 );

50  
c
;

51 
	}
}

53 
	gRouãr
::
	$_RëúeCªdô
–
Cªdô
 *
c
 )

55 
dñëe
 
c
;

56 
	}
}

58 
	gRouãr
::
	$AddI≈utCh™√l
–
Flô
 **
ch™√l
, 
Cªdô
 **
backch™√l
 )

60 
_öput_ch™√ls
->
	`push_back
–
ch™√l
 );

61 
_öput_¸edôs
->
	`push_back
–
backch™√l
 );

62 
	}
}

64 
	gRouãr
::
	$AddOuçutCh™√l
–
Flô
 **
ch™√l
, 
Cªdô
 **
backch™√l
 )

66 
_ouçut_ch™√ls
->
	`push_back
–
ch™√l
 );

67 
_ouçut_¸edôs
->
	`push_back
–
backch™√l
 );

68 
_ch™√l_Áu…s
->
	`push_back
–
Ál£
 );

69 
	}
}

71 
	gRouãr
::
	$GëID
( ) const

73  
_id
;

74 
	}
}

76 
	gRouãr
::
	$OutCh™√lFau…
–
c
, 
boﬁ
 
Áu…
 )

78 
	`as£π
––
c
 >0 ) && ( c < ()
_ch™√l_Áu…s
->
	`size
( ) ) );

80 (*
_ch™√l_Áu…s
)[
c
] = 
Áu…
;

81 
	}
}

83 
boﬁ
 
	gRouãr
::
	$IsFau…yOuçut
–
c
 ) const

85 
	`as£π
––
c
 >0 ) && ( c < ()
_ch™√l_Áu…s
->
	`size
( ) ) );

87 (*
_ch™√l_Áu…s
)[
c
];

88 
	}
}

90 
Rouãr
 *
	gRouãr
::
	$NewRouãr
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
,

91 
ModuÀ
 *
∑ª¡
, 
°rög
 
«me
, 
id
,

92 
öputs
, 
ouçuts
 )

94 
Rouãr
 *
r
;

95 
°rög
 
ty≥
;

97 
c⁄fig
.
	`GëSå
–"rouãr", 
ty≥
 );

99 i‡–
ty≥
 == "iq" ) {

100 
r
 = 
√w
 
	`IQRouãr
–
c⁄fig
, 
∑ª¡
, 
«me
, 
id
, 
öputs
, 
ouçuts
 );

101 } i‡–
ty≥
 == "event" ) {

102 
r
 = 
√w
 
	`EvítRouãr
–
c⁄fig
, 
∑ª¡
, 
«me
, 
id
, 
öputs
, 
ouçuts
 );

104 
cout
 << "Unknow¿rouã∏ty≥ " << 
ty≥
 << 
ídl
;

107  
r
;

108 
	}
}

	@src/intersim/selalloc.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

4 
	~"£œŒoc.hµ
"

5 
	~"øndom_utûs.hµ
"

9 
	gSñAŒoc
::
	$SñAŒoc
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

10 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

11 
öputs
, 
ouçuts
 ) :

12 
	$S∑r£AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

14 
_ôî
 = 
c⁄fig
.
	`GëI¡
( "alloc_iters" );

16 
_gø¡s
 = 
√w
 [
_ouçuts
];

17 
_g±rs
 = 
√w
 [
_ouçuts
];

18 
_≠ås
 = 
√w
 [
_öputs
];

20  
i
 = 0; i < 
_öputs
; ++i ) {

21 
_≠ås
[
i
] = 0;

23  
j
 = 0; j < 
_ouçuts
; ++j ) {

24 
_g±rs
[
j
] = 0;

26 
	}
}

28 
	gSñAŒoc
::~
	$SñAŒoc
( )

30 
dñëe
 [] 
_gø¡s
;

31 
dñëe
 [] 
_≠ås
;

32 
dñëe
 [] 
_g±rs
;

33 
	}
}

35 
	gSñAŒoc
::
	$AŒoˇã
( )

37 
öput
;

38 
ouçut
;

40 
öput_off£t
;

41 
ouçut_off£t
;

43 
li°
<
sReque°
>::
ôî©‹
 
p
;

44 
li°
<>::
ôî©‹
 
ouãr_ôî
;

45 
boﬁ
 
wøµed
;

47 
max_ödex
;

48 
max_¥i
;

50 
	`_CÀ¨M©chög
( );

52  
i
 = 0; i < 
_ouçuts
; ++i ) {

53 
_gø¡s
[
i
] = -1;

56  
ôî
 = 0; iã∏< 
_ôî
; ++iter ) {

59  
ouãr_ôî
 = 
_out_occ
->
	`begö
( );

60 
ouãr_ôî
 !
_out_occ
->
	`íd
( ); ++outer_iter ) {

61 
ouçut
 = *
ouãr_ôî
;

66 i‡––
_out_ªq
[
ouçut
].
	`em±y
( ) ) ||

67 –
_outm©ch
[
ouçut
] != -1 ) ||

68 –
_outmask
[
ouçut
] != 0 ) ) {

73 
öput_off£t
 = 
_g±rs
[
ouçut
];

75 
p
 = 
_out_ªq
[
ouçut
].
	`begö
( );

76  ( 
p
 !
_out_ªq
[
ouçut
].
	`íd
( ) ) &&

77 –
p
->
p‹t
 < 
öput_off£t
 ) ) {

78 
p
++;

81 
max_ödex
 = -1;

82 
max_¥i
 = 0;

84 
wøµed
 = 
Ál£
;

85  (!
wøµed
Ë|| ( 
p
->
p‹t
 < 
öput_off£t
 ) ) {

86 i‡–
p
 =
_out_ªq
[
ouçut
].
	`íd
( ) ) {

87 i‡–
wøµed
 ) {

92 
p
 = 
_out_ªq
[
ouçut
].
	`begö
( );

93 
wøµed
 = 
åue
;

96 
öput
 = 
p
->
p‹t
;

101 i‡––
_öm©ch
[
öput
] == -1 ) &&

102 ––
p
->
out_¥i
 > 
max_¥i
 ) || ( 
max_ödex
 == -1 ) ) ) {

103 
max_¥i
 = 
p
->
out_¥i
;

104 
max_ödex
 = 
öput
;

107 
p
++;

110 i‡–
max_ödex
 != -1 ) {

111 
_gø¡s
[
ouçut
] = 
max_ödex
;

115 #ifde‡
DEBUG_SELALLOC


116 
cout
 << "grants: ";

117  
i
 = 0; i < 
_ouçuts
; ++i ) {

118 
cout
 << 
_gø¡s
[
i
] << " ";

120 
cout
 << 
ídl
;

122 
cout
 << "aptrs: ";

123  
i
 = 0; i < 
_öputs
; ++i ) {

124 
cout
 << 
_≠ås
[
i
] << " ";

126 
cout
 << 
ídl
;

131  
ouãr_ôî
 = 
_ö_occ
->
	`begö
( );

132 
ouãr_ôî
 !
_ö_occ
->
	`íd
( ); ++outer_iter ) {

133 
öput
 = *
ouãr_ôî
;

135 i‡–
_ö_ªq
[
öput
].
	`em±y
( ) ) {

140 
ouçut_off£t
 = 
_≠ås
[
öput
];

142 
p
 = 
_ö_ªq
[
öput
].
	`begö
( );

143  ( 
p
 !
_ö_ªq
[
öput
].
	`íd
( ) ) &&

144 –
p
->
p‹t
 < 
ouçut_off£t
 ) ) {

145 
p
++;

148 
max_ödex
 = -1;

149 
max_¥i
 = 0;

151 
wøµed
 = 
Ál£
;

152  (!
wøµed
Ë|| ( 
p
->
p‹t
 < 
ouçut_off£t
 ) ) {

153 i‡–
p
 =
_ö_ªq
[
öput
].
	`íd
( ) ) {

154 i‡–
wøµed
 ) {

159 
p
 = 
_ö_ªq
[
öput
].
	`begö
( );

160 
wøµed
 = 
åue
;

163 
ouçut
 = 
p
->
p‹t
;

168 i‡––
_gø¡s
[
ouçut
] =
öput
 ) &&

169 –!
_out_ªq
[
ouçut
].
	`em±y
( ) ) &&

170 ––
p
->
ö_¥i
 > 
max_¥i
 ) || ( 
max_ödex
 == -1 ) ) ) {

171 
max_¥i
 = 
p
->
ö_¥i
;

172 
max_ödex
 = 
ouçut
;

175 
p
++;

178 i‡–
max_ödex
 != -1 ) {

180 
ouçut
 = 
max_ödex
;

182 
_öm©ch
[
öput
] = 
ouçut
;

183 
_outm©ch
[
ouçut
] = 
öput
;

186 i‡–
ôî
 == 0 ) {

187 
_g±rs
[
ouçut
] = ( 
öput
 + 1 ) % 
_öputs
;

188 
_≠ås
[
öput
] = ( 
ouçut
 + 1 ) % 
_ouçuts
;

194 #ifde‡
DEBUG_SELALLOC


195 
cout
 << "input match: ";

196  
i
 = 0; i < 
_öputs
; ++i ) {

197 
cout
 << 
_öm©ch
[
i
] << " ";

199 
cout
 << 
ídl
;

201 
cout
 << "output match: ";

202  
j
 = 0; j < 
_ouçuts
; ++j ) {

203 
cout
 << 
_outm©ch
[
j
] << " ";

205 
cout
 << 
ídl
;

207 
	}
}

	@src/intersim/singlenet.cpp

1 
	~"booksim.hµ
"

2 
	~<ve˘‹
>

4 
	~"sögÀ√t.hµ
"

6 
	gSögÀNë
::
	$SögÀNë
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 ) :

7 
	$Nëw‹k
–
c⁄fig
 )

9 
	`_CompuãSize
–
c⁄fig
 );

10 
	`_AŒoc
( );

11 
	`_BuûdNë
–
c⁄fig
 );

12 
	}
}

14 
	gSögÀNë
::
	$_CompuãSize
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

16 
_sour˚s
 = 
c⁄fig
.
	`GëI¡
( "in_ports" );

17 
_de°s
 = 
c⁄fig
.
	`GëI¡
( "out_ports" );

19 
_size
 = 1;

20 
_ch™√ls
 = 0;

21 
	}
}

23 
	gSögÀNë
::
	$_BuûdNë
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
 )

25 
i
;

27 
_rouãrs
[0] = 
Rouãr
::
	`NewRouãr
–
c⁄fig
, 
this
, "router", 0,

28 
_sour˚s
, 
_de°s
 );

30  
i
 = 0; i < 
_sour˚s
; ++i ) {

31 
_rouãrs
[0]->
	`AddI≈utCh™√l
–&
_öje˘
[
i
], &
_öje˘_¸ed
[i] );

34  
i
 = 0; i < 
_de°s
; ++i ) {

35 
_rouãrs
[0]->
	`AddOuçutCh™√l
–&
_eje˘
[
i
], &
_eje˘_¸ed
[i] );

37 
	}
}

39 
	gSögÀNë
::
	$Di•œy
( ) const

41 
_rouãrs
[0]->
	`Di•œy
( );

42 
	}
}

	@src/intersim/stats.cpp

1 
	~"booksim.hµ
"

2 
	~<m©h.h
>

3 
	~<°dio.h
>

4 
	~<io°ªam
>

6 
	~"°©s.hµ
"

8 
	gSèts
::
	$Sèts
–
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
 &
«me
,

9 
bö_size
, 
num_bös
 ) :

10 
	`ModuÀ
–
∑ª¡
, 
«me
 ),

11 
	`_num_bös
–
num_bös
 ), 
	$_bö_size
–
bö_size
 )

13 
_hi°
 = 
√w
 [
_num_bös
];

15 
	`CÀ¨
( );

16 
	}
}

18 
	gSèts
::~
	$Sèts
( )

20 
dñëe
 [] 
_hi°
;

21 
	}
}

23 
	gSèts
::
	$CÀ¨
( )

25 
_num_ßm∂es
 = 0;

26 
_ßm∂e_sum
 = 0.0;

28  
b
 = 0; b < 
_num_bös
; ++b ) {

29 
_hi°
[
b
] = 0;

32 
_ª£t
 = 
åue
;

33 
	}
}

35 
	gSèts
::
	$Avîage
( ) const

37  
_ßm∂e_sum
 / ()
_num_ßm∂es
;

38 
	}
}

40 
	gSèts
::
	$Mö
( ) const

42  
_mö
;

43 
	}
}

45 
	gSèts
::
	$Max
( ) const

47  
_max
;

48 
	}
}

50 
	gSèts
::
	$NumSam∂es
( ) const

52  
_num_ßm∂es
;

53 
	}
}

55 
	gSèts
::
	$AddSam∂e
–
vÆ
 )

57 
b
;

59 
_num_ßm∂es
++;

60 
_ßm∂e_sum
 +
vÆ
;

62 i‡–
_ª£t
 ) {

63 
_ª£t
 = 
Ál£
;

64 
_max
 = 
vÆ
;

65 
_mö
 = 
vÆ
;

67 i‡–
vÆ
 > 
_max
 ) {

68 
_max
 = 
vÆ
;

70 i‡–
vÆ
 < 
_mö
 ) {

71 
_mö
 = 
vÆ
;

75 
b
 = ()
	`Êo‹
–
vÆ
 / 
_bö_size
 );

77 i‡–
b
 < 0 ) {

78 
b
 = 0;

79 } i‡–
b
 >
_num_bös
 ) {

80 
b
 = 
_num_bös
 - 1;

83 
_hi°
[
b
]++;

84 
	}
}

86 
	gSèts
::
	$AddSam∂e
–
vÆ
 )

88 
	`AddSam∂e
–()
vÆ
 );

89 
	}
}

91 
	gSèts
::
	$Di•œy
( ) const

93 
b
;

95 i‡(
_bö_size
 != 1.0 ) {

96 
cout
<<
_fuŒ«me
<<"_";

97 
	`¥ötf
("bins = [ ");

98  
b
 = 0; b < 
_num_bös
; ++b ) {

99 
	`¥ötf
("%d ", 
b
* ()
_bö_size
);

101 
	`¥ötf
("];\n");

104 
cout
<<
_fuŒ«me
<<"_";

105 
	`¥ötf
("freq = [ ");

106  
b
 = 0; b < 
_num_bös
; ++b ) {

107 
	`¥ötf
("%d ", (Ë
_hi°
[
b
]);

109 
	`¥ötf
("];\n");

110 
	}
}

112 
boﬁ
 
	gSèts
::
	$NevîU£d
() const

114 i‡–
_ª£t
 ) {

115  
åue
;

117  
Ál£
;

119 
	}
}

	@src/intersim/statwraper.cpp

2 
	~"°©s.hµ
"

3 
	~<°dio.h
>

5 
Sèts
* 
	$SètCª©e
 (c⁄° * 
«me
, 
bö_size
, 
num_bös
) {

6 
Sèts
* 
√w°©
 = 
√w
 
	`Sèts
(
NULL
,
«me
,
bö_size
,
num_bös
);

7 
√w°©
->
	`CÀ¨
 ();

8  
√w°©
;

9 
	}
}

11 
	$SètCÀ¨
(* 
°
)

13 ((
Sèts
 *)
°
)->
	`CÀ¨
();

14 
	}
}

16 
	$SètAddSam∂e
 (* 
°
, 
vÆ
)

18 ((
Sèts
 *)
°
)->
	`AddSam∂e
(
vÆ
);

19 
	}
}

21 
	$SètAvîage
(* 
°
)

23 ((
Sèts
 *)
°
)->
	`Avîage
();

24 
	}
}

26 
	$SètMax
(* 
°
)

28 ((
Sèts
 *)
°
)->
	`Max
();

29 
	}
}

31 
	$SètMö
(* 
°
)

33 ((
Sèts
 *)
°
)->
	`Mö
();

34 
	}
}

36 
	$SètDi•
 (* 
°
)

38 
	`¥ötf
 ("Stats for ");

39 ((
Sèts
 *)
°
)->
	`Di•œyHõørchy
();

40 i‡(((
Sèts
 *)
°
)->
	`NevîU£d
()) {

41 
	`¥ötf
 (" wasÇever updated!\n");

43 
	`¥ötf
("Mö %‡Max %‡Avîagê%‡\n",((
Sèts
 *)
°
)->
	`Mö
(),((Sèt†*)°)->
	`Max
(),
	`SètAvîage
(st));

44 ((
Sèts
 *)
°
)->
	`Di•œy
();

46 
	}
}

49 
	$maö
 ()

51 * 
myã°
 = 
	`SètCª©e
("Test",1,5);

52 
	`SètAddSam∂e
(
myã°
,4);

53 
	`SètAddSam∂e
(
myã°
,4);StatAddSample(mytest,4);

54 
	`SètAddSam∂e
(
myã°
,2);

55 
	`SètDi•
(
myã°
);

56 
	}
}

	@src/intersim/statwraper.h

1 #i‚de‡
STAT_WRAPER_H


2 
	#STAT_WRAPER_H


	)

4 
˛ass
 
Sèts
* 
SètCª©e
 (c⁄° * 
«me
, 
bö_size
, 
num_bös
) ;

5 
SètCÀ¨
(* 
°
);

6 
SètAddSam∂e
 (* 
°
, 
vÆ
);

7 
SètAvîage
(* 
°
) ;

8 
SètMax
(* 
°
) ;

9 
SètMö
(* 
°
) ;

10 
SètDi•
 (* 
°
);

	@src/intersim/traffic.cpp

1 
	~"booksim.hµ
"

2 
	~<m≠
>

3 
	~<°dlib.h
>

5 
	~"åaffic.hµ
"

6 
	~"√tw‹k.hµ
"

7 
	~"øndom_utûs.hµ
"

8 
	~"misc_utûs.hµ
"

10 
	gm≠
<
	g°rög
, 
	gtTøfficFun˘i⁄
> 
	ggTøfficFun˘i⁄M≠
;

12 
	ggRe£tTøffic
 = 0;

13 
	ggSãpTøffic
 = 0;

15 
	$§c_de°_bö
–
sour˚
, 
de°
, 
lg
 )

17 
b
, 
t
;

19 
cout
 << "from: ";

20 
t
 = 
sour˚
;

21  
b
 = 0; b < 
lg
; ++b ) {

22 
cout
 << ( ( 
t
 >> ( 
lg
 - 
b
 - 1 ) ) & 0x1 );

25 
cout
 << "Åo ";

26 
t
 = 
de°
;

27  
b
 = 0; b < 
lg
; ++b ) {

28 
cout
 << ( ( 
t
 >> ( 
lg
 - 
b
 - 1 ) ) & 0x1 );

30 
cout
 << 
ídl
;

31 
	}
}

35 
	$unif‹m
–
sour˚
, 
tŸÆ_nodes
 )

37  
	`R™domI¡
–
tŸÆ_nodes
 - 1 );

38 
	}
}

42 
	$bôcomp
–
sour˚
, 
tŸÆ_nodes
 )

44 
lg
 = 
	`log_two
–
tŸÆ_nodes
 );

45 
mask
 = 
tŸÆ_nodes
 - 1;

46 
de°
;

48 i‡––1 << 
lg
 ) !
tŸÆ_nodes
 ) {

49 
cout
 << "Error: The 'bitcomp'ÅrafficÖatternÑequiresÅheÇumber of"

50 << "Çode†tÿbê®powî o‡two!" << 
ídl
;

51 
	`exô
(-1);

54 
de°
 = ( ~
sour˚
 ) & 
mask
;

56  
de°
;

57 
	}
}

61 
	$å™•o£
–
sour˚
, 
tŸÆ_nodes
 )

63 
lg
 = 
	`log_two
–
tŸÆ_nodes
 );

64 
mask_lo
 = (1 << (
lg
/2)) - 1;

65 
mask_hi
 = 
mask_lo
 << (
lg
/2);

66 
de°
;

68 i‡–––1 << 
lg
 ) !
tŸÆ_nodes
 ) || (Üg & 0x1 ) ) {

69 
cout
 << "Error: The 'transpose'ÅrafficÖatternÑequiresÅheÇumber of"

70 << "Çode†tÿbê™ÉvíÖowî o‡two!" << 
ídl
;

71 
	`exô
(-1);

74 
de°
 = ( ( 
sour˚
 >> (
lg
/2ËË& 
mask_lo
 ) |

75 ––
sour˚
 << (
lg
/2ËË& 
mask_hi
 );

77  
de°
;

78 
	}
}

82 
	$bôªv
–
sour˚
, 
tŸÆ_nodes
 )

84 
lg
 = 
	`log_two
–
tŸÆ_nodes
 );

85 
de°
;

87 i‡––1 << 
lg
 ) !
tŸÆ_nodes
 ) {

88 
cout
 << "Error: The 'bitrev'ÅrafficÖatternÑequiresÅheÇumber of"

89 << "Çode†tÿbê®powî o‡two!" << 
ídl
;

90 
	`exô
(-1);

96 
de°
 = 0;

97  
b
 = 0; b < 
lg
; ++b ) {

98 
de°
 |––
sour˚
 >> 
b
 ) & 0x1 ) << ( 
lg
 - b - 1 );

101  
de°
;

102 
	}
}

106 
	$shufÊe
–
sour˚
, 
tŸÆ_nodes
 )

108 
lg
 = 
	`log_two
–
tŸÆ_nodes
 );

109 
de°
;

111 i‡––1 << 
lg
 ) !
tŸÆ_nodes
 ) {

112 
cout
 << "Error: The 'shuffle'ÅrafficÖatternÑequiresÅheÇumber of"

113 << "Çode†tÿbê®powî o‡two!" << 
ídl
;

114 
	`exô
(-1);

117 
de°
 = ( ( 
sour˚
 << 1 ) & ( 
tŸÆ_nodes
 - 1 ) ) |

118 ––
sour˚
 >> ( 
lg
 - 1 ) ) & 0x1 );

120  
de°
;

121 
	}
}

125 
	$t‹«do
–
sour˚
, 
tŸÆ_nodes
 )

127 
off£t
 = 1;

128 
de°
 = 0;

130  
n
 = 0;Ç < 
gN
; ++n ) {

131 
de°
 +
off£t
 *

132 –––
sour˚
 / 
off£t
 ) % 
gK
 + ( gK/2 - 1 ) ) % gK );

133 
off£t
 *
gK
;

136  
de°
;

137 
	}
}

141 
	$√ighb‹
–
sour˚
, 
tŸÆ_nodes
 )

143 
off£t
 = 1;

144 
de°
 = 0;

146  
n
 = 0;Ç < 
gN
; ++n ) {

147 
de°
 +
off£t
 *

148 –––
sour˚
 / 
off£t
 ) % 
gK
 + 1 ) % gK );

149 
off£t
 *
gK
;

152  
de°
;

153 
	}
}

157 *
	ggPîm
 = 0;

158 
	ggPîmSìd
;

160 
	$Gíî©eR™domPîm
–
tŸÆ_nodes
 )

162 
öd
;

163 
i
,
j
;

164 
˙t
;

165 
¥ev_ønd
;

167 
¥ev_ønd
 = 
	`R™domI¡L⁄g
( );

168 
	`R™domSìd
–
gPîmSìd
 );

170 i‡–!
gPîm
 ) {

171 
gPîm
 = 
√w
 [
tŸÆ_nodes
];

174  
i
 = 0; i < 
tŸÆ_nodes
; ++i ) {

175 
gPîm
[
i
] = -1;

178  
i
 = 0; i < 
tŸÆ_nodes
; ++i ) {

179 
öd
 = 
	`R™domI¡
–
tŸÆ_nodes
 - 1 - 
i
 );

181 
j
 = 0;

182 
˙t
 = 0;

183  ( 
˙t
 < 
öd
 ) ||

184 –
gPîm
[
j
] != -1 ) ) {

185 i‡–
gPîm
[
j
] == -1 ) {

186 ++
˙t
;

188 ++
j
;

190 i‡–
j
 >
tŸÆ_nodes
 ) {

191 
cout
 << "ERROR: Gíî©eR™domPîm–Ëöã∫ÆÉº‹" << 
ídl
;

192 
	`exô
(-1);

196 
gPîm
[
j
] = 
i
;

199 
	`R™domSìd
–
¥ev_ønd
 );

200 
	}
}

202 
	$ønd≥rm
–
sour˚
, 
tŸÆ_nodes
 )

204 i‡–
gRe£tTøffic
 || !
gPîm
 ) {

205 
	`Gíî©eR™domPîm
–
tŸÆ_nodes
 );

206 
gRe£tTøffic
 = 0;

209  
gPîm
[
sour˚
];

210 
	}
}

214 
	$düg⁄Æ
–
sour˚
, 
tŸÆ_nodes
 )

216 
t
 = 
	`R™domI¡
( 2 );

217 
d
;

222 i‡–
t
 == 0 ) {

223 
d
 = ( 
sour˚
 + 1 ) % 
tŸÆ_nodes
;

225 
d
 = 
sour˚
;

228  
d
;

229 
	}
}

233 
	$asymmëric
–
sour˚
, 
tŸÆ_nodes
 )

235 
d
;

236 
hÆf
 = 
tŸÆ_nodes
 / 2;

238 
d
 = ( 
sour˚
 % 
hÆf
 ) + 
	`R™domI¡
( 1 ) * half;

240  
d
;

241 
	}
}

245 
	$InôülizeTøfficM≠
( )

249 
gTøfficFun˘i⁄M≠
["unif‹m"] = &
unif‹m
;

253 
gTøfficFun˘i⁄M≠
["bôcomp"] = &
bôcomp
;

254 
gTøfficFun˘i⁄M≠
["bôªv"] = &
bôªv
;

255 
gTøfficFun˘i⁄M≠
["å™•o£"] = &
å™•o£
;

256 
gTøfficFun˘i⁄M≠
["shufÊe"] = &
shufÊe
;

260 
gTøfficFun˘i⁄M≠
["t‹«do"] = &
t‹«do
;

261 
gTøfficFun˘i⁄M≠
["√ighb‹"] = &
√ighb‹
;

265 
gTøfficFun˘i⁄M≠
["ønd≥rm"] = &
ønd≥rm
;

267 
gTøfficFun˘i⁄M≠
["düg⁄Æ"] = &
düg⁄Æ
;

268 
gTøfficFun˘i⁄M≠
["asymmëric"] = &
asymmëric
;

269 
	}
}

271 
	$Re£tTøfficFun˘i⁄
( )

273 
gRe£tTøffic
++;

274 
	}
}

276 
	$SãpTøfficFun˘i⁄
( )

278 
gSãpTøffic
++;

279 
	}
}

281 
tTøfficFun˘i⁄
 
	$GëTøfficFun˘i⁄
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
 )

283 
m≠
<
°rög
, 
tTøfficFun˘i⁄
>::
c⁄°_ôî©‹
 
m©ch
;

284 
tTøfficFun˘i⁄
 
tf
;

286 
°rög
 
‚
;

288 
c⁄fig
.
	`GëSå
–"åaffic", 
‚
, "none" );

289 
m©ch
 = 
gTøfficFun˘i⁄M≠
.
	`föd
–
‚
 );

291 i‡–
m©ch
 !
gTøfficFun˘i⁄M≠
.
	`íd
( ) ) {

292 
tf
 = 
m©ch
->
£c⁄d
;

294 
cout
 << "Eº‹: UndeföedÅøffi¯∑âî¿'" << 
‚
 << "'." << 
ídl
;

295 
	`exô
(-1);

298 
gPîmSìd
 = 
c⁄fig
.
	`GëI¡
( "perm_seed" );

300  
tf
;

301 
	}
}

	@src/intersim/trafficmanager.cpp

1 
	~"booksim.hµ
"

2 
	~<s°ªam
>

3 
	~<m©h.h
>

4 
	~<as£π.h
>

6 
	~"åafficm™agî.hµ
"

7 
	~"øndom_utûs.hµ
"

8 
	~"öãrc⁄√˘_öãrÁ˚.h
"

12 
	#DEBUG
 0

	)

15 
	gMATLAB_OUTPUT
 = 0;

16 
	gDISPLAY_LAT_DIST
 = 1;

17 
	gDISPLAY_HOP_DIST
 = 1;

18 
	gDISPLAY_PAIR_LATENCY
 = 0;

20 
	gTøfficM™agî
::
	$TøfficM™agî
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
, 
Nëw‹k
 *
√t
 , 
u_id
)

21 : 
	`ModuÀ
( 0, "traffic_manager" )

23 
s
;

24 
o°rög°ªam
 
tmp_«me
;

25 
°rög
 
sim_ty≥
, 
¥i‹ôy
;

27 
uid
 = 
u_id
;

28 
_√t
 = 
√t
;

29 
_cur_id
 = 0;

31 
_sour˚s
 = 
_√t
->
	`NumSour˚s
( );

32 
_de°s
 = 
_√t
->
	`NumDe°s
( );

36 
c⁄fig
.
	`GëSå
–"¥i‹ôy", 
¥i‹ôy
 );

38 
_˛as£s
 = 1;

40 i‡–
¥i‹ôy
 == "class" ) {

41 
_˛as£s
 = 2;

42 
_¥i_ty≥
 = 
˛ass_ba£d
;

43 } i‡–
¥i‹ôy
 == "age" ) {

44 
_¥i_ty≥
 = 
age_ba£d
;

45 } i‡–
¥i‹ôy
 == "none" ) {

46 
_¥i_ty≥
 = 
n⁄e
;

48 
	`Eº‹
–"Unknow¿¥i‹ôy " + 
¥i‹ôy
 );

53 
_buf_°©es
 = 
√w
 
Buf„rSèã
 * [
_sour˚s
];

55  
s
 = 0; s < 
_sour˚s
; ++s ) {

56 
tmp_«me
 << "buf_°©e_" << 
s
;

57 
_buf_°©es
[
s
] = 
√w
 
	`Buf„rSèã
–
c⁄fig
, 
this
, 
tmp_«me
.
	`°r
( ) );

58 
tmp_«me
.
	`£ekp
–0, 
ios
::
beg
 );

63 
_voqög
 = 
c⁄fig
.
	`GëI¡
( "voq" );

65 i‡–
_voqög
 ) {

66 
_u£_œggög
 = 
Ál£
;

68 
_u£_œggög
 = 
åue
;

71 
_time
 = 0;

72 
_w¨mup_time
 = -1;

73 
_døö_time
 = -1;

74 
_em±y_√tw‹k
 = 
Ál£
;

76 
_mósuªd_ö_Êight
 = 0;

77 
_tŸÆ_ö_Êight
 = 0;

79 i‡–
_u£_œggög
 ) {

80 
_qtime
 = 
√w
 * [
_sour˚s
];

81 
_qdøöed
 = 
√w
 
boﬁ
 * [
_sour˚s
];

84 i‡–
_voqög
 ) {

85 
_voq
 = 
√w
 
li°
<
Flô
 *> * [
_sour˚s
];

86 
_a˘ive_li°
 = 
√w
 
li°
<> [
_sour˚s
];

87 
_a˘ive_vc
 = 
√w
 
boﬁ
 * [
_sour˚s
];

90 
_∑πül_∑ckës
 = 
√w
 
li°
<
Flô
 *> * [
_sour˚s
];

92  
s
 = 0; s < 
_sour˚s
; ++s ) {

93 i‡–
_u£_œggög
 ) {

94 
_qtime
[
s
] = 
√w
 [
_˛as£s
];

95 
_qdøöed
[
s
] = 
√w
 
boﬁ
 [
_˛as£s
];

98 i‡–
_voqög
 ) {

99 
_voq
[
s
] = 
√w
 
li°
<
Flô
 *> [
_de°s
];

100 
_a˘ive_vc
[
s
] = 
√w
 
boﬁ
 [
_de°s
];

103 
_∑πül_∑ckës
[
s
] = 
√w
 
li°
<
Flô
 *> [
_˛as£s
];

106 
_•lô_∑ckës
 = 
c⁄fig
.
	`GëI¡
( "split_packets" );

108 
¸edô_ªtu∫_queue
 = 
√w
 
queue
<
Flô
 *> [
_sour˚s
];

112 
_ª‹dî
 = 
c⁄fig
.
	`GëI¡
–"ª‹dî" ) ? 
åue
 : 
Ál£
;

114 i‡–
_ª‹dî
 ) {

115 
_öje˘_sqn
 = 
√w
 * [
_sour˚s
];

116 
_rob_sqn
 = 
√w
 * [
_sour˚s
];

117 
_rob_sqn_max
 = 
√w
 * [
_sour˚s
];

118 
_rob
 = 
√w
 
¥i‹ôy_queue
<
Flô
 *, 
ve˘‹
<Flô *>, 
Êôp_com∑ª
> * [
_sour˚s
];

120  
i
 = 0; i < 
_sour˚s
; ++i ) {

121 
_öje˘_sqn
[
i
] = 
√w
 [
_de°s
];

122 
_rob_sqn
[
i
] = 
√w
 [
_de°s
];

123 
_rob_sqn_max
[
i
] = 
√w
 [
_de°s
];

124 
_rob
[
i
] = 
√w
 
¥i‹ôy_queue
<
Flô
 *, 
ve˘‹
<Flô *>, 
Êôp_com∑ª
> [
_de°s
];

126  
j
 = 0; j < 
_de°s
; ++j ) {

127 
_öje˘_sqn
[
i
][
j
] = 0;

128 
_rob_sqn
[
i
][
j
] = 0;

129 
_rob_sqn_max
[
i
][
j
] = 0;

133 
_rob_¥i
 = 
√w
 [
_de°s
];

135  
i
 = 0; i < 
_de°s
; ++i ) {

136 
_rob_¥i
[
i
] = 0;

142 
_œãncy_°©s
 = 
√w
 
Sèts
 * [
_˛as£s
];

143 
_ovîÆl_œãncy
 = 
√w
 
Sèts
 * [
_˛as£s
];

145  
c
 = 0; c < 
_˛as£s
; ++c ) {

146 
tmp_«me
 << "œãncy_°©_" << 
c
;

147 
_œãncy_°©s
[
c
] = 
√w
 
	`Sèts
–
this
, 
tmp_«me
.
	`°r
( ), 1.0, 1000 );

148 
tmp_«me
.
	`£ekp
–0, 
ios
::
beg
 );

150 
tmp_«me
 << "ovîÆl_œãncy_°©_" << 
c
;

151 
_ovîÆl_œãncy
[
c
] = 
√w
 
	`Sèts
–
this
, 
tmp_«me
.
	`°r
( ), 1.0, 1000 );

152 
tmp_«me
.
	`£ekp
–0, 
ios
::
beg
 );

155 
_∑ú_œãncy
 = 
√w
 
Sèts
 * [
_de°s
];

156 
_ac˚±ed_∑ckës
 = 
√w
 
Sèts
 * [
_de°s
];

158  
i
 = 0; i < 
_de°s
; ++i ) {

159 
tmp_«me
 << "∑ú_°©_" << 
i
;

160 
_∑ú_œãncy
[
i
] = 
√w
 
	`Sèts
–
this
, 
tmp_«me
.
	`°r
( ), 1.0, 250 );

161 
tmp_«me
.
	`£ekp
–0, 
ios
::
beg
 );

163 
tmp_«me
 << "ac˚±ed_°©_" << 
i
;

164 
_ac˚±ed_∑ckës
[
i
] = 
√w
 
	`Sèts
–
this
, 
tmp_«me
.
	`°r
( ) );

165 
tmp_«me
.
	`£ekp
–0, 
ios
::
beg
 );

168 
_h›_°©s
 = 
√w
 
	`Sèts
–
this
, "hop_stats", 1.0, 20 );;

169 
_ovîÆl_ac˚±ed
 = 
√w
 
	`Sèts
–
this
, "overall_acceptance" );

170 
_ovîÆl_ac˚±ed_mö
 = 
√w
 
	`Sèts
–
this
, "overall_min_acceptance" );

172 i‡–
_ª‹dî
 ) {

173 
_rob_œãncy
 = 
√w
 
	`Sèts
–
this
, "rob_latency", 1.0, 1000 );

174 
_rob_size
 = 
√w
 
	`Sèts
–
this
, "rob_size", 1.0, 250 );

177 
_Êô_timög
 = 
c⁄fig
.
	`GëI¡
( "flit_timing" );

181 
_lﬂd
 = 
c⁄fig
.
	`GëFlﬂt
( "injection_rate" );

182 
_∑ckë_size
 = 
c⁄fig
.
	`GëI¡
( "const_flits_per_packet" );

184 
_tŸÆ_sims
 = 
c⁄fig
.
	`GëI¡
( "sim_count" );

186 
_öã∫Æ_•ìdup
 = 
c⁄fig
.
	`GëFlﬂt
( "internal_speedup" );

187 
_∑πül_öã∫Æ_cy˛es
 = 0.0;

189 
_åaffic_fun˘i⁄
 = 
NULL
;

190 
_routög_fun˘i⁄
 = 
	`GëRoutögFun˘i⁄
–
c⁄fig
 );

191 
_öje˘i⁄_¥o˚ss
 = 
NULL
;

193 
c⁄fig
.
	`GëSå
–"sim_ty≥", 
sim_ty≥
 );

195 i‡–
sim_ty≥
 == "latency" ) {

196 
_sim_mode
 = 
œãncy
;

197 } i‡–
sim_ty≥
 == "throughput" ) {

198 
_sim_mode
 = 
throughput
;

200 
	`Eº‹
–"Unknow¿sim_ty≥ " + 
sim_ty≥
 );

203 
_ßm∂e_≥riod
 = 
c⁄fig
.
	`GëI¡
( "sample_period" );

204 
_max_ßm∂es
 = 
c⁄fig
.
	`GëI¡
( "max_samples" );

205 
_w¨mup_≥riods
 = 
c⁄fig
.
	`GëI¡
( "warmup_periods" );

206 
_œãncy_thªs
 = 
c⁄fig
.
	`GëFlﬂt
( "latency_thres" );

207 
_ö˛ude_queuög
 = 
c⁄fig
.
	`GëI¡
( "include_queuing" );

208 
	}
}

210 
	gTøfficM™agî
::~
	$TøfficM™agî
( )

212  
s
 = 0; s < 
_sour˚s
; ++s ) {

213 i‡–
_u£_œggög
 ) {

214 
dñëe
 [] 
_qtime
[
s
];

215 
dñëe
 [] 
_qdøöed
[
s
];

217 i‡–
_voqög
 ) {

218 
dñëe
 [] 
_voq
[
s
];

219 
dñëe
 [] 
_a˘ive_vc
[
s
];

221 
dñëe
 [] 
_∑πül_∑ckës
[
s
];

222 
dñëe
 
_buf_°©es
[
s
];

225 i‡–
_u£_œggög
 ) {

226 
dñëe
 [] 
_qtime
;

227 
dñëe
 [] 
_qdøöed
;

230 i‡–
_voqög
 ) {

231 
dñëe
 [] 
_voq
;

232 
dñëe
 [] 
_a˘ive_vc
;

235 i‡–
_ª‹dî
 ) {

236  
i
 = 0; i < 
_sour˚s
; ++i ) {

237 
dñëe
 [] 
_öje˘_sqn
[
i
];

238 
dñëe
 [] 
_rob_sqn
[
i
];

239 
dñëe
 [] 
_rob_sqn_max
[
i
];

240 
dñëe
 [] 
_rob
[
i
];

243 
dñëe
 [] 
_öje˘_sqn
;

244 
dñëe
 [] 
_rob_sqn
;

245 
dñëe
 [] 
_rob_sqn_max
;

246 
dñëe
 [] 
_rob
;

247 
dñëe
 [] 
_rob_¥i
;

249 
dñëe
 
_rob_œãncy
;

250 
dñëe
 
_rob_size
;

253 
dñëe
 [] 
_buf_°©es
;

254 
dñëe
 [] 
_∑πül_∑ckës
;

256  
c
 = 0; c < 
_˛as£s
; ++c ) {

257 
dñëe
 
_œãncy_°©s
[
c
];

258 
dñëe
 
_ovîÆl_œãncy
[
c
];

261 
dñëe
 [] 
_œãncy_°©s
;

262 
dñëe
 [] 
_ovîÆl_œãncy
;

264 
dñëe
 
_h›_°©s
;

265 
dñëe
 
_ovîÆl_ac˚±ed
;

266 
dñëe
 
_ovîÆl_ac˚±ed_mö
;

268  
i
 = 0; i < 
_de°s
; ++i ) {

269 
dñëe
 
_ac˚±ed_∑ckës
[
i
];

270 
dñëe
 
_∑ú_œãncy
[
i
];

273 
dñëe
 [] 
_ac˚±ed_∑ckës
;

274 
dñëe
 [] 
_∑ú_œãncy
;

275 
	}
}

277 
Flô
 *
	gTøfficM™agî
::
	$_NewFlô
( )

279 
Flô
 *
f
;

280 
f
 = 
√w
 
Flô
;

282 
f
->
id
 = 
_cur_id
;

283 
f
->
h›s
 = 0;

284 
f
->
w©ch
 = 
Ál£
;

287 i‡(
DEBUG
 || 
f
->
id
 == -1 ) {

288 
f
->
w©ch
 = 
åue
;

291 
_ö_Êight
[
_cur_id
] = 
åue
;

292 ++
_cur_id
;

293  
f
;

294 
	}
}

296 
	gTøfficM™agî
::
	$_RëúeFlô
–
Flô
 *
f
, 
de°
 )

298 
ßm∂e_num
 = 0;

300 
m≠
<, 
boﬁ
>::
ôî©‹
 
m©ch
;

302 
m©ch
 = 
_ö_Êight
.
	`föd
–
f
->
id
 );

304 i‡–
m©ch
 !
_ö_Êight
.
	`íd
( ) ) {

305 i‡–
f
->
w©ch
 ) {

306 
cout
 << "M©ched flô ID = " << 
f
->
id
 << 
ídl
;

308 
_ö_Êight
.
	`îa£
–
m©ch
 );

310 
cout
 << "Unm©ched flô! ID = " << 
f
->
id
 << 
ídl
;

311 
	`Eº‹
( "" );

314 i‡–
f
->
w©ch
 ) {

315 
cout
 << "Eje˘ög flô " << 
f
->
id


316 << ",Ü© = " << 
_time
 - 
f
->
time


317 << ", sr¯" << 
f
->
§c


318 << ", de° = " << 
f
->
de°
 << 
ídl
;

323 i‡–
f
->
èû
 || 
_Êô_timög
 ) {

324 
_tŸÆ_ö_Êight
--;

325 i‡–
_tŸÆ_ö_Êight
 < 0 ) {

326 
	`Eº‹
( "Total in flight count dropped below zero!" );

329 i‡––
_sim_°©e
 =
w¨mög_up
 ) || 
f
->
ªc‹d
 ) {

330 i‡–
f
->
åue_èû
 || 
_Êô_timög
 ) {

331 
_h›_°©s
->
	`AddSam∂e
–
f
->
h›s
 );

332 
	`as£π
–(
_time
 - 
f
->
time
)>0 );

333  
_¥i_ty≥
 ) {

334 
˛ass_ba£d
:

335 
_œãncy_°©s
[
f
->
¥i
]->
	`AddSam∂e
–(
_time
 - f->
time
) );

337 
age_ba£d
:

338 
n⁄e
:

339 
_œãncy_°©s
[0]->
	`AddSam∂e
–(
_time
 - 
f
->
time
) );

343 i‡–
_ª‹dî
 ) {

344 
_rob_œãncy
->
	`AddSam∂e
–(
_time
 - 
f
->
rob_time
 ));

347 i‡–
f
->
§c
 == 0 ) {

348 
_∑ú_œãncy
[
de°
]->
	`AddSam∂e
–(
_time
 - 
f
->
time
 ) );

352 i‡–
f
->
ªc‹d
 ) {

354 
_mósuªd_ö_Êight
--;

355 i‡–
_mósuªd_ö_Êight
 < 0 ) {

356 
	`Eº‹
( "Measured in flight count dropped below zero!" );

360 ++
ßm∂e_num
;

364 
dñëe
 
f
;

365 
	}
}

368 
	gTøfficM™agî
::
	$_IssuePackë
–
sour˚
, 
˛
 ) const

370 
˛ass_lﬂd
;

371 i‡–
_¥i_ty≥
 =
˛ass_ba£d
 ) {

372 i‡–
˛
 == 0 ) {

373 
˛ass_lﬂd
 = 0.9 * 
_lﬂd
;

375 
˛ass_lﬂd
 = 0.1 * 
_lﬂd
;

378 
˛ass_lﬂd
 = 
_lﬂd
;

381  
	`_öje˘i⁄_¥o˚ss
–
sour˚
, 
˛ass_lﬂd
 );

382 
	}
}

384 
	gTøfficM™agî
::
	$_Gíî©ePackë
–
sour˚
, 
psize
 ,

385 
˛
, 
time
, * 
d©a
, 
de°
 )

387 
Flô
 *
f
;

388 
boﬁ
 
ªc‹d
;

389 
boﬁ
 
•lô_hód
;

390 
boﬁ
 
•lô_èû
;

392 i‡––
_sim_°©e
 =
ru¬ög
 ) ||

393 ––
_sim_°©e
 =
døöög
 ) && ( 
time
 < 
_døö_time
 ) ) ) {

394 
ªc‹d
 = 
åue
;

396 
ªc‹d
 = 
Ál£
;

399  
i
 = 0; i < 
psize
; ++i ) {

400 
f
 = 
	`_NewFlô
( );

402 
•lô_hód
 = 
Ál£
;

403 
•lô_èû
 = 
Ál£
;

405 i‡–
_•lô_∑ckës
 > 0 ) {

406 i‡––
i
 % 
_•lô_∑ckës
 ) == 0 ) {

407 
•lô_hód
 = 
åue
;

410 i‡––
i
 % 
_•lô_∑ckës
 ) == ( _split_packets - 1 ) ) {

411 
•lô_èû
 = 
åue
;

415 
f
->
§c
 = 
sour˚
;

416 
f
->
time
 =Åime;

417 
f
->
ªc‹d
 =Ñecord;

418 
f
->
d©a
 = data;

419 
f
->
√t_num
 = 
uid
;

420 i‡––
i
 =0 ) || ( 
•lô_hód
 ) ) {

421 
f
->
hód
 = 
åue
;

422 
f
->
de°
 = dest;

424 
f
->
hód
 = 
Ál£
;

425 
f
->
de°
 = -1;

428 
f
->
åue_èû
 = 
Ál£
;

429 i‡––
i
 =–
psize
 - 1 ) ) || ( 
•lô_èû
 ) ) {

430 
f
->
èû
 = 
åue
;

432 i‡–
i
 =–
psize
 - 1 ) ) {

433 
f
->
åue_èû
 = 
åue
;

436 
f
->
èû
 = 
Ál£
;

439 i‡–
_ª‹dî
 ) {

440 
f
->
¢
 = 
_öje˘_sqn
[
sour˚
][
de°
];

441 
_öje˘_sqn
[
sour˚
][
de°
]++;

444  
_¥i_ty≥
 ) {

445 
˛ass_ba£d
:

446 
f
->
¥i
 = 
˛
; ;

447 
age_ba£d
:

448 
f
->
¥i
 = -
time
; ;

449 
n⁄e
:

450 
f
->
¥i
 = 0; ;

453 
f
->
vc
 = -1;

455 i‡–
f
->
w©ch
 ) {

456 
cout
 << "Gíî©ög flôáàtimê" << 
time
 << 
ídl
;

457 
cout
 << *
f
;

460 i‡–
f
->
èû
 || 
_Êô_timög
 ) {

461 i‡–
ªc‹d
 ) {

462 ++
_mósuªd_ö_Êight
;

464 ++
_tŸÆ_ö_Êight
;

467 i‡–
_Êô_timög
 ) {

468 
time
++;

471 
_∑πül_∑ckës
[
sour˚
][
˛
].
	`push_back
–
f
 );

473 
	}
}

475 
	gTøfficM™agî
::
	$_Fú°Sãp
( )

479 
_√t
->
	`WrôeOuçuts
( );

481  
ouçut
 = 0; ouçuà< 
_√t
->
	`NumDe°s
( ); ++output ) {

482 
_√t
->
	`WrôeCªdô
–0, 
ouçut
 );

484 
	}
}

486 
	gTøfficM™agî
::
	$_CœssInje˘
( )

488 
Flô
 *
f
, *
nf
;

489 
Cªdô
 *
¸ed
;

492  
öput
 = 0; i≈uà< 
_√t
->
	`NumSour˚s
( ); ++input ) {

494 
¸ed
 = 
_√t
->
	`RódCªdô
–
öput
 );

495 i‡–
¸ed
 ) {

496 
_buf_°©es
[
öput
]->
	`Pro˚ssCªdô
–
¸ed
 );

497 
dñëe
 
¸ed
;

500 
boﬁ
 
wrôe_Êô
 = 
Ál£
;

501 
highe°_˛ass
 = 0;

502 
boﬁ
 
gíî©ed
;

504  
c
 = 0; c < 
_˛as£s
; ++c ) {

507 i‡–
_∑πül_∑ckës
[
öput
][
c
].
	`em±y
( ) ) {

508 
gíî©ed
 = 
Ál£
;

510 i‡–!
_em±y_√tw‹k
 ) {

511 i‡––
_sim_°©e
 =
døöög
 ) &&

512 –
_qtime
[
öput
][
c
] > 
_døö_time
 ) ) {

513 
_qdøöed
[
öput
][
c
] = 
åue
;

517 i‡–
gíî©ed
 ) {

518 
highe°_˛ass
 = 
c
;

522 
highe°_˛ass
 = 
c
;

528 i‡–!
_∑πül_∑ckës
[
öput
][
highe°_˛ass
].
	`em±y
( ) ) {

529 
f
 = 
_∑πül_∑ckës
[
öput
][
highe°_˛ass
].
	`‰⁄t
( );

531 i‡–
f
->
hód
 && ( f->
vc
 == -1 ) ) {

532 
f
->
vc
 = 
_buf_°©es
[
öput
]->
	`FödAvaûabÀ
( );

534 i‡–
f
->
vc
 != -1 ) {

535 
_buf_°©es
[
öput
]->
	`TakeBuf„r
–
f
->
vc
 );

539 i‡–
f
->
vc
 != -1 ) {

540 i‡–!
_buf_°©es
[
öput
]->
	`IsFuŒF‹
–
f
->
vc
 ) ) {

542 
_∑πül_∑ckës
[
öput
][
highe°_˛ass
].
	`p›_‰⁄t
( );

543 
_buf_°©es
[
öput
]->
	`SídögFlô
–
f
 );

544 
	`time_ve˘‹_upd©e_i˙t_öje˘ed
(
f
->
d©a
, 
öput
);

545 
wrôe_Êô
 = 
åue
;

548 i‡–!
_∑πül_∑ckës
[
öput
][
highe°_˛ass
].
	`em±y
–Ë&& !
f
->
èû
 ) {

549 
nf
 = 
_∑πül_∑ckës
[
öput
][
highe°_˛ass
].
	`‰⁄t
( );

550 
nf
->
vc
 = 
f
->vc;

553 i‡–
f
->
w©ch
 ) {

554 
cout
 << "Flô " << 
f
->
id
 << " wrôã¿ötÿöje˘i⁄Ö‹à©Åimê" << 
_time
 << 
ídl
;

557 i‡–
f
->
w©ch
 ) {

558 
cout
 << "Flô " << 
f
->
id
 << " sèŒedáàöje˘i⁄ waôög f‹ávaûabÀ VCáàtimê" << 
_time
 << 
ídl
;

563 
_√t
->
	`WrôeFlô
–
wrôe_Êô
 ? 
f
 : 0, 
öput
 );

565 
	}
}

567 
	gTøfficM™agî
::
	$_VOQInje˘
( )

569 
Flô
 *
f
;

570 
Cªdô
 *
¸ed
;

572 
vc
;

573 
de°
;

575  
öput
 = 0; i≈uà< 
_√t
->
	`NumSour˚s
( ); ++input ) {

578 
¸ed
 = 
_√t
->
	`RódCªdô
–
öput
 );

579 i‡–
¸ed
 ) {

580 
_buf_°©es
[
öput
]->
	`Pro˚ssCªdô
–
¸ed
 );

582  
i
 = 0; i < 
¸ed
->
vc_˙t
; i++ ) {

583 
vc
 = 
¸ed
->vc[
i
];

588 i‡–!
_voq
[
öput
][
vc
].
	`em±y
–Ë&& !
_a˘ive_vc
[input][vc] ) {

589 
f
 = 
_voq
[
öput
][
vc
].
	`‰⁄t
( );

591 i‡––
f
->
hód
 && 
_buf_°©es
[
öput
]->
	`IsAvaûabÀF‹
–
vc
 ) ) ||

592 –!
f
->
hód
 && !
_buf_°©es
[
öput
]->
	`IsFuŒF‹
–
vc
 ) ) ) {

593 
_a˘ive_li°
[
öput
].
	`push_back
–
vc
 );

594 
_a˘ive_vc
[
öput
][
vc
] = 
åue
;

599 
dñëe
 
¸ed
;

609 i‡–!
_∑πül_∑ckës
[
öput
][0].
	`em±y
( ) ) {

611 
de°
 = -1;

613 
boﬁ
 
wa£m±y
 = 
Ál£
;

616  !
_∑πül_∑ckës
[
öput
][0].
	`em±y
( ) ) {

617 
f
 = 
_∑πül_∑ckës
[
öput
][0].
	`‰⁄t
( );

618 
_∑πül_∑ckës
[
öput
][0].
	`p›_‰⁄t
( );

619 
	`time_ve˘‹_upd©e_i˙t_öje˘ed
(
f
->
d©a
, 
öput
);

621 i‡–
f
->
hód
 ) {

622 
de°
 = 
f
->dest;

623 
wa£m±y
 = 
_voq
[
öput
][
de°
].
	`em±y
( );

626 i‡–
de°
 == -1 ) {

627 
	`Eº‹
( "Didn't see head flit in VOQ injection" );

630 
f
->
de°
 = dest;

631 
f
->
vc
 = 
de°
;

633 
_voq
[
öput
][
de°
].
	`push_back
–
f
 );

638 i‡–
wa£m±y
 &&

639 –!
_a˘ive_vc
[
öput
][
de°
] ) &&

640 –
_buf_°©es
[
öput
]->
	`IsAvaûabÀF‹
–
de°
 ) ) ) {

641 
_a˘ive_li°
[
öput
].
	`push_back
–
de°
 );

642 
_a˘ive_vc
[
öput
][
de°
] = 
åue
;

647 i‡–!
_a˘ive_li°
[
öput
].
	`em±y
( ) ) {

649 
de°
 = 
_a˘ive_li°
[
öput
].
	`‰⁄t
( );

650 
_a˘ive_li°
[
öput
].
	`p›_‰⁄t
( );

652 i‡–
_voq
[
öput
][
de°
].
	`em±y
( ) ) {

653 
	`Eº‹
( "VOQ markedásáctive, butÉmpty" );

656 
f
 = 
_voq
[
öput
][
de°
].
	`‰⁄t
( );

657 
_voq
[
öput
][
de°
].
	`p›_‰⁄t
( );

659 i‡–
f
->
hód
 ) {

660 
_buf_°©es
[
öput
]->
	`TakeBuf„r
–
de°
 );

663 
_buf_°©es
[
öput
]->
	`SídögFlô
–
f
 );

664 
_√t
->
	`WrôeFlô
–
f
, 
öput
 );

668 i‡––
f
->
èû
 && 
_buf_°©es
[
öput
]->
	`IsAvaûabÀF‹
–
de°
 ) ) ||

669 –!
f
->
èû
 && !
_buf_°©es
[
öput
]->
	`IsFuŒF‹
–
de°
 ) ) ) {

670 
_a˘ive_li°
[
öput
].
	`push_back
–
de°
 );

672 
_a˘ive_vc
[
öput
][
de°
] = 
Ál£
;

676 
_√t
->
	`WrôeFlô
–0, 
öput
 );

679 
	}
}

681 
Flô
 *
	gTøfficM™agî
::
	$_RódROB
–
de°
 )

683 
§c
;

684 
Flô
 *
f
;

686 
§c
 = 
_rob_¥i
[
de°
];

687 
f
 = 0;

689  
i
 = 0; i < 
_sour˚s
; ++i ) {

691 i‡–!
_rob
[
§c
][
de°
].
	`em±y
( ) ) {

692 
f
 = 
_rob
[
§c
][
de°
].
	`t›
( );

694 i‡–
f
->
¢
 =
_rob_sqn
[
§c
][
de°
] ) {

695 
_rob
[
§c
][
de°
].
	`p›
( );

696 
_rob_sqn
[
§c
][
de°
]++;

697 
_rob_¥i
[
de°
] = ( 
§c
 + 1 ) % 
_sour˚s
;

700 
f
 = 0;

704 
§c
 = ( sr¯+ 1 ) % 
_sour˚s
;

707  
f
;

708 
	}
}

710 
	gTøfficM™agî
::
	$_Sãp
( )

712 
Flô
 *
f
;

713 
Cªdô
 *
¸ed
;

716 i‡–
_voqög
 ) {

717 
	`_VOQInje˘
( );

719 
	`_CœssInje˘
( );

724 
_√t
->
	`RódI≈uts
( );

726 
_∑πül_öã∫Æ_cy˛es
 +
_öã∫Æ_•ìdup
;

727  
_∑πül_öã∫Æ_cy˛es
 >= 1.0 ) {

728 
_√t
->
	`I¡î«lSãp
( );

729 
_∑πül_öã∫Æ_cy˛es
 -= 1.0;

732 
_√t
->
	`WrôeOuçuts
( );

734 ++
_time
;

737 
Flô
 *
œ°_vÆid_Êô
;

738  
ouçut
 = 0; ouçuà< 
_de°s
; ++output ) {

739 
f
 = 
_√t
->
	`RódFlô
–
ouçut
 );

741 i‡–
f
 ) {

742 i‡(1 || 
f
->
èû
) {

743 
	`wrôe_out_buf
(
ouçut
, 
f
);

744 i‡–
f
->
w©ch
 ) {

745 
cout
 << "SíàÊô " << 
f
->
id
 << "Åÿouçuàbuf„∏" << 
ouçut
 << 
ídl
;

746 
cout
 << " NŸ sídögÅhê¸edô yë! " <<
ídl
;

749 i‡–
f
->
w©ch
 ) {

750 
cout
 << "eje˘ed flô " << 
f
->
id
 << "áàouçuà" << 
ouçut
 << 
ídl
;

751 
cout
 << "£ndög cªdô f‹ " << 
f
->
vc
 << 
ídl
;

754 i‡–
_ª‹dî
 ) {

755 i‡–
f
->
w©ch
 ) {

756 
cout
 << "addög flô " << 
f
->
id
 << "Åÿª‹dî buf„r" << 
ídl
;

757 
cout
 << "Êô'†SN i†" << 
f
->
¢
 << " buffer's SN is "

758 << 
_rob_sqn
[
f
->
§c
][f->
de°
] << 
ídl
;

761 i‡–
f
->
¢
 > 
_rob_sqn_max
[f->
§c
][f->
de°
] ) {

762 
_rob_sqn_max
[
f
->
§c
][f->
de°
] = f->
¢
;

765 i‡–
f
->
hód
 ) {

766 
_rob_size
->
	`AddSam∂e
–
f
->
¢
 - 
_rob_sqn
[f->
§c
][f->
de°
] );

769 
f
->
rob_time
 = 
_time
;

770 
_rob
[
f
->
§c
][
ouçut
].
	`push
( f );

772 
	`_RëúeFlô
–
f
, 
ouçut
 );

773 i‡–!
_em±y_√tw‹k
 ) {

774 
_ac˚±ed_∑ckës
[
ouçut
]->
	`AddSam∂e
( 1 );

779 
	`å™s„r2bound¨y_buf
–
ouçut
 );

780 i‡(!
¸edô_ªtu∫_queue
[
ouçut
].
	`em±y
()) {

781 
œ°_vÆid_Êô
 = 
¸edô_ªtu∫_queue
[
ouçut
].
	`‰⁄t
();

782 
¸edô_ªtu∫_queue
[
ouçut
].
	`p›
();

784 
œ°_vÆid_Êô
=
NULL
;

786 i‡(
œ°_vÆid_Êô
) {

789 
¸ed
 = 
√w
 
	`Cªdô
( 1 );

790 
¸ed
->
vc
[0] =
œ°_vÆid_Êô
->vc;

791 
¸ed
->
vc_˙t
 = 1;

792 
¸ed
->
hód
 = 
œ°_vÆid_Êô
->head;

793 
¸ed
->
èû
 =
œ°_vÆid_Êô
->tail;

795 
_√t
->
	`WrôeCªdô
–
¸ed
, 
ouçut
 );

796 i‡(
œ°_vÆid_Êô
->
w©ch
) {

797 
cout
 <<"WE WROTE A CREDIT f‹ flô "<<
œ°_vÆid_Êô
->
id
<<"Tÿouçuà"<<
ouçut
<< 
ídl
;

799 
	`_RëúeFlô
(
œ°_vÆid_Êô
, 
ouçut
 );

800 i‡–!
_em±y_√tw‹k
 ) {

801 
_ac˚±ed_∑ckës
[
ouçut
]->
	`AddSam∂e
( 1 );

804 
_√t
->
	`WrôeCªdô
–0, 
ouçut
 );

806 i‡–!
_ª‹dî
 && !
_em±y_√tw‹k
) {

807 
_ac˚±ed_∑ckës
[
ouçut
]->
	`AddSam∂e
( 0 );

811 i‡–
_ª‹dî
 ) {

812 
f
 = 
	`_RódROB
–
ouçut
 );

814 i‡–
f
 ) {

815 i‡–
f
->
w©ch
 ) {

816 
cout
 << "Êô " << 
f
->
id
 << "Ñemoved from ROBáàouçuà" << 
ouçut
 << 
ídl
;

819 
	`_RëúeFlô
–
f
, 
ouçut
 );

820 i‡–!
_em±y_√tw‹k
 ) {

821 
_ac˚±ed_∑ckës
[
ouçut
]->
	`AddSam∂e
( 1 );

824 i‡–!
_em±y_√tw‹k
 ) {

825 
_ac˚±ed_∑ckës
[
ouçut
]->
	`AddSam∂e
( 0 );

830 
	}
}

832 
boﬁ
 
	gTøfficM™agî
::
	$_PackësOut°™dög
( ) const

834 
boﬁ
 
out°™dög
;

836 i‡–
_mósuªd_ö_Êight
 == 0 ) {

837 
out°™dög
 = 
Ál£
;

839 i‡–
_u£_œggög
 ) {

840  
c
 = 0; c < 
_˛as£s
; ++c ) {

841  
s
 = 0; s < 
_sour˚s
; ++s ) {

842 i‡–!
_qdøöed
[
s
][
c
] ) {

843 #ifde‡
DEBUG_DRAIN


844 
cout
 << "waôög o¿queuê" << 
s
 << " cœs†" << 
c
;

845 
cout
 << ",Åimê" << 
_time
 << " qtimê" << 
_qtime
[
s
][
c
] << 
ídl
;

847 
out°™dög
 = 
åue
;

851 i‡–
out°™dög
 ) {

857 #ifde‡
DEBUG_DRAIN


858 
cout
 << "ö flighà" << 
_mósuªd_ö_Êight
 << 
ídl
;

860 
out°™dög
 = 
åue
;

863  
out°™dög
;

864 
	}
}

866 
	gTøfficM™agî
::
	$_CÀ¨Sèts
( )

868  
c
 = 0; c < 
_˛as£s
; ++c ) {

869 
_œãncy_°©s
[
c
]->
	`CÀ¨
( );

872  
i
 = 0; i < 
_de°s
; ++i ) {

873 
_ac˚±ed_∑ckës
[
i
]->
	`CÀ¨
( );

874 
_∑ú_œãncy
[
i
]->
	`CÀ¨
( );

877 i‡–
_ª‹dî
 ) {

878 
_rob_œãncy
->
	`CÀ¨
( );

879 
_rob_size
->
	`CÀ¨
( );

881 
	}
}

883 
	gTøfficM™agî
::
	$_CompuãAc˚±ed
–*
avg
, *
mö
 ) const

885 
dmö
;

887 *
mö
 = 1.0;

888 *
avg
 = 0.0;

890  
d
 = 0; d < 
_de°s
; ++d ) {

891 i‡–
_ac˚±ed_∑ckës
[
d
]->
	`Avîage
–Ë< *
mö
 ) {

892 *
mö
 = 
_ac˚±ed_∑ckës
[
d
]->
	`Avîage
( );

893 
dmö
 = 
d
;

895 *
avg
 +
_ac˚±ed_∑ckës
[
d
]->
	`Avîage
( );

898 *
avg
 /()
_de°s
;

900  
dmö
;

901 
	}
}

903 
	gTøfficM™agî
::
	$_Di•œyRemaöög
( ) const

905 
m≠
<, 
boﬁ
>::
c⁄°_ôî©‹
 
ôî
;

906 
i
;

908 
cout
 << "Remaöög flô†(" << 
_mósuªd_ö_Êight
 << " measurementÖackets) : ";

909  
ôî
 = 
_ö_Êight
.
	`begö
–), 
i
 = 0;

910 –
ôî
 !
_ö_Êight
.
	`íd
–ËË&& ( 
i
 < 20 );

911 
ôî
++, 
i
++ ) {

912 
cout
 << 
ôî
->
fú°
 << " ";

914 
cout
 << 
ídl
;

915 
	}
}

918 
	gTøfficM™agî
::
	$I˙tInôPîGrid
 (
time
)

920 
_time
 = 
time
 ;

921 i‡–
_u£_œggög
 ) {

922  
s
 = 0; s < 
_sour˚s
; ++s ) {

923  
c
 = 0; c < 
_˛as£s
; ++c ) {

924 
_qtime
[
s
][
c
] = 
_time
;

925 
_qdøöed
[
s
][
c
] = 
Ál£
;

930 i‡–
_voqög
 ) {

931  
s
 = 0; s < 
_sour˚s
; ++s ) {

932  
d
 = 0; d < 
_de°s
; ++d ) {

933 
_a˘ive_vc
[
s
][
d
] = 
Ál£
;

937 
_sim_°©e
 = 
ru¬ög
;

938 
	`_CÀ¨Sèts
( );

939 
	}
}

941 
boﬁ
 
	gTøfficM™agî
::
	$_SögÀSim
( )

943 
ôî
;

944 
tŸÆ_pha£s
;

945 
c⁄vîged
;

946 
max_out°™dög
;

947 
em±y_°ïs
;

949 
cur_œãncy
;

950 
¥ev_œãncy
;

952 
cur_ac˚±ed
;

953 
¥ev_ac˚±ed
;

955 
w¨mup_thªshﬁd
;

956 
°›pög_thªshﬁd
;

957 
acc_°›pög_thªshﬁd
;

959 
mö
, 
avg
;

961 
boﬁ
 
˛ór_œ°
;

963 
_time
 = 0;

965 i‡–
_u£_œggög
 ) {

966  
s
 = 0; s < 
_sour˚s
; ++s ) {

967  
c
 = 0; c < 
_˛as£s
; ++c ) {

968 
_qtime
[
s
][
c
] = 0;

969 
_qdøöed
[
s
][
c
] = 
Ál£
;

974 i‡–
_voqög
 ) {

975  
s
 = 0; s < 
_sour˚s
; ++s ) {

976  
d
 = 0; d < 
_de°s
; ++d ) {

977 
_a˘ive_vc
[
s
][
d
] = 
Ál£
;

982 
°›pög_thªshﬁd
 = 0.01;

983 
acc_°›pög_thªshﬁd
 = 0.01;

984 
w¨mup_thªshﬁd
 = 0.05;

985 
ôî
 = 0;

986 
c⁄vîged
 = 0;

987 
max_out°™dög
 = 0;

988 
tŸÆ_pha£s
 = 0;

995 
_sim_°©e
 = 
w¨mög_up
;

996 
tŸÆ_pha£s
 = 0;

997 
¥ev_œãncy
 = 0;

998 
¥ev_ac˚±ed
 = 0;

1000 
	`_CÀ¨Sèts
( );

1001 
˛ór_œ°
 = 
Ál£
;

1003  ( 
tŸÆ_pha£s
 < 
_max_ßm∂es
 ) &&

1004 ––
_sim_°©e
 !
ru¬ög
 ) ||

1005 –
c⁄vîged
 < 3 ) ) ) {

1007 i‡–
˛ór_œ°
 || ( ( 
_sim_°©e
 =
w¨mög_up
 ) && ( (
tŸÆ_pha£s
 & 0x1) == 0 ) ) ) {

1008 
˛ór_œ°
 = 
Ál£
;

1009 
	`_CÀ¨Sèts
( );

1012  
ôî
 = 0; iã∏< 
_ßm∂e_≥riod
; ++iter ) {

1013 
	`_Sãp
( );

1016 
cout
 << "%=================================" << 
ídl
;

1018 
dmö
;

1020 
cur_œãncy
 = 
_œãncy_°©s
[0]->
	`Avîage
( );

1021 
dmö
 = 
	`_CompuãAc˚±ed
–&
avg
, &
mö
 );

1022 
cur_ac˚±ed
 = 
avg
;

1024 
cout
 << "% Avîagêœãncy = " << 
cur_œãncy
 << 
ídl
;

1026 i‡–
_ª‹dî
 ) {

1027 
cout
 << "% Re‹dîÜ©ícy = " << 
_rob_œãncy
->
	`Avîage
–Ë<< 
ídl
;

1028 
cout
 << "% Re‹dî sizê" << 
_rob_size
->
	`Avîage
–Ë<< 
ídl
;

1031 
cout
 << "% Ac˚±edÖackë†" << 
mö
 << "áànodê" << 
dmö
 << " (avg = " << 
avg
 << ")" << 
ídl
;

1033 i‡–
MATLAB_OUTPUT
 ) {

1034 
cout
 << "œt(" << 
tŸÆ_pha£s
 + 1 << "Ë" << 
cur_œãncy
 << ";" << 
ídl
;

1035 
cout
 << "thru(" << 
tŸÆ_pha£s
 + 1 << ",:) = [ ";

1036  
d
 = 0; d < 
_de°s
; ++d ) {

1037 
cout
 << 
_ac˚±ed_∑ckës
[
d
]->
	`Avîage
( ) << " ";

1039 
cout
 << "];" << 
ídl
;

1043 i‡––
_sim_mode
 =
œãncy
 ) && ( 
cur_œãncy
 >
_œãncy_thªs
 ) ) {

1044 
cout
 << "Avîagêœãncy i†gëtög huge" << 
ídl
;

1045 
c⁄vîged
 = 0;

1046 
_sim_°©e
 = 
w¨mög_up
;

1050 
cout
 << "%Ü©ícy ch™gê = " << 
	`Ábs
––
cur_œãncy
 - 
¥ev_œãncy
 ) / cur_œãncy ) << 
ídl
;

1051 
cout
 << "%Åhroughpuàch™gê" << 
	`Ábs
––
cur_ac˚±ed
 - 
¥ev_ac˚±ed
 ) / cur_ac˚±ed ) << 
ídl
;

1053 i‡–
_sim_°©e
 =
w¨mög_up
 ) {

1055 i‡–
_w¨mup_≥riods
 == 0 ) {

1056 i‡–
_sim_mode
 =
œãncy
 ) {

1057 i‡––
	`Ábs
––
cur_œãncy
 - 
¥ev_œãncy
 ) / cur_œãncy ) < 
w¨mup_thªshﬁd
 ) &&

1058 –
	`Ábs
––
cur_ac˚±ed
 - 
¥ev_ac˚±ed
 ) / cur_ac˚±ed ) < 
w¨mup_thªshﬁd
 ) ) {

1059 
cout
 << "% W¨med u∞..." << 
ídl
;

1060 
˛ór_œ°
 = 
åue
;

1061 
_sim_°©e
 = 
ru¬ög
;

1064 i‡–
	`Ábs
––
cur_ac˚±ed
 - 
¥ev_ac˚±ed
 ) / cur_ac˚±ed ) < 
w¨mup_thªshﬁd
 ) {

1065 
cout
 << "% W¨med u∞..." << 
ídl
;

1066 
˛ór_œ°
 = 
åue
;

1067 
_sim_°©e
 = 
ru¬ög
;

1071 i‡–
tŸÆ_pha£s
 + 1 >
_w¨mup_≥riods
 ) {

1072 
cout
 << "% W¨med u∞..." << 
ídl
;

1073 
˛ór_œ°
 = 
åue
;

1074 
_sim_°©e
 = 
ru¬ög
;

1077 } i‡–
_sim_°©e
 =
ru¬ög
 ) {

1078 i‡–
_sim_mode
 =
œãncy
 ) {

1079 i‡––
	`Ábs
––
cur_œãncy
 - 
¥ev_œãncy
 ) / cur_œãncy ) < 
°›pög_thªshﬁd
 ) &&

1080 –
	`Ábs
––
cur_ac˚±ed
 - 
¥ev_ac˚±ed
 ) / cur_ac˚±ed ) < 
acc_°›pög_thªshﬁd
 ) ) {

1081 ++
c⁄vîged
;

1083 
c⁄vîged
 = 0;

1086 i‡–
	`Ábs
––
cur_ac˚±ed
 - 
¥ev_ac˚±ed
 ) / cur_ac˚±ed ) > 
acc_°›pög_thªshﬁd
 ) {

1087 
c⁄vîged
 = 0;

1092 
¥ev_œãncy
 = 
cur_œãncy
;

1093 
¥ev_ac˚±ed
 = 
cur_ac˚±ed
;

1095 ++
tŸÆ_pha£s
;

1098 i‡–
_sim_°©e
 =
ru¬ög
 ) {

1099 ++
c⁄vîged
;

1101 i‡–
_sim_mode
 =
œãncy
 ) {

1102 
cout
 << "% DøöögáŒÑec‹dedÖackë†..." << 
ídl
;

1103 
_sim_°©e
 = 
døöög
;

1104 
_døö_time
 = 
_time
;

1105 
em±y_°ïs
 = 0;

1106  
	`_PackësOut°™dög
( ) ) {

1107 
	`_Sãp
( );

1108 ++
em±y_°ïs
;

1110 i‡–
em±y_°ïs
 % 1000 == 0 ) {

1111 
	`_Di•œyRemaöög
( );

1116 
cout
 << "Toÿm™y sam∂ê≥riod†√ededÅÿc⁄vîge" << 
ídl
;

1120 
cout
 << "% DøöögÑemaöögÖackë†..." << 
ídl
;

1121 
_em±y_√tw‹k
 = 
åue
;

1122 
em±y_°ïs
 = 0;

1123  
_tŸÆ_ö_Êight
 > 0 ) {

1124 
	`_Sãp
( );

1125 ++
em±y_°ïs
;

1127 i‡–
em±y_°ïs
 % 1000 == 0 ) {

1128 
	`_Di•œyRemaöög
( );

1131 
_em±y_√tw‹k
 = 
Ál£
;

1133 –
c⁄vîged
 > 0 );

1134 
	}
}

1136 
	gTøfficM™agî
::
	$SëDøöSèã
( )

1138 
_sim_°©e
 = 
døöög
;

1139 
_døö_time
 = 
_time
;

1141 
	}
}

1143 
	gTøfficM™agî
::
	$ShowOvîÆSèt
( )

1145 
c
;

1147  
c
 = 0; c < 
_˛as£s
; ++c ) {

1148 
cout
 << "=======Tøffic["<<
uid
<<"]˛ass" << 
c
 << " ======" << 
ídl
;

1150 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << "OvîÆ»avîagêœãncy = " << 
_ovîÆl_œãncy
[c]->
	`Avîage
( )

1151 << " (" << 
_ovîÆl_œãncy
[
c
]->
	`NumSam∂es
–Ë<< " sam∂es)" << 
ídl
;

1153 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << "OvîÆ»avîagêac˚±edÑ©ê" << 
_ovîÆl_ac˚±ed
->
	`Avîage
( )

1154 << " (" << 
_ovîÆl_ac˚±ed
->
	`NumSam∂es
–Ë<< " sam∂es)" << 
ídl
;

1156 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << "OvîÆ»möác˚±edÑ©ê" << 
_ovîÆl_ac˚±ed_mö
->
	`Avîage
( )

1157 << " (" << 
_ovîÆl_ac˚±ed_mö
->
	`NumSam∂es
–Ë<< " sam∂es)" << 
ídl
;

1159 i‡–
DISPLAY_LAT_DIST
 ) {

1160 
_œãncy_°©s
[
c
]->
	`Di•œy
( );

1164 i‡–
_ª‹dî
 ) {

1165 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << "OvîÆ»avîagêª‹dîÜ©ícy = " << 
_rob_œãncy
->
	`Avîage
–Ë<< 
ídl
;

1166 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << "OvîÆ»avîagêª‹dî sizê- " << 
_rob_size
->
	`Avîage
–Ë<< 
ídl
;

1168 i‡–
DISPLAY_LAT_DIST
 ) {

1169 
_rob_œãncy
->
	`Di•œy
( );

1170 
_rob_size
->
	`Di•œy
( );

1174 i‡–
DISPLAY_HOP_DIST
 ) {

1175 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << "Avîagêh›†" << 
_h›_°©s
->
	`Avîage
( )

1176 << " (" << 
_h›_°©s
->
	`NumSam∂es
–Ë<< " sam∂es)" << 
ídl
;

1178 
_h›_°©s
->
	`Di•œy
( );

1181 i‡–
DISPLAY_PAIR_LATENCY
 ) {

1182  
i
 = 0; i < 
_de°s
; ++i ) {

1183 
cout
 << "Tøffic["<<
uid
<<"]˛ass" << 
c
 << " Avîagêtÿ" << 
i
 << " = " << 
_∑ú_œãncy
[i]->
	`Avîage
( ) << "( "

1184 << 
_∑ú_œãncy
[
i
]->
	`NumSam∂es
–Ë<< " sam∂es)" << 
ídl
;

1185 
_∑ú_œãncy
[
i
]->
	`Di•œy
( );

1188 
	}
}

1190 
	gTøfficM™agî
::
	$ShowSèts
()

1192 
mö
, 
avg
;

1194 
tŸÆ_pha£s
;

1196 
cur_œãncy
;

1197 
¥ev_œãncy
;

1199 
cur_ac˚±ed
;

1200 
¥ev_ac˚±ed
;

1203 
cout
 << "%=================================" << 
ídl
;

1205 
cur_œãncy
 = 
_œãncy_°©s
[0]->
	`Avîage
( );

1206 
dmö
 = 
	`_CompuãAc˚±ed
–&
avg
, &
mö
 );

1207 
cur_ac˚±ed
 = 
avg
;

1209 
cout
 << "% Avîagêœãncy = " << 
cur_œãncy
 << 
ídl
;

1211 i‡–
_ª‹dî
 ) {

1212 
cout
 << "% Re‹dîÜ©ícy = " << 
_rob_œãncy
->
	`Avîage
–Ë<< 
ídl
;

1213 
cout
 << "% Re‹dî sizê" << 
_rob_size
->
	`Avîage
–Ë<< 
ídl
;

1216 
cout
 << "% Ac˚±edÖackë†" << 
mö
 << "áànodê" << 
dmö
 << " (avg = " << 
avg
 << ")" << 
ídl
;

1218 i‡–
MATLAB_OUTPUT
 ) {

1219 
cout
 << "œt(" << 
tŸÆ_pha£s
 + 1 << "Ë" << 
cur_œãncy
 << ";" << 
ídl
;

1220 
cout
 << "thru(" << 
tŸÆ_pha£s
 + 1 << ",:) = [ ";

1221  
d
 = 0; d < 
_de°s
; ++d ) {

1222 
cout
 << 
_ac˚±ed_∑ckës
[
d
]->
	`Avîage
( ) << " ";

1224 
cout
 << "];" << 
ídl
;

1227 
cout
 << "%Ü©ícy ch™gê = " << 
	`Ábs
––
cur_œãncy
 - 
¥ev_œãncy
 ) / cur_œãncy ) << 
ídl
;

1228 
cout
 << "%Åhroughpuàch™gê" << 
	`Ábs
––
cur_ac˚±ed
 - 
¥ev_ac˚±ed
 ) / cur_ac˚±ed ) << 
ídl
;

1230 
¥ev_œãncy
 = 
cur_œãncy
;

1231 
¥ev_ac˚±ed
 = 
cur_ac˚±ed
;

1232 
tŸÆ_pha£s
++;

1237  
c
 = 0; c < 
_˛as£s
; ++c ) {

1238 
_ovîÆl_œãncy
[
c
]->
	`AddSam∂e
–
_œãncy_°©s
[c]->
	`Avîage
( ) );

1242 
_ovîÆl_ac˚±ed
->
	`AddSam∂e
–
avg
 );

1243 
_ovîÆl_ac˚±ed_mö
->
	`AddSam∂e
–
mö
 );

1249 
	}
}

	@src/intersim/vc.cpp

1 
	~"booksim.hµ
"

2 
	~"vc.hµ
"

4 
	gVC
::
	$öô
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
, 
ouçuts
 )

6 
	`_Inô
–
c⁄fig
, 
ouçuts
 );

7 
	}
}

9 
	gVC
::
	$VC
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
, 
ouçuts
,

10 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
 ) :

11 
	$ModuÀ
–
∑ª¡
, 
«me
 )

13 
	`_Inô
–
c⁄fig
, 
ouçuts
 );

14 
	}
}

16 
	gVC
::~
	$VC
( )

18 
	}
}

20 
VC
::
	$_Inô
–c⁄° 
C⁄figuøti⁄
& 
c⁄fig
, 
ouçuts
 )

22 
_°©e
 = 
idÀ
;

23 
_°©e_time
 = 0;

25 
_size
 = –
c⁄fig
.
	`GëI¡
( "vc_buf_size" ) );

27 
_rouã_£t
 = 
√w
 
	`OuçutSë
–
ouçuts
 );

29 
_occupõd_˙t
 = 0;

31 
_tŸÆ_cy˛es
 = 0;

32 
_vc_Æloc_cy˛es
 = 0;

33 
_a˘ive_cy˛es
 = 0;

34 
_idÀ_cy˛es
 = 0;

36 
_¥i
 = 0;

38 
_w©ched
 = 
Ál£
;

39 
	}
}

41 
boﬁ
 
	gVC
::
	$AddFlô
–
Flô
 *
f
 )

43 
boﬁ
 
suc˚ss
 = 
Ál£
;

45 i‡–()
_buf„r
.
	`size
–Ë!
_size
 ) {

46 
_buf„r
.
	`push
–
f
 );

47 
suc˚ss
 = 
åue
;

50  
suc˚ss
;

51 
	}
}

53 
Flô
 *
	gVC
::
	$Fr⁄tFlô
( )

55 
Flô
 *
f
;

57 i‡–!
_buf„r
.
	`em±y
( ) ) {

58 
f
 = 
_buf„r
.
	`‰⁄t
( );

60 
f
 = 0;

63  
f
;

64 
	}
}

66 
Flô
 *
	gVC
::
	$RemoveFlô
( )

68 
Flô
 *
f
;

70 i‡–!
_buf„r
.
	`em±y
( ) ) {

71 
f
 = 
_buf„r
.
	`‰⁄t
( );

72 
_buf„r
.
	`p›
( );

74 
f
 = 0;

77  
f
;

78 
	}
}

80 
boﬁ
 
	gVC
::
	$Em±y
( ) const

82  
_buf„r
.
	`em±y
( );

83 
	}
}

85 
	gVC
::
eVCSèã
 
VC
::
	$GëSèã
( ) const

87  
_°©e
;

88 
	}
}

90 
	gVC
::
	$GëSèãTime
( ) const

92  
_°©e_time
;

93 
	}
}

95 
	gVC
::
	$SëSèã
–
eVCSèã
 
s
 )

97 
_°©e
 = 
s
;

98 
_°©e_time
 = 0;

100 i‡–
s
 =
a˘ive
 ) {

101 
Flô
 *
f
;

103 
f
 = 
	`Fr⁄tFlô
( );

104 i‡–
f
 ) {

105 
_¥i
 = 
f
->
¥i
;

108 
_occupõd_˙t
++;

110 
	}
}

112 c⁄° 
OuçutSë
 *
	gVC
::
	$GëRouãSë
( ) const

114  
_rouã_£t
;

115 
	}
}

117 
	gVC
::
	$SëOuçut
–
p‹t
, 
vc
 )

119 
_out_p‹t
 = 
p‹t
;

120 
_out_vc
 = 
vc
;

121 
	}
}

123 
	gVC
::
	$GëOuçutP‹t
( ) const

125  
_out_p‹t
;

126 
	}
}

128 
	gVC
::
	$GëOuçutVC
( ) const

130  
_out_vc
;

131 
	}
}

133 
	gVC
::
	$GëPri‹ôy
( ) const

135  
_¥i
;

136 
	}
}

138 
	gVC
::
	$Rouã
–
tRoutögFun˘i⁄
 
rf
, c⁄° 
Rouãr
* 
rouãr
, c⁄° 
Flô
* 
f
, 
ö_ch™√l
 )

140 
	`rf
–
rouãr
, 
f
, 
ö_ch™√l
, 
_rouã_£t
, 
Ál£
 );

141 
	}
}

143 
	gVC
::
	$Adv™˚Time
( )

145 
_°©e_time
++;

147 
_tŸÆ_cy˛es
++;

148  
_°©e
 ) {

149 
idÀ
 : 
_idÀ_cy˛es
++; ;

150 
a˘ive
 : 
_a˘ive_cy˛es
++; ;

151 
vc_Æloc
 : 
_vc_Æloc_cy˛es
++; ;

152 
routög
 : ;

154 
	}
}

158 
	gVC
::
	$SëW©ch
–
boﬁ
 
w©ch
 )

160 
_w©ched
 = 
w©ch
;

161 
	}
}

163 
boﬁ
 
	gVC
::
	$IsW©ched
( ) const

165  
_w©ched
;

166 
	}
}

168 
	gVC
::
	$Di•œy
( ) const

170 
cout
 << 
_fuŒ«me
 << " : "

171 << "idÀ " << 100.0 * ()
_idÀ_cy˛es
 / ()
_tŸÆ_cy˛es
 << "% "

172 << "vc_Ælo¯" << 100.0 * ()
_vc_Æloc_cy˛es
 / ()
_tŸÆ_cy˛es
 << "% "

173 << "a˘ivê" << 100.0 * ()
_a˘ive_cy˛es
 / ()
_tŸÆ_cy˛es
 << "% "

174 << 
ídl
;

175 
	}
}

	@src/intersim/wavefront.cpp

1 
	~"booksim.hµ
"

2 
	~<io°ªam
>

4 
	~"wave‰⁄t.hµ
"

5 
	~"øndom_utûs.hµ
"

7 
	gWave‰⁄t
::
	$Wave‰⁄t
–c⁄° 
C⁄figuøti⁄
 &
c⁄fig
,

8 
ModuÀ
 *
∑ª¡
, c⁄° 
°rög
& 
«me
,

9 
öputs
, 
ouçuts
 ) :

10 
	$Dí£AŒoˇt‹
–
c⁄fig
, 
∑ª¡
, 
«me
, 
öputs
, 
ouçuts
 )

13 
_squ¨e
 = ( 
_öputs
 > 
_ouçuts
 ) ? _inputs : _outputs;

16 
_¥i
 = 0;

17 
	}
}

19 
	gWave‰⁄t
::~
	$Wave‰⁄t
( )

21 
	}
}

23 
Wave‰⁄t
::
	$AŒoˇã
( )

25 
öput
;

26 
ouçut
;

30  
i
 = 0; i < 
_öputs
; ++i ) {

31 
_öm©ch
[
i
] = -1;

33  
j
 = 0; j < 
_ouçuts
; ++j ) {

34 
_outm©ch
[
j
] = -1;

39  
p
 = 0;Ö < 
_squ¨e
; ++p ) {

40 
ouçut
 = ( 
_¥i
 + 
p
 ) % 
_squ¨e
;

43  
öput
 = 0; i≈uà< 
_öputs
; ++input ) {

44 i‡––
ouçut
 < 
_ouçuts
 ) &&

45 –
_öm©ch
[
öput
] == -1 ) &&

46 –
_outm©ch
[
ouçut
] == -1 ) &&

47 –
_ªque°
[
öput
][
ouçut
].
œbñ
 != -1 ) ) {

49 
_öm©ch
[
öput
] = 
ouçut
;

50 
_outm©ch
[
ouçut
] = 
öput
;

53 
ouçut
 = ( ouçuà+ 1 ) % 
_squ¨e
;

58 
_¥i
 = ( _¥ò+ 1 ) % 
_squ¨e
;

59 
	}
}

	@src/option_parser.cc

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<as£π.h
>

31 
	~<°rög
>

32 
	~<io°ªam
>

33 
	~<iom™ù
>

34 
	~<s°ªam
>

35 
	~<f°ªam
>

36 
	~<ve˘‹
>

37 
	~<li°
>

38 
	~<m≠
>

39 
	~<°rög.h
>

41 
usög
 
«me•a˚
 
	g°d
;

44 ˛as†
	cO±i⁄Regi°ryI¡îÁ˚


46 
	mpublic
:

47 
	$O±i⁄Regi°ryI¡îÁ˚
(c⁄° 
°rög
 
›ti⁄Name
, c⁄° såög 
›ti⁄Desc
)

48 : 
	`m_›ti⁄Name
(
›ti⁄Name
), 
	$m_›ti⁄Desc
(
›ti⁄Desc
)

51 
vútuÆ
 ~
	$O±i⁄Regi°ryI¡îÁ˚
(Ë{
	}
}

53 c⁄° 
	g°rög
& 
	$GëName
(Ë{  
m_›ti⁄Name
; 
	}
}

54 c⁄° 
	g°rög
& 
	$GëDesc
(Ë{  
m_›ti⁄Desc
; 
	}
}

55 
vútuÆ
 
°rög
 
toSåög
() = 0;

56 
vútuÆ
 
boﬁ
 
‰omSåög
(c⁄° 
°rög
 
°r
) = 0;

57 
vútuÆ
 
boﬁ
 
isFœg
() = 0;

58 
vútuÆ
 
boﬁ
 
assignDeÁu…
(c⁄° *
°r
) = 0;

60 
	g¥iv©e
:

61 
°rög
 
m_›ti⁄Name
;

62 
°rög
 
	gm_›ti⁄Desc
;

66 
	gãm∂©e
 <
˛ass
 
	gT
>

67 ˛as†
	cO±i⁄Regi°ry
 : 
public
 
O±i⁄Regi°ryI¡îÁ˚


69 
public
:

70 
	$O±i⁄Regi°ry
(c⁄° 
°rög
 
«me
, c⁄° såög 
desc
, 
T
 &
v¨übÀ
)

71 : 
	`O±i⁄Regi°ryI¡îÁ˚
(
«me
, 
desc
), 
	$m_v¨übÀ
(
v¨übÀ
)

74 
vútuÆ
 ~
	$O±i⁄Regi°ry
(Ë{
	}
}

76 
vútuÆ
 
°rög
 
	$toSåög
()

78 
°rög°ªam
 
ss
;

79 
ss
 << 
m_v¨übÀ
;

80  
ss
.
	`°r
();

81 
	}
}

83 
vútuÆ
 
boﬁ
 
	$‰omSåög
(c⁄° 
°rög
 
°r
)

85 
°rög°ªam
 
	`ss
(
°r
);

86 
ss
.
	`ex˚±i⁄s
(
°rög°ªam
::
Áûbô
 | såög°ªam::
badbô
);

87 
ss
 << 
	`£tba£
(10);

88 i‡(
°r
.
	`size
() > 1 && str[0] == '0') {

89 i‡(
°r
.
	`size
() > 2 && str[1] == 'x') {

90 
ss
.
	`ign‹e
(2);

91 
ss
 << 
	`£tba£
(16);

93 
ss
.
	`ign‹e
(1);

94 
ss
 << 
	`£tba£
(8);

97 
åy
 {

98 
ss
 >> 
m_v¨übÀ
;

99 } 
	`ˇtch
 (
°rög°ªam
::
Áûuª
 &
e
) {

100  
Ál£
;

102  
åue
;

103 
	}
}

105 
vútuÆ
 
boﬁ
 
	$isFœg
(Ë{  
Ál£
; 
	}
}

106 
vútuÆ
 
boﬁ
 
	$assignDeÁu…
(c⁄° *
°r
Ë{  
	`‰omSåög
(°r); 
	}
}

108 
›î©‹
 
	$T
()

110  
m_v¨übÀ
;

111 
	}
}

113 
	g¥iv©e
:

114 
T
 &
m_v¨übÀ
;

118 
	gãm∂©e
<>

119 
boﬁ
 
	gO±i⁄Regi°ry
<
	g°rög
>::
	$‰omSåög
(c⁄° 
°rög
 
°r
)

121 
m_v¨übÀ
 = 
°r
;

122  
åue
;

123 
	}
}

126 
	gãm∂©e
<>

127 
boﬁ
 
	gO±i⁄Regi°ry
<*>::
	$‰omSåög
(c⁄° 
°rög
 
°r
)

129 
m_v¨übÀ
 = 
√w
 [
°r
.
	`size
() + 1];

130 
	`°r˝y
(
m_v¨übÀ
, 
°r
.
	`c_°r
());

131  
åue
;

132 
	}
}

135 
	gãm∂©e
<>

136 
boﬁ
 
	gO±i⁄Regi°ry
<*>::
	$assignDeÁu…
(c⁄° *
°r
)

138 
m_v¨übÀ
 = 
c⁄°_ˇ°
<*>(
°r
);

139  
åue
;

140 
	}
}

143 
	gãm∂©e
<>

144 
°rög
 
	gO±i⁄Regi°ry
<*>::
	$toSåög
()

146 
°rög°ªam
 
ss
;

147 i‡(
m_v¨übÀ
 !
NULL
) {

148 
ss
 << 
m_v¨übÀ
;

150 
ss
 << "NULL";

152  
ss
.
	`°r
();

153 
	}
}

156 
	gãm∂©e
<>

157 
boﬁ
 
	gO±i⁄Regi°ry
<
	gboﬁ
>::
	$‰omSåög
(c⁄° 
°rög
 
°r
)

159 
vÆue
 = 1;

160 
boﬁ
 
∑r£d
 = 
åue
;

161 
°rög°ªam
 
	`ss
(
°r
);

162 
ss
.
	`ex˚±i⁄s
(
°rög°ªam
::
Áûbô
 | såög°ªam::
badbô
);

163 
åy
 {

164 
ss
 >> 
vÆue
;

165 } 
	`ˇtch
 (
°rög°ªam
::
Áûuª
 &
ï
) {

166 
∑r£d
 = 
Ál£
;

168 
	`as£π
(
vÆue
 =0 
‹
 value == 1);

169 
m_v¨übÀ
 = (
vÆue
 != 0);

170  
∑r£d
;

171 
	}
}

174 
	gãm∂©e
<>

175 
boﬁ
 
	gO±i⁄Regi°ry
<
	gboﬁ
>::
	$isFœg
(Ë{  
åue
; 
	}
}

178 ˛as†
	cO±i⁄P¨£r


180 
	mpublic
:

181 
	$O±i⁄P¨£r
() {}

182 ~
	$O±i⁄P¨£r
()

184 
O±i⁄CﬁÀ˘i⁄
::
ôî©‹
 
i_›ti⁄
;

185 
i_›ti⁄
 = 
m_›ti⁄Reg
.
	`begö
(); i_›ti⁄ !m_›ti⁄Reg.
	`íd
(); ++i_option) {

186 
	`dñëe
 (*
i_›ti⁄
);

188 
	}
}

190 
	gãm∂©e
<
˛ass
 
	gT
>

191 
	$Regi°î
(c⁄° 
°rög
 
›ti⁄Name
, c⁄° såög 
›ti⁄Desc
, 
T
 &
›ti⁄V¨übÀ
, c⁄° *
›ti⁄DeÁu…
)

193 
O±i⁄Regi°ry
<
T
> *
p_›ti⁄
 = 
√w
 O±i⁄Regi°ry<T>(
›ti⁄Name
, 
›ti⁄Desc
, 
›ti⁄V¨übÀ
);

194 
m_›ti⁄Reg
.
	`push_back
(
p_›ti⁄
);

195 
m_›ti⁄M≠
[
›ti⁄Name
] = 
p_›ti⁄
;

196 
p_›ti⁄
->
	`assignDeÁu…
(
›ti⁄DeÁu…
);

197 
	}
}

199 
	$P¨£Comm™dLöe
(
¨gc
, c⁄° * c⁄° 
¨gv
[])

201 
i
 = 1; i < 
¨gc
; i++) {

202 
O±i⁄M≠
::
ôî©‹
 
i_›ti⁄
;

203 
boﬁ
 
›ti⁄Found
 = 
Ál£
;

205 
i_›ti⁄
 = 
m_›ti⁄M≠
.
	`föd
(
¨gv
[
i
]);

206 i‡(
i_›ti⁄
 !
m_›ti⁄M≠
.
	`íd
()) {

207 c⁄° *
¨g°r
 = (
i
 + 1 < 
¨gc
)? 
¨gv
[i + 1] : "";

208 
O±i⁄Regi°ryI¡îÁ˚
 *
p_›ti⁄
 = 
i_›ti⁄
->
£c⁄d
;

209 i‡(
p_›ti⁄
->
	`isFœg
()) {

210 i‡(
p_›ti⁄
->
	`‰omSåög
(
¨g°r
Ë=
åue
) {

211 
i
 += 1;

214 i‡(
p_›ti⁄
->
	`‰omSåög
(
¨g°r
Ë=
Ál£
) {

215 
	`Ârötf
(
°dîr
, "\n\nGPGPU-Sim ** ERROR: C™nŸÖ¨£ vÆuê'%s' f‹ o±i⁄ '%s'.\n", 
¨g°r
, 
¨gv
[
i
]);

216 
	`exô
(1);

218 
i
 += 1;

220 
›ti⁄Found
 = 
åue
;

221 } i‡(
	`°rög
(
¨gv
[
i
]) == "-config") {

222 i‡(
i
 + 1 >
¨gc
) {

223 
	`Ârötf
(
°dîr
, "\n\nGPGPU-Sim ** ERROR: Missing filename for option '-config'.\n");

224 
	`exô
(1);

226 
	`P¨£Fûe
(
¨gv
[
i
 + 1]);

227 
i
 += 1;

228 
›ti⁄Found
 = 
åue
;

231 i‡(
›ti⁄Found
 =
Ál£
) {

232 
	`Ârötf
(
°dîr
, "\n\nGPGPU-Sim ** ERROR: Unknow¿O±i⁄: '%s' \n", 
¨gv
[
i
]);

233 
	`exô
(1);

236 
	}
}

238 
	$P¨£Fûe
(c⁄° *
fûíame
) {

239 
if°ªam
 
öputFûe
;

240 
°rög°ªam
 
¨gs
;

244 
öputFûe
.
	`›í
(
fûíame
);

245 i‡(!
öputFûe
.
	`good
()) {

246 
	`Ârötf
(
°dîr
, "\n\nGPGPU-Sim ** ERROR: C™nŸ o≥¿c⁄fig fûê'%s'\n", 
fûíame
);

247 
	`exô
(1);

249 
öputFûe
.
	`good
()) {

250 
°rög
 
löe
;

251 
	`gëlöe
(
öputFûe
, 
löe
);

252 
size_t
 
commítSèπ
 = 
löe
.
	`föd_fú°_of
("#");

253 i‡(
commítSèπ
 !
löe
.
≈os
) {

254 
löe
.
	`îa£
(
commítSèπ
);

256 
¨gs
 << 
löe
 << ' ';

258 
öputFûe
.
	`˛o£
();

261 
ve˘‹
<*> 
¨gv
;

262 
¨gv
.
	`push_back
(
√w
 [6]);

263 
	`°r˝y
(
¨gv
[0], "dummy");

264 
¨gs
.
	`good
()) {

265 
°rög
 
¨gNew
;

266 
¨gs
 >> 
¨gNew
;

268 i‡(
¨gNew
.
	`size
() == 0) ;

270 i‡(
¨gNew
[0] == '"') {

271 
¨gs
.
	`good
(Ë&& 
¨gNew
[¨gNew.
	`size
()-1] != '"') {

272 
°rög
 
¨gC⁄t
;

273 
¨gs
 >> 
¨gC⁄t
;

274 
¨gNew
 +" " + 
¨gC⁄t
;

276 
¨gNew
.
	`îa£
(0,1);

277 
¨gNew
.
	`îa£
◊rgNew.
	`size
()-1);

280 *
c_¨gNew
 = 
√w
 [
¨gNew
.
	`size
() + 1];

281 
	`°r˝y
(
c_¨gNew
, 
¨gNew
.
	`c_°r
());

282 
¨gv
.
	`push_back
(
c_¨gNew
);

286 **
èrgv
 = (**)
	`ˇŒoc
(
¨gv
.
	`size
(), (*));

287  
k
=0; k < 
¨gv
.
	`size
(); k++ )

288 
èrgv
[
k
] = 
¨gv
[k];

289 
	`P¨£Comm™dLöe
(
¨gv
.
	`size
(), 
èrgv
);

290 
	`‰ì
(
èrgv
);

291 
size_t
 
i
 = 0; i < 
¨gv
.
	`size
(); i++) {

292 
dñëe
[] 
¨gv
[
i
];

294 
	}
}

296 
	$Pröt
(
FILE
 *
fout
)

298 
O±i⁄CﬁÀ˘i⁄
::
ôî©‹
 
i_›ti⁄
;

299 
i_›ti⁄
 = 
m_›ti⁄Reg
.
	`begö
(); i_›ti⁄ !m_›ti⁄Reg.
	`íd
(); ++i_option) {

300 
°rög°ªam
 
sout
;

301 
sout
 << 
	`£tw
(20Ë<< 
À·
 << (*
i_›ti⁄
)->
	`GëName
() << " ";

302 
sout
 << 
	`£tw
(20Ë<< 
right
 << (*
i_›ti⁄
)->
	`toSåög
() << " # ";

303 
sout
 << 
À·
 << (*
i_›ti⁄
)->
	`GëDesc
();

304 
sout
 << 
°d
::
ídl
;

305 
	`Ârötf
(
fout
, "%s", 
sout
.
	`°r
().
	`c_°r
());

307 
	}
}

309 
	g¥iv©e
:

310 
li°
<
	tO±i⁄Regi°ryI¡îÁ˚
*> 
	tO±i⁄CﬁÀ˘i⁄
;

311 
O±i⁄CﬁÀ˘i⁄
 
	gm_›ti⁄Reg
;

312 
	gm≠
<
	t°rög
, 
	tO±i⁄Regi°ryI¡îÁ˚
*> 
	tO±i⁄M≠
;

313 
O±i⁄M≠
 
	gm_›ti⁄M≠
;

316 
	~"›ti⁄_∑r£r.h
"

318 
›ti⁄_∑r£r_t
 
	$›ti⁄_∑r£r_¸óã
()

320 
O±i⁄P¨£r
 *
p_›r
 = 
√w
 
	`O±i⁄P¨£r
();

321  
ªöãΩªt_ˇ°
<
›ti⁄_∑r£r_t
>(
p_›r
);

322 
	}
}

324 
	$›ti⁄_∑r£r_de°roy
(
›ti⁄_∑r£r_t
 
›p
)

326 
O±i⁄P¨£r
 *
p_›r
 = 
ªöãΩªt_ˇ°
<O±i⁄P¨£∏*>(
›p
);

327 
dñëe
 
p_›r
;

328 
	}
}

330 
	$›ti⁄_∑r£r_ªgi°î
(
›ti⁄_∑r£r_t
 
›p
,

331 c⁄° *
«me
,

332 
›ti⁄_dty≥
 
ty≥
,

333 *
v¨übÀ
,

334 c⁄° *
desc
,

335 c⁄° *
deÁu…vÆue
)

337 
O±i⁄P¨£r
 *
p_›r
 = 
ªöãΩªt_ˇ°
<O±i⁄P¨£∏*>(
›p
);

338 
ty≥
) {

339 
OPT_INT32
: 
p_›r
->
Regi°î
<>(
«me
, 
desc
, *(*)
v¨übÀ
, 
deÁu…vÆue
); ;

340 
OPT_UINT32
: 
p_›r
->
Regi°î
<>(
«me
, 
desc
, *(*)
v¨übÀ
, 
deÁu…vÆue
); ;

341 
OPT_INT64
: 
p_›r
->
Regi°î
<>(
«me
, 
desc
, *(*)
v¨übÀ
, 
deÁu…vÆue
); ;

342 
OPT_UINT64
: 
p_›r
->
Regi°î
<>(
«me
, 
desc
, *(*)
v¨übÀ
, 
deÁu…vÆue
); ;

343 
OPT_BOOL
: 
p_›r
->
Regi°î
<
boﬁ
>(
«me
, 
desc
, *(boﬁ*)
v¨übÀ
, 
deÁu…vÆue
); ;

344 
OPT_FLOAT
: 
p_›r
->
Regi°î
<>(
«me
, 
desc
, *(*)
v¨übÀ
, 
deÁu…vÆue
); ;

345 
OPT_DOUBLE
: 
p_›r
->
Regi°î
<>(
«me
, 
desc
, *(*)
v¨übÀ
, 
deÁu…vÆue
); ;

346 
OPT_CSTR
: 
p_›r
->
Regi°î
<*>(
«me
, 
desc
, *(**)
v¨übÀ
, 
deÁu…vÆue
); ;

348 
	`Ârötf
(
°dîr
, "\n\nGPGPU-Sim ** ERROR: o±i⁄ d©®ty≥ (%dËnŸ suµ‹ãd!\n", 
ty≥
);

349 
	`exô
(1);

352 
	}
}

354 
	$›ti⁄_∑r£r_cmdlöe
(
›ti⁄_∑r£r_t
 
›p
,

355 
¨gc
, c⁄° *
¨gv
[])

357 
O±i⁄P¨£r
 *
p_›r
 = 
ªöãΩªt_ˇ°
<O±i⁄P¨£∏*>(
›p
);

358 
p_›r
->
	`P¨£Comm™dLöe
(
¨gc
,
¨gv
);

359 
	}
}

361 
	$›ti⁄_∑r£r_cfgfûe
(
›ti⁄_∑r£r_t
 
›p
,

362 c⁄° *
fûíame
)

364 
O±i⁄P¨£r
 *
p_›r
 = 
ªöãΩªt_ˇ°
<O±i⁄P¨£∏*>(
›p
);

365 
p_›r
->
	`P¨£Fûe
(
fûíame
);

366 
	}
}

368 
	$›ti⁄_∑r£r_¥öt
(
›ti⁄_∑r£r_t
 
›p
,

369 
FILE
 *
fout
)

371 
O±i⁄P¨£r
 *
p_›r
 = 
ªöãΩªt_ˇ°
<O±i⁄P¨£∏*>(
›p
);

372 
p_›r
->
	`Pröt
(
fout
);

373 
	}
}

378 #ifde‡
UNIT_TEST


380 ˛as†
	cã°ty≥


382 
	mpublic
:

383 
id©a
;

384 
	mfd©a
;

385 
°rög
 
	msd©a
;

386 
	muŒd©a
;

387 
boﬁ
 
	mbd©a
;

388 
	mboﬁöt
;

389 * 
	mc›ti⁄
;

391 
	$ã°ty≥
()

392 : 
	`id©a
(0),

393 
	`fd©a
(0.0f),

394 
	`sd©a
(""),

395 
	`uŒd©a
(0),

396 
	$bd©a
(
Ál£
)

398 
	}
};

401 
	$˝pöãrÁ˚ã°
(
¨gc
, *
¨gv
[])

403 
ã°ty≥
 
c
;

404 
O±i⁄P¨£r
 
›ti⁄∑r£r
;

405 
c
.
id©a
 = 123;

406 
c
.
fd©a
 = 3249586.333;

407 
c
.
sd©a
 = 
	`°rög
("haha");

409 
›ti⁄∑r£r
.
Regi°î
<>("-id©a", "öãgî d©a", 
c
.
id©a
, "-456");

410 
›ti⁄∑r£r
.
Regi°î
<>("-fd©a", "ÊﬂtögÖoöàd©a", 
c
.
fd©a
, "0.001");

411 
›ti⁄∑r£r
.
Regi°î
<
°rög
>("-sd©a", "fú° såög d©a", 
c
.
sd©a
, "hellow");

412 
›ti⁄∑r£r
.
Regi°î
<>("-uŒd©a", "unsig√dÜ⁄gÜ⁄g d©a", 
c
.
uŒd©a
, "0x123456789abcdef1");

413 
›ti⁄∑r£r
.
Regi°î
<
boﬁ
>("-someÊag", "fú° fœg", 
c
.
bd©a
, "0");

414 
›ti⁄∑r£r
.
Regi°î
<
boﬁ
>("-ŸhîÊag", "£c⁄d fœg", (boﬁ&)
c
.
boﬁöt
, "1");

415 
›ti⁄∑r£r
.
Regi°î
<*>("-c›ti⁄", "ch¨ * d©a", 
c
.
c›ti⁄
, 
NULL
);

417 
cout
 << "Default: \n";

418 
›ti⁄∑r£r
.
	`Pröt
(
°dout
);

420 
›ti⁄∑r£r
.
	`P¨£Comm™dLöe
(
¨gc
, 
¨gv
);

422 
cout
 << "Commandline Parse Results: \n";

423 
›ti⁄∑r£r
.
	`Pröt
(
°dout
);

425 
›ti⁄∑r£r
.
	`P¨£Fûe
("test.config");

426 
cout
 << "File Parse Results: \n";

427 
›ti⁄∑r£r
.
	`Pröt
(
°dout
);

428 
cout
 << 
c
.
sd©a
 << ' ' << c.
id©a
 << 
ídl
;

431 
	}
}

433 
	$cöãrÁ˚ã°
(
¨gc
, *
¨gv
[])

435 
ã°ty≥
 
c
;

436 
›ti⁄_∑r£r_t
 
›p
 = 
	`›ti⁄_∑r£r_¸óã
();

437 
c
.
id©a
 = 123;

438 
c
.
fd©a
 = 3249586.333;

439 
c
.
sd©a
 = 
	`°rög
("haha");

440 *
Ÿhî°r
;

442 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-id©a", 
OPT_INT32
, &
c
.
id©a
, "integer data", "-456");

443 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-fd©a", 
OPT_FLOAT
, &
c
.
fd©a
, "floatingÖoint data", "0.001");

444 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-sd©a", 
OPT_CSTR
, &
Ÿhî°r
, "first string data", "hellow");

445 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-uŒd©a", 
OPT_UINT64
, &
c
.
uŒd©a
, "unsigendÜongÜong data", "0x123456789abcdef1");

446 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-someÊag", 
OPT_BOOL
, &
c
.
bd©a
, "first flag", "0");

447 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-ŸhîÊag", 
OPT_BOOL
, &
c
.
boﬁöt
, "second flag", "1");

448 
	`›ti⁄_∑r£r_ªgi°î
(
›p
, "-c›ti⁄", 
OPT_CSTR
, &
c
.
c›ti⁄
, "ch¨ * d©a", 
NULL
);

450 
	`¥ötf
("Default: \n");

451 
	`›ti⁄_∑r£r_¥öt
(
›p
, 
°dout
);

453 
	`›ti⁄_∑r£r_cmdlöe
(
›p
, 
¨gc
, 
¨gv
);

455 
	`¥ötf
("Commandline Parse Results: \n");

456 
	`›ti⁄_∑r£r_¥öt
(
›p
, 
°dout
);

458 
	`›ti⁄_∑r£r_cfgfûe
(
›p
, "test.config");

459 
	`¥ötf
("File Parse Results: \n");

460 
	`›ti⁄_∑r£r_¥öt
(
›p
, 
°dout
);

461 
	`¥ötf
("%†%d\n", 
Ÿhî°r
, 
c
.
id©a
);

463 
	`›ti⁄_∑r£r_de°roy
(
›p
);

466 
	}
}

468 
	$maö
(
¨gc
, *
¨gv
[])

470 
	`˝pöãrÁ˚ã°
(
¨gc
,
¨gv
);

471 
	`cöãrÁ˚ã°
(
¨gc
,
¨gv
);

474 
	}
}

	@src/option_parser.h

28 #¥agm®
⁄˚


30 
	~<°dio.h
>

31 
	~<°dlib.h
>

34 
˛ass
 
	tO±i⁄P¨£r
 *
	t›ti⁄_∑r£r_t
;

37 
	e›ti⁄_dty≥
 {

38 
	mOPT_INT32
,

39 
	mOPT_UINT32
,

40 
	mOPT_INT64
,

41 
	mOPT_UINT64
,

42 
	mOPT_BOOL
,

43 
	mOPT_FLOAT
,

44 
	mOPT_DOUBLE
,

45 
	mOPT_CSTR


48 #ifde‡
__˝lu•lus


53 
›ti⁄_∑r£r_t
 
›ti⁄_∑r£r_¸óã
();

54 
›ti⁄_∑r£r_de°roy
(
›ti⁄_∑r£r_t
 
›p
);

57 
›ti⁄_∑r£r_ªgi°î
(
›ti⁄_∑r£r_t
 
›p
,

58 c⁄° *
«me
,

59 
›ti⁄_dty≥
 
ty≥
,

60 *
v¨übÀ
,

61 c⁄° *
desc
,

62 c⁄° *
deÁu…vÆue
);

65 
›ti⁄_∑r£r_cmdlöe
(
›ti⁄_∑r£r_t
 
›p
,

66 
¨gc
, c⁄° *
¨gv
[]);

69 
›ti⁄_∑r£r_cfgfûe
(
›ti⁄_∑r£r_t
 
›p
,

70 c⁄° *
fûíame
);

73 
›ti⁄_∑r£r_¥öt
(
›ti⁄_∑r£r_t
 
›p
,

74 
FILE
 *
fout
);

76 #ifde‡
__˝lu•lus


	@src/stream_manager.cc

28 
	~"°ªam_m™agî.h
"

29 
	~"gpgpusim_íåypoöt.h
"

30 
	~"cuda-sim/cuda-sim.h
"

31 
	~"gpgpu-sim/gpu-sim.h
"

32 
	~<sys/ªsour˚.h
>

33 
	gCU°ªam_°
::
sm_√xt_°ªam_uid
 = 0;

35 
	gCU°ªam_°
::
	$CU°ªam_°
()

37 
m_≥ndög
 = 
Ál£
;

38 
m_uid
 = 
sm_√xt_°ªam_uid
++;

39 
	`±hªad_muãx_öô
(&
m_lock
,
NULL
);

40 
	}
}

42 
boﬁ
 
	gCU°ªam_°
::
	$em±y
()

44 
	`±hªad_muãx_lock
(&
m_lock
);

45 
boﬁ
 
em±y
 = 
m_›î©i⁄s
.
	`em±y
();

46 
	`±hªad_muãx_u∆ock
(&
m_lock
);

47  
em±y
;

48 
	}
}

50 
boﬁ
 
	gCU°ªam_°
::
	$busy
()

52 
	`±hªad_muãx_lock
(&
m_lock
);

53 
boﬁ
 
≥ndög
 = 
m_≥ndög
;

54 
	`±hªad_muãx_u∆ock
(&
m_lock
);

55  
≥ndög
;

56 
	}
}

58 
	gCU°ªam_°
::
	$synchr⁄ize
()

61 
boﬁ
 
d⁄e
=
Ál£
;

63 
	`±hªad_muãx_lock
(&
m_lock
);

64 
d⁄e
 = 
m_›î©i⁄s
.
	`em±y
();

65 
	`±hªad_muãx_u∆ock
(&
m_lock
);

66 }  !
d⁄e
 );

67 
	}
}

69 
	gCU°ªam_°
::
	$push
–c⁄° 
°ªam_›î©i⁄
 &
›
 )

72 
	`±hªad_muãx_lock
(&
m_lock
);

73 
m_›î©i⁄s
.
	`push_back
–
›
 );

74 
	`±hªad_muãx_u∆ock
(&
m_lock
);

75 
	}
}

77 
	gCU°ªam_°
::
	$ªc‹d_√xt_d⁄e
()

80 
	`±hªad_muãx_lock
(&
m_lock
);

81 
	`as£π
(
m_≥ndög
);

82 
m_›î©i⁄s
.
	`p›_‰⁄t
();

83 
m_≥ndög
=
Ál£
;

84 
	`±hªad_muãx_u∆ock
(&
m_lock
);

85 
	}
}

88 
°ªam_›î©i⁄
 
	gCU°ªam_°
::
	$√xt
()

91 
	`±hªad_muãx_lock
(&
m_lock
);

92 
m_≥ndög
 = 
åue
;

93 
°ªam_›î©i⁄
 
ªsu…
 = 
m_›î©i⁄s
.
	`‰⁄t
();

94 
	`±hªad_muãx_u∆ock
(&
m_lock
);

95  
ªsu…
;

96 
	}
}

98 
	gCU°ªam_°
::
	$¥öt
(
FILE
 *
Â
)

100 
	`±hªad_muãx_lock
(&
m_lock
);

101 
	`Ârötf
(
Â
,"GPGPU-Sim API: såóm %u ha†%zu o≥øti⁄s\n", 
m_uid
, 
m_›î©i⁄s
.
	`size
() );

102 
°d
::
li°
<
°ªam_›î©i⁄
>::
ôî©‹
 
i
;

103 
n
=0;

104  
i
=
m_›î©i⁄s
.
	`begö
(); i!=m_›î©i⁄s.
	`íd
(); i++ ) {

105 
°ªam_›î©i⁄
 &
›
 = *
i
;

106 
	`Ârötf
(
Â
,"GPGPU-Sim API: %u : ", 
n
++);

107 
›
.
	`¥öt
(
Â
);

108 
	`Ârötf
(
Â
,"\n");

110 
	`±hªad_muãx_u∆ock
(&
m_lock
);

111 
	}
}

112 ˛as†
	cKAIN_w¨p_ö°


114 
	mpublic
:

115 
w¨p_ö°_t
 *
ö°
;

116 
simt_mask_t
 *
	mthªad_d⁄e
;

117 
addr_ve˘‹_t
 *
	m√xt_pc
;

118 
	mªc⁄vîgí˚_pc
;

119 
	$KAIN_w¨p_ö°
()

121 
ö°
 = 
√w
 
	`w¨p_ö°_t
(1);

122 
thªad_d⁄e

√w
 
simt_mask_t
;

123 
√xt_pc
 = 
√w
 
addr_ve˘‹_t
;

124 
√xt_pc
->
	`ªsize
(32);

126 ~
	$KAIN_w¨p_ö°
()

128 
dñëe
 
ö°
;

129 
dñëe
 
thªad_d⁄e
;

130 
dñëe
 
√xt_pc
;

131 
	}
}

135 
˛ass
 
KAIN_w¨p_ö°
 **
	gblock_w¨pid
[299999][100];

222 vﬁ©ûê
Cou¡_Block_P
[
P_C_size
];

223 vﬁ©ûê
Cou¡_Block_C
[
P_C_size
];

228 vﬁ©ûê
Cuºít_c⁄sume
[
P_C_size
];

230 
Mem‹y_C
;

231 
Föished_⁄_Sim
[299999];

232 
La°_Run_Block
[
Thªad_Num
];

234 *
	$Produ˚r
(*
kî√l
)

236 
	`gpgpu_cuda_±x_sim_maö_func
((
kî√l_öfo_t
*)
kî√l
);

237 
	}
}

239 
	sKAIN_SM_run_CTA_°r


241 
kî√l_öfo_t
 *
	mkî√l
;

242 
	mID
;

244 
KAIN_SM_run_CTA_°r
 *
thªad_tmp
;

246 
	gPro˚ss_id
;

247 
	gPro˚ss_cou¡
;

248 
	gPro˚ss_waôpid
[10];

249 
±hªad_t
 
	gthªad_id_¥odu˚r
;

250 
	g°ªam_›î©i⁄
::
	$do_›î©i⁄
–
gpgpu_sim
 *
gpu
 )

252 if–
	`is_no›
() )

255 
	`as£π
(!
m_d⁄e
 && 
m_°ªam
);

256 if(
g_debug_executi⁄
 >= 3)

257 
	`¥ötf
("GPGPU-Sim API: såóm %uÖîf‹mög ", 
m_°ªam
->
	`gë_uid
() );

258  
m_ty≥
 ) {

259 
°ªam_mem˝y_ho°_to_devi˚
:

260 if(
g_debug_executi⁄
 >= 3)

261 
	`¥ötf
("memcpy host-to-device\n");

262 
gpu
->
	`mem˝y_to_gpu
(
m_devi˚_addªss_d°
,
m_ho°_addªss_§c
,
m_˙t
);

263 
m_°ªam
->
	`ªc‹d_√xt_d⁄e
();

265 
°ªam_mem˝y_devi˚_to_ho°
:

266 if(
g_debug_executi⁄
 >= 3)

267 
	`¥ötf
("memcpy device-to-host\n");

268 
gpu
->
	`mem˝y_‰om_gpu
(
m_ho°_addªss_d°
,
m_devi˚_addªss_§c
,
m_˙t
);

269 
m_°ªam
->
	`ªc‹d_√xt_d⁄e
();

271 
°ªam_mem˝y_devi˚_to_devi˚
:

272 if(
g_debug_executi⁄
 >= 3)

273 
	`¥ötf
("memcpy device-to-device\n");

274 
gpu
->
	`mem˝y_gpu_to_gpu
(
m_devi˚_addªss_d°
,
m_devi˚_addªss_§c
,
m_˙t
);

275 
m_°ªam
->
	`ªc‹d_√xt_d⁄e
();

277 
°ªam_mem˝y_to_symbﬁ
:

278 if(
g_debug_executi⁄
 >= 3)

279 
	`¥ötf
("memcpyÅo symbol\n");

280 
	`gpgpu_±x_sim_mem˝y_symbﬁ
(
m_symbﬁ
,
m_ho°_addªss_§c
,
m_˙t
,
m_off£t
,1,
gpu
);

281 
m_°ªam
->
	`ªc‹d_√xt_d⁄e
();

283 
°ªam_mem˝y_‰om_symbﬁ
:

284 if(
g_debug_executi⁄
 >= 3)

285 
	`¥ötf
("memcpy from symbol\n");

286 
	`gpgpu_±x_sim_mem˝y_symbﬁ
(
m_symbﬁ
,
m_ho°_addªss_d°
,
m_˙t
,
m_off£t
,0,
gpu
);

287 
m_°ªam
->
	`ªc‹d_√xt_d⁄e
();

289 
°ªam_kî√l_œunch
:

290 if–
gpu
->
	`ˇn_°¨t_kî√l
() ) {

291 
	`¥ötf
("kî√»\'%s\'Åøns„∏tÿGPU h¨dw¨êscheduÀr\n", 
m_kî√l
->
	`«me
().
	`c_°r
() );

292 if–
m_sim_mode
 )

293 
	`gpgpu_cuda_±x_sim_maö_func
–
m_kî√l
 );

300 
öô_block_w¨pid
 = 0;

301 if(
öô_block_w¨pid
 == 0)

303 
	`¥ötf
("herhe===============kkkkkkkkkkkkk\n");

306 
i
 = 0; i < 299999;i++)

307 
j
 = 0; j < 100; j++)

309 
block_w¨pid
[
i
][
j
] = (
√w
 
KAIN_w¨p_ö°
*[2]);

310 
m
 = 0; m < 2; m++)

311 
block_w¨pid
[
i
][
j
][
m
] = 0;

314 
	`¥ötf
("herhe++++++++++++++++++==kkkkkkkkkkkkk\n");

353 
˛ass
 
KAIN_w¨p_ö°
 **
Mem‹y
;

355 
	`¥ötf
("beginállocate memory\n");

356 
i
 = 0; i < 
Thªad_Num
*
W¨p_PîBlock
*2+2; i++)

358 
	`as£π
(
i
 < 9999999);

359 
Mem‹y
[
i
] = 
√w
 
KAIN_w¨p_ö°
 [
KAIN_ö°ru˘i⁄_buf„r
];

360 
	`¥ötf
("Ælcﬂàmem‹y %d\n",
i
);

363 
	`¥ötf
("afterállocate memory\n");

367 
öô_block_w¨pid
 = 1;

369 
Mem‹y_C
 = 0;

370 
i
 = 0; i < 299999; i++)

371 
Föished_⁄_Sim
[
i
] = 0;

372 
i
 = 0; i < 
Thªad_Num
; i++)

373 
La°_Run_Block
[
i
] = -1;

374 
i
 =0; i < 
P_C_size
; i++)

380 
Cuºít_c⁄sume
[
i
] = -1;

382 
Cou¡_Block_P
[
i
] = 0;

383 
Cou¡_Block_C
[
i
] = 0;

388 
˛ass
 
fun˘i⁄_öfo
 *
mm
 = 
m_kî√l
->
	`íåy
();

389 
kî√l_öfo_t
 *
KAIN_kî√l
 = 
√w
 
	`kî√l_öfo_t
(
m_kî√l
);

390 
m_kî√l
->
	`KAIN_£t_Mem2_NULL
();

392 
±hªad_©å_t
 
©å_P
;

393 
sched_∑øm
 
∑øm_P
;

394 
	`±hªad_©å_öô
(&
©å_P
);

395 
	`±hªad_©å_£töhîôsched
 (&
©å_P
,
PTHREAD_EXPLICIT_SCHED
);

396 
	`±hªad_©å_£tschedpﬁicy
 (&
©å_P
, 
SCHED_FIFO
);

397 
∑øm_P
.
sched_¥i‹ôy
 = 1;

398 
	`±hªad_©å_£tsched∑øm
 (&
©å_P
, &
∑øm_P
);

402 
f‹k_¥o˚ss
 = 0;

403 if(
f‹k_¥o˚ss
 == 0)

405 
KAIN_±hªad_öô
;

406 
KAIN_±hªad_öô
 = 0;

407 
Pro˚ss_id
 = 0;

409 if(
m_kî√l
->
	`num_blocks
()> 1000)

411 
Pro˚ss_cou¡
 = 2;

415 
Pro˚ss_cou¡
 = 1;

417 
i
 = 0; i < 
Pro˚ss_cou¡
-1; i++)

419 
id
 = 
	`f‹k
();

420 if(
id
 == 0)

422 
Pro˚ss_id
 = 
i
+1;

430 
Pro˚ss_waôpid
[
i
] = 
id
;

437 
KAIN_kî√l
->
	`KAIN_£t_˘a
(
Pro˚ss_id
);

439 
	`±hªad_¸óã
(&
thªad_id_¥odu˚r
,&
©å_P
,
Produ˚r
,
KAIN_kî√l
);

455 
	`¥ötf
("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n");

456 
	`fÊush
(
°dout
);

457 
m_kî√l
->
	`KAIN_˛ór_˘a
(
mm
);

458 
m_kî√l
->
	`KAIN_£t_˘a
(
Pro˚ss_id
);

460 
gpu
->
	`œunch
–
m_kî√l
 );

465 
°ªam_evít
: {

466 
	`¥ötf
("event update\n");

467 
time_t
 
wÆl˛ock
 = 
	`time
(—ime_à*)
NULL
);

468 
m_evít
->
	`upd©e
–
gpu_tŸ_sim_cy˛e
, 
wÆl˛ock
 );

469 
m_°ªam
->
	`ªc‹d_√xt_d⁄e
();

473 
	`ab‹t
();

475 
m_d⁄e
=
åue
;

477 
	}
}

479 
	g°ªam_›î©i⁄
::
	$¥öt
–
FILE
 *
Â
 ) const

481 
	`Ârötf
(
Â
," stream operation " );

482  
m_ty≥
 ) {

483 
°ªam_evít
: 
	`Ârötf
(
Â
,"event"); ;

484 
°ªam_kî√l_œunch
: 
	`Ârötf
(
Â
,"kernel"); ;

485 
°ªam_mem˝y_devi˚_to_devi˚
: 
	`Ârötf
(
Â
,"memcpy device-to-device"); ;

486 
°ªam_mem˝y_devi˚_to_ho°
: 
	`Ârötf
(
Â
,"memcpy device-to-host"); ;

487 
°ªam_mem˝y_ho°_to_devi˚
: 
	`Ârötf
(
Â
,"memcpy host-to-device"); ;

488 
°ªam_mem˝y_to_symbﬁ
: 
	`Ârötf
(
Â
,"memcpyÅo symbol"); ;

489 
°ªam_mem˝y_‰om_symbﬁ
: 
	`Ârötf
(
Â
,"memcpy from symbol"); ;

490 
°ªam_no_›
: 
	`Ârötf
(
Â
,"no-op"); ;

492 
	}
}

494 
	g°ªam_m™agî
::
	$°ªam_m™agî
–
gpgpu_sim
 *
gpu
, 
boﬁ
 
cuda_œunch_blockög
 )

496 
m_gpu
 = 
gpu
;

497 
m_£rvi˚_°ªam_zîo
 = 
Ál£
;

498 
m_cuda_œunch_blockög
 = 
cuda_œunch_blockög
;

499 
	`±hªad_muãx_öô
(&
m_lock
,
NULL
);

500 
	}
}

502 
	g°ªam_m™agî
::
	$ªgi°î_föished_kî√l
–
grid_uid
 )

505 
	`±hªad_muãx_lock
(&
m_lock
);

506 
CU°ªam_°
 *
°ªam
 = 
m_grid_id_to_°ªam
[
grid_uid
];

507 
kî√l_öfo_t
 *
kî√l
 = 
°ªam
->
	`‰⁄t
().
	`gë_kî√l
();

508 
	`as£π
–
grid_uid
 =
kî√l
->
	`gë_uid
() );

509 
°ªam
->
	`ªc‹d_√xt_d⁄e
();

510 
m_grid_id_to_°ªam
.
	`îa£
(
grid_uid
);

511 
dñëe
 
kî√l
;

512 
	`±hªad_muãx_u∆ock
(&
m_lock
);

513 
	}
}

515 
°ªam_›î©i⁄
 
	g°ªam_m™agî
::
	$‰⁄t
()

518 
°ªam_›î©i⁄
 
ªsu…
;

519 
	`±hªad_muãx_lock
(&
m_lock
);

520 if–
	`c⁄cuºít_°ªams_em±y
() )

521 
m_£rvi˚_°ªam_zîo
 = 
åue
;

522 if–
m_£rvi˚_°ªam_zîo
 ) {

523 if–!
m_°ªam_zîo
.
	`em±y
() ) {

524 if–!
m_°ªam_zîo
.
	`busy
() ) {

525 
ªsu…
 = 
m_°ªam_zîo
.
	`√xt
();

526 if–
ªsu…
.
	`is_kî√l
() ) {

527 
grid_id
 = 
ªsu…
.
	`gë_kî√l
()->
	`gë_uid
();

528 
m_grid_id_to_°ªam
[
grid_id
] = &
m_°ªam_zîo
;

532 
m_£rvi˚_°ªam_zîo
 = 
Ál£
;

535 
°d
::
li°
<
CU°ªam_°
*>::
ôî©‹
 
s
;

536  
s
=
m_°ªams
.
	`begö
(); s !m_°ªams.
	`íd
(); s++) {

537 
CU°ªam_°
 *
°ªam
 = *
s
;

538 if–!
°ªam
->
	`busy
(Ë&& !°ªam->
	`em±y
() ) {

539 
ªsu…
 = 
°ªam
->
	`√xt
();

540 if–
ªsu…
.
	`is_kî√l
() ) {

541 
grid_id
 = 
ªsu…
.
	`gë_kî√l
()->
	`gë_uid
();

542 
m_grid_id_to_°ªam
[
grid_id
] = 
°ªam
;

548 
	`±hªad_muãx_u∆ock
(&
m_lock
);

549  
ªsu…
;

550 
	}
}

552 
	g°ªam_m™agî
::
	$add_°ªam
–
CU°ªam_°
 *
°ªam
 )

555 
	`±hªad_muãx_lock
(&
m_lock
);

556 
m_°ªams
.
	`push_back
(
°ªam
);

557 
	`±hªad_muãx_u∆ock
(&
m_lock
);

558 
	}
}

560 
	g°ªam_m™agî
::
	$de°roy_°ªam
–
CU°ªam_°
 *
°ªam
 )

563 
	`±hªad_muãx_lock
(&
m_lock
);

564  !
°ªam
->
	`em±y
() )

566 
°d
::
li°
<
CU°ªam_°
 *>::
ôî©‹
 
s
;

567  
s
=
m_°ªams
.
	`begö
(); s !m_°ªams.
	`íd
(); s++ ) {

568 if–*
s
 =
°ªam
 ) {

569 
m_°ªams
.
	`îa£
(
s
);

573 
dñëe
 
°ªam
;

574 
	`±hªad_muãx_u∆ock
(&
m_lock
);

575 
	}
}

577 
boﬁ
 
	g°ªam_m™agî
::
	$c⁄cuºít_°ªams_em±y
()

579 
boﬁ
 
ªsu…
 = 
åue
;

581 
°d
::
li°
<
CU°ªam_°
 *>::
ôî©‹
 
s
;

582  
s
=
m_°ªams
.
	`begö
(); s!=m_°ªams.
	`íd
();++s ) {

583 
CU°ªam_°
 *
°ªam
 = *
s
;

584 if–!
°ªam
->
	`em±y
() ) {

586 
ªsu…
 = 
Ál£
;

589  
ªsu…
;

590 
	}
}

592 
boﬁ
 
	g°ªam_m™agî
::
	$em±y
()

594 
boﬁ
 
ªsu…
 = 
åue
;

595 
	`±hªad_muãx_lock
(&
m_lock
);

596 if–!
	`c⁄cuºít_°ªams_em±y
() )

597 
ªsu…
 = 
Ál£
;

598 if–!
m_°ªam_zîo
.
	`em±y
() )

599 
ªsu…
 = 
Ál£
;

600 
	`±hªad_muãx_u∆ock
(&
m_lock
);

601  
ªsu…
;

602 
	}
}

604 
	g°ªam_m™agî
::
	$¥öt
–
FILE
 *
Â
)

606 
	`±hªad_muãx_lock
(&
m_lock
);

607 
	`¥öt_im∂
(
Â
);

608 
	`±hªad_muãx_u∆ock
(&
m_lock
);

609 
	}
}

611 
	g°ªam_m™agî
::
	$¥öt_im∂
–
FILE
 *
Â
)

613 
	`Ârötf
(
Â
,"GPGPU-Sim API: Stream Manager State\n");

614 
°d
::
li°
<
CU°ªam_°
 *>::
ôî©‹
 
s
;

615  
s
=
m_°ªams
.
	`begö
(); s!=m_°ªams.
	`íd
();++s ) {

616 
CU°ªam_°
 *
°ªam
 = *
s
;

617 if–!
°ªam
->
	`em±y
() )

618 
°ªam
->
	`¥öt
(
Â
);

620 if–!
m_°ªam_zîo
.
	`em±y
() )

621 
m_°ªam_zîo
.
	`¥öt
(
Â
);

622 
	}
}

624 
	g°ªam_m™agî
::
	$push
–
°ªam_›î©i⁄
 
›
 )

626 
CU°ªam_°
 *
°ªam
 = 
›
.
	`gë_°ªam
();

629 
boﬁ
 
block
!
°ªam
 || 
m_cuda_œunch_blockög
;

630 
block
) {

631 
	`±hªad_muãx_lock
(&
m_lock
);

632 
block
 = !
	`c⁄cuºít_°ªams_em±y
();

633 
	`±hªad_muãx_u∆ock
(&
m_lock
);

636 
	`±hªad_muãx_lock
(&
m_lock
);

637 if–
°ªam
 && !
m_cuda_œunch_blockög
 ) {

638 
°ªam
->
	`push
(
›
);

640 
›
.
	`£t_°ªam
(&
m_°ªam_zîo
);

641 
m_°ªam_zîo
.
	`push
(
›
);

643 if(
g_debug_executi⁄
 >= 3)

644 
	`¥öt_im∂
(
°dout
);

645 
	`±hªad_muãx_u∆ock
(&
m_lock
);

646 if–
m_cuda_œunch_blockög
 || 
°ªam
 =
NULL
 ) {

647 
waô_amou¡
 = 100;

648 
waô_ˇp
 = 100000;

649  !
	`em±y
() ) {

652 
	`u¶ìp
(
waô_amou¡
);

653 
waô_amou¡
 *= 2;

654 i‡(
waô_amou¡
 > 
waô_ˇp
)

655 
waô_amou¡
 = 
waô_ˇp
;

658 
	}
}

	@src/stream_manager.h

28 #i‚de‡
STREAM_MANAGER_H_INCLUDED


29 
	#STREAM_MANAGER_H_INCLUDED


	)

31 
	~"ab°ø˘_h¨dw¨e_modñ.h
"

32 
	~<li°
>

33 
	~<±hªad.h
>

34 
	~<time.h
>

46 *
Mem‹y_Æloˇã
(*
mm
);

47 
	e°ªam_›î©i⁄_ty≥
 {

48 
	m°ªam_no_›
,

49 
	m°ªam_mem˝y_ho°_to_devi˚
,

50 
	m°ªam_mem˝y_devi˚_to_ho°
,

51 
	m°ªam_mem˝y_devi˚_to_devi˚
,

52 
	m°ªam_mem˝y_to_symbﬁ
,

53 
	m°ªam_mem˝y_‰om_symbﬁ
,

54 
	m°ªam_kî√l_œunch
,

55 
	m°ªam_evít


58 ˛as†
	c°ªam_›î©i⁄
 {

59 
	mpublic
:

60 
	$°ªam_›î©i⁄
()

62 
m_kî√l
=
NULL
;

63 
m_ty≥
 = 
°ªam_no_›
;

64 
m_°ªam
 = 
NULL
;

65 
m_d⁄e
=
åue
;

67 
	$°ªam_›î©i⁄
–c⁄° *
§c
, c⁄° *
symbﬁ
, 
size_t
 
cou¡
, size_à
off£t
, 
CU°ªam_°
 *
°ªam
 )

69 
m_kî√l
=
NULL
;

70 
m_°ªam
 = 
°ªam
;

71 
m_ty≥
=
°ªam_mem˝y_to_symbﬁ
;

72 
m_ho°_addªss_§c
=
§c
;

73 
m_symbﬁ
=
symbﬁ
;

74 
m_˙t
=
cou¡
;

75 
m_off£t
=
off£t
;

76 
m_d⁄e
=
Ál£
;

77 
	}
}

78 
	$°ªam_›î©i⁄
–c⁄° *
symbﬁ
, *
d°
, 
size_t
 
cou¡
, size_à
off£t
, 
CU°ªam_°
 *
°ªam
 )

80 
m_kî√l
=
NULL
;

81 
m_°ªam
 = 
°ªam
;

82 
m_ty≥
=
°ªam_mem˝y_‰om_symbﬁ
;

83 
m_ho°_addªss_d°
=
d°
;

84 
m_symbﬁ
=
symbﬁ
;

85 
m_˙t
=
cou¡
;

86 
m_off£t
=
off£t
;

87 
m_d⁄e
=
Ál£
;

88 
	}
}

89 
	$°ªam_›î©i⁄
–
kî√l_öfo_t
 *
kî√l
, 
boﬁ
 
sim_mode
, 
CU°ªam_°
 *
°ªam
 )

91 
m_ty≥
=
°ªam_kî√l_œunch
;

92 
m_kî√l
=
kî√l
;

93 
m_sim_mode
=
sim_mode
;

94 
m_°ªam
=
°ªam
;

95 
m_d⁄e
=
Ál£
;

96 
	}
}

97 
	$°ªam_›î©i⁄
–
˛ass
 
CUevít_°
 *
e
, 
CU°ªam_°
 *
°ªam
 )

99 
m_kî√l
=
NULL
;

100 
m_ty≥
=
°ªam_evít
;

101 
m_evít
=
e
;

102 
m_°ªam
=
°ªam
;

103 
m_d⁄e
=
Ál£
;

104 
	}
}

105 
	$°ªam_›î©i⁄
–c⁄° *
ho°_addªss_§c
, 
size_t
 
devi˚_addªss_d°
, size_à
˙t
, 
CU°ªam_°
 *
°ªam
 )

107 
m_kî√l
=
NULL
;

108 
m_ty≥
=
°ªam_mem˝y_ho°_to_devi˚
;

109 
m_ho°_addªss_§c
 =
ho°_addªss_§c
;

110 
m_devi˚_addªss_d°
=
devi˚_addªss_d°
;

111 
m_ho°_addªss_d°
=
NULL
;

112 
m_devi˚_addªss_§c
=0;

113 
m_˙t
=
˙t
;

114 
m_°ªam
=
°ªam
;

115 
m_sim_mode
=
Ál£
;

116 
m_d⁄e
=
Ál£
;

117 
	}
}

118 
	$°ªam_›î©i⁄
–
size_t
 
devi˚_addªss_§c
, *
ho°_addªss_d°
, size_à
˙t
, 
CU°ªam_°
 *
°ªam
 )

120 
m_kî√l
=
NULL
;

121 
m_ty≥
=
°ªam_mem˝y_devi˚_to_ho°
;

122 
m_devi˚_addªss_§c
=
devi˚_addªss_§c
;

123 
m_ho°_addªss_d°
=
ho°_addªss_d°
;

124 
m_devi˚_addªss_d°
=0;

125 
m_ho°_addªss_§c
=
NULL
;

126 
m_˙t
=
˙t
;

127 
m_°ªam
=
°ªam
;

128 
m_sim_mode
=
Ál£
;

129 
m_d⁄e
=
Ál£
;

130 
	}
}

131 
	$°ªam_›î©i⁄
–
size_t
 
devi˚_addªss_§c
, size_à
devi˚_addªss_d°
, size_à
˙t
, 
CU°ªam_°
 *
°ªam
 )

133 
m_kî√l
=
NULL
;

134 
m_ty≥
=
°ªam_mem˝y_devi˚_to_devi˚
;

135 
m_devi˚_addªss_§c
=
devi˚_addªss_§c
;

136 
m_devi˚_addªss_d°
=
devi˚_addªss_d°
;

137 
m_ho°_addªss_§c
=
NULL
;

138 
m_ho°_addªss_d°
=
NULL
;

139 
m_˙t
=
˙t
;

140 
m_°ªam
=
°ªam
;

141 
m_sim_mode
=
Ál£
;

142 
m_d⁄e
=
Ál£
;

143 
	}
}

145 
boﬁ
 
	$is_kî√l
(Ëc⁄° {  
m_ty≥
 =
°ªam_kî√l_œunch
; 
	}
}

146 
boﬁ
 
	$is_mem
() const {

147  
m_ty≥
 =
°ªam_mem˝y_ho°_to_devi˚
 ||

148 
m_ty≥
 =
°ªam_mem˝y_devi˚_to_ho°
 ||

149 
m_ty≥
 =
°ªam_mem˝y_ho°_to_devi˚
;

150 
	}
}

151 
boﬁ
 
	$is_no›
(Ëc⁄° {  
m_ty≥
 =
°ªam_no_›
; 
	}
}

152 
boﬁ
 
	$is_d⁄e
(Ëc⁄° {  
m_d⁄e
; 
	}
}

153 
kî√l_öfo_t
 *
	$gë_kî√l
(Ë{  
m_kî√l
; 
	}
}

154 
do_›î©i⁄
–
gpgpu_sim
 *
gpu
 );

155 
	$¥öt
–
FILE
 *
Â
 ) const;

156 
CU°ªam_°
 *
	$gë_°ªam
(Ë{  
m_°ªam
; 
	}
}

157 
	$£t_°ªam
–
CU°ªam_°
 *
°ªam
 ) { 
m_°ªam
 = såóm; 
	}
}

159 
	g¥iv©e
:

160 
CU°ªam_°
 *
m_°ªam
;

162 
boﬁ
 
	gm_d⁄e
;

164 
°ªam_›î©i⁄_ty≥
 
	gm_ty≥
;

165 
size_t
 
	gm_devi˚_addªss_d°
;

166 
size_t
 
	gm_devi˚_addªss_§c
;

167 *
	gm_ho°_addªss_d°
;

168 c⁄° *
	gm_ho°_addªss_§c
;

169 
size_t
 
	gm_˙t
;

171 c⁄° *
	gm_symbﬁ
;

172 
size_t
 
	gm_off£t
;

174 
boﬁ
 
	gm_sim_mode
;

175 
kî√l_öfo_t
 *
	gm_kî√l
;

176 
˛ass
 
CUevít_°
 *
	gm_evít
;

179 ˛as†
	cCUevít_°
 {

180 
	mpublic
:

181 
	$CUevít_°
–
boﬁ
 
blockög
 )

183 
m_uid
 = ++
m_√xt_evít_uid
;

184 
m_blockög
 = 
blockög
;

185 
m_upd©es
 = 0;

186 
m_wÆl˛ock
 = 0;

187 
m_gpu_tŸ_sim_cy˛e
 = 0;

188 
m_d⁄e
 = 
Ál£
;

190 
	$upd©e
–
cy˛e
, 
time_t
 
˛k
 )

192 
m_upd©es
++;

193 
m_wÆl˛ock
=
˛k
;

194 
m_gpu_tŸ_sim_cy˛e
=
cy˛e
;

195 
m_d⁄e
 = 
åue
;

196 
	}
}

198 
	$gë_uid
(Ëc⁄° {  
m_uid
; 
	}
}

199 
	$num_upd©es
(Ëc⁄° {  
m_upd©es
; 
	}
}

200 
boﬁ
 
	$d⁄e
(Ëc⁄° {  
m_d⁄e
; 
	}
}

201 
time_t
 
	$˛ock
(Ëc⁄° {  
m_wÆl˛ock
; 
	}
}

202 
	g¥iv©e
:

203 
m_uid
;

204 
boﬁ
 
	gm_blockög
;

205 
boﬁ
 
	gm_d⁄e
;

206 
	gm_upd©es
;

207 
time_t
 
	gm_wÆl˛ock
;

208 
	gm_gpu_tŸ_sim_cy˛e
;

210 
	gm_√xt_evít_uid
;

213 
	sCU°ªam_°
 {

214 
	mpublic
:

215 
CU°ªam_°
();

216 
boﬁ
 
em±y
();

217 
boﬁ
 
busy
();

218 
synchr⁄ize
();

219 
push
–c⁄° 
°ªam_›î©i⁄
 &
›
 );

220 
ªc‹d_√xt_d⁄e
();

221 
°ªam_›î©i⁄
 
√xt
();

222 
	m°ªam_›î©i⁄
 &
‰⁄t
(Ë{  
	mm_›î©i⁄s
.front(); }

223 
¥öt
–
FILE
 *
Â
 );

224 
gë_uid
(Ëc⁄° {  
	mm_uid
; }

226 
	m¥iv©e
:

227 
m_uid
;

228 
	msm_√xt_°ªam_uid
;

230 
	m°d
::
li°
<
°ªam_›î©i⁄
> 
m_›î©i⁄s
;

231 
boﬁ
 
	mm_≥ndög
;

233 
±hªad_muãx_t
 
	mm_lock
;

236 ˛as†
	c°ªam_m™agî
 {

237 
	mpublic
:

238 
°ªam_m™agî
–
gpgpu_sim
 *
gpu
, 
boﬁ
 
cuda_œunch_blockög
 );

239 
ªgi°î_föished_kî√l
–
grid_uid
 );

240 
°ªam_›î©i⁄
 
‰⁄t
();

241 
add_°ªam
–
CU°ªam_°
 *
°ªam
 );

242 
de°roy_°ªam
–
CU°ªam_°
 *
°ªam
 );

243 
boﬁ
 
c⁄cuºít_°ªams_em±y
();

244 
boﬁ
 
em±y
();

245 
¥öt
–
FILE
 *
Â
);

246 
push
–
°ªam_›î©i⁄
 
›
 );

248 
	m¥iv©e
:

249 
¥öt_im∂
–
FILE
 *
Â
);

251 
boﬁ
 
	mm_cuda_œunch_blockög
;

252 
gpgpu_sim
 *
	mm_gpu
;

253 
	m°d
::
li°
<
CU°ªam_°
 *> 
m_°ªams
;

254 
	m°d
::
m≠
<,
	mCU°ªam_°
 *> 
	mm_grid_id_to_°ªam
;

255 
CU°ªam_°
 
	mm_°ªam_zîo
;

256 
boﬁ
 
	mm_£rvi˚_°ªam_zîo
;

257 
±hªad_muãx_t
 
	mm_lock
;

	@src/tr1_hash_map.h

28 #¥agm®
⁄˚


31 #ifde‡
__˝lu•lus


32 #ifde‡
__GNUC__


33 #i‡
__GNUC__
 >4 && 
__GNUC_MINOR__
 >= 3

34 
	~<un‹dîed_m≠
>

35 
	#å1_hash_m≠
 
°d
::
un‹dîed_m≠


	)

36 
	#å1_hash_m≠_ism≠
 0

	)

38 
	~<m≠
>

39 
	#å1_hash_m≠
 
°d
::
m≠


	)

40 
	#å1_hash_m≠_ism≠
 1

	)

43 
	~<m≠
>

44 
	#å1_hash_m≠
 
°d
::
m≠


	)

45 
	#å1_hash_m≠_ism≠
 1

	)

50 #i‡ 
deföed
–
__GNUC__
 ) 
™d
 
nŸ
 deföed–
_GLIBCXX_DEBUG
 )

51 #i‡
__GNUC__
 >4 && 
__GNUC_MINOR__
 >= 3

52 
	~<un‹dîed_m≠
>

53 
	#my_hash_m≠
 
°d
::
un‹dîed_m≠


	)

55 
	~<ext/hash_m≠
>

56 
«me•a˚
 
	g°d
 {

57 
usög
 
«me•a˚
 
	g__gnu_cxx
;

59 
	#my_hash_m≠
 
°d
::
hash_m≠


	)

62 
	~<m≠
>

63 
	#my_hash_m≠
 
°d
::
m≠


	)

64 
	#USE_MAP


	)

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

40 #i‡!
deföed
(
__SCITECH_SNAP__
)

42 #i‡
deföed
(
__BEOS__
)

43 
	~<°dlib.h
>

46 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
NeXT
Ë|| deföed(
NeXT_PDO
))

47 
	#OPENSTEP


	)

50 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

51 
	#__WIN32__


	)

54 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
))

55 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

56 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

57 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#GLAPI
 

	)

62 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

63 
	#GLAPIENTRY


	)

65 
	#GLAPIENTRY
 
__°dˇŒ


	)

67 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

68 
	#GLAPI
 

	)

69 
	#GLAPIENTRY
 
__°dˇŒ


	)

70 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

71 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

72 
	#GLAPIENTRY


	)

75 #i‡(
deföed
(
__BEOS__
Ë&& deföed(
__POWERPC__
)Ë|| deföed(
__QUICKDRAW__
)

76 
	#PRAGMA_EXPORT_SUPPORTED
 1

	)

87 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

88 #i‚de‡
WIN32_LEAN_AND_MEAN


89 
	#WIN32_LEAN_AND_MEAN
 1

	)

91 
	~<wödows.h
>

94 #i‡
deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


95 #¥agm®
imp‹t
 
⁄


98 #i‚de‡
GLAPI


99 
	#GLAPI
 

	)

102 #i‚de‡
GLAPIENTRY


103 
	#GLAPIENTRY


	)

106 #i‚de‡
APIENTRY


107 
	#APIENTRY
 
GLAPIENTRY


	)

111 #i‚de‡
APIENTRYP


112 
	#APIENTRYP
 
APIENTRY
 *

	)

115 #i‚de‡
GLAPIENTRYP


116 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

119 #ifde‡
CENTERLINE_CLPP


120 sig√d

	)

123 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

124 #¥agm®
exp‹t
 
⁄


134 #ifde‡
__˝lu•lus


140 
	#GL_VERSION_1_1
 1

	)

141 
	#GL_VERSION_1_2
 1

	)

142 
	#GL_VERSION_1_3
 1

	)

143 
	#GL_ARB_imagög
 1

	)

149 
	tGLíum
;

150 
	tGLboﬁón
;

151 
	tGLbôfõld
;

152 
	tGLvoid
;

153 sig√d 
	tGLbyã
;

154 
	tGLsh‹t
;

155 
	tGLöt
;

156 
	tGLubyã
;

157 
	tGLush‹t
;

158 
	tGLuöt
;

159 
	tGLsizei
;

160 
	tGLÊﬂt
;

161 
	tGL˛ampf
;

162 
	tGLdoubÀ
;

163 
	tGL˛ampd
;

172 
	#GL_FALSE
 0x0

	)

173 
	#GL_TRUE
 0x1

	)

176 
	#GL_BYTE
 0x1400

	)

177 
	#GL_UNSIGNED_BYTE
 0x1401

	)

178 
	#GL_SHORT
 0x1402

	)

179 
	#GL_UNSIGNED_SHORT
 0x1403

	)

180 
	#GL_INT
 0x1404

	)

181 
	#GL_UNSIGNED_INT
 0x1405

	)

182 
	#GL_FLOAT
 0x1406

	)

183 
	#GL_2_BYTES
 0x1407

	)

184 
	#GL_3_BYTES
 0x1408

	)

185 
	#GL_4_BYTES
 0x1409

	)

186 
	#GL_DOUBLE
 0x140A

	)

189 
	#GL_POINTS
 0x0000

	)

190 
	#GL_LINES
 0x0001

	)

191 
	#GL_LINE_LOOP
 0x0002

	)

192 
	#GL_LINE_STRIP
 0x0003

	)

193 
	#GL_TRIANGLES
 0x0004

	)

194 
	#GL_TRIANGLE_STRIP
 0x0005

	)

195 
	#GL_TRIANGLE_FAN
 0x0006

	)

196 
	#GL_QUADS
 0x0007

	)

197 
	#GL_QUAD_STRIP
 0x0008

	)

198 
	#GL_POLYGON
 0x0009

	)

201 
	#GL_VERTEX_ARRAY
 0x8074

	)

202 
	#GL_NORMAL_ARRAY
 0x8075

	)

203 
	#GL_COLOR_ARRAY
 0x8076

	)

204 
	#GL_INDEX_ARRAY
 0x8077

	)

205 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

206 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

207 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

208 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

209 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

210 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

211 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

212 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

213 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

214 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

215 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

216 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

217 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

218 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

219 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

220 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

221 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

222 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

223 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

224 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

225 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

226 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

227 
	#GL_V2F
 0x2A20

	)

228 
	#GL_V3F
 0x2A21

	)

229 
	#GL_C4UB_V2F
 0x2A22

	)

230 
	#GL_C4UB_V3F
 0x2A23

	)

231 
	#GL_C3F_V3F
 0x2A24

	)

232 
	#GL_N3F_V3F
 0x2A25

	)

233 
	#GL_C4F_N3F_V3F
 0x2A26

	)

234 
	#GL_T2F_V3F
 0x2A27

	)

235 
	#GL_T4F_V4F
 0x2A28

	)

236 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

237 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

238 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

239 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

240 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

243 
	#GL_MATRIX_MODE
 0x0BA0

	)

244 
	#GL_MODELVIEW
 0x1700

	)

245 
	#GL_PROJECTION
 0x1701

	)

246 
	#GL_TEXTURE
 0x1702

	)

249 
	#GL_POINT_SMOOTH
 0x0B10

	)

250 
	#GL_POINT_SIZE
 0x0B11

	)

251 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

252 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

255 
	#GL_LINE_SMOOTH
 0x0B20

	)

256 
	#GL_LINE_STIPPLE
 0x0B24

	)

257 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

258 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

259 
	#GL_LINE_WIDTH
 0x0B21

	)

260 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

261 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

264 
	#GL_POINT
 0x1B00

	)

265 
	#GL_LINE
 0x1B01

	)

266 
	#GL_FILL
 0x1B02

	)

267 
	#GL_CW
 0x0900

	)

268 
	#GL_CCW
 0x0901

	)

269 
	#GL_FRONT
 0x0404

	)

270 
	#GL_BACK
 0x0405

	)

271 
	#GL_POLYGON_MODE
 0x0B40

	)

272 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

273 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

274 
	#GL_EDGE_FLAG
 0x0B43

	)

275 
	#GL_CULL_FACE
 0x0B44

	)

276 
	#GL_CULL_FACE_MODE
 0x0B45

	)

277 
	#GL_FRONT_FACE
 0x0B46

	)

278 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

279 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

280 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

281 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

282 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

285 
	#GL_COMPILE
 0x1300

	)

286 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

287 
	#GL_LIST_BASE
 0x0B32

	)

288 
	#GL_LIST_INDEX
 0x0B33

	)

289 
	#GL_LIST_MODE
 0x0B30

	)

292 
	#GL_NEVER
 0x0200

	)

293 
	#GL_LESS
 0x0201

	)

294 
	#GL_EQUAL
 0x0202

	)

295 
	#GL_LEQUAL
 0x0203

	)

296 
	#GL_GREATER
 0x0204

	)

297 
	#GL_NOTEQUAL
 0x0205

	)

298 
	#GL_GEQUAL
 0x0206

	)

299 
	#GL_ALWAYS
 0x0207

	)

300 
	#GL_DEPTH_TEST
 0x0B71

	)

301 
	#GL_DEPTH_BITS
 0x0D56

	)

302 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

303 
	#GL_DEPTH_FUNC
 0x0B74

	)

304 
	#GL_DEPTH_RANGE
 0x0B70

	)

305 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

306 
	#GL_DEPTH_COMPONENT
 0x1902

	)

309 
	#GL_LIGHTING
 0x0B50

	)

310 
	#GL_LIGHT0
 0x4000

	)

311 
	#GL_LIGHT1
 0x4001

	)

312 
	#GL_LIGHT2
 0x4002

	)

313 
	#GL_LIGHT3
 0x4003

	)

314 
	#GL_LIGHT4
 0x4004

	)

315 
	#GL_LIGHT5
 0x4005

	)

316 
	#GL_LIGHT6
 0x4006

	)

317 
	#GL_LIGHT7
 0x4007

	)

318 
	#GL_SPOT_EXPONENT
 0x1205

	)

319 
	#GL_SPOT_CUTOFF
 0x1206

	)

320 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

321 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

322 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

323 
	#GL_AMBIENT
 0x1200

	)

324 
	#GL_DIFFUSE
 0x1201

	)

325 
	#GL_SPECULAR
 0x1202

	)

326 
	#GL_SHININESS
 0x1601

	)

327 
	#GL_EMISSION
 0x1600

	)

328 
	#GL_POSITION
 0x1203

	)

329 
	#GL_SPOT_DIRECTION
 0x1204

	)

330 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

331 
	#GL_COLOR_INDEXES
 0x1603

	)

332 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

333 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

334 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

335 
	#GL_FRONT_AND_BACK
 0x0408

	)

336 
	#GL_SHADE_MODEL
 0x0B54

	)

337 
	#GL_FLAT
 0x1D00

	)

338 
	#GL_SMOOTH
 0x1D01

	)

339 
	#GL_COLOR_MATERIAL
 0x0B57

	)

340 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

341 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

342 
	#GL_NORMALIZE
 0x0BA1

	)

345 
	#GL_CLIP_PLANE0
 0x3000

	)

346 
	#GL_CLIP_PLANE1
 0x3001

	)

347 
	#GL_CLIP_PLANE2
 0x3002

	)

348 
	#GL_CLIP_PLANE3
 0x3003

	)

349 
	#GL_CLIP_PLANE4
 0x3004

	)

350 
	#GL_CLIP_PLANE5
 0x3005

	)

353 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

354 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

355 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

356 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

357 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

358 
	#GL_ACCUM
 0x0100

	)

359 
	#GL_ADD
 0x0104

	)

360 
	#GL_LOAD
 0x0101

	)

361 
	#GL_MULT
 0x0103

	)

362 
	#GL_RETURN
 0x0102

	)

365 
	#GL_ALPHA_TEST
 0x0BC0

	)

366 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

367 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

370 
	#GL_BLEND
 0x0BE2

	)

371 
	#GL_BLEND_SRC
 0x0BE1

	)

372 
	#GL_BLEND_DST
 0x0BE0

	)

373 
	#GL_ZERO
 0x0

	)

374 
	#GL_ONE
 0x1

	)

375 
	#GL_SRC_COLOR
 0x0300

	)

376 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

377 
	#GL_SRC_ALPHA
 0x0302

	)

378 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

379 
	#GL_DST_ALPHA
 0x0304

	)

380 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

381 
	#GL_DST_COLOR
 0x0306

	)

382 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

383 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

386 
	#GL_FEEDBACK
 0x1C01

	)

387 
	#GL_RENDER
 0x1C00

	)

388 
	#GL_SELECT
 0x1C02

	)

391 
	#GL_2D
 0x0600

	)

392 
	#GL_3D
 0x0601

	)

393 
	#GL_3D_COLOR
 0x0602

	)

394 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

395 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

396 
	#GL_POINT_TOKEN
 0x0701

	)

397 
	#GL_LINE_TOKEN
 0x0702

	)

398 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

399 
	#GL_POLYGON_TOKEN
 0x0703

	)

400 
	#GL_BITMAP_TOKEN
 0x0704

	)

401 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

402 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

403 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

404 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

405 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

406 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

409 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

410 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

413 
	#GL_FOG
 0x0B60

	)

414 
	#GL_FOG_MODE
 0x0B65

	)

415 
	#GL_FOG_DENSITY
 0x0B62

	)

416 
	#GL_FOG_COLOR
 0x0B66

	)

417 
	#GL_FOG_INDEX
 0x0B61

	)

418 
	#GL_FOG_START
 0x0B63

	)

419 
	#GL_FOG_END
 0x0B64

	)

420 
	#GL_LINEAR
 0x2601

	)

421 
	#GL_EXP
 0x0800

	)

422 
	#GL_EXP2
 0x0801

	)

425 
	#GL_LOGIC_OP
 0x0BF1

	)

426 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

427 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

428 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

429 
	#GL_CLEAR
 0x1500

	)

430 
	#GL_SET
 0x150F

	)

431 
	#GL_COPY
 0x1503

	)

432 
	#GL_COPY_INVERTED
 0x150C

	)

433 
	#GL_NOOP
 0x1505

	)

434 
	#GL_INVERT
 0x150A

	)

435 
	#GL_AND
 0x1501

	)

436 
	#GL_NAND
 0x150E

	)

437 
	#GL_OR
 0x1507

	)

438 
	#GL_NOR
 0x1508

	)

439 
	#GL_XOR
 0x1506

	)

440 
	#GL_EQUIV
 0x1509

	)

441 
	#GL_AND_REVERSE
 0x1502

	)

442 
	#GL_AND_INVERTED
 0x1504

	)

443 
	#GL_OR_REVERSE
 0x150B

	)

444 
	#GL_OR_INVERTED
 0x150D

	)

447 
	#GL_STENCIL_BITS
 0x0D57

	)

448 
	#GL_STENCIL_TEST
 0x0B90

	)

449 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

450 
	#GL_STENCIL_FUNC
 0x0B92

	)

451 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

452 
	#GL_STENCIL_FAIL
 0x0B94

	)

453 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

454 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

455 
	#GL_STENCIL_REF
 0x0B97

	)

456 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

457 
	#GL_STENCIL_INDEX
 0x1901

	)

458 
	#GL_KEEP
 0x1E00

	)

459 
	#GL_REPLACE
 0x1E01

	)

460 
	#GL_INCR
 0x1E02

	)

461 
	#GL_DECR
 0x1E03

	)

464 
	#GL_NONE
 0x0

	)

465 
	#GL_LEFT
 0x0406

	)

466 
	#GL_RIGHT
 0x0407

	)

470 
	#GL_FRONT_LEFT
 0x0400

	)

471 
	#GL_FRONT_RIGHT
 0x0401

	)

472 
	#GL_BACK_LEFT
 0x0402

	)

473 
	#GL_BACK_RIGHT
 0x0403

	)

474 
	#GL_AUX0
 0x0409

	)

475 
	#GL_AUX1
 0x040A

	)

476 
	#GL_AUX2
 0x040B

	)

477 
	#GL_AUX3
 0x040C

	)

478 
	#GL_COLOR_INDEX
 0x1900

	)

479 
	#GL_RED
 0x1903

	)

480 
	#GL_GREEN
 0x1904

	)

481 
	#GL_BLUE
 0x1905

	)

482 
	#GL_ALPHA
 0x1906

	)

483 
	#GL_LUMINANCE
 0x1909

	)

484 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

485 
	#GL_ALPHA_BITS
 0x0D55

	)

486 
	#GL_RED_BITS
 0x0D52

	)

487 
	#GL_GREEN_BITS
 0x0D53

	)

488 
	#GL_BLUE_BITS
 0x0D54

	)

489 
	#GL_INDEX_BITS
 0x0D51

	)

490 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

491 
	#GL_AUX_BUFFERS
 0x0C00

	)

492 
	#GL_READ_BUFFER
 0x0C02

	)

493 
	#GL_DRAW_BUFFER
 0x0C01

	)

494 
	#GL_DOUBLEBUFFER
 0x0C32

	)

495 
	#GL_STEREO
 0x0C33

	)

496 
	#GL_BITMAP
 0x1A00

	)

497 
	#GL_COLOR
 0x1800

	)

498 
	#GL_DEPTH
 0x1801

	)

499 
	#GL_STENCIL
 0x1802

	)

500 
	#GL_DITHER
 0x0BD0

	)

501 
	#GL_RGB
 0x1907

	)

502 
	#GL_RGBA
 0x1908

	)

505 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

506 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

507 
	#GL_MAX_LIGHTS
 0x0D31

	)

508 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

509 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

510 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

511 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

512 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

513 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

514 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

515 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

516 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

517 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

520 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

521 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

522 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

523 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

524 
	#GL_CURRENT_INDEX
 0x0B01

	)

525 
	#GL_CURRENT_COLOR
 0x0B00

	)

526 
	#GL_CURRENT_NORMAL
 0x0B02

	)

527 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

528 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

529 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

530 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

531 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

532 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

533 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

534 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

535 
	#GL_INDEX_MODE
 0x0C30

	)

536 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

537 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

538 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

539 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

540 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

541 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

542 
	#GL_RENDER_MODE
 0x0C40

	)

543 
	#GL_RGBA_MODE
 0x0C31

	)

544 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

545 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

546 
	#GL_VIEWPORT
 0x0BA2

	)

549 
	#GL_AUTO_NORMAL
 0x0D80

	)

550 
	#GL_MAP1_COLOR_4
 0x0D90

	)

551 
	#GL_MAP1_INDEX
 0x0D91

	)

552 
	#GL_MAP1_NORMAL
 0x0D92

	)

553 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

554 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

555 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

556 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

557 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

558 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

559 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

560 
	#GL_MAP2_INDEX
 0x0DB1

	)

561 
	#GL_MAP2_NORMAL
 0x0DB2

	)

562 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

563 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

564 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

565 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

566 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

567 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

568 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

569 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

570 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

571 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

572 
	#GL_COEFF
 0x0A00

	)

573 
	#GL_ORDER
 0x0A01

	)

574 
	#GL_DOMAIN
 0x0A02

	)

577 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

578 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

579 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

580 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

581 
	#GL_FOG_HINT
 0x0C54

	)

582 
	#GL_DONT_CARE
 0x1100

	)

583 
	#GL_FASTEST
 0x1101

	)

584 
	#GL_NICEST
 0x1102

	)

587 
	#GL_SCISSOR_BOX
 0x0C10

	)

588 
	#GL_SCISSOR_TEST
 0x0C11

	)

591 
	#GL_MAP_COLOR
 0x0D10

	)

592 
	#GL_MAP_STENCIL
 0x0D11

	)

593 
	#GL_INDEX_SHIFT
 0x0D12

	)

594 
	#GL_INDEX_OFFSET
 0x0D13

	)

595 
	#GL_RED_SCALE
 0x0D14

	)

596 
	#GL_RED_BIAS
 0x0D15

	)

597 
	#GL_GREEN_SCALE
 0x0D18

	)

598 
	#GL_GREEN_BIAS
 0x0D19

	)

599 
	#GL_BLUE_SCALE
 0x0D1A

	)

600 
	#GL_BLUE_BIAS
 0x0D1B

	)

601 
	#GL_ALPHA_SCALE
 0x0D1C

	)

602 
	#GL_ALPHA_BIAS
 0x0D1D

	)

603 
	#GL_DEPTH_SCALE
 0x0D1E

	)

604 
	#GL_DEPTH_BIAS
 0x0D1F

	)

605 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

606 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

607 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

608 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

609 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

610 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

611 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

612 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

613 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

614 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

615 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

616 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

617 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

618 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

619 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

620 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

621 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

622 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

623 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

624 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

625 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

626 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

627 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

628 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

629 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

630 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

631 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

632 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

633 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

634 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

635 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

636 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

637 
	#GL_ZOOM_X
 0x0D16

	)

638 
	#GL_ZOOM_Y
 0x0D17

	)

641 
	#GL_TEXTURE_ENV
 0x2300

	)

642 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

643 
	#GL_TEXTURE_1D
 0x0DE0

	)

644 
	#GL_TEXTURE_2D
 0x0DE1

	)

645 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

646 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

647 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

648 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

649 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

650 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

651 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

652 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

653 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

654 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

655 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

656 
	#GL_TEXTURE_WIDTH
 0x1000

	)

657 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

658 
	#GL_TEXTURE_BORDER
 0x1005

	)

659 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

660 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

661 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

662 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

663 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

664 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

665 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

666 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

667 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

668 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

669 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

670 
	#GL_OBJECT_LINEAR
 0x2401

	)

671 
	#GL_OBJECT_PLANE
 0x2501

	)

672 
	#GL_EYE_LINEAR
 0x2400

	)

673 
	#GL_EYE_PLANE
 0x2502

	)

674 
	#GL_SPHERE_MAP
 0x2402

	)

675 
	#GL_DECAL
 0x2101

	)

676 
	#GL_MODULATE
 0x2100

	)

677 
	#GL_NEAREST
 0x2600

	)

678 
	#GL_REPEAT
 0x2901

	)

679 
	#GL_CLAMP
 0x2900

	)

680 
	#GL_S
 0x2000

	)

681 
	#GL_T
 0x2001

	)

682 
	#GL_R
 0x2002

	)

683 
	#GL_Q
 0x2003

	)

686 
	#GL_VENDOR
 0x1F00

	)

687 
	#GL_RENDERER
 0x1F01

	)

688 
	#GL_VERSION
 0x1F02

	)

689 
	#GL_EXTENSIONS
 0x1F03

	)

692 
	#GL_NO_ERROR
 0x0

	)

693 
	#GL_INVALID_ENUM
 0x0500

	)

694 
	#GL_INVALID_VALUE
 0x0501

	)

695 
	#GL_INVALID_OPERATION
 0x0502

	)

696 
	#GL_STACK_OVERFLOW
 0x0503

	)

697 
	#GL_STACK_UNDERFLOW
 0x0504

	)

698 
	#GL_OUT_OF_MEMORY
 0x0505

	)

701 
	#GL_CURRENT_BIT
 0x00000001

	)

702 
	#GL_POINT_BIT
 0x00000002

	)

703 
	#GL_LINE_BIT
 0x00000004

	)

704 
	#GL_POLYGON_BIT
 0x00000008

	)

705 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

706 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

707 
	#GL_LIGHTING_BIT
 0x00000040

	)

708 
	#GL_FOG_BIT
 0x00000080

	)

709 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

710 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

711 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

712 
	#GL_VIEWPORT_BIT
 0x00000800

	)

713 
	#GL_TRANSFORM_BIT
 0x00001000

	)

714 
	#GL_ENABLE_BIT
 0x00002000

	)

715 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

716 
	#GL_HINT_BIT
 0x00008000

	)

717 
	#GL_EVAL_BIT
 0x00010000

	)

718 
	#GL_LIST_BIT
 0x00020000

	)

719 
	#GL_TEXTURE_BIT
 0x00040000

	)

720 
	#GL_SCISSOR_BIT
 0x00080000

	)

721 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

725 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

726 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

727 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

728 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

729 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

730 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

731 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

732 
	#GL_ALPHA4
 0x803B

	)

733 
	#GL_ALPHA8
 0x803C

	)

734 
	#GL_ALPHA12
 0x803D

	)

735 
	#GL_ALPHA16
 0x803E

	)

736 
	#GL_LUMINANCE4
 0x803F

	)

737 
	#GL_LUMINANCE8
 0x8040

	)

738 
	#GL_LUMINANCE12
 0x8041

	)

739 
	#GL_LUMINANCE16
 0x8042

	)

740 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

741 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

742 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

743 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

744 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

745 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

746 
	#GL_INTENSITY
 0x8049

	)

747 
	#GL_INTENSITY4
 0x804A

	)

748 
	#GL_INTENSITY8
 0x804B

	)

749 
	#GL_INTENSITY12
 0x804C

	)

750 
	#GL_INTENSITY16
 0x804D

	)

751 
	#GL_R3_G3_B2
 0x2A10

	)

752 
	#GL_RGB4
 0x804F

	)

753 
	#GL_RGB5
 0x8050

	)

754 
	#GL_RGB8
 0x8051

	)

755 
	#GL_RGB10
 0x8052

	)

756 
	#GL_RGB12
 0x8053

	)

757 
	#GL_RGB16
 0x8054

	)

758 
	#GL_RGBA2
 0x8055

	)

759 
	#GL_RGBA4
 0x8056

	)

760 
	#GL_RGB5_A1
 0x8057

	)

761 
	#GL_RGBA8
 0x8058

	)

762 
	#GL_RGB10_A2
 0x8059

	)

763 
	#GL_RGBA12
 0x805A

	)

764 
	#GL_RGBA16
 0x805B

	)

765 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

766 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

767 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

768 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

776 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

778 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

780 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

784 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

786 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

788 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

790 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

792 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

798 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

800 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

802 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

804 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

806 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

810 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

812 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

814 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

816 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

818 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

820 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

822 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

824 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

826 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

828 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

831 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

833 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

836 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

838 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

840 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

842 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

845 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

847 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

850 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

852 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

855 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

857 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

859 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

861 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

863 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

865 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

872 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

874 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

876 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

878 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

885 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

887 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

894 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

896 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

897 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

898 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

900 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

901 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

902 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

904 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

905 
GLsizei
 
width
, GLsizeò
height
 );

907 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

909 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

911 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

913 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

914 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

916 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

917 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

919 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

920 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

921 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

922 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

924 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

925 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

927 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

928 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

935 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

937 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

939 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

941 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

943 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

945 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

947 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

948 c⁄° 
GLvoid
 *
li°s
 );

950 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

957 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

959 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

963 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

964 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

965 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

967 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

968 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

969 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

970 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

972 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

973 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

974 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

975 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

977 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

979 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

980 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

982 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

983 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

984 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

985 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

987 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

988 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

989 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

990 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

993 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

994 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

995 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

996 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

997 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

999 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

1000 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1001 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1002 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

1003 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

1006 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

1007 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

1008 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

1009 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

1010 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

1012 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

1013 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

1014 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

1015 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

1016 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1025 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1028 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1030 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1032 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1034 
GLöt
 
blue
, GLöà
Æpha
 );

1035 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1036 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1037 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1038 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1039 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1040 
GLuöt
 
blue
, GLuöà
Æpha
 );

1041 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1042 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1045 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1046 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1047 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1048 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1049 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1050 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1051 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1052 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1054 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1055 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1056 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1060 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1065 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1070 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1075 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1076 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1077 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1079 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1080 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1081 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1082 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1084 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1085 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1086 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1087 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1089 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1090 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1091 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1092 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1096 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1101 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1106 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1107 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1112 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1113 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1118 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1120 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1121 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1122 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1123 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1125 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1126 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1127 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1128 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1130 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1131 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1132 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1133 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1136 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1137 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1138 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1139 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1142 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1143 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1144 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1145 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1152 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1153 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1155 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1156 c⁄° 
GLvoid
 *
±r
 );

1158 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1159 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1161 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1162 c⁄° 
GLvoid
 *
±r
 );

1164 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1165 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1167 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1169 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1173 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1175 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1176 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1178 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1179 c⁄° 
GLvoid
 *
poöãr
 );

1185 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1187 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1188 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1189 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1190 c⁄° 
GLÊﬂt
 *
∑øms
 );

1191 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1192 c⁄° 
GLöt
 *
∑øms
 );

1194 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1195 
GLÊﬂt
 *
∑øms
 );

1196 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1197 
GLöt
 *
∑øms
 );

1199 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1200 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1201 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1202 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1204 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1205 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1206 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1207 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1209 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1210 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1212 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1219 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1221 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1222 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1224 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1225 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1227 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1228 c⁄° 
GLÊﬂt
 *
vÆues
 );

1229 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1230 c⁄° 
GLuöt
 *
vÆues
 );

1231 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1232 c⁄° 
GLush‹t
 *
vÆues
 );

1234 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1235 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1236 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1238 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1239 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1240 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1241 c⁄° 
GLubyã
 *
bôm≠
 );

1243 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1244 
GLsizei
 
width
, GLsizeò
height
,

1245 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1246 
GLvoid
 *
pixñs
 );

1248 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1249 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1250 c⁄° 
GLvoid
 *
pixñs
 );

1252 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1253 
GLsizei
 
width
, GLsizeò
height
,

1254 
GLíum
 
ty≥
 );

1260 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1262 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1264 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1266 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1275 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1276 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1278 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1279 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1280 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1283 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1287 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1290 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1291 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1293 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1294 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1297 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1298 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1300 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1301 c⁄° 
GLÊﬂt
 *
∑øms
 );

1302 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1303 c⁄° 
GLöt
 *
∑øms
 );

1305 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1306 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1307 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1308 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1310 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1311 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1312 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1313 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1316 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1317 
GLöt
 
öã∫ÆF‹m©
,

1318 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1319 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1320 c⁄° 
GLvoid
 *
pixñs
 );

1322 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1323 
GLöt
 
öã∫ÆF‹m©
,

1324 
GLsizei
 
width
, GLsizeò
height
,

1325 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1326 c⁄° 
GLvoid
 *
pixñs
 );

1328 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1329 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1330 
GLvoid
 *
pixñs
 );

1335 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1339 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1341 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1342 c⁄° 
GLuöt
 *
ãxtuªs
,

1343 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1345 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1346 c⁄° 
GLuöt
 *
ãxtuªs
,

1347 
GLboﬁón
 *
ªsidí˚s
 );

1349 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1352 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1353 
GLöt
 
xoff£t
,

1354 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1355 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1358 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1359 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1360 
GLsizei
 
width
, GLsizeò
height
,

1361 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1362 c⁄° 
GLvoid
 *
pixñs
 );

1365 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1366 
GLíum
 
öã∫Æf‹m©
,

1367 
GLöt
 
x
, GLöà
y
,

1368 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1371 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1372 
GLíum
 
öã∫Æf‹m©
,

1373 
GLöt
 
x
, GLöà
y
,

1374 
GLsizei
 
width
, GLsizeò
height
,

1375 
GLöt
 
b‹dî
 );

1378 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1379 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1380 
GLsizei
 
width
 );

1383 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1384 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1385 
GLöt
 
x
, GLöà
y
,

1386 
GLsizei
 
width
, GLsizeò
height
 );

1393 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1394 
GLöt
 
°ride
,

1395 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1396 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1397 
GLöt
 
°ride
,

1398 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1401 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1402 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1403 c⁄° 
GLdoubÀ
 *
poöts
 );

1404 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1405 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1406 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1407 c⁄° 
GLÊﬂt
 *
poöts
 );

1409 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1410 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1411 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1413 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1414 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1416 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1417 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1419 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1420 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1422 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1423 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1425 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1426 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1428 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1429 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1430 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1431 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1433 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1435 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1437 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1439 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1446 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1448 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1450 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1452 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1459 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1461 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1463 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1465 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1467 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1469 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1471 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1479 
	#GL_RESCALE_NORMAL
 0x803A

	)

1480 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1481 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1482 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1483 
	#GL_BGR
 0x80E0

	)

1484 
	#GL_BGRA
 0x80E1

	)

1485 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1486 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1487 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1488 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1489 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1490 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1491 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1492 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1493 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1494 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1495 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1496 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1497 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1498 
	#GL_SINGLE_COLOR
 0x81F9

	)

1499 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1500 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1501 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1502 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1503 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1504 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1505 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1506 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1507 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1508 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1509 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1510 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1511 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1512 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1513 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1514 
	#GL_TEXTURE_3D
 0x806F

	)

1515 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1516 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1517 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1518 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1519 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1521 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1522 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1524 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1525 
GLöt
 
öã∫ÆF‹m©
,

1526 
GLsizei
 
width
, GLsizeò
height
,

1527 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1528 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1529 c⁄° 
GLvoid
 *
pixñs
 );

1531 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1532 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1533 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1534 
GLsizei
 
height
, GLsizeò
dïth
,

1535 
GLíum
 
f‹m©
,

1536 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1538 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1539 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1540 
GLöt
 
zoff£t
, GLöà
x
,

1541 
GLöt
 
y
, 
GLsizei
 
width
,

1542 
GLsizei
 
height
 );

1544 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1545 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1546 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1547 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1554 
	#GL_CONSTANT_COLOR
 0x8001

	)

1555 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1556 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1557 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1558 
	#GL_COLOR_TABLE
 0x80D0

	)

1559 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1560 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1561 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1562 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1563 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1564 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1565 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1566 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1567 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1568 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1569 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1570 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1571 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1572 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1573 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1574 
	#GL_CONVOLUTION_1D
 0x8010

	)

1575 
	#GL_CONVOLUTION_2D
 0x8011

	)

1576 
	#GL_SEPARABLE_2D
 0x8012

	)

1577 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1578 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1579 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1580 
	#GL_REDUCE
 0x8016

	)

1581 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1582 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1583 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1584 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1585 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1586 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1587 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1588 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1589 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1590 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1591 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1592 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1593 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1594 
	#GL_CONSTANT_BORDER
 0x8151

	)

1595 
	#GL_REPLICATE_BORDER
 0x8153

	)

1596 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1597 
	#GL_COLOR_MATRIX
 0x80B1

	)

1598 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1599 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1600 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1601 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1602 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1603 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1604 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1605 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1606 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1607 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1608 
	#GL_HISTOGRAM
 0x8024

	)

1609 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1610 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1611 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1612 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1613 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1614 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1615 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1616 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1617 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1618 
	#GL_MINMAX
 0x802E

	)

1619 
	#GL_MINMAX_FORMAT
 0x802F

	)

1620 
	#GL_MINMAX_SINK
 0x8030

	)

1621 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1622 
	#GL_BLEND_EQUATION
 0x8009

	)

1623 
	#GL_MIN
 0x8007

	)

1624 
	#GL_MAX
 0x8008

	)

1625 
	#GL_FUNC_ADD
 0x8006

	)

1626 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1627 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1628 
	#GL_BLEND_COLOR
 0x8005

	)

1631 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1632 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1633 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1635 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1636 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1637 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1638 c⁄° 
GLvoid
 *
d©a
 );

1640 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1641 c⁄° 
GLöt
 *
∑øms
);

1643 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1644 c⁄° 
GLÊﬂt
 *
∑øms
);

1646 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1647 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1649 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1650 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1652 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1653 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1655 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1656 
GLÊﬂt
 *
∑øms
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1659 
GLöt
 *
∑øms
 );

1661 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1663 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1664 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1666 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1667 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1669 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1671 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1672 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1673 
GLvoid
 *
vÆues
 );

1675 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1676 
GLÊﬂt
 *
∑øms
 );

1678 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1679 
GLöt
 *
∑øms
 );

1681 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1682 
GLboﬁón
 
sök
 );

1684 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1686 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1687 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1688 
GLvoid
 *
vÆues
 );

1690 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1691 
GLÊﬂt
 *
∑øms
 );

1693 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1694 
GLöt
 *
∑øms
 );

1696 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1697 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1698 c⁄° 
GLvoid
 *
image
 );

1700 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1701 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1702 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1704 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1705 
GLÊﬂt
 
∑øms
 );

1707 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1708 c⁄° 
GLÊﬂt
 *
∑øms
 );

1710 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1711 
GLöt
 
∑øms
 );

1713 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1714 c⁄° 
GLöt
 *
∑øms
 );

1716 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1717 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1719 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1720 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1721 
GLsizei
 
height
);

1723 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1724 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1726 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1727 
GLÊﬂt
 *
∑øms
 );

1729 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1730 
GLöt
 *
∑øms
 );

1732 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1733 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1734 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1736 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1737 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1739 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1740 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1749 
	#GL_TEXTURE0
 0x84C0

	)

1750 
	#GL_TEXTURE1
 0x84C1

	)

1751 
	#GL_TEXTURE2
 0x84C2

	)

1752 
	#GL_TEXTURE3
 0x84C3

	)

1753 
	#GL_TEXTURE4
 0x84C4

	)

1754 
	#GL_TEXTURE5
 0x84C5

	)

1755 
	#GL_TEXTURE6
 0x84C6

	)

1756 
	#GL_TEXTURE7
 0x84C7

	)

1757 
	#GL_TEXTURE8
 0x84C8

	)

1758 
	#GL_TEXTURE9
 0x84C9

	)

1759 
	#GL_TEXTURE10
 0x84CA

	)

1760 
	#GL_TEXTURE11
 0x84CB

	)

1761 
	#GL_TEXTURE12
 0x84CC

	)

1762 
	#GL_TEXTURE13
 0x84CD

	)

1763 
	#GL_TEXTURE14
 0x84CE

	)

1764 
	#GL_TEXTURE15
 0x84CF

	)

1765 
	#GL_TEXTURE16
 0x84D0

	)

1766 
	#GL_TEXTURE17
 0x84D1

	)

1767 
	#GL_TEXTURE18
 0x84D2

	)

1768 
	#GL_TEXTURE19
 0x84D3

	)

1769 
	#GL_TEXTURE20
 0x84D4

	)

1770 
	#GL_TEXTURE21
 0x84D5

	)

1771 
	#GL_TEXTURE22
 0x84D6

	)

1772 
	#GL_TEXTURE23
 0x84D7

	)

1773 
	#GL_TEXTURE24
 0x84D8

	)

1774 
	#GL_TEXTURE25
 0x84D9

	)

1775 
	#GL_TEXTURE26
 0x84DA

	)

1776 
	#GL_TEXTURE27
 0x84DB

	)

1777 
	#GL_TEXTURE28
 0x84DC

	)

1778 
	#GL_TEXTURE29
 0x84DD

	)

1779 
	#GL_TEXTURE30
 0x84DE

	)

1780 
	#GL_TEXTURE31
 0x84DF

	)

1781 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1782 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1783 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1785 
	#GL_NORMAL_MAP
 0x8511

	)

1786 
	#GL_REFLECTION_MAP
 0x8512

	)

1787 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1788 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1789 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1790 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1791 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1792 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1793 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1794 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1795 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1796 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1798 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1799 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1800 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1801 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1802 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1803 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1804 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1805 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1806 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1807 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1808 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1810 
	#GL_MULTISAMPLE
 0x809D

	)

1811 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1812 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1813 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1814 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1815 
	#GL_SAMPLES
 0x80A9

	)

1816 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1817 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1818 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1820 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1821 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1822 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1823 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1825 
	#GL_COMBINE
 0x8570

	)

1826 
	#GL_COMBINE_RGB
 0x8571

	)

1827 
	#GL_COMBINE_ALPHA
 0x8572

	)

1828 
	#GL_SOURCE0_RGB
 0x8580

	)

1829 
	#GL_SOURCE1_RGB
 0x8581

	)

1830 
	#GL_SOURCE2_RGB
 0x8582

	)

1831 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1832 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1833 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1834 
	#GL_OPERAND0_RGB
 0x8590

	)

1835 
	#GL_OPERAND1_RGB
 0x8591

	)

1836 
	#GL_OPERAND2_RGB
 0x8592

	)

1837 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1838 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1839 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1840 
	#GL_RGB_SCALE
 0x8573

	)

1841 
	#GL_ADD_SIGNED
 0x8574

	)

1842 
	#GL_INTERPOLATE
 0x8575

	)

1843 
	#GL_SUBTRACT
 0x84E7

	)

1844 
	#GL_CONSTANT
 0x8576

	)

1845 
	#GL_PRIMARY_COLOR
 0x8577

	)

1846 
	#GL_PREVIOUS
 0x8578

	)

1848 
	#GL_DOT3_RGB
 0x86AE

	)

1849 
	#GL_DOT3_RGBA
 0x86AF

	)

1851 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1853 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1855 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1857 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1859 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1861 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1863 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1865 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1867 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1869 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1905 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1907 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1909 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1911 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1913 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1915 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1917 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1919 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1921 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1923 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1925 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1927 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1929 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1931 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1933 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1936 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1938 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1940 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1942 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1944 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1947 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1948 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1949 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1950 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1951 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1952 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1953 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1954 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1955 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1962 #i‚de‡
GL_ARB_mu…ôextuª


1963 
	#GL_ARB_mu…ôextuª
 1

	)

1965 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1966 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1967 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1968 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1969 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1970 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1971 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1972 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1973 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1974 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1975 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1976 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1977 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1978 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1979 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1980 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1981 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1982 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1983 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1984 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1985 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1986 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1987 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1988 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1989 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1990 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1991 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1992 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1993 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1994 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1995 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1996 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1997 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1998 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1999 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

2001 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2002 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2005 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

2006 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2007 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

2008 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2009 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

2010 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2011 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

2012 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2013 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

2014 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2015 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

2016 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2017 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

2018 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2019 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

2020 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2021 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

2022 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2023 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

2024 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2025 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2026 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2027 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2028 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2029 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2030 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2031 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2032 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2033 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2034 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2036 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2037 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2040 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2041 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2042 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2043 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2044 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2045 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2046 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2047 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2048 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2049 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2050 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2051 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2052 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2053 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2054 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2055 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2056 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2057 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2058 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2059 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2060 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2061 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2062 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2063 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2064 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2065 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2066 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2067 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2068 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2069 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2079 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2085 
	~<GL/gÀxt.h
>

2091 #i‡
GL_ARB_shadî_obje˘s


2093 #i‚de‡
GL_MESA_shadî_debug


2094 
	#GL_MESA_shadî_debug
 1

	)

2096 
	#GL_DEBUG_OBJECT_MESA
 0x8759

	)

2097 
	#GL_DEBUG_PRINT_MESA
 0x875A

	)

2098 
	#GL_DEBUG_ASSERT_MESA
 0x875B

	)

2100 
GLAPI
 
GLh™dÀARB
 
GLAPIENTRY
 
glCª©eDebugObje˘MESA
 ();

2101 
GLAPI
 
GLAPIENTRY
 
glCÀ¨DebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2102 
GLAPI
 
GLAPIENTRY
 
glGëDebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
, 
GLsizei
 
maxLígth
,

2103 
GLsizei
 *
Àngth
, 
GLch¨ARB
 *
debugLog
);

2104 
GLAPI
 
GLsizei
 
GLAPIENTRY
 
glGëDebugLogLígthMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2115 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2116 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2118 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2119 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2120 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2121 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2122 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2127 #i‚de‡
GL_MESA_¥ogøm_debug


2128 
	#GL_MESA_¥ogøm_debug
 1

	)

2130 
	#GL_FRAGMENT_PROGRAM_POSITION_MESA
 0x8bb0

	)

2131 
	#GL_FRAGMENT_PROGRAM_CALLBACK_MESA
 0x8bb1

	)

2132 
	#GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb2

	)

2133 
	#GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA
 0x8bb3

	)

2134 
	#GL_VERTEX_PROGRAM_POSITION_MESA
 0x8bb4

	)

2135 
	#GL_VERTEX_PROGRAM_CALLBACK_MESA
 0x8bb5

	)

2136 
	#GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb6

	)

2137 
	#GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA
 0x8bb7

	)

2139 (*
GL¥ogømˇŒbackMESA
)(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 *
	td©a
);

2141 
GLAPI
 
GLAPIENTRY
 
glProgømCÆlbackMESA
(
GLíum
 
èrgë
, 
GL¥ogømˇŒbackMESA
 
ˇŒback
, 
GLvoid
 *
d©a
);

2143 
GLAPI
 
GLAPIENTRY
 
glGëProgømRegi°îfvMESA
(
GLíum
 
èrgë
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
v
);

2148 #i‚de‡
GL_MESA_ãxtuª_¨øy


2149 
	#GL_MESA_ãxtuª_¨øy
 1

	)

2153 #i‚de‡
GL_EXT_ãxtuª_¨øy


2155 #ifde‡
GL_GLEXT_PROTOTYPES


2156 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
(
GLíum
 
èrgë
,

2157 
GLíum
 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2164 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
,

2165 
	tGLíum
 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2168 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

2169 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

2170 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

2171 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

2172 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

2173 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

2174 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

2175 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

2181 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2182 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2184 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2186 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2187 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2193 #i‚de‡
GL_OES_EGL_image


2194 * 
	tGLeglImageOES
;

2197 #i‚de‡
GL_OES_EGL_image


2198 
	#GL_OES_EGL_image
 1

	)

2199 #ifde‡
GL_GLEXT_PROTOTYPES


2200 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2201 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2203 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2204 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2219 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2220 #¥agm®
exp‹t
 
off


2223 #i‡
deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


2224 #¥agm®
imp‹t
 
off


2231 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fenv.h

23 #i‚de‡
_FENV_H


24 
	#_FENV_H
 1

	)

26 
	~<„©uªs.h
>

58 
	~<bôs/„nv.h
>

60 
__BEGIN_DECLS


65 
	$„˛óªx˚±
 (
__ex˚±s
Ë
__THROW
;

69 
	$„gëex˚±Êag
 (
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

72 
	$„øi£ex˚±
 (
__ex˚±s
Ë
__THROW
;

76 
	$„£ãx˚±Êag
 (
__c⁄°
 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

80 
	$„ã°ex˚±
 (
__ex˚±s
Ë
__THROW
;

86 
	$„gëround
 (Ë
__THROW
;

89 
	$„£åound
 (
__roundög_dúe˘i⁄
Ë
__THROW
;

96 
	$„gëív
 (
„nv_t
 *
__ívp
Ë
__THROW
;

101 
	$„hﬁdex˚±
 (
„nv_t
 *
__ívp
Ë
__THROW
;

105 
	$„£ãnv
 (
__c⁄°
 
„nv_t
 *
__ívp
Ë
__THROW
;

110 
	$„upd©ìnv
 (
__c⁄°
 
„nv_t
 *
__ívp
Ë
__THROW
;

114 #ifde‡
__OPTIMIZE__


115 
	~<bôs/„nvölöe.h
>

118 #ifde‡
__USE_GNU


123 
	$„íabÀex˚±
 (
__ex˚±s
Ë
__THROW
;

128 
	$„dißbÀex˚±
 (
__ex˚±s
Ë
__THROW
;

131 
	$„gëex˚±
 (Ë
__THROW
;

134 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 || deföed 
__LDBL_COMPAT
)

102 #ifde‡
__LDBL_COMPAT


104 #ifde‡
__USE_ISOC99


105 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

106 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

107 #ifde‡
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

109 
__∆dbl_√xâow¨df
)

110 
	`__©åibuã__
 ((
__c⁄°__
));

111 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

112 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

114 (
__x
, 
__y
),

115 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #unde‡
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

125 
¨gs
, 
Æüs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

130 #i‚de‡
_Ml⁄g_doubÀ_


131 
	#_Ml⁄g_doubÀ_
 

	)

133 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

134 #ifde‡
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

139 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bôs/m©hˇŒs.h
>

142 #unde‡
_MdoubÀ_


143 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


144 #unde‡
_MdoubÀ_END_NAMESPACE


145 #unde‡
__MATH_PRECNAME


150 #unde‡
__MATHDECL_1


151 #unde‡
__MATHDECL


152 #unde‡
__MATHCALL


155 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


157 
signgam
;

162 #ifde‡
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifde‡
__NO_LONG_DOUBLE_MATH


214 
	#Â˛assify
(
x
) \

215 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

217 
	#Â˛assify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__Â˛assifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

225 #ifde‡
__NO_LONG_DOUBLE_MATH


226 
	#signbô
(
x
) \

227 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

229 
	#signbô
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbôf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

237 #ifde‡
__NO_LONG_DOUBLE_MATH


238 
	#isföôe
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

241 
	#isföôe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__föôef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

249 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

253 #ifde‡
__NO_LONG_DOUBLE_MATH


254 
	#i¢™
(
x
) \

255 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

257 
	#i¢™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__i¢™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

265 #ifde‡
__NO_LONG_DOUBLE_MATH


266 
	#isöf
(
x
) \

267 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

269 
	#isöf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isöff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

283 #i‚de‡
__FAST_MATH__


284 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

289 #ifdef 
__USE_MISC


293 
_IEEE_
 = -1,

294 
_SVID_
,

295 
_XOPEN_
,

296 
_POSIX_
,

297 
_ISOC_


298 } 
	t_LIB_VERSION_TYPE
;

303 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

307 #ifde‡
__USE_SVID


313 #ifde‡
__˝lu•lus


314 
__ex˚±i⁄


316 
ex˚±i⁄


319 
ty≥
;

320 *
«me
;

321 
¨g1
;

322 
¨g2
;

323 
ªtvÆ
;

324 
	}
};

326 #ifde‡
__˝lu•lus


327 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

329 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

332 
	#X_TLOSS
 1.41484755040568800000e+16

	)

335 
	#DOMAIN
 1

	)

336 
	#SING
 2

	)

337 
	#OVERFLOW
 3

	)

338 
	#UNDERFLOW
 4

	)

339 
	#TLOSS
 5

	)

340 
	#PLOSS
 6

	)

343 
	#HUGE
 3.40282347e+38F

	)

347 #ifde‡
__USE_XOPEN


349 
	#MAXFLOAT
 3.40282347e+38F

	)

356 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


357 
	#M_E
 2.7182818284590452354

	)

358 
	#M_LOG2E
 1.4426950408889634074

	)

359 
	#M_LOG10E
 0.43429448190325182765

	)

360 
	#M_LN2
 0.69314718055994530942

	)

361 
	#M_LN10
 2.30258509299404568402

	)

362 
	#M_PI
 3.14159265358979323846

	)

363 
	#M_PI_2
 1.57079632679489661923

	)

364 
	#M_PI_4
 0.78539816339744830962

	)

365 
	#M_1_PI
 0.31830988618379067154

	)

366 
	#M_2_PI
 0.63661977236758134308

	)

367 
	#M_2_SQRTPI
 1.12837916709551257390

	)

368 
	#M_SQRT2
 1.41421356237309504880

	)

369 
	#M_SQRT1_2
 0.70710678118654752440

	)

375 #ifde‡
__USE_GNU


376 
	#M_El
 2.7182818284590452353602874713526625L

	)

377 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

378 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

379 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

380 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

381 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

382 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

383 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

384 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

385 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

386 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

387 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

388 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

395 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


396 
	#__NO_MATH_INLINES
 1

	)

399 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

406 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

407 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

408 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

409 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

410 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

411 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

415 #ifde‡
__USE_EXTERN_INLINES


416 
	~<bôs/m©hölöe.h
>

419 #ifde‡
__USE_ISOC99


423 #i‚de‡
isgª©î


424 
	#isgª©î
(
x
, 
y
) \

425 (
__exãnsi⁄__
 \

426 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

427 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

431 #i‚de‡
isgª©îequÆ


432 
	#isgª©îequÆ
(
x
, 
y
) \

433 (
__exãnsi⁄__
 \

434 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

435 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

439 #i‚de‡
i¶ess


440 
	#i¶ess
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

447 #i‚de‡
i¶es£quÆ


448 
	#i¶es£quÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

455 #i‚de‡
i¶essgª©î


456 
	#i¶essgª©î
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

463 #i‚de‡
isun‹dîed


464 
	#isun‹dîed
(
u
, 
v
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

467 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

472 
	g__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROW
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROW
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3"

	)

41 
	#ZLIB_VERNUM
 0x1230

	)

77 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

78 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

80 
öã∫Æ_°©e
;

82 
	sz_°ªam_s
 {

83 
Byãf
 *
√xt_ö
;

84 
uI¡
 
avaû_ö
;

85 
uL⁄g
 
tŸÆ_ö
;

87 
Byãf
 *
√xt_out
;

88 
uI¡
 
avaû_out
;

89 
uL⁄g
 
tŸÆ_out
;

91 *
msg
;

92 
öã∫Æ_°©e
 
FAR
 *
°©e
;

94 
Æloc_func
 
zÆloc
;

95 
‰ì_func
 
z‰ì
;

96 
voidpf
 
›aque
;

98 
d©a_ty≥
;

99 
uL⁄g
 
adÀr
;

100 
uL⁄g
 
ª£rved
;

101 } 
	tz_°ªam
;

103 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

109 
	sgz_hódî_s
 {

110 
ãxt
;

111 
uL⁄g
 
time
;

112 
xÊags
;

113 
os
;

114 
Byãf
 *
exåa
;

115 
uI¡
 
exåa_Àn
;

116 
uI¡
 
exåa_max
;

117 
Byãf
 *
«me
;

118 
uI¡
 
«me_max
;

119 
Byãf
 *
commít
;

120 
uI¡
 
comm_max
;

121 
h¸c
;

122 
d⁄e
;

124 } 
	tgz_hódî
;

126 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

162 
	#Z_NO_FLUSH
 0

	)

163 
	#Z_PARTIAL_FLUSH
 1

	)

164 
	#Z_SYNC_FLUSH
 2

	)

165 
	#Z_FULL_FLUSH
 3

	)

166 
	#Z_FINISH
 4

	)

167 
	#Z_BLOCK
 5

	)

170 
	#Z_OK
 0

	)

171 
	#Z_STREAM_END
 1

	)

172 
	#Z_NEED_DICT
 2

	)

173 
	#Z_ERRNO
 (-1)

	)

174 
	#Z_STREAM_ERROR
 (-2)

	)

175 
	#Z_DATA_ERROR
 (-3)

	)

176 
	#Z_MEM_ERROR
 (-4)

	)

177 
	#Z_BUF_ERROR
 (-5)

	)

178 
	#Z_VERSION_ERROR
 (-6)

	)

183 
	#Z_NO_COMPRESSION
 0

	)

184 
	#Z_BEST_SPEED
 1

	)

185 
	#Z_BEST_COMPRESSION
 9

	)

186 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

189 
	#Z_FILTERED
 1

	)

190 
	#Z_HUFFMAN_ONLY
 2

	)

191 
	#Z_RLE
 3

	)

192 
	#Z_FIXED
 4

	)

193 
	#Z_DEFAULT_STRATEGY
 0

	)

196 
	#Z_BINARY
 0

	)

197 
	#Z_TEXT
 1

	)

198 
	#Z_ASCII
 
Z_TEXT


	)

199 
	#Z_UNKNOWN
 2

	)

202 
	#Z_DEFLATED
 8

	)

205 
	#Z_NULL
 0

	)

207 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

212 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

242 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

328 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

363 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

462 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

538 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

539 c⁄° 
Byãf
 *
di˘i⁄¨y
,

540 
uI¡
 
di˘Lígth
));

577 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

578 
z_°ªamp
 
sour˚
));

595 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

606 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

607 
Àvñ
,

608 
°øãgy
));

627 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

628 
good_Àngth
,

629 
max_œzy
,

630 
ni˚_Àngth
,

631 
max_chaö
));

644 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

645 
uL⁄g
 
sour˚Lí
));

653 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

654 
bôs
,

655 
vÆue
));

669 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

670 
gz_hódîp
 
hód
));

736 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

737 c⁄° 
Byãf
 *
di˘i⁄¨y
,

738 
uI¡
 
di˘Lígth
));

758 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

773 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

774 
z_°ªamp
 
sour˚
));

789 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

799 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

800 
bôs
,

801 
vÆue
));

815 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

816 
gz_hódîp
 
hód
));

877 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

878 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

880 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

881 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

882 
out_func
 
out
, 
FAR
 *
out_desc
));

949 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

957 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1009 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1010 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1024 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1025 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1026 
Àvñ
));

1040 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1047 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1048 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1066 
voidp
 
	tgzFûe
;

1068 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((c⁄° *
∑th
, c⁄° *
mode
));

1085 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1098 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1106 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1114 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1115 
voidpc
 
buf
, 
Àn
));

1122 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1135 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1142 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1151 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1157 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1163 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1173 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1183 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
 
fûe
,

1184 
z_off_t
 
off£t
, 
whí˚
));

1201 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1208 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
 
fûe
));

1217 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1223 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1229 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1236 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1245 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1260 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1276 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g 
adÀr1
, uL⁄g 
adÀr2
,

1277 
z_off_t
 
Àn2
));

1285 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1301 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g 
¸c1
, uL⁄g 
¸c2
, 
z_off_t
 
Àn2
));

1317 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1318 c⁄° *
vîsi⁄
, 
°ªam_size
));

1319 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1320 c⁄° *
vîsi⁄
, 
°ªam_size
));

1321 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1322 
wödowBôs
, 
memLevñ
,

1323 
°øãgy
, c⁄° *
vîsi⁄
,

1324 
°ªam_size
));

1325 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1326 c⁄° *
vîsi⁄
, 
°ªam_size
));

1327 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1328 
FAR
 *
wödow
,

1329 c⁄° *
vîsi⁄
,

1330 
°ªam_size
));

1331 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1332 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1333 
	#öÊ©eInô
(
°rm
) \

1334 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1335 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1336 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1337 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1338 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1339 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1340 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1341 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1342 
ZLIB_VERSION
, (
z_°ªam
))

	)

1345 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1346 
	söã∫Æ_°©e
 {
dummy
;};

1349 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1350 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
 
z
));

1351 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1353 #ifde‡
__˝lu•lus


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

4 #ifde‡
__˝lu•lus


34 
	#GL_GLEXT_VERSION
 83

	)

37 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

38 
	#WIN32_LEAN_AND_MEAN
 1

	)

39 
	~<wödows.h
>

42 #i‚de‡
APIENTRY


43 
	#APIENTRY


	)

45 #i‚de‡
APIENTRYP


46 
	#APIENTRYP
 
APIENTRY
 *

	)

48 #i‚de‡
GLAPI


49 
	#GLAPI
 

	)

54 #i‚de‡
GL_VERSION_1_2


55 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

56 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

57 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

58 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

59 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

60 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

61 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

62 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

63 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

64 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

65 
	#GL_TEXTURE_3D
 0x806F

	)

66 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

67 
	#GL_TEXTURE_DEPTH
 0x8071

	)

68 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

69 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

70 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

71 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

72 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

73 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

74 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

75 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

76 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

77 
	#GL_BGR
 0x80E0

	)

78 
	#GL_BGRA
 0x80E1

	)

79 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

80 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

81 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

82 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

83 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

84 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

85 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

86 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

87 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

88 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

89 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

90 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

93 #i‚de‡
GL_VERSION_1_2_DEPRECATED


94 
	#GL_RESCALE_NORMAL
 0x803A

	)

95 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

96 
	#GL_SINGLE_COLOR
 0x81F9

	)

97 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

98 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

101 #i‚de‡
GL_ARB_imagög


102 
	#GL_CONSTANT_COLOR
 0x8001

	)

103 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

104 
	#GL_CONSTANT_ALPHA
 0x8003

	)

105 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

106 
	#GL_BLEND_COLOR
 0x8005

	)

107 
	#GL_FUNC_ADD
 0x8006

	)

108 
	#GL_MIN
 0x8007

	)

109 
	#GL_MAX
 0x8008

	)

110 
	#GL_BLEND_EQUATION
 0x8009

	)

111 
	#GL_FUNC_SUBTRACT
 0x800A

	)

112 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

115 #i‚de‡
GL_ARB_imagög_DEPRECATED


116 
	#GL_CONVOLUTION_1D
 0x8010

	)

117 
	#GL_CONVOLUTION_2D
 0x8011

	)

118 
	#GL_SEPARABLE_2D
 0x8012

	)

119 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

120 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

121 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

122 
	#GL_REDUCE
 0x8016

	)

123 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

124 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

125 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

126 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

127 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

128 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

129 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

130 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

131 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

132 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

133 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

134 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

135 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

136 
	#GL_HISTOGRAM
 0x8024

	)

137 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

138 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

139 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

140 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

141 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

142 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

143 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

144 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

145 
	#GL_HISTOGRAM_SINK
 0x802D

	)

146 
	#GL_MINMAX
 0x802E

	)

147 
	#GL_MINMAX_FORMAT
 0x802F

	)

148 
	#GL_MINMAX_SINK
 0x8030

	)

149 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

150 
	#GL_COLOR_MATRIX
 0x80B1

	)

151 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

152 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

153 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

154 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

155 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

156 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

157 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

158 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

159 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

160 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

161 
	#GL_COLOR_TABLE
 0x80D0

	)

162 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

163 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

164 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

165 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

166 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

167 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

168 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

169 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

170 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

171 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

172 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

173 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

174 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

175 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

176 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

177 
	#GL_CONSTANT_BORDER
 0x8151

	)

178 
	#GL_REPLICATE_BORDER
 0x8153

	)

179 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

182 #i‚de‡
GL_VERSION_1_3


183 
	#GL_TEXTURE0
 0x84C0

	)

184 
	#GL_TEXTURE1
 0x84C1

	)

185 
	#GL_TEXTURE2
 0x84C2

	)

186 
	#GL_TEXTURE3
 0x84C3

	)

187 
	#GL_TEXTURE4
 0x84C4

	)

188 
	#GL_TEXTURE5
 0x84C5

	)

189 
	#GL_TEXTURE6
 0x84C6

	)

190 
	#GL_TEXTURE7
 0x84C7

	)

191 
	#GL_TEXTURE8
 0x84C8

	)

192 
	#GL_TEXTURE9
 0x84C9

	)

193 
	#GL_TEXTURE10
 0x84CA

	)

194 
	#GL_TEXTURE11
 0x84CB

	)

195 
	#GL_TEXTURE12
 0x84CC

	)

196 
	#GL_TEXTURE13
 0x84CD

	)

197 
	#GL_TEXTURE14
 0x84CE

	)

198 
	#GL_TEXTURE15
 0x84CF

	)

199 
	#GL_TEXTURE16
 0x84D0

	)

200 
	#GL_TEXTURE17
 0x84D1

	)

201 
	#GL_TEXTURE18
 0x84D2

	)

202 
	#GL_TEXTURE19
 0x84D3

	)

203 
	#GL_TEXTURE20
 0x84D4

	)

204 
	#GL_TEXTURE21
 0x84D5

	)

205 
	#GL_TEXTURE22
 0x84D6

	)

206 
	#GL_TEXTURE23
 0x84D7

	)

207 
	#GL_TEXTURE24
 0x84D8

	)

208 
	#GL_TEXTURE25
 0x84D9

	)

209 
	#GL_TEXTURE26
 0x84DA

	)

210 
	#GL_TEXTURE27
 0x84DB

	)

211 
	#GL_TEXTURE28
 0x84DC

	)

212 
	#GL_TEXTURE29
 0x84DD

	)

213 
	#GL_TEXTURE30
 0x84DE

	)

214 
	#GL_TEXTURE31
 0x84DF

	)

215 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

216 
	#GL_MULTISAMPLE
 0x809D

	)

217 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

218 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

219 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

220 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

221 
	#GL_SAMPLES
 0x80A9

	)

222 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

223 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

224 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

225 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

226 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

227 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

228 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

229 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

230 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

231 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

232 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

233 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

234 
	#GL_COMPRESSED_RGB
 0x84ED

	)

235 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

236 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

237 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

238 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

239 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

240 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

241 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

244 #i‚de‡
GL_VERSION_1_3_DEPRECATED


245 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

246 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

247 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

248 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

249 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

250 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

251 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

252 
	#GL_NORMAL_MAP
 0x8511

	)

253 
	#GL_REFLECTION_MAP
 0x8512

	)

254 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

255 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

256 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

257 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

258 
	#GL_COMBINE
 0x8570

	)

259 
	#GL_COMBINE_RGB
 0x8571

	)

260 
	#GL_COMBINE_ALPHA
 0x8572

	)

261 
	#GL_SOURCE0_RGB
 0x8580

	)

262 
	#GL_SOURCE1_RGB
 0x8581

	)

263 
	#GL_SOURCE2_RGB
 0x8582

	)

264 
	#GL_SOURCE0_ALPHA
 0x8588

	)

265 
	#GL_SOURCE1_ALPHA
 0x8589

	)

266 
	#GL_SOURCE2_ALPHA
 0x858A

	)

267 
	#GL_OPERAND0_RGB
 0x8590

	)

268 
	#GL_OPERAND1_RGB
 0x8591

	)

269 
	#GL_OPERAND2_RGB
 0x8592

	)

270 
	#GL_OPERAND0_ALPHA
 0x8598

	)

271 
	#GL_OPERAND1_ALPHA
 0x8599

	)

272 
	#GL_OPERAND2_ALPHA
 0x859A

	)

273 
	#GL_RGB_SCALE
 0x8573

	)

274 
	#GL_ADD_SIGNED
 0x8574

	)

275 
	#GL_INTERPOLATE
 0x8575

	)

276 
	#GL_SUBTRACT
 0x84E7

	)

277 
	#GL_CONSTANT
 0x8576

	)

278 
	#GL_PRIMARY_COLOR
 0x8577

	)

279 
	#GL_PREVIOUS
 0x8578

	)

280 
	#GL_DOT3_RGB
 0x86AE

	)

281 
	#GL_DOT3_RGBA
 0x86AF

	)

284 #i‚de‡
GL_VERSION_1_4


285 
	#GL_BLEND_DST_RGB
 0x80C8

	)

286 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

287 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

288 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

289 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

290 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

291 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

292 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

293 
	#GL_MIRRORED_REPEAT
 0x8370

	)

294 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

295 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

296 
	#GL_INCR_WRAP
 0x8507

	)

297 
	#GL_DECR_WRAP
 0x8508

	)

298 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

299 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

300 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

303 #i‚de‡
GL_VERSION_1_4_DEPRECATED


304 
	#GL_POINT_SIZE_MIN
 0x8126

	)

305 
	#GL_POINT_SIZE_MAX
 0x8127

	)

306 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

307 
	#GL_GENERATE_MIPMAP
 0x8191

	)

308 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

309 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

310 
	#GL_FOG_COORDINATE
 0x8451

	)

311 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

312 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

313 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

314 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

315 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

316 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

317 
	#GL_COLOR_SUM
 0x8458

	)

318 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

319 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

320 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

321 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

322 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

323 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

324 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

325 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

326 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

329 #i‚de‡
GL_VERSION_1_5


330 
	#GL_BUFFER_SIZE
 0x8764

	)

331 
	#GL_BUFFER_USAGE
 0x8765

	)

332 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

333 
	#GL_CURRENT_QUERY
 0x8865

	)

334 
	#GL_QUERY_RESULT
 0x8866

	)

335 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

336 
	#GL_ARRAY_BUFFER
 0x8892

	)

337 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

338 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

339 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

340 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

341 
	#GL_READ_ONLY
 0x88B8

	)

342 
	#GL_WRITE_ONLY
 0x88B9

	)

343 
	#GL_READ_WRITE
 0x88BA

	)

344 
	#GL_BUFFER_ACCESS
 0x88BB

	)

345 
	#GL_BUFFER_MAPPED
 0x88BC

	)

346 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

347 
	#GL_STREAM_DRAW
 0x88E0

	)

348 
	#GL_STREAM_READ
 0x88E1

	)

349 
	#GL_STREAM_COPY
 0x88E2

	)

350 
	#GL_STATIC_DRAW
 0x88E4

	)

351 
	#GL_STATIC_READ
 0x88E5

	)

352 
	#GL_STATIC_COPY
 0x88E6

	)

353 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

354 
	#GL_DYNAMIC_READ
 0x88E9

	)

355 
	#GL_DYNAMIC_COPY
 0x88EA

	)

356 
	#GL_SAMPLES_PASSED
 0x8914

	)

359 #i‚de‡
GL_VERSION_1_5_DEPRECATED


360 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

361 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

362 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

363 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

364 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

365 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

366 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

367 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

368 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

369 
	#GL_FOG_COORD_SRC
 0x8450

	)

370 
	#GL_FOG_COORD
 0x8451

	)

371 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

372 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

373 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

374 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

375 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

376 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

377 
	#GL_SRC0_RGB
 0x8580

	)

378 
	#GL_SRC1_RGB
 0x8581

	)

379 
	#GL_SRC2_RGB
 0x8582

	)

380 
	#GL_SRC0_ALPHA
 0x8588

	)

381 
	#GL_SRC1_ALPHA
 0x8589

	)

382 
	#GL_SRC2_ALPHA
 0x858A

	)

385 #i‚de‡
GL_VERSION_2_0


386 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

387 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

388 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

389 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

390 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

391 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

392 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

393 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

394 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

395 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

396 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

397 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

398 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

399 
	#GL_DRAW_BUFFER0
 0x8825

	)

400 
	#GL_DRAW_BUFFER1
 0x8826

	)

401 
	#GL_DRAW_BUFFER2
 0x8827

	)

402 
	#GL_DRAW_BUFFER3
 0x8828

	)

403 
	#GL_DRAW_BUFFER4
 0x8829

	)

404 
	#GL_DRAW_BUFFER5
 0x882A

	)

405 
	#GL_DRAW_BUFFER6
 0x882B

	)

406 
	#GL_DRAW_BUFFER7
 0x882C

	)

407 
	#GL_DRAW_BUFFER8
 0x882D

	)

408 
	#GL_DRAW_BUFFER9
 0x882E

	)

409 
	#GL_DRAW_BUFFER10
 0x882F

	)

410 
	#GL_DRAW_BUFFER11
 0x8830

	)

411 
	#GL_DRAW_BUFFER12
 0x8831

	)

412 
	#GL_DRAW_BUFFER13
 0x8832

	)

413 
	#GL_DRAW_BUFFER14
 0x8833

	)

414 
	#GL_DRAW_BUFFER15
 0x8834

	)

415 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

416 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

417 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

418 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

419 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

420 
	#GL_VERTEX_SHADER
 0x8B31

	)

421 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

422 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

423 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

424 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

425 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

426 
	#GL_SHADER_TYPE
 0x8B4F

	)

427 
	#GL_FLOAT_VEC2
 0x8B50

	)

428 
	#GL_FLOAT_VEC3
 0x8B51

	)

429 
	#GL_FLOAT_VEC4
 0x8B52

	)

430 
	#GL_INT_VEC2
 0x8B53

	)

431 
	#GL_INT_VEC3
 0x8B54

	)

432 
	#GL_INT_VEC4
 0x8B55

	)

433 
	#GL_BOOL
 0x8B56

	)

434 
	#GL_BOOL_VEC2
 0x8B57

	)

435 
	#GL_BOOL_VEC3
 0x8B58

	)

436 
	#GL_BOOL_VEC4
 0x8B59

	)

437 
	#GL_FLOAT_MAT2
 0x8B5A

	)

438 
	#GL_FLOAT_MAT3
 0x8B5B

	)

439 
	#GL_FLOAT_MAT4
 0x8B5C

	)

440 
	#GL_SAMPLER_1D
 0x8B5D

	)

441 
	#GL_SAMPLER_2D
 0x8B5E

	)

442 
	#GL_SAMPLER_3D
 0x8B5F

	)

443 
	#GL_SAMPLER_CUBE
 0x8B60

	)

444 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

445 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

446 
	#GL_DELETE_STATUS
 0x8B80

	)

447 
	#GL_COMPILE_STATUS
 0x8B81

	)

448 
	#GL_LINK_STATUS
 0x8B82

	)

449 
	#GL_VALIDATE_STATUS
 0x8B83

	)

450 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

451 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

452 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

453 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

454 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

455 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

456 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

457 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

458 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

459 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

460 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

461 
	#GL_LOWER_LEFT
 0x8CA1

	)

462 
	#GL_UPPER_LEFT
 0x8CA2

	)

463 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

464 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

465 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

468 #i‚de‡
GL_VERSION_2_0_DEPRECATED


469 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

470 
	#GL_POINT_SPRITE
 0x8861

	)

471 
	#GL_COORD_REPLACE
 0x8862

	)

472 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

475 #i‚de‡
GL_VERSION_2_1


476 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

477 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

478 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

479 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

480 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

481 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

482 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

483 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

484 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

485 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

486 
	#GL_SRGB
 0x8C40

	)

487 
	#GL_SRGB8
 0x8C41

	)

488 
	#GL_SRGB_ALPHA
 0x8C42

	)

489 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

490 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

491 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

494 #i‚de‡
GL_VERSION_2_1_DEPRECATED


495 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

496 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

497 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

498 
	#GL_SLUMINANCE
 0x8C46

	)

499 
	#GL_SLUMINANCE8
 0x8C47

	)

500 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

501 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

504 #i‚de‡
GL_VERSION_3_0


505 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

506 
	#GL_CLIP_DISTANCE0
 0x3000

	)

507 
	#GL_CLIP_DISTANCE1
 0x3001

	)

508 
	#GL_CLIP_DISTANCE2
 0x3002

	)

509 
	#GL_CLIP_DISTANCE3
 0x3003

	)

510 
	#GL_CLIP_DISTANCE4
 0x3004

	)

511 
	#GL_CLIP_DISTANCE5
 0x3005

	)

512 
	#GL_CLIP_DISTANCE6
 0x3006

	)

513 
	#GL_CLIP_DISTANCE7
 0x3007

	)

514 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

515 
	#GL_MAJOR_VERSION
 0x821B

	)

516 
	#GL_MINOR_VERSION
 0x821C

	)

517 
	#GL_NUM_EXTENSIONS
 0x821D

	)

518 
	#GL_CONTEXT_FLAGS
 0x821E

	)

519 
	#GL_COMPRESSED_RED
 0x8225

	)

520 
	#GL_COMPRESSED_RG
 0x8226

	)

521 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

522 
	#GL_RGBA32F
 0x8814

	)

523 
	#GL_RGB32F
 0x8815

	)

524 
	#GL_RGBA16F
 0x881A

	)

525 
	#GL_RGB16F
 0x881B

	)

526 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

527 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

528 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

529 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

530 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

531 
	#GL_FIXED_ONLY
 0x891D

	)

532 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

533 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

534 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

535 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

536 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

537 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

538 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

539 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

540 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

541 
	#GL_RGB9_E5
 0x8C3D

	)

542 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

543 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

544 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

545 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

546 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

547 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

548 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

549 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

550 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

551 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

552 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

553 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

554 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

555 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

556 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

557 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

558 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

559 
	#GL_RGBA32UI
 0x8D70

	)

560 
	#GL_RGB32UI
 0x8D71

	)

561 
	#GL_RGBA16UI
 0x8D76

	)

562 
	#GL_RGB16UI
 0x8D77

	)

563 
	#GL_RGBA8UI
 0x8D7C

	)

564 
	#GL_RGB8UI
 0x8D7D

	)

565 
	#GL_RGBA32I
 0x8D82

	)

566 
	#GL_RGB32I
 0x8D83

	)

567 
	#GL_RGBA16I
 0x8D88

	)

568 
	#GL_RGB16I
 0x8D89

	)

569 
	#GL_RGBA8I
 0x8D8E

	)

570 
	#GL_RGB8I
 0x8D8F

	)

571 
	#GL_RED_INTEGER
 0x8D94

	)

572 
	#GL_GREEN_INTEGER
 0x8D95

	)

573 
	#GL_BLUE_INTEGER
 0x8D96

	)

574 
	#GL_RGB_INTEGER
 0x8D98

	)

575 
	#GL_RGBA_INTEGER
 0x8D99

	)

576 
	#GL_BGR_INTEGER
 0x8D9A

	)

577 
	#GL_BGRA_INTEGER
 0x8D9B

	)

578 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

579 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

580 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

581 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

582 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

583 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

584 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

585 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

586 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

587 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

588 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

589 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

590 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

591 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

592 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

593 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

594 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

595 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

596 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

597 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

598 
	#GL_QUERY_WAIT
 0x8E13

	)

599 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

600 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

601 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

602 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

603 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

604 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

731 #i‚de‡
GL_VERSION_3_0_DEPRECATED


732 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

733 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

734 
	#GL_ALPHA_INTEGER
 0x8D97

	)

740 #i‚de‡
GL_VERSION_3_1


741 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

742 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

743 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

744 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

745 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

746 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

747 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

748 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

749 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

750 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

751 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

752 
	#GL_TEXTURE_BUFFER_FORMAT
 0x8C2E

	)

753 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

754 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

755 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

756 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

757 
	#GL_RED_SNORM
 0x8F90

	)

758 
	#GL_RG_SNORM
 0x8F91

	)

759 
	#GL_RGB_SNORM
 0x8F92

	)

760 
	#GL_RGBA_SNORM
 0x8F93

	)

761 
	#GL_R8_SNORM
 0x8F94

	)

762 
	#GL_RG8_SNORM
 0x8F95

	)

763 
	#GL_RGB8_SNORM
 0x8F96

	)

764 
	#GL_RGBA8_SNORM
 0x8F97

	)

765 
	#GL_R16_SNORM
 0x8F98

	)

766 
	#GL_RG16_SNORM
 0x8F99

	)

767 
	#GL_RGB16_SNORM
 0x8F9A

	)

768 
	#GL_RGBA16_SNORM
 0x8F9B

	)

769 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

770 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

771 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

809 #i‚de‡
GL_VERSION_3_2


810 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

811 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

812 
	#GL_LINES_ADJACENCY
 0x000A

	)

813 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

814 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

815 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

816 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

817 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

818 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

819 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

820 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

821 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

822 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

823 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

824 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

825 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

826 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

827 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

828 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

829 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

830 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

831 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

887 #i‚de‡
GL_VERSION_3_3


888 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

915 #i‚de‡
GL_VERSION_4_0


916 
	#GL_SAMPLE_SHADING
 0x8C36

	)

917 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

918 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

919 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

920 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

921 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

922 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

923 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

924 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

925 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

926 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1006 #i‚de‡
GL_VERSION_4_1


1049 #i‚de‡
GL_VERSION_4_2


1167 #i‚de‡
GL_VERSION_4_3


1168 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

1169 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

1451 #i‚de‡
GL_ARB_mu…ôextuª


1452 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1453 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1454 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1455 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1456 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1457 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1458 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1459 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1460 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1461 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1462 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1463 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1464 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1465 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1466 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1467 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1468 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1469 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1470 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1471 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1472 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1473 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1474 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1475 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1476 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1477 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1478 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1479 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1480 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1481 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1482 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1483 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1484 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1485 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1486 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1489 #i‚de‡
GL_ARB_å™•o£_m©rix


1490 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

1491 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

1492 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

1493 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

1496 #i‚de‡
GL_ARB_mu…ißm∂e


1497 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

1498 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

1499 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

1500 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

1501 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

1502 
	#GL_SAMPLES_ARB
 0x80A9

	)

1503 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

1504 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

1505 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

1508 #i‚de‡
GL_ARB_ãxtuª_ív_add


1511 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


1512 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

1513 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

1514 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

1515 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

1516 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

1517 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

1518 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

1519 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

1520 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

1521 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

1522 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

1523 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

1526 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


1527 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

1528 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

1529 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

1530 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

1531 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

1532 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

1533 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

1534 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

1535 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

1536 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

1537 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

1540 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


1541 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

1544 #i‚de‡
GL_ARB_poöt_∑ømëîs


1545 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

1546 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

1547 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

1548 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

1551 #i‚de‡
GL_ARB_vîãx_bÀnd


1552 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

1553 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

1554 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

1555 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

1556 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

1557 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

1558 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

1559 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

1560 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

1561 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

1562 
	#GL_MODELVIEW0_ARB
 0x1700

	)

1563 
	#GL_MODELVIEW1_ARB
 0x850A

	)

1564 
	#GL_MODELVIEW2_ARB
 0x8722

	)

1565 
	#GL_MODELVIEW3_ARB
 0x8723

	)

1566 
	#GL_MODELVIEW4_ARB
 0x8724

	)

1567 
	#GL_MODELVIEW5_ARB
 0x8725

	)

1568 
	#GL_MODELVIEW6_ARB
 0x8726

	)

1569 
	#GL_MODELVIEW7_ARB
 0x8727

	)

1570 
	#GL_MODELVIEW8_ARB
 0x8728

	)

1571 
	#GL_MODELVIEW9_ARB
 0x8729

	)

1572 
	#GL_MODELVIEW10_ARB
 0x872A

	)

1573 
	#GL_MODELVIEW11_ARB
 0x872B

	)

1574 
	#GL_MODELVIEW12_ARB
 0x872C

	)

1575 
	#GL_MODELVIEW13_ARB
 0x872D

	)

1576 
	#GL_MODELVIEW14_ARB
 0x872E

	)

1577 
	#GL_MODELVIEW15_ARB
 0x872F

	)

1578 
	#GL_MODELVIEW16_ARB
 0x8730

	)

1579 
	#GL_MODELVIEW17_ARB
 0x8731

	)

1580 
	#GL_MODELVIEW18_ARB
 0x8732

	)

1581 
	#GL_MODELVIEW19_ARB
 0x8733

	)

1582 
	#GL_MODELVIEW20_ARB
 0x8734

	)

1583 
	#GL_MODELVIEW21_ARB
 0x8735

	)

1584 
	#GL_MODELVIEW22_ARB
 0x8736

	)

1585 
	#GL_MODELVIEW23_ARB
 0x8737

	)

1586 
	#GL_MODELVIEW24_ARB
 0x8738

	)

1587 
	#GL_MODELVIEW25_ARB
 0x8739

	)

1588 
	#GL_MODELVIEW26_ARB
 0x873A

	)

1589 
	#GL_MODELVIEW27_ARB
 0x873B

	)

1590 
	#GL_MODELVIEW28_ARB
 0x873C

	)

1591 
	#GL_MODELVIEW29_ARB
 0x873D

	)

1592 
	#GL_MODELVIEW30_ARB
 0x873E

	)

1593 
	#GL_MODELVIEW31_ARB
 0x873F

	)

1596 #i‚de‡
GL_ARB_m©rix_∑Àâe


1597 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

1598 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

1599 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

1600 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

1601 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

1602 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

1603 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

1604 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

1605 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

1606 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

1609 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


1610 
	#GL_COMBINE_ARB
 0x8570

	)

1611 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

1612 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

1613 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

1614 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

1615 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

1616 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

1617 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

1618 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

1619 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

1620 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

1621 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

1622 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

1623 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

1624 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

1625 
	#GL_RGB_SCALE_ARB
 0x8573

	)

1626 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

1627 
	#GL_INTERPOLATE_ARB
 0x8575

	)

1628 
	#GL_SUBTRACT_ARB
 0x84E7

	)

1629 
	#GL_CONSTANT_ARB
 0x8576

	)

1630 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

1631 
	#GL_PREVIOUS_ARB
 0x8578

	)

1634 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


1637 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


1638 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

1639 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

1642 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


1643 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

1646 #i‚de‡
GL_ARB_dïth_ãxtuª


1647 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

1648 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

1649 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

1650 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

1651 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

1654 #i‚de‡
GL_ARB_shadow


1655 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

1656 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

1657 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

1660 #i‚de‡
GL_ARB_shadow_ambõ¡


1661 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

1664 #i‚de‡
GL_ARB_wödow_pos


1667 #i‚de‡
GL_ARB_vîãx_¥ogøm


1668 
	#GL_COLOR_SUM_ARB
 0x8458

	)

1669 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

1670 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

1671 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

1672 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

1673 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

1674 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

1675 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

1676 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

1677 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

1678 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

1679 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

1680 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

1681 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

1682 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

1683 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

1684 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

1685 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

1686 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

1687 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

1688 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

1689 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

1690 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

1691 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

1692 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

1693 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

1694 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

1695 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

1696 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

1697 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

1698 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

1699 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

1700 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

1701 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

1702 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

1703 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

1704 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

1705 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

1706 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

1707 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

1708 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

1709 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

1710 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

1711 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

1712 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

1713 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

1714 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

1715 
	#GL_MATRIX0_ARB
 0x88C0

	)

1716 
	#GL_MATRIX1_ARB
 0x88C1

	)

1717 
	#GL_MATRIX2_ARB
 0x88C2

	)

1718 
	#GL_MATRIX3_ARB
 0x88C3

	)

1719 
	#GL_MATRIX4_ARB
 0x88C4

	)

1720 
	#GL_MATRIX5_ARB
 0x88C5

	)

1721 
	#GL_MATRIX6_ARB
 0x88C6

	)

1722 
	#GL_MATRIX7_ARB
 0x88C7

	)

1723 
	#GL_MATRIX8_ARB
 0x88C8

	)

1724 
	#GL_MATRIX9_ARB
 0x88C9

	)

1725 
	#GL_MATRIX10_ARB
 0x88CA

	)

1726 
	#GL_MATRIX11_ARB
 0x88CB

	)

1727 
	#GL_MATRIX12_ARB
 0x88CC

	)

1728 
	#GL_MATRIX13_ARB
 0x88CD

	)

1729 
	#GL_MATRIX14_ARB
 0x88CE

	)

1730 
	#GL_MATRIX15_ARB
 0x88CF

	)

1731 
	#GL_MATRIX16_ARB
 0x88D0

	)

1732 
	#GL_MATRIX17_ARB
 0x88D1

	)

1733 
	#GL_MATRIX18_ARB
 0x88D2

	)

1734 
	#GL_MATRIX19_ARB
 0x88D3

	)

1735 
	#GL_MATRIX20_ARB
 0x88D4

	)

1736 
	#GL_MATRIX21_ARB
 0x88D5

	)

1737 
	#GL_MATRIX22_ARB
 0x88D6

	)

1738 
	#GL_MATRIX23_ARB
 0x88D7

	)

1739 
	#GL_MATRIX24_ARB
 0x88D8

	)

1740 
	#GL_MATRIX25_ARB
 0x88D9

	)

1741 
	#GL_MATRIX26_ARB
 0x88DA

	)

1742 
	#GL_MATRIX27_ARB
 0x88DB

	)

1743 
	#GL_MATRIX28_ARB
 0x88DC

	)

1744 
	#GL_MATRIX29_ARB
 0x88DD

	)

1745 
	#GL_MATRIX30_ARB
 0x88DE

	)

1746 
	#GL_MATRIX31_ARB
 0x88DF

	)

1749 #i‚de‡
GL_ARB_‰agmít_¥ogøm


1750 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

1751 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

1752 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

1753 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

1754 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

1755 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

1756 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

1757 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

1758 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

1759 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

1760 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

1761 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

1762 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

1763 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

1764 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

1767 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


1768 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

1769 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

1770 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

1771 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

1772 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

1773 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

1774 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

1775 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

1776 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

1777 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

1778 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

1779 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

1780 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

1781 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

1782 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

1783 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

1784 
	#GL_READ_ONLY_ARB
 0x88B8

	)

1785 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

1786 
	#GL_READ_WRITE_ARB
 0x88BA

	)

1787 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

1788 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

1789 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

1790 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

1791 
	#GL_STREAM_READ_ARB
 0x88E1

	)

1792 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

1793 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

1794 
	#GL_STATIC_READ_ARB
 0x88E5

	)

1795 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

1796 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

1797 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

1798 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

1801 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


1802 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

1803 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

1804 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

1805 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

1806 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

1809 #i‚de‡
GL_ARB_shadî_obje˘s


1810 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

1811 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

1812 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

1813 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

1814 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

1815 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

1816 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

1817 
	#GL_INT_VEC2_ARB
 0x8B53

	)

1818 
	#GL_INT_VEC3_ARB
 0x8B54

	)

1819 
	#GL_INT_VEC4_ARB
 0x8B55

	)

1820 
	#GL_BOOL_ARB
 0x8B56

	)

1821 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

1822 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

1823 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

1824 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

1825 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

1826 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

1827 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

1828 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

1829 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

1830 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

1831 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

1832 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

1833 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

1834 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

1835 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

1836 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

1837 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

1838 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

1839 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

1840 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

1841 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

1842 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

1843 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

1846 #i‚de‡
GL_ARB_vîãx_shadî


1847 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

1848 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

1849 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

1850 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

1851 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

1852 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

1853 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

1856 #i‚de‡
GL_ARB_‰agmít_shadî


1857 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

1858 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

1859 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

1862 #i‚de‡
GL_ARB_shadög_œnguage_100


1863 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

1866 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


1869 #i‚de‡
GL_ARB_poöt_•rôe


1870 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

1871 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

1874 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


1877 #i‚de‡
GL_ARB_døw_buf„rs


1878 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

1879 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

1880 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

1881 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

1882 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

1883 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

1884 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

1885 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

1886 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

1887 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

1888 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

1889 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

1890 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

1891 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

1892 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

1893 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

1894 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

1897 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


1898 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

1899 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

1900 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

1901 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

1904 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


1905 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

1906 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

1907 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

1908 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

1909 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

1912 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


1913 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

1916 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


1917 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

1918 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

1919 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

1920 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

1921 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

1922 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

1923 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

1924 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

1925 
	#GL_RGBA32F_ARB
 0x8814

	)

1926 
	#GL_RGB32F_ARB
 0x8815

	)

1927 
	#GL_ALPHA32F_ARB
 0x8816

	)

1928 
	#GL_INTENSITY32F_ARB
 0x8817

	)

1929 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1930 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1931 
	#GL_RGBA16F_ARB
 0x881A

	)

1932 
	#GL_RGB16F_ARB
 0x881B

	)

1933 
	#GL_ALPHA16F_ARB
 0x881C

	)

1934 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1935 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1936 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1939 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1940 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1941 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1942 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1943 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1946 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


1947 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

1948 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

1949 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

1952 #i‚de‡
GL_ARB_døw_ö°™˚d


1955 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


1956 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

1957 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

1958 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

1959 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

1960 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

1961 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1962 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1963 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1964 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1965 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1966 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1967 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1968 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1969 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1970 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1971 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1972 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1973 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1974 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1975 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1976 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1977 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1978 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1979 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1980 
	#GL_DRAW_FRAMEBUFFER_BINDING
 
GL_FRAMEBUFFER_BINDING


	)

1981 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1982 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1983 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1984 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1985 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1986 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1987 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1988 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1989 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1990 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1991 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1992 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1993 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1994 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1995 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1996 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1997 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1998 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1999 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

2000 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

2001 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

2002 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

2003 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

2004 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

2005 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

2006 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

2007 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

2008 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

2009 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

2010 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

2011 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

2012 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

2013 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

2014 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

2015 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

2016 
	#GL_FRAMEBUFFER
 0x8D40

	)

2017 
	#GL_RENDERBUFFER
 0x8D41

	)

2018 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

2019 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

2020 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

2021 
	#GL_STENCIL_INDEX1
 0x8D46

	)

2022 
	#GL_STENCIL_INDEX4
 0x8D47

	)

2023 
	#GL_STENCIL_INDEX8
 0x8D48

	)

2024 
	#GL_STENCIL_INDEX16
 0x8D49

	)

2025 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

2026 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

2027 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

2028 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

2029 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

2030 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

2031 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

2032 
	#GL_MAX_SAMPLES
 0x8D57

	)

2035 #i‚de‡
GL_ARB_‰amebuf„r_obje˘_DEPRECATED


2036 
	#GL_INDEX
 0x8222

	)

2037 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

2038 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

2041 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


2042 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

2045 #i‚de‡
GL_ARB_geomëry_shadî4


2046 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

2047 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

2048 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

2049 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

2050 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

2051 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

2052 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

2053 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

2054 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

2055 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

2056 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

2057 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

2058 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

2059 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

2060 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

2061 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

2062 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

2063 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

2068 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


2069 
	#GL_HALF_FLOAT
 0x140B

	)

2072 #i‚de‡
GL_ARB_ö°™˚d_¨øys


2073 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

2076 #i‚de‡
GL_ARB_m≠_buf„r_ønge


2077 
	#GL_MAP_READ_BIT
 0x0001

	)

2078 
	#GL_MAP_WRITE_BIT
 0x0002

	)

2079 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

2080 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

2081 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

2082 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

2085 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


2086 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

2087 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

2088 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

2089 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

2090 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

2093 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


2094 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

2095 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

2096 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

2097 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

2100 #i‚de‡
GL_ARB_ãxtuª_rg


2101 
	#GL_RG
 0x8227

	)

2102 
	#GL_RG_INTEGER
 0x8228

	)

2103 
	#GL_R8
 0x8229

	)

2104 
	#GL_R16
 0x822A

	)

2105 
	#GL_RG8
 0x822B

	)

2106 
	#GL_RG16
 0x822C

	)

2107 
	#GL_R16F
 0x822D

	)

2108 
	#GL_R32F
 0x822E

	)

2109 
	#GL_RG16F
 0x822F

	)

2110 
	#GL_RG32F
 0x8230

	)

2111 
	#GL_R8I
 0x8231

	)

2112 
	#GL_R8UI
 0x8232

	)

2113 
	#GL_R16I
 0x8233

	)

2114 
	#GL_R16UI
 0x8234

	)

2115 
	#GL_R32I
 0x8235

	)

2116 
	#GL_R32UI
 0x8236

	)

2117 
	#GL_RG8I
 0x8237

	)

2118 
	#GL_RG8UI
 0x8238

	)

2119 
	#GL_RG16I
 0x8239

	)

2120 
	#GL_RG16UI
 0x823A

	)

2121 
	#GL_RG32I
 0x823B

	)

2122 
	#GL_RG32UI
 0x823C

	)

2125 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


2126 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

2129 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


2130 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

2131 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

2132 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

2133 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

2134 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

2135 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

2136 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

2137 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

2138 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

2139 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

2140 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

2141 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

2142 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

2143 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

2144 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

2145 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

2146 
	#GL_UNIFORM_TYPE
 0x8A37

	)

2147 
	#GL_UNIFORM_SIZE
 0x8A38

	)

2148 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

2149 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

2150 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

2151 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

2152 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

2153 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

2154 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

2155 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

2156 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

2157 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

2158 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

2159 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

2160 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

2161 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

2162 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

2165 #i‚de‡
GL_ARB_com∑tibûôy


2169 #i‚de‡
GL_ARB_c›y_buf„r


2170 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2171 
	#GL_COPY_READ_BUFFER
 
GL_COPY_READ_BUFFER_BINDING


	)

2172 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2173 
	#GL_COPY_WRITE_BUFFER
 
GL_COPY_WRITE_BUFFER_BINDING


	)

2176 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


2179 #i‚de‡
GL_ARB_dïth_˛amp


2180 
	#GL_DEPTH_CLAMP
 0x864F

	)

2183 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


2186 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


2189 #i‚de‡
GL_ARB_¥ovokög_vîãx


2190 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

2191 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

2192 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

2193 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

2196 #i‚de‡
GL_ARB_£amÀss_cube_m≠


2197 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

2200 #i‚de‡
GL_ARB_sync


2201 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

2202 
	#GL_OBJECT_TYPE
 0x9112

	)

2203 
	#GL_SYNC_CONDITION
 0x9113

	)

2204 
	#GL_SYNC_STATUS
 0x9114

	)

2205 
	#GL_SYNC_FLAGS
 0x9115

	)

2206 
	#GL_SYNC_FENCE
 0x9116

	)

2207 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

2208 
	#GL_UNSIGNALED
 0x9118

	)

2209 
	#GL_SIGNALED
 0x9119

	)

2210 
	#GL_ALREADY_SIGNALED
 0x911A

	)

2211 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

2212 
	#GL_CONDITION_SATISFIED
 0x911C

	)

2213 
	#GL_WAIT_FAILED
 0x911D

	)

2214 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

2215 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

2218 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


2219 
	#GL_SAMPLE_POSITION
 0x8E50

	)

2220 
	#GL_SAMPLE_MASK
 0x8E51

	)

2221 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

2222 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

2223 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

2224 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

2225 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

2226 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

2227 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

2228 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

2229 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

2230 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

2231 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

2232 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

2233 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

2234 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

2235 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

2236 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

2237 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

2238 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

2239 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

2242 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


2246 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


2249 #i‚de‡
GL_ARB_ßm∂e_shadög


2250 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

2251 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

2254 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


2255 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

2256 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

2257 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

2258 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

2259 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

2260 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

2261 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

2264 #i‚de‡
GL_ARB_ãxtuª_g©hî


2265 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

2266 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

2269 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


2272 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


2273 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

2274 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

2275 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

2278 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


2279 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

2280 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

2281 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

2282 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

2285 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2286 
	#GL_SRC1_COLOR
 0x88F9

	)

2288 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

2289 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

2290 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

2293 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


2296 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


2297 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

2300 #i‚de‡
GL_ARB_ßm∂î_obje˘s


2301 
	#GL_SAMPLER_BINDING
 0x8919

	)

2304 #i‚de‡
GL_ARB_shadî_bô_ícodög


2307 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


2308 
	#GL_RGB10_A2UI
 0x906F

	)

2311 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


2312 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

2313 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

2314 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

2315 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

2316 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

2319 #i‚de‡
GL_ARB_timî_quîy


2320 
	#GL_TIME_ELAPSED
 0x88BF

	)

2321 
	#GL_TIMESTAMP
 0x8E28

	)

2324 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


2326 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

2329 #i‚de‡
GL_ARB_døw_ödúe˘


2330 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

2331 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

2334 #i‚de‡
GL_ARB_gpu_shadî5


2335 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

2336 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

2337 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

2338 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

2339 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

2343 #i‚de‡
GL_ARB_gpu_shadî_Â64


2345 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

2346 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

2347 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

2348 
	#GL_DOUBLE_MAT2
 0x8F46

	)

2349 
	#GL_DOUBLE_MAT3
 0x8F47

	)

2350 
	#GL_DOUBLE_MAT4
 0x8F48

	)

2351 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

2352 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

2353 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

2354 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

2355 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

2356 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

2359 #i‚de‡
GL_ARB_shadî_subroutöe


2360 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

2361 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

2362 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

2363 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

2364 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

2365 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

2366 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

2367 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

2368 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

2373 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


2374 
	#GL_PATCHES
 0x000E

	)

2375 
	#GL_PATCH_VERTICES
 0x8E72

	)

2376 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

2377 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

2378 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

2379 
	#GL_TESS_GEN_MODE
 0x8E76

	)

2380 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

2381 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

2382 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

2385 
	#GL_ISOLINES
 0x8E7A

	)

2387 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

2388 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

2391 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

2392 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

2393 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

2394 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

2395 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

2396 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

2397 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

2398 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

2399 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

2400 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

2401 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

2402 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

2403 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

2404 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

2405 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

2406 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

2407 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

2408 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

2409 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

2410 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

2413 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


2419 #i‚de‡
GL_ARB_å™sf‹m_„edback2


2420 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

2421 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2422 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 
GL_TRANSFORM_FEEDBACK_PAUSED


	)

2423 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2424 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 
GL_TRANSFORM_FEEDBACK_ACTIVE


	)

2425 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

2428 #i‚de‡
GL_ARB_å™sf‹m_„edback3


2429 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

2430 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

2433 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2434 
	#GL_FIXED
 0x140C

	)

2435 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

2436 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

2437 
	#GL_LOW_FLOAT
 0x8DF0

	)

2438 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

2439 
	#GL_HIGH_FLOAT
 0x8DF2

	)

2440 
	#GL_LOW_INT
 0x8DF3

	)

2441 
	#GL_MEDIUM_INT
 0x8DF4

	)

2442 
	#GL_HIGH_INT
 0x8DF5

	)

2443 
	#GL_SHADER_COMPILER
 0x8DFA

	)

2444 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

2445 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

2446 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

2447 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

2448 
	#GL_RGB565
 0x8D62

	)

2451 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


2452 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

2453 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

2454 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

2455 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

2458 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


2459 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

2460 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

2461 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

2462 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

2463 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

2464 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

2465 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

2466 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

2467 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

2470 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


2473 #i‚de‡
GL_ARB_vîãx_©åib_64bô


2489 #i‚de‡
GL_ARB_võwp‹t_¨øy


2494 
	#GL_MAX_VIEWPORTS
 0x825B

	)

2495 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

2496 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

2497 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

2498 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

2499 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

2505 #i‚de‡
GL_ARB_˛_evít


2506 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2507 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2510 #i‚de‡
GL_ARB_debug_ouçut


2511 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

2512 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

2513 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

2514 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

2515 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

2516 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

2517 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

2518 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

2519 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

2520 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

2521 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

2522 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

2523 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

2524 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

2525 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

2526 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

2527 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

2528 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

2529 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

2530 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

2531 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

2532 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

2535 #i‚de‡
GL_ARB_robu°√ss


2537 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

2538 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

2539 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

2540 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

2541 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

2542 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

2543 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

2546 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


2549 #i‚de‡
GL_ARB_ba£_ö°™˚


2552 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


2555 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


2558 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2559 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2560 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2561 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2562 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2563 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2564 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2565 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2566 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2569 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


2572 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


2573 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2576 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


2577 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2580 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


2581 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2582 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2583 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2584 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2585 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2586 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2587 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2588 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2589 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2590 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2591 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2592 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2593 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2594 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2595 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2596 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2597 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2598 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2599 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2600 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2601 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2602 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2603 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2604 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2605 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2606 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2607 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2608 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2609 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2612 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


2613 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2614 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2615 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2616 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2617 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2618 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2619 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2620 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2621 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2622 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2623 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2624 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2625 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2626 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2627 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2628 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2629 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2630 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2631 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2632 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2633 
	#GL_IMAGE_1D
 0x904C

	)

2634 
	#GL_IMAGE_2D
 0x904D

	)

2635 
	#GL_IMAGE_3D
 0x904E

	)

2636 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2637 
	#GL_IMAGE_CUBE
 0x9050

	)

2638 
	#GL_IMAGE_BUFFER
 0x9051

	)

2639 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2640 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2641 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2642 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2643 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2644 
	#GL_INT_IMAGE_1D
 0x9057

	)

2645 
	#GL_INT_IMAGE_2D
 0x9058

	)

2646 
	#GL_INT_IMAGE_3D
 0x9059

	)

2647 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2648 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2649 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2650 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2651 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2652 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2653 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2654 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2655 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2656 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2657 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2658 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2659 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2660 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2661 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2662 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2663 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2664 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2665 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2666 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2667 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2668 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2669 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2670 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2671 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2672 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2673 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2674 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2675 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2676 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2679 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


2682 #i‚de‡
GL_ARB_ãxtuª_°‹age


2683 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2686 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


2687 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

2688 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

2689 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

2690 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

2691 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

2692 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

2693 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

2694 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

2695 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

2696 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

2697 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

2698 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

2699 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

2700 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

2701 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

2702 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

2703 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

2704 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

2705 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

2706 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

2707 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

2708 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

2709 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

2710 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

2711 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

2712 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

2713 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

2714 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

2717 #i‚de‡
GL_KHR_debug


2718 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2719 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2720 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2721 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2722 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2723 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2724 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2725 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2726 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2727 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2728 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2729 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2730 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2731 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2732 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2733 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2734 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2735 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2736 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2737 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2738 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2739 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2740 
	#GL_BUFFER
 0x82E0

	)

2741 
	#GL_SHADER
 0x82E1

	)

2742 
	#GL_PROGRAM
 0x82E2

	)

2743 
	#GL_QUERY
 0x82E3

	)

2744 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2745 
	#GL_SAMPLER
 0x82E6

	)

2746 
	#GL_DISPLAY_LIST
 0x82E7

	)

2747 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2748 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2749 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2750 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2751 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2752 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2753 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2754 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2755 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2760 #i‚de‡
GL_ARB_¨øys_of_¨øys


2763 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2766 #i‚de‡
GL_ARB_compuã_shadî


2767 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2768 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2769 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2770 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2771 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2772 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2773 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2774 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2775 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2776 
	#GL_MAX_COMPUTE_LOCAL_INVOCATIONS
 0x90EB

	)

2777 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2778 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2779 
	#GL_COMPUTE_LOCAL_WORK_SIZE
 0x8267

	)

2780 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2781 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2782 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2783 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2784 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2787 #i‚de‡
GL_ARB_c›y_image


2790 #i‚de‡
GL_ARB_debug_group


2801 #i‚de‡
GL_ARB_debug_œbñ


2814 #i‚de‡
GL_ARB_debug_ouçut2


2819 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2820 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2821 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2822 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2823 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2824 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2825 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2826 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2827 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2828 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2829 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2830 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2831 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2832 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2835 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


2836 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2839 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


2842 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


2843 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2844 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2845 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2846 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2847 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2848 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2849 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2850 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2851 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2854 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


2871 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2872 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2873 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2874 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2875 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2876 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2877 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2878 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2879 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2880 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2881 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2882 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2883 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2884 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2885 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2886 
	#GL_MAX_WIDTH
 0x827E

	)

2887 
	#GL_MAX_HEIGHT
 0x827F

	)

2888 
	#GL_MAX_DEPTH
 0x8280

	)

2889 
	#GL_MAX_LAYERS
 0x8281

	)

2890 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2891 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2892 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2893 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2894 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2895 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2896 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2897 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2898 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2899 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2900 
	#GL_READ_PIXELS
 0x828C

	)

2901 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2902 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2903 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2904 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2905 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2906 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2907 
	#GL_MIPMAP
 0x8293

	)

2908 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2909 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2910 
	#GL_COLOR_ENCODING
 0x8296

	)

2911 
	#GL_SRGB_READ
 0x8297

	)

2912 
	#GL_SRGB_WRITE
 0x8298

	)

2913 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

2914 
	#GL_FILTER
 0x829A

	)

2915 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2916 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2917 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2918 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2919 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2920 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2921 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2922 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2923 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2924 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2925 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2926 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2927 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2928 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2929 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2930 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2931 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2932 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2933 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2934 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2935 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2936 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2937 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2938 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2939 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2940 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2941 
	#GL_FULL_SUPPORT
 0x82B7

	)

2942 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2943 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2944 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2945 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2946 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2947 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2948 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2949 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2950 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2951 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2952 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2953 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2954 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2955 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2956 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2957 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2958 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2959 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2960 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2961 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2962 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2963 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2964 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2965 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2966 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2967 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2968 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2969 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2972 #i‚de‡
GL_ARB_övÆid©e_subd©a


2975 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


2978 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


2979 
	#GL_UNIFORM
 0x92E1

	)

2980 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2981 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2982 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2983 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2984 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2986 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2987 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2988 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2989 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2990 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2991 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2992 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2993 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2994 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2995 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2996 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2997 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2998 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2999 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

3000 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

3001 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

3002 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

3003 
	#GL_NAME_LENGTH
 0x92F9

	)

3004 
	#GL_TYPE
 0x92FA

	)

3005 
	#GL_ARRAY_SIZE
 0x92FB

	)

3006 
	#GL_OFFSET
 0x92FC

	)

3007 
	#GL_BLOCK_INDEX
 0x92FD

	)

3008 
	#GL_ARRAY_STRIDE
 0x92FE

	)

3009 
	#GL_MATRIX_STRIDE
 0x92FF

	)

3010 
	#GL_IS_ROW_MAJOR
 0x9300

	)

3011 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

3012 
	#GL_BUFFER_BINDING
 0x9302

	)

3013 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

3014 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

3015 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

3016 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

3017 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

3018 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

3019 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

3020 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

3021 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

3022 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

3023 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

3024 
	#GL_LOCATION
 0x930E

	)

3025 
	#GL_LOCATION_INDEX
 0x930F

	)

3026 
	#GL_IS_PER_PATCH
 0x92E7

	)

3031 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3034 #i‚de‡
GL_ARB_shadî_image_size


3037 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


3038 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

3039 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

3040 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

3041 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

3042 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

3043 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

3044 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

3045 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

3046 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

3047 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

3048 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

3049 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

3050 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

3051 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

3052 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x2000

	)

3053 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 
MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS


	)

3057 #i‚de‡
GL_ARB_°ícû_ãxturög


3058 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

3061 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


3062 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

3063 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

3064 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

3067 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


3070 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


3073 #i‚de‡
GL_ARB_ãxtuª_võw


3074 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

3075 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

3076 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

3077 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

3078 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

3081 #i‚de‡
GL_ARB_vîãx_©åib_bödög


3082 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

3083 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

3084 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

3085 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

3086 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

3087 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

3088 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

3091 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3094 #i‚de‡
GL_EXT_abgr


3095 
	#GL_ABGR_EXT
 0x8000

	)

3098 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


3099 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

3100 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

3101 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

3102 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

3103 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

3106 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


3107 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

3108 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

3109 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

3112 #i‚de‡
GL_EXT_ãxtuª


3113 
	#GL_ALPHA4_EXT
 0x803B

	)

3114 
	#GL_ALPHA8_EXT
 0x803C

	)

3115 
	#GL_ALPHA12_EXT
 0x803D

	)

3116 
	#GL_ALPHA16_EXT
 0x803E

	)

3117 
	#GL_LUMINANCE4_EXT
 0x803F

	)

3118 
	#GL_LUMINANCE8_EXT
 0x8040

	)

3119 
	#GL_LUMINANCE12_EXT
 0x8041

	)

3120 
	#GL_LUMINANCE16_EXT
 0x8042

	)

3121 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

3122 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

3123 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

3124 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

3125 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

3126 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

3127 
	#GL_INTENSITY_EXT
 0x8049

	)

3128 
	#GL_INTENSITY4_EXT
 0x804A

	)

3129 
	#GL_INTENSITY8_EXT
 0x804B

	)

3130 
	#GL_INTENSITY12_EXT
 0x804C

	)

3131 
	#GL_INTENSITY16_EXT
 0x804D

	)

3132 
	#GL_RGB2_EXT
 0x804E

	)

3133 
	#GL_RGB4_EXT
 0x804F

	)

3134 
	#GL_RGB5_EXT
 0x8050

	)

3135 
	#GL_RGB8_EXT
 0x8051

	)

3136 
	#GL_RGB10_EXT
 0x8052

	)

3137 
	#GL_RGB12_EXT
 0x8053

	)

3138 
	#GL_RGB16_EXT
 0x8054

	)

3139 
	#GL_RGBA2_EXT
 0x8055

	)

3140 
	#GL_RGBA4_EXT
 0x8056

	)

3141 
	#GL_RGB5_A1_EXT
 0x8057

	)

3142 
	#GL_RGBA8_EXT
 0x8058

	)

3143 
	#GL_RGB10_A2_EXT
 0x8059

	)

3144 
	#GL_RGBA12_EXT
 0x805A

	)

3145 
	#GL_RGBA16_EXT
 0x805B

	)

3146 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

3147 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

3148 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

3149 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

3150 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

3151 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

3152 
	#GL_REPLACE_EXT
 0x8062

	)

3153 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

3154 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

3155 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

3158 #i‚de‡
GL_EXT_ãxtuª3D


3159 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

3160 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

3161 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

3162 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

3163 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

3164 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

3165 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

3166 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

3167 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

3170 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


3171 
	#GL_FILTER4_SGIS
 0x8146

	)

3172 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

3175 #i‚de‡
GL_EXT_subãxtuª


3178 #i‚de‡
GL_EXT_c›y_ãxtuª


3181 #i‚de‡
GL_EXT_hi°ogøm


3182 
	#GL_HISTOGRAM_EXT
 0x8024

	)

3183 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

3184 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

3185 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

3186 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

3187 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

3188 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

3189 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

3190 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

3191 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

3192 
	#GL_MINMAX_EXT
 0x802E

	)

3193 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

3194 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

3195 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

3198 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


3199 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

3200 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

3201 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

3202 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

3203 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

3204 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

3205 
	#GL_REDUCE_EXT
 0x8016

	)

3206 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

3207 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

3208 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

3209 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

3210 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

3211 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

3212 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

3213 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

3214 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

3215 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

3216 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

3217 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

3218 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

3221 #i‚de‡
GL_SGI_cﬁ‹_m©rix


3222 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

3223 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

3224 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

3225 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

3226 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

3227 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

3228 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

3229 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

3230 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

3231 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

3232 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

3235 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


3236 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

3237 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

3238 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

3239 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

3240 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

3241 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

3242 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

3243 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

3244 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

3245 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

3246 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

3247 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

3248 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

3249 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

3250 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

3251 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

3254 #i‚de‡
GL_SGIS_pixñ_ãxtuª


3255 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

3256 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

3257 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

3258 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

3261 #i‚de‡
GL_SGIX_pixñ_ãxtuª


3262 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

3263 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

3266 #i‚de‡
GL_SGIS_ãxtuª4D


3267 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

3268 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

3269 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

3270 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

3271 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

3272 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

3273 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

3274 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

3275 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

3276 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

3279 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


3280 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

3281 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

3284 #i‚de‡
GL_EXT_cmyka


3285 
	#GL_CMYK_EXT
 0x800C

	)

3286 
	#GL_CMYKA_EXT
 0x800D

	)

3287 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

3288 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

3291 #i‚de‡
GL_EXT_ãxtuª_obje˘


3292 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

3293 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

3294 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

3295 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

3296 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

3299 #i‚de‡
GL_SGIS_dëaû_ãxtuª


3300 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

3301 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

3302 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

3303 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

3304 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

3305 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

3306 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

3307 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

3310 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


3311 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

3312 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

3313 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

3314 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

3317 #i‚de‡
GL_EXT_∑cked_pixñs


3318 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

3319 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

3320 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

3321 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

3322 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

3325 #i‚de‡
GL_SGIS_ãxtuª_lod


3326 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

3327 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

3328 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

3329 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

3332 #i‚de‡
GL_SGIS_mu…ißm∂e


3333 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

3334 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

3335 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

3336 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

3337 
	#GL_1PASS_SGIS
 0x80A1

	)

3338 
	#GL_2PASS_0_SGIS
 0x80A2

	)

3339 
	#GL_2PASS_1_SGIS
 0x80A3

	)

3340 
	#GL_4PASS_0_SGIS
 0x80A4

	)

3341 
	#GL_4PASS_1_SGIS
 0x80A5

	)

3342 
	#GL_4PASS_2_SGIS
 0x80A6

	)

3343 
	#GL_4PASS_3_SGIS
 0x80A7

	)

3344 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

3345 
	#GL_SAMPLES_SGIS
 0x80A9

	)

3346 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

3347 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

3348 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

3351 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


3352 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

3355 #i‚de‡
GL_EXT_vîãx_¨øy


3356 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

3357 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

3358 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

3359 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

3360 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

3361 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

3362 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

3363 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

3364 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

3365 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

3366 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

3367 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

3368 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

3369 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

3370 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

3371 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

3372 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

3373 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

3374 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

3375 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

3376 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

3377 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

3378 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

3379 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

3380 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

3381 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

3382 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

3383 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

3384 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

3385 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

3386 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

3387 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

3390 #i‚de‡
GL_EXT_misc_©åibuã


3393 #i‚de‡
GL_SGIS_gíî©e_mùm≠


3394 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

3395 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

3398 #i‚de‡
GL_SGIX_˛ùm≠


3399 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

3400 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

3401 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

3402 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

3403 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

3404 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

3405 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

3406 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

3407 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

3408 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

3409 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

3410 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

3413 #i‚de‡
GL_SGIX_shadow


3414 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

3415 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

3416 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

3417 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

3420 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


3421 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

3424 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


3425 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

3428 #i‚de‡
GL_EXT_bÀnd_mömax


3429 
	#GL_FUNC_ADD_EXT
 0x8006

	)

3430 
	#GL_MIN_EXT
 0x8007

	)

3431 
	#GL_MAX_EXT
 0x8008

	)

3432 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

3435 #i‚de‡
GL_EXT_bÀnd_subåa˘


3436 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

3437 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

3440 #i‚de‡
GL_EXT_bÀnd_logic_›


3443 #i‚de‡
GL_SGIX_öãæa˚


3444 
	#GL_INTERLACE_SGIX
 0x8094

	)

3447 #i‚de‡
GL_SGIX_pixñ_tûes


3448 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

3449 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

3450 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

3451 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

3452 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

3453 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

3454 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

3455 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

3458 #i‚de‡
GL_SGIS_ãxtuª_£À˘


3459 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

3460 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

3461 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

3462 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

3463 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

3464 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

3465 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

3466 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

3467 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

3468 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

3469 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

3470 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

3471 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

3472 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

3473 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

3474 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

3475 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

3476 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

3477 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

3478 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

3479 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

3480 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

3483 #i‚de‡
GL_SGIX_•rôe


3484 
	#GL_SPRITE_SGIX
 0x8148

	)

3485 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

3486 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

3487 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

3488 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

3489 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

3490 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

3493 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


3494 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

3497 #i‚de‡
GL_EXT_poöt_∑ømëîs


3498 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

3499 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

3500 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

3501 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

3504 #i‚de‡
GL_SGIS_poöt_∑ømëîs


3505 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

3506 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

3507 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

3508 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

3511 #i‚de‡
GL_SGIX_ö°rumíts


3512 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

3513 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

3516 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


3517 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

3518 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

3519 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

3520 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

3523 #i‚de‡
GL_SGIX_‰amezoom


3524 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

3525 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

3526 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

3529 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


3532 #i‚de‡
GL_FfdMaskSGIX


3533 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

3534 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

3537 #i‚de‡
GL_SGIX_pﬁynomül_ffd


3538 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

3539 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

3540 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

3541 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

3544 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


3545 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

3546 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

3549 #i‚de‡
GL_SGIX_Êush_ø°î


3552 #i‚de‡
GL_SGIX_dïth_ãxtuª


3553 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

3554 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

3555 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

3558 #i‚de‡
GL_SGIS_fog_fun˘i⁄


3559 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

3560 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

3561 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

3564 #i‚de‡
GL_SGIX_fog_off£t


3565 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

3566 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

3569 #i‚de‡
GL_HP_image_å™sf‹m


3570 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

3571 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

3572 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

3573 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

3574 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

3575 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

3576 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

3577 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

3578 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

3579 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

3580 
	#GL_CUBIC_HP
 0x815F

	)

3581 
	#GL_AVERAGE_HP
 0x8160

	)

3582 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

3583 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

3584 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

3587 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


3588 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

3589 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

3590 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

3591 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

3594 #i‚de‡
GL_INGR_∑Àâe_buf„r


3597 #i‚de‡
GL_SGIX_ãxtuª_add_ív


3598 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

3601 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


3604 #i‚de‡
GL_PGI_vîãx_höts


3605 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

3606 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

3607 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

3608 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

3609 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

3610 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

3611 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

3612 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

3613 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

3614 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

3615 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

3616 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

3617 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

3618 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

3619 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

3620 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

3621 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

3622 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

3623 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

3624 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

3625 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

3626 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

3629 #i‚de‡
GL_PGI_misc_höts


3630 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

3631 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

3632 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

3633 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

3634 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

3635 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

3636 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

3637 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

3638 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

3639 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

3640 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

3641 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

3642 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

3643 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

3644 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

3645 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

3646 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

3647 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

3648 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

3649 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

3652 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


3653 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

3654 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

3655 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

3656 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

3657 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

3658 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

3659 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

3662 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


3663 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

3666 #i‚de‡
GL_SGIX_li°_¥i‹ôy


3667 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

3670 #i‚de‡
GL_SGIX_ú_ö°rumít1


3671 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

3674 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


3675 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

3678 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


3679 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

3680 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

3681 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

3684 #i‚de‡
GL_SGIX_shadow_ambõ¡


3685 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

3688 #i‚de‡
GL_EXT_ödex_ãxtuª


3691 #i‚de‡
GL_EXT_ödex_m©îül


3692 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

3693 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

3694 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

3697 #i‚de‡
GL_EXT_ödex_func


3698 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

3699 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

3700 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

3703 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


3704 
	#GL_IUI_V2F_EXT
 0x81AD

	)

3705 
	#GL_IUI_V3F_EXT
 0x81AE

	)

3706 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

3707 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

3708 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

3709 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

3710 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

3711 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

3714 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


3715 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

3716 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

3719 #i‚de‡
GL_EXT_cuŒ_vîãx


3720 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

3721 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

3722 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

3725 #i‚de‡
GL_SGIX_y¸cb


3726 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

3727 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

3730 #i‚de‡
GL_SGIX_‰agmít_lightög


3731 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

3732 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

3733 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

3734 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

3735 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

3736 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

3737 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

3738 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

3739 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

3740 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

3741 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

3742 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

3743 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

3744 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

3745 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

3746 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

3747 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

3748 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

3749 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

3750 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

3753 #i‚de‡
GL_IBM_ø°îpos_˛ù


3754 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

3757 #i‚de‡
GL_HP_ãxtuª_lightög


3758 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

3759 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

3760 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

3763 #i‚de‡
GL_EXT_døw_ønge_ñemíts


3764 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

3765 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

3768 #i‚de‡
GL_WIN_ph⁄g_shadög


3769 
	#GL_PHONG_WIN
 0x80EA

	)

3770 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

3773 #i‚de‡
GL_WIN_•ecuœr_fog


3774 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

3777 #i‚de‡
GL_EXT_light_ãxtuª


3778 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

3779 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

3780 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

3781 
	#GL_ATTENUATION_EXT
 0x834D

	)

3782 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

3783 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

3784 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

3785 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

3786 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

3790 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


3791 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

3792 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

3795 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


3796 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

3797 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

3798 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

3799 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

3800 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

3801 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

3802 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

3805 #i‚de‡
GL_EXT_bgø


3806 
	#GL_BGR_EXT
 0x80E0

	)

3807 
	#GL_BGRA_EXT
 0x80E1

	)

3810 #i‚de‡
GL_SGIX_async


3811 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

3814 #i‚de‡
GL_SGIX_async_pixñ


3815 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

3816 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

3817 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

3818 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

3819 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

3820 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

3823 #i‚de‡
GL_SGIX_async_hi°ogøm


3824 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

3825 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

3828 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


3831 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


3832 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

3833 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

3834 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

3835 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

3836 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

3839 #i‚de‡
GL_HP_oc˛usi⁄_ã°


3840 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

3841 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

3844 #i‚de‡
GL_EXT_pixñ_å™sf‹m


3845 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

3846 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

3847 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

3848 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

3849 
	#GL_CUBIC_EXT
 0x8334

	)

3850 
	#GL_AVERAGE_EXT
 0x8335

	)

3851 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

3852 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

3853 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

3856 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


3859 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


3860 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

3863 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


3864 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

3865 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

3866 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

3869 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


3870 
	#GL_COLOR_SUM_EXT
 0x8458

	)

3871 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

3872 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

3873 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

3874 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

3875 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

3876 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

3879 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


3880 
	#GL_PERTURB_EXT
 0x85AE

	)

3881 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

3884 #i‚de‡
GL_EXT_mu…i_døw_¨øys


3887 #i‚de‡
GL_EXT_fog_co‹d


3888 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

3889 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

3890 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

3891 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

3892 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

3893 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

3894 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

3895 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

3898 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


3899 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

3900 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

3903 #i‚de‡
GL_EXT_co‹dö©e_‰ame


3904 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

3905 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

3906 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

3907 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

3908 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

3909 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

3910 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

3911 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

3912 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

3913 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

3914 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

3915 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

3916 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

3917 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

3920 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


3921 
	#GL_COMBINE_EXT
 0x8570

	)

3922 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

3923 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

3924 
	#GL_RGB_SCALE_EXT
 0x8573

	)

3925 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

3926 
	#GL_INTERPOLATE_EXT
 0x8575

	)

3927 
	#GL_CONSTANT_EXT
 0x8576

	)

3928 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

3929 
	#GL_PREVIOUS_EXT
 0x8578

	)

3930 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

3931 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

3932 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

3933 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

3934 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

3935 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

3936 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

3937 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

3938 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

3939 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

3940 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

3941 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

3944 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


3945 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

3948 #i‚de‡
GL_APPLE_å™sf‹m_höt


3949 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

3952 #i‚de‡
GL_SGIX_fog_sˇÀ


3953 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

3954 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

3957 #i‚de‡
GL_SUNX_c⁄°™t_d©a


3958 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

3959 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

3962 #i‚de‡
GL_SUN_globÆ_Æpha


3963 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

3964 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

3967 #i‚de‡
GL_SUN_åüngÀ_li°


3968 
	#GL_RESTART_SUN
 0x0001

	)

3969 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

3970 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

3971 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

3972 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

3973 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

3974 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

3975 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

3976 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

3977 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

3978 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

3979 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

3980 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

3981 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

3982 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

3983 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

3984 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

3987 #i‚de‡
GL_SUN_vîãx


3990 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


3991 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

3992 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

3993 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

3994 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

3997 #i‚de‡
GL_INGR_cﬁ‹_˛amp


3998 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

3999 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

4000 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

4001 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

4002 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

4003 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

4004 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

4005 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

4008 #i‚de‡
GL_INGR_öãæa˚_ªad


4009 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

4012 #i‚de‡
GL_EXT_°ícû_wøp


4013 
	#GL_INCR_WRAP_EXT
 0x8507

	)

4014 
	#GL_DECR_WRAP_EXT
 0x8508

	)

4017 #i‚de‡
GL_EXT_422_pixñs


4018 
	#GL_422_EXT
 0x80CC

	)

4019 
	#GL_422_REV_EXT
 0x80CD

	)

4020 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

4021 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

4024 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


4025 
	#GL_NORMAL_MAP_NV
 0x8511

	)

4026 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

4029 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


4030 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

4031 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

4032 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

4033 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

4034 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

4035 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

4036 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

4037 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

4038 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

4039 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

4040 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

4041 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

4044 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


4045 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

4048 #i‚de‡
GL_EXT_ãxtuª_ív_add


4051 #i‚de‡
GL_EXT_ãxtuª_lod_büs


4052 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

4053 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

4054 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

4057 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


4058 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

4059 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

4062 #i‚de‡
GL_EXT_vîãx_weightög


4063 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

4064 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

4065 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

4066 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

4067 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

4068 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

4069 
	#GL_MODELVIEW1_EXT
 0x850A

	)

4070 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

4071 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

4072 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

4073 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

4074 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

4075 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

4078 #i‚de‡
GL_NV_light_max_exp⁄ít


4079 
	#GL_MAX_SHININESS_NV
 0x8504

	)

4080 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

4083 #i‚de‡
GL_NV_vîãx_¨øy_ønge


4084 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

4085 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

4086 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

4087 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

4088 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

4091 #i‚de‡
GL_NV_ªgi°î_comböîs


4092 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

4093 
	#GL_VARIABLE_A_NV
 0x8523

	)

4094 
	#GL_VARIABLE_B_NV
 0x8524

	)

4095 
	#GL_VARIABLE_C_NV
 0x8525

	)

4096 
	#GL_VARIABLE_D_NV
 0x8526

	)

4097 
	#GL_VARIABLE_E_NV
 0x8527

	)

4098 
	#GL_VARIABLE_F_NV
 0x8528

	)

4099 
	#GL_VARIABLE_G_NV
 0x8529

	)

4100 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

4101 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

4102 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

4103 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

4104 
	#GL_SPARE0_NV
 0x852E

	)

4105 
	#GL_SPARE1_NV
 0x852F

	)

4106 
	#GL_DISCARD_NV
 0x8530

	)

4107 
	#GL_E_TIMES_F_NV
 0x8531

	)

4108 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

4109 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

4110 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

4111 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

4112 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

4113 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

4114 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

4115 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

4116 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

4117 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

4118 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

4119 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

4120 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

4121 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

4122 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

4123 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

4124 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

4125 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

4126 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

4127 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

4128 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

4129 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

4130 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

4131 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

4132 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

4133 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

4134 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

4135 
	#GL_COMBINER0_NV
 0x8550

	)

4136 
	#GL_COMBINER1_NV
 0x8551

	)

4137 
	#GL_COMBINER2_NV
 0x8552

	)

4138 
	#GL_COMBINER3_NV
 0x8553

	)

4139 
	#GL_COMBINER4_NV
 0x8554

	)

4140 
	#GL_COMBINER5_NV
 0x8555

	)

4141 
	#GL_COMBINER6_NV
 0x8556

	)

4142 
	#GL_COMBINER7_NV
 0x8557

	)

4150 #i‚de‡
GL_NV_fog_di°™˚


4151 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

4152 
	#GL_EYE_RADIAL_NV
 0x855B

	)

4153 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

4157 #i‚de‡
GL_NV_ãxgí_emboss


4158 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

4159 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

4160 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

4163 #i‚de‡
GL_NV_bÀnd_squ¨e


4166 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


4167 
	#GL_COMBINE4_NV
 0x8503

	)

4168 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

4169 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

4170 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

4171 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

4174 #i‚de‡
GL_MESA_ªsize_buf„rs


4177 #i‚de‡
GL_MESA_wödow_pos


4180 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


4181 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

4182 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

4183 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

4184 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

4187 #i‚de‡
GL_IBM_cuŒ_vîãx


4188 
	#GL_CULL_VERTEX_IBM
 103050

	)

4191 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


4194 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


4195 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

4196 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

4197 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

4198 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

4199 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

4200 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

4201 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

4202 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

4203 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

4204 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

4205 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

4206 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

4207 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

4208 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

4209 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

4210 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

4213 #i‚de‡
GL_SGIX_subßm∂e


4214 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

4215 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

4216 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

4217 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

4218 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

4221 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


4224 #i‚de‡
GL_SGIX_y¸cba


4225 
	#GL_YCRCB_SGIX
 0x8318

	)

4226 
	#GL_YCRCBA_SGIX
 0x8319

	)

4229 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


4230 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

4231 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

4232 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

4235 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


4236 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

4237 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

4240 #i‚de‡
GL_3DFX_mu…ißm∂e


4241 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

4242 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

4243 
	#GL_SAMPLES_3DFX
 0x86B4

	)

4244 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

4247 #i‚de‡
GL_3DFX_tbuf„r


4250 #i‚de‡
GL_EXT_mu…ißm∂e


4251 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

4252 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

4253 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

4254 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

4255 
	#GL_1PASS_EXT
 0x80A1

	)

4256 
	#GL_2PASS_0_EXT
 0x80A2

	)

4257 
	#GL_2PASS_1_EXT
 0x80A3

	)

4258 
	#GL_4PASS_0_EXT
 0x80A4

	)

4259 
	#GL_4PASS_1_EXT
 0x80A5

	)

4260 
	#GL_4PASS_2_EXT
 0x80A6

	)

4261 
	#GL_4PASS_3_EXT
 0x80A7

	)

4262 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

4263 
	#GL_SAMPLES_EXT
 0x80A9

	)

4264 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

4265 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

4266 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

4267 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

4270 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


4271 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

4272 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

4275 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


4276 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

4279 #i‚de‡
GL_SGIX_ªßm∂e


4280 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

4281 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

4282 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

4283 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

4284 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

4287 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


4288 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

4289 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

4290 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

4291 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

4292 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

4293 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

4294 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

4295 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

4298 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


4299 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

4302 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


4303 
	#GL_DOT3_RGB_EXT
 0x8740

	)

4304 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

4307 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


4308 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

4309 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

4312 #i‚de‡
GL_NV_„n˚


4313 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

4314 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

4315 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

4318 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


4319 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

4322 #i‚de‡
GL_NV_evÆu©‹s


4323 
	#GL_EVAL_2D_NV
 0x86C0

	)

4324 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

4325 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

4326 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

4327 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

4328 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

4329 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

4330 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

4331 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

4332 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

4333 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

4334 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

4335 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

4336 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

4337 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

4338 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

4339 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

4340 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

4341 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

4342 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

4343 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

4344 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

4345 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

4346 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

4349 #i‚de‡
GL_NV_∑cked_dïth_°ícû


4350 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

4351 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

4354 #i‚de‡
GL_NV_ªgi°î_comböîs2


4355 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

4358 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


4361 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


4362 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

4363 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

4364 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

4365 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

4368 #i‚de‡
GL_NV_ãxtuª_shadî


4369 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

4370 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

4371 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

4372 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

4373 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

4374 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

4375 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

4376 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

4377 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

4378 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

4379 
	#GL_CULL_MODES_NV
 0x86E0

	)

4380 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

4381 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

4382 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

4383 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

4384 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

4385 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

4386 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

4387 
	#GL_CONST_EYE_NV
 0x86E5

	)

4388 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

4389 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

4390 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

4391 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

4392 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

4393 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

4394 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

4395 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

4396 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

4397 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

4398 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

4399 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

4400 
	#GL_HILO_NV
 0x86F4

	)

4401 
	#GL_DSDT_NV
 0x86F5

	)

4402 
	#GL_DSDT_MAG_NV
 0x86F6

	)

4403 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

4404 
	#GL_HILO16_NV
 0x86F8

	)

4405 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

4406 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

4407 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

4408 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

4409 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

4410 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

4411 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

4412 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

4413 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

4414 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

4415 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

4416 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

4417 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

4418 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

4419 
	#GL_DSDT8_NV
 0x8709

	)

4420 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

4421 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

4422 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

4423 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

4424 
	#GL_HI_SCALE_NV
 0x870E

	)

4425 
	#GL_LO_SCALE_NV
 0x870F

	)

4426 
	#GL_DS_SCALE_NV
 0x8710

	)

4427 
	#GL_DT_SCALE_NV
 0x8711

	)

4428 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

4429 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

4430 
	#GL_HI_BIAS_NV
 0x8714

	)

4431 
	#GL_LO_BIAS_NV
 0x8715

	)

4432 
	#GL_DS_BIAS_NV
 0x8716

	)

4433 
	#GL_DT_BIAS_NV
 0x8717

	)

4434 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

4435 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

4436 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

4437 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

4438 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

4439 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

4440 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

4441 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

4444 #i‚de‡
GL_NV_ãxtuª_shadî2


4445 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

4448 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


4449 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

4452 #i‚de‡
GL_NV_vîãx_¥ogøm


4453 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

4454 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

4455 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

4456 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

4457 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

4458 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

4459 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

4460 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

4461 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

4462 
	#GL_IDENTITY_NV
 0x862A

	)

4463 
	#GL_INVERSE_NV
 0x862B

	)

4464 
	#GL_TRANSPOSE_NV
 0x862C

	)

4465 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

4466 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

4467 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

4468 
	#GL_MATRIX0_NV
 0x8630

	)

4469 
	#GL_MATRIX1_NV
 0x8631

	)

4470 
	#GL_MATRIX2_NV
 0x8632

	)

4471 
	#GL_MATRIX3_NV
 0x8633

	)

4472 
	#GL_MATRIX4_NV
 0x8634

	)

4473 
	#GL_MATRIX5_NV
 0x8635

	)

4474 
	#GL_MATRIX6_NV
 0x8636

	)

4475 
	#GL_MATRIX7_NV
 0x8637

	)

4476 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

4477 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

4478 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

4479 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

4480 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

4481 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

4482 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

4483 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

4484 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

4485 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

4486 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

4487 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

4488 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

4489 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

4490 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

4491 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

4492 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

4493 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

4494 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

4495 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

4496 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

4497 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

4498 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

4499 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

4500 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

4501 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

4502 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

4503 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

4504 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

4505 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

4506 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

4507 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

4508 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

4509 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

4510 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

4511 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

4512 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

4513 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

4514 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

4515 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

4516 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

4517 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

4518 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

4519 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

4520 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

4521 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

4522 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

4523 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

4524 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

4525 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

4526 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

4527 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

4528 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

4529 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

4530 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

4531 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

4532 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

4533 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

4534 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

4535 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

4538 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


4539 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

4540 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

4541 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

4544 #i‚de‡
GL_SGIX_sˇÀbüs_höt


4545 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

4548 #i‚de‡
GL_OML_öãæa˚


4549 
	#GL_INTERLACE_OML
 0x8980

	)

4550 
	#GL_INTERLACE_READ_OML
 0x8981

	)

4553 #i‚de‡
GL_OML_subßm∂e


4554 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

4555 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

4558 #i‚de‡
GL_OML_ªßm∂e


4559 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

4560 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

4561 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

4562 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

4563 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

4564 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

4567 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


4568 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

4569 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

4572 #i‚de‡
GL_ATI_ívm≠_bumpm≠


4573 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

4574 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

4575 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

4576 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

4577 
	#GL_DUDV_ATI
 0x8779

	)

4578 
	#GL_DU8DV8_ATI
 0x877A

	)

4579 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

4580 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

4583 #i‚de‡
GL_ATI_‰agmít_shadî


4584 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

4585 
	#GL_REG_0_ATI
 0x8921

	)

4586 
	#GL_REG_1_ATI
 0x8922

	)

4587 
	#GL_REG_2_ATI
 0x8923

	)

4588 
	#GL_REG_3_ATI
 0x8924

	)

4589 
	#GL_REG_4_ATI
 0x8925

	)

4590 
	#GL_REG_5_ATI
 0x8926

	)

4591 
	#GL_REG_6_ATI
 0x8927

	)

4592 
	#GL_REG_7_ATI
 0x8928

	)

4593 
	#GL_REG_8_ATI
 0x8929

	)

4594 
	#GL_REG_9_ATI
 0x892A

	)

4595 
	#GL_REG_10_ATI
 0x892B

	)

4596 
	#GL_REG_11_ATI
 0x892C

	)

4597 
	#GL_REG_12_ATI
 0x892D

	)

4598 
	#GL_REG_13_ATI
 0x892E

	)

4599 
	#GL_REG_14_ATI
 0x892F

	)

4600 
	#GL_REG_15_ATI
 0x8930

	)

4601 
	#GL_REG_16_ATI
 0x8931

	)

4602 
	#GL_REG_17_ATI
 0x8932

	)

4603 
	#GL_REG_18_ATI
 0x8933

	)

4604 
	#GL_REG_19_ATI
 0x8934

	)

4605 
	#GL_REG_20_ATI
 0x8935

	)

4606 
	#GL_REG_21_ATI
 0x8936

	)

4607 
	#GL_REG_22_ATI
 0x8937

	)

4608 
	#GL_REG_23_ATI
 0x8938

	)

4609 
	#GL_REG_24_ATI
 0x8939

	)

4610 
	#GL_REG_25_ATI
 0x893A

	)

4611 
	#GL_REG_26_ATI
 0x893B

	)

4612 
	#GL_REG_27_ATI
 0x893C

	)

4613 
	#GL_REG_28_ATI
 0x893D

	)

4614 
	#GL_REG_29_ATI
 0x893E

	)

4615 
	#GL_REG_30_ATI
 0x893F

	)

4616 
	#GL_REG_31_ATI
 0x8940

	)

4617 
	#GL_CON_0_ATI
 0x8941

	)

4618 
	#GL_CON_1_ATI
 0x8942

	)

4619 
	#GL_CON_2_ATI
 0x8943

	)

4620 
	#GL_CON_3_ATI
 0x8944

	)

4621 
	#GL_CON_4_ATI
 0x8945

	)

4622 
	#GL_CON_5_ATI
 0x8946

	)

4623 
	#GL_CON_6_ATI
 0x8947

	)

4624 
	#GL_CON_7_ATI
 0x8948

	)

4625 
	#GL_CON_8_ATI
 0x8949

	)

4626 
	#GL_CON_9_ATI
 0x894A

	)

4627 
	#GL_CON_10_ATI
 0x894B

	)

4628 
	#GL_CON_11_ATI
 0x894C

	)

4629 
	#GL_CON_12_ATI
 0x894D

	)

4630 
	#GL_CON_13_ATI
 0x894E

	)

4631 
	#GL_CON_14_ATI
 0x894F

	)

4632 
	#GL_CON_15_ATI
 0x8950

	)

4633 
	#GL_CON_16_ATI
 0x8951

	)

4634 
	#GL_CON_17_ATI
 0x8952

	)

4635 
	#GL_CON_18_ATI
 0x8953

	)

4636 
	#GL_CON_19_ATI
 0x8954

	)

4637 
	#GL_CON_20_ATI
 0x8955

	)

4638 
	#GL_CON_21_ATI
 0x8956

	)

4639 
	#GL_CON_22_ATI
 0x8957

	)

4640 
	#GL_CON_23_ATI
 0x8958

	)

4641 
	#GL_CON_24_ATI
 0x8959

	)

4642 
	#GL_CON_25_ATI
 0x895A

	)

4643 
	#GL_CON_26_ATI
 0x895B

	)

4644 
	#GL_CON_27_ATI
 0x895C

	)

4645 
	#GL_CON_28_ATI
 0x895D

	)

4646 
	#GL_CON_29_ATI
 0x895E

	)

4647 
	#GL_CON_30_ATI
 0x895F

	)

4648 
	#GL_CON_31_ATI
 0x8960

	)

4649 
	#GL_MOV_ATI
 0x8961

	)

4650 
	#GL_ADD_ATI
 0x8963

	)

4651 
	#GL_MUL_ATI
 0x8964

	)

4652 
	#GL_SUB_ATI
 0x8965

	)

4653 
	#GL_DOT3_ATI
 0x8966

	)

4654 
	#GL_DOT4_ATI
 0x8967

	)

4655 
	#GL_MAD_ATI
 0x8968

	)

4656 
	#GL_LERP_ATI
 0x8969

	)

4657 
	#GL_CND_ATI
 0x896A

	)

4658 
	#GL_CND0_ATI
 0x896B

	)

4659 
	#GL_DOT2_ADD_ATI
 0x896C

	)

4660 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

4661 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

4662 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

4663 
	#GL_NUM_PASSES_ATI
 0x8970

	)

4664 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

4665 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

4666 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

4667 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

4668 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

4669 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

4670 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

4671 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

4672 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

4673 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

4674 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

4675 
	#GL_RED_BIT_ATI
 0x00000001

	)

4676 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

4677 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

4678 
	#GL_2X_BIT_ATI
 0x00000001

	)

4679 
	#GL_4X_BIT_ATI
 0x00000002

	)

4680 
	#GL_8X_BIT_ATI
 0x00000004

	)

4681 
	#GL_HALF_BIT_ATI
 0x00000008

	)

4682 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

4683 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

4684 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

4685 
	#GL_COMP_BIT_ATI
 0x00000002

	)

4686 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

4687 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

4690 #i‚de‡
GL_ATI_≤_åüngÀs


4691 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

4692 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

4693 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

4694 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

4695 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

4696 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

4697 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

4698 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

4699 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

4702 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


4703 
	#GL_STATIC_ATI
 0x8760

	)

4704 
	#GL_DYNAMIC_ATI
 0x8761

	)

4705 
	#GL_PRESERVE_ATI
 0x8762

	)

4706 
	#GL_DISCARD_ATI
 0x8763

	)

4707 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

4708 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

4709 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

4710 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

4713 #i‚de‡
GL_EXT_vîãx_shadî


4714 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

4715 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

4716 
	#GL_OP_INDEX_EXT
 0x8782

	)

4717 
	#GL_OP_NEGATE_EXT
 0x8783

	)

4718 
	#GL_OP_DOT3_EXT
 0x8784

	)

4719 
	#GL_OP_DOT4_EXT
 0x8785

	)

4720 
	#GL_OP_MUL_EXT
 0x8786

	)

4721 
	#GL_OP_ADD_EXT
 0x8787

	)

4722 
	#GL_OP_MADD_EXT
 0x8788

	)

4723 
	#GL_OP_FRAC_EXT
 0x8789

	)

4724 
	#GL_OP_MAX_EXT
 0x878A

	)

4725 
	#GL_OP_MIN_EXT
 0x878B

	)

4726 
	#GL_OP_SET_GE_EXT
 0x878C

	)

4727 
	#GL_OP_SET_LT_EXT
 0x878D

	)

4728 
	#GL_OP_CLAMP_EXT
 0x878E

	)

4729 
	#GL_OP_FLOOR_EXT
 0x878F

	)

4730 
	#GL_OP_ROUND_EXT
 0x8790

	)

4731 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

4732 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

4733 
	#GL_OP_POWER_EXT
 0x8793

	)

4734 
	#GL_OP_RECIP_EXT
 0x8794

	)

4735 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

4736 
	#GL_OP_SUB_EXT
 0x8796

	)

4737 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

4738 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

4739 
	#GL_OP_MOV_EXT
 0x8799

	)

4740 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

4741 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

4742 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

4743 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

4744 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

4745 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

4746 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

4747 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

4748 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

4749 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

4750 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

4751 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

4752 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

4753 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

4754 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

4755 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

4756 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

4757 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

4758 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

4759 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

4760 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

4761 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

4762 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

4763 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

4764 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

4765 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

4766 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

4767 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

4768 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

4769 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

4770 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

4771 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

4772 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

4773 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

4774 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

4775 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

4776 
	#GL_SCALAR_EXT
 0x87BE

	)

4777 
	#GL_VECTOR_EXT
 0x87BF

	)

4778 
	#GL_MATRIX_EXT
 0x87C0

	)

4779 
	#GL_VARIANT_EXT
 0x87C1

	)

4780 
	#GL_INVARIANT_EXT
 0x87C2

	)

4781 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

4782 
	#GL_LOCAL_EXT
 0x87C4

	)

4783 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

4784 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

4785 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

4786 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

4787 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

4788 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

4789 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

4790 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

4791 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

4792 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

4793 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

4794 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

4795 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

4796 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

4797 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

4798 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

4799 
	#GL_X_EXT
 0x87D5

	)

4800 
	#GL_Y_EXT
 0x87D6

	)

4801 
	#GL_Z_EXT
 0x87D7

	)

4802 
	#GL_W_EXT
 0x87D8

	)

4803 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

4804 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

4805 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

4806 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

4807 
	#GL_ZERO_EXT
 0x87DD

	)

4808 
	#GL_ONE_EXT
 0x87DE

	)

4809 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

4810 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

4811 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

4812 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

4813 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

4814 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

4815 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

4816 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

4817 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

4818 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

4819 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

4820 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

4821 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

4822 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

4823 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

4826 #i‚de‡
GL_ATI_vîãx_°ªams


4827 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

4828 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

4829 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

4830 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

4831 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

4832 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

4833 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

4834 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

4835 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

4836 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

4839 #i‚de‡
GL_ATI_ñemít_¨øy


4840 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

4841 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

4842 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

4845 #i‚de‡
GL_SUN_mesh_¨øy


4846 
	#GL_QUAD_MESH_SUN
 0x8614

	)

4847 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

4850 #i‚de‡
GL_SUN_¶i˚_accum


4851 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

4854 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


4855 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

4858 #i‚de‡
GL_NV_dïth_˛amp


4859 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

4862 #i‚de‡
GL_NV_oc˛usi⁄_quîy


4863 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

4864 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

4865 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

4866 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

4869 #i‚de‡
GL_NV_poöt_•rôe


4870 
	#GL_POINT_SPRITE_NV
 0x8861

	)

4871 
	#GL_COORD_REPLACE_NV
 0x8862

	)

4872 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

4875 #i‚de‡
GL_NV_ãxtuª_shadî3


4876 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

4877 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

4878 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

4879 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

4880 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

4881 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

4882 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

4883 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

4884 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

4885 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

4886 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

4887 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

4888 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

4889 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

4890 
	#GL_HILO8_NV
 0x885E

	)

4891 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

4892 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

4895 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


4898 #i‚de‡
GL_EXT_shadow_funcs


4901 #i‚de‡
GL_EXT_°ícû_two_side


4902 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

4903 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

4906 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


4907 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

4910 #i‚de‡
GL_APPLE_˛õ¡_°‹age


4911 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

4914 #i‚de‡
GL_APPLE_ñemít_¨øy


4915 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

4916 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

4917 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

4920 #i‚de‡
GL_APPLE_„n˚


4921 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

4922 
	#GL_FENCE_APPLE
 0x8A0B

	)

4925 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


4926 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

4929 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


4930 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

4931 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

4932 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

4933 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

4934 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

4935 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

4936 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

4939 #i‚de‡
GL_APPLE_ycb¸_422


4940 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

4941 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

4942 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

4945 #i‚de‡
GL_S3_s3tc


4946 
	#GL_RGB_S3TC
 0x83A0

	)

4947 
	#GL_RGB4_S3TC
 0x83A1

	)

4948 
	#GL_RGBA_S3TC
 0x83A2

	)

4949 
	#GL_RGBA4_S3TC
 0x83A3

	)

4952 #i‚de‡
GL_ATI_døw_buf„rs


4953 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

4954 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

4955 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

4956 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

4957 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

4958 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

4959 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

4960 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

4961 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

4962 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

4963 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

4964 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

4965 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

4966 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

4967 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

4968 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

4969 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

4972 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


4973 
	#GL_TYPE_RGBA_FLOAT_ATI
 0x8820

	)

4974 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

4977 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


4978 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

4979 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

4980 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

4983 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


4984 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

4985 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

4986 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

4987 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

4988 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

4989 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

4990 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

4991 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

4992 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

4993 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

4994 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

4995 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

4998 #i‚de‡
GL_NV_Êﬂt_buf„r


4999 
	#GL_FLOAT_R_NV
 0x8880

	)

5000 
	#GL_FLOAT_RG_NV
 0x8881

	)

5001 
	#GL_FLOAT_RGB_NV
 0x8882

	)

5002 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

5003 
	#GL_FLOAT_R16_NV
 0x8884

	)

5004 
	#GL_FLOAT_R32_NV
 0x8885

	)

5005 
	#GL_FLOAT_RG16_NV
 0x8886

	)

5006 
	#GL_FLOAT_RG32_NV
 0x8887

	)

5007 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

5008 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

5009 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

5010 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

5011 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

5012 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

5013 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

5016 #i‚de‡
GL_NV_‰agmít_¥ogøm


5017 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

5018 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

5019 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

5020 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

5021 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

5022 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

5025 #i‚de‡
GL_NV_hÆf_Êﬂt


5026 
	#GL_HALF_FLOAT_NV
 0x140B

	)

5029 #i‚de‡
GL_NV_pixñ_d©a_ønge


5030 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

5031 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

5032 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

5033 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

5034 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

5035 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

5038 #i‚de‡
GL_NV_¥imôive_ª°¨t


5039 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

5040 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

5043 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


5044 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

5047 #i‚de‡
GL_NV_vîãx_¥ogøm2


5050 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


5053 #i‚de‡
GL_ATI_£∑øã_°ícû


5054 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

5055 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

5056 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

5057 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

5060 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


5063 #i‚de‡
GL_OES_ªad_f‹m©


5064 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5065 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5068 #i‚de‡
GL_EXT_dïth_bounds_ã°


5069 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

5070 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

5073 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


5074 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

5075 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

5076 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

5079 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


5080 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

5081 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

5084 #i‚de‡
GL_MESA_∑ck_övît


5085 
	#GL_PACK_INVERT_MESA
 0x8758

	)

5088 #i‚de‡
GL_MESA_ycb¸_ãxtuª


5089 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

5090 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

5091 
	#GL_YCBCR_MESA
 0x8757

	)

5094 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


5095 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

5096 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

5097 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

5098 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

5101 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


5104 #i‚de‡
GL_NV_‰agmít_¥ogøm2


5105 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

5106 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

5107 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

5108 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

5109 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

5112 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


5117 #i‚de‡
GL_NV_vîãx_¥ogøm3


5121 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


5122 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

5123 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

5124 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

5125 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

5126 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

5127 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

5128 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

5129 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

5130 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

5131 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

5132 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

5133 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

5134 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

5135 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

5136 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

5137 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

5138 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

5139 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

5140 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

5141 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

5142 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

5143 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

5144 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

5145 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

5146 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

5147 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

5148 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

5149 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

5150 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

5151 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

5152 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

5153 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

5154 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

5155 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

5156 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

5157 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

5158 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

5159 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

5160 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

5161 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

5162 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

5163 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

5164 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

5165 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

5166 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

5167 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

5168 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

5169 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

5170 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

5171 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

5172 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

5175 #i‚de‡
GL_GREMEDY_°rög_m¨kî


5178 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


5179 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

5180 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

5181 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

5182 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

5185 #i‚de‡
GL_EXT_°ícû_˛ór_èg


5186 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

5187 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

5190 #i‚de‡
GL_EXT_ãxtuª_sRGB


5191 
	#GL_SRGB_EXT
 0x8C40

	)

5192 
	#GL_SRGB8_EXT
 0x8C41

	)

5193 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

5194 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

5195 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

5196 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

5197 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

5198 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

5199 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

5200 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

5201 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

5202 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

5203 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

5204 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

5205 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

5206 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

5209 #i‚de‡
GL_EXT_‰amebuf„r_blô


5210 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

5211 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

5212 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 
GL_FRAMEBUFFER_BINDING_EXT


	)

5213 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

5216 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


5217 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

5218 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

5219 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

5222 #i‚de‡
GL_MESAX_ãxtuª_°ack


5223 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

5224 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

5225 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

5226 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

5227 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

5228 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

5231 #i‚de‡
GL_EXT_timî_quîy


5232 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

5235 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


5238 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5239 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5240 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5243 #i‚de‡
GL_NV_gpu_¥ogøm4


5244 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

5245 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

5246 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

5247 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

5248 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

5249 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

5250 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

5251 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

5254 #i‚de‡
GL_NV_geomëry_¥ogøm4


5255 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

5256 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

5257 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

5258 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

5259 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

5260 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

5261 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

5262 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

5263 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

5264 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

5265 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

5266 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

5267 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

5268 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

5269 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

5270 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

5273 #i‚de‡
GL_EXT_geomëry_shadî4


5274 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

5279 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

5280 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

5281 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

5282 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

5283 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

5284 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

5296 #i‚de‡
GL_NV_vîãx_¥ogøm4


5297 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

5300 #i‚de‡
GL_EXT_gpu_shadî4


5301 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

5302 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

5303 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

5304 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

5305 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

5306 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

5307 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

5308 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

5309 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

5310 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

5311 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

5312 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

5313 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

5314 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

5315 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

5316 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

5317 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

5318 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

5319 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

5320 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

5321 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

5322 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

5323 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

5324 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

5325 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

5328 #i‚de‡
GL_EXT_døw_ö°™˚d


5331 #i‚de‡
GL_EXT_∑cked_Êﬂt


5332 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

5333 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

5334 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

5337 #i‚de‡
GL_EXT_ãxtuª_¨øy


5338 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

5339 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

5340 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

5341 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

5342 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

5343 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

5344 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

5345 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

5349 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


5350 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

5351 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

5352 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

5353 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

5354 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

5357 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


5358 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

5359 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

5360 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

5361 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

5364 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


5365 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

5366 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

5367 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

5368 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

5371 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


5372 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

5373 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

5374 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

5377 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


5378 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

5379 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

5380 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

5381 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

5384 #i‚de‡
GL_NV_‰agmít_¥ogøm4


5387 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


5388 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

5389 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

5390 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

5391 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

5394 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


5395 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

5396 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

5399 #i‚de‡
GL_NV_geomëry_shadî4


5402 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


5403 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

5404 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

5405 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

5406 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

5407 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

5410 #i‚de‡
GL_EXT_døw_buf„rs2


5413 #i‚de‡
GL_NV_å™sf‹m_„edback


5414 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

5415 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

5416 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

5417 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

5418 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

5419 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

5420 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

5421 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

5422 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

5423 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

5424 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

5425 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

5426 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

5427 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

5428 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

5429 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

5430 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

5431 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

5432 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

5433 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV
 0x8C8A

	)

5434 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

5435 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

5436 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

5437 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

5438 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

5439 
	#GL_LAYER_NV
 0x8DAA

	)

5440 
	#GL_NEXT_BUFFER_NV
 -2

	)

5441 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

5442 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

5443 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

5444 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

5447 #i‚de‡
GL_EXT_bödabÀ_unif‹m


5448 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

5449 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

5450 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

5451 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

5452 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

5453 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

5456 #i‚de‡
GL_EXT_ãxtuª_öãgî


5457 
	#GL_RGBA32UI_EXT
 0x8D70

	)

5458 
	#GL_RGB32UI_EXT
 0x8D71

	)

5459 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

5460 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

5461 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

5462 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

5463 
	#GL_RGBA16UI_EXT
 0x8D76

	)

5464 
	#GL_RGB16UI_EXT
 0x8D77

	)

5465 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

5466 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

5467 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

5468 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

5469 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

5470 
	#GL_RGB8UI_EXT
 0x8D7D

	)

5471 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

5472 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

5473 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

5474 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

5475 
	#GL_RGBA32I_EXT
 0x8D82

	)

5476 
	#GL_RGB32I_EXT
 0x8D83

	)

5477 
	#GL_ALPHA32I_EXT
 0x8D84

	)

5478 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

5479 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

5480 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

5481 
	#GL_RGBA16I_EXT
 0x8D88

	)

5482 
	#GL_RGB16I_EXT
 0x8D89

	)

5483 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

5484 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

5485 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

5486 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

5487 
	#GL_RGBA8I_EXT
 0x8D8E

	)

5488 
	#GL_RGB8I_EXT
 0x8D8F

	)

5489 
	#GL_ALPHA8I_EXT
 0x8D90

	)

5490 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

5491 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

5492 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

5493 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

5494 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

5495 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

5496 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

5497 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

5498 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

5499 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

5500 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

5501 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

5502 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

5503 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

5506 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


5509 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


5510 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

5511 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

5512 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

5513 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

5516 #i‚de‡
GL_NV_¥e£¡_video


5517 
	#GL_FRAME_NV
 0x8E26

	)

5518 
	#GL_FIELDS_NV
 0x8E27

	)

5519 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

5520 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

5521 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

5522 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

5525 #i‚de‡
GL_EXT_å™sf‹m_„edback


5526 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

5527 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

5528 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

5529 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

5530 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

5531 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

5532 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

5533 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

5534 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

5535 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

5536 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

5537 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

5538 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

5539 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

5540 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

5543 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


5544 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

5545 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

5546 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

5549 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


5553 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


5554 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

5555 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

5556 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

5557 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

5558 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

5561 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


5562 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

5563 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

5564 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

5565 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

5566 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

5567 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

5568 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

5569 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

5570 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

5571 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

5574 #i‚de‡
GL_NV_å™sf‹m_„edback2


5575 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

5576 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

5577 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

5578 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

5581 #i‚de‡
GL_ATI_memöfo


5582 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

5583 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

5584 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

5587 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5588 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5589 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5590 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5591 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5592 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5593 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5594 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5597 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5600 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


5601 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5602 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5603 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5604 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5605 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5606 
	#GL_DISCRETE_AMD
 0x9006

	)

5607 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5610 #i‚de‡
GL_EXT_¥ovokög_vîãx


5611 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

5612 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

5613 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

5614 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

5617 #i‚de‡
GL_EXT_ãxtuª_¢‹m


5618 
	#GL_ALPHA_SNORM
 0x9010

	)

5619 
	#GL_LUMINANCE_SNORM
 0x9011

	)

5620 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

5621 
	#GL_INTENSITY_SNORM
 0x9013

	)

5622 
	#GL_ALPHA8_SNORM
 0x9014

	)

5623 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

5624 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

5625 
	#GL_INTENSITY8_SNORM
 0x9017

	)

5626 
	#GL_ALPHA16_SNORM
 0x9018

	)

5627 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

5628 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

5629 
	#GL_INTENSITY16_SNORM
 0x901B

	)

5645 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5648 #i‚de‡
GL_APPLE_ãxtuª_ønge


5649 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5650 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5651 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5652 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5657 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5658 
	#GL_HALF_APPLE
 0x140B

	)

5659 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5660 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5661 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5662 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5663 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5664 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5665 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5666 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5667 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5668 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5669 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5670 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5671 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5674 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5675 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5676 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5677 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5678 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5679 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5680 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5681 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5682 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5683 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5684 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5687 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5688 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5691 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5692 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5693 
	#GL_RELEASED_APPLE
 0x8A19

	)

5694 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5695 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5696 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5697 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5700 #i‚de‡
GL_APPLE_row_byãs


5701 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5702 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5705 #i‚de‡
GL_APPLE_rgb_422


5706 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5711 #i‚de‡
GL_NV_video_ˇ±uª


5712 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

5713 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

5714 
	#GL_FIELD_UPPER_NV
 0x9022

	)

5715 
	#GL_FIELD_LOWER_NV
 0x9023

	)

5716 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

5717 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

5718 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

5719 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

5720 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

5721 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

5722 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

5723 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

5724 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

5725 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

5726 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

5727 
	#GL_SUCCESS_NV
 0x902F

	)

5728 
	#GL_FAILURE_NV
 0x9030

	)

5729 
	#GL_YCBYCR8_422_NV
 0x9031

	)

5730 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

5731 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

5732 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

5733 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

5734 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

5735 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

5736 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

5737 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

5738 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

5739 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

5740 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

5743 #i‚de‡
GL_NV_c›y_image


5746 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


5747 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

5750 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


5753 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


5754 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

5755 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

5756 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

5759 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


5760 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

5761 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

5762 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

5763 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

5764 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

5765 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

5766 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

5767 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

5768 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

5769 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

5770 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

5771 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

5772 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

5773 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

5774 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

5775 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

5776 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

5777 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

5778 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

5779 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

5780 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

5781 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

5782 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

5783 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

5784 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

5787 #i‚de‡
GL_NV_ãxtuª_b¨rõr


5790 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5793 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5797 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5800 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


5801 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

5802 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

5803 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

5804 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

5805 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

5806 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

5807 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

5808 
	#GL_IMAGE_1D_EXT
 0x904C

	)

5809 
	#GL_IMAGE_2D_EXT
 0x904D

	)

5810 
	#GL_IMAGE_3D_EXT
 0x904E

	)

5811 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

5812 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

5813 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

5814 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

5815 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

5816 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

5817 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

5818 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

5819 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

5820 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

5821 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

5822 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

5823 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

5824 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

5825 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

5826 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

5827 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

5828 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

5829 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

5830 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

5831 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

5832 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

5833 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

5834 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

5835 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

5836 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

5837 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

5838 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

5839 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

5840 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

5841 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

5842 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

5843 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

5844 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

5845 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

5846 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

5847 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

5848 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

5849 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

5850 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

5851 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

5852 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

5853 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

5854 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

5855 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

5858 #i‚de‡
GL_EXT_vîãx_©åib_64bô


5860 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

5861 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

5862 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

5863 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

5864 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

5865 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

5866 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

5867 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

5868 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

5869 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

5870 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

5871 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

5874 #i‚de‡
GL_NV_gpu_¥ogøm5


5875 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

5876 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

5877 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

5878 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

5879 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

5880 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

5881 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

5882 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

5885 #i‚de‡
GL_NV_gpu_shadî5


5886 
	#GL_INT64_NV
 0x140E

	)

5887 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5888 
	#GL_INT8_NV
 0x8FE0

	)

5889 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5890 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5891 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5892 
	#GL_INT16_NV
 0x8FE4

	)

5893 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5894 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5895 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5896 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5897 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5898 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5899 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5900 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5901 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5902 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5903 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5904 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5905 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5906 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5907 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5908 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5909 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5910 
	#GL_FLOAT16_NV
 0x8FF8

	)

5911 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5912 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5913 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5917 #i‚de‡
GL_NV_shadî_buf„r_°‹e


5918 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

5923 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


5924 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

5925 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

5926 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

5927 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

5928 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

5931 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


5936 #i‚de‡
GL_NV_mu…ißm∂e_covîage


5937 
	#GL_COVERAGE_SAMPLES_NV
 0x80A9

	)

5938 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

5941 #i‚de‡
GL_AMD_«me_gí_dñëe


5942 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5943 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5944 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5945 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5946 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5949 #i‚de‡
GL_AMD_debug_ouçut


5950 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5951 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5952 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5953 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5954 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5955 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5956 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5957 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5958 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5959 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5960 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5961 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5962 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5965 #i‚de‡
GL_NV_vd∑u_öãr›


5966 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

5967 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

5968 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

5969 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

5972 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5975 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5976 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5977 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5980 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


5981 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

5982 
	#GL_DECODE_EXT
 0x8A49

	)

5983 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

5986 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


5987 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

5988 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

5991 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5992 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5993 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5996 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5997 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

6000 #i‚de‡
GL_EXT_x11_sync_obje˘


6001 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

6004 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


6007 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


6008 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

6009 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

6012 #i‚de‡
GL_NV_∑th_ªndîög


6013 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

6014 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

6015 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

6016 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

6017 
	#GL_FILE_NAME_NV
 0x9074

	)

6018 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

6019 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

6020 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

6021 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

6022 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

6023 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

6024 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

6025 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

6026 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

6027 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

6028 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

6029 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

6030 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

6031 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

6032 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

6033 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

6034 
	#GL_PATH_SAMPLE_QUALITY_NV
 0x9085

	)

6035 
	#GL_PATH_STROKE_BOUND_NV
 0x9086

	)

6036 
	#GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
 0x9087

	)

6037 
	#GL_COUNT_UP_NV
 0x9088

	)

6038 
	#GL_COUNT_DOWN_NV
 0x9089

	)

6039 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

6040 
	#GL_CONVEX_HULL_NV
 0x908B

	)

6041 
	#GL_MULTI_HULLS_NV
 0x908C

	)

6042 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

6043 
	#GL_TRANSLATE_X_NV
 0x908E

	)

6044 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

6045 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

6046 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

6047 
	#GL_AFFINE_2D_NV
 0x9092

	)

6048 
	#GL_PROJECTIVE_2D_NV
 0x9093

	)

6049 
	#GL_AFFINE_3D_NV
 0x9094

	)

6050 
	#GL_PROJECTIVE_3D_NV
 0x9095

	)

6051 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

6052 
	#GL_TRANSPOSE_PROJECTIVE_2D_NV
 0x9097

	)

6053 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

6054 
	#GL_TRANSPOSE_PROJECTIVE_3D_NV
 0x9099

	)

6055 
	#GL_UTF8_NV
 0x909A

	)

6056 
	#GL_UTF16_NV
 0x909B

	)

6057 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

6058 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

6059 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

6060 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

6061 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

6062 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

6063 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

6064 
	#GL_SQUARE_NV
 0x90A3

	)

6065 
	#GL_ROUND_NV
 0x90A4

	)

6066 
	#GL_TRIANGULAR_NV
 0x90A5

	)

6067 
	#GL_BEVEL_NV
 0x90A6

	)

6068 
	#GL_MITER_REVERT_NV
 0x90A7

	)

6069 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

6070 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

6071 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

6072 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

6073 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

6074 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

6075 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

6076 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

6077 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

6078 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

6079 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

6080 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

6081 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

6082 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

6083 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

6084 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

6085 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

6086 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

6087 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

6088 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

6089 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

6090 
	#GL_CLOSE_PATH_NV
 0x00

	)

6091 
	#GL_MOVE_TO_NV
 0x02

	)

6092 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

6093 
	#GL_LINE_TO_NV
 0x04

	)

6094 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

6095 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

6096 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

6097 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

6098 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

6099 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

6100 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

6101 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

6102 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

6103 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

6104 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

6105 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

6106 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

6107 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

6108 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

6109 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

6110 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

6111 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

6112 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

6113 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

6114 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

6115 
	#GL_RESTART_PATH_NV
 0xF0

	)

6116 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

6117 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

6118 
	#GL_RECT_NV
 0xF6

	)

6119 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

6120 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

6121 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

6122 
	#GL_ARC_TO_NV
 0xFE

	)

6123 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

6124 
	#GL_BOLD_BIT_NV
 0x01

	)

6125 
	#GL_ITALIC_BIT_NV
 0x02

	)

6126 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

6127 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

6128 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

6129 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

6130 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

6131 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

6132 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

6133 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

6134 
	#GL_GLYPH_HAS_KERNING_NV
 0x100

	)

6135 
	#GL_FONT_X_MIN_BOUNDS_NV
 0x00010000

	)

6136 
	#GL_FONT_Y_MIN_BOUNDS_NV
 0x00020000

	)

6137 
	#GL_FONT_X_MAX_BOUNDS_NV
 0x00040000

	)

6138 
	#GL_FONT_Y_MAX_BOUNDS_NV
 0x00080000

	)

6139 
	#GL_FONT_UNITS_PER_EM_NV
 0x00100000

	)

6140 
	#GL_FONT_ASCENDER_NV
 0x00200000

	)

6141 
	#GL_FONT_DESCENDER_NV
 0x00400000

	)

6142 
	#GL_FONT_HEIGHT_NV
 0x00800000

	)

6143 
	#GL_FONT_MAX_ADVANCE_WIDTH_NV
 0x01000000

	)

6144 
	#GL_FONT_MAX_ADVANCE_HEIGHT_NV
 0x02000000

	)

6145 
	#GL_FONT_UNDERLINE_POSITION_NV
 0x04000000

	)

6146 
	#GL_FONT_UNDERLINE_THICKNESS_NV
 0x08000000

	)

6147 
	#GL_FONT_HAS_KERNING_NV
 0x10000000

	)

6150 #i‚de‡
GL_AMD_pö√d_mem‹y


6151 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

6154 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


6155 
	#GL_SET_AMD
 0x874A

	)

6156 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

6157 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

6158 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

6161 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


6164 #i‚de‡
GL_AMD_vîãx_shadî_œyî


6167 #i‚de‡
GL_NV_bödÀss_ãxtuª


6170 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


6173 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


6174 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

6175 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

6176 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

6182 
	~<°ddef.h
>

6183 #i‚de‡
GL_VERSION_2_0


6185 
	tGLch¨
;

6188 #i‚de‡
GL_VERSION_1_5


6190 
±rdiff_t
 
	tGLöçå
;

6191 
±rdiff_t
 
	tGLsizeùå
;

6194 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


6196 
±rdiff_t
 
	tGLöçåARB
;

6197 
±rdiff_t
 
	tGLsizeùåARB
;

6200 #i‚de‡
GL_ARB_shadî_obje˘s


6202 
	tGLch¨ARB
;

6203 
	tGLh™dÀARB
;

6207 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


6208 
	tGLhÆfARB
;

6211 #i‚de‡
GL_NV_hÆf_Êﬂt


6212 
	tGLhÆfNV
;

6215 #i‚de‡
GLEXT_64_TYPES_DEFINED


6217 
	#GLEXT_64_TYPES_DEFINED


	)

6220 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

6221 
	~<öây≥s.h
>

6222 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

6223 
	~<öây≥s.h
>

6224 #i‡
deföed
(
__STDC__
)

6225 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

6226 
	töt64_t
;

6227 
	tuöt64_t
;

6229 
	töt64_t
;

6230 
	tuöt64_t
;

6233 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

6234 
	~<öây≥s.h
>

6235 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

6236 
	~<°döt.h
>

6237 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

6238 
	töt32_t
;

6239 
	töt64_t
;

6240 
	tuöt64_t
;

6241 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

6242 
	~<°döt.h
>

6243 #ñi‡
deföed
(
_WIN32
)

6244 
__öt32
 
	töt32_t
;

6245 
__öt64
 
	töt64_t
;

6246 
	t__öt64
 
	tuöt64_t
;

6249 
	~<öây≥s.h
>

6253 #i‚de‡
GL_EXT_timî_quîy


6254 
öt64_t
 
	tGLöt64EXT
;

6255 
uöt64_t
 
	tGLuöt64EXT
;

6258 #i‚de‡
GL_ARB_sync


6259 
öt64_t
 
	tGLöt64
;

6260 
uöt64_t
 
	tGLuöt64
;

6261 
__GLsync
 *
	tGLsync
;

6264 #i‚de‡
GL_ARB_˛_evít


6266 
	g_˛_c⁄ãxt
;

6267 
	g_˛_evít
;

6270 #i‚de‡
GL_ARB_debug_ouçut


6271 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6274 #i‚de‡
GL_AMD_debug_ouçut


6275 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6278 #i‚de‡
GL_KHR_debug


6279 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6282 #i‚de‡
GL_NV_vd∑u_öãr›


6283 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

6286 #i‚de‡
GL_VERSION_1_2


6287 
	#GL_VERSION_1_2
 1

	)

6288 #ifde‡
GL_GLEXT_PROTOTYPES


6289 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6290 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

6291 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

6292 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

6293 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

6294 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6296 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6297 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

6298 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

6299 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6300 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6301 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6304 #i‚de‡
GL_VERSION_1_2_DEPRECATED


6305 
	#GL_VERSION_1_2_DEPRECATED
 1

	)

6306 #ifde‡
GL_GLEXT_PROTOTYPES


6307 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

6308 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6309 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6310 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6311 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
èbÀ
);

6312 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6313 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6314 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

6315 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6316 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

6317 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

6318 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6319 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6320 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6321 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6322 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6323 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6324 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
image
);

6325 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6326 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6327 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
);

6328 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
);

6329 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

6330 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6331 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6332 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

6333 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6334 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6335 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6336 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6337 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

6338 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

6340 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

6341 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6342 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6343 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6344 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

6345 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6346 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6347 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

6348 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6349 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6350 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6351 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6352 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6353 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6354 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6355 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6356 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6357 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

6358 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6359 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6360 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

6361 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

6362 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6363 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6364 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6365 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6366 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6367 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6368 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6369 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6370 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

6371 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

6374 #i‚de‡
GL_VERSION_1_3


6375 
	#GL_VERSION_1_3
 1

	)

6376 #ifde‡
GL_GLEXT_PROTOTYPES


6377 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

6378 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

6379 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6380 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6381 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6382 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6383 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6384 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6385 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, 
GLvoid
 *
img
);

6387 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

6388 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

6389 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6390 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6391 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6392 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6393 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6394 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6395 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

6398 #i‚de‡
GL_VERSION_1_3_DEPRECATED


6399 
	#GL_VERSION_1_3_DEPRECATED
 1

	)

6400 #ifde‡
GL_GLEXT_PROTOTYPES


6401 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

6402 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

6403 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6404 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

6405 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6406 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

6407 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6408 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

6409 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6410 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

6411 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6412 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

6413 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6414 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

6415 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6416 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

6417 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6418 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

6419 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6420 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

6421 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6422 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

6423 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6424 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

6425 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6426 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

6427 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6428 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

6429 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6430 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

6431 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6432 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

6433 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6434 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

6435 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

6436 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

6437 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

6439 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

6440 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

6441 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6442 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

6443 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6444 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

6445 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6446 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

6447 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6448 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

6449 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6450 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

6451 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6452 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

6453 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6454 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

6455 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6456 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

6457 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6458 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

6459 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6460 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

6461 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6462 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

6463 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6464 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

6465 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6466 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

6467 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6468 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

6469 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6470 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

6471 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6472 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

6473 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

6474 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

6475 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

6478 #i‚de‡
GL_VERSION_1_4


6479 
	#GL_VERSION_1_4
 1

	)

6480 #ifde‡
GL_GLEXT_PROTOTYPES


6481 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6482 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

6483 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
døwcou¡
);

6484 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6485 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6486 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6487 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6489 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6490 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

6491 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	tdøwcou¡
);

6492 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6493 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6494 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6495 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6498 #i‚de‡
GL_VERSION_1_4_DEPRECATED


6499 
	#GL_VERSION_1_4_DEPRECATED
 1

	)

6500 #ifde‡
GL_GLEXT_PROTOTYPES


6501 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

6502 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

6503 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

6504 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

6505 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6506 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

6507 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

6508 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

6509 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

6510 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

6511 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

6512 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

6513 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

6514 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

6515 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

6516 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

6517 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

6518 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

6519 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

6520 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

6521 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

6522 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6523 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6524 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

6525 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

6526 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

6527 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

6528 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

6529 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

6530 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

6531 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6532 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

6533 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6534 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

6535 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

6536 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

6537 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6538 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

6540 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

6541 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

6542 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

6543 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

6544 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6545 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

6546 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6547 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

6548 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6549 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

6550 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6551 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

6552 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6553 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

6554 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6555 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

6556 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

6557 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

6558 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

6559 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

6560 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

6561 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6562 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6563 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6564 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6565 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6566 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

6567 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6568 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6569 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6570 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6571 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6572 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6573 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6574 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6575 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6576 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6577 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6580 #i‚de‡
GL_VERSION_1_5


6581 
	#GL_VERSION_1_5
 1

	)

6582 #ifde‡
GL_GLEXT_PROTOTYPES


6583 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

6584 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

6585 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

6586 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

6587 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

6588 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6589 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6590 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

6591 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

6592 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

6593 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

6594 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

6595 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

6596 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

6597 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLvoid
 *
d©a
);

6598 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

6599 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

6600 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6601 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

6603 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6604 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6605 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

6606 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

6607 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

6608 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6609 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6610 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6611 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

6612 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

6613 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

6614 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6615 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

6616 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

6617 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

6618 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

6619 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

6620 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6621 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

6624 #i‚de‡
GL_VERSION_2_0


6625 
	#GL_VERSION_2_0
 1

	)

6626 #ifde‡
GL_GLEXT_PROTOTYPES


6627 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6628 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

6629 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6630 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6631 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

6632 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

6633 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

6634 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

6635 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

6636 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

6637 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

6638 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

6639 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

6640 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

6641 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

6642 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6643 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6644 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
obj
);

6645 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6646 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6647 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

6648 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6649 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

6650 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

6651 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6652 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

6653 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

6654 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6655 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6656 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6657 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

6658 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

6659 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

6660 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

6661 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
°rög
, c⁄° 
GLöt
 *
Àngth
);

6662 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

6663 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

6664 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

6665 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

6666 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

6667 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

6668 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

6669 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

6670 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

6671 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6672 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6673 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6674 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6675 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6676 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6677 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6678 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6679 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6680 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6681 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6682 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

6683 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

6684 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6685 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

6686 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6687 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

6688 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6689 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6690 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6691 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6692 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6693 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6694 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6695 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6696 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6697 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6698 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6699 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6700 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6701 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6702 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6703 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6704 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

6705 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6706 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6707 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6708 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6709 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6710 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6711 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6712 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6713 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6714 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6715 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6716 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6717 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6718 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6719 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6721 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6722 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6723 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6724 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6725 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

6726 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

6727 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

6728 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6729 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

6730 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

6731 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6732 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6733 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

6734 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

6735 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

6736 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6737 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6738 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

6739 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6740 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6741 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

6742 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6743 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

6744 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

6745 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6746 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

6747 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

6748 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6749 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6750 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6751 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

6752 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6753 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6754 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6755 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

6756 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6757 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6758 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6759 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6760 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6761 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6762 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6763 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6764 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6765 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6766 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6767 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6768 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6769 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6770 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6771 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6772 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6773 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6776 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6779 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

6780 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6781 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

6782 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6783 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6784 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6785 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6786 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6787 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6788 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6789 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6790 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6791 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6792 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6793 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6794 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6795 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6796 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6797 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6798 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

6799 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6800 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6801 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6802 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6803 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6804 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6805 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6806 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6807 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6808 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6809 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6810 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6811 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6812 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6813 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6816 #i‚de‡
GL_VERSION_2_1


6817 
	#GL_VERSION_2_1
 1

	)

6818 #ifde‡
GL_GLEXT_PROTOTYPES


6819 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6820 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6821 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6822 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6823 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6824 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6826 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6827 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6828 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6829 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6830 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6831 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6834 #i‚de‡
GL_VERSION_3_0


6835 
	#GL_VERSION_3_0
 1

	)

6840 #ifde‡
GL_GLEXT_PROTOTYPES


6841 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

6842 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6843 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6844 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6845 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6846 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6847 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

6848 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

6849 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

6850 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

6851 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
v¨yögs
, 
GLíum
 
buf„rMode
);

6852 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6853 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

6854 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

6855 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

6856 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6857 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6858 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

6859 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

6860 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

6861 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6862 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6863 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

6864 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

6865 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

6866 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

6867 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6868 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6869 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6870 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6871 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6872 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6873 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6874 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6875 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6876 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6877 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6878 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6879 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

6880 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

6881 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6882 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

6883 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

6884 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

6885 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6886 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6887 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6888 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6889 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6890 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6891 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

6892 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6893 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

6894 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

6895 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

6896 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

6897 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

6898 
GLAPI
 c⁄° 
GLubyã
 * 
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

6900 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

6901 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6902 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6903 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6904 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6905 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6906 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

6907 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

6908 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6909 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

6910 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

6911 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6912 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

6913 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

6914 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

6915 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6916 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6917 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

6919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6920 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6921 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6922 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

6923 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

6924 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

6925 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6926 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6927 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6928 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6929 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6930 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6931 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6932 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6933 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6934 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6935 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6937 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6938 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

6939 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

6940 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6941 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

6942 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

6943 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6944 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6945 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6946 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6947 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6948 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6949 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6950 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6951 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6952 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6953 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

6954 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6955 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6956 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

6957 c⁄° 
	tGLubyã
 * (
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

6960 #i‚de‡
GL_VERSION_3_1


6961 
	#GL_VERSION_3_1
 1

	)

6965 #ifde‡
GL_GLEXT_PROTOTYPES


6966 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

6967 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

6968 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

6969 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

6971 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

6972 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

6973 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6974 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

6977 #i‚de‡
GL_VERSION_3_2


6978 
	#GL_VERSION_3_2
 1

	)

6984 #ifde‡
GL_GLEXT_PROTOTYPES


6985 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

6986 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

6987 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6989 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

6990 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

6991 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6994 #i‚de‡
GL_VERSION_3_3


6995 
	#GL_VERSION_3_3
 1

	)

7006 #ifde‡
GL_GLEXT_PROTOTYPES


7007 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

7009 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

7012 #i‚de‡
GL_VERSION_4_0


7013 
	#GL_VERSION_4_0
 1

	)

7026 #ifde‡
GL_GLEXT_PROTOTYPES


7027 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

7028 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

7029 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

7030 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

7031 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

7033 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

7034 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

7035 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

7036 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

7037 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

7040 #i‚de‡
GL_VERSION_4_1


7041 
	#GL_VERSION_4_1
 1

	)

7051 #i‚de‡
GL_VERSION_4_2


7052 
	#GL_VERSION_4_2
 1

	)

7067 #i‚de‡
GL_VERSION_4_3


7068 
	#GL_VERSION_4_3
 1

	)

7097 #i‚de‡
GL_ARB_mu…ôextuª


7098 
	#GL_ARB_mu…ôextuª
 1

	)

7099 #ifde‡
GL_GLEXT_PROTOTYPES


7100 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

7101 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

7102 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

7103 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7104 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

7105 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7106 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

7107 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7108 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

7109 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7110 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

7111 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7112 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

7113 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7114 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

7115 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7116 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

7117 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7118 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

7119 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7120 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

7121 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7122 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

7123 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7124 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

7125 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7126 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

7127 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7128 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

7129 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7130 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

7131 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7132 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

7133 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7135 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

7136 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

7137 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

7138 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7139 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

7140 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7141 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

7142 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7143 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

7144 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7145 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

7146 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7147 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

7148 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7149 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

7150 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7151 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

7152 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7153 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

7154 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7155 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

7156 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7157 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

7158 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7159 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

7160 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7161 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

7162 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7163 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

7164 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7165 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

7166 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7167 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

7168 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7171 #i‚de‡
GL_ARB_å™•o£_m©rix


7172 
	#GL_ARB_å™•o£_m©rix
 1

	)

7173 #ifde‡
GL_GLEXT_PROTOTYPES


7174 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

7175 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

7176 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

7177 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

7179 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

7180 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

7181 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

7182 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

7185 #i‚de‡
GL_ARB_mu…ißm∂e


7186 
	#GL_ARB_mu…ißm∂e
 1

	)

7187 #ifde‡
GL_GLEXT_PROTOTYPES


7188 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

7190 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7193 #i‚de‡
GL_ARB_ãxtuª_ív_add


7194 
	#GL_ARB_ãxtuª_ív_add
 1

	)

7197 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


7198 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

7201 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


7202 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

7203 #ifde‡
GL_GLEXT_PROTOTYPES


7204 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7205 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7206 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7207 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7208 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7209 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7210 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, 
GLvoid
 *
img
);

7212 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7213 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7214 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7215 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7216 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7217 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7218 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

7221 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


7222 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

7225 #i‚de‡
GL_ARB_poöt_∑ømëîs


7226 
	#GL_ARB_poöt_∑ømëîs
 1

	)

7227 #ifde‡
GL_GLEXT_PROTOTYPES


7228 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7229 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7231 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7232 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7235 #i‚de‡
GL_ARB_vîãx_bÀnd


7236 
	#GL_ARB_vîãx_bÀnd
 1

	)

7237 #ifde‡
GL_GLEXT_PROTOTYPES


7238 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

7239 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

7240 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

7241 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

7242 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

7243 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

7244 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

7245 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

7246 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7247 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

7249 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

7250 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

7251 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

7252 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

7253 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

7254 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

7255 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

7256 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

7257 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7258 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

7261 #i‚de‡
GL_ARB_m©rix_∑Àâe


7262 
	#GL_ARB_m©rix_∑Àâe
 1

	)

7263 #ifde‡
GL_GLEXT_PROTOTYPES


7264 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

7265 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

7266 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

7267 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

7268 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7270 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

7271 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

7272 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

7273 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

7274 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7277 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


7278 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

7281 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


7282 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

7285 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


7286 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

7289 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


7290 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

7293 #i‚de‡
GL_ARB_dïth_ãxtuª


7294 
	#GL_ARB_dïth_ãxtuª
 1

	)

7297 #i‚de‡
GL_ARB_shadow


7298 
	#GL_ARB_shadow
 1

	)

7301 #i‚de‡
GL_ARB_shadow_ambõ¡


7302 
	#GL_ARB_shadow_ambõ¡
 1

	)

7305 #i‚de‡
GL_ARB_wödow_pos


7306 
	#GL_ARB_wödow_pos
 1

	)

7307 #ifde‡
GL_GLEXT_PROTOTYPES


7308 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7309 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

7310 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

7311 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

7312 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

7313 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

7314 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

7315 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

7316 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7317 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

7318 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

7319 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

7320 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

7321 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

7322 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

7323 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

7325 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7326 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7327 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7328 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7329 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

7330 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7331 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7332 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7333 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7334 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7335 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7336 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7337 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7338 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7339 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7340 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7343 #i‚de‡
GL_ARB_vîãx_¥ogøm


7344 
	#GL_ARB_vîãx_¥ogøm
 1

	)

7345 #ifde‡
GL_GLEXT_PROTOTYPES


7346 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

7347 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7348 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

7349 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7350 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

7351 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7352 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7353 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7354 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

7355 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7356 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

7357 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7358 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7359 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7360 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

7361 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7362 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

7363 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7364 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

7365 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

7366 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7367 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

7368 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

7369 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

7370 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

7371 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

7372 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7373 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7374 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7375 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7376 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

7377 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

7378 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7379 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

7380 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

7381 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

7382 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7383 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

7384 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

7385 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

7386 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

7387 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

7388 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

7389 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7390 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7391 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7392 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7393 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7394 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7395 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7396 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7397 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7398 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7399 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7400 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7401 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7402 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 *
°rög
);

7403 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

7404 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7405 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7406 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

7407 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

7409 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7410 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7411 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

7412 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7413 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

7414 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7415 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7416 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7417 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7418 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7419 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7420 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7421 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7422 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7423 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7424 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7425 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7426 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7427 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7428 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7429 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7430 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

7431 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7432 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7433 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7434 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7435 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7436 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7437 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7438 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7439 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7440 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7441 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7442 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7443 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7444 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7445 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7446 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7447 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7448 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

7449 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

7450 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

7451 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

7452 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7453 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

7454 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7455 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7456 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7457 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

7458 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7459 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7460 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

7461 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

7462 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

7463 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

7464 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7465 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

7466 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7467 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7468 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7469 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

7470 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7473 #i‚de‡
GL_ARB_‰agmít_¥ogøm


7474 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

7478 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


7479 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

7480 #ifde‡
GL_GLEXT_PROTOTYPES


7481 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

7482 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

7483 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

7484 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

7485 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

7486 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° 
GLvoid
 *
d©a
);

7487 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, 
GLvoid
 *
d©a
);

7488 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

7489 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

7490 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7491 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

7493 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

7494 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

7495 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

7496 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7497 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

7498 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

7499 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

7500 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

7501 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

7502 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7503 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

7506 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


7507 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

7508 #ifde‡
GL_GLEXT_PROTOTYPES


7509 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

7510 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

7511 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

7512 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

7513 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

7514 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7515 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7516 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

7518 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

7519 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

7520 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

7521 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

7522 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

7523 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7524 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7525 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7528 #i‚de‡
GL_ARB_shadî_obje˘s


7529 
	#GL_ARB_shadî_obje˘s
 1

	)

7530 #ifde‡
GL_GLEXT_PROTOTYPES


7531 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

7532 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

7533 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

7534 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

7535 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
* *
°rög
, c⁄° 
GLöt
 *
Àngth
);

7536 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

7537 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

7538 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

7539 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

7540 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

7541 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

7542 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7543 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7544 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7545 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7546 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

7547 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7548 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7549 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7550 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7551 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7552 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7553 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7554 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7555 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7556 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7557 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7558 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7559 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7560 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7561 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7562 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7563 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

7564 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

7565 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

7566 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

7567 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

7568 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

7569 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

7571 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

7572 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

7573 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

7574 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

7575 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

7576 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

7577 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

7578 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

7579 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7580 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7581 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7582 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

7583 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

7584 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

7585 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

7586 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

7587 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

7588 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

7589 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

7590 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7591 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7592 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7593 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7594 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7595 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7596 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7597 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7598 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7599 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7600 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7601 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7602 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7603 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

7604 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

7605 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7606 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7607 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

7608 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

7609 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

7612 #i‚de‡
GL_ARB_vîãx_shadî


7613 
	#GL_ARB_vîãx_shadî
 1

	)

7614 #ifde‡
GL_GLEXT_PROTOTYPES


7615 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

7616 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

7617 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

7619 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7620 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7621 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7624 #i‚de‡
GL_ARB_‰agmít_shadî


7625 
	#GL_ARB_‰agmít_shadî
 1

	)

7628 #i‚de‡
GL_ARB_shadög_œnguage_100


7629 
	#GL_ARB_shadög_œnguage_100
 1

	)

7632 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


7633 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

7636 #i‚de‡
GL_ARB_poöt_•rôe


7637 
	#GL_ARB_poöt_•rôe
 1

	)

7640 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


7641 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

7644 #i‚de‡
GL_ARB_døw_buf„rs


7645 
	#GL_ARB_døw_buf„rs
 1

	)

7646 #ifde‡
GL_GLEXT_PROTOTYPES


7647 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7649 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

7652 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


7653 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

7656 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


7657 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

7658 #ifde‡
GL_GLEXT_PROTOTYPES


7659 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

7661 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

7664 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


7665 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

7668 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


7669 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

7672 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


7673 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

7676 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


7677 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

7680 #i‚de‡
GL_ARB_døw_ö°™˚d


7681 
	#GL_ARB_døw_ö°™˚d
 1

	)

7682 #ifde‡
GL_GLEXT_PROTOTYPES


7683 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7684 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

7686 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7687 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7690 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


7691 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

7692 #ifde‡
GL_GLEXT_PROTOTYPES


7693 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

7694 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7695 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7696 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7697 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7698 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7699 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

7700 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7701 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7702 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7703 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

7704 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7705 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7706 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7707 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7708 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7709 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

7710 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7711 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7712 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7714 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7715 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7716 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7717 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7718 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7719 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7720 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7721 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7722 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7723 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7724 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

7725 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7726 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7727 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7728 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7729 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7730 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

7731 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7732 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7733 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7736 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


7737 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

7740 #i‚de‡
GL_ARB_geomëry_shadî4


7741 
	#GL_ARB_geomëry_shadî4
 1

	)

7742 #ifde‡
GL_GLEXT_PROTOTYPES


7743 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7744 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7745 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7746 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7748 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7749 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7750 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7751 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

7754 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


7755 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

7758 #i‚de‡
GL_ARB_ö°™˚d_¨øys


7759 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

7760 #ifde‡
GL_GLEXT_PROTOTYPES


7761 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

7763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

7766 #i‚de‡
GL_ARB_m≠_buf„r_ønge


7767 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

7768 #ifde‡
GL_GLEXT_PROTOTYPES


7769 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7770 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7772 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

7773 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

7776 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


7777 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

7778 #ifde‡
GL_GLEXT_PROTOTYPES


7779 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7781 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7784 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


7785 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

7788 #i‚de‡
GL_ARB_ãxtuª_rg


7789 
	#GL_ARB_ãxtuª_rg
 1

	)

7792 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


7793 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

7794 #ifde‡
GL_GLEXT_PROTOTYPES


7795 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

7796 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

7797 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

7798 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

7800 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

7801 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

7802 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

7803 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

7806 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


7807 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

7808 #ifde‡
GL_GLEXT_PROTOTYPES


7809 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
* c⁄° *
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

7810 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7811 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

7812 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

7813 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7814 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

7815 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

7817 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
* c⁄° *
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

7818 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7819 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

7820 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

7821 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7822 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

7823 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

7826 #i‚de‡
GL_ARB_com∑tibûôy


7827 
	#GL_ARB_com∑tibûôy
 1

	)

7830 #i‚de‡
GL_ARB_c›y_buf„r


7831 
	#GL_ARB_c›y_buf„r
 1

	)

7832 #ifde‡
GL_GLEXT_PROTOTYPES


7833 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7835 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

7838 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


7839 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

7842 #i‚de‡
GL_ARB_dïth_˛amp


7843 
	#GL_ARB_dïth_˛amp
 1

	)

7846 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


7847 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

7848 #ifde‡
GL_GLEXT_PROTOTYPES


7849 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, 
GLöt
 
ba£vîãx
);

7850 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, 
GLöt
 
ba£vîãx
);

7851 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

7852 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

7854 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

7855 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

7856 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

7857 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

7860 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


7861 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

7864 #i‚de‡
GL_ARB_¥ovokög_vîãx


7865 
	#GL_ARB_¥ovokög_vîãx
 1

	)

7866 #ifde‡
GL_GLEXT_PROTOTYPES


7867 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

7869 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

7872 #i‚de‡
GL_ARB_£amÀss_cube_m≠


7873 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

7876 #i‚de‡
GL_ARB_sync


7877 
	#GL_ARB_sync
 1

	)

7878 #ifde‡
GL_GLEXT_PROTOTYPES


7879 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

7880 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

7881 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

7882 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

7883 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

7884 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7885 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

7887 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

7888 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

7889 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

7890 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

7891 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

7892 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7893 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

7896 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


7897 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

7898 #ifde‡
GL_GLEXT_PROTOTYPES


7899 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7900 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7901 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

7902 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

7904 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7905 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7906 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

7907 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

7910 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


7911 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

7914 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


7915 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

7916 #ifde‡
GL_GLEXT_PROTOTYPES


7917 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

7918 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

7919 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

7920 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

7922 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

7923 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

7924 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

7925 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

7928 #i‚de‡
GL_ARB_ßm∂e_shadög


7929 
	#GL_ARB_ßm∂e_shadög
 1

	)

7930 #ifde‡
GL_GLEXT_PROTOTYPES


7931 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

7933 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

7936 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


7937 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

7940 #i‚de‡
GL_ARB_ãxtuª_g©hî


7941 
	#GL_ARB_ãxtuª_g©hî
 1

	)

7944 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


7945 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

7948 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


7949 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

7950 #ifde‡
GL_GLEXT_PROTOTYPES


7951 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

7952 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

7953 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* *
∑th
, c⁄° 
GLöt
 *
Àngth
);

7954 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

7955 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

7956 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

7958 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

7959 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

7960 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

7961 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

7962 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

7963 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

7966 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


7967 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

7970 #i‚de‡
GL_ARB_bÀnd_func_exãnded


7971 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

7972 #ifde‡
GL_GLEXT_PROTOTYPES


7973 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

7974 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7976 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

7977 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7980 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


7981 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

7984 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


7985 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

7988 #i‚de‡
GL_ARB_ßm∂î_obje˘s


7989 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

7990 #ifde‡
GL_GLEXT_PROTOTYPES


7991 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

7992 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

7993 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

7994 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

7995 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7996 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

7997 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7998 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

7999 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

8000 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

8001 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8002 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8003 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8004 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

8006 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

8007 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

8008 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

8009 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

8010 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8011 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

8012 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8013 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

8014 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

8015 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

8016 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8017 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8018 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8019 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

8022 #i‚de‡
GL_ARB_shadî_bô_ícodög


8023 
	#GL_ARB_shadî_bô_ícodög
 1

	)

8026 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


8027 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

8030 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


8031 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

8034 #i‚de‡
GL_ARB_timî_quîy


8035 
	#GL_ARB_timî_quîy
 1

	)

8036 #ifde‡
GL_GLEXT_PROTOTYPES


8037 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

8038 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

8039 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

8041 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

8042 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

8043 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

8046 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


8047 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

8048 #ifde‡
GL_GLEXT_PROTOTYPES


8049 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

8050 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

8051 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

8052 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

8053 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

8054 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

8055 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8056 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8057 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8058 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8059 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8060 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8061 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8062 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8063 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8064 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8065 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8066 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8067 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8068 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8069 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8070 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8071 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8072 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8073 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8074 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8075 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8076 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8077 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8078 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8079 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8080 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8081 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8082 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8083 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8084 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8085 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8086 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8088 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8089 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8090 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8091 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8092 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8093 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8094 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8095 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8096 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8097 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8098 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8099 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8100 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8101 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8102 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8103 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8104 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8105 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8106 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8107 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8108 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8109 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8110 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8111 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8112 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8113 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8114 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8115 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8116 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8117 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8118 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8119 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8120 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8121 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8122 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8123 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8124 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8125 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8128 #i‚de‡
GL_ARB_døw_ödúe˘


8129 
	#GL_ARB_døw_ödúe˘
 1

	)

8130 #ifde‡
GL_GLEXT_PROTOTYPES


8131 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° 
GLvoid
 *
ödúe˘
);

8132 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödúe˘
);

8134 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

8135 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

8138 #i‚de‡
GL_ARB_gpu_shadî5


8139 
	#GL_ARB_gpu_shadî5
 1

	)

8142 #i‚de‡
GL_ARB_gpu_shadî_Â64


8143 
	#GL_ARB_gpu_shadî_Â64
 1

	)

8144 #ifde‡
GL_GLEXT_PROTOTYPES


8145 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

8146 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8147 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8148 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8149 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8150 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8151 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8152 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8153 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8154 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8155 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8156 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8157 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8158 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8159 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8160 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8161 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8162 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

8164 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

8165 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8166 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8167 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8168 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8169 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8170 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8171 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8172 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8173 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8174 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8175 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8176 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8177 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8178 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8179 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8180 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8181 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

8184 #i‚de‡
GL_ARB_shadî_subroutöe


8185 
	#GL_ARB_shadî_subroutöe
 1

	)

8186 #ifde‡
GL_GLEXT_PROTOTYPES


8187 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

8188 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

8189 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

8190 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8191 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8192 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

8193 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

8194 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

8196 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

8197 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

8198 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

8199 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8200 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8201 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

8202 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

8203 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

8206 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


8207 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

8208 #ifde‡
GL_GLEXT_PROTOTYPES


8209 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8210 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

8212 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8213 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

8216 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


8217 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

8220 #i‚de‡
GL_ARB_å™sf‹m_„edback2


8221 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

8222 #ifde‡
GL_GLEXT_PROTOTYPES


8223 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

8224 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

8225 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

8226 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

8227 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

8228 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

8229 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

8231 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

8232 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

8233 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

8234 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

8235 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

8236 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

8237 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

8240 #i‚de‡
GL_ARB_å™sf‹m_„edback3


8241 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

8242 #ifde‡
GL_GLEXT_PROTOTYPES


8243 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

8244 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

8245 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

8246 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8248 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

8249 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

8250 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8251 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8254 #i‚de‡
GL_ARB_ES2_com∑tibûôy


8255 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

8256 #ifde‡
GL_GLEXT_PROTOTYPES


8257 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

8258 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
 *
bö¨y
, GLsizeò
Àngth
);

8259 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

8260 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

8261 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

8263 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

8264 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, GLsizeò
	tÀngth
);

8265 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

8266 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

8267 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

8270 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


8271 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

8272 #ifde‡
GL_GLEXT_PROTOTYPES


8273 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

8274 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLsizei
 
Àngth
);

8275 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8277 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

8278 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

8279 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8282 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


8283 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

8284 #ifde‡
GL_GLEXT_PROTOTYPES


8285 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

8286 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

8287 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
°rögs
);

8288 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

8289 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

8290 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

8291 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

8292 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8293 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

8294 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8295 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

8296 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8297 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

8298 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8299 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

8300 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8301 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

8302 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8303 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

8304 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8305 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

8306 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8307 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

8308 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8309 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

8310 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8311 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

8312 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8313 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

8314 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8315 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

8316 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8317 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

8318 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8319 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

8320 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8321 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

8322 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8323 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

8324 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8325 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8326 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8327 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8328 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8329 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8330 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8331 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8332 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8333 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8334 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8335 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8336 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8337 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8338 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8339 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8340 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8341 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8342 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8343 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

8344 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

8346 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

8347 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

8348 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t°rögs
);

8349 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8350 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

8351 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

8352 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8353 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8354 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

8355 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8356 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

8357 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8358 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

8359 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8360 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

8361 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8362 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

8363 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8364 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

8365 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8366 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

8367 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8368 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

8369 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8370 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

8371 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8372 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

8373 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8374 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

8375 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8376 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

8377 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8378 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

8379 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8380 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

8381 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8382 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

8383 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8384 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

8385 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8386 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8387 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8388 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8389 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8390 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8391 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8392 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8393 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8394 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8395 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8396 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8397 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8398 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8399 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8400 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8401 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8402 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8403 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8404 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8405 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

8408 #i‚de‡
GL_ARB_vîãx_©åib_64bô


8409 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

8410 #ifde‡
GL_GLEXT_PROTOTYPES


8411 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8412 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8413 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8414 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8415 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8416 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8417 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8418 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8419 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

8420 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8422 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8423 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8424 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8425 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8426 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8427 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8428 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8429 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8430 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8431 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8434 #i‚de‡
GL_ARB_võwp‹t_¨øy


8435 
	#GL_ARB_võwp‹t_¨øy
 1

	)

8436 #ifde‡
GL_GLEXT_PROTOTYPES


8437 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

8438 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

8439 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

8440 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

8441 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

8442 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

8443 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

8444 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

8445 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

8446 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

8448 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8449 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

8450 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8451 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

8452 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8453 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8454 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8455 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

8456 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

8457 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

8460 #i‚de‡
GL_ARB_˛_evít


8461 
	#GL_ARB_˛_evít
 1

	)

8462 #ifde‡
GL_GLEXT_PROTOTYPES


8463 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 * 
c⁄ãxt
, 
_˛_evít
 * 
evít
, 
GLbôfõld
 
Êags
);

8465 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 * 
	tc⁄ãxt
, 
	t_˛_evít
 * 
	tevít
, 
	tGLbôfõld
 
	tÊags
);

8468 #i‚de‡
GL_ARB_debug_ouçut


8469 
	#GL_ARB_debug_ouçut
 1

	)

8470 #ifde‡
GL_GLEXT_PROTOTYPES


8471 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

8472 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

8473 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° 
GLvoid
 *
u£rP¨am
);

8474 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

8476 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

8477 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

8478 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° 
	tGLvoid
 *
	tu£rP¨am
);

8479 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

8482 #i‚de‡
GL_ARB_robu°√ss


8483 
	#GL_ARB_robu°√ss
 1

	)

8484 #ifde‡
GL_GLEXT_PROTOTYPES


8485 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

8486 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

8487 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

8488 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

8489 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

8490 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

8491 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

8492 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

8493 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
èbÀ
);

8494 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
image
);

8495 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, 
GLvoid
 *
row
, GLsizeò
cﬁumnBufSize
, GLvoid *
cﬁumn
, GLvoid *
•™
);

8496 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
vÆues
);

8497 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
vÆues
);

8498 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
img
);

8499 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, 
GLvoid
 *
d©a
);

8500 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, 
GLvoid
 *
img
);

8501 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

8502 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

8503 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

8504 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

8506 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

8507 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

8508 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

8509 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

8510 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

8511 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

8512 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

8513 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

8514 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tèbÀ
);

8515 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timage
);

8516 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, 
	tGLvoid
 *
	trow
, GLsizeò
	tcﬁumnBufSize
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8517 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tvÆues
);

8518 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tvÆues
);

8519 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timg
);

8520 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, 
	tGLvoid
 *
	td©a
);

8521 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timg
);

8522 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

8523 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

8524 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

8525 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

8528 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


8529 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

8532 #i‚de‡
GL_ARB_ba£_ö°™˚


8533 
	#GL_ARB_ba£_ö°™˚
 1

	)

8534 #ifde‡
GL_GLEXT_PROTOTYPES


8535 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

8536 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

8537 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

8539 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

8540 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

8541 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

8544 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


8545 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

8548 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


8549 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

8550 #ifde‡
GL_GLEXT_PROTOTYPES


8551 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

8552 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

8554 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

8555 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

8558 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


8559 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

8562 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


8563 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

8566 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


8567 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

8568 #ifde‡
GL_GLEXT_PROTOTYPES


8569 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

8571 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

8574 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


8575 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

8578 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


8579 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

8580 #ifde‡
GL_GLEXT_PROTOTYPES


8581 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8583 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8586 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


8587 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

8588 #ifde‡
GL_GLEXT_PROTOTYPES


8589 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

8590 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

8592 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

8593 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

8596 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


8597 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

8600 #i‚de‡
GL_ARB_ãxtuª_°‹age


8601 
	#GL_ARB_ãxtuª_°‹age
 1

	)

8602 #ifde‡
GL_GLEXT_PROTOTYPES


8603 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

8604 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8605 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

8606 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

8607 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8608 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

8610 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

8611 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8612 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8613 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

8614 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8615 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8618 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


8619 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

8622 #i‚de‡
GL_KHR_debug


8623 
	#GL_KHR_debug
 1

	)

8625 #ifde‡
GL_GLEXT_PROTOTYPES


8626 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

8627 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

8628 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

8629 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

8630 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

8631 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

8632 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

8633 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

8634 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

8635 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

8637 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

8638 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

8639 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

8640 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

8641 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

8642 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

8643 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

8644 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

8645 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

8646 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

8649 #i‚de‡
GL_ARB_¨øys_of_¨øys


8650 
	#GL_ARB_¨øys_of_¨øys
 1

	)

8653 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


8654 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

8655 #ifde‡
GL_GLEXT_PROTOTYPES


8656 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8657 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8658 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8659 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, c⁄° *
d©a
);

8661 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8662 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8663 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8664 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, c⁄° *
	td©a
);

8667 #i‚de‡
GL_ARB_compuã_shadî


8668 
	#GL_ARB_compuã_shadî
 1

	)

8669 #ifde‡
GL_GLEXT_PROTOTYPES


8670 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

8671 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

8673 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

8674 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

8677 #i‚de‡
GL_ARB_c›y_image


8678 
	#GL_ARB_c›y_image
 1

	)

8679 #ifde‡
GL_GLEXT_PROTOTYPES


8680 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

8682 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

8685 #i‚de‡
GL_ARB_debug_group


8686 
	#GL_ARB_debug_group
 1

	)

8690 #i‚de‡
GL_ARB_debug_œbñ


8691 
	#GL_ARB_debug_œbñ
 1

	)

8695 #i‚de‡
GL_ARB_debug_ouçut2


8696 
	#GL_ARB_debug_ouçut2
 1

	)

8699 #i‚de‡
GL_ARB_ES3_com∑tibûôy


8700 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

8703 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


8704 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

8707 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


8708 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

8711 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


8712 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

8713 #ifde‡
GL_GLEXT_PROTOTYPES


8714 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8715 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8716 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

8717 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8719 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8720 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8721 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8722 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8725 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


8726 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

8727 #ifde‡
GL_GLEXT_PROTOTYPES


8728 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

8730 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

8733 #i‚de‡
GL_ARB_övÆid©e_subd©a


8734 
	#GL_ARB_övÆid©e_subd©a
 1

	)

8735 #ifde‡
GL_GLEXT_PROTOTYPES


8736 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

8737 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8738 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

8739 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

8740 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

8741 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

8743 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8744 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8745 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

8746 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8747 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

8748 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

8751 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


8752 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

8753 #ifde‡
GL_GLEXT_PROTOTYPES


8754 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

8755 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

8757 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

8758 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

8761 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


8762 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

8763 #ifde‡
GL_GLEXT_PROTOTYPES


8764 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8765 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8766 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8767 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

8768 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8769 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8771 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8772 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8773 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8774 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

8775 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8776 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8779 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


8780 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

8783 #i‚de‡
GL_ARB_shadî_image_size


8784 
	#GL_ARB_shadî_image_size
 1

	)

8787 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


8788 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

8789 #ifde‡
GL_GLEXT_PROTOTYPES


8790 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

8792 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

8795 #i‚de‡
GL_ARB_°ícû_ãxturög


8796 
	#GL_ARB_°ícû_ãxturög
 1

	)

8799 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


8800 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

8801 #ifde‡
GL_GLEXT_PROTOTYPES


8802 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8803 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8805 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8806 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8809 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


8810 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

8813 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


8814 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

8815 #ifde‡
GL_GLEXT_PROTOTYPES


8816 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8817 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8818 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8819 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8821 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8822 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8823 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8824 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8827 #i‚de‡
GL_ARB_ãxtuª_võw


8828 
	#GL_ARB_ãxtuª_võw
 1

	)

8829 #ifde‡
GL_GLEXT_PROTOTYPES


8830 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

8832 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

8835 #i‚de‡
GL_ARB_vîãx_©åib_bödög


8836 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

8837 #ifde‡
GL_GLEXT_PROTOTYPES


8838 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

8839 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

8840 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8841 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8842 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

8843 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

8844 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

8845 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

8846 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8847 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8848 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

8849 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

8851 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

8852 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

8853 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8854 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8855 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

8856 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

8857 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

8858 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

8859 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8860 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8861 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

8862 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

8865 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


8866 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

8869 #i‚de‡
GL_EXT_abgr


8870 
	#GL_EXT_abgr
 1

	)

8873 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


8874 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

8875 #ifde‡
GL_GLEXT_PROTOTYPES


8876 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

8878 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

8881 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


8882 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

8883 #ifde‡
GL_GLEXT_PROTOTYPES


8884 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

8886 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

8889 #i‚de‡
GL_EXT_ãxtuª


8890 
	#GL_EXT_ãxtuª
 1

	)

8893 #i‚de‡
GL_EXT_ãxtuª3D


8894 
	#GL_EXT_ãxtuª3D
 1

	)

8895 #ifde‡
GL_GLEXT_PROTOTYPES


8896 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8897 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8899 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8900 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8903 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


8904 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

8905 #ifde‡
GL_GLEXT_PROTOTYPES


8906 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

8907 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

8909 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

8910 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

8913 #i‚de‡
GL_EXT_subãxtuª


8914 
	#GL_EXT_subãxtuª
 1

	)

8915 #ifde‡
GL_GLEXT_PROTOTYPES


8916 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8917 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8919 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8920 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8923 #i‚de‡
GL_EXT_c›y_ãxtuª


8924 
	#GL_EXT_c›y_ãxtuª
 1

	)

8925 #ifde‡
GL_GLEXT_PROTOTYPES


8926 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

8927 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

8928 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

8929 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8930 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8932 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

8933 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

8934 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8935 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8936 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8939 #i‚de‡
GL_EXT_hi°ogøm


8940 
	#GL_EXT_hi°ogøm
 1

	)

8941 #ifde‡
GL_GLEXT_PROTOTYPES


8942 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

8943 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8944 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8945 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

8946 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8947 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8948 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

8949 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

8950 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

8951 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

8953 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

8954 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8955 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8956 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

8957 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8958 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8959 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8960 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8961 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8962 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8965 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


8966 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

8967 #ifde‡
GL_GLEXT_PROTOTYPES


8968 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

8969 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

8970 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

8971 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8972 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

8973 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8974 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

8975 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8976 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
image
);

8977 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8978 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8979 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
);

8980 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
);

8982 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8983 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8984 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

8985 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8986 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

8987 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8988 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8989 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8990 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

8991 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8992 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8993 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8994 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

8997 #i‚de‡
GL_SGI_cﬁ‹_m©rix


8998 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

9001 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


9002 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

9003 #ifde‡
GL_GLEXT_PROTOTYPES


9004 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

9005 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9006 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9007 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

9008 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
èbÀ
);

9009 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9010 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9012 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

9013 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9014 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9015 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

9016 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

9017 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9018 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9021 #i‚de‡
GL_SGIX_pixñ_ãxtuª


9022 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

9023 #ifde‡
GL_GLEXT_PROTOTYPES


9024 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

9026 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

9029 #i‚de‡
GL_SGIS_pixñ_ãxtuª


9030 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

9031 #ifde‡
GL_GLEXT_PROTOTYPES


9032 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9033 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9034 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9035 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9036 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9037 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9039 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9040 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9041 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9042 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9043 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9044 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9047 #i‚de‡
GL_SGIS_ãxtuª4D


9048 
	#GL_SGIS_ãxtuª4D
 1

	)

9049 #ifde‡
GL_GLEXT_PROTOTYPES


9050 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

9051 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

9053 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9054 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9057 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


9058 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

9061 #i‚de‡
GL_EXT_cmyka


9062 
	#GL_EXT_cmyka
 1

	)

9065 #i‚de‡
GL_EXT_ãxtuª_obje˘


9066 
	#GL_EXT_ãxtuª_obje˘
 1

	)

9067 #ifde‡
GL_GLEXT_PROTOTYPES


9068 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

9069 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

9070 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

9071 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

9072 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

9073 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

9075 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

9076 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

9077 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

9078 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

9079 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9080 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

9083 #i‚de‡
GL_SGIS_dëaû_ãxtuª


9084 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

9085 #ifde‡
GL_GLEXT_PROTOTYPES


9086 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9087 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

9089 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9090 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

9093 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


9094 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

9095 #ifde‡
GL_GLEXT_PROTOTYPES


9096 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9097 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

9099 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9100 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

9103 #i‚de‡
GL_EXT_∑cked_pixñs


9104 
	#GL_EXT_∑cked_pixñs
 1

	)

9107 #i‚de‡
GL_SGIS_ãxtuª_lod


9108 
	#GL_SGIS_ãxtuª_lod
 1

	)

9111 #i‚de‡
GL_SGIS_mu…ißm∂e


9112 
	#GL_SGIS_mu…ißm∂e
 1

	)

9113 #ifde‡
GL_GLEXT_PROTOTYPES


9114 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

9115 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

9117 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

9118 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

9121 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


9122 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

9125 #i‚de‡
GL_EXT_vîãx_¨øy


9126 
	#GL_EXT_vîãx_¨øy
 1

	)

9127 #ifde‡
GL_GLEXT_PROTOTYPES


9128 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

9129 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9130 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

9131 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

9132 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

9133 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9134 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9135 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9136 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9138 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

9139 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9140 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9141 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

9142 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

9143 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9144 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9145 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9146 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9149 #i‚de‡
GL_EXT_misc_©åibuã


9150 
	#GL_EXT_misc_©åibuã
 1

	)

9153 #i‚de‡
GL_SGIS_gíî©e_mùm≠


9154 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

9157 #i‚de‡
GL_SGIX_˛ùm≠


9158 
	#GL_SGIX_˛ùm≠
 1

	)

9161 #i‚de‡
GL_SGIX_shadow


9162 
	#GL_SGIX_shadow
 1

	)

9165 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


9166 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

9169 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


9170 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

9173 #i‚de‡
GL_EXT_bÀnd_mömax


9174 
	#GL_EXT_bÀnd_mömax
 1

	)

9175 #ifde‡
GL_GLEXT_PROTOTYPES


9176 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

9178 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

9181 #i‚de‡
GL_EXT_bÀnd_subåa˘


9182 
	#GL_EXT_bÀnd_subåa˘
 1

	)

9185 #i‚de‡
GL_EXT_bÀnd_logic_›


9186 
	#GL_EXT_bÀnd_logic_›
 1

	)

9189 #i‚de‡
GL_SGIX_öãæa˚


9190 
	#GL_SGIX_öãæa˚
 1

	)

9193 #i‚de‡
GL_SGIX_pixñ_tûes


9194 
	#GL_SGIX_pixñ_tûes
 1

	)

9197 #i‚de‡
GL_SGIX_ãxtuª_£À˘


9198 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

9201 #i‚de‡
GL_SGIX_•rôe


9202 
	#GL_SGIX_•rôe
 1

	)

9203 #ifde‡
GL_GLEXT_PROTOTYPES


9204 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9205 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9206 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9207 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9209 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9210 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9211 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9212 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9215 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


9216 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

9219 #i‚de‡
GL_EXT_poöt_∑ømëîs


9220 
	#GL_EXT_poöt_∑ømëîs
 1

	)

9221 #ifde‡
GL_GLEXT_PROTOTYPES


9222 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9223 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9225 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9226 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9229 #i‚de‡
GL_SGIS_poöt_∑ømëîs


9230 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

9231 #ifde‡
GL_GLEXT_PROTOTYPES


9232 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9233 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9235 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9236 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9239 #i‚de‡
GL_SGIX_ö°rumíts


9240 
	#GL_SGIX_ö°rumíts
 1

	)

9241 #ifde‡
GL_GLEXT_PROTOTYPES


9242 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

9243 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

9244 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

9245 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

9246 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

9247 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

9249 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

9250 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

9251 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

9252 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

9253 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

9254 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

9257 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


9258 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

9261 #i‚de‡
GL_SGIX_‰amezoom


9262 
	#GL_SGIX_‰amezoom
 1

	)

9263 #ifde‡
GL_GLEXT_PROTOTYPES


9264 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

9266 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

9269 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


9270 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

9271 #ifde‡
GL_GLEXT_PROTOTYPES


9272 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

9274 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

9277 #i‚de‡
GL_SGIX_pﬁynomül_ffd


9278 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

9279 #ifde‡
GL_GLEXT_PROTOTYPES


9280 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

9281 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

9282 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

9283 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

9285 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

9286 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

9287 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

9288 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

9291 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


9292 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

9293 #ifde‡
GL_GLEXT_PROTOTYPES


9294 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

9296 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

9299 #i‚de‡
GL_SGIX_Êush_ø°î


9300 
	#GL_SGIX_Êush_ø°î
 1

	)

9301 #ifde‡
GL_GLEXT_PROTOTYPES


9302 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

9304 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

9307 #i‚de‡
GL_SGIX_dïth_ãxtuª


9308 
	#GL_SGIX_dïth_ãxtuª
 1

	)

9311 #i‚de‡
GL_SGIS_fog_fun˘i⁄


9312 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

9313 #ifde‡
GL_GLEXT_PROTOTYPES


9314 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9315 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

9317 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9318 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

9321 #i‚de‡
GL_SGIX_fog_off£t


9322 
	#GL_SGIX_fog_off£t
 1

	)

9325 #i‚de‡
GL_HP_image_å™sf‹m


9326 
	#GL_HP_image_å™sf‹m
 1

	)

9327 #ifde‡
GL_GLEXT_PROTOTYPES


9328 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9329 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9330 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9331 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9332 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9333 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9335 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9336 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9337 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9338 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9339 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9340 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9343 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


9344 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

9347 #i‚de‡
GL_SGIX_ãxtuª_add_ív


9348 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

9351 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


9352 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

9353 #ifde‡
GL_GLEXT_PROTOTYPES


9354 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

9355 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

9357 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

9358 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

9361 #i‚de‡
GL_PGI_vîãx_höts


9362 
	#GL_PGI_vîãx_höts
 1

	)

9365 #i‚de‡
GL_PGI_misc_höts


9366 
	#GL_PGI_misc_höts
 1

	)

9367 #ifde‡
GL_GLEXT_PROTOTYPES


9368 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

9370 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

9373 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


9374 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

9375 #ifde‡
GL_GLEXT_PROTOTYPES


9376 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

9377 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
d©a
);

9378 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9379 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9381 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

9382 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

9383 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9384 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9387 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


9388 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

9391 #i‚de‡
GL_SGIX_li°_¥i‹ôy


9392 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

9393 #ifde‡
GL_GLEXT_PROTOTYPES


9394 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9395 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9396 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9397 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9398 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9399 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9401 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9402 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9403 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9404 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9405 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9406 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9409 #i‚de‡
GL_SGIX_ú_ö°rumít1


9410 
	#GL_SGIX_ú_ö°rumít1
 1

	)

9413 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


9414 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

9417 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


9418 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

9421 #i‚de‡
GL_SGIX_shadow_ambõ¡


9422 
	#GL_SGIX_shadow_ambõ¡
 1

	)

9425 #i‚de‡
GL_EXT_ödex_ãxtuª


9426 
	#GL_EXT_ödex_ãxtuª
 1

	)

9429 #i‚de‡
GL_EXT_ödex_m©îül


9430 
	#GL_EXT_ödex_m©îül
 1

	)

9431 #ifde‡
GL_GLEXT_PROTOTYPES


9432 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

9434 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9437 #i‚de‡
GL_EXT_ödex_func


9438 
	#GL_EXT_ödex_func
 1

	)

9439 #ifde‡
GL_GLEXT_PROTOTYPES


9440 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

9442 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

9445 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


9446 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

9449 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


9450 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

9451 #ifde‡
GL_GLEXT_PROTOTYPES


9452 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

9453 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

9455 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9456 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

9459 #i‚de‡
GL_EXT_cuŒ_vîãx


9460 
	#GL_EXT_cuŒ_vîãx
 1

	)

9461 #ifde‡
GL_GLEXT_PROTOTYPES


9462 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

9463 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9465 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9466 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9469 #i‚de‡
GL_SGIX_y¸cb


9470 
	#GL_SGIX_y¸cb
 1

	)

9473 #i‚de‡
GL_SGIX_‰agmít_lightög


9474 
	#GL_SGIX_‰agmít_lightög
 1

	)

9475 #ifde‡
GL_GLEXT_PROTOTYPES


9476 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

9477 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9478 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9479 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9480 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9481 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9482 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9483 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9484 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9485 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9486 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9487 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9488 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9489 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9490 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9491 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9492 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9493 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9495 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9496 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9497 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9498 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9499 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9500 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9501 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9502 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9503 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9504 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9505 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9506 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9507 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9508 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9509 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9510 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9511 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9512 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9515 #i‚de‡
GL_IBM_ø°îpos_˛ù


9516 
	#GL_IBM_ø°îpos_˛ù
 1

	)

9519 #i‚de‡
GL_HP_ãxtuª_lightög


9520 
	#GL_HP_ãxtuª_lightög
 1

	)

9523 #i‚de‡
GL_EXT_døw_ønge_ñemíts


9524 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

9525 #ifde‡
GL_GLEXT_PROTOTYPES


9526 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

9528 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

9531 #i‚de‡
GL_WIN_ph⁄g_shadög


9532 
	#GL_WIN_ph⁄g_shadög
 1

	)

9535 #i‚de‡
GL_WIN_•ecuœr_fog


9536 
	#GL_WIN_•ecuœr_fog
 1

	)

9539 #i‚de‡
GL_EXT_light_ãxtuª


9540 
	#GL_EXT_light_ãxtuª
 1

	)

9541 #ifde‡
GL_GLEXT_PROTOTYPES


9542 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

9543 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

9544 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

9546 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

9547 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

9548 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9551 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


9552 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

9555 #i‚de‡
GL_EXT_bgø


9556 
	#GL_EXT_bgø
 1

	)

9559 #i‚de‡
GL_SGIX_async


9560 
	#GL_SGIX_async
 1

	)

9561 #ifde‡
GL_GLEXT_PROTOTYPES


9562 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

9563 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

9564 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

9565 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

9566 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

9567 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

9569 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

9570 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

9571 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

9572 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

9573 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

9574 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

9577 #i‚de‡
GL_SGIX_async_pixñ


9578 
	#GL_SGIX_async_pixñ
 1

	)

9581 #i‚de‡
GL_SGIX_async_hi°ogøm


9582 
	#GL_SGIX_async_hi°ogøm
 1

	)

9585 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


9586 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

9587 #ifde‡
GL_GLEXT_PROTOTYPES


9588 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9589 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9590 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9591 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9593 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9594 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9595 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9596 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9599 #i‚de‡
GL_HP_oc˛usi⁄_ã°


9600 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

9603 #i‚de‡
GL_EXT_pixñ_å™sf‹m


9604 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

9605 #ifde‡
GL_GLEXT_PROTOTYPES


9606 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9607 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9608 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9609 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9611 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9612 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9613 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9614 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9617 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


9618 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

9621 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


9622 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

9625 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


9626 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

9629 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


9630 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

9631 #ifde‡
GL_GLEXT_PROTOTYPES


9632 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

9633 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9634 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

9635 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9636 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

9637 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9638 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

9639 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

9640 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

9641 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9642 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

9643 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

9644 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

9645 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

9646 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

9647 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

9648 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9650 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

9651 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9652 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

9653 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9654 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

9655 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9656 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

9657 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9658 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

9659 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9660 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

9661 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

9662 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

9663 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

9664 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

9665 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

9666 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9669 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


9670 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

9671 #ifde‡
GL_GLEXT_PROTOTYPES


9672 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

9674 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

9677 #i‚de‡
GL_EXT_mu…i_døw_¨øys


9678 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

9679 #ifde‡
GL_GLEXT_PROTOTYPES


9680 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

9681 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

9683 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

9684 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

9687 #i‚de‡
GL_EXT_fog_co‹d


9688 
	#GL_EXT_fog_co‹d
 1

	)

9689 #ifde‡
GL_GLEXT_PROTOTYPES


9690 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

9691 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

9692 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

9693 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

9694 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9696 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

9697 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

9698 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

9699 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

9700 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9703 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


9704 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

9707 #i‚de‡
GL_EXT_co‹dö©e_‰ame


9708 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

9709 #ifde‡
GL_GLEXT_PROTOTYPES


9710 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

9711 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9712 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

9713 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9714 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

9715 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9716 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

9717 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

9718 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

9719 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9720 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

9721 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9722 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

9723 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9724 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

9725 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9726 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

9727 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

9728 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

9729 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9730 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9731 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9733 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

9734 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9735 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

9736 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9737 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

9738 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9739 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

9740 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9741 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

9742 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9743 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

9744 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9745 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

9746 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9747 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

9748 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9749 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

9750 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9751 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

9752 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9753 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9754 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9757 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


9758 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

9761 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


9762 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

9765 #i‚de‡
GL_APPLE_å™sf‹m_höt


9766 
	#GL_APPLE_å™sf‹m_höt
 1

	)

9769 #i‚de‡
GL_SGIX_fog_sˇÀ


9770 
	#GL_SGIX_fog_sˇÀ
 1

	)

9773 #i‚de‡
GL_SUNX_c⁄°™t_d©a


9774 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

9775 #ifde‡
GL_GLEXT_PROTOTYPES


9776 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

9778 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

9781 #i‚de‡
GL_SUN_globÆ_Æpha


9782 
	#GL_SUN_globÆ_Æpha
 1

	)

9783 #ifde‡
GL_GLEXT_PROTOTYPES


9784 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

9785 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

9786 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

9787 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

9788 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

9789 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

9790 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

9791 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

9793 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

9794 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

9795 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

9796 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

9797 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

9798 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

9799 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

9800 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

9803 #i‚de‡
GL_SUN_åüngÀ_li°


9804 
	#GL_SUN_åüngÀ_li°
 1

	)

9805 #ifde‡
GL_GLEXT_PROTOTYPES


9806 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

9807 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

9808 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

9809 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

9810 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

9811 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

9812 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* *
poöãr
);

9814 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

9815 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

9816 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

9817 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

9818 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

9819 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

9820 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9823 #i‚de‡
GL_SUN_vîãx


9824 
	#GL_SUN_vîãx
 1

	)

9825 #ifde‡
GL_GLEXT_PROTOTYPES


9826 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9827 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9828 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9829 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9830 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9831 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

9832 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9833 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

9834 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9835 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9836 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9837 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9838 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9839 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9840 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9841 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

9842 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9843 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

9844 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9845 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9846 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9847 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9848 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9849 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9850 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9851 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

9852 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9853 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9854 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9855 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

9856 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9857 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

9858 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9859 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9860 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9861 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9862 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9863 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9864 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9865 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9867 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9868 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9869 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9870 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9871 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9872 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9873 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9874 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

9875 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9876 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9877 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9878 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9879 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9880 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9881 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9882 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9883 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9884 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

9885 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9886 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9887 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9888 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9889 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9890 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9891 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9892 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9893 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9894 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9895 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9896 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9897 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9898 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

9899 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9900 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9901 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9902 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9903 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9904 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9905 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9906 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9909 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


9910 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

9911 #ifde‡
GL_GLEXT_PROTOTYPES


9912 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

9914 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

9917 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


9918 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

9919 #ifde‡
GL_GLEXT_PROTOTYPES


9920 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

9922 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

9925 #i‚de‡
GL_INGR_cﬁ‹_˛amp


9926 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

9929 #i‚de‡
GL_INGR_öãæa˚_ªad


9930 
	#GL_INGR_öãæa˚_ªad
 1

	)

9933 #i‚de‡
GL_EXT_°ícû_wøp


9934 
	#GL_EXT_°ícû_wøp
 1

	)

9937 #i‚de‡
GL_EXT_422_pixñs


9938 
	#GL_EXT_422_pixñs
 1

	)

9941 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


9942 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

9945 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


9946 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

9949 #i‚de‡
GL_EXT_ãxtuª_ív_add


9950 
	#GL_EXT_ãxtuª_ív_add
 1

	)

9953 #i‚de‡
GL_EXT_ãxtuª_lod_büs


9954 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

9957 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


9958 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

9961 #i‚de‡
GL_EXT_vîãx_weightög


9962 
	#GL_EXT_vîãx_weightög
 1

	)

9963 #ifde‡
GL_GLEXT_PROTOTYPES


9964 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

9965 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

9966 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLsizei
 
size
, 
GLíum
 
ty≥
, GLsizeò
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9968 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

9969 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

9970 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLíum
 
	tty≥
, GLsizeò
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9973 #i‚de‡
GL_NV_light_max_exp⁄ít


9974 
	#GL_NV_light_max_exp⁄ít
 1

	)

9977 #i‚de‡
GL_NV_vîãx_¨øy_ønge


9978 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

9979 #ifde‡
GL_GLEXT_PROTOTYPES


9980 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

9981 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

9983 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

9984 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9987 #i‚de‡
GL_NV_ªgi°î_comböîs


9988 
	#GL_NV_ªgi°î_comböîs
 1

	)

9989 #ifde‡
GL_GLEXT_PROTOTYPES


9990 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9991 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9992 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9993 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9994 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9995 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

9996 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9997 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9998 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9999 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10000 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10001 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10002 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10004 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10005 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10006 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10007 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10008 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10009 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

10010 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10011 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10012 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10013 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10014 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10015 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10016 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10019 #i‚de‡
GL_NV_fog_di°™˚


10020 
	#GL_NV_fog_di°™˚
 1

	)

10023 #i‚de‡
GL_NV_ãxgí_emboss


10024 
	#GL_NV_ãxgí_emboss
 1

	)

10027 #i‚de‡
GL_NV_bÀnd_squ¨e


10028 
	#GL_NV_bÀnd_squ¨e
 1

	)

10031 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


10032 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

10035 #i‚de‡
GL_MESA_ªsize_buf„rs


10036 
	#GL_MESA_ªsize_buf„rs
 1

	)

10037 #ifde‡
GL_GLEXT_PROTOTYPES


10038 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

10040 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

10043 #i‚de‡
GL_MESA_wödow_pos


10044 
	#GL_MESA_wödow_pos
 1

	)

10045 #ifde‡
GL_GLEXT_PROTOTYPES


10046 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10047 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

10048 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

10049 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

10050 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

10051 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

10052 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

10053 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

10054 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10055 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

10056 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10057 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

10058 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

10059 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

10060 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10061 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

10062 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10063 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

10064 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10065 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

10066 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

10067 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

10068 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10069 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

10071 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10072 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10073 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10074 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10075 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

10076 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10077 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10078 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10079 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10080 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10081 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10082 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10083 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10084 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10085 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10086 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10087 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10088 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10089 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10090 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10091 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10092 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10093 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10094 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10097 #i‚de‡
GL_IBM_cuŒ_vîãx


10098 
	#GL_IBM_cuŒ_vîãx
 1

	)

10101 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


10102 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

10103 #ifde‡
GL_GLEXT_PROTOTYPES


10104 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

10105 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

10107 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

10108 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

10111 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


10112 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

10113 #ifde‡
GL_GLEXT_PROTOTYPES


10114 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10115 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10116 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
* *
poöãr
, GLöà
±r°ride
);

10117 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10118 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10119 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10120 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10121 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10123 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10124 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10125 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

10126 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10127 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10128 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10129 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10130 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10133 #i‚de‡
GL_SGIX_subßm∂e


10134 
	#GL_SGIX_subßm∂e
 1

	)

10137 #i‚de‡
GL_SGIX_y¸cba


10138 
	#GL_SGIX_y¸cba
 1

	)

10141 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


10142 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

10145 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


10146 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

10149 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


10150 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

10153 #i‚de‡
GL_3DFX_mu…ißm∂e


10154 
	#GL_3DFX_mu…ißm∂e
 1

	)

10157 #i‚de‡
GL_3DFX_tbuf„r


10158 
	#GL_3DFX_tbuf„r
 1

	)

10159 #ifde‡
GL_GLEXT_PROTOTYPES


10160 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

10162 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

10165 #i‚de‡
GL_EXT_mu…ißm∂e


10166 
	#GL_EXT_mu…ißm∂e
 1

	)

10167 #ifde‡
GL_GLEXT_PROTOTYPES


10168 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

10169 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

10171 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

10172 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

10175 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


10176 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

10179 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


10180 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

10183 #i‚de‡
GL_SGIX_ªßm∂e


10184 
	#GL_SGIX_ªßm∂e
 1

	)

10187 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


10188 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

10191 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


10192 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

10193 #ifde‡
GL_GLEXT_PROTOTYPES


10194 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

10196 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

10199 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


10200 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

10201 #ifde‡
GL_GLEXT_PROTOTYPES


10202 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° 
GLvoid
 *
∑øms
);

10204 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

10207 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


10208 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

10211 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


10212 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

10215 #i‚de‡
GL_NV_„n˚


10216 
	#GL_NV_„n˚
 1

	)

10217 #ifde‡
GL_GLEXT_PROTOTYPES


10218 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

10219 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

10220 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

10221 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

10222 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10223 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

10224 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

10226 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

10227 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

10228 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10229 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10230 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10231 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10232 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

10235 #i‚de‡
GL_NV_evÆu©‹s


10236 
	#GL_NV_evÆu©‹s
 1

	)

10237 #ifde‡
GL_GLEXT_PROTOTYPES


10238 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° 
GLvoid
 *
poöts
);

10239 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10240 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10241 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, 
GLvoid
 *
poöts
);

10242 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10243 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10244 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10245 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10246 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

10248 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

10249 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10250 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10251 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

10252 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10253 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10254 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10255 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10256 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

10259 #i‚de‡
GL_NV_∑cked_dïth_°ícû


10260 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

10263 #i‚de‡
GL_NV_ªgi°î_comböîs2


10264 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10265 #ifde‡
GL_GLEXT_PROTOTYPES


10266 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10267 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10269 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10270 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10273 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10274 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10277 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10278 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10281 #i‚de‡
GL_NV_ãxtuª_shadî


10282 
	#GL_NV_ãxtuª_shadî
 1

	)

10285 #i‚de‡
GL_NV_ãxtuª_shadî2


10286 
	#GL_NV_ãxtuª_shadî2
 1

	)

10289 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10290 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10293 #i‚de‡
GL_NV_vîãx_¥ogøm


10294 
	#GL_NV_vîãx_¥ogøm
 1

	)

10295 #ifde‡
GL_GLEXT_PROTOTYPES


10296 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10297 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10298 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10299 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10300 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10301 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10302 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10303 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10304 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10305 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10306 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10307 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10308 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10309 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

10310 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10311 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10312 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10313 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10314 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10315 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10316 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10317 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10318 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10319 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10320 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

10321 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10322 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10323 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10324 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10325 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10326 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10327 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10328 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10329 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10330 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10331 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10332 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10333 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10334 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10335 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10336 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10337 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10338 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10339 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10340 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10341 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10342 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10343 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10344 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10345 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

10346 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10347 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10348 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10349 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10350 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10351 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10352 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10353 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10354 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10355 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10356 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10357 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10358 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10359 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

10361 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10362 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10363 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10364 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10365 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10366 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10367 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10368 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10369 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10370 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10371 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10372 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10373 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10374 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

10375 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10376 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10377 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10378 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10379 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10380 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10381 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10382 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10383 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10384 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10385 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10386 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10387 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10388 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10389 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10390 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10391 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10392 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10393 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10394 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10395 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10396 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10397 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10398 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10401 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10402 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10403 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10404 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10405 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10406 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10407 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10408 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10409 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10410 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10411 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10412 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10413 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10414 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10415 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10416 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10417 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10418 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10419 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10420 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10421 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10422 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10423 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10424 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10427 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


10428 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

10431 #i‚de‡
GL_SGIX_sˇÀbüs_höt


10432 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

10435 #i‚de‡
GL_OML_öãæa˚


10436 
	#GL_OML_öãæa˚
 1

	)

10439 #i‚de‡
GL_OML_subßm∂e


10440 
	#GL_OML_subßm∂e
 1

	)

10443 #i‚de‡
GL_OML_ªßm∂e


10444 
	#GL_OML_ªßm∂e
 1

	)

10447 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


10448 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

10451 #i‚de‡
GL_ATI_ívm≠_bumpm≠


10452 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

10453 #ifde‡
GL_GLEXT_PROTOTYPES


10454 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

10455 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

10456 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

10457 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

10459 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

10460 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

10461 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

10462 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

10465 #i‚de‡
GL_ATI_‰agmít_shadî


10466 
	#GL_ATI_‰agmít_shadî
 1

	)

10467 #ifde‡
GL_GLEXT_PROTOTYPES


10468 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

10469 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

10470 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

10471 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

10472 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

10473 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

10474 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

10475 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

10476 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

10477 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

10478 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

10479 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

10480 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

10481 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

10483 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

10484 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

10485 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

10486 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

10487 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

10488 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

10489 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

10490 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

10491 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

10492 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

10493 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

10494 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

10495 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

10496 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

10499 #i‚de‡
GL_ATI_≤_åüngÀs


10500 
	#GL_ATI_≤_åüngÀs
 1

	)

10501 #ifde‡
GL_GLEXT_PROTOTYPES


10502 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10503 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10505 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10506 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10509 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


10510 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

10511 #ifde‡
GL_GLEXT_PROTOTYPES


10512 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° 
GLvoid
 *
poöãr
, 
GLíum
 
ußge
);

10513 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10514 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° 
GLvoid
 *
poöãr
, 
GLíum
 
¥e£rve
);

10515 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10516 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10517 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10518 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

10519 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10520 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10521 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

10522 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10523 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10525 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

10526 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10527 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

10528 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10529 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10530 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10531 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

10532 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10533 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10534 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

10535 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10536 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10539 #i‚de‡
GL_EXT_vîãx_shadî


10540 
	#GL_EXT_vîãx_shadî
 1

	)

10541 #ifde‡
GL_GLEXT_PROTOTYPES


10542 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

10543 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

10544 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

10545 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

10546 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

10547 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

10548 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

10549 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

10550 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

10551 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

10552 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

10553 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

10554 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

10555 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
addr
);

10556 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
addr
);

10557 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

10558 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

10559 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

10560 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

10561 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

10562 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

10563 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

10564 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

10565 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° 
GLvoid
 *
addr
);

10566 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

10567 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

10568 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

10569 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

10570 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

10571 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

10572 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

10573 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

10574 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10575 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10576 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10577 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLvoid
* *
d©a
);

10578 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10579 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10580 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10581 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10582 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10583 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10585 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

10586 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

10587 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10588 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

10589 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10590 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

10591 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

10592 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

10593 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10594 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10595 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10596 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10597 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

10598 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

10599 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

10600 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

10601 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

10602 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

10603 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

10604 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

10605 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

10606 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

10607 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

10608 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

10609 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10610 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10611 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

10612 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

10613 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

10614 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

10615 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

10616 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

10617 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10618 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10619 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10620 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

10621 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10622 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10623 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10624 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10625 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10626 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10629 #i‚de‡
GL_ATI_vîãx_°ªams


10630 
	#GL_ATI_vîãx_°ªams
 1

	)

10631 #ifde‡
GL_GLEXT_PROTOTYPES


10632 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

10633 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10634 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

10635 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10636 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

10637 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10638 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

10639 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10640 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10641 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10642 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

10643 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10644 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10645 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10646 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10647 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10648 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10649 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10650 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

10651 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10652 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10653 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10654 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10655 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10656 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10657 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10658 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

10659 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10660 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10661 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10662 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10663 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10664 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

10665 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

10666 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

10667 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10668 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

10669 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10670 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

10671 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10672 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

10673 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10674 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

10675 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10676 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10678 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

10679 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10680 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

10681 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10682 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

10683 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10684 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

10685 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10686 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10687 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10688 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

10689 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10690 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10691 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10692 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10693 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10694 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10695 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10696 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10697 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10698 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10699 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10700 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10701 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10702 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10703 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10704 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10705 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10706 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10707 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10708 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10709 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10710 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

10711 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

10712 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

10713 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10714 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

10715 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10716 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

10717 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10718 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

10719 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10720 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

10721 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10722 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10725 #i‚de‡
GL_ATI_ñemít_¨øy


10726 
	#GL_ATI_ñemít_¨øy
 1

	)

10727 #ifde‡
GL_GLEXT_PROTOTYPES


10728 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
poöãr
);

10729 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

10730 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

10732 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10733 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

10734 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

10737 #i‚de‡
GL_SUN_mesh_¨øy


10738 
	#GL_SUN_mesh_¨øy
 1

	)

10739 #ifde‡
GL_GLEXT_PROTOTYPES


10740 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

10742 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

10745 #i‚de‡
GL_SUN_¶i˚_accum


10746 
	#GL_SUN_¶i˚_accum
 1

	)

10749 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


10750 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

10753 #i‚de‡
GL_NV_dïth_˛amp


10754 
	#GL_NV_dïth_˛amp
 1

	)

10757 #i‚de‡
GL_NV_oc˛usi⁄_quîy


10758 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

10759 #ifde‡
GL_GLEXT_PROTOTYPES


10760 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10761 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10762 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

10763 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

10764 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

10765 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10766 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10768 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10769 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10770 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

10771 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

10772 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

10773 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10774 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10777 #i‚de‡
GL_NV_poöt_•rôe


10778 
	#GL_NV_poöt_•rôe
 1

	)

10779 #ifde‡
GL_GLEXT_PROTOTYPES


10780 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10781 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10783 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10784 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10787 #i‚de‡
GL_NV_ãxtuª_shadî3


10788 
	#GL_NV_ãxtuª_shadî3
 1

	)

10791 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


10792 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

10795 #i‚de‡
GL_EXT_shadow_funcs


10796 
	#GL_EXT_shadow_funcs
 1

	)

10799 #i‚de‡
GL_EXT_°ícû_two_side


10800 
	#GL_EXT_°ícû_two_side
 1

	)

10801 #ifde‡
GL_GLEXT_PROTOTYPES


10802 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

10804 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

10807 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


10808 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

10811 #i‚de‡
GL_APPLE_˛õ¡_°‹age


10812 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

10815 #i‚de‡
GL_APPLE_ñemít_¨øy


10816 
	#GL_APPLE_ñemít_¨øy
 1

	)

10817 #ifde‡
GL_GLEXT_PROTOTYPES


10818 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
poöãr
);

10819 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

10820 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

10821 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

10822 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

10824 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10825 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10826 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10827 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

10828 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

10831 #i‚de‡
GL_APPLE_„n˚


10832 
	#GL_APPLE_„n˚
 1

	)

10833 #ifde‡
GL_GLEXT_PROTOTYPES


10834 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

10835 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

10836 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

10837 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

10838 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

10839 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

10840 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

10841 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

10843 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

10844 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

10845 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10846 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10847 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10848 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10849 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

10850 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

10853 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


10854 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

10855 #ifde‡
GL_GLEXT_PROTOTYPES


10856 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

10857 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

10858 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

10859 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

10861 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

10862 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

10863 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

10864 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

10867 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


10868 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

10869 #ifde‡
GL_GLEXT_PROTOTYPES


10870 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, 
GLvoid
 *
poöãr
);

10871 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, 
GLvoid
 *
poöãr
);

10872 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10874 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

10875 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

10876 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10879 #i‚de‡
GL_APPLE_ycb¸_422


10880 
	#GL_APPLE_ycb¸_422
 1

	)

10883 #i‚de‡
GL_S3_s3tc


10884 
	#GL_S3_s3tc
 1

	)

10887 #i‚de‡
GL_ATI_døw_buf„rs


10888 
	#GL_ATI_døw_buf„rs
 1

	)

10889 #ifde‡
GL_GLEXT_PROTOTYPES


10890 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

10892 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

10895 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


10896 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

10902 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


10903 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

10906 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


10907 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

10910 #i‚de‡
GL_NV_Êﬂt_buf„r


10911 
	#GL_NV_Êﬂt_buf„r
 1

	)

10914 #i‚de‡
GL_NV_‰agmít_¥ogøm


10915 
	#GL_NV_‰agmít_¥ogøm
 1

	)

10917 #ifde‡
GL_GLEXT_PROTOTYPES


10918 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10919 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10920 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

10921 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

10922 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

10923 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

10925 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10926 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10927 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10928 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10929 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

10930 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

10933 #i‚de‡
GL_NV_hÆf_Êﬂt


10934 
	#GL_NV_hÆf_Êﬂt
 1

	)

10935 #ifde‡
GL_GLEXT_PROTOTYPES


10936 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

10937 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10938 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

10939 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10940 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

10941 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10942 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

10943 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10944 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

10945 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10946 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

10947 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10948 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

10949 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10950 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

10951 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10952 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

10953 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10954 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

10955 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10956 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

10957 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10958 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

10959 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10960 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

10961 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10962 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

10963 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10964 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

10965 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

10966 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

10967 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10968 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

10969 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

10970 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

10971 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10972 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

10973 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10974 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

10975 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10976 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

10977 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10978 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10979 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10980 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10981 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10983 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

10984 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10985 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

10986 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10987 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

10988 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10989 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

10990 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10991 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

10992 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10993 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

10994 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10995 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

10996 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10997 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

10998 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10999 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

11000 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

11001 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

11002 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

11003 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

11004 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11005 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

11006 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11007 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

11008 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11009 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

11010 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11011 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

11012 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

11013 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

11014 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

11015 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

11016 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

11017 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

11018 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11019 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

11020 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11021 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

11022 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11023 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

11024 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11025 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11026 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11027 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11028 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

11031 #i‚de‡
GL_NV_pixñ_d©a_ønge


11032 
	#GL_NV_pixñ_d©a_ønge
 1

	)

11033 #ifde‡
GL_GLEXT_PROTOTYPES


11034 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

11035 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

11037 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11038 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

11041 #i‚de‡
GL_NV_¥imôive_ª°¨t


11042 
	#GL_NV_¥imôive_ª°¨t
 1

	)

11043 #ifde‡
GL_GLEXT_PROTOTYPES


11044 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

11045 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

11047 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

11048 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

11051 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


11052 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

11055 #i‚de‡
GL_NV_vîãx_¥ogøm2


11056 
	#GL_NV_vîãx_¥ogøm2
 1

	)

11059 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


11060 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

11061 #ifde‡
GL_GLEXT_PROTOTYPES


11062 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

11063 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

11065 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

11066 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

11069 #i‚de‡
GL_ATI_£∑øã_°ícû


11070 
	#GL_ATI_£∑øã_°ícû
 1

	)

11071 #ifde‡
GL_GLEXT_PROTOTYPES


11072 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

11073 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

11075 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

11076 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

11079 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


11080 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

11081 #ifde‡
GL_GLEXT_PROTOTYPES


11082 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

11083 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11084 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11086 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

11087 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11088 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11091 #i‚de‡
GL_OES_ªad_f‹m©


11092 
	#GL_OES_ªad_f‹m©
 1

	)

11095 #i‚de‡
GL_EXT_dïth_bounds_ã°


11096 
	#GL_EXT_dïth_bounds_ã°
 1

	)

11097 #ifde‡
GL_GLEXT_PROTOTYPES


11098 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

11100 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

11103 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


11104 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

11107 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


11108 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

11109 #ifde‡
GL_GLEXT_PROTOTYPES


11110 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

11112 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

11115 #i‚de‡
GL_MESA_∑ck_övît


11116 
	#GL_MESA_∑ck_övît
 1

	)

11119 #i‚de‡
GL_MESA_ycb¸_ãxtuª


11120 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

11123 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


11124 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

11127 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


11128 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

11131 #i‚de‡
GL_NV_‰agmít_¥ogøm2


11132 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

11135 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


11136 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

11139 #i‚de‡
GL_NV_vîãx_¥ogøm3


11140 
	#GL_NV_vîãx_¥ogøm3
 1

	)

11143 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


11144 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

11145 #ifde‡
GL_GLEXT_PROTOTYPES


11146 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

11147 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11148 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

11149 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

11150 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

11151 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11152 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

11153 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

11154 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

11155 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

11156 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

11157 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11158 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11159 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

11160 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

11161 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11162 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

11164 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

11165 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11166 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

11167 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

11168 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11169 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11170 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

11171 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

11172 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

11173 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

11174 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

11175 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11176 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11177 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

11178 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

11179 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11180 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

11183 #i‚de‡
GL_GREMEDY_°rög_m¨kî


11184 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

11185 #ifde‡
GL_GLEXT_PROTOTYPES


11186 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

11188 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

11191 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


11192 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

11195 #i‚de‡
GL_EXT_°ícû_˛ór_èg


11196 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

11197 #ifde‡
GL_GLEXT_PROTOTYPES


11198 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

11200 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

11203 #i‚de‡
GL_EXT_ãxtuª_sRGB


11204 
	#GL_EXT_ãxtuª_sRGB
 1

	)

11207 #i‚de‡
GL_EXT_‰amebuf„r_blô


11208 
	#GL_EXT_‰amebuf„r_blô
 1

	)

11209 #ifde‡
GL_GLEXT_PROTOTYPES


11210 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

11212 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

11215 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


11216 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

11217 #ifde‡
GL_GLEXT_PROTOTYPES


11218 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11220 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11223 #i‚de‡
GL_MESAX_ãxtuª_°ack


11224 
	#GL_MESAX_ãxtuª_°ack
 1

	)

11227 #i‚de‡
GL_EXT_timî_quîy


11228 
	#GL_EXT_timî_quîy
 1

	)

11229 #ifde‡
GL_GLEXT_PROTOTYPES


11230 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

11231 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

11233 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

11234 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

11237 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


11238 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

11239 #ifde‡
GL_GLEXT_PROTOTYPES


11240 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11241 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11243 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11244 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11247 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


11248 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

11249 #ifde‡
GL_GLEXT_PROTOTYPES


11250 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11251 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11253 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11254 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11257 #i‚de‡
GL_NV_gpu_¥ogøm4


11258 
	#GL_NV_gpu_¥ogøm4
 1

	)

11259 #ifde‡
GL_GLEXT_PROTOTYPES


11260 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11261 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

11262 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11263 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11264 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

11265 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11266 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11267 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

11268 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11269 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11270 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

11271 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11272 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

11273 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

11274 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

11275 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

11277 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11278 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11279 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11280 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11281 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11282 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11283 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11284 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11285 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11286 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11287 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11288 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11289 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

11290 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

11291 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

11292 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

11295 #i‚de‡
GL_NV_geomëry_¥ogøm4


11296 
	#GL_NV_geomëry_¥ogøm4
 1

	)

11297 #ifde‡
GL_GLEXT_PROTOTYPES


11298 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

11299 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11300 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

11301 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

11303 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

11304 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11305 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

11306 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

11309 #i‚de‡
GL_EXT_geomëry_shadî4


11310 
	#GL_EXT_geomëry_shadî4
 1

	)

11311 #ifde‡
GL_GLEXT_PROTOTYPES


11312 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

11314 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

11317 #i‚de‡
GL_NV_vîãx_¥ogøm4


11318 
	#GL_NV_vîãx_¥ogøm4
 1

	)

11319 #ifde‡
GL_GLEXT_PROTOTYPES


11320 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11321 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11322 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11323 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11324 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11325 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11326 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11327 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11328 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11329 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11330 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11331 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11332 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11333 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11334 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11335 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11336 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11337 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11338 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11339 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11340 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

11341 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11342 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11344 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

11345 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

11346 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11347 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11348 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

11349 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

11350 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

11351 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11352 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11353 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11354 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11355 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11356 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11357 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11358 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11359 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11360 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

11361 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

11362 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

11363 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

11364 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11365 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11366 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11369 #i‚de‡
GL_EXT_gpu_shadî4


11370 
	#GL_EXT_gpu_shadî4
 1

	)

11371 #ifde‡
GL_GLEXT_PROTOTYPES


11372 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

11373 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

11374 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11375 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

11376 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

11377 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

11378 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

11379 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11380 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11381 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11382 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11384 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

11385 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

11386 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11387 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

11388 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

11389 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

11390 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

11391 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11392 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11393 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11394 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11397 #i‚de‡
GL_EXT_døw_ö°™˚d


11398 
	#GL_EXT_døw_ö°™˚d
 1

	)

11399 #ifde‡
GL_GLEXT_PROTOTYPES


11400 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

11401 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

11403 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

11404 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

11407 #i‚de‡
GL_EXT_∑cked_Êﬂt


11408 
	#GL_EXT_∑cked_Êﬂt
 1

	)

11411 #i‚de‡
GL_EXT_ãxtuª_¨øy


11412 
	#GL_EXT_ãxtuª_¨øy
 1

	)

11415 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


11416 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

11417 #ifde‡
GL_GLEXT_PROTOTYPES


11418 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

11420 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

11423 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


11424 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

11427 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


11428 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

11431 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


11432 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

11435 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


11436 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

11437 #ifde‡
GL_GLEXT_PROTOTYPES


11438 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

11439 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

11440 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

11442 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

11443 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

11444 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

11447 #i‚de‡
GL_NV_‰agmít_¥ogøm4


11448 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

11451 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


11452 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

11453 #ifde‡
GL_GLEXT_PROTOTYPES


11454 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11456 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11459 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


11460 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

11463 #i‚de‡
GL_NV_geomëry_shadî4


11464 
	#GL_NV_geomëry_shadî4
 1

	)

11467 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


11468 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

11469 #ifde‡
GL_GLEXT_PROTOTYPES


11470 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11471 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11472 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11474 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11475 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11476 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11479 #i‚de‡
GL_EXT_døw_buf„rs2


11480 
	#GL_EXT_døw_buf„rs2
 1

	)

11481 #ifde‡
GL_GLEXT_PROTOTYPES


11482 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

11483 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

11484 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

11485 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11486 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11487 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11489 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

11490 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

11491 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

11492 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11493 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11494 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11497 #i‚de‡
GL_NV_å™sf‹m_„edback


11498 
	#GL_NV_å™sf‹m_„edback
 1

	)

11499 #ifde‡
GL_GLEXT_PROTOTYPES


11500 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

11501 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

11502 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

11503 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11504 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

11505 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

11506 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

11507 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11508 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11509 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

11510 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

11511 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

11513 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

11514 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

11515 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

11516 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11517 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

11518 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

11519 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

11520 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11521 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11522 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

11523 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

11524 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

11527 #i‚de‡
GL_EXT_bödabÀ_unif‹m


11528 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

11529 #ifde‡
GL_GLEXT_PROTOTYPES


11530 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

11531 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

11532 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

11534 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

11535 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

11536 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

11539 #i‚de‡
GL_EXT_ãxtuª_öãgî


11540 
	#GL_EXT_ãxtuª_öãgî
 1

	)

11541 #ifde‡
GL_GLEXT_PROTOTYPES


11542 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11543 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

11544 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11545 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

11546 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

11547 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

11549 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11550 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

11551 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11552 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

11553 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

11554 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

11557 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


11558 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

11559 #ifde‡
GL_GLEXT_PROTOTYPES


11560 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

11562 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

11565 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


11566 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

11567 #ifde‡
GL_GLEXT_PROTOTYPES


11568 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

11569 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

11571 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

11572 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

11575 #i‚de‡
GL_NV_¥e£¡_video


11576 
	#GL_NV_¥e£¡_video
 1

	)

11577 #ifde‡
GL_GLEXT_PROTOTYPES


11578 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

11579 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

11580 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11581 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11582 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

11583 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

11585 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

11586 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

11587 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11588 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11589 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

11590 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

11593 #i‚de‡
GL_EXT_å™sf‹m_„edback


11594 
	#GL_EXT_å™sf‹m_„edback
 1

	)

11595 #ifde‡
GL_GLEXT_PROTOTYPES


11596 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

11597 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

11598 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11599 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

11600 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

11601 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* *
v¨yögs
, 
GLíum
 
buf„rMode
);

11602 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

11604 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

11605 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

11606 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11607 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

11608 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

11609 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

11610 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

11613 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


11614 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

11615 #ifde‡
GL_GLEXT_PROTOTYPES


11616 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

11617 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

11618 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11619 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11620 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11621 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11622 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

11623 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11624 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11625 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11626 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11627 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11628 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11629 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

11630 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

11631 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

11632 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

11633 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11634 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11635 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11636 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11637 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11638 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11639 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11640 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11641 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11642 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11643 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11644 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11645 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

11646 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

11647 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

11648 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11649 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

11650 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11651 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11652 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11653 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

11654 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11655 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11656 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11657 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11658 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11659 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11660 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11661 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11662 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11663 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11664 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11665 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

11666 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

11667 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

11668 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11669 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

11670 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11671 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11672 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11673 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

11674 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11675 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11676 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11677 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

11678 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

11679 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

11680 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

11681 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11682 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11683 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11684 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11685 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

11686 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11687 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11688 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11689 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11690 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11691 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11692 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11693 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11694 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11695 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11696 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

11697 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

11698 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLvoid
* *
d©a
);

11699 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11700 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11701 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11702 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11703 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11704 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11705 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
);

11706 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11707 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11708 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11709 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11710 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11711 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11712 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
);

11713 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

11714 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

11715 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

11716 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11717 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

11718 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

11719 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

11720 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11721 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 *
°rög
);

11722 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11723 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11724 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

11725 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11726 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11727 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

11728 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11729 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

11730 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

11731 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11732 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

11733 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11734 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

11735 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11736 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

11737 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11738 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

11739 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

11740 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

11741 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

11742 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

11743 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

11744 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

11745 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

11746 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

11747 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11748 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11749 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11750 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11751 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11752 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11753 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11754 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11755 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11756 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11757 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11758 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11759 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11760 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11761 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11762 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11763 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11764 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

11765 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

11766 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

11767 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

11768 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11769 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11770 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11771 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11772 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, 
GLíum
 
ußge
);

11773 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

11774 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

11775 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

11776 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

11777 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

11778 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

11779 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11780 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

11781 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLvoid
 *
d©a
);

11782 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

11783 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

11784 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

11785 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11786 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

11787 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11788 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11789 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

11790 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

11791 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11792 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

11793 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

11794 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

11795 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

11796 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

11797 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11798 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11799 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11800 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11801 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

11802 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

11803 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

11804 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11805 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

11806 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

11807 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11808 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

11809 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11810 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11811 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11812 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11813 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11814 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11815 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11816 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11817 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11818 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11819 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11820 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11821 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11823 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

11824 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

11825 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11826 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11827 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11828 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11829 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

11830 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11831 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11832 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11833 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11834 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11835 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11836 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

11837 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

11838 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

11839 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

11840 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11841 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11842 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11843 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11844 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11845 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11846 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11847 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11848 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11849 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11850 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11851 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11852 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

11853 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

11854 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11855 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11856 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

11857 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11858 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11859 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11860 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

11861 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11862 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11863 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11864 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11865 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11866 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11867 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11868 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11869 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11870 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11871 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11872 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

11873 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

11874 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11875 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11876 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

11877 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11878 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11879 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11880 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

11881 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11882 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11883 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11884 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

11885 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

11886 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

11887 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11888 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11889 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11890 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11891 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11892 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

11893 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11894 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11895 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11896 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11897 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11898 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11899 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11900 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11901 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11902 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11903 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

11904 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

11905 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
* *
	td©a
);

11906 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11907 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11908 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11909 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11910 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11911 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11912 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

11913 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11914 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11915 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11916 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11917 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11918 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11919 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

11920 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

11921 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11922 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11923 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11924 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11925 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

11926 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

11927 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11928 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

11929 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11930 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11931 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11932 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11933 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11934 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

11935 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11936 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

11937 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

11938 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11939 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

11940 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11941 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

11942 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11943 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

11944 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11945 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

11946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

11947 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

11948 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

11949 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

11950 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

11951 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

11952 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

11953 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

11954 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11955 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11956 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11957 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11958 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11959 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11960 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11961 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11962 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11963 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11964 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11965 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11966 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11967 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11968 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11969 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11970 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11971 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

11972 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

11973 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

11974 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

11975 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11976 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11977 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11978 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11979 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, 
	tGLíum
 
	tußge
);

11980 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

11981 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

11982 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

11983 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

11984 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

11985 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

11986 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11987 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

11988 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

11989 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

11990 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

11991 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11992 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11993 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

11994 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11995 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11996 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

11997 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

11998 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11999 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

12000 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

12001 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

12002 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

12003 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

12004 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12005 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

12006 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

12007 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

12008 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

12009 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

12010 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

12011 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

12012 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

12013 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

12014 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

12015 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

12016 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12017 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12018 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12019 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12020 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12021 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12022 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12023 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12024 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12025 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12026 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12027 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12028 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

12031 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


12032 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

12035 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


12036 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

12039 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


12040 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

12041 #ifde‡
GL_GLEXT_PROTOTYPES


12042 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

12043 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

12044 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

12046 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

12047 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

12048 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

12051 #i‚de‡
GL_NV_å™sf‹m_„edback2


12052 
	#GL_NV_å™sf‹m_„edback2
 1

	)

12053 #ifde‡
GL_GLEXT_PROTOTYPES


12054 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

12055 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

12056 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

12057 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

12058 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

12059 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

12060 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

12062 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

12063 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

12064 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

12065 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

12066 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

12067 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

12068 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

12071 #i‚de‡
GL_ATI_memöfo


12072 
	#GL_ATI_memöfo
 1

	)

12075 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


12076 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

12077 #ifde‡
GL_GLEXT_PROTOTYPES


12078 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

12079 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

12080 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

12081 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

12082 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

12083 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

12084 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

12085 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

12086 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

12087 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

12088 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

12090 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

12091 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

12092 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

12093 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

12094 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

12095 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

12096 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

12097 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

12098 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

12099 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

12100 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

12103 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


12104 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

12107 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


12108 
	#GL_AMD_vîãx_shadî_ãs£œt‹
 1

	)

12109 #ifde‡
GL_GLEXT_PROTOTYPES


12110 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

12111 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

12113 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

12114 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

12117 #i‚de‡
GL_EXT_¥ovokög_vîãx


12118 
	#GL_EXT_¥ovokög_vîãx
 1

	)

12119 #ifde‡
GL_GLEXT_PROTOTYPES


12120 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

12122 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

12125 #i‚de‡
GL_EXT_ãxtuª_¢‹m


12126 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

12129 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


12130 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

12131 #ifde‡
GL_GLEXT_PROTOTYPES


12132 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

12133 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

12134 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

12135 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

12137 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

12138 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

12139 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

12140 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

12143 #i‚de‡
GL_APPLE_ãxtuª_ønge


12144 
	#GL_APPLE_ãxtuª_ønge
 1

	)

12145 #ifde‡
GL_GLEXT_PROTOTYPES


12146 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

12147 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

12149 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

12150 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

12153 #i‚de‡
GL_APPLE_Êﬂt_pixñs


12154 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

12157 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


12158 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

12159 #ifde‡
GL_GLEXT_PROTOTYPES


12160 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12161 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12162 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12163 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

12164 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

12165 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

12166 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

12168 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12169 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12170 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12171 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

12172 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

12173 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

12174 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

12177 #i‚de‡
GL_APPLE_aux_dïth_°ícû


12178 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

12181 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


12182 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

12183 #ifde‡
GL_GLEXT_PROTOTYPES


12184 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

12185 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

12186 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

12188 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

12189 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

12190 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12193 #i‚de‡
GL_APPLE_row_byãs


12194 
	#GL_APPLE_row_byãs
 1

	)

12197 #i‚de‡
GL_APPLE_rgb_422


12198 
	#GL_APPLE_rgb_422
 1

	)

12201 #i‚de‡
GL_NV_video_ˇ±uª


12202 
	#GL_NV_video_ˇ±uª
 1

	)

12203 #ifde‡
GL_GLEXT_PROTOTYPES


12204 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

12205 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

12206 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

12207 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

12208 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

12209 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

12210 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

12211 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

12212 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

12213 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

12214 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

12215 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

12217 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12218 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

12219 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

12220 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12221 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12222 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12223 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

12224 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

12225 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

12226 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

12227 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

12228 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

12231 #i‚de‡
GL_NV_c›y_image


12232 
	#GL_NV_c›y_image
 1

	)

12233 #ifde‡
GL_GLEXT_PROTOTYPES


12234 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

12236 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

12239 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


12240 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

12241 #ifde‡
GL_GLEXT_PROTOTYPES


12242 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

12243 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

12244 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

12246 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

12247 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

12248 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

12251 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


12252 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

12255 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


12256 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

12257 #ifde‡
GL_GLEXT_PROTOTYPES


12258 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

12259 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

12260 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

12261 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

12262 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

12263 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

12264 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12265 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12266 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

12267 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

12268 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12269 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

12270 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

12271 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12273 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

12274 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12275 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12276 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

12277 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12278 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12279 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12280 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12281 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

12282 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12283 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12284 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

12285 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12286 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12289 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


12290 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

12291 #ifde‡
GL_GLEXT_PROTOTYPES


12292 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

12293 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12294 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12295 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12296 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12297 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12298 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

12299 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12300 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12301 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

12302 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12303 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

12305 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

12306 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12307 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12308 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12309 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12310 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12311 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

12312 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12313 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12314 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

12315 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12316 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

12319 #i‚de‡
GL_NV_ãxtuª_b¨rõr


12320 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

12321 #ifde‡
GL_GLEXT_PROTOTYPES


12322 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

12324 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

12327 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


12328 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

12331 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


12332 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

12335 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


12336 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

12339 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


12340 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

12341 #ifde‡
GL_GLEXT_PROTOTYPES


12342 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

12343 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

12345 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

12346 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

12349 #i‚de‡
GL_EXT_vîãx_©åib_64bô


12350 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

12351 #ifde‡
GL_GLEXT_PROTOTYPES


12352 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

12353 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

12354 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

12355 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

12356 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12357 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12358 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12359 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12360 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

12361 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

12362 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

12364 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

12365 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

12366 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

12367 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

12368 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12369 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12370 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12371 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12372 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

12373 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

12374 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

12377 #i‚de‡
GL_NV_gpu_¥ogøm5


12378 
	#GL_NV_gpu_¥ogøm5
 1

	)

12379 #ifde‡
GL_GLEXT_PROTOTYPES


12380 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

12381 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

12383 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

12384 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

12387 #i‚de‡
GL_NV_gpu_shadî5


12388 
	#GL_NV_gpu_shadî5
 1

	)

12389 #ifde‡
GL_GLEXT_PROTOTYPES


12390 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

12391 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12392 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12393 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12394 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12395 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12396 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12397 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12398 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

12399 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12400 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12401 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12402 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12403 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12404 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12405 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12406 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

12407 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

12408 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12409 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12410 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12411 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12412 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12413 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12414 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12415 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

12416 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12417 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12418 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12419 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12420 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12421 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12422 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12424 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

12425 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12426 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12427 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12428 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12429 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12430 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12431 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12432 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

12433 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12434 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12435 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12436 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12437 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12438 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12439 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12440 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

12441 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

12442 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12443 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12444 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12445 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12446 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12447 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12448 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12449 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

12450 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12451 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12452 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12453 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12454 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12455 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12456 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12459 #i‚de‡
GL_NV_shadî_buf„r_°‹e


12460 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

12463 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


12464 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

12467 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


12468 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

12469 #ifde‡
GL_GLEXT_PROTOTYPES


12470 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

12471 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12472 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12473 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12474 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12475 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12476 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12477 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12478 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

12479 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12480 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12481 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12482 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12483 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12484 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12485 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12486 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

12487 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12488 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12490 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

12491 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12492 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12494 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12495 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12496 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12497 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12498 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

12499 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12500 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12501 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12502 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12503 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12504 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12505 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12506 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

12507 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12508 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12511 #i‚de‡
GL_NV_mu…ißm∂e_covîage


12512 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

12515 #i‚de‡
GL_AMD_«me_gí_dñëe


12516 
	#GL_AMD_«me_gí_dñëe
 1

	)

12517 #ifde‡
GL_GLEXT_PROTOTYPES


12518 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

12519 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

12520 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

12522 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

12523 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

12524 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

12527 #i‚de‡
GL_AMD_debug_ouçut


12528 
	#GL_AMD_debug_ouçut
 1

	)

12529 #ifde‡
GL_GLEXT_PROTOTYPES


12530 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

12531 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

12532 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, 
GLvoid
 *
u£rP¨am
);

12533 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

12535 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

12536 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

12537 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, 
	tGLvoid
 *
	tu£rP¨am
);

12538 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

12541 #i‚de‡
GL_NV_vd∑u_öãr›


12542 
	#GL_NV_vd∑u_öãr›
 1

	)

12543 #ifde‡
GL_GLEXT_PROTOTYPES


12544 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° 
GLvoid
 *
vdpDevi˚
, c⁄° GLvoid *
gëProcAddªss
);

12545 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

12546 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (
GLvoid
 *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

12547 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (
GLvoid
 *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

12548 
GLAPI
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

12549 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

12550 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

12551 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

12552 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

12553 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

12555 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° 
	tGLvoid
 *
	tvdpDevi˚
, c⁄° GLvoid *
	tgëProcAddªss
);

12556 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

12557 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(
	tGLvoid
 *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12558 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(
	tGLvoid
 *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12559 (
APIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12560 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12561 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

12562 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

12563 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

12564 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

12567 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


12568 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

12571 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


12572 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

12575 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


12576 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

12579 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


12580 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

12581 #ifde‡
GL_GLEXT_PROTOTYPES


12582 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12583 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12584 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12585 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12586 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12587 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12589 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12590 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12591 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12592 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12593 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12594 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12597 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


12598 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

12601 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


12602 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

12603 #ifde‡
GL_GLEXT_PROTOTYPES


12604 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

12606 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

12609 #i‚de‡
GL_EXT_x11_sync_obje˘


12610 
	#GL_EXT_x11_sync_obje˘
 1

	)

12611 #ifde‡
GL_GLEXT_PROTOTYPES


12612 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

12614 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

12617 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


12618 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

12619 #ifde‡
GL_GLEXT_PROTOTYPES


12620 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° 
GLvoid
 *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

12621 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

12623 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

12624 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

12627 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


12628 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

12631 #i‚de‡
GL_NV_∑th_ªndîög


12632 
	#GL_NV_∑th_ªndîög
 1

	)

12633 #ifde‡
GL_GLEXT_PROTOTYPES


12634 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

12635 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

12636 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

12637 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12638 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12639 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12640 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12641 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
∑thSåög
);

12642 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° 
GLvoid
 *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° GLvoid *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

12643 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° 
GLvoid
 *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

12644 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

12645 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

12646 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

12647 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12648 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

12649 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

12650 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

12651 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

12652 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

12653 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

12654 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

12655 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

12656 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

12657 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12658 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12659 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

12660 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

12661 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

12662 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

12663 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

12664 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

12665 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12666 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12667 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

12668 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12669 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

12670 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

12671 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

12672 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

12673 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

12674 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

12675 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

12676 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12677 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

12678 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12679 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12680 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12681 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

12682 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

12684 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

12685 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

12686 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

12687 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12688 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12689 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12690 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12691 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	t∑thSåög
);

12692 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° 
	tGLvoid
 *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° GLvoid *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12693 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° 
	tGLvoid
 *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12694 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

12695 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

12696 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

12697 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12698 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

12699 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

12700 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

12701 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

12702 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

12703 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

12704 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

12705 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

12706 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

12707 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12708 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12709 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

12710 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

12711 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

12712 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

12713 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12714 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12715 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12716 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12717 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12718 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12719 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

12720 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

12721 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

12722 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12723 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12724 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

12725 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12726 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12727 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12728 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12729 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12730 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12731 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

12732 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

12735 #i‚de‡
GL_AMD_pö√d_mem‹y


12736 
	#GL_AMD_pö√d_mem‹y
 1

	)

12739 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


12740 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

12741 #ifde‡
GL_GLEXT_PROTOTYPES


12742 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

12744 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

12747 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


12748 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

12751 #i‚de‡
GL_AMD_vîãx_shadî_œyî


12752 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

12755 #i‚de‡
GL_NV_bödÀss_ãxtuª


12756 
	#GL_NV_bödÀss_ãxtuª
 1

	)

12757 #ifde‡
GL_GLEXT_PROTOTYPES


12758 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

12759 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

12760 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12761 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

12762 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

12763 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

12764 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

12765 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

12766 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

12767 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

12768 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

12769 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12770 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12772 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

12773 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

12774 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12775 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12776 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

12777 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

12778 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12779 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

12780 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

12781 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

12782 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

12783 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12784 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12787 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


12788 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

12791 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


12792 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

12796 #ifde‡
__˝lu•lus


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fenv.h

19 #i‚de‡
_FENV_H


23 
	~<bôs/w‹dsize.h
>

30 
	mFE_INVALID
 = 0x01,

31 
	#FE_INVALID
 
FE_INVALID


	)

32 
	m__FE_DENORM
 = 0x02,

33 
	mFE_DIVBYZERO
 = 0x04,

34 
	#FE_DIVBYZERO
 
FE_DIVBYZERO


	)

35 
	mFE_OVERFLOW
 = 0x08,

36 
	#FE_OVERFLOW
 
FE_OVERFLOW


	)

37 
	mFE_UNDERFLOW
 = 0x10,

38 
	#FE_UNDERFLOW
 
FE_UNDERFLOW


	)

39 
	mFE_INEXACT
 = 0x20

40 
	#FE_INEXACT
 
FE_INEXACT


	)

43 
	#FE_ALL_EXCEPT
 \

44 (
FE_INEXACT
 | 
FE_DIVBYZERO
 | 
FE_UNDERFLOW
 | 
FE_OVERFLOW
 | 
FE_INVALID
)

	)

51 
	mFE_TONEAREST
 = 0,

52 
	#FE_TONEAREST
 
FE_TONEAREST


	)

53 
	mFE_DOWNWARD
 = 0x400,

54 
	#FE_DOWNWARD
 
FE_DOWNWARD


	)

55 
	mFE_UPWARD
 = 0x800,

56 
	#FE_UPWARD
 
FE_UPWARD


	)

57 
	mFE_TOWARDZERO
 = 0xc00

58 
	#FE_TOWARDZERO
 
FE_TOWARDZERO


	)

63 
	t„x˚±_t
;

72 
	m__c⁄åﬁ_w‹d
;

73 
	m__unu£d1
;

74 
	m__°©us_w‹d
;

75 
	m__unu£d2
;

76 
	m__ègs
;

77 
	m__unu£d3
;

78 
	m__eù
;

79 
	m__cs_£À˘‹
;

80 
	m__›code
:11;

81 
	m__unu£d4
:5;

82 
	m__d©a_off£t
;

83 
	m__d©a_£À˘‹
;

84 
	m__unu£d5
;

85 #i‡
__WORDSIZE
 == 64

86 
	m__mxc§
;

89 
	t„nv_t
;

92 
	#FE_DFL_ENV
 ((
__c⁄°
 
„nv_t
 *Ë-1)

	)

94 #ifde‡
__USE_GNU


96 
	#FE_NOMASK_ENV
 ((
__c⁄°
 
„nv_t
 *Ë-2)

	)

	@/usr/include/bits/fenvinline.h

4 #i‚de‡
__NO_MATH_INLINES


	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 
	~<bôs/w‹dsize.h
>

27 #i‚de‡
__exã∫_ölöe


28 
	#__MATH_INLINE
 
__ölöe


	)

30 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

34 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

37 
__MATH_INLINE
 

38 
__NTH
 (
	$__signbôf
 (
__x
))

40 #i‡
__WORDSIZE
 == 32

41 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

42  
__u
.
__i
 < 0;

44 
__m
;

45 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

46  
__m
 & 0x8;

48 
	}
}

49 
__MATH_INLINE
 

50 
__NTH
 (
	$__signbô
 (
__x
))

52 #i‡
__WORDSIZE
 == 32

53 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

54  
__u
.
__i
[1] < 0;

56 
__m
;

57 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

58  
__m
 & 0x80;

60 
	}
}

61 
__MATH_INLINE
 

62 
__NTH
 (
	$__signbôl
 (
__x
))

64 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

65  (
__u
.
__i
[2] & 0x8000) != 0;

66 
	}
}

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


24 
	~<bôs/w‹dsize.h
>

26 #i‡
__WORDSIZE
 == 64

27 
	#__SIZEOF_SEM_T
 32

	)

29 
	#__SIZEOF_SEM_T
 16

	)

34 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

39 
	m__size
[
__SIZEOF_SEM_T
];

40 
	m__Æign
;

41 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

15 #ifde‡
Z_PREFIX


16 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

17 
	#deÊ©e
 
z_deÊ©e


	)

18 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

19 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

20 
	#öÊ©e
 
z_öÊ©e


	)

21 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

22 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

23 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

24 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

25 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

26 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

27 
	#deÊ©eBound
 
z_deÊ©eBound


	)

28 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

29 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

30 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

31 
	#öÊ©eSync
 
z_öÊ©eSync


	)

32 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

33 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

34 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

35 
	#öÊ©eBack
 
z_öÊ©eBack


	)

36 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

37 
	#com¥ess
 
z_com¥ess


	)

38 
	#com¥ess2
 
z_com¥ess2


	)

39 
	#com¥essBound
 
z_com¥essBound


	)

40 
	#uncom¥ess
 
z_uncom¥ess


	)

41 
	#adÀr32
 
z_adÀr32


	)

42 
	#¸c32
 
z_¸c32


	)

43 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

44 
	#zEº‹
 
z_zEº‹


	)

46 
	#Æloc_func
 
z_Æloc_func


	)

47 
	#‰ì_func
 
z_‰ì_func


	)

48 
	#ö_func
 
z_ö_func


	)

49 
	#out_func
 
z_out_func


	)

50 
	#Byã
 
z_Byã


	)

51 
	#uI¡
 
z_uI¡


	)

52 
	#uL⁄g
 
z_uL⁄g


	)

53 
	#Byãf
 
z_Byãf


	)

54 
	#ch¨f
 
z_ch¨f


	)

55 
	#ötf
 
z_ötf


	)

56 
	#uI¡f
 
z_uI¡f


	)

57 
	#uL⁄gf
 
z_uL⁄gf


	)

58 
	#voidpf
 
z_voidpf


	)

59 
	#voidp
 
z_voidp


	)

62 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

63 
	#MSDOS


	)

65 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

66 
	#OS2


	)

68 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

69 
	#WINDOWS


	)

71 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

72 #i‚de‡
WIN32


73 
	#WIN32


	)

76 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

77 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

78 #i‚de‡
SYS16BIT


79 
	#SYS16BIT


	)

88 #ifde‡
SYS16BIT


89 
	#MAXSEG_64K


	)

91 #ifde‡
MSDOS


92 
	#UNALIGNED_OK


	)

95 #ifde‡
__STDC_VERSION__


96 #i‚de‡
STDC


97 
	#STDC


	)

99 #i‡
__STDC_VERSION__
 >= 199901L

100 #i‚de‡
STDC99


101 
	#STDC99


	)

105 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

106 
	#STDC


	)

108 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

109 
	#STDC


	)

111 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

112 
	#STDC


	)

114 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

115 
	#STDC


	)

118 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

119 
	#STDC


	)

122 #i‚de‡
STDC


124 c⁄°

	)

129 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

130 
	#NO_DUMMY_DECL


	)

134 #i‚de‡
MAX_MEM_LEVEL


135 #ifde‡
MAXSEG_64K


136 
	#MAX_MEM_LEVEL
 8

	)

138 
	#MAX_MEM_LEVEL
 9

	)

147 #i‚de‡
MAX_WBITS


148 
	#MAX_WBITS
 15

	)

166 #i‚de‡
OF


167 #ifde‡
STDC


168 
	#OF
(
¨gs
Ë
	)
args

170 
	#OF
(
¨gs
Ë()

	)

180 #ifde‡
SYS16BIT


181 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

183 
	#SMALL_MEDIUM


	)

184 #ifde‡
_MSC_VER


185 
	#FAR
 
_Ár


	)

187 
	#FAR
 
Ár


	)

190 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

192 
	#SMALL_MEDIUM


	)

193 #ifde‡
__BORLANDC__


194 
	#FAR
 
_Ár


	)

196 
	#FAR
 
Ár


	)

201 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

205 #ifde‡
ZLIB_DLL


206 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

207 #ifde‡
ZLIB_INTERNAL


208 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

210 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

218 #ifde‡
ZLIB_WINAPI


219 #ifde‡
FAR


220 #unde‡
FAR


222 
	~<wödows.h
>

225 
	#ZEXPORT
 
WINAPI


	)

226 #ifde‡
WIN32


227 
	#ZEXPORTVA
 
WINAPIV


	)

229 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

234 #i‡
deföed
 (
__BEOS__
)

235 #ifde‡
ZLIB_DLL


236 #ifde‡
ZLIB_INTERNAL


237 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

238 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

240 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

241 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

246 #i‚de‡
ZEXTERN


247 
	#ZEXTERN
 

	)

249 #i‚de‡
ZEXPORT


250 
	#ZEXPORT


	)

252 #i‚de‡
ZEXPORTVA


253 
	#ZEXPORTVA


	)

256 #i‚de‡
FAR


257 
	#FAR


	)

260 #i‡!
deföed
(
__MACTYPES__
)

261 
	tByã
;

263 
	tuI¡
;

264 
	tuL⁄g
;

266 #ifde‡
SMALL_MEDIUM


268 
	#Byãf
 
Byã
 
FAR


	)

270 
Byã
 
	tFAR
 
	tByãf
;

272 
	tFAR
 
	tch¨f
;

273 
	tFAR
 
	tötf
;

274 
uI¡
 
	tFAR
 
	tuI¡f
;

275 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

277 #ifde‡
STDC


278 c⁄° *
	tvoidpc
;

279 
	tFAR
 *
	tvoidpf
;

280 *
	tvoidp
;

282 
Byã
 c⁄° *
	tvoidpc
;

283 
Byã
 
	tFAR
 *
	tvoidpf
;

284 
Byã
 *
	tvoidp
;

288 
	~<sys/ty≥s.h
>

289 
	~<uni°d.h
>

290 #ifde‡
VMS


291 
	~<unixio.h
>

293 
	#z_off_t
 
off_t


	)

295 #i‚de‡
SEEK_SET


296 
	#SEEK_SET
 0

	)

297 
	#SEEK_CUR
 1

	)

298 
	#SEEK_END
 2

	)

300 #i‚de‡
z_off_t


301 
	#z_off_t
 

	)

304 #i‡
deföed
(
__OS400__
)

305 
	#NO_v¢¥ötf


	)

308 #i‡
deföed
(
__MVS__
)

309 
	#NO_v¢¥ötf


	)

310 #ifde‡
FAR


311 #unde‡
FAR


316 #i‡
deföed
(
__MVS__
)

317 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

318 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

319 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

320 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

321 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

322 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

323 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

324 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

325 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

326 #¥agm®
m≠
(
com¥essBound
,"CMBND")

327 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

328 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

329 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/locale.h

20 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


24 #i‚de‡
_BITS_LOCALE_H


25 
	#_BITS_LOCALE_H
 1

	)

29 
	m__LC_CTYPE
 = 0,

30 
	m__LC_NUMERIC
 = 1,

31 
	m__LC_TIME
 = 2,

32 
	m__LC_COLLATE
 = 3,

33 
	m__LC_MONETARY
 = 4,

34 
	m__LC_MESSAGES
 = 5,

35 
	m__LC_ALL
 = 6,

36 
	m__LC_PAPER
 = 7,

37 
	m__LC_NAME
 = 8,

38 
	m__LC_ADDRESS
 = 9,

39 
	m__LC_TELEPHONE
 = 10,

40 
	m__LC_MEASUREMENT
 = 11,

41 
	m__LC_IDENTIFICATION
 = 12

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
264
7129
cuobjdump_to_ptxplus/cuobjdumpInst.cc
cuobjdump_to_ptxplus/cuobjdumpInst.h
cuobjdump_to_ptxplus/cuobjdumpInstList.cc
cuobjdump_to_ptxplus/cuobjdumpInstList.h
cuobjdump_to_ptxplus/cuobjdump_to_ptxplus.cc
cuobjdump_to_ptxplus/elf.l
cuobjdump_to_ptxplus/elf.y
cuobjdump_to_ptxplus/elf_lexer.cc
cuobjdump_to_ptxplus/elf_parser.cc
cuobjdump_to_ptxplus/elf_parser.hh
cuobjdump_to_ptxplus/header.l
cuobjdump_to_ptxplus/header.y
cuobjdump_to_ptxplus/header_lexer.cc
cuobjdump_to_ptxplus/header_parser.cc
cuobjdump_to_ptxplus/header_parser.hh
cuobjdump_to_ptxplus/lex.ptx_.c
cuobjdump_to_ptxplus/ptx.tab.c
cuobjdump_to_ptxplus/ptx.tab.h
cuobjdump_to_ptxplus/ptx_parser.h
cuobjdump_to_ptxplus/sass.l
cuobjdump_to_ptxplus/sass.y
cuobjdump_to_ptxplus/sass_lexer.cc
cuobjdump_to_ptxplus/sass_parser.cc
cuobjdump_to_ptxplus/sass_parser.hh
cuobjdump_to_ptxplus/stringList.cc
cuobjdump_to_ptxplus/stringList.h
libcuda/cuda_runtime_api.cc
libcuda/cuobjdump.l
libcuda/cuobjdump.y
libcuda/cuobjdump_lexer.c
libcuda/cuobjdump_parser.c
libcuda/cuobjdump_parser.h
libopencl/nvopencl_wrapper.cc
libopencl/opencl_runtime_api.cc
src/abstract_hardware_model.cc
src/abstract_hardware_model.h
src/cuda-sim/cuda-math.h
src/cuda-sim/cuda-sim.cc
src/cuda-sim/cuda-sim.h
src/cuda-sim/cuda_device_printf.cc
src/cuda-sim/cuda_device_printf.h
src/cuda-sim/decuda_pred_table/decuda_pred_table.cc
src/cuda-sim/decuda_pred_table/decuda_pred_table.h
src/cuda-sim/instructions.cc
src/cuda-sim/instructions.h
src/cuda-sim/lex.ptx_.c
src/cuda-sim/lex.ptxinfo_.c
src/cuda-sim/memory.cc
src/cuda-sim/memory.h
src/cuda-sim/opcodes.h
src/cuda-sim/ptx-stats.cc
src/cuda-sim/ptx-stats.h
src/cuda-sim/ptx.l
src/cuda-sim/ptx.tab.c
src/cuda-sim/ptx.tab.h
src/cuda-sim/ptx.y
src/cuda-sim/ptx_ir.cc
src/cuda-sim/ptx_ir.h
src/cuda-sim/ptx_loader.cc
src/cuda-sim/ptx_loader.h
src/cuda-sim/ptx_parser.cc
src/cuda-sim/ptx_parser.h
src/cuda-sim/ptx_sim.cc
src/cuda-sim/ptx_sim.h
src/cuda-sim/ptxinfo.l
src/cuda-sim/ptxinfo.tab.c
src/cuda-sim/ptxinfo.tab.h
src/cuda-sim/ptxinfo.y
src/debug.cc
src/debug.h
src/gpgpu-sim/addrdec.cc
src/gpgpu-sim/addrdec.h
src/gpgpu-sim/delayqueue.h
src/gpgpu-sim/dram.cc
src/gpgpu-sim/dram.h
src/gpgpu-sim/dram_sched.cc
src/gpgpu-sim/dram_sched.h
src/gpgpu-sim/gpu-cache.cc
src/gpgpu-sim/gpu-cache.h
src/gpgpu-sim/gpu-misc.cc
src/gpgpu-sim/gpu-misc.h
src/gpgpu-sim/gpu-sim.cc
src/gpgpu-sim/gpu-sim.h
src/gpgpu-sim/histogram.cc
src/gpgpu-sim/histogram.h
src/gpgpu-sim/icnt_wrapper.cc
src/gpgpu-sim/icnt_wrapper.h
src/gpgpu-sim/l2cache.cc
src/gpgpu-sim/l2cache.h
src/gpgpu-sim/mem_fetch.cc
src/gpgpu-sim/mem_fetch.h
src/gpgpu-sim/mem_latency_stat.cc
src/gpgpu-sim/mem_latency_stat.h
src/gpgpu-sim/scoreboard.cc
src/gpgpu-sim/scoreboard.h
src/gpgpu-sim/shader.cc
src/gpgpu-sim/shader.h
src/gpgpu-sim/stack.cc
src/gpgpu-sim/stack.h
src/gpgpu-sim/stat-tool.cc
src/gpgpu-sim/stat-tool.h
src/gpgpu-sim/stats.h
src/gpgpu-sim/visualizer.cc
src/gpgpu-sim/visualizer.h
src/gpgpusim_entrypoint.cc
src/gpgpusim_entrypoint.h
src/intersim/allocator.cpp
src/intersim/arbiter.cpp
src/intersim/booksim_config.cpp
src/intersim/buffer_state.cpp
src/intersim/config.l
src/intersim/config.tab.c
src/intersim/config.tab.h
src/intersim/config.y
src/intersim/config_tab.cpp
src/intersim/config_utils.cpp
src/intersim/configlex.cpp
src/intersim/credit.cpp
src/intersim/event_router.cpp
src/intersim/flit.cpp
src/intersim/fly.cpp
src/intersim/injection.cpp
src/intersim/interconnect_interface.cpp
src/intersim/interconnect_interface.h
src/intersim/iq_router.cpp
src/intersim/islip.cpp
src/intersim/kncube.cpp
src/intersim/loa.cpp
src/intersim/maxsize.cpp
src/intersim/misc_utils.cpp
src/intersim/module.cpp
src/intersim/network.cpp
src/intersim/outputset.cpp
src/intersim/pim.cpp
src/intersim/random_utils.cpp
src/intersim/rng.cpp
src/intersim/rng_double.cpp
src/intersim/rng_double_wrapper.cpp
src/intersim/rng_wrapper.cpp
src/intersim/routefunc.cpp
src/intersim/router.cpp
src/intersim/selalloc.cpp
src/intersim/singlenet.cpp
src/intersim/stats.cpp
src/intersim/statwraper.cpp
src/intersim/statwraper.h
src/intersim/traffic.cpp
src/intersim/trafficmanager.cpp
src/intersim/vc.cpp
src/intersim/wavefront.cpp
src/option_parser.cc
src/option_parser.h
src/stream_manager.cc
src/stream_manager.h
src/tr1_hash_map.h
/usr/include/GL/gl.h
/usr/include/alloca.h
/usr/include/assert.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fenv.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/resource.h
/usr/include/sys/time.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/GL/glext.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fenv.h
/usr/include/bits/fenvinline.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/siginfo.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/locale.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/sys/select.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/locale.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/sys/cdefs.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
